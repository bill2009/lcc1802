; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Sun May 26 14:20:20 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
_PIN4:
	db 0
_enablechip:
	reserve 4
;void enablechip () { //pull cs low
;  digitalWrite(wizss,LOW);
	ldaD R12,4; reg:acon
	ld2z R13
	Ccall _digitalWrite
;}
L1:
	release 4
	Cretn

_disablechip:
	reserve 4
; void disablechip () {
;  digitalWrite(wizss,HIGH);
	ldaD R12,4; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;}
L2:
	release 4
	Cretn

_xferspi:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
;unsigned char xferspi(unsigned char value){
;  for(i=0;i<8;i++){
	ld2z R6
L4:
;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
	ldaD R12,7; reg:acon
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _digitalWrite
;    value=(value<<1)|digitalRead(miso);;
	ldaD R12,15; reg:acon
	Ccall _digitalRead; CALLI2(ar)
	cpy1 R10,R7
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	shl2I R10,1
	alu2 R11,R10,R15,or,or
	cpy1 R7,R11;LOADU1(reg)
;    digitalWrite(sck,HIGH);              //then pulsing the clock
	ldaD R12,5; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;    digitalWrite(sck,LOW);
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;  }
L5:
;  for(i=0;i<8;i++){
	incm R6,1
	jcI2I r6,8,lbnf,L4  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  return value;
	cpy1 R15,R7
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
L3:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_SPI_Write:
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+8); ASGNU1
;{
;  enablechip();   	// Activate the CS pin
	Ccall _enablechip
;  value=xferspi(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
	ldaD R12,240; reg:acon
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
	ld2 RL10,'O',sp,(0+8)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(data);			// Send the data byte
	ld1 R12,'O',sp,(2+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  disablechip();	// make CS pin not active
	Ccall _disablechip
;}
L8:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_SPI_Read:
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(8); flag1 
;{
;  enablechip();   	// Activate the CS pin
	Ccall _enablechip
;  value=xferspi(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
	ldaD R12,15; reg:acon
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
	ld2 RL10,'O',sp,(0+8)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(0x00);	// Send Dummy transmission to read the data
	ld2z R12
	Ccall _xferspi; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;  disablechip();	// make CS pin not active
	Ccall _disablechip
;  return(value);
	cpy1 R15,R7
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
L9:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

L11:
	db 222
	db 173
	db 190
	db 239
	db 254
	db 237
L12:
	db 192
	db 168
	db 1
	db 181
L13:
	db 255
	db 255
	db 255
	db 0
L14:
	db 192
	db 168
	db 1
	db 1
_W5100_Init:
	reserve 38
;{
;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
	ldA2 R11,'O',sp,(-8+40); reg:addr
	ldaD R8,L11; reg:acon
	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
;  unsigned char ip_addr[] = {192,168,1,181};
	ldA2 R11,'O',sp,(-12+40); reg:addr
	ldaD R8,L12; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char sub_mask[] = {255,255,255,0};
	ldA2 R11,'O',sp,(-16+40); reg:addr
	ldaD R8,L13; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char gtw_addr[] = {192,168,1,1};
	ldA2 R11,'O',sp,(-20+40); reg:addr
	ldaD R8,L14; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],
	ldaD R12,L15; reg:acon
	ld1 R13,'O',sp,(-20+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-19+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-18+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-17+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(GAR + 0,gtw_addr[0]);
	ldaD R12,1; reg:acon
	ld1 R13,'O',sp,(-20+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 1,gtw_addr[1]);
	ldaD R12,2; reg:acon
	ld1 R13,'O',sp,(-19+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 2,gtw_addr[2]);
	ldaD R12,3; reg:acon
	ld1 R13,'O',sp,(-18+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 3,gtw_addr[3]);
	ldaD R12,4; reg:acon
	ld1 R13,'O',sp,(-17+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Source Address %x:%x:%x:%x:%x:%x\n",mac_addr[0],mac_addr[1],
	ldaD R12,L22; reg:acon
	ld1 R13,'O',sp,(-8+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-7+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-6+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-5+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	ld1 R11,'O',sp,(-4+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(10); arg+f**
	ld1 R11,'O',sp,(-3+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;  SPI_Write(SAR + 0,mac_addr[0]);
	ldaD R12,9; reg:acon
	ld1 R13,'O',sp,(-8+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 1,mac_addr[1]);
	ldaD R12,10; reg:acon
	ld1 R13,'O',sp,(-7+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 2,mac_addr[2]);
	ldaD R12,11; reg:acon
	ld1 R13,'O',sp,(-6+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 3,mac_addr[3]);
	ldaD R12,12; reg:acon
	ld1 R13,'O',sp,(-5+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 4,mac_addr[4]);
	ldaD R12,13; reg:acon
	ld1 R13,'O',sp,(-4+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 5,mac_addr[5]);
	ldaD R12,14; reg:acon
	ld1 R13,'O',sp,(-3+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Subnet Mask  %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],sub_mask[2],sub_mask[3]);
	ldaD R12,L33; reg:acon
	ld1 R13,'O',sp,(-16+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-15+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-14+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-13+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SUBR + 0,sub_mask[0]);
	ldaD R12,5; reg:acon
	ld1 R13,'O',sp,(-16+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 1,sub_mask[1]);
	ldaD R12,6; reg:acon
	ld1 R13,'O',sp,(-15+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 2,sub_mask[2]);
	ldaD R12,7; reg:acon
	ld1 R13,'O',sp,(-14+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 3,sub_mask[3]);
	ldaD R12,8; reg:acon
	ld1 R13,'O',sp,(-13+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],ip_addr[2],ip_addr[3]);
	ldaD R12,L40; reg:acon
	ld1 R13,'O',sp,(-12+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-11+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-10+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-9+40)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SIPR + 0,ip_addr[0]);
	ldaD R12,15; reg:acon
	ld1 R13,'O',sp,(-12+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 1,ip_addr[1]);
	ldaD R12,16; reg:acon
	ld1 R13,'O',sp,(-11+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 2,ip_addr[2]);
	ldaD R12,17; reg:acon
	ld1 R13,'O',sp,(-10+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 3,ip_addr[3]);
	ldaD R12,18; reg:acon
	ld1 R13,'O',sp,(-9+40)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
	ldaD R12,15; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-22+40); ASGNI2(addr,reg)*;
	ldaD R12,16; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-24+40); ASGNI2(addr,reg)*;
	ldaD R12,17; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-26+40); ASGNI2(addr,reg)*;
	ldaD R12,18; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L47; reg:acon
	ld2 R10,'O',sp,(-22+40) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-24+40) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-26+40) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Setting Wiznet RMSR and TMSR\n\n");
	ldaD R12,L48; reg:acon
	Ccall _printf
;  SPI_Write(RMSR,0x55);
	ldaD R12,26; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  SPI_Write(TMSR,0x55);
	ldaD R12,27; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  printf("Done Wiznet W5100 Initialization!\n");
	ldaD R12,L49; reg:acon
	Ccall _printf
;}
L10:
	release 38
	Cretn

_close:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;{
;   if (sock != 0) return;
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L51; EQ 0
	lbr L50
L51:
;   SPI_Write(S0_CR,CR_CLOSE);
	ldaD R12,1025; reg:acon
	ldaD R13,16; reg:acon
	Ccall _SPI_Write
L53:
;   while(SPI_Read(S0_CR));
L54:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L53; NEI2(CVUI2(reg),con0)
;}
L50:
	release 4
	Cretn

_disconnect:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;{
;   if (sock != 0) return;
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L57; EQ 0
	lbr L56
L57:
;   SPI_Write(S0_CR,CR_DISCON);
	ldaD R12,1025; reg:acon
	ldaD R13,8; reg:acon
	Ccall _SPI_Write
L59:
;   while(SPI_Read(S0_CR));
L60:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L59; NEI2(CVUI2(reg),con0)
;}
L56:
	release 4
	Cretn

_socket:
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+8); ASGNU1
	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+8); ASGNU1
;{
;    uint8_t retval=0;
	ldaD R7,0; reg:acon
;    if (sock != 0) return retval;
	ld1 R11,'O',sp,(0+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L63; EQ 0
	cpy1 R15,R7
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	lbr L62
L63:
;    if (SPI_Read(S0_SR) == SOCK_CLOSED) {
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L65; NEI2(CVUI2(reg),con0)
;      close(sock);
	ld1 R12,'O',sp,(0+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _close
;    }
L65:
;    SPI_Write(S0_MR,eth_protocol);
	ldaD R12,1024; reg:acon
	ld1 R13,'O',sp,(2+8)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;    SPI_Write(S0_PORT,((tcp_port & 0xFF00) >> 8 ));
	ldaD R12,1028; reg:acon
	ld2 RL10,'O',sp,(4+8)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_PORT + 1,(tcp_port & 0x00FF));
	ldaD R12,1029; reg:acon
	ld2 R11,'O',sp,(4+8); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
	ldaD R12,1025; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
L67:
;    while(SPI_Read(S0_CR));
L68:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L67; NEI2(CVUI2(reg),con0)
;    if (SPI_Read(S0_SR) == SOCK_INIT)
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jneU2I r11,19,L70; NE
;      retval=1;
	ldaD R7,1; reg:acon
	lbr L71
L70:
;      close(sock);
	ld1 R12,'O',sp,(0+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _close
L71:
;    return retval;
	cpy1 R15,R7
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
L62:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_listen:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+8); ASGNU1
;{
;   uint8_t retval = 0;
	ldaD R11,0; reg:acon
	st1 R11,'O',sp,(-3+8); ASGNU1
;   if (sock != 0) return retval;
	ld1 R11,'O',sp,(0+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L73; EQ 0
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
	lbr L72
L73:
;   if (SPI_Read(S0_SR) == SOCK_INIT) {
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jneU2I r11,19,L75; NE
;     SPI_Write(S0_CR,CR_LISTEN);
	ldaD R12,1025; reg:acon
	ldaD R13,2; reg:acon
	Ccall _SPI_Write
L77:
;     while(SPI_Read(S0_CR));
L78:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L77; NEI2(CVUI2(reg),con0)
;     if (SPI_Read(S0_SR) == SOCK_LISTEN)
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jneU2I r11,20,L80; NE
;       retval=1;
	ldaD R11,1; reg:acon
	st1 R11,'O',sp,(-3+8); ASGNU1
	lbr L81
L80:
;       close(sock);
	ld1 R12,'O',sp,(0+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _close
L81:
;    }
L75:
;    return retval;
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
L72:
	release 6
	Cretn

_send:
	reserve 8; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
	cpy2 r6,r13; function(2055) 1
	ld2 R1,'O',sp,(4+22); reg:INDIRU2(addr)
;{
;    if (buflen <= 0 || sock != 0) return 0;
	jzU2 r1,L85; EQ 0
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jzU2 r11,L83; EQ 0
L85:
	ld2z R15
	lbr L82
L83:
;    printf("Send Size: %d\n",buflen);
	ldaD R12,L86; reg:acon
	cpy2 R13,R1 ;LOADU2(reg)*
	Ccall _printf
;    txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;    printf("TX Free Size: %d\n",txsize);
	ldaD R12,L87; reg:acon
	cpy2 R13,R0 ;LOADU2(reg)*
	Ccall _printf
;    timeout=0;
	ld2z R11
	st2 R11,'O',sp,(-8+22); ASGNU2(addr,reg)*
	lbr L89
L88:
;    while (txsize < buflen) {
;      delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;     txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;     if (timeout++ > 1000) {
	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-8+22); ASGNU2(addr,reg)*
	jnU2I r11,1000,lbdf,L91 ;LEU2 1000 11 L91; LE is flipped test & subtraction
;       printf("TX Free Size Error!\n");
	ldaD R12,L93; reg:acon
	Ccall _printf
;       disconnect(sock);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _disconnect
;       return 0;
	ld2z R15
	lbr L82
L91:
;   }
L89:
;    while (txsize < buflen) {
	jcU2 r0,r1,lbnf,L88; LT=lbnf i.e. subtract B from A and jump if borrow 
;   ptr = SPI_Read(S0_TX_WR);
	ldaD R12,1060; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-10+22); ASGNU2(addr,reg)*
;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	ldaD R12,1061; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-10+22); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDU2(r,r)
	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
;    printf("TX Buffer: %x\n",offaddr);
	ldaD R12,L94; reg:acon
	ld2 R13,'O',sp,(-4+22); reg:INDIRU2(addr)
	Ccall _printf
	lbr L96
L95:
;    while(buflen) {
;      buflen--;
	decm R1,1
;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	alu2I R11,R11,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R11,'O',R11,(16384); reg:addr
	st2 R11,'O',sp,(-6+22); ASGNU2(addr,reg)*
;      SPI_Write(realaddr,*buf);
	ld2 R12,'O',sp,(-6+22); reg:INDIRU2(addr)
	ld1 R13,'O',R6,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;      offaddr++;
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
;      buf++;
	incm R6,1
;    }
L96:
;    while(buflen) {
	jnzU2 r1,L95; NE 0
;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1060; reg:acon
	ld2 RL10,'O',sp,(-4+22)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
	ldaD R12,1061; reg:acon
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_SEND);
	ldaD R12,1025; reg:acon
	ldaD R13,32; reg:acon
	Ccall _SPI_Write
L98:
;    while(SPI_Read(S0_CR));
L99:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L98; NEI2(CVUI2(reg),con0)
;    return 1;
	ldaD R15,1; reg:acon
L82:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 8; release room for local variables 
	Cretn

_recv:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	cpy2 r7,r13; function(2055) 1
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+16); ASGNU1
	ld2 R6,'O',sp,(4+16); reg:INDIRU2(addr)
;{
;    if (buflen <= 0 || sock != 0) return 1;
	jzU2 r6,L104; EQ 0
	ld1 R11,'O',sp,(0+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L102; EQ 0
L104:
	ldaD R15,1; reg:acon
	lbr L101
L102:
;    if (buflen > MAX_BUF)
	jnU2I r6,512,lbdf,L105 ;LEU2 512 6 L105; LE is flipped test & subtraction
;      buflen=MAX_BUF - 2;
	ldaD R6,510; reg:acon
L105:
;    ptr = SPI_Read(S0_RX_RD);
	ldaD R12,1064; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	ldaD R12,1065; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
;    printf("RX Buffer: %x\n",offaddr);
	ldaD R12,L107; reg:acon
	cpy2 R13,R1 ;LOADU2(reg)*
	Ccall _printf
	lbr L109
L108:
;    while(buflen) {
;      buflen--;
	decm R6,1
;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R0,'O',R11,(24576); reg:addr
;      *buf = SPI_Read(realaddr);
	cpy2 R12,R0 ;LOADU2(reg)*
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	str1 R11,R7; ASGNU1(indaddr,reg)
;      offaddr++;
	incm R1,1
;      buf++;
	incm R7,1
;    }
L109:
;    while(buflen) {
	jnzU2 r6,L108; NE 0
;    *buf='\0';        // String terminated character
	ldaD R11,0; reg:acon
	str1 R11,R7; ASGNU1(indaddr,reg)
;    SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1064; reg:acon
	cpy2 RL10,R1
	zext4 RL10; CVUI4 jan 16
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
	ldaD R12,1065; reg:acon
	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_RECV);
	ldaD R12,1025; reg:acon
	ldaD R13,64; reg:acon
	Ccall _SPI_Write
;    delay(5);    // Wait for Receive Process
	ldaD R12,5; reg:acon
	Ccall _delay
;    return 1;
	ldaD R15,1; reg:acon
L101:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_recv_size:
	reserve 6
;{
;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
	ldaD R12,1062; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
	ldaD R12,1063; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2I R10,R10,255,ani,ani
	;removed ?	cpy2 R10,R10
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
	cpy2 R15,R11 ;LOADU2(reg)*
L111:
	release 6
	Cretn

_strindex:
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r6,r13; function(2055) 1
;{
;  n=strlen(t);
	cpy2 R12,R6 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R0,R15 ;LOADU2(reg)*
;  for(i=0;*(s+i); i++) {
	ld2z R1
	lbr L116
L113:
;    if (strncmp(s+i,t,n) == 0)
	alu2 R12,R1,R7,add,adc
	cpy2 R13,R6 ;LOADP2(reg)
	st2 r0,'O',sp,(4); arg+f**
	Ccall _strncmp; CALLI2(ar)
	jnzU2 r15,L117; NE 0
;      return i;
	cpy2 R15,R1 ;LOADI2(reg)*
	lbr L112
L117:
;  }
L114:
;  for(i=0;*(s+i); i++) {
	incm R1,1
L116:
	alu2 R11,R1,R7,add,adc
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L113; NEI2(CVUI2(reg),con0)
;  return -1;
	ldaD R15,-1; reg:acon
L112:
	release 6; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_main: ;copt is peeping you now!
	reserve 28; save room for local variables
	pushr r1
	pushr r6
	pushr r7
	reserve 6; save room for outgoing arguments
;int main(void){
;  printf("Wiznet 5100 webmastery begins here!\n");
	ldaD R12,L120; reg:acon
	Ccall _printf
;  W5100_Init();
	Ccall _W5100_Init
;  sockreg=0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_sockreg),0; ASGNU1
;  tempvalue=0;
	ld2z R11
	st2 R11,'D',(_tempvalue),0; ASGNI2(addr,reg)*;
;  ledmode=1;
	ldaD R11,1; reg:acon
	st1 R11,'D',(_ledmode),0; ASGNU1
;  ledeye=0x01;                  // Initial LED Eye Variables
	ldaD R11,1; reg:acon
	st1 R11,'D',(_ledeye),0; ASGNU1
;  ledsign=0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_ledsign),0; ASGNU1
;  printf("WEB Server Debug Mode\n\n");
	ldaD R12,L121; reg:acon
	Ccall _printf
;  for(;;){
L122:
;    sockstat=SPI_Read(S0_SR);
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11;LOADU1(reg)
;    switch(sockstat) {
	cpy1 R1,R7
	zExt R1 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2z R11
	jzU2 r1,L129; EQ 0
	jcI2 r1,r11,lbnf,L122; LT=lbnf i.e. subtract B from A and jump if borrow 
L165:
	jcI2I r1,23,lbnf,L122  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r1,29,lbnf,L122; GT reverse  the subtraction
	cpy2 R11,R1
	shl2I R11,1
	ld2 R11,'O',R11,(L166-46);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L166:
	dw L135
	dw L163
	dw L122
	dw L163
	dw L163
	dw L163
	dw L163
L129:
;        if (socket(sockreg,MR_TCP,TCP_PORT) > 0) {
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,1; reg:acon
	ldaD R11,80; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _socket; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jnI2I r11,0,lbdf,L122 ;LEI2 0 11 L122; LE is flipped test & subtraction
;	  if (listen(sockreg) <= 0)
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _listen; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jnI2I r11,0,lbnf,L132; GT reverse  the subtraction
;	    delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
L132:
;          printf("Socket Listen!\n");
	ldaD R12,L134; reg:acon
	Ccall _printf
;	}
;	break;
	lbr L122
L135:
;        rsize=recv_size();
	Ccall _recv_size;CALLU2(ar)*
	cpy2 R6,R15 ;LOADU2(reg)*
;	printf("Size: %d\n",rsize);
	ldaD R12,L136; reg:acon
	cpy2 R13,R6 ;LOADU2(reg)*
	Ccall _printf
;	if (rsize > 0) {
	jzU2 r6,L137; EQ 0
;	  if (recv(sockreg,buf,rsize) <= 0) break;
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	st2 r6,'O',sp,(4); arg+f**
	Ccall _recv;CALLU2(ar)*
	jnzU2 r15,L139; NE 0
	lbr L122
L139:
;  	  printf("Content:\n%s\n",buf);
	ldaD R12,L141; reg:acon
	ldaD R13,_buf; reg:acon
	Ccall _printf
;	  getidx=strindex((char *)buf,"GET /");
	ldaD R12,_buf; reg:acon
	ldaD R13,L142; reg:acon
	Ccall _strindex; CALLI2(ar)
	st2 R15,'O',sp,(-6+42); ASGNI2(addr,reg)*;
;	  postidx=strindex((char *)buf,"POST /");
	ldaD R12,_buf; reg:acon
	ldaD R13,L143; reg:acon
	Ccall _strindex; CALLI2(ar)
	st2 R15,'O',sp,(-4+42); ASGNI2(addr,reg)*;
;	  if (getidx >= 0 || postidx >= 0) {
	ld2z R11
	ld2 R10,'O',sp,(-6+42) ;reg:INDIRI2(addr)
	jcI2 r10,r11,lbdf,L146; GE is flipped test from LT
	ld2 R10,'O',sp,(-4+42) ;reg:INDIRI2(addr)
	jcI2 r10,r11,lbnf,L144; LT=lbnf i.e. subtract B from A and jump if borrow 
L146:
;	    printf("Req. Check!\n");
	ldaD R12,L147; reg:acon
	Ccall _printf
;	    if (postidx >= 0) {
	ld2 R11,'O',sp,(-4+42) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbnf,L148  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;	      if (strindex((char *)buf,"radio=0") > 0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L152; reg:acon
	Ccall _strindex; CALLI2(ar)
	jnI2I r15,0,lbdf,L150 ;LEI2 0 15 L150; LE is flipped test & subtraction
;	        ledmode=0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_ledmode),0; ASGNU1
L150:
;	      if (strindex((char *)buf,"radio=1") > 0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L155; reg:acon
	Ccall _strindex; CALLI2(ar)
	jnI2I r15,0,lbdf,L153 ;LEI2 0 15 L153; LE is flipped test & subtraction
;	        ledmode=1;
	ldaD R11,1; reg:acon
	st1 R11,'D',(_ledmode),0; ASGNU1
L153:
;        }
L148:
;	    printf("Req. Send!\n");
	ldaD R12,L156; reg:acon
	Ccall _printf
;	    strcpy((char *)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"
	ldaD R12,_buf; reg:acon
	ldaD R13,L157; reg:acon
	Ccall _strcpy
;	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
	ldaD R12,_buf; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _send;CALLU2(ar)*
	jnzU2 r15,L158; NE 0
	lbr L122
L158:
;	    strcpy((char *)buf,"<strong>Temp: <input type=\"text\" size=2 value=\""
	ldaD R12,_buf; reg:acon
	ldaD R13,L160; reg:acon
	Ccall _strcpy
;	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
	ldaD R12,_buf; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _send;CALLU2(ar)*
	jnzU2 r15,L161; NE 0
	lbr L122
L161:
;          }
L144:
;	  disconnect(sockreg);
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _disconnect
;        } else
	lbr L122
L137:
;	  delay(1);    // Wait for request
	ldaD R12,1; reg:acon
	Ccall _delay
;	break;
	lbr L122
L163:
;	close(sockreg);
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _close
;	printf("Socket Close!\n");
	ldaD R12,L164; reg:acon
	Ccall _printf
;	break;
;  }
;  for(;;){
	lbr L122
;  return 0;
	ld2z R15
L119:
	release 6; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	release 28; release room for local variables 
	Cretn

_strncmp:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L172
L169:
;	if (*s1 != *s2)
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L173; EQI2(reg,reg)
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbdf,L176; GE is flipped test from LT
	ldaD R6,-1; reg:acon
	lbr L177
L176:
	ldaD R6,1; reg:acon
L177:
	cpy2 R15,R6 ;LOADI2(reg)*
	lbr L168
L173:
;	else if (*s1 == '\0')
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L178; NEI2(CVUI2(reg),con0)
;	    return 0;
	ld2z R15
	lbr L168
L178:
L170:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L172:
	jnzU2 r7,L169; NE 0
;    return 0;
	ld2z R15
L168:
	popr r7
	popr r6
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L184
L181:
L182:
	incm R13,1
	incm R12,1
L184:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	jnzU1 r11,L181; NEI2(CVUI2(reg),con0)
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L180:
	release 2
	Cretn

_strlen:
	pushr r7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L187
L186:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L187:
;	while (*str != 0) {
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L186; NEI2(CVUI2(reg),con0)
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)*
L185:
	popr r7
	Cretn

_printstr:
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L191
L190:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg) opt1
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out; CALLI2(ar)
L191:
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 r11,L190; NEI2(CVUI2(reg),con0)
;}
L189:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:
	reserve 62; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked&floaty
	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
;   if (flt < 0.0) {
	ld4 RL10,'D',(L196),0;INDIRF4(addr)
	jcF4 RL6,RL10,lbdf,L194;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      flt *= -1.0 ;
	ld4 RL8,'D',(L197),0;INDIRF4(addr)
	cpy4 RL10,RL6; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   } else {
	lbr L195
L194:
;      if (use_leading_plus) {
	lbr L198
;         *output++ = '+' ;
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L198:
;   }
L195:
;   if (dec_digits < 8) {
	jcI2I r1,8,lbdf,L200; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6; LOADU4(reg)
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   }
L200:
;	mult=mult_nums[dec_digits];
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
;   wholeNum = flt;
	cpy4 RL8,RL6; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-8+80)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6; LOADU4(reg)
	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-16+80)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	alu2 R0,R15,R0,add,adc
;   if (dec_digits > 0) {
	jzU2 r1,L202; EQ 0
;		*output++ = '.' ;
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	cpy2 R11,R1 ;LOADI2(reg)*
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	}
L202:
;   return outbfr;
	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
L193:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 62; release room for local variables 
	Cretn

_itoa:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-4+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L205; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R6,R11 ;LOADU2(reg)*
;	} else{
	lbr L206
L205:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R6,R11 ;LOADU2(reg)*
;	}
L206:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L208
L207:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L213
L210:
L211:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L213:
	jcU2 r6,r7,lbdf,L210 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	jnzU2 r0,L217; NE 0
	jnzU2 r1,L217; NE 0
	jneU2I r7,1,L214; NE
L217:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R1,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;			flag='y';
	ldaD R0,121; reg:acon
;		}
L214:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R7,R15 ;LOADU2(reg)*
;	}
L208:
;	while(k>0){
	jnzU2 r7,L207; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L204:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_ltoa:
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL6,RL10,lbdf,L219; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
;	}
L219:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6; LOADI4*
	st2 r1,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R1 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
L218:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L221:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L222:
	release 18
	Cretn

_printflt:
	reserve 28
	st2 r12,'O',sp,(30); flag1 
	st2 r13,'O',sp,(32); flag1 
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
	ldA2 R11,'O',sp,(-22+30); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L223:
	release 28
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L225; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L226
L225:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L226:
;}
L224:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L227:
	release 4
	Cretn

_printf:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R1
;	int * this=(int *)&ptr;
	ldA2 R6,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R6,2
	incm R1,1
	lbr L230
L229:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L232;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L233
L232:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R0,R7
	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jcI2I r0,99,lbnf,L253  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r0,108,lbnf,L254; GT reverse  the subtraction
	cpy2 R11,R0
	shl2I R11,1
	ld2 R11,'O',R11,(L255-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L255:
	dw L239
	dw L237
	dw L234
	dw L248
	dw L234
	dw L234
	dw L237
	dw L234
	dw L234
	dw L241
L253:
	jeqU2I r0,88,L240;EQI2(reg,con)
	lbr L234
L254:
	ldaD R11,115; reg:acon
	jeqI2 r0,r11,L238; EQI2(reg,reg)
	jcI2 r0,r11,lbnf,L234; LT=lbnf i.e. subtract B from A and jump if borrow 
L257:
	jeqU2I r0,120,L240;EQI2(reg,con)
	lbr L234
L237:
;					printint(*this++);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L235
L238:
;					printstr((char*) *this++);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L235
L239:
;					putc((unsigned int) *this++);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L235
L240:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L235
L241:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L242; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L244; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L244:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L246; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R6,4
;						} else{
	lbr L247
L246:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L247:
;						argslot+=2;
	incm R1,2
;						break;
	lbr L235
L242:
L248:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L249; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L251; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L251:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R6,4
;						argslot+=2;
	incm R1,2
;						break;
	lbr L235
L249:
L234:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L235:
;		} //%
L233:
;	} //while
L230:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L229; NEI2(CVUI2(reg),con0)
;} //prtf
L228:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L259; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L260:
;	while(1);
L261:
	lbr L260
;}
L258:
	release 4
	Cretn

_memcmp:
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L265
L264:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	incm R0,1
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R6,R11,R10,sm,smb
;    }
L265:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jzU2 r11,L267; EQ 0
	jzU2 r6,L264; EQ 0
L267:
;    return v;
	cpy2 R15,R6 ;LOADI2(reg)*
L263:
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_memcpy:
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R1,R13 ;LOADP2(reg)
	lbr L270
L269:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,1
	cpy2 R10,R1 ;LOADP2(reg)
	cpy2 R1,R10
	incm R1,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L270:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L269; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L268:
	popr r7
	popr r6
	popr r1
	Cretn

_memset:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R6,R12 ;LOADP2(reg)
	lbr L274
L273:
;        *p++ = (unsigned char)c;
	cpy2 R11,R6 ;LOADP2(reg)
	cpy2 R6,R11
	incm R6,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L274:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L273; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L272:
	popr r7
	popr r6
	Cretn

_delay:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R6,1; reg:acon
	lbr L280
L277:
;		oneMs();
	Ccall _oneMs; CALLI2(ar)
;	}
L278:
;	for (i=1;i!=howlong;i++){
	incm R6,1
L280:
	jneU2 r6,r7,L277; NE
;}
L276:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L281:
	Cretn

_ledsign:
	db 1 dup (0); zerofill global
_ledeye:
	db 1 dup (0); zerofill global
_ledmode:
	db 1 dup (0); zerofill global
_tempvalue:
	db 2 dup (0); zerofill global
_buf:
	db 512 dup (0); zerofill global
_sockreg:
	db 1 dup (0); zerofill global
L259:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L197:
	dd 0xbf800000
	align 4
L196:
	dd 0x0
L164:
	db 83
	db 111
	db 99
	db 107
	db 101
	db 116
	db 32
	db 67
	db 108
	db 111
	db 115
	db 101
	db 33
	db 10
	db 0
L160:
	db 60
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 84
	db 101
	db 109
	db 112
	db 58
	db 32
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 116
	db 101
	db 120
	db 116
	db 34
	db 32
	db 115
	db 105
	db 122
	db 101
	db 61
	db 50
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 49
	db 56
	db 48
	db 50
	db 33
	db 32
	db 34
	db 62
	db 32
	db 60
	db 115
	db 117
	db 112
	db 62
	db 79
	db 60
	db 47
	db 115
	db 117
	db 112
	db 62
	db 67
	db 13
	db 10
	db 60
	db 112
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 48
	db 34
	db 32
	db 114
	db 97
	db 100
	db 105
	db 111
	db 115
	db 116
	db 97
	db 116
	db 48
	db 62
	db 66
	db 108
	db 105
	db 110
	db 107
	db 105
	db 110
	db 103
	db 32
	db 76
	db 69
	db 68
	db 13
	db 10
	db 60
	db 98
	db 114
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 49
	db 34
	db 32
	db 114
	db 97
	db 100
	db 105
	db 111
	db 115
	db 116
	db 97
	db 116
	db 49
	db 62
	db 83
	db 99
	db 97
	db 110
	db 110
	db 105
	db 110
	db 103
	db 32
	db 76
	db 69
	db 68
	db 13
	db 10
	db 60
	db 47
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 60
	db 112
	db 62
	db 13
	db 10
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 115
	db 117
	db 98
	db 109
	db 105
	db 116
	db 34
	db 62
	db 13
	db 10
	db 60
	db 47
	db 102
	db 111
	db 114
	db 109
	db 62
	db 60
	db 47
	db 115
	db 112
	db 97
	db 110
	db 62
	db 60
	db 47
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 47
	db 104
	db 116
	db 109
	db 108
	db 62
	db 13
	db 10
	db 0
L157:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 45
	db 84
	db 121
	db 112
	db 101
	db 58
	db 32
	db 116
	db 101
	db 120
	db 116
	db 47
	db 104
	db 116
	db 109
	db 108
	db 13
	db 10
	db 13
	db 10
	db 60
	db 104
	db 116
	db 109
	db 108
	db 62
	db 60
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 115
	db 112
	db 97
	db 110
	db 32
	db 115
	db 116
	db 121
	db 108
	db 101
	db 61
	db 34
	db 99
	db 111
	db 108
	db 111
	db 114
	db 58
	db 35
	db 48
	db 48
	db 48
	db 48
	db 65
	db 48
	db 34
	db 62
	db 13
	db 10
	db 60
	db 104
	db 49
	db 62
	db 69
	db 109
	db 98
	db 101
	db 100
	db 100
	db 101
	db 100
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 60
	db 47
	db 104
	db 49
	db 62
	db 13
	db 10
	db 60
	db 104
	db 51
	db 62
	db 65
	db 86
	db 82
	db 74
	db 97
	db 122
	db 122
	db 32
	db 77
	db 101
	db 103
	db 97
	db 51
	db 50
	db 56
	db 32
	db 97
	db 110
	db 100
	db 32
	db 87
	db 73
	db 90
	db 56
	db 49
	db 49
	db 77
	db 74
	db 60
	db 47
	db 104
	db 51
	db 62
	db 13
	db 10
	db 60
	db 112
	db 62
	db 60
	db 102
	db 111
	db 114
	db 109
	db 32
	db 109
	db 101
	db 116
	db 104
	db 111
	db 100
	db 61
	db 34
	db 80
	db 79
	db 83
	db 84
	db 34
	db 62
	db 13
	db 10
	db 0
L156:
	db 82
	db 101
	db 113
	db 46
	db 32
	db 83
	db 101
	db 110
	db 100
	db 33
	db 10
	db 0
L155:
	db 114
	db 97
	db 100
	db 105
	db 111
	db 61
	db 49
	db 0
L152:
	db 114
	db 97
	db 100
	db 105
	db 111
	db 61
	db 48
	db 0
L147:
	db 82
	db 101
	db 113
	db 46
	db 32
	db 67
	db 104
	db 101
	db 99
	db 107
	db 33
	db 10
	db 0
L143:
	db 80
	db 79
	db 83
	db 84
	db 32
	db 47
	db 0
L142:
	db 71
	db 69
	db 84
	db 32
	db 47
	db 0
L141:
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 58
	db 10
	db 37
	db 115
	db 10
	db 0
L136:
	db 83
	db 105
	db 122
	db 101
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
L134:
	db 83
	db 111
	db 99
	db 107
	db 101
	db 116
	db 32
	db 76
	db 105
	db 115
	db 116
	db 101
	db 110
	db 33
	db 10
	db 0
L121:
	db 87
	db 69
	db 66
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 32
	db 68
	db 101
	db 98
	db 117
	db 103
	db 32
	db 77
	db 111
	db 100
	db 101
	db 10
	db 10
	db 0
L120:
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 53
	db 49
	db 48
	db 48
	db 32
	db 119
	db 101
	db 98
	db 109
	db 97
	db 115
	db 116
	db 101
	db 114
	db 121
	db 32
	db 98
	db 101
	db 103
	db 105
	db 110
	db 115
	db 32
	db 104
	db 101
	db 114
	db 101
	db 33
	db 10
	db 0
L107:
	db 82
	db 88
	db 32
	db 66
	db 117
	db 102
	db 102
	db 101
	db 114
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L94:
	db 84
	db 88
	db 32
	db 66
	db 117
	db 102
	db 102
	db 101
	db 114
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L93:
	db 84
	db 88
	db 32
	db 70
	db 114
	db 101
	db 101
	db 32
	db 83
	db 105
	db 122
	db 101
	db 32
	db 69
	db 114
	db 114
	db 111
	db 114
	db 33
	db 10
	db 0
L87:
	db 84
	db 88
	db 32
	db 70
	db 114
	db 101
	db 101
	db 32
	db 83
	db 105
	db 122
	db 101
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
L86:
	db 83
	db 101
	db 110
	db 100
	db 32
	db 83
	db 105
	db 122
	db 101
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
L49:
	db 68
	db 111
	db 110
	db 101
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 87
	db 53
	db 49
	db 48
	db 48
	db 32
	db 73
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 33
	db 10
	db 0
L48:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 82
	db 77
	db 83
	db 82
	db 32
	db 97
	db 110
	db 100
	db 32
	db 84
	db 77
	db 83
	db 82
	db 10
	db 10
	db 0
L47:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 73
	db 80
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L40:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 73
	db 80
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L33:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 117
	db 98
	db 110
	db 101
	db 116
	db 32
	db 77
	db 97
	db 115
	db 107
	db 32
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L22:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 111
	db 117
	db 114
	db 99
	db 101
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 10
	db 0
L15:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 71
	db 97
	db 116
	db 101
	db 119
	db 97
	db 121
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
	include lcc1802Epilofl.inc
	include LCC1802fp.inc
	include IO1802.inc
