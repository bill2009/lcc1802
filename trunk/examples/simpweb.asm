; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Sun Jun 02 16:37:00 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
_PIN4:
	db 0
_enablechip:
	reserve 4
;void enablechip () { //pull cs low
;  setqoff();//digitalWrite(wizss,LOW);
	Ccall _setqoff; CALLI2(ar)
;}
L1:
	release 4
	Cretn

_disablechip:
	reserve 4
; void disablechip () {
;  setqon();//digitalWrite(wizss,HIGH);
	Ccall _setqon; CALLI2(ar)
;}
L2:
	release 4
	Cretn

_xferspi:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
;unsigned char xferspi(unsigned char value){
;  for(i=0;i<8;i++){
	ld2z R6
L4:
;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
	ldaD R12,7; reg:acon
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _digitalWrite
;    value=(value<<1)|digitalRead(miso);;
	ldaD R12,15; reg:acon
	Ccall _digitalRead; CALLI2(ar)
	cpy1 R10,R7
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	shl2I R10,1
	alu2 R11,R10,R15,or,or
	cpy1 R7,R11;LOADU1(reg)
;    digitalWrite(sck,HIGH);              //then pulsing the clock
	ldaD R12,5; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;    digitalWrite(sck,LOW);
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;  }
L5:
;  for(i=0;i<8;i++){
	incm R6,1
	jcI2I r6,8,lbnf,L4  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  return value;
	cpy1 R15,R7
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
L3:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_xferspi2:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;unsigned char xferspi2(unsigned int value){
;  for(i=0;i<8;i++){
	ld2z R6
L9:
;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
	ldaD R12,7; reg:acon
	alu2I R11,R7,128,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _digitalWrite
;    value=(value<<1)|digitalRead(miso);;
	ldaD R12,15; reg:acon
	Ccall _digitalRead; CALLI2(ar)
	cpy2 R10,R7
	shl2I R10,1
	cpy2 R11,R15 ;LOADU2(reg)*
	alu2 R7,R10,R11,or,or
;    out(1,PIN4);              //then pulsing the clock
	ldaD R12,1; reg:acon
	ld1 R13,'D',(_PIN4),0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out; CALLI2(ar)
;  }
L10:
;  for(i=0;i<8;i++){
	incm R6,1
	jcI2I r6,8,lbnf,L9  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  return value;
	cpy1 R11,R7;LOADU1(reg)
	cpy1 R15,R11
	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
L8:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_SPI_Write:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+8); ASGNU1
;{
;  enableroutine();   	// Activate the CS pin
;  spiroutine1(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
	req
	ldaD R12,240; reg:acon
	Ccall _xferspif2;CALLU2(ar)*
;  spiroutine1(addr >>8);// was((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	cpy2 R12,R11
	ghi	R12	;opt2
	plo	R12
	ldi	0
	phi	R12
	Ccall _xferspif2;CALLU2(ar)*
;  spiroutine1(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _xferspif2;CALLU2(ar)*
;  spiroutine2(data);			// Send the data byte
	ld1 R11,'O',sp,(2+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R12,R11 ;LOADU2(reg)*
	Ccall _xferspif2;CALLU2(ar)*
;  disableroutine();	// make CS pin not active
	seq
;}
L13:
	release 6
	Cretn

_SPI_Read:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
;{
;  unsigned char data=0; //dummy
	ldaD R11,0; reg:acon
	st1 R11,'O',sp,(-4+8); ASGNU1
;  enableroutine();   	// Activate the CS pin
;  spiroutine1(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
	req
	ldaD R12,15; reg:acon
	Ccall _xferspif2;CALLU2(ar)*
;  spiroutine1(addr >>8);// ((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	cpy2 R12,R11
	ghi	R12	;opt2
	plo	R12
	ldi	0
	phi	R12
	Ccall _xferspif2;CALLU2(ar)*
;  spiroutine1(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _xferspif2;CALLU2(ar)*
;  value=spiroutine2(0x00);	// Send Dummy transmission to read the data
	ld2z R12
	Ccall _xferspif2;CALLU2(ar)*
	cpy1 R11,R15;LOADU1(reg)
	st1 R11,'O',sp,(-3+8); ASGNU1
;  disableroutine();	// make CS pin not active
;  return(value);
	seq
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
L16:
	release 6
	Cretn

L20:
	db 222
	db 173
	db 190
	db 239
	db 254
	db 237
L21:
	db 192
	db 168
	db 1
	db 182
L22:
	db 255
	db 255
	db 255
	db 0
L23:
	db 192
	db 168
	db 1
	db 1
_W5100_Init:
	reserve 50
;{
;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
	ldA2 R11,'O',sp,(-8+52); reg:addr
	ldaD R8,L20; reg:acon
	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
;  unsigned char ip_addr[] = {192,168,1,182};
	ldA2 R11,'O',sp,(-12+52); reg:addr
	ldaD R8,L21; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char sub_mask[] = {255,255,255,0};
	ldA2 R11,'O',sp,(-16+52); reg:addr
	ldaD R8,L22; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char gtw_addr[] = {192,168,1,1};
	ldA2 R11,'O',sp,(-20+52); reg:addr
	ldaD R8,L23; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_Write
;  printf("MR=%x\n",SPI_Read(MR));
	ld2z R12
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L24; reg:acon
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _printf
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],
	ldaD R12,L25; reg:acon
	ld1 R13,'O',sp,(-20+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-19+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-18+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-17+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(GAR + 0,gtw_addr[0]);
	ldaD R12,1; reg:acon
	ld1 R13,'O',sp,(-20+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 1,gtw_addr[1]);
	ldaD R12,2; reg:acon
	ld1 R13,'O',sp,(-19+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 2,gtw_addr[2]);
	ldaD R12,3; reg:acon
	ld1 R13,'O',sp,(-18+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 3,gtw_addr[3]);
	ldaD R12,4; reg:acon
	ld1 R13,'O',sp,(-17+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Source Address %x:%x:%x:%x:%x:%x\n",mac_addr[0],mac_addr[1],
	ldaD R12,L32; reg:acon
	ld1 R13,'O',sp,(-8+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-7+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-6+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-5+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	ld1 R11,'O',sp,(-4+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(10); arg+f**
	ld1 R11,'O',sp,(-3+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;  SPI_Write(SAR + 0,mac_addr[0]);
	ldaD R12,9; reg:acon
	ld1 R13,'O',sp,(-8+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 1,mac_addr[1]);
	ldaD R12,10; reg:acon
	ld1 R13,'O',sp,(-7+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 2,mac_addr[2]);
	ldaD R12,11; reg:acon
	ld1 R13,'O',sp,(-6+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 3,mac_addr[3]);
	ldaD R12,12; reg:acon
	ld1 R13,'O',sp,(-5+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 4,mac_addr[4]);
	ldaD R12,13; reg:acon
	ld1 R13,'O',sp,(-4+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 5,mac_addr[5]);
	ldaD R12,14; reg:acon
	ld1 R13,'O',sp,(-3+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting Subnet Mask  %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],sub_mask[2],sub_mask[3]);
	ldaD R12,L43; reg:acon
	ld1 R13,'O',sp,(-16+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-15+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-14+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-13+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SUBR + 0,sub_mask[0]);
	ldaD R12,5; reg:acon
	ld1 R13,'O',sp,(-16+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 1,sub_mask[1]);
	ldaD R12,6; reg:acon
	ld1 R13,'O',sp,(-15+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 2,sub_mask[2]);
	ldaD R12,7; reg:acon
	ld1 R13,'O',sp,(-14+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 3,sub_mask[3]);
	ldaD R12,8; reg:acon
	ld1 R13,'O',sp,(-13+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],ip_addr[2],ip_addr[3]);
	ldaD R12,L50; reg:acon
	ld1 R13,'O',sp,(-12+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-11+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-10+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-9+52)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SIPR + 0,ip_addr[0]);
	ldaD R12,15; reg:acon
	ld1 R13,'O',sp,(-12+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 1,ip_addr[1]);
	ldaD R12,16; reg:acon
	ld1 R13,'O',sp,(-11+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 2,ip_addr[2]);
	ldaD R12,17; reg:acon
	ld1 R13,'O',sp,(-10+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 3,ip_addr[3]);
	ldaD R12,18; reg:acon
	ld1 R13,'O',sp,(-9+52)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
	ldaD R12,15; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-22+52); ASGNI2(addr,reg)*;
	ldaD R12,16; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-24+52); ASGNI2(addr,reg)*;
	ldaD R12,17; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-26+52); ASGNI2(addr,reg)*;
	ldaD R12,18; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L57; reg:acon
	ld2 R10,'O',sp,(-22+52) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-24+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-26+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
	ldaD R12,5; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-28+52); ASGNI2(addr,reg)*;
	ldaD R12,6; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-30+52); ASGNI2(addr,reg)*;
	ldaD R12,7; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-32+52); ASGNI2(addr,reg)*;
	ldaD R12,8; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L58; reg:acon
	ld2 R10,'O',sp,(-28+52) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-30+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-32+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),SPI_Read(GAR + 2),SPI_Read(GAR + 3));
	ldaD R12,1; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-34+52); ASGNI2(addr,reg)*;
	ldaD R12,2; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-36+52); ASGNI2(addr,reg)*;
	ldaD R12,3; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-38+52); ASGNI2(addr,reg)*;
	ldaD R12,4; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L59; reg:acon
	ld2 R10,'O',sp,(-34+52) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-36+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-38+52) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Setting Wiznet RMSR and TMSR\n\n");
	ldaD R12,L60; reg:acon
	Ccall _printf
;  SPI_Write(RMSR,0x55);
	ldaD R12,26; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  SPI_Write(TMSR,0x55);
	ldaD R12,27; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  printf("Done Wiznet W5100 Initialization!\n");
	ldaD R12,L61; reg:acon
	Ccall _printf
;}
L19:
	release 50
	Cretn

_disconnect:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;{
;   if (sock != 0) return; // Send Disconnect Command
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L63; EQ 0
	lbr L62
L63:
;   SPI_Write(S0_CR,CR_DISCON); // Wait for Disconecting Process
	ldaD R12,1025; reg:acon
	ldaD R13,8; reg:acon
	Ccall _SPI_Write
L65:
;   while(SPI_Read(S0_CR));
L66:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L65; NEI2(CVUI2(reg),con0)
;}
L62:
	release 4
	Cretn

_recv:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	cpy2 r7,r13; function(2055) 1
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+16); ASGNU1
	ld2 R6,'O',sp,(4+16); reg:INDIRU2(addr)
;{
;    if (buflen <= 0 || sock != 0) return 1;
	jzU2 r6,L71; EQ 0
	ld1 R11,'O',sp,(0+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L69; EQ 0
L71:
	ldaD R15,1; reg:acon
	lbr L68
L69:
;    if (buflen > MAX_BUF)
	jnU2I r6,512,lbdf,L72 ;LEU2 512 6 L72; LE is flipped test & subtraction
;      buflen=MAX_BUF - 2;
	ldaD R6,510; reg:acon
L72:
;    ptr = SPI_Read(S0_RX_RD);
	ldaD R12,1064; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	ldaD R12,1065; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
;    printf("RX Buffer: %x\n",offaddr);
	ldaD R12,L74; reg:acon
	cpy2 R13,R1 ;LOADU2(reg)*
	Ccall _printf
	lbr L76
L75:
;    while(buflen) {
;      buflen--;
	decm R6,1
;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R0,'O',R11,(24576); reg:addr
;      *buf = SPI_Read(realaddr);
	cpy2 R12,R0 ;LOADU2(reg)*
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	str1 R11,R7; ASGNU1(indaddr,reg)
;      offaddr++;
	incm R1,1
;      buf++;
	incm R7,1
;    }
L76:
;    while(buflen) {
	jnzU2 r6,L75; NE 0
;    *buf='\0';        // String terminated character
	ldaD R11,0; reg:acon
	str1 R11,R7; ASGNU1(indaddr,reg)
;    SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1064; reg:acon
	cpy2 RL10,R1
	zext4 RL10; CVUI4 jan 16
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
	ldaD R12,1065; reg:acon
	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_RECV);
	ldaD R12,1025; reg:acon
	ldaD R13,64; reg:acon
	Ccall _SPI_Write
;    delay(5);    // Wait for Receive Process
	ldaD R12,5; reg:acon
	Ccall _delay
;    return 1;
	ldaD R15,1; reg:acon
L68:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_recv_size:
	reserve 6
;{
;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
	ldaD R12,1062; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
	ldaD R12,1063; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2I R10,R10,255,ani,ani
	;removed ?	cpy2 R10,R10
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
	cpy2 R15,R11 ;LOADU2(reg)*
L78:
	release 6
	Cretn

_send:
	reserve 8; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
	cpy2 r6,r13; function(2055) 1
	ld2 R1,'O',sp,(4+22); reg:INDIRU2(addr)
;{
;    if (buflen <= 0 || sock != 0) return 0;
	jzU2 r1,L82; EQ 0
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jzU2 r11,L80; EQ 0
L82:
	ld2z R15
	lbr L79
L80:
;    printf("Send Size: %d\n",buflen);
	ldaD R12,L83; reg:acon
	cpy2 R13,R1 ;LOADU2(reg)*
	Ccall _printf
;    txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;    timeout=0;
	ld2z R11
	st2 R11,'O',sp,(-8+22); ASGNU2(addr,reg)*
	lbr L85
L84:
;    while (txsize < buflen) {
;      delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;     txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;     if (timeout++ > 1000) {
	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-8+22); ASGNU2(addr,reg)*
	jnU2I r11,1000,lbdf,L87 ;LEU2 1000 11 L87; LE is flipped test & subtraction
;       disconnect(sock);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _disconnect
;       return 0;
	ld2z R15
	lbr L79
L87:
;   }
L85:
;    while (txsize < buflen) {
	jcU2 r0,r1,lbnf,L84; LT=lbnf i.e. subtract B from A and jump if borrow 
;   ptr = SPI_Read(S0_TX_WR);
	ldaD R12,1060; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-10+22); ASGNU2(addr,reg)*
;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	ldaD R12,1061; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-10+22); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDU2(r,r)
	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
	lbr L90
L89:
;    while(buflen) {
;      buflen--;
	decm R1,1
;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	alu2I R11,R11,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R11,'O',R11,(16384); reg:addr
	st2 R11,'O',sp,(-6+22); ASGNU2(addr,reg)*
;      SPI_Write(realaddr,*buf);
	ld2 R12,'O',sp,(-6+22); reg:INDIRU2(addr)
	ld1 R13,'O',R6,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;      offaddr++;
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
;      buf++;
	incm R6,1
;    }
L90:
;    while(buflen) {
	jnzU2 r1,L89; NE 0
;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1060; reg:acon
	ld2 RL10,'O',sp,(-4+22)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
	ldaD R12,1061; reg:acon
	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_SEND);
	ldaD R12,1025; reg:acon
	ldaD R13,32; reg:acon
	Ccall _SPI_Write
L92:
;    while(SPI_Read(S0_CR));
L93:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L92; NEI2(CVUI2(reg),con0)
;    return 1;
	ldaD R15,1; reg:acon
L79:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 8; release room for local variables 
	Cretn

_report:
	reserve 22
	st2 r12,'O',sp,(24); flag1 
;void report(char * where){
;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
	ld2z R12
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
	ldaD R12,1024; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
	ldaD R12,1028; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
	ldaD R12,1029; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L96; reg:acon
	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(8); arg+f**
	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(10); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;}
L95:
	release 22
	Cretn

_dump:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2053) 1
;void dump(int addr){
;	printf("%x=", addr);
	ldaD R12,L98; reg:acon
	cpy2 R13,R7 ;LOADI2(reg)*
	Ccall _printf
;	for (i=addr;i<addr+32;i++){
	cpy2 R6,R7 ;LOADI2(reg)*
	lbr L102
L99:
;		if ((i%8)==0) printf("%x=",i);
	cpy2 R12,R6 ;LOADI2(reg)*
	ldaD R13,8; reg:acon
	Ccall _modi2
	jnzU2 r15,L103; NE 0
	ldaD R12,L98; reg:acon
	cpy2 R13,R6 ;LOADI2(reg)*
	Ccall _printf
L103:
;		printf("%x ",SPI_Read(addr));
	cpy2 R12,R7 ;LOADU2(reg)*
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L105; reg:acon
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _printf
;		if ((i%8)==7) printf("\n");
	cpy2 R12,R6 ;LOADI2(reg)*
	ldaD R13,8; reg:acon
	Ccall _modi2
	jneU2I r15,7,L106; NE
	ldaD R12,L108; reg:acon
	Ccall _printf
L106:
;	}
L100:
;	for (i=addr;i<addr+32;i++){
	incm R6,1
L102:
	ldA2 R11,'O',R7,(32); reg:addr
	jcI2 r6,r11,lbnf,L99; LT=lbnf i.e. subtract B from A and jump if borrow 
;}
L97:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_sendstuff:
	reserve 8
;void sendstuff(){
;	strcpy((char *)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"
	ldaD R12,_buf; reg:acon
	ldaD R13,L110; reg:acon
	Ccall _strcpy
;	sendrc=send(sockreg,buf,strlen((char *)buf)); 	// Now Send the HTTP Response
	ldaD R12,_buf; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _send;CALLU2(ar)*
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
;	strcpy((char *)buf,"<strong>Temp: <input type=\"text\" size=2 value=\""
	ldaD R12,_buf; reg:acon
	ldaD R13,L111; reg:acon
	Ccall _strcpy
;	sendrc=send(sockreg,buf,strlen((char *)buf)); // Now Send the HTTP Remaining Response
	ldaD R12,_buf; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _send;CALLU2(ar)*
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
;}
L109:
	release 8
	Cretn

_main: ;copt is peeping you now!
	reserve 2; save room for local variables
	pushr r1
	pushr r6
	pushr r7
	reserve 6; save room for outgoing arguments
;void main(void){
;	delay(1000);
	ldaD R12,1000; reg:acon
	Ccall _delay
;	digitalWrite(6,HIGH); //take wiznet out of hard reset
	ldaD R12,6; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;	report("begin");
	ldaD R12,L113; reg:acon
	Ccall _report
;	SPI_WRITE(MR,0x80);//11110000 00000000 00000000 10000000 00001111 00000000 00000000 00000000
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_WRITE; CALLI2(ar)
;	report("post reset");
	ldaD R12,L114; reg:acon
	Ccall _report
;    W5100_Init(); //initialize the wiznet chip
	Ccall _W5100_Init
;	report("after init");
	ldaD R12,L115; reg:acon
	Ccall _report
;	SPI_Write(S0_MR,MR_TCP);
	ldaD R12,1024; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));
	ldaD R12,1028; reg:acon
	ld2z R13
	Ccall _SPI_Write
;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
	ldaD R12,1029; reg:acon
	ldaD R13,80; reg:acon
	Ccall _SPI_Write
;	report("after socket init");
	ldaD R12,L116; reg:acon
	Ccall _report
;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
	ldaD R12,1025; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	report("after socket open");
	ldaD R12,L117; reg:acon
	Ccall _report
;    SPI_Write(S0_CR,CR_LISTEN);
	ldaD R12,1025; reg:acon
	ldaD R13,2; reg:acon
	Ccall _SPI_Write
;	report("after listen");
	ldaD R12,L118; reg:acon
	Ccall _report
;	printf("loop..");
	ldaD R12,L119; reg:acon
	Ccall _printf
;  for(;;){
L120:
;	  report("loop");
	ldaD R12,L124; reg:acon
	Ccall _report
;	  s0sr=SPI_Read(S0_SR);
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy1 R7,R11
	zExt R7 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
;	  if (s0sr=SOCK_ESTABLISHED){
	ldaD R11,23; reg:acon
	cpy2 R7,R11 ;LOADI2(reg)*
	jzU2 r11,L125; EQ 0
;	  	rsize=recv_size();
	Ccall _recv_size;CALLU2(ar)*
	cpy2 R6,R15 ;LOADI2(reg)*
;	  	if (rsize>0){
	jnI2I r6,0,lbdf,L127 ;LEI2 0 6 L127; LE is flipped test & subtraction
;			recvrc=recv(sockreg,buf,rsize);
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R13,_buf; reg:acon
	cpy2 R11,R6 ;LOADU2(reg)*
	st2 r11,'O',sp,(4); arg+f**
	Ccall _recv;CALLU2(ar)*
	cpy2 R1,R15 ;LOADI2(reg)*
;			printf("rsize=%d, recv=%d\n", rsize, recvrc);
	ldaD R12,L129; reg:acon
	cpy2 R13,R6 ;LOADI2(reg)*
	st2 r1,'O',sp,(4); arg+f**
	Ccall _printf
;			if (recvrc>0){
	jnI2I r1,0,lbdf,L130 ;LEI2 0 1 L130; LE is flipped test & subtraction
;				printf("Content:\n%s\n",buf);
	ldaD R12,L132; reg:acon
	ldaD R13,_buf; reg:acon
	Ccall _printf
;				sendstuff();
	Ccall _sendstuff
;				disconnect(sockreg); // Disconnect the socket
	ld1 R12,'D',(_sockreg),0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _disconnect
;			}
L130:
;		}
L127:
;	}
L125:
;	delay(1000);
	ldaD R12,1000; reg:acon
	Ccall _delay
;  }
;  for(;;){
	lbr L120
L112:
	release 6; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	release 2; release room for local variables 
	Cretn

_delay:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R6,1; reg:acon
	lbr L137
L134:
;		oneMs();
	Ccall _oneMs; CALLI2(ar)
;	}
L135:
;	for (i=1;i!=howlong;i++){
	incm R6,1
L137:
	jneU2 r6,r7,L134; NE
;}
L133:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L138:
	Cretn

_strncmp:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L144
L141:
;	if (*s1 != *s2)
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L145; EQI2(reg,reg)
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbdf,L148; GE is flipped test from LT
	ldaD R6,-1; reg:acon
	lbr L149
L148:
	ldaD R6,1; reg:acon
L149:
	cpy2 R15,R6 ;LOADI2(reg)*
	lbr L140
L145:
;	else if (*s1 == '\0')
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L150; NEI2(CVUI2(reg),con0)
;	    return 0;
	ld2z R15
	lbr L140
L150:
L142:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L144:
	jnzU2 r7,L141; NE 0
;    return 0;
	ld2z R15
L140:
	popr r7
	popr r6
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L156
L153:
L154:
	incm R13,1
	incm R12,1
L156:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	jnzU1 r11,L153; NEI2(CVUI2(reg),con0)
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L152:
	release 2
	Cretn

_strlen:
	pushr r7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L159
L158:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L159:
;	while (*str != 0) {
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L158; NEI2(CVUI2(reg),con0)
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)*
L157:
	popr r7
	Cretn

_printstr:
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L163
L162:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg) opt1
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out; CALLI2(ar)
L163:
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 r11,L162; NEI2(CVUI2(reg),con0)
;}
L161:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:
	reserve 62; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked&floaty
	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
;   if (flt < 0.0) {
	ld4 RL10,'D',(L168),0;INDIRF4(addr)
	jcF4 RL6,RL10,lbdf,L166;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      flt *= -1.0 ;
	ld4 RL8,'D',(L169),0;INDIRF4(addr)
	cpy4 RL10,RL6; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   } else {
	lbr L167
L166:
;      if (use_leading_plus) {
	lbr L170
;         *output++ = '+' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L170:
;   }
L167:
;   if (dec_digits < 8) {
	jcI2I r1,8,lbdf,L172; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6; LOADU4(reg)
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   }
L172:
;	mult=mult_nums[dec_digits];
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
;   wholeNum = flt;
	cpy4 RL8,RL6; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-8+80)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6; LOADU4(reg)
	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-16+80)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	alu2 R0,R15,R0,add,adc
;   if (dec_digits > 0) {
	jzU2 r1,L174; EQ 0
;		*output++ = '.' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	cpy2 R11,R1 ;LOADI2(reg)*
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	}
L174:
;   return outbfr;
	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
L165:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 62; release room for local variables 
	Cretn

_itoa:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-4+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L177; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R6,R11 ;LOADU2(reg)*
;	} else{
	lbr L178
L177:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R6,R11 ;LOADU2(reg)*
;	}
L178:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L180
L179:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L185
L182:
L183:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L185:
	jcU2 r6,r7,lbdf,L182 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	jnzU2 r0,L189; NE 0
	jnzU2 r1,L189; NE 0
	jneU2I r7,1,L186; NE
L189:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R1,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;			flag='y';
	ldaD R0,121; reg:acon
;		}
L186:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R7,R15 ;LOADU2(reg)*
;	}
L180:
;	while(k>0){
	jnzU2 r7,L179; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L176:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_ltoa:
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL6,RL10,lbdf,L191; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R1 ;LOADP2(reg) opt1
	incm R1,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
;	}
L191:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6; LOADI4*
	st2 r1,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R1 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
L190:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L193:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L194:
	release 18
	Cretn

_printflt:
	reserve 28
	st2 r12,'O',sp,(30); flag1 
	st2 r13,'O',sp,(32); flag1 
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
	ldA2 R11,'O',sp,(-22+30); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L195:
	release 28
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L197; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L198
L197:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L198:
;}
L196:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L199:
	release 4
	Cretn

_printf:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R1
;	int * this=(int *)&ptr;
	ldA2 R6,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R6,2
	incm R1,1
	lbr L202
L201:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L204;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L205
L204:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R0,R7
	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jcI2I r0,99,lbnf,L225  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r0,108,lbnf,L226; GT reverse  the subtraction
	cpy2 R11,R0
	shl2I R11,1
	ld2 R11,'O',R11,(L227-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L227:
	dw L211
	dw L209
	dw L206
	dw L220
	dw L206
	dw L206
	dw L209
	dw L206
	dw L206
	dw L213
L225:
	jeqU2I r0,88,L212;EQI2(reg,con)
	lbr L206
L226:
	ldaD R11,115; reg:acon
	jeqI2 r0,r11,L210; EQI2(reg,reg)
	jcI2 r0,r11,lbnf,L206; LT=lbnf i.e. subtract B from A and jump if borrow 
L229:
	jeqU2I r0,120,L212;EQI2(reg,con)
	lbr L206
L209:
;					printint(*this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L207
L210:
;					printstr((char*) *this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L207
L211:
;					putc((unsigned int) *this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L207
L212:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L207
L213:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L214; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L216; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L216:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L218; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R6,4
;						} else{
	lbr L219
L218:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L219:
;						argslot+=2;
	incm R1,2
;						break;
	lbr L207
L214:
L220:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L221; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L223; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L223:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R6,4
;						argslot+=2;
	incm R1,2
;						break;
	lbr L207
L221:
L206:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L207:
;		} //%
L205:
;	} //while
L202:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L201; NEI2(CVUI2(reg),con0)
;} //prtf
L200:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L231; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L232:
;	while(1);
L233:
	lbr L232
;}
L230:
	release 4
	Cretn

_memcmp:
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L237
L236:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 ;LOADP2(reg) opt1
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg) opt1
	incm R0,1
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R6,R11,R10,sm,smb
;    }
L237:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jzU2 r11,L239; EQ 0
	jzU2 r6,L236; EQ 0
L239:
;    return v;
	cpy2 R15,R6 ;LOADI2(reg)*
L235:
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_memcpy:
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R1,R13 ;LOADP2(reg)
	lbr L242
L241:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,1
	cpy2 R10,R1 ;LOADP2(reg) opt1
	incm R1,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L242:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L241; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L240:
	popr r7
	popr r6
	popr r1
	Cretn

_memset:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R6,R12 ;LOADP2(reg)
	lbr L246
L245:
;        *p++ = (unsigned char)c;
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L246:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L245; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L244:
	popr r7
	popr r6
	Cretn

_spincluder:
;void spincluder(){
;	asm("\tinclude fastspi.inc\n");
	include fastspi.inc
;}
L248:
	Cretn

_buf:
	db 512 dup (0); zerofill global
_sockreg:
	db 1 dup (0); zerofill global
L231:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L169:
	dd 0xbf800000
	align 4
L168:
	dd 0x0
L132:
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 58
	db 10
	db 37
	db 115
	db 10
	db 0
L129:
	db 114
	db 115
	db 105
	db 122
	db 101
	db 61
	db 37
	db 100
	db 44
	db 32
	db 114
	db 101
	db 99
	db 118
	db 61
	db 37
	db 100
	db 10
	db 0
L124:
	db 108
	db 111
	db 111
	db 112
	db 0
L119:
	db 108
	db 111
	db 111
	db 112
	db 46
	db 46
	db 0
L118:
	db 97
	db 102
	db 116
	db 101
	db 114
	db 32
	db 108
	db 105
	db 115
	db 116
	db 101
	db 110
	db 0
L117:
	db 97
	db 102
	db 116
	db 101
	db 114
	db 32
	db 115
	db 111
	db 99
	db 107
	db 101
	db 116
	db 32
	db 111
	db 112
	db 101
	db 110
	db 0
L116:
	db 97
	db 102
	db 116
	db 101
	db 114
	db 32
	db 115
	db 111
	db 99
	db 107
	db 101
	db 116
	db 32
	db 105
	db 110
	db 105
	db 116
	db 0
L115:
	db 97
	db 102
	db 116
	db 101
	db 114
	db 32
	db 105
	db 110
	db 105
	db 116
	db 0
L114:
	db 112
	db 111
	db 115
	db 116
	db 32
	db 114
	db 101
	db 115
	db 101
	db 116
	db 0
L113:
	db 98
	db 101
	db 103
	db 105
	db 110
	db 0
L111:
	db 60
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 84
	db 101
	db 109
	db 112
	db 58
	db 32
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 116
	db 101
	db 120
	db 116
	db 34
	db 32
	db 115
	db 105
	db 122
	db 101
	db 61
	db 50
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 49
	db 56
	db 48
	db 50
	db 33
	db 32
	db 34
	db 62
	db 32
	db 60
	db 115
	db 117
	db 112
	db 62
	db 79
	db 60
	db 47
	db 115
	db 117
	db 112
	db 62
	db 67
	db 13
	db 10
	db 60
	db 112
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 48
	db 34
	db 32
	db 114
	db 97
	db 100
	db 105
	db 111
	db 115
	db 116
	db 97
	db 116
	db 48
	db 62
	db 81
	db 32
	db 76
	db 69
	db 68
	db 32
	db 79
	db 78
	db 13
	db 10
	db 60
	db 98
	db 114
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 49
	db 34
	db 32
	db 114
	db 97
	db 100
	db 105
	db 111
	db 115
	db 116
	db 97
	db 116
	db 49
	db 62
	db 81
	db 32
	db 76
	db 69
	db 68
	db 32
	db 79
	db 70
	db 70
	db 13
	db 10
	db 60
	db 47
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 60
	db 112
	db 62
	db 13
	db 10
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 115
	db 117
	db 98
	db 109
	db 105
	db 116
	db 34
	db 62
	db 13
	db 10
	db 60
	db 47
	db 102
	db 111
	db 114
	db 109
	db 62
	db 60
	db 47
	db 115
	db 112
	db 97
	db 110
	db 62
	db 60
	db 47
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 47
	db 104
	db 116
	db 109
	db 108
	db 62
	db 13
	db 10
	db 0
L110:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 45
	db 84
	db 121
	db 112
	db 101
	db 58
	db 32
	db 116
	db 101
	db 120
	db 116
	db 47
	db 104
	db 116
	db 109
	db 108
	db 13
	db 10
	db 13
	db 10
	db 60
	db 104
	db 116
	db 109
	db 108
	db 62
	db 60
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 115
	db 112
	db 97
	db 110
	db 32
	db 115
	db 116
	db 121
	db 108
	db 101
	db 61
	db 34
	db 99
	db 111
	db 108
	db 111
	db 114
	db 58
	db 35
	db 48
	db 48
	db 48
	db 48
	db 65
	db 48
	db 34
	db 62
	db 13
	db 10
	db 60
	db 104
	db 49
	db 62
	db 60
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 79
	db 108
	db 100
	db 117
	db 105
	db 110
	db 111
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 60
	db 47
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 60
	db 47
	db 104
	db 49
	db 62
	db 13
	db 10
	db 60
	db 104
	db 51
	db 62
	db 49
	db 56
	db 48
	db 50
	db 32
	db 77
	db 101
	db 109
	db 98
	db 101
	db 114
	db 115
	db 104
	db 105
	db 112
	db 32
	db 67
	db 97
	db 114
	db 100
	db 32
	db 97
	db 110
	db 100
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 119
	db 53
	db 49
	db 48
	db 48
	db 60
	db 47
	db 104
	db 51
	db 62
	db 13
	db 10
	db 60
	db 112
	db 62
	db 60
	db 102
	db 111
	db 114
	db 109
	db 32
	db 109
	db 101
	db 116
	db 104
	db 111
	db 100
	db 61
	db 34
	db 80
	db 79
	db 83
	db 84
	db 34
	db 62
	db 13
	db 10
	db 0
L108:
	db 10
	db 0
L105:
	db 37
	db 120
	db 32
	db 0
L98:
	db 37
	db 120
	db 61
	db 0
L96:
	db 32
	db 97
	db 116
	db 32
	db 37
	db 115
	db 58
	db 32
	db 119
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 77
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 83
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 77
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 80
	db 79
	db 82
	db 84
	db 61
	db 37
	db 120
	db 32
	db 37
	db 120
	db 10
	db 0
L83:
	db 83
	db 101
	db 110
	db 100
	db 32
	db 83
	db 105
	db 122
	db 101
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
L74:
	db 82
	db 88
	db 32
	db 66
	db 117
	db 102
	db 102
	db 101
	db 114
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L61:
	db 68
	db 111
	db 110
	db 101
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 87
	db 53
	db 49
	db 48
	db 48
	db 32
	db 73
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 33
	db 10
	db 0
L60:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 82
	db 77
	db 83
	db 82
	db 32
	db 97
	db 110
	db 100
	db 32
	db 84
	db 77
	db 83
	db 82
	db 10
	db 10
	db 0
L59:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 71
	db 65
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L58:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 85
	db 66
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L57:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 73
	db 80
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L50:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 73
	db 80
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L43:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 117
	db 98
	db 110
	db 101
	db 116
	db 32
	db 77
	db 97
	db 115
	db 107
	db 32
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L32:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 111
	db 117
	db 114
	db 99
	db 101
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 10
	db 0
L25:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 71
	db 97
	db 116
	db 101
	db 119
	db 97
	db 121
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L24:
	db 77
	db 82
	db 61
	db 37
	db 120
	db 10
	db 0
	include lcc1802Epilofl.inc
	include LCC1802fp.inc
	include IO1802.inc
