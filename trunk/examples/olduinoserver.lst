 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 1 - 6/5/2013 13:45:40


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Wed Jun 05 13:45:32 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  840/       0 :                     	listing	on
(1)  841/       0 : C0 24 A7            	lbr	lcc1802Init
(1)  842/       3 :                     	
(1)  843/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _ledmode:
      15/       4 : 00 03               	dw 3
      16/       6 :                     _reqtype:
      17/       6 : 00 03               	dw 3
      18/       8 :                     _SPI_Write:
      19/       8 : (MACRO)             	reserve 4
      20/       C : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      21/      19 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
      22/      26 : (MACRO)             	ld2 R11,'O',sp,(2+6) ;reg:INDIRI2(addr)
      23/      32 : (MACRO)             	st1 R11,'O',sp,(2+6); ASGNU1
      24/      3C :                     ;{
      25/      3C :                     ;  enablewiz();   			// Activate the CS pin
      26/      3C :                     ;  xferspif2(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
      27/      3C : 7A                  	req
      28/      3D : (MACRO)             	ldaD R12,240; reg:acon
      29/      43 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      30/      46 :                     ;  xferspif2(addr >>8); 		// Send Wiznet W5100 Address High Byte
      31/      46 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      32/      52 : (MACRO)             	cpy2 R12,R11
      33/      56 : 9C                  	ghi	R12	;opt2
      34/      57 : AC                  	plo	R12
      35/      58 : F8 00               	ldi	0
      36/      5A : BC                  	phi	R12
      37/      5B : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      38/      5E :                     ;  xferspif2(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
      39/      5E : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      40/      6A : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      41/      72 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      42/      75 :                     ;  xferspif2(data);			// Send the data byte
      43/      75 : (MACRO)             	ld1 R11,'O',sp,(2+6)
      44/      7F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      45/      82 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
      46/      86 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      47/      89 :                     ;  disablewiz();				// make CS pin not active
      48/      89 : 7B                  	seq
      49/      8A :                     ;}
      50/      8A :                     L1:
      51/      8A : (MACRO)             	release 4
      52/      8E : (MACRO)             	Cretn
      53/      8F :                     
      54/      8F :                     _SPI_Read:
      55/      8F : (MACRO)             	reserve 6
      56/      95 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
      57/      A2 :                     ;{
      58/      A2 :                     ;  enablewiz();   		// Activate the CS pin
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 2 - 6/5/2013 13:45:40


      59/      A2 :                     ;  xferspif2(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
      60/      A2 : 7A                  	req
      61/      A3 : (MACRO)             	ldaD R12,15; reg:acon
      62/      A9 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      63/      AC :                     ;  xferspif2(addr >>8);	// Send Wiznet W5100 Address High Byte
      64/      AC : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      65/      B8 : (MACRO)             	cpy2 R12,R11
      66/      BC : 9C                  	ghi	R12	;opt2
      67/      BD : AC                  	plo	R12
      68/      BE : F8 00               	ldi	0
      69/      C0 : BC                  	phi	R12
      70/      C1 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      71/      C4 :                     ;  xferspif2(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
      72/      C4 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      73/      D0 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      74/      D8 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      75/      DB :                     ;  value=xferspif2(0x00);	// Send Dummy transmission to read the data
      76/      DB : (MACRO)             	ld2z R12
      77/      DF : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      78/      E2 : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
      79/      E4 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
      80/      EE :                     ;  disablewiz();			// make CS pin inactive
      81/      EE :                     ;  return(value);
      82/      EE : 7B                  	seq
      83/      EF : (MACRO)             	ld1 R15,'O',sp,(-3+8)
      84/      F9 : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
      85/      FC :                     L4:
      86/      FC : (MACRO)             	release 6
      87/     102 : (MACRO)             	Cretn
      88/     103 :                     
      89/     103 :                     L8:
      90/     103 : DE                  	db 222
      91/     104 : AD                  	db 173
      92/     105 : BE                  	db 190
      93/     106 : EF                  	db 239
      94/     107 : FE                  	db 254
      95/     108 : ED                  	db 237
      96/     109 :                     L9:
      97/     109 : C0                  	db 192
      98/     10A : A8                  	db 168
      99/     10B : 01                  	db 1
     100/     10C : B6                  	db 182
     101/     10D :                     L10:
     102/     10D : FF                  	db 255
     103/     10E : FF                  	db 255
     104/     10F : FF                  	db 255
     105/     110 : 00                  	db 0
     106/     111 :                     L11:
     107/     111 : C0                  	db 192
     108/     112 : A8                  	db 168
     109/     113 : 01                  	db 1
     110/     114 : 01                  	db 1
     111/     115 :                     _W5100_Init:
     112/     115 : (MACRO)             	reserve 34
     113/     11F :                     ;void W5100_Init(void){// Ethernet Setup
     114/     11F :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     115/     11F : (MACRO)             	ldA2 R11,'O',sp,(-8+36); reg:addr
     116/     127 : (MACRO)             	ldaD R8,L8; reg:acon
     117/     12D : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     118/     142 :                     ;  unsigned char ip_addr[] = {192,168,1,182};
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 3 - 6/5/2013 13:45:40


     119/     142 : (MACRO)             	ldA2 R11,'O',sp,(-12+36); reg:addr
     120/     14A : (MACRO)             	ldaD R8,L9; reg:acon
     121/     150 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     122/     165 :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     123/     165 : (MACRO)             	ldA2 R11,'O',sp,(-16+36); reg:addr
     124/     16D : (MACRO)             	ldaD R8,L10; reg:acon
     125/     173 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     126/     188 :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     127/     188 : (MACRO)             	ldA2 R11,'O',sp,(-20+36); reg:addr
     128/     190 : (MACRO)             	ldaD R8,L11; reg:acon
     129/     196 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     130/     1AB :                     ;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
     131/     1AB : (MACRO)             	ld2z R12
     132/     1AF : (MACRO)             	ldaD R13,128; reg:acon
     133/     1B5 : (MACRO)             	Ccall _SPI_Write
     134/     1B8 :                     ;  delay(1);
     135/     1B8 : (MACRO)             	ldaD R12,1; reg:acon
     136/     1BE : (MACRO)             	Ccall _delay
     137/     1C1 :                     ;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
     138/     1C1 : (MACRO)             	ldaD R12,1; reg:acon
     139/     1C7 : (MACRO)             	ld1 R13,'O',sp,(-20+36)
     140/     1D1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     141/     1D4 : (MACRO)             	Ccall _SPI_Write
     142/     1D7 : (MACRO)             	ldaD R12,2; reg:acon
     143/     1DD : (MACRO)             	ld1 R13,'O',sp,(-19+36)
     144/     1E7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     145/     1EA : (MACRO)             	Ccall _SPI_Write
     146/     1ED :                     ;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
     147/     1ED : (MACRO)             	ldaD R12,3; reg:acon
     148/     1F3 : (MACRO)             	ld1 R13,'O',sp,(-18+36)
     149/     1FD : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     150/     200 : (MACRO)             	Ccall _SPI_Write
     151/     203 : (MACRO)             	ldaD R12,4; reg:acon
     152/     209 : (MACRO)             	ld1 R13,'O',sp,(-17+36)
     153/     213 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     154/     216 : (MACRO)             	Ccall _SPI_Write
     155/     219 :                     ;  delay(1);
     156/     219 : (MACRO)             	ldaD R12,1; reg:acon
     157/     21F : (MACRO)             	Ccall _delay
     158/     222 :                     ;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
     159/     222 : (MACRO)             	ldaD R12,9; reg:acon
     160/     228 : (MACRO)             	ld1 R13,'O',sp,(-8+36)
     161/     232 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     162/     235 : (MACRO)             	Ccall _SPI_Write
     163/     238 : (MACRO)             	ldaD R12,10; reg:acon
     164/     23E : (MACRO)             	ld1 R13,'O',sp,(-7+36)
     165/     248 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     166/     24B : (MACRO)             	Ccall _SPI_Write
     167/     24E :                     ;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
     168/     24E : (MACRO)             	ldaD R12,11; reg:acon
     169/     254 : (MACRO)             	ld1 R13,'O',sp,(-6+36)
     170/     25E : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     171/     261 : (MACRO)             	Ccall _SPI_Write
     172/     264 : (MACRO)             	ldaD R12,12; reg:acon
     173/     26A : (MACRO)             	ld1 R13,'O',sp,(-5+36)
     174/     274 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     175/     277 : (MACRO)             	Ccall _SPI_Write
     176/     27A :                     ;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
     177/     27A : (MACRO)             	ldaD R12,13; reg:acon
     178/     280 : (MACRO)             	ld1 R13,'O',sp,(-4+36)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 4 - 6/5/2013 13:45:40


     179/     28A : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     180/     28D : (MACRO)             	Ccall _SPI_Write
     181/     290 : (MACRO)             	ldaD R12,14; reg:acon
     182/     296 : (MACRO)             	ld1 R13,'O',sp,(-3+36)
     183/     2A0 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     184/     2A3 : (MACRO)             	Ccall _SPI_Write
     185/     2A6 :                     ;  delay(1);
     186/     2A6 : (MACRO)             	ldaD R12,1; reg:acon
     187/     2AC : (MACRO)             	Ccall _delay
     188/     2AF :                     ;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
     189/     2AF : (MACRO)             	ldaD R12,5; reg:acon
     190/     2B5 : (MACRO)             	ld1 R13,'O',sp,(-16+36)
     191/     2BF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     192/     2C2 : (MACRO)             	Ccall _SPI_Write
     193/     2C5 : (MACRO)             	ldaD R12,6; reg:acon
     194/     2CB : (MACRO)             	ld1 R13,'O',sp,(-15+36)
     195/     2D5 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     196/     2D8 : (MACRO)             	Ccall _SPI_Write
     197/     2DB :                     ;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
     198/     2DB : (MACRO)             	ldaD R12,7; reg:acon
     199/     2E1 : (MACRO)             	ld1 R13,'O',sp,(-14+36)
     200/     2EB : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     201/     2EE : (MACRO)             	Ccall _SPI_Write
     202/     2F1 : (MACRO)             	ldaD R12,8; reg:acon
     203/     2F7 : (MACRO)             	ld1 R13,'O',sp,(-13+36)
     204/     301 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     205/     304 : (MACRO)             	Ccall _SPI_Write
     206/     307 :                     ;  delay(1);
     207/     307 : (MACRO)             	ldaD R12,1; reg:acon
     208/     30D : (MACRO)             	Ccall _delay
     209/     310 :                     ;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
     210/     310 : (MACRO)             	ldaD R12,15; reg:acon
     211/     316 : (MACRO)             	ld1 R13,'O',sp,(-12+36)
     212/     320 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     213/     323 : (MACRO)             	Ccall _SPI_Write
     214/     326 : (MACRO)             	ldaD R12,16; reg:acon
     215/     32C : (MACRO)             	ld1 R13,'O',sp,(-11+36)
     216/     336 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     217/     339 : (MACRO)             	Ccall _SPI_Write
     218/     33C :                     ;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
     219/     33C : (MACRO)             	ldaD R12,17; reg:acon
     220/     342 : (MACRO)             	ld1 R13,'O',sp,(-10+36)
     221/     34C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     222/     34F : (MACRO)             	Ccall _SPI_Write
     223/     352 : (MACRO)             	ldaD R12,18; reg:acon
     224/     358 : (MACRO)             	ld1 R13,'O',sp,(-9+36)
     225/     362 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     226/     365 : (MACRO)             	Ccall _SPI_Write
     227/     368 :                     ;  delay(1);
     228/     368 : (MACRO)             	ldaD R12,1; reg:acon
     229/     36E : (MACRO)             	Ccall _delay
     230/     371 :                     ;  SPI_Write(RMSR,0x55);
     231/     371 : (MACRO)             	ldaD R12,26; reg:acon
     232/     377 : (MACRO)             	ldaD R13,85; reg:acon
     233/     37D : (MACRO)             	Ccall _SPI_Write
     234/     380 :                     ;  SPI_Write(TMSR,0x55);
     235/     380 : (MACRO)             	ldaD R12,27; reg:acon
     236/     386 : (MACRO)             	ldaD R13,85; reg:acon
     237/     38C : (MACRO)             	Ccall _SPI_Write
     238/     38F :                     ;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 5 - 6/5/2013 13:45:40


     239/     38F : (MACRO)             	ldaD R12,15; reg:acon
     240/     395 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     241/     398 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     242/     39C : (MACRO)             	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
     243/     3A9 : (MACRO)             	ldaD R12,16; reg:acon
     244/     3AF : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     245/     3B2 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     246/     3B6 : (MACRO)             	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
     247/     3C3 : (MACRO)             	ldaD R12,17; reg:acon
     248/     3C9 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     249/     3CC : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     250/     3D0 : (MACRO)             	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
     251/     3DD : (MACRO)             	ldaD R12,18; reg:acon
     252/     3E3 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     253/     3E6 : (MACRO)             	ldaD R12,L26; reg:acon
     254/     3EC : (MACRO)             	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
     255/     3F8 : (MACRO)             	cpy1 R13,R10
     256/     3FA : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     257/     3FD : (MACRO)             	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
     258/     409 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     259/     40C : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     260/     419 : (MACRO)             	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
     261/     425 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     262/     428 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     263/     435 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     264/     439 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     265/     43C : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     266/     449 : (MACRO)             	Ccall _printf
     267/     44C :                     ;}
     268/     44C :                     L7:
     269/     44C : (MACRO)             	release 34
     270/     454 : (MACRO)             	Cretn
     271/     455 :                     
     272/     455 :                     _socket0_init:
     273/     455 : (MACRO)             	reserve 4
     274/     459 :                     ;void socket0_init(){ //initialize socket 0 for http server
     275/     459 :                     ;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
     276/     459 : (MACRO)             	ldaD R12,1024; reg:acon
     277/     45F : (MACRO)             	ldaD R13,1; reg:acon
     278/     465 : (MACRO)             	Ccall _SPI_Write
     279/     468 :                     ;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
     280/     468 : (MACRO)             	ldaD R12,1028; reg:acon
     281/     46E : (MACRO)             	ld2z R13
     282/     472 : (MACRO)             	Ccall _SPI_Write
     283/     475 :                     ;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
     284/     475 : (MACRO)             	ldaD R12,1029; reg:acon
     285/     47B : (MACRO)             	ldaD R13,80; reg:acon
     286/     481 : (MACRO)             	Ccall _SPI_Write
     287/     484 :                     ;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     288/     484 : (MACRO)             	ldaD R12,1025; reg:acon
     289/     48A : (MACRO)             	ldaD R13,1; reg:acon
     290/     490 : (MACRO)             	Ccall _SPI_Write
     291/     493 :                     ;	delay(10);
     292/     493 : (MACRO)             	ldaD R12,10; reg:acon
     293/     499 : (MACRO)             	Ccall _delay
     294/     49C :                     ;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
     295/     49C : (MACRO)             	ldaD R12,1025; reg:acon
     296/     4A2 : (MACRO)             	ldaD R13,2; reg:acon
     297/     4A8 : (MACRO)             	Ccall _SPI_Write
     298/     4AB :                     ;}
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 6 - 6/5/2013 13:45:40


     299/     4AB :                     L27:
     300/     4AB : (MACRO)             	release 4
     301/     4AF : (MACRO)             	Cretn
     302/     4B0 :                     
     303/     4B0 :                     _disconnect0:
     304/     4B0 : (MACRO)             	reserve 4
     305/     4B4 :                     ;void disconnect0(){
     306/     4B4 :                     ;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
     307/     4B4 : (MACRO)             	ldaD R12,1025; reg:acon
     308/     4BA : (MACRO)             	ldaD R13,8; reg:acon
     309/     4C0 : (MACRO)             	Ccall _SPI_Write
     310/     4C3 :                     L29:
     311/     4C3 :                     ;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
     312/     4C3 :                     L30:
     313/     4C3 : (MACRO)             	ldaD R12,1025; reg:acon
     314/     4C9 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     315/     4CC : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     316/     4D0 : (MACRO)             	jnzU1 r11,L29; NEI2(CVUI2(reg),con0)
     317/     4D4 :                     ;}
     318/     4D4 :                     L28:
     319/     4D4 : (MACRO)             	release 4
     320/     4D8 : (MACRO)             	Cretn
     321/     4D9 :                     
     322/     4D9 :                     _close0:
     323/     4D9 : (MACRO)             	reserve 4
     324/     4DD :                     ;void close0(){
     325/     4DD :                     ;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
     326/     4DD : (MACRO)             	ldaD R12,1025; reg:acon
     327/     4E3 : (MACRO)             	ldaD R13,16; reg:acon
     328/     4E9 : (MACRO)             	Ccall _SPI_Write
     329/     4EC :                     L33:
     330/     4EC :                     ;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
     331/     4EC :                     L34:
     332/     4EC : (MACRO)             	ldaD R12,1025; reg:acon
     333/     4F2 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     334/     4F5 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     335/     4F9 : (MACRO)             	jnzU1 r11,L33; NEI2(CVUI2(reg),con0)
     336/     4FD :                     ;}
     337/     4FD :                     L32:
     338/     4FD : (MACRO)             	release 4
     339/     501 : (MACRO)             	Cretn
     340/     502 :                     
     341/     502 :                     _recv0:
     342/     502 : (MACRO)             	reserve 2; save room for local variables
     343/     504 : (MACRO)             	pushr r0
     344/     509 : (MACRO)             	pushr r1
     345/     50E : (MACRO)             	pushr r6
     346/     513 : (MACRO)             	pushr r7
     347/     518 : (MACRO)             	reserve 4; save room for outgoing arguments
     348/     51C : (MACRO)             	cpy2 r7,r12; function(2055) 1
     349/     520 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     350/     524 :                     ;unsigned int recv0(unsigned char *buf,unsigned int buflen){
     351/     524 :                     ;    if (buflen <= 0) return 1;
     352/     524 : (MACRO)             	jnzU2 r6,L37; NE 0
     353/     52C : (MACRO)             	ldaD R15,1; reg:acon
     354/     532 : C0 06 3F            	lbr L36
     355/     535 :                     L37:
     356/     535 :                     ;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
     357/     535 : (MACRO)             	jnU2I r6,512,lbdf,L39 ;LEU2 512 6 L39; LE is flipped test & subtraction
     358/     53E :                     ;        buflen=MAX_BUF - 2;
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 7 - 6/5/2013 13:45:40


     359/     53E : (MACRO)             	ldaD R6,510; reg:acon
     360/     544 :                     L39:
     361/     544 :                     ;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
     362/     544 : (MACRO)             	ldaD R12,1064; reg:acon
     363/     54A : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     364/     54D : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     365/     551 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     366/     554 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     367/     561 :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     368/     561 : (MACRO)             	ldaD R12,1065; reg:acon
     369/     567 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     370/     56A : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
     371/     576 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     372/     57E : (MACRO)             	shl2I R10,8
     373/     5AE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     374/     5B2 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     375/     5B5 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     376/     5C1 : C0 05 E4            	lbr L42
     377/     5C4 :                     L41:
     378/     5C4 :                     ;    while(buflen) {//receive individual bytes into the buffer
     379/     5C4 :                     ;      buflen--;
     380/     5C4 : (MACRO)             	decm R6,1
     381/     5C5 :                     ;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     382/     5C5 : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     383/     5CD : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     384/     5D5 :                     ;      *buf = SPI_Read(realaddr);
     385/     5D5 : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     386/     5D9 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     387/     5DC : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     388/     5E0 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     389/     5E2 :                     ;      offaddr++;
     390/     5E2 : (MACRO)             	incm R1,1
     391/     5E3 :                     ;      buf++;
     392/     5E3 : (MACRO)             	incm R7,1
     393/     5E4 :                     ;    }
     394/     5E4 :                     L42:
     395/     5E4 :                     ;    while(buflen) {//receive individual bytes into the buffer
     396/     5E4 : (MACRO)             	jnzU2 r6,L41; NE 0
     397/     5EC :                     ;    *buf='\0';        // terminate string
     398/     5EC : (MACRO)             	ldaD R11,0; reg:acon
     399/     5F2 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     400/     5F4 :                     ;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
     401/     5F4 : (MACRO)             	ldaD R12,1064; reg:acon
     402/     5FA : (MACRO)             	cpy2 R11,R1
     403/     5FE : 9B                  	ghi	R11	;opt2
     404/     5FF : AB                  	plo	R11
     405/     600 : F8 00               	ldi	0
     406/     602 : BB                  	phi	R11
     407/     603 : (MACRO)             	cpy1 R13,R11
     408/     605 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     409/     608 : (MACRO)             	Ccall _SPI_Write
     410/     60B :                     ;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     411/     60B : (MACRO)             	ldaD R12,1065; reg:acon
     412/     611 : (MACRO)             	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     413/     619 : (MACRO)             	cpy1 R13,R11
     414/     61B : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     415/     61E : (MACRO)             	Ccall _SPI_Write
     416/     621 :                     ;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
     417/     621 : (MACRO)             	ldaD R12,1025; reg:acon
     418/     627 : (MACRO)             	ldaD R13,64; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 8 - 6/5/2013 13:45:40


     419/     62D : (MACRO)             	Ccall _SPI_Write
     420/     630 :                     ;    delay(5);    				// Wait for Receive Process
     421/     630 : (MACRO)             	ldaD R12,5; reg:acon
     422/     636 : (MACRO)             	Ccall _delay
     423/     639 :                     ;    return 1;
     424/     639 : (MACRO)             	ldaD R15,1; reg:acon
     425/     63F :                     L36:
     426/     63F : (MACRO)             	release 4; release room for outgoing arguments
     427/     643 : (MACRO)             	popr r7
     428/     647 : (MACRO)             	popr r6
     429/     64B : (MACRO)             	popr r1
     430/     64F : (MACRO)             	popr r0
     431/     653 : (MACRO)             	release 2; release room for local variables 
     432/     655 : (MACRO)             	Cretn
     433/     656 :                     
     434/     656 :                     _recv_size:
     435/     656 : (MACRO)             	reserve 6
     436/     65C :                     ;unsigned int recv_size(void){
     437/     65C :                     ;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     438/     65C : (MACRO)             	ldaD R12,1062; reg:acon
     439/     662 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     440/     665 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     441/     669 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     442/     676 : (MACRO)             	ldaD R12,1063; reg:acon
     443/     67C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     444/     67F : (MACRO)             	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
     445/     68B : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     446/     68E : (MACRO)             	alu2I R10,R10,255,ani,ani
     447/     696 :                     	;removed ?	cpy2 R10,R10
     448/     696 : (MACRO)             	shl2I R10,8
     449/     6C6 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     450/     6CA : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     451/     6CD : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
     452/     6D9 : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     453/     6DD :                     L44:
     454/     6DD : (MACRO)             	release 6
     455/     6E3 : (MACRO)             	Cretn
     456/     6E4 :                     
     457/     6E4 :                     _send0:
     458/     6E4 : (MACRO)             	reserve 6; save room for local variables
     459/     6EA : (MACRO)             	pushr r0
     460/     6EF : (MACRO)             	pushr r1
     461/     6F4 : (MACRO)             	pushr r6
     462/     6F9 : (MACRO)             	pushr r7
     463/     6FE : (MACRO)             	reserve 4; save room for outgoing arguments
     464/     702 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     465/     706 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     466/     70A :                     ;unsigned int send0(unsigned char *buf,unsigned int buflen){
     467/     70A :                     ;    if (buflen <= 0) return 0;
     468/     70A : (MACRO)             	jnzU2 r6,L46; NE 0
     469/     712 : (MACRO)             	ld2z R15
     470/     716 : C0 09 F0            	lbr L45
     471/     719 :                     L46:
     472/     719 :                     ;    txsize=SPI_Read(SO_TX_FSR);
     473/     719 : (MACRO)             	ldaD R12,1056; reg:acon
     474/     71F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     475/     722 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     476/     726 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     477/     729 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     478/     72D :                     ;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 9 - 6/5/2013 13:45:40


     479/     72D : (MACRO)             	ldaD R12,1057; reg:acon
     480/     733 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     481/     736 : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     482/     73E : (MACRO)             	shl2I R10,8
     483/     76E : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     484/     772 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     485/     775 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     486/     781 :                     ;    timeout=0;
     487/     781 : (MACRO)             	ld2z R11
     488/     785 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
     489/     792 : C0 08 37            	lbr L49
     490/     795 :                     L48:
     491/     795 :                     ;    while (txsize < buflen) {
     492/     795 :                     ;      delay(1);
     493/     795 : (MACRO)             	ldaD R12,1; reg:acon
     494/     79B : (MACRO)             	Ccall _delay
     495/     79E :                     ;     txsize=SPI_Read(SO_TX_FSR);
     496/     79E : (MACRO)             	ldaD R12,1056; reg:acon
     497/     7A4 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     498/     7A7 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     499/     7AB : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     500/     7AE : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     501/     7B2 :                     ;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     502/     7B2 : (MACRO)             	ldaD R12,1057; reg:acon
     503/     7B8 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     504/     7BB : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     505/     7C3 : (MACRO)             	shl2I R10,8
     506/     7F3 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     507/     7F7 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     508/     7FA : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     509/     806 :                     ;     if (timeout++ > 1000) {
     510/     806 : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
     511/     812 : (MACRO)             	cpy2 R10,R11
     512/     816 : (MACRO)             	incm R10,1
     513/     817 : (MACRO)             	st2 R10,'O',sp,(-6+20); ASGNU2(addr,reg)*
     514/     824 : (MACRO)             	jnU2I r11,1000,lbdf,L51 ;LEU2 1000 11 L51; LE is flipped test & subtraction
     515/     82D :                     ;       disconnect0();
     516/     82D : (MACRO)             	Ccall _disconnect0
     517/     830 :                     ;       return 0;
     518/     830 : (MACRO)             	ld2z R15
     519/     834 : C0 09 F0            	lbr L45
     520/     837 :                     L51:
     521/     837 :                     ;   }
     522/     837 :                     L49:
     523/     837 :                     ;    while (txsize < buflen) {
     524/     837 : (MACRO)             	jcU2 r1,r6,lbnf,L48; LT=lbnf i.e. subtract B from A and jump if borrow 
     525/     844 :                     ;   ptr = SPI_Read(S0_TX_WR);
     526/     844 : (MACRO)             	ldaD R12,1060; reg:acon
     527/     84A : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     528/     84D : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     529/     851 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     530/     854 : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
     531/     861 :                     ;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     532/     861 : (MACRO)             	ldaD R12,1061; reg:acon
     533/     867 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     534/     86A : (MACRO)             	ld2 R10,'O',sp,(-8+20); reg:INDIRU2(addr)
     535/     876 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     536/     87E : (MACRO)             	shl2I R10,8
     537/     8AE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     538/     8B2 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 10 - 6/5/2013 13:45:40


     539/     8B5 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     540/     8C1 : C0 09 00            	lbr L54
     541/     8C4 :                     L53:
     542/     8C4 :                     ;    while(buflen) {
     543/     8C4 :                     ;      buflen--;
     544/     8C4 : (MACRO)             	decm R6,1
     545/     8C5 :                     ;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     546/     8C5 : (MACRO)             	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     547/     8CD : (MACRO)             	ldA2 R11,'O',R11,(16384); reg:addr
     548/     8D5 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
     549/     8E2 :                     ;      SPI_Write(realaddr,*buf);
     550/     8E2 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
     551/     8EE : (MACRO)             	ld1 R13,'O',R7,0
     552/     8F8 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     553/     8FB : (MACRO)             	Ccall _SPI_Write
     554/     8FE :                     ;      offaddr++;
     555/     8FE : (MACRO)             	incm R0,1
     556/     8FF :                     ;      buf++;
     557/     8FF : (MACRO)             	incm R7,1
     558/     900 :                     ;    }
     559/     900 :                     L54:
     560/     900 :                     ;    while(buflen) {
     561/     900 : (MACRO)             	jnzU2 r6,L53; NE 0
     562/     908 :                     ;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     563/     908 : (MACRO)             	ldaD R12,1060; reg:acon
     564/     90E : (MACRO)             	cpy2 RL10,R0
     565/     912 : (MACRO)             	zext4 RL10; CVUI4 jan 16
     566/     916 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     567/     922 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     568/     938 : (MACRO)             	shrI4I RL10,8
     569/     9A8 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     570/     9AC : (MACRO)             	cpy1 R13,R11
     571/     9AE : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     572/     9B1 : (MACRO)             	Ccall _SPI_Write
     573/     9B4 :                     ;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     574/     9B4 : (MACRO)             	ldaD R12,1061; reg:acon
     575/     9BA : (MACRO)             	alu2I R11,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     576/     9C2 : (MACRO)             	cpy1 R13,R11
     577/     9C4 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     578/     9C7 : (MACRO)             	Ccall _SPI_Write
     579/     9CA :                     ;    SPI_Write(S0_CR,CR_SEND);
     580/     9CA : (MACRO)             	ldaD R12,1025; reg:acon
     581/     9D0 : (MACRO)             	ldaD R13,32; reg:acon
     582/     9D6 : (MACRO)             	Ccall _SPI_Write
     583/     9D9 :                     L56:
     584/     9D9 :                     ;    while(SPI_Read(S0_CR));
     585/     9D9 :                     L57:
     586/     9D9 : (MACRO)             	ldaD R12,1025; reg:acon
     587/     9DF : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     588/     9E2 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     589/     9E6 : (MACRO)             	jnzU1 r11,L56; NEI2(CVUI2(reg),con0)
     590/     9EA :                     ;    return 1;
     591/     9EA : (MACRO)             	ldaD R15,1; reg:acon
     592/     9F0 :                     L45:
     593/     9F0 : (MACRO)             	release 4; release room for outgoing arguments
     594/     9F4 : (MACRO)             	popr r7
     595/     9F8 : (MACRO)             	popr r6
     596/     9FC : (MACRO)             	popr r1
     597/     A00 : (MACRO)             	popr r0
     598/     A04 : (MACRO)             	release 6; release room for local variables 
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 11 - 6/5/2013 13:45:40


     599/     A0A : (MACRO)             	Cretn
     600/     A0B :                     
     601/     A0B :                     _report:
     602/     A0B : (MACRO)             	reserve 22
     603/     A15 : (MACRO)             	st2 r12,'O',sp,(24); flag1 
     604/     A22 :                     ;void report(char * where){
     605/     A22 :                     ;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
     606/     A22 : (MACRO)             	ld2z R12
     607/     A26 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     608/     A29 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     609/     A2D : (MACRO)             	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
     610/     A3A : (MACRO)             	ldaD R12,1027; reg:acon
     611/     A40 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     612/     A43 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     613/     A47 : (MACRO)             	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
     614/     A54 : (MACRO)             	ldaD R12,1024; reg:acon
     615/     A5A : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     616/     A5D : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     617/     A61 : (MACRO)             	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
     618/     A6E : (MACRO)             	ldaD R12,1028; reg:acon
     619/     A74 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     620/     A77 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     621/     A7B : (MACRO)             	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
     622/     A88 : (MACRO)             	ldaD R12,1029; reg:acon
     623/     A8E : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     624/     A91 : (MACRO)             	ldaD R12,L60; reg:acon
     625/     A97 : (MACRO)             	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
     626/     AA3 : (MACRO)             	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
     627/     AAF : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     628/     AB2 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     629/     ABF : (MACRO)             	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
     630/     ACB : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     631/     ACE : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     632/     ADB : (MACRO)             	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
     633/     AE7 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     634/     AEA : (MACRO)             	st2 r10,'O',sp,(8); arg+f**
     635/     AF7 : (MACRO)             	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
     636/     B03 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     637/     B06 : (MACRO)             	st2 r10,'O',sp,(10); arg+f**
     638/     B13 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     639/     B17 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     640/     B1A : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     641/     B27 : (MACRO)             	Ccall _printf
     642/     B2A :                     ;}
     643/     B2A :                     L59:
     644/     B2A : (MACRO)             	release 22
     645/     B32 : (MACRO)             	Cretn
     646/     B33 :                     
     647/     B33 :                     L62:
     648/     B33 : 48                  	db 72
     649/     B34 : 54                  	db 84
     650/     B35 : 54                  	db 84
     651/     B36 : 50                  	db 80
     652/     B37 : 2F                  	db 47
     653/     B38 : 31                  	db 49
     654/     B39 : 2E                  	db 46
     655/     B3A : 30                  	db 48
     656/     B3B : 20                  	db 32
     657/     B3C : 32                  	db 50
     658/     B3D : 30                  	db 48
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 12 - 6/5/2013 13:45:40


     659/     B3E : 30                  	db 48
     660/     B3F : 20                  	db 32
     661/     B40 : 4F                  	db 79
     662/     B41 : 4B                  	db 75
     663/     B42 : 0D                  	db 13
     664/     B43 : 0A                  	db 10
     665/     B44 : 43                  	db 67
     666/     B45 : 6F                  	db 111
     667/     B46 : 6E                  	db 110
     668/     B47 : 74                  	db 116
     669/     B48 : 65                  	db 101
     670/     B49 : 6E                  	db 110
     671/     B4A : 74                  	db 116
     672/     B4B : 2D                  	db 45
     673/     B4C : 54                  	db 84
     674/     B4D : 79                  	db 121
     675/     B4E : 70                  	db 112
     676/     B4F : 65                  	db 101
     677/     B50 : 3A                  	db 58
     678/     B51 : 20                  	db 32
     679/     B52 : 74                  	db 116
     680/     B53 : 65                  	db 101
     681/     B54 : 78                  	db 120
     682/     B55 : 74                  	db 116
     683/     B56 : 2F                  	db 47
     684/     B57 : 68                  	db 104
     685/     B58 : 74                  	db 116
     686/     B59 : 6D                  	db 109
     687/     B5A : 6C                  	db 108
     688/     B5B : 0D                  	db 13
     689/     B5C : 0A                  	db 10
     690/     B5D : 0D                  	db 13
     691/     B5E : 0A                  	db 10
     692/     B5F : 3C                  	db 60
     693/     B60 : 68                  	db 104
     694/     B61 : 74                  	db 116
     695/     B62 : 6D                  	db 109
     696/     B63 : 6C                  	db 108
     697/     B64 : 3E                  	db 62
     698/     B65 : 3C                  	db 60
     699/     B66 : 62                  	db 98
     700/     B67 : 6F                  	db 111
     701/     B68 : 64                  	db 100
     702/     B69 : 79                  	db 121
     703/     B6A : 3E                  	db 62
     704/     B6B : 0D                  	db 13
     705/     B6C : 0A                  	db 10
     706/     B6D : 3C                  	db 60
     707/     B6E : 68                  	db 104
     708/     B6F : 31                  	db 49
     709/     B70 : 3E                  	db 62
     710/     B71 : 3C                  	db 60
     711/     B72 : 63                  	db 99
     712/     B73 : 65                  	db 101
     713/     B74 : 6E                  	db 110
     714/     B75 : 74                  	db 116
     715/     B76 : 65                  	db 101
     716/     B77 : 72                  	db 114
     717/     B78 : 3E                  	db 62
     718/     B79 : 47                  	db 71
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 13 - 6/5/2013 13:45:40


     719/     B7A : 4F                  	db 79
     720/     B7B : 54                  	db 84
     721/     B7C : 20                  	db 32
     722/     B7D : 49                  	db 73
     723/     B7E : 54                  	db 84
     724/     B7F : 21                  	db 33
     725/     B80 : 3C                  	db 60
     726/     B81 : 2F                  	db 47
     727/     B82 : 63                  	db 99
     728/     B83 : 65                  	db 101
     729/     B84 : 6E                  	db 110
     730/     B85 : 74                  	db 116
     731/     B86 : 65                  	db 101
     732/     B87 : 72                  	db 114
     733/     B88 : 3E                  	db 62
     734/     B89 : 3C                  	db 60
     735/     B8A : 2F                  	db 47
     736/     B8B : 68                  	db 104
     737/     B8C : 31                  	db 49
     738/     B8D : 3E                  	db 62
     739/     B8E : 0D                  	db 13
     740/     B8F : 0A                  	db 10
     741/     B90 : 3C                  	db 60
     742/     B91 : 2F                  	db 47
     743/     B92 : 62                  	db 98
     744/     B93 : 6F                  	db 111
     745/     B94 : 64                  	db 100
     746/     B95 : 79                  	db 121
     747/     B96 : 3E                  	db 62
     748/     B97 : 3C                  	db 60
     749/     B98 : 2F                  	db 47
     750/     B99 : 68                  	db 104
     751/     B9A : 74                  	db 116
     752/     B9B : 6D                  	db 109
     753/     B9C : 6C                  	db 108
     754/     B9D : 3E                  	db 62
     755/     B9E : 0D                  	db 13
     756/     B9F : 0A                  	db 10
     757/     BA0 : 00                  	db 0
     758/     BA1 :                     _sendack:
     759/     BA1 : (MACRO)             	reserve 116
     760/     BAB :                     ;void sendack(){
     761/     BAB :                     ;	unsigned char ack[]="HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"
     762/     BAB : (MACRO)             	ldA2 R11,'O',sp,(-112+118); reg:addr
     763/     BB3 : (MACRO)             	ldaD R8,L62; reg:acon
     764/     BB9 : (MACRO)             	blkcpy r11,r8,110; ASGNB(reg,INDIRB(reg))
     765/     BCE :                     ;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
     766/     BCE : (MACRO)             	ldA2 R12,'O',sp,(-112+118); reg:addr
     767/     BD6 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     768/     BD9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     769/     BDD : (MACRO)             	ldA2 R12,'O',sp,(-112+118); reg:addr
     770/     BE5 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     771/     BE9 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     772/     BEC : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     773/     BF0 : (MACRO)             	st2 R11,'O',sp,(-114+118); ASGNI2(addr,reg)*;
     774/     BFD :                     ;}
     775/     BFD :                     L61:
     776/     BFD : (MACRO)             	release 116
     777/     C05 : (MACRO)             	Cretn
     778/     C06 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 14 - 6/5/2013 13:45:40


     779/     C06 :                     _sendstuff:
     780/     C06 : (MACRO)             	reserve 6
     781/     C0C :                     ;void sendstuff(){
     782/     C0C :                     ;	strcpy((char *)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"
     783/     C0C : (MACRO)             	ldaD R12,_buf; reg:acon
     784/     C12 : (MACRO)             	ldaD R13,L64; reg:acon
     785/     C18 : (MACRO)             	Ccall _strcpy
     786/     C1B :                     ;	sendrc=send0(buf,strlen((char *)buf)); 	// Now Send the HTTP Response
     787/     C1B : (MACRO)             	ldaD R12,_buf; reg:acon
     788/     C21 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     789/     C24 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     790/     C28 : (MACRO)             	ldaD R12,_buf; reg:acon
     791/     C2E : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     792/     C32 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     793/     C35 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     794/     C39 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     795/     C46 :                     ;	strcpy((char *)buf,	"<p><strong><input type=\"radio\" name=\"rd\" value=\"0\" "
     796/     C46 : (MACRO)             	ldaD R12,_buf; reg:acon
     797/     C4C : (MACRO)             	ldaD R13,L65; reg:acon
     798/     C52 : (MACRO)             	Ccall _strcpy
     799/     C55 :                     ;	sendrc=send0(buf,strlen((char *)buf)); // Now Send the HTTP Remaining Response
     800/     C55 : (MACRO)             	ldaD R12,_buf; reg:acon
     801/     C5B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     802/     C5E : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     803/     C62 : (MACRO)             	ldaD R12,_buf; reg:acon
     804/     C68 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     805/     C6C : (MACRO)             	Ccall _send0;CALLU2(ar)*
     806/     C6F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     807/     C73 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     808/     C80 :                     ;}
     809/     C80 :                     L63:
     810/     C80 : (MACRO)             	release 6
     811/     C86 : (MACRO)             	Cretn
     812/     C87 :                     
     813/     C87 :                     _strindex:
     814/     C87 : (MACRO)             	pushr r0
     815/     C8C : (MACRO)             	pushr r1
     816/     C91 : (MACRO)             	pushr r6
     817/     C96 : (MACRO)             	pushr r7
     818/     C9B : (MACRO)             	reserve 6; save room for outgoing arguments
     819/     CA1 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     820/     CA5 : (MACRO)             	cpy2 r6,r13; function(2055) 1
     821/     CA9 :                     ;{
     822/     CA9 :                     ;  n=strlen(t);
     823/     CA9 : (MACRO)             	cpy2 R12,R6 ;LOADP2(reg)
     824/     CAD : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     825/     CB0 : (MACRO)             	cpy2 R0,R15 ;LOADU2(reg)*
     826/     CB4 :                     ;  for(i=0;*(s+i); i++) {
     827/     CB4 : (MACRO)             	ld2z R1
     828/     CB8 : C0 0C EB            	lbr L70
     829/     CBB :                     L67:
     830/     CBB :                     ;    if (strncmp(s+i,t,n) == 0)
     831/     CBB : (MACRO)             	alu2 R12,R1,R7,add,adc
     832/     CC7 : (MACRO)             	cpy2 R13,R6 ;LOADP2(reg)
     833/     CCB : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
     834/     CD8 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
     835/     CDB : (MACRO)             	jnzU2 r15,L71; NE 0
     836/     CE3 :                     ;      return i;
     837/     CE3 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)*
     838/     CE7 : C0 0D 03            	lbr L66
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 15 - 6/5/2013 13:45:40


     839/     CEA :                     L71:
     840/     CEA :                     ;  }
     841/     CEA :                     L68:
     842/     CEA :                     ;  for(i=0;*(s+i); i++) {
     843/     CEA : (MACRO)             	incm R1,1
     844/     CEB :                     L70:
     845/     CEB : (MACRO)             	alu2 R11,R1,R7,add,adc
     846/     CF7 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     847/     CF9 : (MACRO)             	jnzU1 r11,L67; NEI2(CVUI2(reg),con0)
     848/     CFD :                     ;  return -1;
     849/     CFD : (MACRO)             	ldaD R15,-1; reg:acon
     850/     D03 :                     L66:
     851/     D03 : (MACRO)             	release 6; release room for outgoing arguments
     852/     D09 : (MACRO)             	popr r7
     853/     D0D : (MACRO)             	popr r6
     854/     D11 : (MACRO)             	popr r1
     855/     D15 : (MACRO)             	popr r0
     856/     D19 : (MACRO)             	Cretn
     857/     D1A :                     
     858/     D1A :                     _analyzeinput:
     859/     D1A : (MACRO)             	reserve 6
     860/     D20 :                     ;void analyzeinput(){
     861/     D20 :                     ;	ledmode=2; //no choice made of led mode
     862/     D20 : (MACRO)             	ldaD R11,2; reg:acon
     863/     D26 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
     864/     D31 :                     ;	printf("analyzing:\n%s\n",buf);
     865/     D31 : (MACRO)             	ldaD R12,L74; reg:acon
     866/     D37 : (MACRO)             	ldaD R13,_buf; reg:acon
     867/     D3D : (MACRO)             	Ccall _printf
     868/     D40 :                     ;  	if (strindex((char *)buf,"POST /")>0) reqtype=post;
     869/     D40 : (MACRO)             	ldaD R12,_buf; reg:acon
     870/     D46 : (MACRO)             	ldaD R13,L77; reg:acon
     871/     D4C : (MACRO)             	Ccall _strindex; CALLI2(ar)
     872/     D4F : (MACRO)             	jnI2I r15,0,lbdf,L75 ;LEI2 0 15 L75; LE is flipped test & subtraction
     873/     D60 : (MACRO)             	ldaD R11,1; reg:acon
     874/     D66 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
     875/     D71 :                     L75:
     876/     D71 :                     ;	if (strindex((char *)buf,"GET /")>0) reqtype=get;
     877/     D71 : (MACRO)             	ldaD R12,_buf; reg:acon
     878/     D77 : (MACRO)             	ldaD R13,L80; reg:acon
     879/     D7D : (MACRO)             	Ccall _strindex; CALLI2(ar)
     880/     D80 : (MACRO)             	jnI2I r15,0,lbdf,L78 ;LEI2 0 15 L78; LE is flipped test & subtraction
     881/     D91 : (MACRO)             	ld2z R11
     882/     D95 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
     883/     DA0 :                     L78:
     884/     DA0 :                     ;	if (strindex((char *)buf,"GET /favicon")>0) reqtype=favicon;
     885/     DA0 : (MACRO)             	ldaD R12,_buf; reg:acon
     886/     DA6 : (MACRO)             	ldaD R13,L83; reg:acon
     887/     DAC : (MACRO)             	Ccall _strindex; CALLI2(ar)
     888/     DAF : (MACRO)             	jnI2I r15,0,lbdf,L81 ;LEI2 0 15 L81; LE is flipped test & subtraction
     889/     DC0 : (MACRO)             	ldaD R11,2; reg:acon
     890/     DC6 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
     891/     DD1 :                     L81:
     892/     DD1 :                     ;	printf("reqtype=%d\n",reqtype);
     893/     DD1 : (MACRO)             	ldaD R12,L84; reg:acon
     894/     DD7 : (MACRO)             	ld2 R13,'D',(_reqtype),0 ;reg:INDIRI2(addr)
     895/     DE1 : (MACRO)             	Ccall _printf
     896/     DE4 :                     ;	if (reqtype==post){
     897/     DE4 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
     898/     DEE : (MACRO)             	jneU2I r11,1,L85; NE
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 16 - 6/5/2013 13:45:40


     899/     DFA :                     ;	    printf("POST received\n");
     900/     DFA : (MACRO)             	ldaD R12,L87; reg:acon
     901/     E00 : (MACRO)             	Ccall _printf
     902/     E03 :                     ;	  if (strindex((char *)buf,"rd=0") > 0)
     903/     E03 : (MACRO)             	ldaD R12,_buf; reg:acon
     904/     E09 : (MACRO)             	ldaD R13,L90; reg:acon
     905/     E0F : (MACRO)             	Ccall _strindex; CALLI2(ar)
     906/     E12 : (MACRO)             	jnI2I r15,0,lbdf,L88 ;LEI2 0 15 L88; LE is flipped test & subtraction
     907/     E23 :                     ;		ledmode=0;
     908/     E23 : (MACRO)             	ld2z R11
     909/     E27 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
     910/     E32 :                     L88:
     911/     E32 :                     ;	  if (strindex((char *)buf,"rd=1") > 0)
     912/     E32 : (MACRO)             	ldaD R12,_buf; reg:acon
     913/     E38 : (MACRO)             	ldaD R13,L93; reg:acon
     914/     E3E : (MACRO)             	Ccall _strindex; CALLI2(ar)
     915/     E41 : (MACRO)             	jnI2I r15,0,lbdf,L86 ;LEI2 0 15 L86; LE is flipped test & subtraction
     916/     E52 :                     ;		ledmode=1;
     917/     E52 : (MACRO)             	ldaD R11,1; reg:acon
     918/     E58 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
     919/     E63 :                     ;	}
     920/     E63 : C0 0E AF            	lbr L86
     921/     E66 :                     L85:
     922/     E66 :                     ;	else if (reqtype==get)
     923/     E66 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
     924/     E70 : (MACRO)             	jnzU2 r11,L94; NE 0
     925/     E78 :                     ;		printf("GET received.\n");
     926/     E78 : (MACRO)             	ldaD R12,L96; reg:acon
     927/     E7E : (MACRO)             	Ccall _printf
     928/     E81 : C0 0E AF            	lbr L95
     929/     E84 :                     L94:
     930/     E84 :                     ;	else if (reqtype==favicon)
     931/     E84 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
     932/     E8E : (MACRO)             	jneU2I r11,2,L97; NE
     933/     E9A :                     ;		printf("favicon ignored\n");
     934/     E9A : (MACRO)             	ldaD R12,L99; reg:acon
     935/     EA0 : (MACRO)             	Ccall _printf
     936/     EA3 : C0 0E AF            	lbr L98
     937/     EA6 :                     L97:
     938/     EA6 :                     ;		printf("unknown input\n");
     939/     EA6 : (MACRO)             	ldaD R12,L100; reg:acon
     940/     EAC : (MACRO)             	Ccall _printf
     941/     EAF :                     L98:
     942/     EAF :                     L95:
     943/     EAF :                     L86:
     944/     EAF :                     ;	if (ledmode==0){
     945/     EAF : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
     946/     EB9 : (MACRO)             	jnzU2 r11,L101; NE 0
     947/     EC1 :                     ;		printf("setting led off\n");
     948/     EC1 : (MACRO)             	ldaD R12,L103; reg:acon
     949/     EC7 : (MACRO)             	Ccall _printf
     950/     ECA :                     ;		digitalWrite(0,LOW);
     951/     ECA : (MACRO)             	ld2z R11
     952/     ECE : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
     953/     ED2 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
     954/     ED6 : (MACRO)             	Ccall _digitalWrite
     955/     ED9 :                     ;	} else{
     956/     ED9 : C0 0F 14            	lbr L102
     957/     EDC :                     L101:
     958/     EDC :                     ;		if (ledmode==1){
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 17 - 6/5/2013 13:45:40


     959/     EDC : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
     960/     EE6 : (MACRO)             	jneU2I r11,1,L104; NE
     961/     EF2 :                     ;			printf("setting led ON\n");
     962/     EF2 : (MACRO)             	ldaD R12,L106; reg:acon
     963/     EF8 : (MACRO)             	Ccall _printf
     964/     EFB :                     ;			digitalWrite(0,HIGH);
     965/     EFB : (MACRO)             	ld2z R12
     966/     EFF : (MACRO)             	ldaD R13,1; reg:acon
     967/     F05 : (MACRO)             	Ccall _digitalWrite
     968/     F08 :                     ;		}else{
     969/     F08 : C0 0F 14            	lbr L105
     970/     F0B :                     L104:
     971/     F0B :                     ;			printf("No led action request\n");
     972/     F0B : (MACRO)             	ldaD R12,L107; reg:acon
     973/     F11 : (MACRO)             	Ccall _printf
     974/     F14 :                     ;		}
     975/     F14 :                     L105:
     976/     F14 :                     ;	}
     977/     F14 :                     L102:
     978/     F14 :                     ;}
     979/     F14 :                     L73:
     980/     F14 : (MACRO)             	release 6
     981/     F1A : (MACRO)             	Cretn
     982/     F1B :                     
     983/     F1B :                     _sendresponse:
     984/     F1B : (MACRO)             	reserve 4
     985/     F1F :                     ;void sendresponse(){
     986/     F1F :                     ;	switch (reqtype){
     987/     F1F : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
     988/     F29 : (MACRO)             	jzU2 r11,L111; EQ 0
     989/     F31 : (MACRO)             	jeqU2I r11,1,L113;EQI2(reg,con)
     990/     F3D : (MACRO)             	jeqU2I r11,2,L111;EQI2(reg,con)
     991/     F49 : C0 0F 67            	lbr L109
     992/     F4C :                     L111:
     993/     F4C :                     ;			printf("sending form \n");
     994/     F4C : (MACRO)             	ldaD R12,L112; reg:acon
     995/     F52 : (MACRO)             	Ccall _printf
     996/     F55 :                     ;			sendstuff();
     997/     F55 : (MACRO)             	Ccall _sendstuff
     998/     F58 :                     ;			break;
     999/     F58 : C0 0F 67            	lbr L110
    1000/     F5B :                     L113:
    1001/     F5B :                     ;			printf("sending ack");
    1002/     F5B : (MACRO)             	ldaD R12,L114; reg:acon
    1003/     F61 : (MACRO)             	Ccall _printf
    1004/     F64 :                     ;			sendack();
    1005/     F64 : (MACRO)             	Ccall _sendack
    1006/     F67 :                     ;			break;
    1007/     F67 :                     L109:
    1008/     F67 :                     L110:
    1009/     F67 :                     ;}
    1010/     F67 :                     L108:
    1011/     F67 : (MACRO)             	release 4
    1012/     F6B : (MACRO)             	Cretn
    1013/     F6C :                     
    1014/     F6C :                     _handlesession:
    1015/     F6C : (MACRO)             	pushr r7
    1016/     F71 : (MACRO)             	reserve 4; save room for outgoing arguments
    1017/     F75 :                     ;void handlesession(){	//handle a session once it's established
    1018/     F75 :                     ;	rsize=recv_size();
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 18 - 6/5/2013 13:45:40


    1019/     F75 : (MACRO)             	Ccall _recv_size;CALLU2(ar)*
    1020/     F78 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1021/     F7C :                     ;	printf("rsz=%d\n",rsize);
    1022/     F7C : (MACRO)             	ldaD R12,L116; reg:acon
    1023/     F82 : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1024/     F86 : (MACRO)             	Ccall _printf
    1025/     F89 :                     ;	if (rsize>0){
    1026/     F89 : (MACRO)             	jzU2 r7,L117; EQ 0
    1027/     F91 :                     ;		if (recv0(buf,rsize)>0){
    1028/     F91 : (MACRO)             	ldaD R12,_buf; reg:acon
    1029/     F97 : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1030/     F9B : (MACRO)             	Ccall _recv0;CALLU2(ar)*
    1031/     F9E : (MACRO)             	jzU2 r15,L119; EQ 0
    1032/     FA6 :                     ;			analyzeinput();
    1033/     FA6 : (MACRO)             	Ccall _analyzeinput
    1034/     FA9 :                     ;			sendresponse();
    1035/     FA9 : (MACRO)             	Ccall _sendresponse
    1036/     FAC :                     ;			disconnect0();
    1037/     FAC : (MACRO)             	Ccall _disconnect0
    1038/     FAF :                     ;		}
    1039/     FAF :                     L119:
    1040/     FAF :                     ;	}
    1041/     FAF :                     L117:
    1042/     FAF :                     ;}
    1043/     FAF :                     L115:
    1044/     FAF : (MACRO)             	release 4; release room for outgoing arguments
    1045/     FB3 : (MACRO)             	popr r7
    1046/     FB7 : (MACRO)             	Cretn
    1047/     FB8 :                     
    1048/     FB8 :                     _server_loop:
    1049/     FB8 : (MACRO)             	reserve 6
    1050/     FBE :                     ;void server_loop(){
    1051/     FBE :                     ;  	socketstatus=SPI_Read(S0_SR);
    1052/     FBE : (MACRO)             	ldaD R12,1027; reg:acon
    1053/     FC4 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1054/     FC7 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1055/     FCB : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1056/     FCE : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
    1057/     FDB :                     ;  	switch (socketstatus){
    1058/     FDB : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1059/     FE7 : (MACRO)             	ld2z R10
    1060/     FEB : (MACRO)             	jzU2 r11,L124; EQ 0
    1061/     FF3 : (MACRO)             	jcI2 r11,r10,lbnf,L122; LT=lbnf i.e. subtract B from A and jump if borrow 
    1062/    1007 :                     L130:
    1063/    1007 : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1064/    1013 : (MACRO)             	jcI2I r11,23,lbnf,L122  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1065/    1024 : (MACRO)             	jnI2I r11,29,lbnf,L122; GT reverse  the subtraction
    1066/    1035 : (MACRO)             	shl2I R11,1
    1067/    103B : (MACRO)             	ld2 R11,'O',R11,(L131-46);reg:  INDIRP2(addr)
    1068/    1047 : (MACRO)             	jumpv r11; JUMPV(reg)
    1069/    1051 :                     L131:
    1070/    1051 : 10 6E               	dw L126
    1071/    1053 : 10 7D               	dw L128
    1072/    1055 : 10 89               	dw L122
    1073/    1057 : 10 7D               	dw L128
    1074/    1059 : 10 7D               	dw L128
    1075/    105B : 10 7D               	dw L128
    1076/    105D : 10 7D               	dw L128
    1077/    105F :                     L124:
    1078/    105F :                     ;	  	printf("SC\n");
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 19 - 6/5/2013 13:45:40


    1079/    105F : (MACRO)             	ldaD R12,L125; reg:acon
    1080/    1065 : (MACRO)             	Ccall _printf
    1081/    1068 :                     ;			socket0_init();	//initialize socket 0
    1082/    1068 : (MACRO)             	Ccall _socket0_init
    1083/    106B :                     ;	  		break;
    1084/    106B : C0 10 89            	lbr L123
    1085/    106E :                     L126:
    1086/    106E :                     ;	  	printf("SX\n");
    1087/    106E : (MACRO)             	ldaD R12,L127; reg:acon
    1088/    1074 : (MACRO)             	Ccall _printf
    1089/    1077 :                     ;	  		handlesession();
    1090/    1077 : (MACRO)             	Ccall _handlesession
    1091/    107A :                     ;	  		break;
    1092/    107A : C0 10 89            	lbr L123
    1093/    107D :                     L128:
    1094/    107D :                     ;		  	printf("CS\n");
    1095/    107D : (MACRO)             	ldaD R12,L129; reg:acon
    1096/    1083 : (MACRO)             	Ccall _printf
    1097/    1086 :                     ;      		close0();
    1098/    1086 : (MACRO)             	Ccall _close0
    1099/    1089 :                     ;      		break;
    1100/    1089 :                     L122:
    1101/    1089 :                     L123:
    1102/    1089 :                     ;}
    1103/    1089 :                     L121:
    1104/    1089 : (MACRO)             	release 6
    1105/    108F : (MACRO)             	Cretn
    1106/    1090 :                     
    1107/    1090 :                     _main: ;copt is peeping you now!
    1108/    1090 : (MACRO)             	reserve 12
    1109/    109A :                     ;void main(void){
    1110/    109A :                     ;	delay(1000);
    1111/    109A : (MACRO)             	ldaD R12,1000; reg:acon
    1112/    10A0 : (MACRO)             	Ccall _delay
    1113/    10A3 :                     ;	printf("\nOlduino Web Server v2.0\n");
    1114/    10A3 : (MACRO)             	ldaD R12,L134; reg:acon
    1115/    10A9 : (MACRO)             	Ccall _printf
    1116/    10AC :                     ;    W5100_Init(); //initialize the wiznet chip
    1117/    10AC : (MACRO)             	Ccall _W5100_Init
    1118/    10AF :                     ;	report("initialized");
    1119/    10AF : (MACRO)             	ldaD R12,L135; reg:acon
    1120/    10B5 : (MACRO)             	Ccall _report
    1121/    10B8 : C0 10 C7            	lbr L137
    1122/    10BB :                     L136:
    1123/    10BB :                     ;	while(1){  // Loop forever
    1124/    10BB :                     ;		server_loop();
    1125/    10BB : (MACRO)             	Ccall _server_loop
    1126/    10BE :                     ;		delay(100);
    1127/    10BE : (MACRO)             	ldaD R12,100; reg:acon
    1128/    10C4 : (MACRO)             	Ccall _delay
    1129/    10C7 :                     ;	}
    1130/    10C7 :                     L137:
    1131/    10C7 :                     ;	while(1){  // Loop forever
    1132/    10C7 : C0 10 BB            	lbr L136
    1133/    10CA :                     ;}
    1134/    10CA :                     L133:
    1135/    10CA : (MACRO)             	release 12
    1136/    10D2 : (MACRO)             	Cretn
    1137/    10D3 :                     
    1138/    10D3 :                     _delay:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 20 - 6/5/2013 13:45:40


    1139/    10D3 : (MACRO)             	pushr r6
    1140/    10D8 : (MACRO)             	pushr r7
    1141/    10DD : (MACRO)             	reserve 4; save room for outgoing arguments
    1142/    10E1 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1143/    10E5 :                     ;void delay(unsigned int howlong){
    1144/    10E5 :                     ;	for (i=1;i!=howlong;i++){
    1145/    10E5 : (MACRO)             	ldaD R6,1; reg:acon
    1146/    10EB : C0 10 F2            	lbr L143
    1147/    10EE :                     L140:
    1148/    10EE :                     ;		oneMs();
    1149/    10EE : (MACRO)             	Ccall _oneMs; CALLI2(ar)
    1150/    10F1 :                     ;	}
    1151/    10F1 :                     L141:
    1152/    10F1 :                     ;	for (i=1;i!=howlong;i++){
    1153/    10F1 : (MACRO)             	incm R6,1
    1154/    10F2 :                     L143:
    1155/    10F2 : (MACRO)             	jneU2 r6,r7,L140; NE
    1156/    1104 :                     ;}
    1157/    1104 :                     L139:
    1158/    1104 : (MACRO)             	release 4; release room for outgoing arguments
    1159/    1108 : (MACRO)             	popr r7
    1160/    110C : (MACRO)             	popr r6
    1161/    1110 : (MACRO)             	Cretn
    1162/    1111 :                     
    1163/    1111 :                     _olduinoincluder:
    1164/    1111 :                     ;void olduinoincluder(){
    1165/    1111 :                     ;	asm("\tinclude olduino.inc\n");
    1166/    1111 :                     	include olduino.inc
(1)    1/    1111 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    1111 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/    1111 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    1111 :                     	align 64	;needed to make sure all on same page
(1)    5/    1140 :                     _digitalWrite:
(1)    6/    1140 : 8C                  	glo regArg1	;get the bit number
(1)    7/    1141 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/    1143 : AE                  	plo memaddr
(1)    9/    1144 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    1145 : BE                  	phi memaddr	
(1)   11/    1146 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    1147 : A8                  	plo rt1		;save it in a temp
(1)   13/    1148 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/    114E : EE                  	sex memaddr	;prepare to change it
(1)   15/    114F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    1150 : 32 57               	bz $$setbitoff
(1)   17/    1152 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    1152 : 88                  	glo rt1		;get the bit value back
(1)   19/    1153 : F1                  	or		;apply it
(1)   20/    1154 : 5E                  	str memaddr	;and save it
(1)   21/    1155 : 30 5C               	br $$outit	;go fnish up
(1)   22/    1157 :                     $$setbitoff:
(1)   23/    1157 : 88                  	glo rt1		;get the bit pattern
(1)   24/    1158 : FB FF               	xri 0xff	;reverse it
(1)   25/    115A : F2                  	and		;combine it with the existing pin value
(1)   26/    115B : 5E                  	str memaddr	;and save it
(1)   27/    115C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    115C :                     $$outit:
(1)   29/    115C : 64                  	out 4		;X was already set to memaddr
(1)   30/    115D : E2                  	sex sp		;reset X
(1)   31/    115E : (MACRO)             	cretn
(1)   32/    115F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(olduino.inc) - page 21 - 6/5/2013 13:45:40


                    40 80 
(1)   33/    1167 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    1167 :                     	align 8	;protect jump boundary
(1)   35/    1168 :                     _digitalRead:
(1)   36/    1168 : F8 00               	ldi 0		;default is false
(1)   37/    116A : AF                  	plo R15
(1)   38/    116B : BF                  	phi R15
(1)   39/    116C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    116E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    116F : (MACRO)             +	cretn
(1)   42/    1170 :                     
    1167/    1170 :                     ;}
    1168/    1170 :                     L144:
    1169/    1170 : (MACRO)             	Cretn
    1170/    1171 :                     
    1171/    1171 :                     _strncmp:
    1172/    1171 : (MACRO)             	pushr r6
    1173/    1176 : (MACRO)             	pushr r7
    1174/    117B : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1175/    1187 :                     ;{
    1176/    1187 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1177/    1187 : C0 12 0A            	lbr L150
    1178/    118A :                     L147:
    1179/    118A :                     ;	if (*s1 != *s2)
    1180/    118A : (MACRO)             	ld1 R11,'O',R12,0
    1181/    1194 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1182/    1197 : (MACRO)             	ld1 R10,'O',R13,0
    1183/    11A1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1184/    11A4 : (MACRO)             	jeqI2 r11,r10,L151; EQI2(reg,reg)
    1185/    11B6 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1186/    11B6 : (MACRO)             	ld1 R11,'O',R12,0
    1187/    11C0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1188/    11C3 : (MACRO)             	ld1 R10,'O',R13,0
    1189/    11CD : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1190/    11D0 : (MACRO)             	jcI2 r11,r10,lbdf,L154; GE is flipped test from LT
    1191/    11E4 : (MACRO)             	ldaD R6,-1; reg:acon
    1192/    11EA : C0 11 F3            	lbr L155
    1193/    11ED :                     L154:
    1194/    11ED : (MACRO)             	ldaD R6,1; reg:acon
    1195/    11F3 :                     L155:
    1196/    11F3 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1197/    11F7 : C0 12 16            	lbr L146
    1198/    11FA :                     L151:
    1199/    11FA :                     ;	else if (*s1 == '\0')
    1200/    11FA : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1201/    11FC : (MACRO)             	jnzU1 r11,L156; NEI2(CVUI2(reg),con0)
    1202/    1200 :                     ;	    return 0;
    1203/    1200 : (MACRO)             	ld2z R15
    1204/    1204 : C0 12 16            	lbr L146
    1205/    1207 :                     L156:
    1206/    1207 :                     L148:
    1207/    1207 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1208/    1207 : (MACRO)             	incm R12,1
    1209/    1208 : (MACRO)             	incm R13,1
    1210/    1209 : (MACRO)             	decm R7,1
    1211/    120A :                     L150:
    1212/    120A : (MACRO)             	jnzU2 r7,L147; NE 0
    1213/    1212 :                     ;    return 0;
    1214/    1212 : (MACRO)             	ld2z R15
    1215/    1216 :                     L146:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 22 - 6/5/2013 13:45:40


    1216/    1216 : (MACRO)             	popr r7
    1217/    121A : (MACRO)             	popr r6
    1218/    121E : (MACRO)             	Cretn
    1219/    121F :                     
    1220/    121F :                     _strcpy:
    1221/    121F : (MACRO)             	reserve 2
    1222/    1221 :                     ;{
    1223/    1221 :                     ;	char *save = to;
    1224/    1221 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    1225/    122E :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    1226/    122E : C0 12 33            	lbr L162
    1227/    1231 :                     L159:
    1228/    1231 :                     L160:
    1229/    1231 : (MACRO)             	incm R13,1
    1230/    1232 : (MACRO)             	incm R12,1
    1231/    1233 :                     L162:
    1232/    1233 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    1233/    1235 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    1234/    1237 : (MACRO)             	jnzU1 r11,L159; NEI2(CVUI2(reg),con0)
    1235/    123B :                     ;	return(save);
    1236/    123B : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    1237/    1247 :                     L158:
    1238/    1247 : (MACRO)             	release 2
    1239/    1249 : (MACRO)             	Cretn
    1240/    124A :                     
    1241/    124A :                     _strlen:
    1242/    124A : (MACRO)             	pushr r7
    1243/    124F :                     ;{
    1244/    124F :                     ;	unsigned int slen = 0 ;
    1245/    124F : (MACRO)             	ld2z R7
    1246/    1253 : C0 12 58            	lbr L165
    1247/    1256 :                     L164:
    1248/    1256 :                     ;	while (*str != 0) {
    1249/    1256 :                     ;      slen++ ;
    1250/    1256 : (MACRO)             	incm R7,1
    1251/    1257 :                     ;      str++ ;
    1252/    1257 : (MACRO)             	incm R12,1
    1253/    1258 :                     ;   }
    1254/    1258 :                     L165:
    1255/    1258 :                     ;	while (*str != 0) {
    1256/    1258 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1257/    125A : (MACRO)             	jnzU1 r11,L164; NEI2(CVUI2(reg),con0)
    1258/    125E :                     ;   return slen;
    1259/    125E : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1260/    1262 :                     L163:
    1261/    1262 : (MACRO)             	popr r7
    1262/    1266 : (MACRO)             	Cretn
    1263/    1267 :                     
    1264/    1267 :                     _printstr:
    1265/    1267 : (MACRO)             	pushr r7
    1266/    126C : (MACRO)             	reserve 4; save room for outgoing arguments
    1267/    1270 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1268/    1274 :                     ;void printstr(char *ptr){
    1269/    1274 : C0 12 92            	lbr L169
    1270/    1277 :                     L168:
    1271/    1277 :                     ;    while(*ptr) out(5,*ptr++);
    1272/    1277 : (MACRO)             	ldaD R12,5; reg:acon
    1273/    127D : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) opt1
    1274/    1281 : (MACRO)             	incm R7,1
    1275/    1282 : (MACRO)             	ld1 R13,'O',R11,0
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 23 - 6/5/2013 13:45:40


    1276/    128C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1277/    128F : (MACRO)             	Ccall _out; CALLI2(ar)
    1278/    1292 :                     L169:
    1279/    1292 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1280/    1294 : (MACRO)             	jnzU1 r11,L168; NEI2(CVUI2(reg),con0)
    1281/    1298 :                     ;}
    1282/    1298 :                     L167:
    1283/    1298 : (MACRO)             	release 4; release room for outgoing arguments
    1284/    129C : (MACRO)             	popr r7
    1285/    12A0 : (MACRO)             	Cretn
    1286/    12A1 :                     
    1287/    12A1 :                     	align 4
    1288/    12A4 :                     _round_nums:
    1289/    12A4 : 3F 00 00 00         	dd 0x3f000000
    1290/    12A8 : 3D 4C CC CD         	dd 0x3d4ccccd
    1291/    12AC : 3B A3 D7 0A         	dd 0x3ba3d70a
    1292/    12B0 : 3A 03 12 6F         	dd 0x3a03126f
    1293/    12B4 : 38 51 B7 17         	dd 0x3851b717
    1294/    12B8 : 36 A7 C5 AC         	dd 0x36a7c5ac
    1295/    12BC : 35 06 37 BD         	dd 0x350637bd
    1296/    12C0 : 33 56 BF 95         	dd 0x3356bf95
    1297/    12C4 :                     	align 4
    1298/    12C4 :                     _mult_nums:
    1299/    12C4 : 3F 80 00 00         	dd 0x3f800000
    1300/    12C8 : 41 20 00 00         	dd 0x41200000
    1301/    12CC : 42 C8 00 00         	dd 0x42c80000
    1302/    12D0 : 44 7A 00 00         	dd 0x447a0000
    1303/    12D4 : 46 1C 40 00         	dd 0x461c4000
    1304/    12D8 : 47 C3 50 00         	dd 0x47c35000
    1305/    12DC : 49 74 24 00         	dd 0x49742400
    1306/    12E0 : 4B 18 96 80         	dd 0x4b189680
    1307/    12E4 :                     _ftoa:
    1308/    12E4 : (MACRO)             	reserve 62; save room for local variables
    1309/    12EE : (MACRO)             	pushr r0
    1310/    12F3 : (MACRO)             	pushr r1
    1311/    12F8 : (MACRO)             	pushr r6
    1312/    12FD : (MACRO)             	pushr r7
    1313/    1302 : (MACRO)             	reserve 8; save room for outgoing arguments
    1314/    130A : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
    1315/    1312 : (MACRO)             	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
    1316/    131E :                     ;{
    1317/    131E :                     ;   char *output = outbfr ;
    1318/    131E : (MACRO)             	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
    1319/    132A :                     ;   if (flt < 0.0) {
    1320/    132A : (MACRO)             	ld4 RL10,'D',(L174),0;INDIRF4(addr)
    1321/    1338 : (MACRO)             	jcF4 RL6,RL10,lbdf,L172;GEF4(reg,reg) - reverse test
    1322/    137D :                     ;      *output++ = '-' ;
    1323/    137D : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1324/    1381 : (MACRO)             	incm R0,1
    1325/    1382 : (MACRO)             	ldaD R10,45; reg:acon
    1326/    1388 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1327/    138A :                     ;      flt *= -1.0 ;
    1328/    138A : (MACRO)             	ld4 RL8,'D',(L175),0;INDIRF4(addr)
    1329/    1398 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
    1330/    13A0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1331/    13A3 : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1332/    13AB :                     ;   } else {
    1333/    13AB : C0 13 BE            	lbr L173
    1334/    13AE :                     L172:
    1335/    13AE :                     ;      if (use_leading_plus) {
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 24 - 6/5/2013 13:45:40


    1336/    13AE : C0 13 BE            	lbr L176
    1337/    13B1 :                     ;         *output++ = '+' ;
    1338/    13B1 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1339/    13B5 : (MACRO)             	incm R0,1
    1340/    13B6 : (MACRO)             	ldaD R10,43; reg:acon
    1341/    13BC : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1342/    13BE :                     ;      }
    1343/    13BE :                     L176:
    1344/    13BE :                     ;   }
    1345/    13BE :                     L173:
    1346/    13BE :                     ;   if (dec_digits < 8) {
    1347/    13BE : (MACRO)             	jcI2I r1,8,lbdf,L178; GE is flipped test from LT
    1348/    13CF :                     ;      flt += round_nums[dec_digits] ;
    1349/    13CF : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1350/    13D7 : (MACRO)             	cpy2 R11,R1
    1351/    13DB : (MACRO)             	shl2I R11,2
    1352/    13E7 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
    1353/    13F7 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
    1354/    13FA : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1355/    1402 :                     ;   }
    1356/    1402 :                     L178:
    1357/    1402 :                     ;	mult=mult_nums[dec_digits];
    1358/    1402 : (MACRO)             	cpy2 R11,R1
    1359/    1406 : (MACRO)             	shl2I R11,2
    1360/    1412 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
    1361/    1422 : (MACRO)             	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
    1362/    1435 :                     ;   wholeNum = flt;
    1363/    1435 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1364/    143D : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1365/    1440 : (MACRO)             	st4 RL8,'O',sp,(-8+80)
    1366/    1453 :                     ;   decimalNum = ((flt - wholeNum) * mult);
    1367/    1453 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1368/    145B : (MACRO)             	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
    1369/    146E : (MACRO)             	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1370/    147E : (MACRO)             	Ccall cvif4; emit2
    1371/    1481 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1372/    1489 : (MACRO)             	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
    1373/    1499 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
    1374/    149C : (MACRO)             	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
    1375/    14AC : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1376/    14AF : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1377/    14B2 : (MACRO)             	st4 RL8,'O',sp,(-16+80)
    1378/    14C5 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
    1379/    14C5 : (MACRO)             	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1380/    14D5 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1381/    14E2 : (MACRO)             	ldaD R11,1; reg:acon
    1382/    14E8 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1383/    14F5 : (MACRO)             	Ccall _dubdabx
    1384/    14F8 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1385/    14FC : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1386/    1500 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1387/    1504 : (MACRO)             	Ccall _strcpy
    1388/    1507 :                     ;   output+=strlen(output);
    1389/    1507 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1390/    150B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1391/    150E : (MACRO)             	alu2 R0,R15,R0,add,adc
    1392/    151A :                     ;   if (dec_digits > 0) {
    1393/    151A : (MACRO)             	jzU2 r1,L180; EQ 0
    1394/    1522 :                     ;		*output++ = '.' ;
    1395/    1522 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 25 - 6/5/2013 13:45:40


    1396/    1526 : (MACRO)             	incm R0,1
    1397/    1527 : (MACRO)             	ldaD R10,46; reg:acon
    1398/    152D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1399/    152F :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
    1400/    152F : (MACRO)             	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
    1401/    153F : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1402/    154C : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)*
    1403/    1550 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1404/    155D : (MACRO)             	Ccall _dubdabx
    1405/    1560 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1406/    1564 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1407/    1568 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1408/    156C : (MACRO)             	Ccall _strcpy
    1409/    156F :                     ;	}
    1410/    156F :                     L180:
    1411/    156F :                     ;   return outbfr;
    1412/    156F : (MACRO)             	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
    1413/    157B :                     L171:
    1414/    157B : (MACRO)             	release 8; release room for outgoing arguments
    1415/    1583 : (MACRO)             	popr r7
    1416/    1587 : (MACRO)             	popr r6
    1417/    158B : (MACRO)             	popr r1
    1418/    158F : (MACRO)             	popr r0
    1419/    1593 : (MACRO)             	release 62; release room for local variables 
    1420/    159B : (MACRO)             	Cretn
    1421/    159C :                     
    1422/    159C :                     _itoa:
    1423/    159C : (MACRO)             	reserve 2; save room for local variables
    1424/    159E : (MACRO)             	pushr r0
    1425/    15A3 : (MACRO)             	pushr r1
    1426/    15A8 : (MACRO)             	pushr r6
    1427/    15AD : (MACRO)             	pushr r7
    1428/    15B2 : (MACRO)             	reserve 4; save room for outgoing arguments
    1429/    15B6 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1430/    15C3 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    1431/    15D0 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1432/    15D0 :                     ;	unsigned int flag=0;
    1433/    15D0 : (MACRO)             	ld2z R0
    1434/    15D4 :                     ;	char * bptr; bptr=buffer;
    1435/    15D4 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1436/    15E0 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1437/    15ED :                     ;	if (s<0){
    1438/    15ED : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1439/    15F9 : (MACRO)             	jcI2I r11,0,lbdf,L183; GE is flipped test from LT
    1440/    160A :                     ;		*bptr='-';bptr++;
    1441/    160A : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1442/    1616 : (MACRO)             	ldaD R10,45; reg:acon
    1443/    161C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1444/    161E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1445/    162A : (MACRO)             	incm R11,1
    1446/    162B : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1447/    1638 :                     ;		n=-s;
    1448/    1638 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1449/    1644 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1450/    164D : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1451/    1651 :                     ;	} else{
    1452/    1651 : C0 16 64            	lbr L184
    1453/    1654 :                     L183:
    1454/    1654 :                     ;		n=s;
    1455/    1654 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 26 - 6/5/2013 13:45:40


    1456/    1660 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1457/    1664 :                     ;	}
    1458/    1664 :                     L184:
    1459/    1664 :                     ;	k=10000;
    1460/    1664 : (MACRO)             	ldaD R7,10000; reg:acon
    1461/    166A : C0 16 F1            	lbr L186
    1462/    166D :                     L185:
    1463/    166D :                     ;	while(k>0){
    1464/    166D :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1465/    166D : (MACRO)             	ld2z R1
    1466/    1671 : C0 16 81            	lbr L191
    1467/    1674 :                     L188:
    1468/    1674 :                     L189:
    1469/    1674 : (MACRO)             	incm R1,1
    1470/    1675 : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1471/    1681 :                     L191:
    1472/    1681 : (MACRO)             	jcU2 r6,r7,lbdf,L188 ;LE is flipped test & operands
    1473/    168E :                     ;		if (flag || r>0||k==1){
    1474/    168E : (MACRO)             	jnzU2 r0,L195; NE 0
    1475/    1696 : (MACRO)             	jnzU2 r1,L195; NE 0
    1476/    169E : (MACRO)             	jneU2I r7,1,L192; NE
    1477/    16AA :                     L195:
    1478/    16AA :                     ;			*bptr=('0'+r);bptr++;
    1479/    16AA : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1480/    16B6 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    1481/    16BE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1482/    16C0 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1483/    16CC : (MACRO)             	incm R11,1
    1484/    16CD : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1485/    16DA :                     ;			flag='y';
    1486/    16DA : (MACRO)             	ldaD R0,121; reg:acon
    1487/    16E0 :                     ;		}
    1488/    16E0 :                     L192:
    1489/    16E0 :                     ;		k=k/10;
    1490/    16E0 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1491/    16E4 : (MACRO)             	ldaD R13,10; reg:acon
    1492/    16EA : (MACRO)             	Ccall _divu2
    1493/    16ED : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1494/    16F1 :                     ;	}
    1495/    16F1 :                     L186:
    1496/    16F1 :                     ;	while(k>0){
    1497/    16F1 : (MACRO)             	jnzU2 r7,L185; NE 0
    1498/    16F9 :                     ;	*bptr='\0';
    1499/    16F9 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1500/    1705 : (MACRO)             	ldaD R10,0; reg:acon
    1501/    170B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1502/    170D :                     ;	return buffer;
    1503/    170D : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1504/    1719 :                     L182:
    1505/    1719 : (MACRO)             	release 4; release room for outgoing arguments
    1506/    171D : (MACRO)             	popr r7
    1507/    1721 : (MACRO)             	popr r6
    1508/    1725 : (MACRO)             	popr r1
    1509/    1729 : (MACRO)             	popr r0
    1510/    172D : (MACRO)             	release 2; release room for local variables 
    1511/    172F : (MACRO)             	Cretn
    1512/    1730 :                     
    1513/    1730 :                     _ltoa:
    1514/    1730 : (MACRO)             	pushr r1
    1515/    1735 : (MACRO)             	pushr r6
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 27 - 6/5/2013 13:45:40


    1516/    173A : (MACRO)             	pushr r7
    1517/    173F : (MACRO)             	reserve 8; save room for outgoing arguments
    1518/    1747 : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1519/    174F :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1520/    174F :                     ;	char* bptr=buffer;
    1521/    174F : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
    1522/    175B :                     ;	if (s<0){
    1523/    175B : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1524/    1767 : (MACRO)             	jcI4 RL6,RL10,lbdf,L197; GE is flipped test from LT
    1525/    1783 :                     ;		*bptr++='-';
    1526/    1783 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1527/    1787 : (MACRO)             	incm R1,1
    1528/    1788 : (MACRO)             	ldaD R10,45; reg:acon
    1529/    178E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1530/    1790 :                     ;		s=-s;
    1531/    1790 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1532/    17B0 :                     ;	}
    1533/    17B0 :                     L197:
    1534/    17B0 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1535/    17B0 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
    1536/    17B8 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1537/    17C5 : (MACRO)             	ldaD R11,1; reg:acon
    1538/    17CB : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1539/    17D8 : (MACRO)             	Ccall _dubdabx
    1540/    17DB : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1541/    17DF : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
    1542/    17E3 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1543/    17E7 : (MACRO)             	Ccall _strcpy
    1544/    17EA :                     ;	return buffer;
    1545/    17EA : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    1546/    17F6 :                     L196:
    1547/    17F6 : (MACRO)             	release 8; release room for outgoing arguments
    1548/    17FE : (MACRO)             	popr r7
    1549/    1802 : (MACRO)             	popr r6
    1550/    1806 : (MACRO)             	popr r1
    1551/    180A : (MACRO)             	Cretn
    1552/    180B :                     
    1553/    180B :                     _printint:
    1554/    180B : (MACRO)             	reserve 12
    1555/    1815 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1556/    1822 :                     ;void printint(int s){ //print an integer
    1557/    1822 :                     ;	itoa(s,buffer);
    1558/    1822 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1559/    182E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1560/    1836 : (MACRO)             	Ccall _itoa
    1561/    1839 :                     ;	printstr(buffer);
    1562/    1839 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1563/    1841 : (MACRO)             	Ccall _printstr
    1564/    1844 :                     ;}
    1565/    1844 :                     L199:
    1566/    1844 : (MACRO)             	release 12
    1567/    184C : (MACRO)             	Cretn
    1568/    184D :                     
    1569/    184D :                     _printlint:
    1570/    184D : (MACRO)             	reserve 18
    1571/    1857 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1572/    1864 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1573/    1871 :                     ;void printlint(long s){ //print a long integer
    1574/    1871 :                     ;	printstr(ltoa(s,buffer));
    1575/    1871 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 28 - 6/5/2013 13:45:40


    1576/    1881 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1577/    1889 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1578/    1896 : (MACRO)             	Ccall _ltoa
    1579/    1899 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1580/    189D : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1581/    18A1 : (MACRO)             	Ccall _printstr
    1582/    18A4 :                     ;}
    1583/    18A4 :                     L200:
    1584/    18A4 : (MACRO)             	release 18
    1585/    18AC : (MACRO)             	Cretn
    1586/    18AD :                     
    1587/    18AD :                     _printflt:
    1588/    18AD : (MACRO)             	reserve 28
    1589/    18B7 : (MACRO)             	st2 r12,'O',sp,(30); flag1 
    1590/    18C4 : (MACRO)             	st2 r13,'O',sp,(32); flag1 
    1591/    18D1 :                     ;void printflt(float s){ //print a float
    1592/    18D1 :                     ;	printstr(ftoa(s,buffer,3));
    1593/    18D1 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
    1594/    18E1 : (MACRO)             	ldA2 R11,'O',sp,(-22+30); reg:addr
    1595/    18E9 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1596/    18F6 : (MACRO)             	ldaD R11,3; reg:acon
    1597/    18FC : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1598/    1909 : (MACRO)             	Ccall _ftoa
    1599/    190C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1600/    1910 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1601/    1914 : (MACRO)             	Ccall _printstr
    1602/    1917 :                     ;}
    1603/    1917 :                     L201:
    1604/    1917 : (MACRO)             	release 28
    1605/    191F : (MACRO)             	Cretn
    1606/    1920 :                     
    1607/    1920 :                     _putxn:
    1608/    1920 : (MACRO)             	reserve 4
    1609/    1924 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1610/    1931 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1611/    193D : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1612/    1947 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1613/    1947 :                     ;	if (x<10){
    1614/    1947 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1615/    1951 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1616/    1954 : (MACRO)             	jcI2I r11,10,lbdf,L203; GE is flipped test from LT
    1617/    1965 :                     ;		putc(x+'0');
    1618/    1965 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1619/    196F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1620/    1972 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1621/    197A : (MACRO)             	cpy1 R12,R11
    1622/    197C : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1623/    197F : (MACRO)             	Ccall _putc
    1624/    1982 :                     ;	} else {
    1625/    1982 : C0 19 AA            	lbr L204
    1626/    1985 :                     L203:
    1627/    1985 :                     ;		putc(x+'A'-10);
    1628/    1985 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1629/    198F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1630/    1992 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1631/    199A : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1632/    19A2 : (MACRO)             	cpy1 R12,R11
    1633/    19A4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1634/    19A7 : (MACRO)             	Ccall _putc
    1635/    19AA :                     ;	}
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 29 - 6/5/2013 13:45:40


    1636/    19AA :                     L204:
    1637/    19AA :                     ;}
    1638/    19AA :                     L202:
    1639/    19AA : (MACRO)             	release 4
    1640/    19AE : (MACRO)             	Cretn
    1641/    19AF :                     
    1642/    19AF :                     _putx:
    1643/    19AF : (MACRO)             	reserve 4
    1644/    19B3 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1645/    19C0 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1646/    19CC : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1647/    19D6 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1648/    19D6 :                     ;	putxn(x>>4);
    1649/    19D6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1650/    19E0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1651/    19E3 : (MACRO)             	shrI2I R11,4
    1652/    1A03 : (MACRO)             	cpy1 R12,R11
    1653/    1A05 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1654/    1A08 : (MACRO)             	Ccall _putxn
    1655/    1A0B :                     ;	putxn(x & 0x0F);
    1656/    1A0B : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1657/    1A15 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1658/    1A18 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1659/    1A20 :                     	;removed ?	cpy2 R11,R11
    1660/    1A20 : (MACRO)             	cpy1 R12,R11
    1661/    1A22 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1662/    1A25 : (MACRO)             	Ccall _putxn
    1663/    1A28 :                     ;}
    1664/    1A28 :                     L205:
    1665/    1A28 : (MACRO)             	release 4
    1666/    1A2C : (MACRO)             	Cretn
    1667/    1A2D :                     
    1668/    1A2D :                     _printf:
    1669/    1A2D : (MACRO)             	reserve 2; save room for local variables
    1670/    1A2F : (MACRO)             	pushr r0
    1671/    1A34 : (MACRO)             	pushr r1
    1672/    1A39 : (MACRO)             	pushr r6
    1673/    1A3E : (MACRO)             	pushr r7
    1674/    1A43 : (MACRO)             	reserve 4; save room for outgoing arguments
    1675/    1A47 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1676/    1A54 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    1677/    1A61 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    1678/    1A61 :                     ;	int argslot=0;	//used to align longs
    1679/    1A61 : (MACRO)             	ld2z R1
    1680/    1A65 :                     ;	int * this=(int *)&ptr;
    1681/    1A65 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
    1682/    1A6D :                     ;	this++; argslot++; //advance argument pointer and slot #
    1683/    1A6D : (MACRO)             	incm R6,2
    1684/    1A6F : (MACRO)             	incm R1,1
    1685/    1A70 : C0 1D 74            	lbr L208
    1686/    1A73 :                     L207:
    1687/    1A73 :                     ;    while(*ptr) {
    1688/    1A73 :                     ;		c=*ptr++;
    1689/    1A73 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1690/    1A7F : (MACRO)             	cpy2 R10,R11
    1691/    1A83 : (MACRO)             	incm R10,1
    1692/    1A84 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1693/    1A91 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1694/    1A93 :                     ;		if (c!='%'){
    1695/    1A93 : (MACRO)             	cpy1 R11,R7
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 30 - 6/5/2013 13:45:40


    1696/    1A95 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1697/    1A98 : (MACRO)             	jeqU2I r11,37,L210;EQI2(reg,con)
    1698/    1AA4 :                     ;			putc(c);
    1699/    1AA4 : (MACRO)             	cpy1 R12,R7
    1700/    1AA6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1701/    1AA9 : (MACRO)             	Ccall _putc
    1702/    1AAC :                     ;		} else{
    1703/    1AAC : C0 1D 74            	lbr L211
    1704/    1AAF :                     L210:
    1705/    1AAF :                     ;			c=*ptr++;
    1706/    1AAF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1707/    1ABB : (MACRO)             	cpy2 R10,R11
    1708/    1ABF : (MACRO)             	incm R10,1
    1709/    1AC0 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1710/    1ACD : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1711/    1ACF :                     ;			switch (c){
    1712/    1ACF : (MACRO)             	cpy1 R0,R7
    1713/    1AD1 : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1714/    1AD4 : (MACRO)             	jcI2I r0,99,lbnf,L231  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1715/    1AE5 : (MACRO)             	jnI2I r0,108,lbnf,L232; GT reverse  the subtraction
    1716/    1AF6 : (MACRO)             	cpy2 R11,R0
    1717/    1AFA : (MACRO)             	shl2I R11,1
    1718/    1B00 : (MACRO)             	ld2 R11,'O',R11,(L233-198);reg:  INDIRP2(addr)
    1719/    1B0C : (MACRO)             	jumpv r11; JUMPV(reg)
    1720/    1B16 :                     L233:
    1721/    1B16 : 1B AA               	dw L217
    1722/    1B18 : 1B 74               	dw L215
    1723/    1B1A : 1D 63               	dw L212
    1724/    1B1C : 1D 13               	dw L226
    1725/    1B1E : 1D 63               	dw L212
    1726/    1B20 : 1D 63               	dw L212
    1727/    1B22 : 1B 74               	dw L215
    1728/    1B24 : 1D 63               	dw L212
    1729/    1B26 : 1D 63               	dw L212
    1730/    1B28 : 1C 07               	dw L219
    1731/    1B2A :                     L231:
    1732/    1B2A : (MACRO)             	jeqU2I r0,88,L218;EQI2(reg,con)
    1733/    1B36 : C0 1D 63            	lbr L212
    1734/    1B39 :                     L232:
    1735/    1B39 : (MACRO)             	ldaD R11,115; reg:acon
    1736/    1B3F : (MACRO)             	jeqI2 r0,r11,L216; EQI2(reg,reg)
    1737/    1B51 : (MACRO)             	jcI2 r0,r11,lbnf,L212; LT=lbnf i.e. subtract B from A and jump if borrow 
    1738/    1B65 :                     L235:
    1739/    1B65 : (MACRO)             	jeqU2I r0,120,L218;EQI2(reg,con)
    1740/    1B71 : C0 1D 63            	lbr L212
    1741/    1B74 :                     L215:
    1742/    1B74 :                     ;					printint(*this++);
    1743/    1B74 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1744/    1B78 : (MACRO)             	incm R6,2
    1745/    1B7A : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    1746/    1B86 : (MACRO)             	Ccall _printint
    1747/    1B89 :                     ;					argslot+=1; //next argument slot
    1748/    1B89 : (MACRO)             	incm R1,1
    1749/    1B8A :                     ;					break;
    1750/    1B8A : C0 1D 74            	lbr L213
    1751/    1B8D :                     L216:
    1752/    1B8D :                     ;					printstr((char*) *this++);
    1753/    1B8D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1754/    1B91 : (MACRO)             	incm R6,2
    1755/    1B93 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 31 - 6/5/2013 13:45:40


    1756/    1B9F : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1757/    1BA3 : (MACRO)             	Ccall _printstr
    1758/    1BA6 :                     ;					argslot+=1; //next argument slot
    1759/    1BA6 : (MACRO)             	incm R1,1
    1760/    1BA7 :                     ;					break;
    1761/    1BA7 : C0 1D 74            	lbr L213
    1762/    1BAA :                     L217:
    1763/    1BAA :                     ;					putc((unsigned int) *this++);
    1764/    1BAA : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1765/    1BAE : (MACRO)             	incm R6,2
    1766/    1BB0 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1767/    1BBC : (MACRO)             	cpy1 R12,R11
    1768/    1BBE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1769/    1BC1 : (MACRO)             	Ccall _putc
    1770/    1BC4 :                     ;					argslot+=1; //next argument slot
    1771/    1BC4 : (MACRO)             	incm R1,1
    1772/    1BC5 :                     ;					break;
    1773/    1BC5 : C0 1D 74            	lbr L213
    1774/    1BC8 :                     L218:
    1775/    1BC8 :                     ;					putx(((unsigned int) *this)>>8);
    1776/    1BC8 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1777/    1BD4 : 9B                  	ghi	R11	;opt2
    1778/    1BD5 : AB                  	plo	R11
    1779/    1BD6 : F8 00               	ldi	0
    1780/    1BD8 : BB                  	phi	R11
    1781/    1BD9 : (MACRO)             	cpy1 R12,R11
    1782/    1BDB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1783/    1BDE : (MACRO)             	Ccall _putx
    1784/    1BE1 :                     ;					putx(((unsigned int) *this++)&255);
    1785/    1BE1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1786/    1BE5 : (MACRO)             	incm R6,2
    1787/    1BE7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1788/    1BF3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1789/    1BFB : (MACRO)             	cpy1 R12,R11
    1790/    1BFD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1791/    1C00 : (MACRO)             	Ccall _putx
    1792/    1C03 :                     ;					argslot+=1; //next argument slot
    1793/    1C03 : (MACRO)             	incm R1,1
    1794/    1C04 :                     ;					break;
    1795/    1C04 : C0 1D 74            	lbr L213
    1796/    1C07 :                     L219:
    1797/    1C07 :                     ;					if (*ptr){ //as long as there's something there
    1798/    1C07 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1799/    1C13 : (MACRO)             	ld1 R11,'O',R11,0
    1800/    1C1D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1801/    1C20 : (MACRO)             	jzU2 r11,L220; EQ 0
    1802/    1C28 :                     ;						xord=*ptr++;
    1803/    1C28 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1804/    1C34 : (MACRO)             	cpy2 R10,R11
    1805/    1C38 : (MACRO)             	incm R10,1
    1806/    1C39 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1807/    1C46 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1808/    1C48 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    1809/    1C52 :                     ;						if (argslot&1) {
    1810/    1C52 : (MACRO)             	alu2I R11,R1,1,ani,ani
    1811/    1C5A :                     	;removed ?	cpy2 R11,R1
    1812/    1C5A : (MACRO)             	jzU2 r11,L222; EQ 0
    1813/    1C62 :                     ;							this++;
    1814/    1C62 : (MACRO)             	incm R6,2
    1815/    1C64 :                     ;							argslot++;
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 32 - 6/5/2013 13:45:40


    1816/    1C64 : (MACRO)             	incm R1,1
    1817/    1C65 :                     ;						}
    1818/    1C65 :                     L222:
    1819/    1C65 :                     ;						if(xord=='d'){
    1820/    1C65 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    1821/    1C6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1822/    1C72 : (MACRO)             	jneU2I r11,100,L224; NE
    1823/    1C7E :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1824/    1C7E : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
    1825/    1C8E : (MACRO)             	Ccall _printlint
    1826/    1C91 :                     ;							this+=2;				// and advances it 4 bytes
    1827/    1C91 : (MACRO)             	incm R6,4
    1828/    1C95 :                     ;						} else{
    1829/    1C95 : C0 1D 0E            	lbr L225
    1830/    1C98 :                     L224:
    1831/    1C98 :                     ;							putx(((unsigned int) *this)>>8);
    1832/    1C98 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1833/    1CA4 : 9B                  	ghi	R11	;opt2
    1834/    1CA5 : AB                  	plo	R11
    1835/    1CA6 : F8 00               	ldi	0
    1836/    1CA8 : BB                  	phi	R11
    1837/    1CA9 : (MACRO)             	cpy1 R12,R11
    1838/    1CAB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1839/    1CAE : (MACRO)             	Ccall _putx
    1840/    1CB1 :                     ;							putx(((unsigned int) *this++)&255);
    1841/    1CB1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1842/    1CB5 : (MACRO)             	incm R6,2
    1843/    1CB7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1844/    1CC3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1845/    1CCB : (MACRO)             	cpy1 R12,R11
    1846/    1CCD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1847/    1CD0 : (MACRO)             	Ccall _putx
    1848/    1CD3 :                     ;							putx(((unsigned int) *this)>>8);
    1849/    1CD3 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1850/    1CDF : 9B                  	ghi	R11	;opt2
    1851/    1CE0 : AB                  	plo	R11
    1852/    1CE1 : F8 00               	ldi	0
    1853/    1CE3 : BB                  	phi	R11
    1854/    1CE4 : (MACRO)             	cpy1 R12,R11
    1855/    1CE6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1856/    1CE9 : (MACRO)             	Ccall _putx
    1857/    1CEC :                     ;							putx(((unsigned int) *this++)&255);
    1858/    1CEC : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1859/    1CF0 : (MACRO)             	incm R6,2
    1860/    1CF2 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1861/    1CFE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1862/    1D06 : (MACRO)             	cpy1 R12,R11
    1863/    1D08 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1864/    1D0B : (MACRO)             	Ccall _putx
    1865/    1D0E :                     ;						}
    1866/    1D0E :                     L225:
    1867/    1D0E :                     ;						argslot+=2;
    1868/    1D0E : (MACRO)             	incm R1,2
    1869/    1D10 :                     ;						break;
    1870/    1D10 : C0 1D 74            	lbr L213
    1871/    1D13 :                     L220:
    1872/    1D13 :                     L226:
    1873/    1D13 :                     ;					if (*ptr){ //as long as there's something there
    1874/    1D13 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1875/    1D1F : (MACRO)             	ld1 R11,'O',R11,0
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 33 - 6/5/2013 13:45:40


    1876/    1D29 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1877/    1D2C : (MACRO)             	jzU2 r11,L227; EQ 0
    1878/    1D34 :                     ;						if (argslot&1) { //adjust alignment
    1879/    1D34 : (MACRO)             	alu2I R11,R1,1,ani,ani
    1880/    1D3C :                     	;removed ?	cpy2 R11,R1
    1881/    1D3C : (MACRO)             	jzU2 r11,L229; EQ 0
    1882/    1D44 :                     ;							this++;
    1883/    1D44 : (MACRO)             	incm R6,2
    1884/    1D46 :                     ;							argslot++;
    1885/    1D46 : (MACRO)             	incm R1,1
    1886/    1D47 :                     ;						}
    1887/    1D47 :                     L229:
    1888/    1D47 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    1889/    1D47 : (MACRO)             	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
    1890/    1D57 : (MACRO)             	Ccall _printflt
    1891/    1D5A :                     ;						this+=2;				// and advances it 4 bytes
    1892/    1D5A : (MACRO)             	incm R6,4
    1893/    1D5E :                     ;						argslot+=2;
    1894/    1D5E : (MACRO)             	incm R1,2
    1895/    1D60 :                     ;						break;
    1896/    1D60 : C0 1D 74            	lbr L213
    1897/    1D63 :                     L227:
    1898/    1D63 :                     L212:
    1899/    1D63 :                     ;					putc('%');putc(c);
    1900/    1D63 : (MACRO)             	ldaD R12,37; reg:acon
    1901/    1D69 : (MACRO)             	Ccall _putc
    1902/    1D6C : (MACRO)             	cpy1 R12,R7
    1903/    1D6E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1904/    1D71 : (MACRO)             	Ccall _putc
    1905/    1D74 :                     ;			} //switch
    1906/    1D74 :                     L213:
    1907/    1D74 :                     ;		} //%
    1908/    1D74 :                     L211:
    1909/    1D74 :                     ;	} //while
    1910/    1D74 :                     L208:
    1911/    1D74 :                     ;    while(*ptr) {
    1912/    1D74 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1913/    1D80 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1914/    1D82 : (MACRO)             	jnzU1 r11,L207; NEI2(CVUI2(reg),con0)
    1915/    1D86 :                     ;} //prtf
    1916/    1D86 :                     L206:
    1917/    1D86 : (MACRO)             	release 4; release room for outgoing arguments
    1918/    1D8A : (MACRO)             	popr r7
    1919/    1D8E : (MACRO)             	popr r6
    1920/    1D92 : (MACRO)             	popr r1
    1921/    1D96 : (MACRO)             	popr r0
    1922/    1D9A : (MACRO)             	release 2; release room for local variables 
    1923/    1D9C : (MACRO)             	Cretn
    1924/    1D9D :                     
    1925/    1D9D :                     _exit:
    1926/    1D9D : (MACRO)             	reserve 4
    1927/    1DA1 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1928/    1DAE :                     ;void exit(int code){
    1929/    1DAE :                     ;	printf("exit %d\n",code);
    1930/    1DAE : (MACRO)             	ldaD R12,L237; reg:acon
    1931/    1DB4 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1932/    1DC0 : (MACRO)             	Ccall _printf
    1933/    1DC3 :                     L238:
    1934/    1DC3 :                     ;	while(1);
    1935/    1DC3 :                     L239:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 34 - 6/5/2013 13:45:40


    1936/    1DC3 : C0 1D C3            	lbr L238
    1937/    1DC6 :                     ;}
    1938/    1DC6 :                     L236:
    1939/    1DC6 : (MACRO)             	release 4
    1940/    1DCA : (MACRO)             	Cretn
    1941/    1DCB :                     
    1942/    1DCB :                     _memcmp:
    1943/    1DCB : (MACRO)             	pushr r0
    1944/    1DD0 : (MACRO)             	pushr r1
    1945/    1DD5 : (MACRO)             	pushr r6
    1946/    1DDA : (MACRO)             	pushr r7
    1947/    1DDF : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    1948/    1DEB :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1949/    1DEB :                     ;    int v = 0;
    1950/    1DEB : (MACRO)             	ld2z R6
    1951/    1DEF :                     ;    p1 = (unsigned char *)Ptr1;
    1952/    1DEF : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1953/    1DF3 :                     ;    p2 = (unsigned char *)Ptr2;
    1954/    1DF3 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    1955/    1DF7 : C0 1E 2A            	lbr L243
    1956/    1DFA :                     L242:
    1957/    1DFA :                     ;    while(Count-- > 0 && v == 0) {
    1958/    1DFA :                     ;        v = *(p1++) - *(p2++);
    1959/    1DFA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1960/    1DFE : (MACRO)             	incm R1,1
    1961/    1DFF : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) opt1
    1962/    1E03 : (MACRO)             	incm R0,1
    1963/    1E04 : (MACRO)             	ld1 R11,'O',R11,0
    1964/    1E0E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1965/    1E11 : (MACRO)             	ld1 R10,'O',R10,0
    1966/    1E1B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1967/    1E1E : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1968/    1E2A :                     ;    }
    1969/    1E2A :                     L243:
    1970/    1E2A :                     ;    while(Count-- > 0 && v == 0) {
    1971/    1E2A : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1972/    1E2E : (MACRO)             	cpy2 R7,R11
    1973/    1E32 : (MACRO)             	decm R7,1
    1974/    1E33 : (MACRO)             	jzU2 r11,L245; EQ 0
    1975/    1E3B : (MACRO)             	jzU2 r6,L242; EQ 0
    1976/    1E43 :                     L245:
    1977/    1E43 :                     ;    return v;
    1978/    1E43 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1979/    1E47 :                     L241:
    1980/    1E47 : (MACRO)             	popr r7
    1981/    1E4B : (MACRO)             	popr r6
    1982/    1E4F : (MACRO)             	popr r1
    1983/    1E53 : (MACRO)             	popr r0
    1984/    1E57 : (MACRO)             	Cretn
    1985/    1E58 :                     
    1986/    1E58 :                     _memcpy:
    1987/    1E58 : (MACRO)             	pushr r1
    1988/    1E5D : (MACRO)             	pushr r6
    1989/    1E62 : (MACRO)             	pushr r7
    1990/    1E67 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    1991/    1E73 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1992/    1E73 :                     ;        char* dst8 = (char*)dest;
    1993/    1E73 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    1994/    1E77 :                     ;        char* src8 = (char*)src;
    1995/    1E77 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 35 - 6/5/2013 13:45:40


    1996/    1E7B : C0 1E 8C            	lbr L248
    1997/    1E7E :                     L247:
    1998/    1E7E :                     ;        while (count--) {
    1999/    1E7E :                     ;            *dst8++ = *src8++;
    2000/    1E7E : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2001/    1E82 : (MACRO)             	incm R6,1
    2002/    1E83 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) opt1
    2003/    1E87 : (MACRO)             	incm R1,1
    2004/    1E88 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    2005/    1E8A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2006/    1E8C :                     ;        }
    2007/    1E8C :                     L248:
    2008/    1E8C :                     ;        while (count--) {
    2009/    1E8C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2010/    1E90 : (MACRO)             	cpy2 R7,R11
    2011/    1E94 : (MACRO)             	decm R7,1
    2012/    1E95 : (MACRO)             	jnzU2 r11,L247; NE 0
    2013/    1E9D :                     ;        return dest;
    2014/    1E9D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2015/    1EA1 :                     L246:
    2016/    1EA1 : (MACRO)             	popr r7
    2017/    1EA5 : (MACRO)             	popr r6
    2018/    1EA9 : (MACRO)             	popr r1
    2019/    1EAD : (MACRO)             	Cretn
    2020/    1EAE :                     
    2021/    1EAE :                     _memset:
    2022/    1EAE : (MACRO)             	pushr r6
    2023/    1EB3 : (MACRO)             	pushr r7
    2024/    1EB8 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    2025/    1EC4 :                     ;{
    2026/    1EC4 :                     ;    unsigned char* p=s;
    2027/    1EC4 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2028/    1EC8 : C0 1E D6            	lbr L252
    2029/    1ECB :                     L251:
    2030/    1ECB :                     ;        *p++ = (unsigned char)c;
    2031/    1ECB : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2032/    1ECF : (MACRO)             	incm R6,1
    2033/    1ED0 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    2034/    1ED4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2035/    1ED6 :                     L252:
    2036/    1ED6 :                     ;    while(n--)
    2037/    1ED6 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2038/    1EDA : (MACRO)             	cpy2 R7,R11
    2039/    1EDE : (MACRO)             	decm R7,1
    2040/    1EDF : (MACRO)             	jnzU2 r11,L251; NE 0
    2041/    1EE7 :                     ;    return s;
    2042/    1EE7 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2043/    1EEB :                     L250:
    2044/    1EEB : (MACRO)             	popr r7
    2045/    1EEF : (MACRO)             	popr r6
    2046/    1EF3 : (MACRO)             	Cretn
    2047/    1EF4 :                     
    2048/    1EF4 :                     _spincluder:
    2049/    1EF4 :                     ;void spincluder(){
    2050/    1EF4 :                     ;	asm("\tinclude fastspi.inc\n");
    2051/    1EF4 :                     	include fastspi.inc
(1)    1/    1EF4 :                     ;unsigned char xferspi(unsigned char value){
(1)    2/    1EF4 :                     ;  int i;
(1)    3/    1EF4 :                     ;  for(i=0;i<8;i++){
(1)    4/    1EF4 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(fastspi.inc) - page 36 - 6/5/2013 13:45:40


(1)    5/    1EF4 :                     ;    value=(value<<1)|digitalRead(miso);;
(1)    6/    1EF4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
(1)    7/    1EF4 :                     ;    digitalWrite(sck,LOW);
(1)    8/    1EF4 :                     ;  }
(1)    9/    1EF4 :                     ;  return value;
(1)   10/    1EF4 :                     ;}
(1)   11/    1EF4 :                     	align	64
(1)   12/    1F00 : =5H                 spisck:	equ	5
(1)   13/    1F00 : =2H                 clkport: equ	2
(1)   14/    1F00 : =7H                 spimosi: equ	7
(1)   15/    1F00 :                     _xferspif:	;spi transfer routine - uses bit 7 of port 4 for mosi, bit 4 for clock
(1)   16/    1F00 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   17/    1F06 : EE                  	sex	memaddr
(1)   18/    1F07 : F8 08               	ldi	8		;bit count
(1)   19/    1F09 : A8                  	plo	r8		;for loop exit test
(1)   20/    1F0A :                     $$loop:
(1)   21/    1F0A : 0E                  	ldn	memaddr		;pick it up
(1)   22/    1F0B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   23/    1F0D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   24/    1F0E :                     ;
(1)   25/    1F0E : 8C                  	glo	r12		;first parameter
(1)   26/    1F0F : FA 80               	ani	0x80		;data bit
(1)   27/    1F11 : F1                  	or			;combine with PIN4 value
(1)   28/    1F12 : 5E                  	str	memaddr		;prepare to send out
(1)   29/    1F13 : 64                  	out	4		;put out data bit with clock 0
(1)   30/    1F14 : 2E                  	dec	memaddr		;back up the X register
(1)   31/    1F15 :                     ;now we have to read the incoming data on ef3
(1)   32/    1F15 : 8C                  	glo	r12		;get the data byte
(1)   33/    1F16 : FE                  	shl			;advance to the next bit
(1)   34/    1F17 : 36 1B               	b3	$$zeroin	;check the external line
(1)   35/    1F19 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   36/    1F1B :                     $$zeroin:			
(1)   37/    1F1B : AC                  	plo	r12		;put it back
(1)   38/    1F1C :                     ;now we clock out our outbound bit
(1)   39/    1F1C : 0E                  	ldn	memaddr
(1)   40/    1F1D : F9 20               	ori	(1<<spisck)		;raise the clock bit
(1)   41/    1F1F : 5E                  	str	memaddr
(1)   42/    1F20 : 64                  	out	4		;send it out
(1)   43/    1F21 : 2E                  	dec	memaddr
(1)   44/    1F22 : FA DF               	ani	0xff-(1<<spisck)	;clear the clock bit
(1)   45/    1F24 : 5E                  	str	memaddr
(1)   46/    1F25 : 64                  	out	4		;send out the falling clock edge
(1)   47/    1F26 : 2E                  	dec	memaddr		
(1)   48/    1F27 :                     ;now we check the bit count to do the rest of the byte
(1)   49/    1F27 : 28                  	dec	r8		;bit count-1
(1)   50/    1F28 : 88                  	glo	r8		;see if we're done
(1)   51/    1F29 : 3A 0A               	bnz	$$loop		;go back for more if not
(1)   52/    1F2B :                     ;clean up and return the incoming data
(1)   53/    1F2B : 8C                  	glo	r12
(1)   54/    1F2C : AF                  	plo	retval		;put return value in correct register
(1)   55/    1F2D : (MACRO)             	zext	retval
(1)   56/    1F30 : E2                  	sex	sp		;re-establish sp as X
(1)   57/    1F31 : (MACRO)             	cretn
(1)   58/    1F32 :                     	align	64
(1)   59/    1F40 :                     _xferspif2:	;spi transfer routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   60/    1F40 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   61/    1F46 : EE                  	sex	memaddr
(1)   62/    1F47 : F8 08               	ldi	8		;bit count
(1)   63/    1F49 : A8                  	plo	r8		;for loop exit test
(1)   64/    1F4A :                     $$loop:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(fastspi.inc) - page 37 - 6/5/2013 13:45:40


(1)   65/    1F4A : 0E                  	ldn	memaddr		;pick it up
(1)   66/    1F4B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   67/    1F4D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   68/    1F4E :                     ;
(1)   69/    1F4E : 8C                  	glo	r12		;first parameter
(1)   70/    1F4F : FA 80               	ani	0x80		;data bit
(1)   71/    1F51 : F1                  	or			;combine with PIN4 value
(1)   72/    1F52 : 5E                  	str	memaddr		;prepare to send out
(1)   73/    1F53 : 64                  	out	4		;put out data bit with clock 0
(1)   74/    1F54 : 2E                  	dec	memaddr		;back up the X register
(1)   75/    1F55 :                     ;now we have to read the incoming data on ef3
(1)   76/    1F55 : 8C                  	glo	r12		;get the data byte
(1)   77/    1F56 : FE                  	shl			;advance to the next bit
(1)   78/    1F57 : 36 5B               	b3	$$zeroin	;check the external line
(1)   79/    1F59 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   80/    1F5B :                     $$zeroin:			
(1)   81/    1F5B : AC                  	plo	r12		;put it back
(1)   82/    1F5C :                     ;now we clock out our outbound bit
(1)   83/    1F5C : 62                  	out	clkport		;send out the clock pulse
(1)   84/    1F5D : 2E                  	dec	memaddr
(1)   85/    1F5E :                     ;now we check the bit count to do the rest of the byte
(1)   86/    1F5E : 28                  	dec	r8		;bit count-1
(1)   87/    1F5F : 88                  	glo	r8		;see if we're done
(1)   88/    1F60 : 3A 4A               	bnz	$$loop		;go back for more if not(19 instructions/bit)
(1)   89/    1F62 :                     ;clean up and return the incoming data
(1)   90/    1F62 : 8C                  	glo	r12
(1)   91/    1F63 : AF                  	plo	retval		;put return value in correct register
(1)   92/    1F64 : (MACRO)             	zext	retval
(1)   93/    1F67 : E2                  	sex	sp		;re-establish sp as X
(1)   94/    1F68 : (MACRO)             	cretn
(1)   95/    1F69 :                     	align 64
(1)   96/    1F80 :                     _shiftoutf:	;spi shift out routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   97/    1F80 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   98/    1F86 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)   99/    1F87 : FA 7F               	ani	0x7f		;make sure mosi is off
(1)  100/    1F89 : 22                  	dec	sp		;make a work area
(1)  101/    1F8A : 52                  	str	sp		;save pin4 value
(1)  102/    1F8B : F8 08               	ldi	8		;bit count
(1)  103/    1F8D : A8                  	plo	r8		;for loop exit test
(1)  104/    1F8E :                     $$loop:
(1)  105/    1F8E : 8C                  	glo	regarg1		;get the value
(1)  106/    1F8F : FE                  	shl			;shift left for next bit
(1)  107/    1F90 : AC                  	plo	regarg1		;save it
(1)  108/    1F91 : 76                  	shrc			;get the top bit back
(1)  109/    1F92 : FA 80               	ani	0x80		;isolate it
(1)  110/    1F94 : F1                  	or			;combine with PIN4 value
(1)  111/    1F95 : 22                  	dec 	sp		;make a work area
(1)  112/    1F96 : 52                  	str	sp		;place value to be output
(1)  113/    1F97 : 64                  	out 	4		;put it in the latch
(1)  114/    1F98 : 22                  	dec	sp		;prep for clock
(1)  115/    1F99 : 62                  	out	clkport		;send clock signal
(1)  116/    1F9A : 28                  	dec	r8		;bit count
(1)  117/    1F9B : 88                  	glo	r8
(1)  118/    1F9C : 3A 8E               	bnz	$$loop		;back for more (13 instructions per byte)
(1)  119/    1F9E : 12                  	inc	sp		;release work area
(1)  120/    1F9F : (MACRO)             	cretn
(1)  121/    1FA0 :                     	
(1)  122/    1FA0 :                     _shiftinf:	;spi input routine - uses ef3 for miso, N1 for clock
(1)  123/    1FA0 : F8 00               	ldi	0		;initial value
(1)  124/    1FA2 : AF                  	plo	retval		;prepare to return as an int
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(fastspi.inc) - page 38 - 6/5/2013 13:45:40


(1)  125/    1FA3 : BF                  	phi	retval
(1)  126/    1FA4 : F8 08               	ldi	8		;bit count		
(1)  127/    1FA6 : A8                  	plo	r8		;for read loop
(1)  128/    1FA7 :                     $$loop:
(1)  129/    1FA7 :                     ;now we have to read the incoming data on ef3
(1)  130/    1FA7 : 8F                  	glo	retval		;get the data byte
(1)  131/    1FA8 : FE                  	shl			;advance to the next bit
(1)  132/    1FA9 : 36 AD               	b3	$$zeroin	;check the external line
(1)  133/    1FAB : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)  134/    1FAD :                     $$zeroin:			
(1)  135/    1FAD : AF                  	plo	retval		;put it back
(1)  136/    1FAE :                     ;now we cycle the clock for our next inbound bit
(1)  137/    1FAE : 22                  	dec	sp		;make a work area
(1)  138/    1FAF : 62                  	out	clkport		;clock the next bit
(1)  139/    1FB0 :                     	
(1)  140/    1FB0 :                     ;now we check the bit count to do the rest of the byte
(1)  141/    1FB0 : 28                  	dec	r8		;bit count-1
(1)  142/    1FB1 : 88                  	glo	r8		;see if we're done
(1)  143/    1FB2 : 3A A7               	bnz	$$loop		;go back for more if not(10 instructions per bit)
(1)  144/    1FB4 :                     
(1)  145/    1FB4 : E2                  	sex	sp		;re-establish sp as X
(1)  146/    1FB5 : (MACRO)             	cretn
(1)  147/    1FB6 :                     	
(1)  148/    1FB6 :                     
    2052/    1FB6 :                     ;}
    2053/    1FB6 :                     L254:
    2054/    1FB6 : (MACRO)             	Cretn
    2055/    1FB7 :                     
    2056/    1FB7 :                     _buf:
    2057/    1FB7 : 00 00 00 00 00 00   	db 512 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 39 - 6/5/2013 13:45:40


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
    2058/    21B7 :                     L237:
    2059/    21B7 : 65                  	db 101
    2060/    21B8 : 78                  	db 120
    2061/    21B9 : 69                  	db 105
    2062/    21BA : 74                  	db 116
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 40 - 6/5/2013 13:45:40


    2063/    21BB : 20                  	db 32
    2064/    21BC : 25                  	db 37
    2065/    21BD : 64                  	db 100
    2066/    21BE : 0A                  	db 10
    2067/    21BF : 00                  	db 0
    2068/    21C0 :                     	align 4
    2069/    21C0 :                     L175:
    2070/    21C0 : BF 80 00 00         	dd 0xbf800000
    2071/    21C4 :                     	align 4
    2072/    21C4 :                     L174:
    2073/    21C4 : 00 00 00 00         	dd 0x0
    2074/    21C8 :                     L135:
    2075/    21C8 : 69                  	db 105
    2076/    21C9 : 6E                  	db 110
    2077/    21CA : 69                  	db 105
    2078/    21CB : 74                  	db 116
    2079/    21CC : 69                  	db 105
    2080/    21CD : 61                  	db 97
    2081/    21CE : 6C                  	db 108
    2082/    21CF : 69                  	db 105
    2083/    21D0 : 7A                  	db 122
    2084/    21D1 : 65                  	db 101
    2085/    21D2 : 64                  	db 100
    2086/    21D3 : 00                  	db 0
    2087/    21D4 :                     L134:
    2088/    21D4 : 0A                  	db 10
    2089/    21D5 : 4F                  	db 79
    2090/    21D6 : 6C                  	db 108
    2091/    21D7 : 64                  	db 100
    2092/    21D8 : 75                  	db 117
    2093/    21D9 : 69                  	db 105
    2094/    21DA : 6E                  	db 110
    2095/    21DB : 6F                  	db 111
    2096/    21DC : 20                  	db 32
    2097/    21DD : 57                  	db 87
    2098/    21DE : 65                  	db 101
    2099/    21DF : 62                  	db 98
    2100/    21E0 : 20                  	db 32
    2101/    21E1 : 53                  	db 83
    2102/    21E2 : 65                  	db 101
    2103/    21E3 : 72                  	db 114
    2104/    21E4 : 76                  	db 118
    2105/    21E5 : 65                  	db 101
    2106/    21E6 : 72                  	db 114
    2107/    21E7 : 20                  	db 32
    2108/    21E8 : 76                  	db 118
    2109/    21E9 : 32                  	db 50
    2110/    21EA : 2E                  	db 46
    2111/    21EB : 30                  	db 48
    2112/    21EC : 0A                  	db 10
    2113/    21ED : 00                  	db 0
    2114/    21EE :                     L129:
    2115/    21EE : 43                  	db 67
    2116/    21EF : 53                  	db 83
    2117/    21F0 : 0A                  	db 10
    2118/    21F1 : 00                  	db 0
    2119/    21F2 :                     L127:
    2120/    21F2 : 53                  	db 83
    2121/    21F3 : 58                  	db 88
    2122/    21F4 : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 41 - 6/5/2013 13:45:40


    2123/    21F5 : 00                  	db 0
    2124/    21F6 :                     L125:
    2125/    21F6 : 53                  	db 83
    2126/    21F7 : 43                  	db 67
    2127/    21F8 : 0A                  	db 10
    2128/    21F9 : 00                  	db 0
    2129/    21FA :                     L116:
    2130/    21FA : 72                  	db 114
    2131/    21FB : 73                  	db 115
    2132/    21FC : 7A                  	db 122
    2133/    21FD : 3D                  	db 61
    2134/    21FE : 25                  	db 37
    2135/    21FF : 64                  	db 100
    2136/    2200 : 0A                  	db 10
    2137/    2201 : 00                  	db 0
    2138/    2202 :                     L114:
    2139/    2202 : 73                  	db 115
    2140/    2203 : 65                  	db 101
    2141/    2204 : 6E                  	db 110
    2142/    2205 : 64                  	db 100
    2143/    2206 : 69                  	db 105
    2144/    2207 : 6E                  	db 110
    2145/    2208 : 67                  	db 103
    2146/    2209 : 20                  	db 32
    2147/    220A : 61                  	db 97
    2148/    220B : 63                  	db 99
    2149/    220C : 6B                  	db 107
    2150/    220D : 00                  	db 0
    2151/    220E :                     L112:
    2152/    220E : 73                  	db 115
    2153/    220F : 65                  	db 101
    2154/    2210 : 6E                  	db 110
    2155/    2211 : 64                  	db 100
    2156/    2212 : 69                  	db 105
    2157/    2213 : 6E                  	db 110
    2158/    2214 : 67                  	db 103
    2159/    2215 : 20                  	db 32
    2160/    2216 : 66                  	db 102
    2161/    2217 : 6F                  	db 111
    2162/    2218 : 72                  	db 114
    2163/    2219 : 6D                  	db 109
    2164/    221A : 20                  	db 32
    2165/    221B : 0A                  	db 10
    2166/    221C : 00                  	db 0
    2167/    221D :                     L107:
    2168/    221D : 4E                  	db 78
    2169/    221E : 6F                  	db 111
    2170/    221F : 20                  	db 32
    2171/    2220 : 6C                  	db 108
    2172/    2221 : 65                  	db 101
    2173/    2222 : 64                  	db 100
    2174/    2223 : 20                  	db 32
    2175/    2224 : 61                  	db 97
    2176/    2225 : 63                  	db 99
    2177/    2226 : 74                  	db 116
    2178/    2227 : 69                  	db 105
    2179/    2228 : 6F                  	db 111
    2180/    2229 : 6E                  	db 110
    2181/    222A : 20                  	db 32
    2182/    222B : 72                  	db 114
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 42 - 6/5/2013 13:45:40


    2183/    222C : 65                  	db 101
    2184/    222D : 71                  	db 113
    2185/    222E : 75                  	db 117
    2186/    222F : 65                  	db 101
    2187/    2230 : 73                  	db 115
    2188/    2231 : 74                  	db 116
    2189/    2232 : 0A                  	db 10
    2190/    2233 : 00                  	db 0
    2191/    2234 :                     L106:
    2192/    2234 : 73                  	db 115
    2193/    2235 : 65                  	db 101
    2194/    2236 : 74                  	db 116
    2195/    2237 : 74                  	db 116
    2196/    2238 : 69                  	db 105
    2197/    2239 : 6E                  	db 110
    2198/    223A : 67                  	db 103
    2199/    223B : 20                  	db 32
    2200/    223C : 6C                  	db 108
    2201/    223D : 65                  	db 101
    2202/    223E : 64                  	db 100
    2203/    223F : 20                  	db 32
    2204/    2240 : 4F                  	db 79
    2205/    2241 : 4E                  	db 78
    2206/    2242 : 0A                  	db 10
    2207/    2243 : 00                  	db 0
    2208/    2244 :                     L103:
    2209/    2244 : 73                  	db 115
    2210/    2245 : 65                  	db 101
    2211/    2246 : 74                  	db 116
    2212/    2247 : 74                  	db 116
    2213/    2248 : 69                  	db 105
    2214/    2249 : 6E                  	db 110
    2215/    224A : 67                  	db 103
    2216/    224B : 20                  	db 32
    2217/    224C : 6C                  	db 108
    2218/    224D : 65                  	db 101
    2219/    224E : 64                  	db 100
    2220/    224F : 20                  	db 32
    2221/    2250 : 6F                  	db 111
    2222/    2251 : 66                  	db 102
    2223/    2252 : 66                  	db 102
    2224/    2253 : 0A                  	db 10
    2225/    2254 : 00                  	db 0
    2226/    2255 :                     L100:
    2227/    2255 : 75                  	db 117
    2228/    2256 : 6E                  	db 110
    2229/    2257 : 6B                  	db 107
    2230/    2258 : 6E                  	db 110
    2231/    2259 : 6F                  	db 111
    2232/    225A : 77                  	db 119
    2233/    225B : 6E                  	db 110
    2234/    225C : 20                  	db 32
    2235/    225D : 69                  	db 105
    2236/    225E : 6E                  	db 110
    2237/    225F : 70                  	db 112
    2238/    2260 : 75                  	db 117
    2239/    2261 : 74                  	db 116
    2240/    2262 : 0A                  	db 10
    2241/    2263 : 00                  	db 0
    2242/    2264 :                     L99:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 43 - 6/5/2013 13:45:40


    2243/    2264 : 66                  	db 102
    2244/    2265 : 61                  	db 97
    2245/    2266 : 76                  	db 118
    2246/    2267 : 69                  	db 105
    2247/    2268 : 63                  	db 99
    2248/    2269 : 6F                  	db 111
    2249/    226A : 6E                  	db 110
    2250/    226B : 20                  	db 32
    2251/    226C : 69                  	db 105
    2252/    226D : 67                  	db 103
    2253/    226E : 6E                  	db 110
    2254/    226F : 6F                  	db 111
    2255/    2270 : 72                  	db 114
    2256/    2271 : 65                  	db 101
    2257/    2272 : 64                  	db 100
    2258/    2273 : 0A                  	db 10
    2259/    2274 : 00                  	db 0
    2260/    2275 :                     L96:
    2261/    2275 : 47                  	db 71
    2262/    2276 : 45                  	db 69
    2263/    2277 : 54                  	db 84
    2264/    2278 : 20                  	db 32
    2265/    2279 : 72                  	db 114
    2266/    227A : 65                  	db 101
    2267/    227B : 63                  	db 99
    2268/    227C : 65                  	db 101
    2269/    227D : 69                  	db 105
    2270/    227E : 76                  	db 118
    2271/    227F : 65                  	db 101
    2272/    2280 : 64                  	db 100
    2273/    2281 : 2E                  	db 46
    2274/    2282 : 0A                  	db 10
    2275/    2283 : 00                  	db 0
    2276/    2284 :                     L93:
    2277/    2284 : 72                  	db 114
    2278/    2285 : 64                  	db 100
    2279/    2286 : 3D                  	db 61
    2280/    2287 : 31                  	db 49
    2281/    2288 : 00                  	db 0
    2282/    2289 :                     L90:
    2283/    2289 : 72                  	db 114
    2284/    228A : 64                  	db 100
    2285/    228B : 3D                  	db 61
    2286/    228C : 30                  	db 48
    2287/    228D : 00                  	db 0
    2288/    228E :                     L87:
    2289/    228E : 50                  	db 80
    2290/    228F : 4F                  	db 79
    2291/    2290 : 53                  	db 83
    2292/    2291 : 54                  	db 84
    2293/    2292 : 20                  	db 32
    2294/    2293 : 72                  	db 114
    2295/    2294 : 65                  	db 101
    2296/    2295 : 63                  	db 99
    2297/    2296 : 65                  	db 101
    2298/    2297 : 69                  	db 105
    2299/    2298 : 76                  	db 118
    2300/    2299 : 65                  	db 101
    2301/    229A : 64                  	db 100
    2302/    229B : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 44 - 6/5/2013 13:45:40


    2303/    229C : 00                  	db 0
    2304/    229D :                     L84:
    2305/    229D : 72                  	db 114
    2306/    229E : 65                  	db 101
    2307/    229F : 71                  	db 113
    2308/    22A0 : 74                  	db 116
    2309/    22A1 : 79                  	db 121
    2310/    22A2 : 70                  	db 112
    2311/    22A3 : 65                  	db 101
    2312/    22A4 : 3D                  	db 61
    2313/    22A5 : 25                  	db 37
    2314/    22A6 : 64                  	db 100
    2315/    22A7 : 0A                  	db 10
    2316/    22A8 : 00                  	db 0
    2317/    22A9 :                     L83:
    2318/    22A9 : 47                  	db 71
    2319/    22AA : 45                  	db 69
    2320/    22AB : 54                  	db 84
    2321/    22AC : 20                  	db 32
    2322/    22AD : 2F                  	db 47
    2323/    22AE : 66                  	db 102
    2324/    22AF : 61                  	db 97
    2325/    22B0 : 76                  	db 118
    2326/    22B1 : 69                  	db 105
    2327/    22B2 : 63                  	db 99
    2328/    22B3 : 6F                  	db 111
    2329/    22B4 : 6E                  	db 110
    2330/    22B5 : 00                  	db 0
    2331/    22B6 :                     L80:
    2332/    22B6 : 47                  	db 71
    2333/    22B7 : 45                  	db 69
    2334/    22B8 : 54                  	db 84
    2335/    22B9 : 20                  	db 32
    2336/    22BA : 2F                  	db 47
    2337/    22BB : 00                  	db 0
    2338/    22BC :                     L77:
    2339/    22BC : 50                  	db 80
    2340/    22BD : 4F                  	db 79
    2341/    22BE : 53                  	db 83
    2342/    22BF : 54                  	db 84
    2343/    22C0 : 20                  	db 32
    2344/    22C1 : 2F                  	db 47
    2345/    22C2 : 00                  	db 0
    2346/    22C3 :                     L74:
    2347/    22C3 : 61                  	db 97
    2348/    22C4 : 6E                  	db 110
    2349/    22C5 : 61                  	db 97
    2350/    22C6 : 6C                  	db 108
    2351/    22C7 : 79                  	db 121
    2352/    22C8 : 7A                  	db 122
    2353/    22C9 : 69                  	db 105
    2354/    22CA : 6E                  	db 110
    2355/    22CB : 67                  	db 103
    2356/    22CC : 3A                  	db 58
    2357/    22CD : 0A                  	db 10
    2358/    22CE : 25                  	db 37
    2359/    22CF : 73                  	db 115
    2360/    22D0 : 0A                  	db 10
    2361/    22D1 : 00                  	db 0
    2362/    22D2 :                     L65:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 45 - 6/5/2013 13:45:40


    2363/    22D2 : 3C                  	db 60
    2364/    22D3 : 70                  	db 112
    2365/    22D4 : 3E                  	db 62
    2366/    22D5 : 3C                  	db 60
    2367/    22D6 : 73                  	db 115
    2368/    22D7 : 74                  	db 116
    2369/    22D8 : 72                  	db 114
    2370/    22D9 : 6F                  	db 111
    2371/    22DA : 6E                  	db 110
    2372/    22DB : 67                  	db 103
    2373/    22DC : 3E                  	db 62
    2374/    22DD : 3C                  	db 60
    2375/    22DE : 69                  	db 105
    2376/    22DF : 6E                  	db 110
    2377/    22E0 : 70                  	db 112
    2378/    22E1 : 75                  	db 117
    2379/    22E2 : 74                  	db 116
    2380/    22E3 : 20                  	db 32
    2381/    22E4 : 74                  	db 116
    2382/    22E5 : 79                  	db 121
    2383/    22E6 : 70                  	db 112
    2384/    22E7 : 65                  	db 101
    2385/    22E8 : 3D                  	db 61
    2386/    22E9 : 22                  	db 34
    2387/    22EA : 72                  	db 114
    2388/    22EB : 61                  	db 97
    2389/    22EC : 64                  	db 100
    2390/    22ED : 69                  	db 105
    2391/    22EE : 6F                  	db 111
    2392/    22EF : 22                  	db 34
    2393/    22F0 : 20                  	db 32
    2394/    22F1 : 6E                  	db 110
    2395/    22F2 : 61                  	db 97
    2396/    22F3 : 6D                  	db 109
    2397/    22F4 : 65                  	db 101
    2398/    22F5 : 3D                  	db 61
    2399/    22F6 : 22                  	db 34
    2400/    22F7 : 72                  	db 114
    2401/    22F8 : 64                  	db 100
    2402/    22F9 : 22                  	db 34
    2403/    22FA : 20                  	db 32
    2404/    22FB : 76                  	db 118
    2405/    22FC : 61                  	db 97
    2406/    22FD : 6C                  	db 108
    2407/    22FE : 75                  	db 117
    2408/    22FF : 65                  	db 101
    2409/    2300 : 3D                  	db 61
    2410/    2301 : 22                  	db 34
    2411/    2302 : 30                  	db 48
    2412/    2303 : 22                  	db 34
    2413/    2304 : 20                  	db 32
    2414/    2305 : 72                  	db 114
    2415/    2306 : 73                  	db 115
    2416/    2307 : 30                  	db 48
    2417/    2308 : 3E                  	db 62
    2418/    2309 : 4C                  	db 76
    2419/    230A : 45                  	db 69
    2420/    230B : 44                  	db 68
    2421/    230C : 20                  	db 32
    2422/    230D : 4F                  	db 79
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 46 - 6/5/2013 13:45:40


    2423/    230E : 4E                  	db 78
    2424/    230F : 0D                  	db 13
    2425/    2310 : 0A                  	db 10
    2426/    2311 : 3C                  	db 60
    2427/    2312 : 62                  	db 98
    2428/    2313 : 72                  	db 114
    2429/    2314 : 3E                  	db 62
    2430/    2315 : 3C                  	db 60
    2431/    2316 : 69                  	db 105
    2432/    2317 : 6E                  	db 110
    2433/    2318 : 70                  	db 112
    2434/    2319 : 75                  	db 117
    2435/    231A : 74                  	db 116
    2436/    231B : 20                  	db 32
    2437/    231C : 74                  	db 116
    2438/    231D : 79                  	db 121
    2439/    231E : 70                  	db 112
    2440/    231F : 65                  	db 101
    2441/    2320 : 3D                  	db 61
    2442/    2321 : 22                  	db 34
    2443/    2322 : 72                  	db 114
    2444/    2323 : 61                  	db 97
    2445/    2324 : 64                  	db 100
    2446/    2325 : 69                  	db 105
    2447/    2326 : 6F                  	db 111
    2448/    2327 : 22                  	db 34
    2449/    2328 : 20                  	db 32
    2450/    2329 : 6E                  	db 110
    2451/    232A : 61                  	db 97
    2452/    232B : 6D                  	db 109
    2453/    232C : 65                  	db 101
    2454/    232D : 3D                  	db 61
    2455/    232E : 22                  	db 34
    2456/    232F : 72                  	db 114
    2457/    2330 : 64                  	db 100
    2458/    2331 : 22                  	db 34
    2459/    2332 : 20                  	db 32
    2460/    2333 : 76                  	db 118
    2461/    2334 : 61                  	db 97
    2462/    2335 : 6C                  	db 108
    2463/    2336 : 75                  	db 117
    2464/    2337 : 65                  	db 101
    2465/    2338 : 3D                  	db 61
    2466/    2339 : 22                  	db 34
    2467/    233A : 31                  	db 49
    2468/    233B : 22                  	db 34
    2469/    233C : 20                  	db 32
    2470/    233D : 72                  	db 114
    2471/    233E : 73                  	db 115
    2472/    233F : 31                  	db 49
    2473/    2340 : 3E                  	db 62
    2474/    2341 : 4C                  	db 76
    2475/    2342 : 45                  	db 69
    2476/    2343 : 44                  	db 68
    2477/    2344 : 20                  	db 32
    2478/    2345 : 4F                  	db 79
    2479/    2346 : 46                  	db 70
    2480/    2347 : 46                  	db 70
    2481/    2348 : 0D                  	db 13
    2482/    2349 : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 47 - 6/5/2013 13:45:40


    2483/    234A : 3C                  	db 60
    2484/    234B : 2F                  	db 47
    2485/    234C : 73                  	db 115
    2486/    234D : 74                  	db 116
    2487/    234E : 72                  	db 114
    2488/    234F : 6F                  	db 111
    2489/    2350 : 6E                  	db 110
    2490/    2351 : 67                  	db 103
    2491/    2352 : 3E                  	db 62
    2492/    2353 : 3C                  	db 60
    2493/    2354 : 70                  	db 112
    2494/    2355 : 3E                  	db 62
    2495/    2356 : 0D                  	db 13
    2496/    2357 : 0A                  	db 10
    2497/    2358 : 3C                  	db 60
    2498/    2359 : 69                  	db 105
    2499/    235A : 6E                  	db 110
    2500/    235B : 70                  	db 112
    2501/    235C : 75                  	db 117
    2502/    235D : 74                  	db 116
    2503/    235E : 20                  	db 32
    2504/    235F : 74                  	db 116
    2505/    2360 : 79                  	db 121
    2506/    2361 : 70                  	db 112
    2507/    2362 : 65                  	db 101
    2508/    2363 : 3D                  	db 61
    2509/    2364 : 22                  	db 34
    2510/    2365 : 73                  	db 115
    2511/    2366 : 75                  	db 117
    2512/    2367 : 62                  	db 98
    2513/    2368 : 6D                  	db 109
    2514/    2369 : 69                  	db 105
    2515/    236A : 74                  	db 116
    2516/    236B : 22                  	db 34
    2517/    236C : 3E                  	db 62
    2518/    236D : 0D                  	db 13
    2519/    236E : 0A                  	db 10
    2520/    236F : 3C                  	db 60
    2521/    2370 : 2F                  	db 47
    2522/    2371 : 66                  	db 102
    2523/    2372 : 6F                  	db 111
    2524/    2373 : 72                  	db 114
    2525/    2374 : 6D                  	db 109
    2526/    2375 : 3E                  	db 62
    2527/    2376 : 3C                  	db 60
    2528/    2377 : 2F                  	db 47
    2529/    2378 : 73                  	db 115
    2530/    2379 : 70                  	db 112
    2531/    237A : 61                  	db 97
    2532/    237B : 6E                  	db 110
    2533/    237C : 3E                  	db 62
    2534/    237D : 3C                  	db 60
    2535/    237E : 2F                  	db 47
    2536/    237F : 62                  	db 98
    2537/    2380 : 6F                  	db 111
    2538/    2381 : 64                  	db 100
    2539/    2382 : 79                  	db 121
    2540/    2383 : 3E                  	db 62
    2541/    2384 : 3C                  	db 60
    2542/    2385 : 2F                  	db 47
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 48 - 6/5/2013 13:45:40


    2543/    2386 : 68                  	db 104
    2544/    2387 : 74                  	db 116
    2545/    2388 : 6D                  	db 109
    2546/    2389 : 6C                  	db 108
    2547/    238A : 3E                  	db 62
    2548/    238B : 0D                  	db 13
    2549/    238C : 0A                  	db 10
    2550/    238D : 00                  	db 0
    2551/    238E :                     L64:
    2552/    238E : 48                  	db 72
    2553/    238F : 54                  	db 84
    2554/    2390 : 54                  	db 84
    2555/    2391 : 50                  	db 80
    2556/    2392 : 2F                  	db 47
    2557/    2393 : 31                  	db 49
    2558/    2394 : 2E                  	db 46
    2559/    2395 : 30                  	db 48
    2560/    2396 : 20                  	db 32
    2561/    2397 : 32                  	db 50
    2562/    2398 : 30                  	db 48
    2563/    2399 : 30                  	db 48
    2564/    239A : 20                  	db 32
    2565/    239B : 4F                  	db 79
    2566/    239C : 4B                  	db 75
    2567/    239D : 0D                  	db 13
    2568/    239E : 0A                  	db 10
    2569/    239F : 43                  	db 67
    2570/    23A0 : 6F                  	db 111
    2571/    23A1 : 6E                  	db 110
    2572/    23A2 : 74                  	db 116
    2573/    23A3 : 65                  	db 101
    2574/    23A4 : 6E                  	db 110
    2575/    23A5 : 74                  	db 116
    2576/    23A6 : 2D                  	db 45
    2577/    23A7 : 54                  	db 84
    2578/    23A8 : 79                  	db 121
    2579/    23A9 : 70                  	db 112
    2580/    23AA : 65                  	db 101
    2581/    23AB : 3A                  	db 58
    2582/    23AC : 20                  	db 32
    2583/    23AD : 74                  	db 116
    2584/    23AE : 65                  	db 101
    2585/    23AF : 78                  	db 120
    2586/    23B0 : 74                  	db 116
    2587/    23B1 : 2F                  	db 47
    2588/    23B2 : 68                  	db 104
    2589/    23B3 : 74                  	db 116
    2590/    23B4 : 6D                  	db 109
    2591/    23B5 : 6C                  	db 108
    2592/    23B6 : 0D                  	db 13
    2593/    23B7 : 0A                  	db 10
    2594/    23B8 : 0D                  	db 13
    2595/    23B9 : 0A                  	db 10
    2596/    23BA : 3C                  	db 60
    2597/    23BB : 68                  	db 104
    2598/    23BC : 74                  	db 116
    2599/    23BD : 6D                  	db 109
    2600/    23BE : 6C                  	db 108
    2601/    23BF : 3E                  	db 62
    2602/    23C0 : 3C                  	db 60
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 49 - 6/5/2013 13:45:40


    2603/    23C1 : 62                  	db 98
    2604/    23C2 : 6F                  	db 111
    2605/    23C3 : 64                  	db 100
    2606/    23C4 : 79                  	db 121
    2607/    23C5 : 3E                  	db 62
    2608/    23C6 : 3C                  	db 60
    2609/    23C7 : 73                  	db 115
    2610/    23C8 : 70                  	db 112
    2611/    23C9 : 61                  	db 97
    2612/    23CA : 6E                  	db 110
    2613/    23CB : 20                  	db 32
    2614/    23CC : 73                  	db 115
    2615/    23CD : 74                  	db 116
    2616/    23CE : 79                  	db 121
    2617/    23CF : 6C                  	db 108
    2618/    23D0 : 65                  	db 101
    2619/    23D1 : 3D                  	db 61
    2620/    23D2 : 22                  	db 34
    2621/    23D3 : 63                  	db 99
    2622/    23D4 : 6F                  	db 111
    2623/    23D5 : 6C                  	db 108
    2624/    23D6 : 6F                  	db 111
    2625/    23D7 : 72                  	db 114
    2626/    23D8 : 3A                  	db 58
    2627/    23D9 : 23                  	db 35
    2628/    23DA : 30                  	db 48
    2629/    23DB : 30                  	db 48
    2630/    23DC : 30                  	db 48
    2631/    23DD : 30                  	db 48
    2632/    23DE : 41                  	db 65
    2633/    23DF : 30                  	db 48
    2634/    23E0 : 22                  	db 34
    2635/    23E1 : 3E                  	db 62
    2636/    23E2 : 0D                  	db 13
    2637/    23E3 : 0A                  	db 10
    2638/    23E4 : 3C                  	db 60
    2639/    23E5 : 68                  	db 104
    2640/    23E6 : 31                  	db 49
    2641/    23E7 : 3E                  	db 62
    2642/    23E8 : 3C                  	db 60
    2643/    23E9 : 63                  	db 99
    2644/    23EA : 65                  	db 101
    2645/    23EB : 6E                  	db 110
    2646/    23EC : 74                  	db 116
    2647/    23ED : 65                  	db 101
    2648/    23EE : 72                  	db 114
    2649/    23EF : 3E                  	db 62
    2650/    23F0 : 4F                  	db 79
    2651/    23F1 : 6C                  	db 108
    2652/    23F2 : 64                  	db 100
    2653/    23F3 : 75                  	db 117
    2654/    23F4 : 69                  	db 105
    2655/    23F5 : 6E                  	db 110
    2656/    23F6 : 6F                  	db 111
    2657/    23F7 : 20                  	db 32
    2658/    23F8 : 31                  	db 49
    2659/    23F9 : 38                  	db 56
    2660/    23FA : 30                  	db 48
    2661/    23FB : 32                  	db 50
    2662/    23FC : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 50 - 6/5/2013 13:45:40


    2663/    23FD : 57                  	db 87
    2664/    23FE : 65                  	db 101
    2665/    23FF : 62                  	db 98
    2666/    2400 : 20                  	db 32
    2667/    2401 : 53                  	db 83
    2668/    2402 : 65                  	db 101
    2669/    2403 : 72                  	db 114
    2670/    2404 : 76                  	db 118
    2671/    2405 : 65                  	db 101
    2672/    2406 : 72                  	db 114
    2673/    2407 : 3C                  	db 60
    2674/    2408 : 2F                  	db 47
    2675/    2409 : 63                  	db 99
    2676/    240A : 65                  	db 101
    2677/    240B : 6E                  	db 110
    2678/    240C : 74                  	db 116
    2679/    240D : 65                  	db 101
    2680/    240E : 72                  	db 114
    2681/    240F : 3E                  	db 62
    2682/    2410 : 3C                  	db 60
    2683/    2411 : 2F                  	db 47
    2684/    2412 : 68                  	db 104
    2685/    2413 : 31                  	db 49
    2686/    2414 : 3E                  	db 62
    2687/    2415 : 0D                  	db 13
    2688/    2416 : 0A                  	db 10
    2689/    2417 : 3C                  	db 60
    2690/    2418 : 70                  	db 112
    2691/    2419 : 3E                  	db 62
    2692/    241A : 3C                  	db 60
    2693/    241B : 66                  	db 102
    2694/    241C : 6F                  	db 111
    2695/    241D : 72                  	db 114
    2696/    241E : 6D                  	db 109
    2697/    241F : 20                  	db 32
    2698/    2420 : 6D                  	db 109
    2699/    2421 : 65                  	db 101
    2700/    2422 : 74                  	db 116
    2701/    2423 : 68                  	db 104
    2702/    2424 : 6F                  	db 111
    2703/    2425 : 64                  	db 100
    2704/    2426 : 3D                  	db 61
    2705/    2427 : 22                  	db 34
    2706/    2428 : 50                  	db 80
    2707/    2429 : 4F                  	db 79
    2708/    242A : 53                  	db 83
    2709/    242B : 54                  	db 84
    2710/    242C : 22                  	db 34
    2711/    242D : 3E                  	db 62
    2712/    242E : 0D                  	db 13
    2713/    242F : 0A                  	db 10
    2714/    2430 : 00                  	db 0
    2715/    2431 :                     L60:
    2716/    2431 : 20                  	db 32
    2717/    2432 : 61                  	db 97
    2718/    2433 : 74                  	db 116
    2719/    2434 : 20                  	db 32
    2720/    2435 : 25                  	db 37
    2721/    2436 : 73                  	db 115
    2722/    2437 : 3A                  	db 58
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 51 - 6/5/2013 13:45:40


    2723/    2438 : 20                  	db 32
    2724/    2439 : 77                  	db 119
    2725/    243A : 69                  	db 105
    2726/    243B : 7A                  	db 122
    2727/    243C : 6E                  	db 110
    2728/    243D : 65                  	db 101
    2729/    243E : 74                  	db 116
    2730/    243F : 20                  	db 32
    2731/    2440 : 4D                  	db 77
    2732/    2441 : 52                  	db 82
    2733/    2442 : 3D                  	db 61
    2734/    2443 : 25                  	db 37
    2735/    2444 : 78                  	db 120
    2736/    2445 : 2C                  	db 44
    2737/    2446 : 20                  	db 32
    2738/    2447 : 53                  	db 83
    2739/    2448 : 30                  	db 48
    2740/    2449 : 5F                  	db 95
    2741/    244A : 53                  	db 83
    2742/    244B : 52                  	db 82
    2743/    244C : 3D                  	db 61
    2744/    244D : 25                  	db 37
    2745/    244E : 78                  	db 120
    2746/    244F : 2C                  	db 44
    2747/    2450 : 20                  	db 32
    2748/    2451 : 53                  	db 83
    2749/    2452 : 30                  	db 48
    2750/    2453 : 5F                  	db 95
    2751/    2454 : 4D                  	db 77
    2752/    2455 : 52                  	db 82
    2753/    2456 : 3D                  	db 61
    2754/    2457 : 25                  	db 37
    2755/    2458 : 78                  	db 120
    2756/    2459 : 2C                  	db 44
    2757/    245A : 20                  	db 32
    2758/    245B : 53                  	db 83
    2759/    245C : 30                  	db 48
    2760/    245D : 5F                  	db 95
    2761/    245E : 50                  	db 80
    2762/    245F : 4F                  	db 79
    2763/    2460 : 52                  	db 82
    2764/    2461 : 54                  	db 84
    2765/    2462 : 3D                  	db 61
    2766/    2463 : 25                  	db 37
    2767/    2464 : 78                  	db 120
    2768/    2465 : 20                  	db 32
    2769/    2466 : 25                  	db 37
    2770/    2467 : 78                  	db 120
    2771/    2468 : 0A                  	db 10
    2772/    2469 : 00                  	db 0
    2773/    246A :                     L26:
    2774/    246A : 44                  	db 68
    2775/    246B : 6F                  	db 111
    2776/    246C : 6E                  	db 110
    2777/    246D : 65                  	db 101
    2778/    246E : 20                  	db 32
    2779/    246F : 57                  	db 87
    2780/    2470 : 69                  	db 105
    2781/    2471 : 7A                  	db 122
    2782/    2472 : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 52 - 6/5/2013 13:45:40


    2783/    2473 : 65                  	db 101
    2784/    2474 : 74                  	db 116
    2785/    2475 : 20                  	db 32
    2786/    2476 : 57                  	db 87
    2787/    2477 : 35                  	db 53
    2788/    2478 : 31                  	db 49
    2789/    2479 : 30                  	db 48
    2790/    247A : 30                  	db 48
    2791/    247B : 20                  	db 32
    2792/    247C : 49                  	db 73
    2793/    247D : 6E                  	db 110
    2794/    247E : 69                  	db 105
    2795/    247F : 74                  	db 116
    2796/    2480 : 69                  	db 105
    2797/    2481 : 61                  	db 97
    2798/    2482 : 6C                  	db 108
    2799/    2483 : 69                  	db 105
    2800/    2484 : 7A                  	db 122
    2801/    2485 : 61                  	db 97
    2802/    2486 : 74                  	db 116
    2803/    2487 : 69                  	db 105
    2804/    2488 : 6F                  	db 111
    2805/    2489 : 6E                  	db 110
    2806/    248A : 20                  	db 32
    2807/    248B : 6F                  	db 111
    2808/    248C : 6E                  	db 110
    2809/    248D : 20                  	db 32
    2810/    248E : 49                  	db 73
    2811/    248F : 50                  	db 80
    2812/    2490 : 20                  	db 32
    2813/    2491 : 61                  	db 97
    2814/    2492 : 64                  	db 100
    2815/    2493 : 64                  	db 100
    2816/    2494 : 72                  	db 114
    2817/    2495 : 65                  	db 101
    2818/    2496 : 73                  	db 115
    2819/    2497 : 73                  	db 115
    2820/    2498 : 20                  	db 32
    2821/    2499 : 25                  	db 37
    2822/    249A : 64                  	db 100
    2823/    249B : 2E                  	db 46
    2824/    249C : 25                  	db 37
    2825/    249D : 64                  	db 100
    2826/    249E : 2E                  	db 46
    2827/    249F : 25                  	db 37
    2828/    24A0 : 64                  	db 100
    2829/    24A1 : 2E                  	db 46
    2830/    24A2 : 25                  	db 37
    2831/    24A3 : 64                  	db 100
    2832/    24A4 : 0A                  	db 10
    2833/    24A5 : 0A                  	db 10
    2834/    24A6 : 00                  	db 0
    2835/    24A7 :                     	include lcc1802Epilofl.inc
(1)    1/    24A7 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    24A7 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    24A7 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    24A7 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    24A7 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    24A7 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    24A7 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 53 - 6/5/2013 13:45:40


(1)    8/    24A7 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    24A7 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    24A7 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    24A7 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    24A7 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    24A7 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    24A7 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    24A7 :                     
(1)   16/    24A7 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    24A7 :                     lcc1802init:	
(1)   18/    24A7 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    24AD : (MACRO)             	ldiReg	RRET,_return
(1)   20/    24B3 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    24B9 : E2                  	sex	SP
(1)   22/    24BA : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    24C0 : D3                  	sep	RPC
(1)   24/    24C1 :                     $$_00000:
(1)   25/    24C1 : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    24C4 : C0 24 C4            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    24C7 : DE AD               	db	0xde,0xad
(1)   28/    24C9 :                     
(1)   29/    24C9 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    24C9 :                     _setqOn:
(1)   31/    24C9 : 7B                  	seq
(1)   32/    24CA : (MACRO)             	Cretn
(1)   33/    24CB :                     _setqOff:
(1)   34/    24CB : 7A                  	req
(1)   35/    24CC : (MACRO)             	Cretn
(1)   36/    24CD :                     
(1)   37/    24CD :                     _modU2:	;16 bit unsigned remainder
(1)   38/    24CD :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    24CD : (MACRO)                 Ccall _divU2
(1)   40/    24D0 : 8D                      glo regArg2
(1)   41/    24D1 : AF                      plo retVal
(1)   42/    24D2 : 9D                      ghi regArg2
(1)   43/    24D3 : BF                      phi retVal
(1)   44/    24D4 : (MACRO)                 Cretn
(1)   45/    24D5 :                         
(1)   46/    24D5 :                     _modI2:	;16 bit signed remainder
(1)   47/    24D5 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    24D5 : (MACRO)                 Ccall _divI2
(1)   49/    24D8 : 8D                      glo regArg2
(1)   50/    24D9 : AF                      plo retVal
(1)   51/    24DA : 9D                      ghi regArg2
(1)   52/    24DB : BF                      phi retVal
(1)   53/    24DC : (MACRO)                 Cretn
(1)   54/    24DD :                     
(1)   55/    24DD :                     _out4:	
(1)   56/    24DD : 8C                  	glo	regArg1
(1)   57/    24DE : 22                  	dec	sp
(1)   58/    24DF : 52                  	str	sp
(1)   59/    24E0 : 64                  	out	4
(1)   60/    24E1 : (MACRO)             	Cretn
(1)   61/    24E2 :                     
(1)   62/    24E2 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    24E2 :                     	align 256
(1)   64/    2500 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    2500 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    2500 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    2500 : D3                  	sep     R3 ;go to subroutine
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 54 - 6/5/2013 13:45:40


(1)   68/    2501 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    2502 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    2503 : 22                  	dec	sp
(1)   71/    2504 : 73                  	stxd
(1)   72/    2505 : 96                  	ghi	retAddr
(1)   73/    2506 : 52                  	str	sp	
(1)   74/    2507 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    2508 : A6                  	plo	retAddr
(1)   76/    2509 : 93                  	ghi	RPC
(1)   77/    250A : B6                  	phi	retAddr
(1)   78/    250B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    250C : B3                  	phi	RPC
(1)   80/    250D : 46                  	lda	retAddr
(1)   81/    250E : A3                  	plo	RPC
(1)   82/    250F : 30 00               	br	_call-1
(1)   83/    2511 :                     
(1)   84/    2511 :                     ;Standard subroutine return 
(1)   85/    2511 : D3                  	sep	RPC	;return to the original program
(1)   86/    2512 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    2513 : A3                  	plo	RPC
(1)   88/    2514 : 96                  	ghi	retAddr
(1)   89/    2515 : B3                  	phi	RPC
(1)   90/    2516 : 42                  	lda	SP	;pick up old return address
(1)   91/    2517 : B6                  	phi	retAddr
(1)   92/    2518 : 42                  	lda	SP
(1)   93/    2519 : A6                  	plo	retAddr
(1)   94/    251A : 30 11               	br	_return-1
(1)   95/    251C :                     
(1)   96/    251C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    251C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    251E : FF 01               $$mslp:	smi	1
(1)   99/    2520 : 3A 1E               	bnz	$$mslp
(1)  100/    2522 : (MACRO)             	Cretn
(1)  101/    2523 :                     
(1)  102/    2523 :                     
(1)  103/    2523 :                     	
(1)  104/    2523 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    2523 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    2523 :                     _mulu2:		
(1)  107/    2523 : 22                      dec sp
(1)  108/    2524 : F8 10                   ldi 16
(1)  109/    2526 : AE                      plo	rwork	;bit count
(1)  110/    2527 : F8 00                   ldi 0
(1)  111/    2529 : BF                      phi	retVal	;quotient
(1)  112/    252A : AF                      plo retVal
(1)  113/    252B :                     $$MultLoop16_16:
(1)  114/    252B : 9C                      ghi regArg1
(1)  115/    252C : F6                      shr
(1)  116/    252D : BC                      phi regArg1
(1)  117/    252E : 8C                      glo regArg1
(1)  118/    252F : 76                      shrc
(1)  119/    2530 : AC                      plo regArg1
(1)  120/    2531 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    2533 : 8D                      glo regArg2
(1)  122/    2534 : 52                      str sp
(1)  123/    2535 : 8F                      glo retVal
(1)  124/    2536 : F4                      add 
(1)  125/    2537 : AF                      plo retVal
(1)  126/    2538 : 9D                      ghi regArg2
(1)  127/    2539 : 52                      str sp
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 55 - 6/5/2013 13:45:40


(1)  128/    253A : 9F                      ghi retVal
(1)  129/    253B : 74                      adc
(1)  130/    253C : BF                      phi retVal
(1)  131/    253D :                     $$MultSkip16_16:
(1)  132/    253D : 8D                      glo regArg2
(1)  133/    253E : FE                      shl
(1)  134/    253F : AD                      plo regArg2
(1)  135/    2540 : 9D                      ghi regArg2
(1)  136/    2541 : 7E                      shlc
(1)  137/    2542 : BD                      phi regArg2
(1)  138/    2543 : 2E                      dec rwork
(1)  139/    2544 : 8E                      glo rwork
(1)  140/    2545 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    2547 : 12                      inc sp
(1)  142/    2548 : D5                      sep 5
(1)  143/    2549 :                     
(1)  144/    2549 :                     
(1)  145/    2549 :                     _divU2:
(1)  146/    2549 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    2549 :                     	; This is really an unsigned 23 bit divide
(1)  148/    2549 :                     	;thanks to Ted Rossin
(1)  149/    2549 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    2549 : 22                      dec sp
(1)  151/    254A : F8 10                   ldi 16
(1)  152/    254C : AE                      plo rwork
(1)  153/    254D : F8 00                   ldi 0
(1)  154/    254F : BF                      phi retVal
(1)  155/    2550 : AF                      plo retVal
(1)  156/    2551 : BE                      phi rwork
(1)  157/    2552 :                     $$DivLoop16_16:
(1)  158/    2552 : 8C                      glo regArg1
(1)  159/    2553 : FE                      shl
(1)  160/    2554 : AC                      plo regArg1
(1)  161/    2555 : 9C                      ghi regArg1
(1)  162/    2556 : 7E                      shlc
(1)  163/    2557 : BC                      phi regArg1
(1)  164/    2558 : 8F                      glo retVal
(1)  165/    2559 : 7E                      shlc
(1)  166/    255A : AF                      plo retVal
(1)  167/    255B : 9F                      ghi retVal
(1)  168/    255C : 7E                      shlc
(1)  169/    255D : BF                      phi retVal
(1)  170/    255E : 9E                      ghi rwork
(1)  171/    255F : 7E                      shlc
(1)  172/    2560 : BE                      phi rwork
(1)  173/    2561 : 3B 73                   bnf $$DivSub16_16
(1)  174/    2563 : 8D                      glo regArg2
(1)  175/    2564 : 52                      str sp
(1)  176/    2565 : 8F                      glo retVal
(1)  177/    2566 : F4                      add 
(1)  178/    2567 : AF                      plo retVal
(1)  179/    2568 : 9D                      ghi regArg2
(1)  180/    2569 : 52                      str sp
(1)  181/    256A : 9F                      ghi retVal
(1)  182/    256B : 74                      adc 
(1)  183/    256C : BF                      phi retVal
(1)  184/    256D : 9E                      ghi rwork
(1)  185/    256E : 7C 00                   adci 0
(1)  186/    2570 : BE                      phi rwork
(1)  187/    2571 : 30 81                   br $$DivSkip16_16
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 56 - 6/5/2013 13:45:40


(1)  188/    2573 :                     $$DivSub16_16:
(1)  189/    2573 : 8D                      glo regArg2
(1)  190/    2574 : 52                      str sp
(1)  191/    2575 : 8F                      glo retVal
(1)  192/    2576 : F7                      sm
(1)  193/    2577 : AF                      plo retVal
(1)  194/    2578 : 9D                      ghi regArg2
(1)  195/    2579 : 52                      str sp
(1)  196/    257A : 9F                      ghi retVal
(1)  197/    257B : 77                      smb 
(1)  198/    257C : BF                      phi retVal
(1)  199/    257D : 9E                      ghi rwork
(1)  200/    257E : 7F 00                   smbi 0
(1)  201/    2580 : BE                      phi rwork 
(1)  202/    2581 :                     $$DivSkip16_16:
(1)  203/    2581 : FE                      shl
(1)  204/    2582 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    2584 :                     $$DivSetBit16_16:
(1)  206/    2584 : 8C                      glo regArg1
(1)  207/    2585 : F9 01                   ori  0x01
(1)  208/    2587 : AC                      plo regArg1
(1)  209/    2588 :                     $$DivSkipClear16_16:
(1)  210/    2588 : 2E                      dec rwork
(1)  211/    2589 : 8E                      glo rwork
(1)  212/    258A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    258C : 9E                      ghi rwork
(1)  214/    258D : FE                      shl
(1)  215/    258E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    2590 : 8D                      glo regArg2
(1)  217/    2591 : 52                      str sp
(1)  218/    2592 : 8F                      glo retVal
(1)  219/    2593 : F4                      add
(1)  220/    2594 : AF                      plo retVal
(1)  221/    2595 : 9D                      ghi regArg2
(1)  222/    2596 : 52                      str sp
(1)  223/    2597 : 9F                      ghi retVal
(1)  224/    2598 : 74                      adc
(1)  225/    2599 : BF                      phi retVal
(1)  226/    259A :                     $$DivSkipFinalAdd16_16:
(1)  227/    259A : 12                      inc sp
(1)  228/    259B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    259B : 8F                      glo retVal
(1)  230/    259C : AD                      plo regArg2
(1)  231/    259D : 9F                      ghi retVal
(1)  232/    259E : BD                      phi regArg2
(1)  233/    259F : 8C                      glo regArg1
(1)  234/    25A0 : AF                      plo retVal
(1)  235/    25A1 : 9C                      ghi regArg1
(1)  236/    25A2 : BF                      phi retVal
(1)  237/    25A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    25A3 : D5                      sep 5
(1)  239/    25A4 :                     
(1)  240/    25A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    25A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    25A4 :                     _divI2:
(1)  243/    25A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    25A4 : 22                      dec	sp	;leave a work area available
(1)  245/    25A5 : 9C                      ghi regArg1
(1)  246/    25A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    25A7 : FE                      shl
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 57 - 6/5/2013 13:45:40


(1)  248/    25A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    25AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    25B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    25B3 : 9D                      ghi regArg2
(1)  252/    25B4 : F3                      xor	
(1)  253/    25B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    25B6 : 9D                      ghi regArg2
(1)  255/    25B7 : FE                      shl
(1)  256/    25B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    25BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    25C3 :                     $$pos2: ; both args now +v
(1)  259/    25C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    25C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    25C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    25C7 : FE                      shl
(1)  263/    25C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    25CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    25D3 :                     $$done:
(1)  266/    25D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    25D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    25D4 :                     
(1)  269/    25D4 :                     
(1)  270/    25D4 :                     	align 256    ;32 bit operations follow
(1)  271/    2600 :                     _divu4:
(1)  272/    2600 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    2600 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    2600 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    2600 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    2600 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    2600 :                     
(1)  278/    2600 : F8 20               	ldi 32		;set loop count
(1)  279/    2602 : AE                  	plo memaddr	;in temp register
(1)  280/    2603 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    260F :                     $$loop:
(1)  282/    260F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    261B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    2627 :                     
(1)  285/    2627 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    263D :                     
(1)  287/    263D : FA 80               	ani 0x80	;check the top bit
(1)  288/    263F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    2641 : 89                  		glo RL8
(1)  290/    2642 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    2644 : A9                  		plo RL8
(1)  292/    2645 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    265B : 30 61               	br $$endlp 	;else
(1)  294/    265D :                     $$norestore:
(1)  295/    265D : 89                  		glo RL8
(1)  296/    265E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    2660 : A9                  		plo RL8
(1)  298/    2661 :                     	;end if
(1)  299/    2661 :                     $$endlp:
(1)  300/    2661 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    2662 : 8E                  	glo memaddr
(1)  302/    2663 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    2665 :                     	
(1)  304/    2665 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    2666 :                     		
(1)  306/    2666 :                     
(1)  307/    2666 :                     _mulu4:
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 58 - 6/5/2013 13:45:40


(1)  308/    2666 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    2666 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    2666 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    2666 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    2666 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    2666 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    2666 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    2666 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    2666 :                     	;for 10 we subtract and shift
(1)  317/    2666 :                     	;for 00 and 11 we just shift
(1)  318/    2666 :                     
(1)  319/    2666 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    2672 : F8 20                   ldi 32
(1)  321/    2674 : AE                      plo memaddr		;cycle count
(1)  322/    2675 : FC 00                   adi 0		;clear df
(1)  323/    2677 :                     $$mloop:
(1)  324/    2677 : 89                      glo RL8
(1)  325/    2678 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    267A : 3B 96                   bnf	$$check_sub	;
(1)  327/    267C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    267E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    267E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    2694 : 30 AE                   br $$shift
(1)  331/    2696 :                     $$check_sub:
(1)  332/    2696 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    2698 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    2698 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    26AE :                     $$shift:
(1)  336/    26AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    26BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    26C8 :                     
(1)  339/    26C8 : 2E                      dec memaddr		;cycle count
(1)  340/    26C9 : 8E                      glo memaddr
(1)  341/    26CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    26CC :                         
(1)  343/    26CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    26CD :                     
(1)  345/    26CD :                     	align 256
(1)  346/    2700 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    2700 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    2700 :                     _divI4:
(1)  349/    2700 : 22                      dec	sp	;leave a work area available
(1)  350/    2701 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    2702 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    2703 : FE                      shl
(1)  353/    2704 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    2706 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    2726 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    2726 : 9A                      ghi RL10-1
(1)  357/    2727 : F3                      xor	
(1)  358/    2728 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    2729 : 9A                      ghi RL10-1
(1)  360/    272A : FE                      shl
(1)  361/    272B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    272D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    274D :                     $$pos2: ; both args now +v
(1)  364/    274D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    2750 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    2750 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    2751 : FE                      shl
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 59 - 6/5/2013 13:45:40


(1)  368/    2752 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    2754 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    2774 :                     $$done:
(1)  371/    2774 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    2775 :                     
(1)  373/    2775 :                     _dubdabx:	
(1)  374/    2775 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    2775 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    2775 :                     ;long interger is passed in rp1p2
(1)  377/    2775 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    2775 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    2775 :                     ;r8-11 are used as temps
(1)  380/    2775 :                     ;r8 is the working pointer
(1)  381/    2775 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    2775 :                     ;r9.0 is digit count
(1)  383/    2775 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    2775 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    2781 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    278D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    2791 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    2793 : A9                  	plo r9
(1)  389/    2794 :                     $$clrlp:	;clear the passed buffer
(1)  390/    2794 : F8 00               	ldi 0	
(1)  391/    2796 : 58                  	str r8	;clear a byte
(1)  392/    2797 : 18                  	inc r8
(1)  393/    2798 : 29                  	dec r9
(1)  394/    2799 : 89                  	glo r9	;check the count
(1)  395/    279A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    279C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    27A0 :                     
(1)  398/    27A0 : F8 20               	ldi 32	;bit count
(1)  399/    27A2 : AF                  	plo r15
(1)  400/    27A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    27A3 :                     $$cktop:
(1)  402/    27A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    27A4 : FE                  	shl		;check for a 1
(1)  404/    27A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    27A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    27B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    27B4 : 8F                  	glo r15
(1)  408/    27B5 : 3A A3               	bnz $$cktop	;
(1)  409/    27B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    27B8 :                     $$bitloop:
(1)  411/    27B8 : F8 0A               	ldi 10	;digit count
(1)  412/    27BA : A9                  	plo r9
(1)  413/    27BB :                     $$dcklp:
(1)  414/    27BB : 08                  	ldn r8 	;pick up a digit
(1)  415/    27BC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    27BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    27C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    27C2 : 58                  	str r8	;put it back
(1)  419/    27C3 :                     $$dnoadd:
(1)  420/    27C3 : 18                  	inc r8
(1)  421/    27C4 : 29                  	dec r9	;decrement digit count
(1)  422/    27C5 : 89                  	glo r9
(1)  423/    27C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    27C8 :                     	
(1)  425/    27C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    27D4 :                     	
(1)  427/    27D4 : F8 0A               	ldi 10	;load the digit count again
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 60 - 6/5/2013 13:45:40


(1)  428/    27D6 : A9                  	plo r9
(1)  429/    27D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    27D7 :                     $$dshlp:
(1)  431/    27D7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    27D8 : 08                  	ldn r8	;get the digit back
(1)  433/    27D9 : 7E                  	shlc	;continue the shift
(1)  434/    27DA : BF                  	phi r15 ;save it for the carry test
(1)  435/    27DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    27DD : 58                  	str r8	;put the digit back
(1)  437/    27DE : 9F                  	ghi r15	;now test for carry
(1)  438/    27DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    27E1 : 29                  	dec r9	;decrement the digit count
(1)  440/    27E2 : 89                  	glo r9
(1)  441/    27E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    27E5 :                     	
(1)  443/    27E5 : 2F                  	dec r15
(1)  444/    27E6 : 8F                  	glo r15
(1)  445/    27E7 : 3A B8               	bnz $$bitloop
(1)  446/    27E9 :                     	
(1)  447/    27E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    27ED : F8 0A               	ldi 10		;digit count again
(1)  449/    27EF : A9                  	plo r9
(1)  450/    27F0 :                     $$upnxt:
(1)  451/    27F0 : 08                  	ldn r8		;get digit
(1)  452/    27F1 : F9 30               	ori 0x30	;make ascii
(1)  453/    27F3 : 58                  	str r8		;put it back
(1)  454/    27F4 : 18                  	inc r8		;next digit
(1)  455/    27F5 : 29                  	dec r9		;counter
(1)  456/    27F6 : 89                  	glo r9
(1)  457/    27F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    27F9 :                     	
(1)  459/    27F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    2801 : EE                  	sex memaddr	;set up
(1)  461/    2802 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    2804 : F7                  	sm		;desired number of digits to skip
(1)  463/    2805 : E2                  	sex sp		;reset index register
(1)  464/    2806 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    2807 :                     $$cknext:
(1)  466/    2807 : 0F                  	ldn r15		;check digit
(1)  467/    2808 : FF 30               	smi 0x30	;for '0'
(1)  468/    280A : 3A 11               	bnz $$done
(1)  469/    280C : 1F                  	inc r15		;next digit
(1)  470/    280D : 29                  	dec r9		;reduce count
(1)  471/    280E : 89                  	glo r9
(1)  472/    280F : 3A 07               	bnz $$cknext
(1)  473/    2811 :                     $$done:
(1)  474/    2811 : (MACRO)             	cretn
(1)  475/    2812 :                     	
(1)  476/    2812 :                     	
(1)  477/    2812 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    2812 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    2812 : (MACRO)                 Ccall _divU4
(1)  480/    2815 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    281D : (MACRO)                 Cretn
(1)  482/    281E :                         
(1)  483/    281E :                     _modI4:	;32 bit signed remainder
(1)  484/    281E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    281E : (MACRO)                 Ccall _divI4
(1)  486/    2821 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    2829 : (MACRO)                 Cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(lcc1802Epilofl.inc) - page 61 - 6/5/2013 13:45:40


(1)  488/    282A :                         
(1)  489/    282A :                     	
(1)  490/    282A :                      
    2836/    282A :                     	include LCC1802fp.inc
(1)    1/    282A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    282A :                     ;maybe originally from RCA
(1)    3/    282A :                     ;these routines use ALL the registers from 6-15!
(1)    4/    282A :                     ;8-15 were more or less available to start with
(1)    5/    282A :                     ;it saves 6 when it uses it
(1)    6/    282A :                     ;I save 7 on entry and restore on exit
(1)    7/    282A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    282A : =BH                 FB	equ	11	;was R9
(1)    9/    282A : =9H                 F9	equ	9	;was R7
(1)   10/    282A : =7H                 F7	equ	7	;was RB
(1)   11/    282A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    282A :                     ; *** Convert signed long to float
(1)   13/    282A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    282A :                     ; *** result in same register
(1)   15/    282A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    282A :                     	align 256
(1)   17/    2900 : F8 00               cvif4:	ldi	0
(1)   18/    2902 : BE                  	phi	memaddr	;sign
(1)   19/    2903 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    2905 : AE                  	plo	memaddr	;
(1)   21/    2906 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    2907 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    2909 : FE                  	shl		;sign bit to df
(1)   24/    290A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    290C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    290D : BE                  	phi	memaddr	;save it
(1)   27/    290E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    292E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    2930 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    2931 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    2933 : 99                  	ghi	RL8	;next byte
(1)   32/    2934 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    2936 : 89                  	glo	RL8	;last byte
(1)   34/    2937 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    2939 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    293A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    293C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    293D : (MACRO)             	shru4	RL8
(1)   39/    2949 : 30 39               	br	$$sgnpos
(1)   40/    294B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    294C : FA 80               	ani	0x80	;isolate it
(1)   42/    294E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    2950 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    2951 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    295D : 30 4B               	br	$$shl
(1)   46/    295F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    2960 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    2961 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    2962 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    2964 : 88                  	glo	RL8-1	;get the byte
(1)   51/    2965 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    2967 : A8                  	plo	RL8-1	;put it back
(1)   53/    2968 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    2969 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    296B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    296C : F9 80               	ori	0x80	;set the sign bit
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 62 - 6/5/2013 13:45:40


(1)   57/    296E : B8                  	phi	RL8-1	;place it
(1)   58/    296F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    2970 :                     	
(1)   60/    2970 :                     
(1)   61/    2970 :                     
(1)   62/    2970 :                     ; *** Convert float to signed long
(1)   63/    2970 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    2970 :                     ; *** result in same register
(1)   65/    2970 :                     	align 256
(1)   66/    2A00 :                     cvfi4:
(1)   67/    2A00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2A01 : BE                  	phi	memaddr ;save for later
(1)   69/    2A02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2A03 : FE                  	shl		;shift to df
(1)   71/    2A04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2A05 : 7E                  	shlc		;combine with 0
(1)   73/    2A06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2A06 : 22                  	dec	sp
(1)   75/    2A07 : 52                  	str	sp
(1)   76/    2A08 : F8 96               	ldi	150
(1)   77/    2A0A : F7                  	sm		;calculate shift count needed
(1)   78/    2A0B :                     ;*******note - the df flag set here is tested later
(1)   79/    2A0B : AE                  	plo	memaddr
(1)   80/    2A0C : 12                  	inc	sp	;release work area
(1)   81/    2A0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    2A0D : F8 00               	ldi	0
(1)   83/    2A0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2A10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2A11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2A13 : A8                  	plo	RL8-1	;put it back
(1)   87/    2A14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2A15 : 32 3B               	bz	$$sign
(1)   89/    2A17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2A17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2A19 :                     
(1)   92/    2A19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2A25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2A26 : 8E                  	glo	memaddr
(1)   95/    2A27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    2A29 : 30 3B               	br	$$sign
(1)   97/    2A2B :                     
(1)   98/    2A2B :                     ;handle negative shift as best I can - gigo
(1)   99/    2A2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    2A37 : 1E                  	inc	memaddr
(1)  101/    2A38 : 8E                  	glo	memaddr
(1)  102/    2A39 : 3A 2B               	bnz	$$lsh	
(1)  103/    2A3B :                     	
(1)  104/    2A3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    2A3C : FE                  	shl		;shift sign bit into df
(1)  106/    2A3D : 3B 61               	bnf	$$done
(1)  107/    2A3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    2A5F : 30 61               	br	$$done	; and return
(1)  109/    2A61 :                     
(1)  110/    2A61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2A62 :                     
(1)  112/    2A62 :                     ; *** Check if character is numeric
(1)  113/    2A62 :                     ; *** D - char to check
(1)  114/    2A62 :                     ; *** Returns DF=1 if numeric
(1)  115/    2A62 :                     ; ***         DF=0 if not
(1)  116/    2A62 : AE                  f_isnum:   plo     r14                 ; save a copy
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 63 - 6/5/2013 13:45:40


(1)  117/    2A63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2A65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2A67 : FF 0A                          smi     10                  ; see if above
(1)  120/    2A69 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    2A6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    2A6D : C8                             lskp
(1)  123/    2A6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2A70 : 8E                             glo     r14                 ; recover character
(1)  125/    2A71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2A72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2A72 :                     ; *******************************
(1)  128/    2A72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2A73 : F6                             shr
(1)  130/    2A74 : B8                             phi   r8
(1)  131/    2A75 : 88                             glo   r8
(1)  132/    2A76 : 76                             shrc
(1)  133/    2A77 : A8                             plo   r8
(1)  134/    2A78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2A79 : 76                             shrc
(1)  136/    2A7A : B9                             phi   F9
(1)  137/    2A7B : 89                             glo   F9
(1)  138/    2A7C : 76                             shrc
(1)  139/    2A7D : A9                             plo   F9
(1)  140/    2A7E : (MACRO)                        Cretn
(1)  141/    2A7F :                     
(1)  142/    2A7F :                     ; ******************************
(1)  143/    2A7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    2A7F :                     ; ******************************
(1)  145/    2A7F : 89                  fp_shl_1:  glo   F9
(1)  146/    2A80 : FE                             shl
(1)  147/    2A81 : A9                             plo   F9
(1)  148/    2A82 : 99                             ghi   F9
(1)  149/    2A83 : 7E                             shlc
(1)  150/    2A84 : B9                             phi   F9
(1)  151/    2A85 : 88                             glo   r8
(1)  152/    2A86 : 7E                             shlc
(1)  153/    2A87 : A8                             plo   r8
(1)  154/    2A88 : 98                             ghi   r8
(1)  155/    2A89 : 7E                             shlc
(1)  156/    2A8A : B8                             phi   r8
(1)  157/    2A8B : D5                             sep   RRET
(1)  158/    2A8C :                     
(1)  159/    2A8C :                     ; **********************
(1)  160/    2A8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    2A8C :                     ; **********************
(1)  162/    2A8C : 8B                  fp_add_12: glo   FB
(1)  163/    2A8D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    2A8E : 52                             str   r2
(1)  165/    2A8F : 89                             glo   F9
(1)  166/    2A90 : F4                             add
(1)  167/    2A91 : A9                             plo   F9
(1)  168/    2A92 : 9B                             ghi   FB
(1)  169/    2A93 : 52                             str   r2
(1)  170/    2A94 : 99                             ghi   F9
(1)  171/    2A95 : 74                             adc
(1)  172/    2A96 : B9                             phi   F9
(1)  173/    2A97 : 8A                             glo   R10
(1)  174/    2A98 : 52                             str   r2
(1)  175/    2A99 : 88                             glo   r8
(1)  176/    2A9A : 74                             adc
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 64 - 6/5/2013 13:45:40


(1)  177/    2A9B : A8                             plo   r8
(1)  178/    2A9C : 9A                             ghi   R10
(1)  179/    2A9D : 52                             str   r2
(1)  180/    2A9E : 98                             ghi   r8
(1)  181/    2A9F : 74                             adc
(1)  182/    2AA0 : B8                             phi   r8
(1)  183/    2AA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    2AA2 : (MACRO)                        Cretn
(1)  185/    2AA3 :                     
(1)  186/    2AA3 :                     ; *******************************
(1)  187/    2AA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    2AA3 :                     ; *******************************
(1)  189/    2AA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    2AA4 : F6                             shr
(1)  191/    2AA5 : BF                             phi   R15
(1)  192/    2AA6 : 8F                             glo   R15
(1)  193/    2AA7 : 76                             shrc
(1)  194/    2AA8 : AF                             plo   R15
(1)  195/    2AA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    2AAA : 76                             shrc
(1)  197/    2AAB : BD                             phi   R13
(1)  198/    2AAC : 8D                             glo   R13
(1)  199/    2AAD : 76                             shrc
(1)  200/    2AAE : AD                             plo   R13
(1)  201/    2AAF : (MACRO)                        Cretn
(1)  202/    2AB0 :                     
(1)  203/    2AB0 :                     ; *************************************
(1)  204/    2AB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    2AB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    2AB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    2AB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    2AB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    2AB0 :                     ; *************************************
(1)  210/    2AB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    2AB1 : FA 80                          ani   080h                  ; check it
(1)  212/    2AB3 : CA 2A C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    2AB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    2AB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    2ABA : FF 01                          smi   1                     ; minus 1
(1)  216/    2ABC : BF                             phi   R15                    ; and put it back
(1)  217/    2ABD : C0 2A B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    2AC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    2AC1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    2AC2 : A8                             plo   r8                    ; set aside
(1)  221/    2AC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    2AC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    2AC5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    2AC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    2AC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    2AC8 : A8                             plo   r8                    ; and put it back
(1)  227/    2AC9 : 87                             glo   F7                   ; get signs
(1)  228/    2ACA : F6                             shr                         ; get sign 1
(1)  229/    2ACB : 98                             ghi   r8                    ; recover exponent
(1)  230/    2ACC : 76                             shrc                        ; shift in sign
(1)  231/    2ACD : B8                             phi   r8                    ; put it back
(1)  232/    2ACE : 12                             inc	r2	;wjr release work area
(1)  233/    2ACF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    2AD3 : (MACRO)             	   popr R12	;wjr
(1)  235/    2AD7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    2ADB : (MACRO)                        Cretn                       ; return to caller
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 65 - 6/5/2013 13:45:40


(1)  237/    2ADC :                     
(1)  238/    2ADC :                     ; ************************************
(1)  239/    2ADC :                     ; *** Get exponenst from arguments ***
(1)  240/    2ADC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    2ADC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    2ADC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    2ADC :                     ; ***          RF.0 - exp2         ***
(1)  244/    2ADC :                     ; ************************************
(1)  245/    2ADC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    2ADD : FE                             shl                         ; shift it into DF
(1)  247/    2ADE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    2ADF : 7E                             shlc                        ; shift in first bit
(1)  249/    2AE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    2AE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    2AE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    2AE2 : FE                             shl                         ; shift it into DF
(1)  253/    2AE3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    2AE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    2AE5 : AF                             plo   R15                    ; put into RF
(1)  256/    2AE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    2AE7 :                     
(1)  258/    2AE7 :                     ; ************************************
(1)  259/    2AE7 :                     ; *** Get signs from arguments     ***
(1)  260/    2AE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    2AE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    2AE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    2AE7 :                     ; ************************************
(1)  264/    2AE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    2AE8 : FE                             shl                         ; shift into DF
(1)  266/    2AE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    2AEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    2AEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    2AEC : A7                             plo   F7                    ; save them
(1)  270/    2AED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    2AEE :                     
(1)  272/    2AEE :                     ; ***************************************
(1)  273/    2AEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    2AEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    2AEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    2AEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    2AEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    2AEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    2AEE :                     ; ***        F7.0 - signs        ***
(1)  280/    2AEE :                     ; ***************************************
(1)  281/    2AEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    2AEF : CA 2B 07                       lbnz  add_a1nz
(1)  283/    2AF2 : 88                             glo   r8
(1)  284/    2AF3 : CA 2B 07                       lbnz  add_a1nz
(1)  285/    2AF6 : 99                             ghi   F9
(1)  286/    2AF7 : CA 2B 07                       lbnz  add_a1nz
(1)  287/    2AFA : 89                             glo   F9
(1)  288/    2AFB : CA 2B 07                       lbnz  add_a1nz
(1)  289/    2AFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    2AFF : B8                             phi   r8
(1)  291/    2B00 : 8A                             glo   R10
(1)  292/    2B01 : A8                             plo   r8
(1)  293/    2B02 : 9B                             ghi   FB
(1)  294/    2B03 : B9                             phi   F9
(1)  295/    2B04 : 8B                             glo   FB
(1)  296/    2B05 : A9                             plo   F9
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 66 - 6/5/2013 13:45:40


(1)  297/    2B06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2B07 :                     
(1)  299/    2B07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2B08 : CA 2B 18                       lbnz  add_a2nz
(1)  301/    2B0B : 8A                             glo   R10
(1)  302/    2B0C : CA 2B 18                       lbnz  add_a2nz
(1)  303/    2B0F : 9B                             ghi   FB
(1)  304/    2B10 : CA 2B 18                       lbnz  add_a2nz
(1)  305/    2B13 : 8B                             glo   FB
(1)  306/    2B14 : CA 2B 18                       lbnz  add_a2nz
(1)  307/    2B17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2B18 :                                
(1)  309/    2B18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    2B1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2B22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2B27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2B28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    2B2B : 9F                             ghi   R15
(1)  315/    2B2C : 52                             str   r2
(1)  316/    2B2D : 8F                             glo   R15
(1)  317/    2B2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    2B2F : CB 2B 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2B32 :                     
(1)  320/    2B32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2B33 : AE                             plo   R14
(1)  322/    2B34 : 9A                             ghi   R10
(1)  323/    2B35 : B8                             phi   r8
(1)  324/    2B36 : 8E                             glo   R14
(1)  325/    2B37 : BA                             phi   R10
(1)  326/    2B38 : 88                             glo   r8
(1)  327/    2B39 : AE                             plo   R14
(1)  328/    2B3A : 8A                             glo   R10
(1)  329/    2B3B : A8                             plo   r8
(1)  330/    2B3C : 8E                             glo   R14
(1)  331/    2B3D : AA                             plo   R10
(1)  332/    2B3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    2B3F : AE                             plo   R14
(1)  334/    2B40 : 9B                             ghi   FB
(1)  335/    2B41 : B9                             phi   F9
(1)  336/    2B42 : 8E                             glo   R14
(1)  337/    2B43 : BB                             phi   FB
(1)  338/    2B44 : 89                             glo   F9
(1)  339/    2B45 : AE                             plo   R14
(1)  340/    2B46 : 8B                             glo   FB
(1)  341/    2B47 : A9                             plo   F9
(1)  342/    2B48 : 8E                             glo   R14
(1)  343/    2B49 : AB                             plo   FB
(1)  344/    2B4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    2B4B : AE                             plo   R14
(1)  346/    2B4C : 8F                             glo   R15
(1)  347/    2B4D : BF                             phi   R15
(1)  348/    2B4E : 8E                             glo   R14
(1)  349/    2B4F : AF                             plo   R15
(1)  350/    2B50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2B53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2B55 : B8                             phi   r8
(1)  353/    2B56 : BA                             phi   R10
(1)  354/    2B57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2B59 : 52                             str   r2
(1)  356/    2B5A : 88                             glo   r8
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 67 - 6/5/2013 13:45:40


(1)  357/    2B5B : F1                             or
(1)  358/    2B5C : A8                             plo   r8
(1)  359/    2B5D : 8A                             glo   R10
(1)  360/    2B5E : F1                             or
(1)  361/    2B5F : AA                             plo   R10
(1)  362/    2B60 : 9F                             ghi   R15                    ; get exp1
(1)  363/    2B61 : 52                             str   r2                    ; place into memory
(1)  364/    2B62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2B63 : F7                             sm                          ; see if match to exp1
(1)  366/    2B64 : C2 2B 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2B67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2B68 : FC 01                          adi   1
(1)  369/    2B6A : AF                             plo   R15
(1)  370/    2B6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    2B6C : F6                             shr
(1)  372/    2B6D : AA                             plo   R10
(1)  373/    2B6E : 9B                             ghi   FB
(1)  374/    2B6F : 76                             shrc
(1)  375/    2B70 : BB                             phi   FB
(1)  376/    2B71 : 8B                             glo   FB
(1)  377/    2B72 : 76                             shrc
(1)  378/    2B73 : AB                             plo   FB
(1)  379/    2B74 : C0 2B 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2B77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2B78 : 52                             str   r2
(1)  382/    2B79 : F6                             shr
(1)  383/    2B7A : F3                             xor
(1)  384/    2B7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    2B7D : CA 2B 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2B80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2B83 : C0 2B BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2B86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2B87 : 52                             str   r2
(1)  390/    2B88 : 89                             glo   F9
(1)  391/    2B89 : F7                             sm
(1)  392/    2B8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    2B8B : 9B                             ghi   FB
(1)  394/    2B8C : 52                             str   r2
(1)  395/    2B8D : 99                             ghi   F9
(1)  396/    2B8E : 77                             smb
(1)  397/    2B8F : BC                             phi   R12
(1)  398/    2B90 : 8A                             glo   R10
(1)  399/    2B91 : 52                             str   r2
(1)  400/    2B92 : 88                             glo   r8
(1)  401/    2B93 : 77                             smb
(1)  402/    2B94 : AD                             plo   R13
(1)  403/    2B95 : 9A                             ghi   R10
(1)  404/    2B96 : 52                             str   r2
(1)  405/    2B97 : 98                             ghi   r8
(1)  406/    2B98 : 77                             smb
(1)  407/    2B99 : BD                             phi   R13
(1)  408/    2B9A : CB 2B A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    2B9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    2B9E : B8                             phi   r8
(1)  411/    2B9F : 8D                             glo   R13
(1)  412/    2BA0 : A8                             plo   r8
(1)  413/    2BA1 : 9C                             ghi   R12
(1)  414/    2BA2 : B9                             phi   F9
(1)  415/    2BA3 : 8C                             glo   R12
(1)  416/    2BA4 : A9                             plo   F9
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 68 - 6/5/2013 13:45:40


(1)  417/    2BA5 : C0 2B BF                       lbr   add_fnl               ; finalize
(1)  418/    2BA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    2BA9 : 52                             str   r2
(1)  420/    2BAA : 8B                             glo   FB
(1)  421/    2BAB : F7                             sm
(1)  422/    2BAC : A9                             plo   F9
(1)  423/    2BAD : 99                             ghi   F9
(1)  424/    2BAE : 52                             str   r2
(1)  425/    2BAF : 9B                             ghi   FB
(1)  426/    2BB0 : 77                             smb
(1)  427/    2BB1 : B9                             phi   F9
(1)  428/    2BB2 : 88                             glo   r8
(1)  429/    2BB3 : 52                             str   r2
(1)  430/    2BB4 : 8A                             glo   R10
(1)  431/    2BB5 : 77                             smb
(1)  432/    2BB6 : A8                             plo   r8
(1)  433/    2BB7 : 98                             ghi   r8
(1)  434/    2BB8 : 52                             str   r2
(1)  435/    2BB9 : 9A                             ghi   R10
(1)  436/    2BBA : 77                             smb
(1)  437/    2BBB : B8                             phi   r8
(1)  438/    2BBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    2BBD : FE                             shl
(1)  440/    2BBE : A7                             plo   F7
(1)  441/    2BBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    2BC0 : CA 2B DD                       lbnz  add_nz                ; jump if not
(1)  443/    2BC3 : 88                             glo   r8
(1)  444/    2BC4 : CA 2B DD                       lbnz  add_nz
(1)  445/    2BC7 : 99                             ghi   F9
(1)  446/    2BC8 : CA 2B DD                       lbnz  add_nz
(1)  447/    2BCB : 89                             glo   F9
(1)  448/    2BCC : CA 2B DD                       lbnz  add_nz
(1)  449/    2BCF : 12                             inc	r2	;wjr release work area
(1)  450/    2BD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    2BD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    2BD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    2BDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    2BDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    2BDE : C2 2B EB                       lbz   add_nx                ; jump if not
(1)  456/    2BE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    2BE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    2BE5 : FC 01                          adi   1                     ; increment it
(1)  459/    2BE7 : BF                             phi   R15                    ; and put it back
(1)  460/    2BE8 : C0 2B DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    2BEB :                     
(1)  462/    2BEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    2BEC : F6                             shr
(1)  464/    2BED : A7                             plo   F7
(1)  465/    2BEE : C0 2A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    2BF1 :                     
(1)  467/    2BF1 :                     ; ***************************************
(1)  468/    2BF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    2BF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    2BF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    2BF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    2BF1 :                     ; ***************************************
(1)  473/    2BF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    2BF2 : FB 80                          xri   080h
(1)  475/    2BF4 : BA                             phi   R10                    ; and put it back
(1)  476/    2BF5 : C0 2A EE                       lbr   fp_add                ; now just add
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 69 - 6/5/2013 13:45:40


(1)  477/    2BF8 :                     
(1)  478/    2BF8 :                     ; ***************************************
(1)  479/    2BF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    2BF8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    2BF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    2BF8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    2BF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    2BF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    2BF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    2BF8 :                     ; ***************************************
(1)  487/    2BF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    2BF9 : CA 2C 09                       lbnz  div_a1nz
(1)  489/    2BFC : 88                             glo   r8
(1)  490/    2BFD : CA 2C 09                       lbnz  div_a1nz
(1)  491/    2C00 : 99                             ghi   F9
(1)  492/    2C01 : CA 2C 09                       lbnz  div_a1nz
(1)  493/    2C04 : 89                             glo   F9
(1)  494/    2C05 : CA 2C 09                       lbnz  div_a1nz
(1)  495/    2C08 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    2C09 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    2C0A : CA 2C 27                       lbnz  div_a2nz
(1)  498/    2C0D : 8A                             glo   R10
(1)  499/    2C0E : CA 2C 27                       lbnz  div_a2nz
(1)  500/    2C11 : 9B                             ghi   FB
(1)  501/    2C12 : CA 2C 27                       lbnz  div_a2nz
(1)  502/    2C15 : 8B                             glo   FB
(1)  503/    2C16 : CA 2C 27                       lbnz  div_a2nz
(1)  504/    2C19 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    2C1A : FA 80                          ani   080h                  ; want only sign
(1)  506/    2C1C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    2C1E : B8                             phi   r8                    ; put into answer
(1)  508/    2C1F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    2C21 : A8                             plo   r8 
(1)  510/    2C22 : F8 00                          ldi   0
(1)  511/    2C24 : B9                             phi   F9
(1)  512/    2C25 : A9                             plo   F9
(1)  513/    2C26 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    2C27 :                     
(1)  515/    2C27 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    2C2C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    2C31 : (MACRO)             	   pushr R13	;wjr
(1)  518/    2C36 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    2C37 :                     
(1)  520/    2C37 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    2C3A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    2C3D : 8F                             glo   R15                    ; get exp2
(1)  523/    2C3E : FF 7F                          smi   127                   ; remove bias
(1)  524/    2C40 : 52                             str   r2                    ; place into memory
(1)  525/    2C41 : 9F                             ghi   R15                    ; get exp1
(1)  526/    2C42 : FF 7F                          smi   127                   ; remove bias
(1)  527/    2C44 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    2C45 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    2C47 : 73                             stxd                        ; save onto stack
(1)  530/    2C48 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    2C49 : 52                             str   r2
(1)  532/    2C4A : F6                             shr
(1)  533/    2C4B : F3                             xor
(1)  534/    2C4C : 73                             stxd                        ; place onto stack
(1)  535/    2C4D : F8 00                          ldi   0                     ; setup man
(1)  536/    2C4F : BA                             phi   R10
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 70 - 6/5/2013 13:45:40


(1)  537/    2C50 : 8A                             glo   R10
(1)  538/    2C51 : F9 80                          ori   080h
(1)  539/    2C53 : AA                             plo   R10
(1)  540/    2C54 : F8 00                          ldi   0                     ; setup div
(1)  541/    2C56 : B8                             phi   r8
(1)  542/    2C57 : 88                             glo   r8
(1)  543/    2C58 : F9 80                          ori   080h
(1)  544/    2C5A : A8                             plo   r8
(1)  545/    2C5B : F8 00                          ldi   0                     ; setup result
(1)  546/    2C5D : BC                             phi   R12
(1)  547/    2C5E : AC                             plo   R12
(1)  548/    2C5F : B7                             phi   F7
(1)  549/    2C60 : A7                             plo   F7
(1)  550/    2C61 : AF                             plo   R15                    ; setup quotient
(1)  551/    2C62 : BF                             phi   R15
(1)  552/    2C63 : BD                             phi   R13
(1)  553/    2C64 : AD                             plo   R13
(1)  554/    2C65 : F8 80                          ldi   080h
(1)  555/    2C67 : AF                             plo   R15
(1)  556/    2C68 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    2C69 : CA 2C 7B                       lbnz  div_go1
(1)  558/    2C6C : 88                             glo   r8
(1)  559/    2C6D : CA 2C 7B                       lbnz  div_go1
(1)  560/    2C70 : 99                             ghi   F9
(1)  561/    2C71 : CA 2C 7B                       lbnz  div_go1
(1)  562/    2C74 : 89                             glo   F9
(1)  563/    2C75 : CA 2C 7B                       lbnz  div_go1
(1)  564/    2C78 : C0 2C DB                       lbr   div_z
(1)  565/    2C7B : 9A                  div_go1:   ghi   R10
(1)  566/    2C7C : CA 2C 8E                       lbnz  div_go
(1)  567/    2C7F : 8A                             glo   R10
(1)  568/    2C80 : CA 2C 8E                       lbnz  div_go
(1)  569/    2C83 : 9B                             ghi   FB
(1)  570/    2C84 : CA 2C 8E                       lbnz  div_go
(1)  571/    2C87 : 8B                             glo   FB
(1)  572/    2C88 : CA 2C 8E                       lbnz  div_go
(1)  573/    2C8B : C0 2C DB                       lbr   div_z                 ; nothing more to do
(1)  574/    2C8E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    2C8F : 52                             str   r2
(1)  576/    2C90 : 89                             glo   F9
(1)  577/    2C91 : F7                             sm
(1)  578/    2C92 : 9B                             ghi   FB
(1)  579/    2C93 : 52                             str   r2
(1)  580/    2C94 : 99                             ghi   F9
(1)  581/    2C95 : 77                             smb
(1)  582/    2C96 : 8A                             glo   R10
(1)  583/    2C97 : 52                             str   r2
(1)  584/    2C98 : 88                             glo   r8
(1)  585/    2C99 : 77                             smb
(1)  586/    2C9A : 9A                             ghi   R10
(1)  587/    2C9B : 52                             str   r2
(1)  588/    2C9C : 98                             ghi   r8
(1)  589/    2C9D : 77                             smb
(1)  590/    2C9E : CB 2C C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    2CA1 : 8B                             glo   FB                    ; div -= man
(1)  592/    2CA2 : 52                             str   r2
(1)  593/    2CA3 : 89                             glo   F9
(1)  594/    2CA4 : F7                             sm
(1)  595/    2CA5 : A9                             plo   F9
(1)  596/    2CA6 : 9B                             ghi   FB
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 71 - 6/5/2013 13:45:40


(1)  597/    2CA7 : 52                             str   r2
(1)  598/    2CA8 : 99                             ghi   F9
(1)  599/    2CA9 : 77                             smb
(1)  600/    2CAA : B9                             phi   F9
(1)  601/    2CAB : 8A                             glo   R10
(1)  602/    2CAC : 52                             str   r2
(1)  603/    2CAD : 88                             glo   r8
(1)  604/    2CAE : 77                             smb
(1)  605/    2CAF : A8                             plo   r8
(1)  606/    2CB0 : 9A                             ghi   R10
(1)  607/    2CB1 : 52                             str   r2
(1)  608/    2CB2 : 98                             ghi   r8
(1)  609/    2CB3 : 77                             smb
(1)  610/    2CB4 : B8                             phi   r8
(1)  611/    2CB5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    2CB6 : 52                             str   r2
(1)  613/    2CB7 : 9C                             ghi   R12
(1)  614/    2CB8 : F1                             or
(1)  615/    2CB9 : BC                             phi   R12
(1)  616/    2CBA : 8F                             glo   R15
(1)  617/    2CBB : 52                             str   r2
(1)  618/    2CBC : 8C                             glo   R12
(1)  619/    2CBD : F1                             or
(1)  620/    2CBE : AC                             plo   R12
(1)  621/    2CBF : 9D                             ghi   R13
(1)  622/    2CC0 : 52                             str   r2
(1)  623/    2CC1 : 97                             ghi   F7
(1)  624/    2CC2 : F1                             or
(1)  625/    2CC3 : B7                             phi   F7
(1)  626/    2CC4 : 8D                             glo   R13
(1)  627/    2CC5 : 52                             str   r2
(1)  628/    2CC6 : 87                             glo   F7
(1)  629/    2CC7 : F1                             or
(1)  630/    2CC8 : A7                             plo   F7
(1)  631/    2CC9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    2CCA : 2A A3                          dw    fp_shr_fd
(1)  633/    2CCC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    2CCD : F6                             shr
(1)  635/    2CCE : BA                             phi   R10
(1)  636/    2CCF : 8A                             glo   R10
(1)  637/    2CD0 : 76                             shrc
(1)  638/    2CD1 : AA                             plo   R10
(1)  639/    2CD2 : 9B                             ghi   FB
(1)  640/    2CD3 : 76                             shrc
(1)  641/    2CD4 : BB                             phi   FB
(1)  642/    2CD5 : 8B                             glo   FB
(1)  643/    2CD6 : 76                             shrc
(1)  644/    2CD7 : AB                             plo   FB
(1)  645/    2CD8 : C0 2C 68                       lbr   div_lp                ; loop back until done
(1)  646/    2CDB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    2CDC : B8                             phi   r8
(1)  648/    2CDD : 8C                             glo   R12
(1)  649/    2CDE : A8                             plo   r8
(1)  650/    2CDF : 97                             ghi   F7
(1)  651/    2CE0 : B9                             phi   F9
(1)  652/    2CE1 : 87                             glo   F7
(1)  653/    2CE2 : A9                             plo   F9
(1)  654/    2CE3 : 60                             irx                         ; recover sign
(1)  655/    2CE4 : 72                             ldxa
(1)  656/    2CE5 : A7                             plo   F7
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 72 - 6/5/2013 13:45:40


(1)  657/    2CE6 : F0                             ldx                         ; recover answer exponent
(1)  658/    2CE7 : BF                             phi   R15
(1)  659/    2CE8 : C0 2A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    2CEB :                     
(1)  661/    2CEB :                     ; ***************************************
(1)  662/    2CEB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    2CEB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    2CEB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    2CEB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    2CEB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    2CEB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    2CEB :                     ; ***        F7.0 - signs             ***
(1)  669/    2CEB :                     ; ***************************************
(1)  670/    2CEB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    2CF0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    2CF5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    2CFA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    2CFB :                     
(1)  675/    2CFB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    2CFE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    2D01 : 8F                             glo   R15                    ; get exp2
(1)  678/    2D02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    2D04 : 52                             str   r2                    ; place into memory
(1)  680/    2D05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    2D06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    2D08 : F4                             add                         ; add in exponent 2
(1)  683/    2D09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    2D0B : 73                             stxd                        ; place onto stack
(1)  685/    2D0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    2D0D : 52                             str   r2
(1)  687/    2D0E : F6                             shr
(1)  688/    2D0F : F3                             xor
(1)  689/    2D10 : 73                             stxd                        ; place onto stack
(1)  690/    2D11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    2D12 : 73                             stxd                        ; save on stack
(1)  692/    2D13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    2D14 : 73                             stxd
(1)  694/    2D15 : 86                             glo   r6
(1)  695/    2D16 : 73                             stxd
(1)  696/    2D17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    2D19 : 73                             stxd
(1)  698/    2D1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    2D1B : AE                             plo   R14
(1)  700/    2D1C : B6                             phi   r6
(1)  701/    2D1D : A6                             plo   r6
(1)  702/    2D1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    2D1F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    2D20 : F9 80                          ori   080h
(1)  705/    2D22 : A8                             plo   r8
(1)  706/    2D23 : F8 00                          ldi   0
(1)  707/    2D25 : BC                             phi   R12                    ; set result to 0
(1)  708/    2D26 : AC                             plo   R12
(1)  709/    2D27 : B7                             phi   F7
(1)  710/    2D28 : A7                             plo   F7
(1)  711/    2D29 : BF                             phi   R15
(1)  712/    2D2A : AF                             plo   R15
(1)  713/    2D2B : BD                             phi   R13
(1)  714/    2D2C : AD                             plo   R13
(1)  715/    2D2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    2D2E : 8A                             glo   R10                    ; be sure high bit is set
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 73 - 6/5/2013 13:45:40


(1)  717/    2D2F : F9 80                          ori   080h
(1)  718/    2D31 : AA                             plo   R10
(1)  719/    2D32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    2D33 : CA 2D 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    2D36 : 9B                             ghi   FB
(1)  722/    2D37 : CA 2D 42                       lbnz  mul_go1
(1)  723/    2D3A : 8A                             glo   R10
(1)  724/    2D3B : CA 2D 42                       lbnz  mul_go1
(1)  725/    2D3E : 9A                             ghi   R10
(1)  726/    2D3F : C2 2D BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    2D42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    2D43 : F6                             shr
(1)  729/    2D44 : BA                             phi   R10
(1)  730/    2D45 : 8A                             glo   R10
(1)  731/    2D46 : 76                             shrc
(1)  732/    2D47 : AA                             plo   R10
(1)  733/    2D48 : 9B                             ghi   FB
(1)  734/    2D49 : 76                             shrc
(1)  735/    2D4A : BB                             phi   FB
(1)  736/    2D4B : 8B                             glo   FB
(1)  737/    2D4C : 76                             shrc
(1)  738/    2D4D : AB                             plo   FB
(1)  739/    2D4E : CB 2D 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    2D51 : 89                             glo   F9                    ; res += mul
(1)  741/    2D52 : 52                             str   r2
(1)  742/    2D53 : 87                             glo   F7
(1)  743/    2D54 : F4                             add
(1)  744/    2D55 : A7                             plo   F7
(1)  745/    2D56 : 99                             ghi   F9
(1)  746/    2D57 : 52                             str   r2
(1)  747/    2D58 : 97                             ghi   F7
(1)  748/    2D59 : 74                             adc
(1)  749/    2D5A : B7                             phi   F7
(1)  750/    2D5B : 88                             glo   r8
(1)  751/    2D5C : 52                             str   r2
(1)  752/    2D5D : 8C                             glo   R12
(1)  753/    2D5E : 74                             adc
(1)  754/    2D5F : AC                             plo   R12
(1)  755/    2D60 : 98                             ghi   r8
(1)  756/    2D61 : 52                             str   r2
(1)  757/    2D62 : 9C                             ghi   R12
(1)  758/    2D63 : 74                             adc
(1)  759/    2D64 : BC                             phi   R12
(1)  760/    2D65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    2D66 : 52                             str   r2
(1)  762/    2D67 : 8D                             glo   R13
(1)  763/    2D68 : F4                             add
(1)  764/    2D69 : AD                             plo   R13
(1)  765/    2D6A : 96                             ghi   r6
(1)  766/    2D6B : 52                             str   r2
(1)  767/    2D6C : 96                             ghi   r6
(1)  768/    2D6D : 52                             str   r2
(1)  769/    2D6E : 9D                             ghi   R13
(1)  770/    2D6F : 74                             adc
(1)  771/    2D70 : BD                             phi   R13
(1)  772/    2D71 : 8E                             glo   R14
(1)  773/    2D72 : 52                             str   r2
(1)  774/    2D73 : 8F                             glo   R15
(1)  775/    2D74 : 74                             adc
(1)  776/    2D75 : AF                             plo   R15
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 74 - 6/5/2013 13:45:40


(1)  777/    2D76 : 9E                             ghi   R14
(1)  778/    2D77 : 52                             str   r2
(1)  779/    2D78 : 9F                             ghi   R15
(1)  780/    2D79 : 74                             adc
(1)  781/    2D7A : BF                             phi   R15
(1)  782/    2D7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    2D7C : C2 2D 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    2D7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    2D80 : FC 01                          adi   1
(1)  786/    2D82 : AD                             plo   R13
(1)  787/    2D83 : 9D                             ghi   R13
(1)  788/    2D84 : 7C 00                          adci  0
(1)  789/    2D86 : BD                             phi   R13
(1)  790/    2D87 : 8F                             glo   R15
(1)  791/    2D88 : 7C 00                          adci  0
(1)  792/    2D8A : AF                             plo   R15
(1)  793/    2D8B : 9F                             ghi   R15
(1)  794/    2D8C : 7C 00                          adci  0
(1)  795/    2D8E : BF                             phi   R15
(1)  796/    2D8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    2D90 : F0                             ldx
(1)  798/    2D91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    2D93 : 73                             stxd                        ; and put it back
(1)  800/    2D94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    2D95 : FE                             shl
(1)  802/    2D96 : A9                             plo   F9
(1)  803/    2D97 : 99                             ghi   F9
(1)  804/    2D98 : 7E                             shlc
(1)  805/    2D99 : B9                             phi   F9
(1)  806/    2D9A : 88                             glo   r8
(1)  807/    2D9B : 7E                             shlc
(1)  808/    2D9C : A8                             plo   r8
(1)  809/    2D9D : 98                             ghi   r8
(1)  810/    2D9E : 7E                             shlc
(1)  811/    2D9F : B8                             phi   r8
(1)  812/    2DA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    2DA1 : FE                             shl
(1)  814/    2DA2 : A6                             plo   r6
(1)  815/    2DA3 : 96                             ghi   r6
(1)  816/    2DA4 : 7E                             shlc
(1)  817/    2DA5 : B6                             phi   r6
(1)  818/    2DA6 : 8E                             glo   R14
(1)  819/    2DA7 : 7E                             shlc
(1)  820/    2DA8 : AE                             plo   R14
(1)  821/    2DA9 : 9E                             ghi   R14
(1)  822/    2DAA : 7E                             shlc
(1)  823/    2DAB : BE                             phi   R14
(1)  824/    2DAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    2DAD : C2 2D 32                       lbz   mul_lp1               ; jump if not
(1)  826/    2DB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    2DB2 : B8                             phi   r8
(1)  828/    2DB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    2DB4 : F9 01                          ori   1
(1)  830/    2DB6 : A6                             plo   r6
(1)  831/    2DB7 : C0 2D 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    2DBA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    2DBB : 72                             ldxa
(1)  834/    2DBC : AE                             plo   R14                    ; set aside
(1)  835/    2DBD : 72                             ldxa
(1)  836/    2DBE : A6                             plo   r6
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 75 - 6/5/2013 13:45:40


(1)  837/    2DBF : 72                             ldxa
(1)  838/    2DC0 : B6                             phi   r6
(1)  839/    2DC1 : F0                             ldx
(1)  840/    2DC2 : BE                             phi   R14
(1)  841/    2DC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    2DC4 : B8                             phi   r8
(1)  843/    2DC5 : 8C                             glo   R12
(1)  844/    2DC6 : A8                             plo   r8
(1)  845/    2DC7 : 97                             ghi   F7
(1)  846/    2DC8 : B9                             phi   F9
(1)  847/    2DC9 : 87                             glo   F7
(1)  848/    2DCA : A9                             plo   F9
(1)  849/    2DCB : 8E                             glo   R14
(1)  850/    2DCC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    2DCD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    2DCE : FF 02                          smi   2                     ; see if <2
(1)  853/    2DD0 : CB 2D E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    2DD3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    2DD4 : 2A 72                          dw    fp_shr_1
(1)  856/    2DD6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    2DD7 : 2A A3                          dw    fp_shr_fd
(1)  858/    2DD9 : CB 2D E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    2DDC : 88                             glo   r8                    ; set high bit
(1)  860/    2DDD : F9 80                          ori   080h
(1)  861/    2DDF : A8                             plo   r8
(1)  862/    2DE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    2DE1 : C0 2D CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    2DE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    2DE5 : 72                             ldxa
(1)  866/    2DE6 : A7                             plo   F7
(1)  867/    2DE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    2DE8 : AC                             plo   R12
(1)  869/    2DE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    2DEA : CA 2D FC                       lbnz  mul_lp3a
(1)  871/    2DED : 8F                             glo   R15
(1)  872/    2DEE : CA 2D FC                       lbnz  mul_lp3a
(1)  873/    2DF1 : 9D                             ghi   R13
(1)  874/    2DF2 : CA 2D FC                       lbnz  mul_lp3a
(1)  875/    2DF5 : 8D                             glo   R13
(1)  876/    2DF6 : CA 2D FC                       lbnz  mul_lp3a
(1)  877/    2DF9 : C0 2E 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    2DFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    2DFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    2E00 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    2E03 : CB 2D E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    2E06 : 88                             glo   r8                    ; set high bit
(1)  883/    2E07 : F9 80                          ori   080h
(1)  884/    2E09 : A8                             plo   r8
(1)  885/    2E0A : C0 2D E9                       lbr   mul_lp3
(1)  886/    2E0D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    2E0E : BF                             phi   R15                    ; to high R15
(1)  888/    2E0F : C0 2A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    2E12 :                     
(1)  890/    2E12 :                     ; ***************************************
(1)  891/    2E12 :                     ; *** Convert ascii to floating point ***
(1)  892/    2E12 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    2E12 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    2E12 :                     ; ***************************************
(1)  895/    2E12 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    2E13 : FF 20                          smi   ' '                   ; check for space
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 76 - 6/5/2013 13:45:40


(1)  897/    2E15 : C2 2E 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    2E18 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    2E19 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    2E1A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    2E1C : CA 2E 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    2E1F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    2E21 : 73                             stxd                        ; place onto stack
(1)  904/    2E22 : 1F                             inc   R15                    ; move past sign
(1)  905/    2E23 : C0 2E 30                       lbr   atof_go1              ; and continue
(1)  906/    2E26 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    2E28 : 73                             stxd                        ; place onto stack
(1)  908/    2E29 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    2E2A : FF 2B                          smi   '+'
(1)  910/    2E2C : CA 2E 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    2E2F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    2E30 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    2E32 : B8                             phi   r8
(1)  914/    2E33 : A8                             plo   r8
(1)  915/    2E34 : B9                             phi   F9
(1)  916/    2E35 : A9                             plo   F9
(1)  917/    2E36 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    2E37 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    2E3A : CB 2E 67                       lbnf  atof_no1              ; jump if not
(1)  920/    2E3D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    2E3E : BA                             phi   R10
(1)  922/    2E3F : 88                             glo   r8
(1)  923/    2E40 : AA                             plo   R10
(1)  924/    2E41 : 99                             ghi   F9
(1)  925/    2E42 : BB                             phi   FB
(1)  926/    2E43 : 89                             glo   F9
(1)  927/    2E44 : AB                             plo   FB
(1)  928/    2E45 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    2E48 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    2E4B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    2E4E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    2E51 : 4F                             lda   R15                    ; get number
(1)  933/    2E52 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    2E54 : 52                             str   r2                    ; setup for add
(1)  935/    2E55 : 89                             glo   F9                    ; add in next digit
(1)  936/    2E56 : F4                             add
(1)  937/    2E57 : A9                             plo   F9
(1)  938/    2E58 : 99                             ghi   F9                    ; propagate carry
(1)  939/    2E59 : 7C 00                          adci  0
(1)  940/    2E5B : B9                             phi   F9
(1)  941/    2E5C : 88                             glo   r8
(1)  942/    2E5D : 7C 00                          adci  0
(1)  943/    2E5F : A8                             plo   r8
(1)  944/    2E60 : 98                             ghi   r8
(1)  945/    2E61 : 7C 00                          adci  0
(1)  946/    2E63 : B8                             phi   r8
(1)  947/    2E64 : C0 2E 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    2E67 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    2E68 : FF 2E                          smi   '.'
(1)  950/    2E6A : CA 2E 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    2E6D : 1F                             inc   R15                    ; move past decimal
(1)  952/    2E6E : F8 2F               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    2E70 : BA                             phi   R10
(1)  954/    2E71 : F8 A3                          ldi   scratch&255
(1)  955/    2E73 : AA                             plo   R10
(1)  956/    2E74 : F8 10                          ldi   16                    ; 16 bytes to clear
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 77 - 6/5/2013 13:45:40


(1)  957/    2E76 : AC                             plo   R12
(1)  958/    2E77 : F8 00               atof_lpx:  ldi   0
(1)  959/    2E79 : 5A                             str   R10
(1)  960/    2E7A : 1A                             inc   R10
(1)  961/    2E7B : 2C                             dec   R12
(1)  962/    2E7C : 8C                             glo   R12
(1)  963/    2E7D : CA 2E 77                       lbnz  atof_lpx
(1)  964/    2E80 : F8 2F                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    2E82 : BA                             phi   R10
(1)  966/    2E83 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    2E85 : AA                             plo   R10
(1)  968/    2E86 : F8 01                          ldi   1                     ; setup count
(1)  969/    2E88 : AC                             plo   R12
(1)  970/    2E89 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    2E8B : BC                             phi   R12
(1)  972/    2E8C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    2E8D : FF 11                          smi   17
(1)  974/    2E8F : C2 2E A8                       lbz   atof_dn3              ; jump if so
(1)  975/    2E92 : 0F                             ldn   R15                    ; get character
(1)  976/    2E93 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    2E94 : 2A 62                          dw    f_isnum
(1)  978/    2E96 : CB 2E A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    2E99 : 4F                             lda   R15                    ; get character
(1)  980/    2E9A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    2E9C : 5A                             str   R10                    ; write into bcd area
(1)  982/    2E9D : 1A                             inc   R10
(1)  983/    2E9E : 1C                             inc   R12                    ; increment count
(1)  984/    2E9F : CA 2E 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    2EA2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    2EA4 : BC                             phi   R12
(1)  987/    2EA5 : C0 2E 8C                       lbr   atof_lp2
(1)  988/    2EA8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    2EA9 : CA 2E C2                       lbnz  atof_nz
(1)  990/    2EAC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    2EAD : CA 2E C2                       lbnz  atof_nz
(1)  992/    2EB0 : 88                             glo   r8
(1)  993/    2EB1 : CA 2E C2                       lbnz  atof_nz
(1)  994/    2EB4 : 99                             ghi   F9
(1)  995/    2EB5 : CA 2E C2                       lbnz  atof_nz
(1)  996/    2EB8 : 89                             glo   F9
(1)  997/    2EB9 : CA 2E C2                       lbnz  atof_nz
(1)  998/    2EBC : 60                             irx                         ; recover sign
(1)  999/    2EBD : F0                             ldx
(1) 1000/    2EBE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    2EBF : C0 2F 95                       lbr	atof_end               ; and return
(1) 1002/    2EC2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    2EC4 : BC                             phi   R12
(1) 1004/    2EC5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    2EC6 : FA 80                          ani   080h
(1) 1006/    2EC8 : CA 2F 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    2ECB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    2ECE : F8 2F                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    2ED0 : BA                             phi   R10
(1) 1010/    2ED1 : F8 A3                          ldi   255&scratch
(1) 1011/    2ED3 : AA                             plo   R10
(1) 1012/    2ED4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    2ED6 : 5A                             str   R10
(1) 1014/    2ED7 : F8 2F                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    2ED9 : BA                             phi   R10
(1) 1016/    2EDA : F8 B2                          ldi   255&(scratch+15)
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 78 - 6/5/2013 13:45:40


(1) 1017/    2EDC : AA                             plo   R10
(1) 1018/    2EDD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    2EDF : AE                             plo   R14
(1) 1020/    2EE0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    2EE2 : AC                             plo   R12
(1) 1022/    2EE3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    2EE4 : 52                             str   r2                    ; in memory for add
(1) 1024/    2EE5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    2EE6 : F4                             add                         ; add in carry
(1) 1026/    2EE7 : 52                             str   r2                    ; place into memory
(1) 1027/    2EE8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    2EE9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    2EEA : 5A                             str   R10                    ; put it back
(1) 1030/    2EEB : FF 0A                          smi   10
(1) 1031/    2EED : CB 2E F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    2EF0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    2EF1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    2EF3 : C8                             lskp                        ; skip next instruction
(1) 1035/    2EF4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    2EF6 : AE                             plo   R14
(1) 1037/    2EF7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    2EF8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    2EF9 : 8C                             glo   R12                    ; see if done
(1) 1040/    2EFA : CA 2E E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    2EFD : F8 2F                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    2EFF : BA                             phi   R10
(1) 1043/    2F00 : F8 A3                          ldi   255&scratch
(1) 1044/    2F02 : AA                             plo   R10
(1) 1045/    2F03 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    2F04 : C2 2F 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    2F07 : 89                             glo   F9                    ; add in the carry
(1) 1048/    2F08 : F9 01                          ori   1
(1) 1049/    2F0A : A9                             plo   F9
(1) 1050/    2F0B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    2F0C : FC 01                          adi   1
(1) 1052/    2F0E : BC                             phi   R12
(1) 1053/    2F0F : C0 2E C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    2F12 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    2F13 : 52                             str   r2                    ; into memory
(1) 1056/    2F14 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    2F16 : F7                             sm
(1) 1058/    2F17 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    2F19 : BD                             phi   R13                    ; set aside
(1) 1060/    2F1A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    2F1B : A9                             plo   F9
(1) 1062/    2F1C : 88                             glo   r8
(1) 1063/    2F1D : B9                             phi   F9
(1) 1064/    2F1E : 98                             ghi   r8
(1) 1065/    2F1F : FE                             shl                         ; shift out high bit
(1) 1066/    2F20 : A8                             plo   r8
(1) 1067/    2F21 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    2F22 : F6                             shr
(1) 1069/    2F23 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    2F24 : 88                             glo   r8                    ; get mantissa
(1) 1071/    2F25 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    2F26 : A8                             plo   r8                    ; and write it
(1) 1073/    2F27 : 60                             irx                         ; point to sign
(1) 1074/    2F28 : 98                             ghi   r8                    ; high byte
(1) 1075/    2F29 : F1                             or                          ; set sign
(1) 1076/    2F2A : B8                             phi   r8                    ; done with base conversion
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 79 - 6/5/2013 13:45:40


(1) 1077/    2F2B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    2F2C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    2F2E : C2 2F 37                       lbz   atof_exp
(1) 1080/    2F31 : 0F                             ldn   R15
(1) 1081/    2F32 : FF 45                          smi   'E'
(1) 1082/    2F34 : CA 2F 95                       lbnz  atof_end
(1) 1083/    2F37 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    2F38 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    2F39 : FF 2D                          smi   '-'
(1) 1086/    2F3B : C2 2F 48                       lbz   atof_n
(1) 1087/    2F3E : 0F                             ldn   R15
(1) 1088/    2F3F : FF 2B                          smi   '+'
(1) 1089/    2F41 : C2 2F 45                       lbz   atof_p
(1) 1090/    2F44 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    2F45 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    2F47 : C8                             lskp
(1) 1093/    2F48 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    2F4A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    2F4B : 1F                             inc   R15                    ; move past sign
(1) 1096/    2F4C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    2F4E : AC                             plo   R12
(1) 1098/    2F4F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    2F50 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    2F53 : CB 2F 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    2F56 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    2F57 : 52                             str   r2
(1) 1103/    2F58 : F6                             shr                         ; multiply by 2
(1) 1104/    2F59 : F6                             shr                         ; by 4
(1) 1105/    2F5A : F4                             add                         ; by 5
(1) 1106/    2F5B : F6                             shr                         ; by 10
(1) 1107/    2F5C : 52                             str   r2                    ; put here for add
(1) 1108/    2F5D : 4F                             lda   R15                    ; recover number
(1) 1109/    2F5E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    2F60 : F4                             add                         ; add with total
(1) 1111/    2F61 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    2F62 : C0 2F 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    2F65 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    2F66 : C2 2F 95                       lbz   atof_end              ; jump if so
(1) 1115/    2F69 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    2F6A : 8C                             glo   R12                    ; save count
(1) 1117/    2F6B : 73                             stxd
(1) 1118/    2F6C : 9C                             ghi   R12                    ; save sign
(1) 1119/    2F6D : 73                             stxd
(1) 1120/    2F6E : 8F                             glo   R15
(1) 1121/    2F6F : 73                             stxd
(1) 1122/    2F70 : 9F                             ghi   R15
(1) 1123/    2F71 : 73                             stxd
(1) 1124/    2F72 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    2F74 : BA                             phi   R10
(1) 1126/    2F75 : F8 20                          ldi   020h
(1) 1127/    2F77 : AA                             plo   R10
(1) 1128/    2F78 : F8 00                          ldi   0
(1) 1129/    2F7A : BB                             phi   FB
(1) 1130/    2F7B : AB                             plo   FB
(1) 1131/    2F7C : 9C                             ghi   R12
(1) 1132/    2F7D : C2 2F 86                       lbz   atof_div              ; jump if negative
(1) 1133/    2F80 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    2F83 : C0 2F 89                       lbr   atof_go5              ; clean up call
(1) 1135/    2F86 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    2F89 : 60                  atof_go5:  irx                         ; recover variables
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(LCC1802fp.inc) - page 80 - 6/5/2013 13:45:40


(1) 1137/    2F8A : 72                             ldxa
(1) 1138/    2F8B : BF                             phi   R15
(1) 1139/    2F8C : 72                             ldxa
(1) 1140/    2F8D : AF                             plo   R15
(1) 1141/    2F8E : 72                             ldxa
(1) 1142/    2F8F : BC                             phi   R12
(1) 1143/    2F90 : F0                             ldx
(1) 1144/    2F91 : AC                             plo   R12
(1) 1145/    2F92 : C0 2F 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    2F95 :                     atof_end:
(1) 1147/    2F95 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    2F96 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    2F9A : (MACRO)             	   popr R12	;wjr
(1) 1150/    2F9E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    2FA2 : (MACRO)             	   Cretn
(1) 1152/    2FA3 : 00 00               scratch:   db	00,00
    2837/    2FA5 :                     	include IO1802.inc
(1)    1/    2FA5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    2FA5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    2FA5 :                     	align 64
(1)    4/    2FC0 :                     _putc:
(1)    5/    2FC0 :                     _out5:	
(1)    6/    2FC0 : 8C                  	glo	regArg1
(1)    7/    2FC1 : 22                  	dec	sp
(1)    8/    2FC2 : 52                  	str	sp
(1)    9/    2FC3 : 65                  	out	5
(1)   10/    2FC4 : (MACRO)             	Cretn
(1)   11/    2FC5 :                     _inp:		;raw port input
(1)   12/    2FC5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    2FC5 : 22                  	dec	sp	;work backwards
(1)   14/    2FC6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    2FC8 : 73                  	stxd		
(1)   16/    2FC9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    2FCA : FA 07               	ani	0x07	;clean it
(1)   18/    2FCC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    2FCE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    2FD0 : 73                  	stxd		;store it for execution
(1)   21/    2FD1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    2FD5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    2FD6 : D8                  	sep	rt1	;execute it
(1)   24/    2FD7 :                     ;we will come back to here with the input byte in D
(1)   25/    2FD7 : 12                  	inc	sp	;step over the work area
(1)   26/    2FD8 : AF                  	plo	retVal	;save it to return
(1)   27/    2FD9 : F8 00               	ldi	0
(1)   28/    2FDB : BF                  	phi	retval	;clear top byte
(1)   29/    2FDC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    2FDD : 12                  	inc	sp	;and the D3
(1)   31/    2FDE : (MACRO)             	Cretn		;and we're done
(1)   32/    2FDF :                     	
(1)   33/    2FDF :                     _out:		;raw port output
(1)   34/    2FDF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    2FDF :                     		;this could be bolder:
(1)   36/    2FDF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/    2FDF :                     		;then SEP sp
(1)   38/    2FDF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    2FDF :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    2FDF : 22                  	dec	sp	;work backwards
(1)   41/    2FE0 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    2FE2 : 73                  	stxd		
(1)   43/    2FE3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm(IO1802.inc) - page 81 - 6/5/2013 13:45:40


(1)   44/    2FE7 : 8C                  	glo	regarg1	;get the port number
(1)   45/    2FE8 : FA 07               	ani	0x07	;clean it
(1)   46/    2FEA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    2FEC : 73                  	stxd		;store it for execution
(1)   48/    2FED : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    2FEE : 52                  	str	sp	;store it where sp points
(1)   50/    2FEF : D8                  	sep	rt1	;execute it
(1)   51/    2FF0 :                     ;we will come back to here with sp stepped up by one
(1)   52/    2FF0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    2FF1 : 12                  	inc	sp	;and the D3
(1)   54/    2FF2 : (MACRO)             	Cretn		;and we're done
(1)   55/    2FF3 :                     	
(1)   56/    2FF3 :                     	
    2838/    2FF3 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 82 - 6/5/2013 13:45:40


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2B07 C |  ADD_A2NZ :                    2B18 C |
 ADD_FNL :                     2BBF C |  ADD_LP1 :                     2B62 C |
 ADD_LP1DN :                   2B77 C |  ADD_NM :                      2B86 C |
 ADD_NO :                      2BA8 C |  ADD_NS :                      2B50 C |
 ADD_NX :                      2BEB C |  ADD_NZ :                      2BDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    2F86 C |
 ATOF_DN3 :                    2EA8 C |  ATOF_DN4 :                    2F12 C |
 ATOF_DN5 :                    2F65 C |  ATOF_END :                    2F95 C |
 ATOF_EXP :                    2F37 C |  ATOF_GO1 :                    2E30 C |
 ATOF_GO5 :                    2F89 C |  ATOF_LP1 :                    2E36 C |
 ATOF_LP2 :                    2E8C C |  ATOF_LP3 :                    2EC5 C |
 ATOF_LP4 :                    2EE3 C |  ATOF_LP5 :                    2F4F C |
 ATOF_LPX :                    2E77 C |  ATOF_N :                      2F48 C |
 ATOF_NC4 :                    2F0B C |  ATOF_NDP :                    2E6E C |
 ATOF_NM :                     2E26 C |  ATOF_NO1 :                    2E67 C |
 ATOF_NO4 :                    2EF4 C |  ATOF_NZ :                     2EC2 C |
 ATOF_P :                      2F45 C | *BIGENDIAN :                      0 - |
 BITLOOP307 :                  27B8 C | *BRANCHEXT :                      0 - |
 BVTABLE143 :                  115F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB305 :                2696 C |  CKNEXT307 :                   2807 C |
 CKTOP307 :                    27A3 C |  CLKPORT :                        2 - |
 CLRLP307 :                    2794 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       2A00 C |  CVIF4 :                       2900 C |
*DATE :                    6/5/2013 - |  DCKLP307 :                    27BB C |
 DIVLOOP16_16302 :             2552 C | *DIVSETBIT16_16302 :           2584 C |
 DIVSKIP16_16302 :             2581 C |  DIVSKIPCLEAR16_16302 :        2588 C |
 DIVSKIPFINALADD16_16302 :     259A C |  DIVSUB16_16302 :              2573 C |
 DIV_A1NZ :                    2C09 C |  DIV_A2NZ :                    2C27 C |
 DIV_GO :                      2C8E C |  DIV_GO1 :                     2C7B C |
 DIV_LP :                      2C68 C |  DIV_NOPE :                    2CC9 C |
 DIV_Z :                       2CDB C |  DNOADD307 :                   27C3 C |
 DONE303 :                     25D3 C |  DONE306 :                     2774 C |
 DONE307 :                     2811 C |  DONE313 :                     296F C |
 DONE314 :                     2A61 C |  DSHLP307 :                    27D7 C |
 ENDLP304 :                    2661 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       2A6E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      2AEE C |  FP_ADD_12 :                   2A8C C |
 FP_ATOF :                     2E12 C |  FP_DIV :                      2BF8 C |
 FP_GETEXP :                   2ADC C |  FP_GETSGN :                   2AE7 C |
 FP_MUL :                      2CEB C |  FP_SC_CLN :                   2AC0 C |
 FP_SC_UP :                    2AB0 C |  FP_SHL_1 :                    2A7F C |
 FP_SHR_1 :                    2A72 C |  FP_SHR_FD :                   2AA3 C |
 FP_SUB :                      2BF1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     2A62 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            8A C |  L10 :                          10D C |
 L100 :                        2255 C |  L101 :                         EDC C |
 L102 :                         F14 C |  L103 :                        2244 C |
 L104 :                         F0B C |  L105 :                         F14 C |
 L106 :                        2234 C |  L107 :                        221D C |
*L108 :                         F67 C |  L109 :                         F67 C |
 L11 :                          111 C |  L110 :                         F67 C |
 L111 :                         F4C C |  L112 :                        220E C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 83 - 6/5/2013 13:45:40


 L113 :                         F5B C |  L114 :                        2202 C |
*L115 :                         FAF C |  L116 :                        21FA C |
 L117 :                         FAF C |  L119 :                         FAF C |
*L121 :                        1089 C |  L122 :                        1089 C |
 L123 :                        1089 C |  L124 :                        105F C |
 L125 :                        21F6 C |  L126 :                        106E C |
 L127 :                        21F2 C |  L128 :                        107D C |
 L129 :                        21EE C | *L130 :                        1007 C |
 L131 :                        1051 C | *L133 :                        10CA C |
 L134 :                        21D4 C |  L135 :                        21C8 C |
 L136 :                        10BB C |  L137 :                        10C7 C |
*L139 :                        1104 C |  L140 :                        10EE C |
*L141 :                        10F1 C |  L143 :                        10F2 C |
*L144 :                        1170 C |  L146 :                        1216 C |
 L147 :                        118A C | *L148 :                        1207 C |
 L150 :                        120A C |  L151 :                        11FA C |
 L154 :                        11ED C |  L155 :                        11F3 C |
 L156 :                        1207 C | *L158 :                        1247 C |
 L159 :                        1231 C | *L160 :                        1231 C |
 L162 :                        1233 C | *L163 :                        1262 C |
 L164 :                        1256 C |  L165 :                        1258 C |
*L167 :                        1298 C |  L168 :                        1277 C |
 L169 :                        1292 C | *L171 :                        157B C |
 L172 :                        13AE C |  L173 :                        13BE C |
 L174 :                        21C4 C |  L175 :                        21C0 C |
 L176 :                        13BE C |  L178 :                        1402 C |
 L180 :                        156F C | *L182 :                        1719 C |
 L183 :                        1654 C |  L184 :                        1664 C |
 L185 :                        166D C |  L186 :                        16F1 C |
 L188 :                        1674 C | *L189 :                        1674 C |
 L191 :                        1681 C |  L192 :                        16E0 C |
 L195 :                        16AA C | *L196 :                        17F6 C |
 L197 :                        17B0 C | *L199 :                        1844 C |
*L200 :                        18A4 C | *L201 :                        1917 C |
*L202 :                        19AA C |  L203 :                        1985 C |
 L204 :                        19AA C | *L205 :                        1A28 C |
*L206 :                        1D86 C |  L207 :                        1A73 C |
 L208 :                        1D74 C |  L210 :                        1AAF C |
 L211 :                        1D74 C |  L212 :                        1D63 C |
 L213 :                        1D74 C |  L215 :                        1B74 C |
 L216 :                        1B8D C |  L217 :                        1BAA C |
 L218 :                        1BC8 C |  L219 :                        1C07 C |
 L220 :                        1D13 C |  L222 :                        1C65 C |
 L224 :                        1C98 C |  L225 :                        1D0E C |
 L226 :                        1D13 C |  L227 :                        1D63 C |
 L229 :                        1D47 C |  L231 :                        1B2A C |
 L232 :                        1B39 C |  L233 :                        1B16 C |
*L235 :                        1B65 C | *L236 :                        1DC6 C |
 L237 :                        21B7 C |  L238 :                        1DC3 C |
*L239 :                        1DC3 C | *L241 :                        1E47 C |
 L242 :                        1DFA C |  L243 :                        1E2A C |
 L245 :                        1E43 C | *L246 :                        1EA1 C |
 L247 :                        1E7E C |  L248 :                        1E8C C |
*L250 :                        1EEB C |  L251 :                        1ECB C |
 L252 :                        1ED6 C | *L254 :                        1FB6 C |
 L26 :                         246A C | *L27 :                          4AB C |
*L28 :                          4D4 C |  L29 :                          4C3 C |
*L30 :                          4C3 C | *L32 :                          4FD C |
 L33 :                          4EC C | *L34 :                          4EC C |
 L36 :                          63F C |  L37 :                          535 C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 84 - 6/5/2013 13:45:40


 L39 :                          544 C | *L4 :                            FC C |
 L41 :                          5C4 C |  L42 :                          5E4 C |
*L44 :                          6DD C |  L45 :                          9F0 C |
 L46 :                          719 C |  L48 :                          795 C |
 L49 :                          837 C |  L51 :                          837 C |
 L53 :                          8C4 C |  L54 :                          900 C |
 L56 :                          9D9 C | *L57 :                          9D9 C |
*L59 :                          B2A C |  L60 :                         2431 C |
*L61 :                          BFD C |  L62 :                          B33 C |
*L63 :                          C80 C |  L64 :                         238E C |
 L65 :                         22D2 C |  L66 :                          D03 C |
 L67 :                          CBB C | *L68 :                          CEA C |
*L7 :                           44C C |  L70 :                          CEB C |
 L71 :                          CEA C | *L73 :                          F14 C |
 L74 :                         22C3 C |  L75 :                          D71 C |
 L77 :                         22BC C |  L78 :                          DA0 C |
 L8 :                           103 C |  L80 :                         22B6 C |
 L81 :                          DD1 C |  L83 :                         22A9 C |
 L84 :                         229D C |  L85 :                          E66 C |
 L86 :                          EAF C |  L87 :                         228E C |
 L88 :                          E32 C |  L9 :                           109 C |
 L90 :                         2289 C |  L93 :                         2284 C |
 L94 :                          E84 C |  L95 :                          EAF C |
 L96 :                         2275 C |  L97 :                          EA6 C |
 L98 :                          EAF C |  L99 :                         2264 C |
 LCC1802INIT :                 24A7 C | *LISTON :                         1 - |
 LOOP256 :                     1F0A C |  LOOP257 :                     1F4A C |
 LOOP258 :                     1F8E C |  LOOP259 :                     1FA7 C |
 LOOP304 :                     260F C |  LSH314 :                      2A2B C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP305 :                    2677 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP300 :                     251E C |
 MULTLOOP16_16301 :            252B C |  MULTSKIP16_16301 :            253D C |
 MUL_DN :                      2DBA C |  MUL_GO1 :                     2D42 C |
 MUL_LP1 :                     2D32 C |  MUL_LP2 :                     2DCD C |
 MUL_LP2A :                    2DE0 C |  MUL_LP3 :                     2DE9 C |
 MUL_LP3A :                    2DFC C |  MUL_LP4 :                     2E0D C |
 MUL_NO :                      2D8F C |  MUL_NXT1 :                    2DE4 C |
*NESTMAX :                      100 - |  NORESTORE304 :                265D C |
 NXT313 :                      2930 C |  OUTIT143 :                    115C C |
*PACKING :                        0 - | *PADDING :                        1 - |
*PASSES :                      2A6B C |  POS1303 :                     25B3 C |
 POS1306 :                     2726 C |  POS2303 :                     25C3 C |
 POS2306 :                     274D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - |  R14 :                            E - |
 R15 :                            F - |  R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - | *RL0 :                            1 - |
 RL10 :                           B - |  RL12 :                           D - |
 RL6 :                            7 - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 85 - 6/5/2013 13:45:40


 SCRATCH :                     2FA3 C |  SETBITOFF143 :                1157 C |
 SETSGN313 :                   2968 C |  SGNPOS313 :                   2939 C |
 SHDN313 :                     295F C |  SHIFT305 :                    26AE C |
 SHL313 :                      294B C |  SHR314 :                      2A19 C |
 SIGN314 :                     2A3B C |  SP :                             2 - |
*SPIMOSI :                        7 - |  SPISCK :                         5 - |
*TIME :                    13:45:40 - | *TRUE :                           1 - |
 UPNXT307 :                    27F0 C | *VERSION :                     142F - |
 ZEROIN256 :                   1F1B C |  ZEROIN257 :                   1F5B C |
 ZEROIN259 :                   1FAD C |  _00000292 :                   24C1 C |
 _ANALYZEINPUT :                D1A C |  _BUF :                        1FB7 C |
 _CALL :                       2501 C |  _CLOSE0 :                      4D9 C |
 _DELAY :                      10D3 C |  _DIE292 :                     24C4 C |
*_DIGITALREAD :                1168 C |  _DIGITALWRITE :               1140 C |
 _DISCONNECT0 :                 4B0 C |  _DIVI2 :                      25A4 C |
 _DIVI4 :                      2700 C |  _DIVU2 :                      2549 C |
 _DIVU4 :                      2600 C |  _DUBDABX :                    2775 C |
*_EXIT :                       1D9D C |  _FTOA :                       12E4 C |
 _HANDLESESSION :               F6C C | *_INP :                        2FC5 C |
 _ITOA :                       159C C |  _LEDMODE :                       4 C |
 _LTOA :                       1730 C |  _MAIN :                       1090 C |
*_MEMCMP :                     1DCB C | *_MEMCPY :                     1E58 C |
*_MEMSET :                     1EAE C | *_MODI2 :                      24D5 C |
*_MODI4 :                      281E C | *_MODU2 :                      24CD C |
*_MODU4 :                      2812 C |  _MULT_NUMS :                  12C4 C |
*_MULU2 :                      2523 C | *_MULU4 :                      2666 C |
*_OLDUINOINCLUDER :            1111 C |  _ONEMS :                      251C C |
 _OUT :                        2FDF C | *_OUT4 :                       24DD C |
*_OUT5 :                       2FC0 C |  _PIN4 :                          3 C |
 _PRINTF :                     1A2D C |  _PRINTFLT :                   18AD C |
 _PRINTINT :                   180B C |  _PRINTLINT :                  184D C |
 _PRINTSTR :                   1267 C |  _PUTC :                       2FC0 C |
 _PUTX :                       19AF C |  _PUTXN :                      1920 C |
 _RECV0 :                       502 C |  _RECV_SIZE :                   656 C |
 _REPORT :                      A0B C |  _REQTYPE :                       6 C |
 _RETURN :                     2512 C |  _ROUND_NUMS :                 12A4 C |
 _SEND0 :                       6E4 C |  _SENDACK :                     BA1 C |
 _SENDRESPONSE :                F1B C |  _SENDSTUFF :                   C06 C |
 _SERVER_LOOP :                 FB8 C | *_SETQOFF :                    24CB C |
*_SETQON :                     24C9 C | *_SHIFTINF :                   1FA0 C |
*_SHIFTOUTF :                  1F80 C |  _SOCKET0_INIT :                455 C |
*_SPINCLUDER :                 1EF4 C |  _SPI_READ :                     8F C |
 _SPI_WRITE :                     8 C |  _STRCPY :                     121F C |
 _STRINDEX :                    C87 C |  _STRLEN :                     124A C |
 _STRNCMP :                    1171 C |  _W5100_INIT :                  115 C |
*_XFERSPIF :                   1F00 C |  _XFERSPIF2 :                  1F40 C |
 __FORW12 :                    2FDC C | *__FORW13 :                    2FF0 C |
 __FORW4 :                     116F C |

    449 symbols
    102 unused symbols

 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 86 - 6/5/2013 13:45:40


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     83 macros

 AS V1.42 Beta [Bld 87] - source file olduinoserver.asm - page 87 - 6/5/2013 13:45:40


  codepages:
  ----------

STANDARD (0 changed characters)


0.13 seconds assembly time

   5569 lines source file
  14159 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
