 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 1 - 4/11/2017 17:16:52


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Tue Apr 11 17:16:52 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 03 33            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     ;$$function start$$ _boydinc
      15/       4 :                     _boydinc:		;framesize=2
      16/       4 :                     ;void boydinc(){
      17/       4 :                     ;	asm(" include \"boydscan.inc\"\n");
      18/       4 :                      include "boydscan.inc"
(1)    1/       4 :                     _boydscan:			;SCAN THE KEYBOARD
(1)    2/       4 : EE                  		sex	r14 	;set up "don't care" X register
(1)    3/       5 : 68 CF 00 00         		rldi	r15,0	; r15 is return value
(1)    4/       9 : 61                  .scan:		OUT	1                     ;109: 61 	
(1)    5/       A : 34 50               		B1	.KEY_12                     ;10A: 34 50 	
(1)    6/       C : 35 60               		B2	.KEY_8                      ;10C: 35 60 	
(1)    7/       E : 36 70               		B3	.KEY_4                      ;10E: 36 70 	
(1)    8/      10 : 37 80               		B4	.KEY_0                      ;110: 37 80 	
(1)    9/      12 : 62                  		OUT	2                     ;112: 62 	
(1)   10/      13 : 34 54               		B1	.KEY_13                     ;113: 34 54 	
(1)   11/      15 : 35 64               		B2	.KEY_9                      ;115: 35 64 	
(1)   12/      17 : 36 74               		B3	.KEY_5                      ;117: 36 74 	
(1)   13/      19 : 37 84               		B4	.KEY_1                      ;119: 37 84 	
(1)   14/      1B : 63                  		OUT	3                     ;11B: 63 	
(1)   15/      1C : 34 58               		B1	.KEY_14                     ;11C: 34 58 	
(1)   16/      1E : 35 68               		B2	.KEY_10                     ;11E: 35 68 	
(1)   17/      20 : 36 78               		B3	.KEY_6                      ;120: 36 78 	
(1)   18/      22 : 37 88               		B4	.KEY_2                      ;122: 37 88 	
(1)   19/      24 : 64                  		OUT	4                     ;124: 64 	
(1)   20/      25 : 34 5C               		B1	.KEY_15                     ;125: 34 5C 	
(1)   21/      27 : 35 6C               		B2	.KEY_11                     ;127: 35 6C 	
(1)   22/      29 : 36 7C               		B3	.KEY_7                      ;129: 36 7C 	
(1)   23/      2B : 37 8C               		B4	.KEY_3                      ;12B: 37 8C 	
(1)   24/      2D : 65                  		OUT	5                     ;12D: 65 	
(1)   25/      2E : 34 90               		B1	.KEY_DIV_WHOLE              ;12E: 34 99 	
(1)   26/      30 : 35 90               		B2	.KEY_MUL                    ;130: 35 96 	
(1)   27/      32 : 36 90               		B3	.KEY_SUB                    ;132: 36 93 	
(1)   28/      34 : 37 90               		B4	.KEY_ADD                    ;134: 37 90 	
(1)   29/      36 : 66                  		OUT	6                     ;136: 66 	
(1)   30/      37 : 34 90               		B1	.KEY_REM                    ;137: 34 A5 	
(1)   31/      39 : 35 90               		B2	.KEY_MEM_STORE              ;139: 35 A2 	
(1)   32/      3B : 36 90               		B3	.KEY_MEM_RECALL             ;13B: 36 9F 	
(1)   33/      3D : 37 94               		B4	.KEY_EQU                    ;13D: 37 9C 	
(1)   34/      3F : 7B                  		SEQ                                ;13F: 7B 	
(1)   35/      40 : 34 90               		B1	.KEY_DIV_FIS                ;140: 34 B1 	
(1)   36/      42 : 35 90               		B2	.KEY_CLEAR                  ;142: 35 AE 	
(1)   37/      44 : 36 90               		B3	.KEY_CLR_ENTRY              ;144: 36 AB 	
(1)   38/      46 : 37 90               		B4	.KEY_INV_SIGN               ;146: 37 A8 	
(1)   39/      48 : 7A                  		REQ                                ;148: 7A 	
(1)   40/      49 :                     ;here we have no keys pressed, if r15.0 has a value, return it -1
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(boydscan.inc) - page 2 - 4/11/2017 17:16:52


(1)   41/      49 : 8F                  		glo	r15
(1)   42/      4A : 32 09               		bz	.scan
(1)   43/      4C : 2F                  		dec	r15
(1)   44/      4D : E2                  		sex	r2	;restore the X register before returning
(1)   45/      4E : (MACRO)             		cretn
(1)   46/      50 :                     
(1)   47/      50 : F8 0D               .KEY_12		LDI	13                         ;150: F8  C 	
(1)   48/      52 : 30 96               		BR	.KEY_SAVE                   ;152: 30 B4 	
(1)   49/      54 : F8 0E               .KEY_13		LDI	14                         ;154: F8  D 	
(1)   50/      56 : 30 96               		BR	.KEY_SAVE                   ;156: 30 B4 	
(1)   51/      58 : F8 0F               .KEY_14		LDI	15                         ;158: F8  E 	
(1)   52/      5A : 30 96               		BR	.KEY_SAVE                   ;15A: 30 B4 	
(1)   53/      5C : F8 10               .KEY_15		LDI	16                         ;15C: F8  F 	
(1)   54/      5E : 30 96               		BR	.KEY_SAVE                   ;15E: 30 B4 	
(1)   55/      60 : F8 09               .KEY_8		LDI	 9                         ;160: F8  8 	
(1)   56/      62 : 30 96               		BR	.KEY_SAVE                   ;162: 30 B4 	
(1)   57/      64 : F8 0A               .KEY_9		LDI	 10                         ;164: F8  9 	
(1)   58/      66 : 30 96               		BR	.KEY_SAVE                   ;166: 30 B4 	
(1)   59/      68 : F8 0B               .KEY_10		LDI	11                         ;168: F8  A 	
(1)   60/      6A : 30 96               		BR	.KEY_SAVE                   ;16A: 30 B4 	
(1)   61/      6C : F8 0C               .KEY_11		LDI	12                         ;16C: F8  B 	
(1)   62/      6E : 30 96               		BR	.KEY_SAVE                   ;16E: 30 B4 	
(1)   63/      70 : F8 05               .KEY_4		LDI	 5                         ;170: F8  4 	
(1)   64/      72 : 30 96               		BR	.KEY_SAVE                   ;172: 30 B4 	
(1)   65/      74 : F8 06               .KEY_5		LDI	 6                         ;174: F8  5 	
(1)   66/      76 : 30 96               		BR	.KEY_SAVE                   ;176: 30 B4 	
(1)   67/      78 : F8 07               .KEY_6		LDI	 7                         ;178: F8  6 	
(1)   68/      7A : 30 96               		BR	.KEY_SAVE                   ;17A: 30 B4 	
(1)   69/      7C : F8 08               .KEY_7		LDI	 8                         ;17C: F8  7 	
(1)   70/      7E : 30 96               		BR	.KEY_SAVE                   ;17E: 30 B4 	
(1)   71/      80 : F8 01               .KEY_0		LDI	 1                         ;180: F8  0 	
(1)   72/      82 : 30 96               		BR	.KEY_SAVE                   ;182: 30 B4 	
(1)   73/      84 : F8 02               .KEY_1		LDI	 2                         ;184: F8  1 	
(1)   74/      86 : 30 96               		BR	.KEY_SAVE                   ;186: 30 B4 	
(1)   75/      88 : F8 03               .KEY_2		LDI	 3                         ;188: F8  2 	
(1)   76/      8A : 30 96               		BR	.KEY_SAVE                   ;18A: 30 B4 	
(1)   77/      8C : F8 04               .KEY_3		LDI	 4                         ;18C: F8  3 	
(1)   78/      8E : 30 96               		BR	.KEY_SAVE                   ;18E: 30 B4 	
(1)   79/      90 :                     		
(1)   80/      90 :                     .KEY_ADD	
(1)   81/      90 :                     .KEY_SUB:	
(1)   82/      90 :                     .KEY_MUL:	
(1)   83/      90 :                     .KEY_DIV_WHOLE:
(1)   84/      90 :                     .KEY_MEM_RECALL:
(1)   85/      90 :                     .KEY_MEM_STORE:
(1)   86/      90 :                     .KEY_REM:	
(1)   87/      90 :                     .KEY_INV_SIGN:
(1)   88/      90 :                     .KEY_CLR_ENTRY:
(1)   89/      90 :                     .KEY_CLEAR:
(1)   90/      90 : F8 11               .KEY_DIV_FIS:	ldi 17
(1)   91/      92 : 30 96               		br .KEY_SAVE
(1)   92/      94 : F8 64               .KEY_EQU:	ldi 100	
(1)   93/      96 :                     
(1)   94/      96 : AF                  .KEY_SAVE:	plo 15
(1)   95/      97 : 30 09               		br .scan
      19/      99 :                     ;}
      20/      99 :                     L1:
      21/      99 : (MACRO)             	Cretn
      22/      9B :                     
      23/      9B :                     ;$$function end$$ _boydinc
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 3 - 4/11/2017 17:16:52


      24/      9B :                     ;$$function start$$ _disp1
      25/      9B :                     _disp1:		;framesize=2
      26/      9B :                     ;void disp1(unsigned char d){//display a byte as two hex digits
      27/      9B :                     ;	asm(" glo 12\n ani 0x0f\n" //prep bottom digit
      28/      9B : 8C                   glo 12
      29/      9C : FA 0F                ani 0x0f
      30/      9E : 22                   dec 2
      31/      9F : 52                   str 2
      32/      A0 : 67                   out 7
      33/      A1 : 8C                   glo 12
      34/      A2 : F6                   shr
      35/      A3 : F6                   shr
      36/      A4 : F6                   shr
      37/      A5 : F6                   shr
      38/      A6 : 22                   dec 2
      39/      A7 : 52                   str 2
      40/      A8 : 67                   out 7
      41/      A9 :                     ;}
      42/      A9 :                     L3:
      43/      A9 : (MACRO)             	Cretn
      44/      AB :                     
      45/      AB :                     ;$$function end$$ _disp1
      46/      AB :                     ;$$function start$$ _dispmemloc
      47/      AB :                     _dispmemloc:		;framesize=14
      48/      AB : (MACRO)             	pushr R4
      49/      AD : (MACRO)             	pushr R5
      50/      AF : (MACRO)             	pushr R6
      51/      B1 : (MACRO)             	pushr R7
      52/      B3 : (MACRO)             	reserve 4; save room for outgoing arguments
      53/      B7 : (MACRO)             	st2 R12,'O',sp,(14+1); flag1 
      54/      C4 :                     ;void dispmemloc(unsigned int loc){
      55/      C4 :                     ;	register unsigned char* m=0;
      56/      C4 : (MACRO)             	ldaD R7,0; reg:acon
      57/      C8 :                     ;	initleds();
      58/      C8 :                     ;	disp1(m[loc+1]);
      59/      C8 : 7A                   req
      60/      C9 : 7B                   seq
      61/      CA : 22                   dec 2
      62/      CB : 67                   out 7
      63/      CC : 7A                   req
      64/      CD : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      65/      D9 : (MACRO)             	incm R11,1
      66/      DA : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
      67/      E4 : (MACRO)             	ldn1 R12,R11	;opt14*
      68/      E6 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
      69/      E9 : (MACRO)             	Ccall _disp1
      70/      ED :                     ;	disp1(m[loc]);
      71/      ED : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      72/      F9 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
      73/     103 : (MACRO)             	ldn1 R12,R11	;opt14*
      74/     105 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
      75/     108 : (MACRO)             	Ccall _disp1
      76/     10C :                     ;	disp1(loc&0x0f);
      77/     10C : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      78/     118 : (MACRO)             	alu2I R11,R11,15,ani,ani ;removed copy;BANDU2(reg,con)  
      79/     120 : (MACRO)             	cpy1 R12,R11
      80/     122 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      81/     125 : (MACRO)             	Ccall _disp1
      82/     129 :                     ;	disp1(loc>>8);
      83/     129 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 4 - 4/11/2017 17:16:52


      84/     135 : 9B                  	ghi	R11	;opt2
      85/     136 : AB                  	plo	R11
      86/     137 : F8 00               	ldi	0
      87/     139 : BB                  	phi	R11	
      88/     13A : (MACRO)             	cpy1 R12,R11
      89/     13C : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      90/     13F : (MACRO)             	Ccall _disp1
      91/     143 :                     ;}
      92/     143 :                     L5:
      93/     143 : (MACRO)             	release 4; release room for outgoing arguments
      94/     147 : (MACRO)             	popf R7	;opt11.3
      95/     14A : (MACRO)             	popm R6	;opt11.4
      96/     14C : (MACRO)             	popm R5	;opt11.4
      97/     14E : (MACRO)             	popl R4	;opt11.4
      98/     152 : (MACRO)             	Cretn
      99/     154 :                     
     100/     154 :                     ;$$function end$$ _dispmemloc
     101/     154 :                     ;$$function start$$ _dispval
     102/     154 :                     _dispval:		;framesize=8
     103/     154 : (MACRO)             	pushr R7
     104/     156 : (MACRO)             	reserve 4; save room for outgoing arguments
     105/     15A : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     106/     167 : (MACRO)             	ldA2 R11,'O',sp,(8+1); reg:addr
     107/     16F : (MACRO)             	ld2 R10,'O',sp,(8+1) ;reg:INDIRI2(addr)
     108/     17B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     109/     17D :                     ;void dispval(unsigned char v){
     110/     17D :                     ;	initleds();
     111/     17D :                     ;	disp1(v);
     112/     17D : 7A                   req
     113/     17E : 7B                   seq
     114/     17F : 22                   dec 2
     115/     180 : 67                   out 7
     116/     181 : 7A                   req
     117/     182 : (MACRO)             	ld1 R12,'O',sp,(8+1)
     118/     18C : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     119/     18F : (MACRO)             	Ccall _disp1
     120/     193 :                     ;	for (i=6;i!=0;i--) out(7,0);
     121/     193 : (MACRO)             	ldaD R7,6; reg:acon
     122/     197 : C0 01 A7            	lbr L12
     123/     19A :                     L9:
     124/     19A : (MACRO)             	ldaD R12,7; reg:acon
     125/     19E : (MACRO)             	ld2z R13
     126/     1A2 : (MACRO)             	Ccall _out; CALLI2(ar)
     127/     1A6 :                     L10:
     128/     1A6 : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     129/     1A7 :                     L12:
     130/     1A7 : (MACRO)             	jnzU2 R7,L9; NE 0 
     131/     1AF :                     ;}
     132/     1AF :                     L7:
     133/     1AF : (MACRO)             	release 4; release room for outgoing arguments
     134/     1B3 : (MACRO)             	popr R7
     135/     1B8 : (MACRO)             	Cretn
     136/     1BA :                     
     137/     1BA :                     ;$$function end$$ _dispval
     138/     1BA :                     ;$$function start$$ _disp42
     139/     1BA :                     _disp42:		;framesize=6
     140/     1BA : (MACRO)             	reserve 4
     141/     1BE :                     ;void disp42(){
     142/     1BE :                     ;	initleds();
     143/     1BE :                     ;	out(7,2);
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 5 - 4/11/2017 17:16:52


     144/     1BE : 7A                   req
     145/     1BF : 7B                   seq
     146/     1C0 : 22                   dec 2
     147/     1C1 : 67                   out 7
     148/     1C2 : 7A                   req
     149/     1C3 : (MACRO)             	ldaD R12,7; reg:acon
     150/     1C7 : (MACRO)             	ldaD R13,2; reg:acon
     151/     1CB : (MACRO)             	Ccall _out; CALLI2(ar)
     152/     1CF :                     ;	out(7,4);
     153/     1CF : (MACRO)             	ldaD R12,7; reg:acon
     154/     1D3 : (MACRO)             	ldaD R13,4; reg:acon
     155/     1D7 : (MACRO)             	Ccall _out; CALLI2(ar)
     156/     1DB :                     ;	out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);
     157/     1DB : (MACRO)             	ldaD R12,7; reg:acon
     158/     1DF : (MACRO)             	ldaD R13,15; reg:acon
     159/     1E3 : (MACRO)             	Ccall _out; CALLI2(ar)
     160/     1E7 : (MACRO)             	ldaD R12,7; reg:acon
     161/     1EB : (MACRO)             	ldaD R13,15; reg:acon
     162/     1EF : (MACRO)             	Ccall _out; CALLI2(ar)
     163/     1F3 : (MACRO)             	ldaD R12,7; reg:acon
     164/     1F7 : (MACRO)             	ldaD R13,15; reg:acon
     165/     1FB : (MACRO)             	Ccall _out; CALLI2(ar)
     166/     1FF : (MACRO)             	ldaD R12,7; reg:acon
     167/     203 : (MACRO)             	ldaD R13,15; reg:acon
     168/     207 : (MACRO)             	Ccall _out; CALLI2(ar)
     169/     20B : (MACRO)             	ldaD R12,7; reg:acon
     170/     20F : (MACRO)             	ldaD R13,15; reg:acon
     171/     213 : (MACRO)             	Ccall _out; CALLI2(ar)
     172/     217 : (MACRO)             	ldaD R12,7; reg:acon
     173/     21B : (MACRO)             	ldaD R13,15; reg:acon
     174/     21F : (MACRO)             	Ccall _out; CALLI2(ar)
     175/     223 :                     ;}
     176/     223 :                     L13:
     177/     223 : (MACRO)             	release 4
     178/     227 : (MACRO)             	Cretn
     179/     229 :                     
     180/     229 :                     ;$$function end$$ _disp42
     181/     229 :                     ;$$function start$$ _main
     182/     229 :                     _main: ;copt is peeping your size 12 frame with oct 23 rules
     183/     229 : (MACRO)             	pushr R5
     184/     22B : (MACRO)             	pushr R6
     185/     22D : (MACRO)             	pushr R7
     186/     22F : (MACRO)             	reserve 4; save room for outgoing arguments
     187/     233 :                     ;{
     188/     233 :                     ;	unsigned int loc=0;
     189/     233 : (MACRO)             	ld2z R6
     190/     237 :                     ;	unsigned char m='o'; //displaying o=eeprom,a=ram
     191/     237 : (MACRO)             	ldaD R5,111; reg:acon
     192/     23B :                     ;	disp42();
     193/     23B : (MACRO)             	Ccall _disp42
     194/     23F :                     ;	delay(1000);
     195/     23F : (MACRO)             	ldaD R12,1000; reg:acon
     196/     243 : (MACRO)             	Ccall _delay
     197/     247 : C0 02 91            	lbr L17
     198/     24A :                     L16:
     199/     24A :                     ;	while(1){
     200/     24A :                     ;		dispmemloc(loc);
     201/     24A : (MACRO)             	cpy2 R12,R6 ;LOADU2*(reg)
     202/     24E : (MACRO)             	Ccall _dispmemloc
     203/     252 :                     ;		k=boydscan();
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 6 - 4/11/2017 17:16:52


     204/     252 : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     205/     256 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     206/     25A : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     207/     25C :                     ;		dispval(k); delay(250);
     208/     25C : (MACRO)             	cpy1 R12,R7
     209/     25E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     210/     261 : (MACRO)             	Ccall _dispval
     211/     265 : (MACRO)             	ldaD R12,250; reg:acon
     212/     269 : (MACRO)             	Ccall _delay
     213/     26D :                     ;		if (99==k){
     214/     26D : (MACRO)             	jneU1I R7,99,L19	; DH 4
     215/     273 :                     ;			if (m=='o'){
     216/     273 : (MACRO)             	jneU1I R5,111,L21	; DH 4
     217/     279 :                     ;				loc=4096;
     218/     279 : (MACRO)             	ldaD R6,4096; reg:acon
     219/     27D :                     ;				m='a';
     220/     27D : (MACRO)             	ldaD R5,97; reg:acon
     221/     281 :                     ;			}else{
     222/     281 : C0 02 91            	lbr L20
     223/     284 :                     L21:
     224/     284 :                     ;				loc=0;
     225/     284 : (MACRO)             	ld2z R6
     226/     288 :                     ;				m='o';
     227/     288 : (MACRO)             	ldaD R5,111; reg:acon
     228/     28C :                     ;			}
     229/     28C :                     ;		}else
     230/     28C : C0 02 91            	lbr L20
     231/     28F :                     L19:
     232/     28F :                     ;			loc+=2;
     233/     28F : (MACRO)             	incm R6,2
     234/     291 :                     L20:
     235/     291 :                     ;		}
     236/     291 :                     L17:
     237/     291 :                     ;	while(1){
     238/     291 : C0 02 4A            	lbr L16
     239/     294 :                     ;}
     240/     294 :                     L15:
     241/     294 : (MACRO)             	release 4; release room for outgoing arguments
     242/     298 : (MACRO)             	popf R7	;opt11.3
     243/     29B : (MACRO)             	popm R6	;opt11.4
     244/     29D : (MACRO)             	popl R5	;opt11.4
     245/     2A1 : (MACRO)             	Cretn
     246/     2A3 :                     
     247/     2A3 :                     ;$$function end$$ _main
     248/     2A3 :                     ;$$function start$$ _delay
     249/     2A3 :                     _delay:		;framesize=10
     250/     2A3 : (MACRO)             	pushr R6
     251/     2A5 : (MACRO)             	pushr R7
     252/     2A7 : (MACRO)             	reserve 4; save room for outgoing arguments
     253/     2AB : (MACRO)             	cpy2 R7,R12; function(2054) 1
     254/     2AF :                     ;void delay(unsigned int howlong){
     255/     2AF :                     ;	for (i=1;i!=howlong;i++){
     256/     2AF : (MACRO)             	ldaD R6,1; reg:acon
     257/     2B3 : C0 02 BB            	lbr L27
     258/     2B6 :                     L24:
     259/     2B6 :                     ;		oneMs();
     260/     2B6 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
     261/     2BA :                     ;	}
     262/     2BA :                     L25:
     263/     2BA :                     ;	for (i=1;i!=howlong;i++){
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 7 - 4/11/2017 17:16:52


     264/     2BA : (MACRO)             	incm R6,1
     265/     2BB :                     L27:
     266/     2BB : (MACRO)             	jneU2 R6,R7,L24; NE
     267/     2CD :                     ;}
     268/     2CD :                     L23:
     269/     2CD : (MACRO)             	release 4; release room for outgoing arguments
     270/     2D1 : (MACRO)             	popf R7	;opt11.3
     271/     2D4 : (MACRO)             	popl R6	;opt11.3
     272/     2D8 : (MACRO)             	Cretn
     273/     2DA :                     
     274/     2DA :                     ;$$function end$$ _delay
     275/     2DA :                     ;$$function start$$ _olduinoincluder
     276/     2DA :                     _olduinoincluder:		;framesize=2
     277/     2DA :                     ;void olduinoincluder(){
     278/     2DA :                     ;	asm("\tinclude olduino.inc\n");
     279/     2DA :                     	include olduino.inc
(1)    1/     2DA :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     2DA :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     2DA :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     2DA :                     	align 64	;needed to make sure all on same page
(1)    5/     300 :                     _digitalWrite:
(1)    6/     300 : 8C                  	glo regArg1	;get the bit number
(1)    7/     301 : FC 1E               	adi $$bvtable&255	;add the table offset
(1)    8/     303 : AE                  	plo memaddr
(1)    9/     304 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     305 : BE                  	phi memaddr	
(1)   11/     306 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     307 : A8                  	plo rt1		;save it in a temp
(1)   13/     308 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     30C : EE                  	sex memaddr	;prepare to change it
(1)   15/     30D : 8D                  	glo regArg2	;get on/off switch
(1)   16/     30E : 32 15               	bz $$setbitoff
(1)   17/     310 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     310 : 88                  	glo rt1		;get the bit value back
(1)   19/     311 : F1                  	or		;apply it
(1)   20/     312 : 5E                  	str memaddr	;and save it
(1)   21/     313 : 30 1A               	br $$outit	;go fnish up
(1)   22/     315 :                     $$setbitoff:
(1)   23/     315 : 88                  	glo rt1		;get the bit pattern
(1)   24/     316 : FB FF               	xri 0xff	;reverse it
(1)   25/     318 : F2                  	and		;combine it with the existing pin value
(1)   26/     319 : 5E                  	str memaddr	;and save it
(1)   27/     31A :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     31A :                     $$outit:
(1)   29/     31A : 64                  	out 4		;X was already set to memaddr
(1)   30/     31B : E2                  	sex sp		;reset X
(1)   31/     31C : (MACRO)             	cretn
(1)   32/     31E : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     326 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     326 :                     	align 8	;protect jump boundary
(1)   35/     328 :                     _digitalRead:
(1)   36/     328 : F8 00               	ldi 0		;default is false
(1)   37/     32A : AF                  	plo R15
(1)   38/     32B : BF                  	phi R15
(1)   39/     32C : 36 2F               	b3 +		;i have to reverse the sense of the external line
(1)   40/     32E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     32F : (MACRO)             +	cretn
(1)   42/     331 :                     
     280/     331 :                     ;}
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 8 - 4/11/2017 17:16:52


     281/     331 :                     L28:
     282/     331 : (MACRO)             	Cretn
     283/     333 :                     
     284/     333 :                     ;$$function end$$ _olduinoincluder
     285/     333 :                     	include lcc1802epiloNW.inc
(1)    1/     333 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     333 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     333 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     333 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     333 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     333 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     333 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     333 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     333 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     333 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     333 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     333 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     333 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     333 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     333 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     333 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     333 :                     ;16-09-20 allow stack relocation 
(1)   18/     333 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/     333 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/     333 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/     333 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/     333 :                     ;17-04-09 don't include call/return for 1806
(1)   23/     333 : =EH                 rwork	equ	memAddr	;work register
(1)   24/     333 :                     lcc1802init:	
(1)   25/     333 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   26/     337 : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   27/     33B : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   28/     33B :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   29/     33B : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   30/     33B : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   31/     33F : [27]                  ENDIF				;wjr 16-09-20
(1)   32/     33F : E2                  	sex	SP
(1)   33/     340 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   34/     344 : D3                  	sep	RPC
(1)   35/     345 :                     $$_00000:
(1)   36/     345 : (MACRO)             	Ccall _main	;call the main routine
(1)   37/     349 : C0 03 49            $$_die:	lbr	$$_die		;loop here when main returns
(1)   38/     34C : DE AD               	db	0xde,0xad
(1)   39/     34E :                     
(1)   40/     34E :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   41/     34E :                     _setqOn:
(1)   42/     34E : 7B                  	seq
(1)   43/     34F : (MACRO)             	Cretn
(1)   44/     351 :                     _setqOff:
(1)   45/     351 : 7A                  	req
(1)   46/     352 : (MACRO)             	Cretn
(1)   47/     354 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   48/     354 :                     _modU2:	;16 bit unsigned remainder
(1)   49/     354 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   50/     354 :                         Ccall _divU2
(1)   51/     354 :                         glo regArg1
(1)   52/     354 :                         plo retVal
(1)   53/     354 :                         ghi regArg1
(1)   54/     354 :                         phi retVal
(1)   55/     354 :                         Cretn
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 9 - 4/11/2017 17:16:52


(1)   56/     354 :                         
(1)   57/     354 :                     _modI2:	;16 bit signed remainder
(1)   58/     354 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   59/     354 :                         Ccall _divI2
(1)   60/     354 :                         glo regArg1
(1)   61/     354 :                         plo retVal
(1)   62/     354 :                         ghi regArg1
(1)   63/     354 :                         phi retVal
(1)   64/     354 :                         Cretn
(1)   65/     354 : [47]                 ENDIF
(1)   66/     354 :                     _out4:	
(1)   67/     354 : 8C                  	glo	regArg1
(1)   68/     355 : 22                  	dec	sp
(1)   69/     356 : 52                  	str	sp
(1)   70/     357 : 64                  	out	4
(1)   71/     358 : (MACRO)             	Cretn
(1)   72/     35A :                     
(1)   73/     35A :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   74/     35A :                     	align 256
(1)   75/     400 : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   76/     400 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   77/     400 :                     	sep     R3 ;go to subroutine
(1)   78/     400 :                     _call	sex	SP ;make sure X=SP
(1)   79/     400 :                     	glo	retAddr ;save previous return pointer on stack
(1)   80/     400 :                     	dec	sp
(1)   81/     400 :                     	stxd
(1)   82/     400 :                     	ghi	retAddr
(1)   83/     400 :                     	str	sp	
(1)   84/     400 :                     	glo	RPC ;copy old PC to retAddr
(1)   85/     400 :                     	plo	retAddr
(1)   86/     400 :                     	ghi	RPC
(1)   87/     400 :                     	phi	retAddr
(1)   88/     400 :                     	lda	retAddr ;pick up subroutine address into RPC
(1)   89/     400 :                     	phi	RPC
(1)   90/     400 :                     	lda	retAddr
(1)   91/     400 :                     	plo	RPC
(1)   92/     400 :                     	br	_call-1
(1)   93/     400 :                     
(1)   94/     400 :                     ;Standard subroutine return 
(1)   95/     400 :                     	sep	RPC	;return to the original program
(1)   96/     400 :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)   97/     400 :                     	plo	RPC
(1)   98/     400 :                     	ghi	retAddr
(1)   99/     400 :                     	phi	RPC
(1)  100/     400 :                     	lda	SP	;pick up old return address
(1)  101/     400 :                     	phi	retAddr
(1)  102/     400 :                     	lda	SP
(1)  103/     400 :                     	plo	retAddr
(1)  104/     400 :                     	br	_return-1
(1)  105/     400 : [75]                 ENDIF
(1)  106/     400 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  107/     400 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  108/     400 :                     ;each loop is 2 instruction times
(1)  109/     400 :                     ;so the number of loops needed is 
(1)  110/     400 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  111/     400 : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  112/     400 :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  113/     400 : [111]               	ENDIF
(1)  114/     400 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  115/     400 : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 10 - 4/11/2017 17:16:52


(1)  116/     400 : =>FALSE              else
(1)  117/     400 :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  118/     400 : [114]                endif 
(1)  119/     400 : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  120/     402 : FF 01               $$mslp:	smi	1
(1)  121/     404 : 3A 02               	bnz	$$mslp
(1)  122/     406 : (MACRO)             	Cretn
(1)  123/     408 :                     
(1)  124/     408 :                     
(1)  125/     408 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  126/     408 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  127/     408 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  128/     408 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  129/     408 :                     	ld2z retval
(1)  130/     408 :                     $$mulrlp:
(1)  131/     408 :                     	shru2 regarg2
(1)  132/     408 :                     	bnf $$mulrnoadd
(1)  133/     408 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  134/     408 :                     	alu2 retval,retval,regarg1,add,adc
(1)  135/     408 :                     $$mulrnoadd:
(1)  136/     408 :                     	ghi regarg2	;check for all bits of multiplier shifted out
(1)  137/     408 :                     	bnz $$mulrshft	;nope, continue
(1)  138/     408 :                     	glo regarg2	;check bottom byte
(1)  139/     408 :                     	bz $$mulrdone
(1)  140/     408 :                     $$mulrshft:
(1)  141/     408 :                     	shl2 regarg1	;shift multiplicand left 1
(1)  142/     408 :                     	br $$mulrlp
(1)  143/     408 :                     $$mulrdone:		;here the product is in retval
(1)  144/     408 :                     	cretn
(1)  145/     408 :                     
(1)  146/     408 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  147/     408 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  148/     408 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  149/     408 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  150/     408 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  151/     408 :                     	;regarg1 to hold develop remainder, 
(1)  152/     408 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  153/     408 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  154/     408 :                     				;result in D, rwork.hi, DF
(1)  155/     408 :                     	glo reg2
(1)  156/     408 :                     	str sp
(1)  157/     408 :                     	glo reg1
(1)  158/     408 :                     	sm
(1)  159/     408 :                     	plo R11
(1)  160/     408 :                     	ghi reg2
(1)  161/     408 :                     	str sp
(1)  162/     408 :                     	ghi reg1
(1)  163/     408 :                     	smb
(1)  164/     408 :                     	endm
(1)  165/     408 :                     	
(1)  166/     408 :                     	pushf R10	;save R10 & leave stack down 1
(1)  167/     408 :                     	glo R11		;and bottom
(1)  168/     408 :                     	stxd		;of R11 - leaves stack clear of work area
(1)  169/     408 :                     	cpy2 R10,regarg1
(1)  170/     408 :                     	ld2z retval	;quotient
(1)  171/     408 :                     	cpy2 rwork,regarg2
(1)  172/     408 :                     	
(1)  173/     408 :                     	testsub R10,regarg2
(1)  174/     408 :                     	bnf $$computequot	;DF=0 means it didn't fit
(1)  175/     408 :                     	phi R10	;R10=R10-regarg2
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 11 - 4/11/2017 17:16:52


(1)  176/     408 :                     	glo R11
(1)  177/     408 :                     	plo R10
(1)  178/     408 :                     	
(1)  179/     408 :                     $$again:	;this is the divisor doubling phase
(1)  180/     408 :                      	testsub R10,regarg2
(1)  181/     408 :                      	bnf $$computequot	;df=0 means it didn't fit
(1)  182/     408 :                     	phi R10	;R10=R10-regarg2
(1)  183/     408 :                     	glo R11
(1)  184/     408 :                     	plo R10 	
(1)  185/     408 :                      	shl2 regarg2	;y=y+y
(1)  186/     408 :                      	br $$again
(1)  187/     408 :                      	
(1)  188/     408 :                      $$computequot:	;here we're computing the quotient
(1)  189/     408 :                      	testsub regarg1,regarg2
(1)  190/     408 :                      	bnf $$testexit
(1)  191/     408 :                      	phi regarg1		;complete the subtraction
(1)  192/     408 :                      	glo R11
(1)  193/     408 :                      	plo regarg1
(1)  194/     408 :                      	inc retval
(1)  195/     408 :                      $$testexit:
(1)  196/     408 :                      	ghi rwork
(1)  197/     408 :                      	sm	;top of regarg2 is still on stack
(1)  198/     408 :                      	bnz $$ney0y
(1)  199/     408 :                      	glo regarg2
(1)  200/     408 :                      	str sp
(1)  201/     408 :                      	glo rwork
(1)  202/     408 :                      	sm	;test low order bytes
(1)  203/     408 :                      	bz	$$out	;if = we're done
(1)  204/     408 :                      $$ney0y:
(1)  205/     408 :                      	shl2 retval	;double quotient
(1)  206/     408 :                      	shrU2 regarg2	;halve divisor
(1)  207/     408 :                      	br $$computequot	;continue
(1)  208/     408 :                      $$out:
(1)  209/     408 :                      ;here the quotient is in retval, remainder in regarg1
(1)  210/     408 :                       	inc sp	;release work area
(1)  211/     408 :                     	lda sp	;recover
(1)  212/     408 :                     	plo R11	;bottom byte of R11
(1)  213/     408 :                     	popr R10 ;and all of R10
(1)  214/     408 :                     	cretn	;and we're done
(1)  215/     408 :                     
(1)  216/     408 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  217/     408 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  218/     408 :                     _divI2:
(1)  219/     408 :                         dec	sp	;leave a work area available
(1)  220/     408 :                         ghi regArg1
(1)  221/     408 :                         str sp	;save the sign of the 1st arg
(1)  222/     408 :                         shl
(1)  223/     408 :                         bnf $$pos1	;if the 1st arg is -v
(1)  224/     408 :                         negI2 regArg1,regArg1 ;flip it to positive
(1)  225/     408 :                     $$pos1: ;1st is now +v, check 2nd
(1)  226/     408 :                         ghi regArg2
(1)  227/     408 :                         xor	
(1)  228/     408 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  229/     408 :                         ghi regArg2
(1)  230/     408 :                         shl
(1)  231/     408 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  232/     408 :                         negI2 regArg2,regArg2 ;flip it to +v
(1)  233/     408 :                     $$pos2: ; both args now +v
(1)  234/     408 :                      if MOMCPU=$1805
(1)  235/     408 :                         dec sp	;protect workarea on the 1802
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 12 - 4/11/2017 17:16:52


(1)  236/     408 :                         Ccall _divU2	;call unsigned division
(1)  237/     408 :                         inc sp	;recover work area
(1)  238/     408 :                      else
(1)  239/     408 :                         Ccall _divU2	;call unsigned division
(1)  240/     408 : [234]                endif 
(1)  241/     408 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  242/     408 :                         lda	sp ;get back the sign bits and restore SP
(1)  243/     408 :                         shl
(1)  244/     408 :                         bnf $$done ;if the signs were different
(1)  245/     408 :                         negI2 retVal,retVal ;negate the quotient
(1)  246/     408 :                     $$done:
(1)  247/     408 :                         Cretn ;and we're done - I hope!
(1)  248/     408 : [125]                ENDIF
(1)  249/     408 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  250/     408 :                     	align 256    ;32 bit operations follow
(1)  251/     408 :                     _divu4:
(1)  252/     408 :                     ;This is an unsigned 32 bit restoring division
(1)  253/     408 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  254/     408 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  255/     408 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  256/     408 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  257/     408 :                     
(1)  258/     408 :                     	ldi 32		;set loop count
(1)  259/     408 :                     	plo memaddr	;in temp register
(1)  260/     408 :                     	ldi4 Rp1p2,0	;clear Rp1p2
(1)  261/     408 :                     $$loop:
(1)  262/     408 :                     	shL4 RL8	;shift bottom 32 bits left 1
(1)  263/     408 :                     	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  264/     408 :                     
(1)  265/     408 :                     	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  266/     408 :                     
(1)  267/     408 :                     	ani 0x80	;check the top bit
(1)  268/     408 :                     	bz $$norestore	;if it's 0
(1)  269/     408 :                     		glo RL8
(1)  270/     408 :                     		ani 0xfe	;turn off the bottom bit
(1)  271/     408 :                     		plo RL8
(1)  272/     408 :                     		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  273/     408 :                     	br $$endlp 	;else
(1)  274/     408 :                     $$norestore:
(1)  275/     408 :                     		glo RL8
(1)  276/     408 :                     		ori 1	;turn on the bottom bit
(1)  277/     408 :                     		plo RL8
(1)  278/     408 :                     	;end if
(1)  279/     408 :                     $$endlp:
(1)  280/     408 :                     	dec memaddr	;check the cycle count
(1)  281/     408 :                     	glo memaddr
(1)  282/     408 :                     	bnz $$loop	;back for more if needed
(1)  283/     408 :                     	
(1)  284/     408 :                     	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  285/     408 :                     		
(1)  286/     408 :                     
(1)  287/     408 :                     _mulu4:
(1)  288/     408 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  289/     408 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  290/     408 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  291/     408 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  292/     408 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  293/     408 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  294/     408 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  295/     408 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 13 - 4/11/2017 17:16:52


(1)  296/     408 :                     	;for 10 we subtract and shift
(1)  297/     408 :                     	;for 00 and 11 we just shift
(1)  298/     408 :                     
(1)  299/     408 :                         ldi4 rp1p2,0	;eventual product top 32 bits
(1)  300/     408 :                         ldi 32
(1)  301/     408 :                         plo memaddr		;cycle count
(1)  302/     408 :                         adi 0		;clear df
(1)  303/     408 :                     $$mloop:
(1)  304/     408 :                         glo RL8
(1)  305/     408 :                         ani 1		;isolate bottom bit of result
(1)  306/     408 :                         bnf	$$check_sub	;
(1)  307/     408 :                         bnz	$$shift		;that would be the 11 case
(1)  308/     408 :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  309/     408 :                         alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  310/     408 :                         br $$shift
(1)  311/     408 :                     $$check_sub:
(1)  312/     408 :                         bz $$shift	;that would be the 00 case
(1)  313/     408 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  314/     408 :                         alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  315/     408 :                     $$shift:
(1)  316/     408 :                         shRI4 Rp1p2		;shift the top 32 bits
(1)  317/     408 :                         shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  318/     408 :                     
(1)  319/     408 :                         dec memaddr		;cycle count
(1)  320/     408 :                         glo memaddr
(1)  321/     408 :                         bnz $$mloop		;repeat cycle once for each bit position
(1)  322/     408 :                         
(1)  323/     408 :                         cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  324/     408 :                     
(1)  325/     408 :                     	align 256
(1)  326/     408 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  327/     408 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  328/     408 :                     _divI4:
(1)  329/     408 :                         dec	sp	;leave a work area available
(1)  330/     408 :                         ghi RL8-1	;get the top of the dividend
(1)  331/     408 :                         str sp	;save the sign of the 1st arg
(1)  332/     408 :                         shl
(1)  333/     408 :                         bnf $$pos1	;if the 1st arg is -v
(1)  334/     408 :                         negI4 RL8,RL8 ;flip it to positive
(1)  335/     408 :                     $$pos1: ;1st is now +v, check 2nd
(1)  336/     408 :                         ghi RL10-1
(1)  337/     408 :                         xor	
(1)  338/     408 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  339/     408 :                         ghi RL10-1
(1)  340/     408 :                         shl
(1)  341/     408 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  342/     408 :                         negI4 RL10,RL10 ;flip it to +v
(1)  343/     408 :                     $$pos2: ; both args now +v
(1)  344/     408 :                      if MOMCPU=$1805
(1)  345/     408 :                         dec sp	;protect workarea on the 1802
(1)  346/     408 :                         Ccall _divU4	;call unsigned division
(1)  347/     408 :                         inc sp	;recover work area
(1)  348/     408 :                      else
(1)  349/     408 :                         Ccall _divU4	;call unsigned division
(1)  350/     408 : [344]                endif 
(1)  351/     408 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  352/     408 :                         lda	sp ;get back the sign bits and restore SP
(1)  353/     408 :                         shl
(1)  354/     408 :                         bnf $$done ;if the signs were different
(1)  355/     408 :                         negI4 RL8,RL8 ;negate the quotient
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 14 - 4/11/2017 17:16:52


(1)  356/     408 :                     $$done:
(1)  357/     408 :                         Cretn ;and we're done - I hope!
(1)  358/     408 : [249]                ENDIF
(1)  359/     408 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  360/     408 :                     _dubdabx:	
(1)  361/     408 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  362/     408 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  363/     408 :                     ;long interger is passed in rp1p2
(1)  364/     408 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  365/     408 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  366/     408 :                     ;r8-11 are used as temps
(1)  367/     408 :                     ;r8 is the working pointer
(1)  368/     408 :                     ;r15.0 is bit count(32) and the return value register
(1)  369/     408 :                     ;r9.0 is digit count
(1)  370/     408 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  371/     408 :                      if MOMCPU=$1805
(1)  372/     408 :                     	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  373/     408 :                     	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  374/     408 :                      else
(1)  375/     408 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  376/     408 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  377/     408 : [371]                endif
(1)  378/     408 :                     	cpy2 r15,r8 ;save address for now
(1)  379/     408 :                     	ldi 11	;digit count+1 for trailing 0
(1)  380/     408 :                     	plo r9
(1)  381/     408 :                     $$clrlp:	;clear the passed buffer
(1)  382/     408 :                     	ldi 0	
(1)  383/     408 :                     	str r8	;clear a byte
(1)  384/     408 :                     	inc r8
(1)  385/     408 :                     	dec r9
(1)  386/     408 :                     	glo r9	;check the count
(1)  387/     408 :                     	bnz $$clrlp ;back for more
(1)  388/     408 :                     	cpy2 r8,r15 ;get the address back
(1)  389/     408 :                     
(1)  390/     408 :                     	ldi 32	;bit count
(1)  391/     408 :                     	plo r15
(1)  392/     408 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  393/     408 :                     $$cktop:
(1)  394/     408 :                     	ghi rp1p2-1	;get the top bit of the number
(1)  395/     408 :                     	shl		;check for a 1
(1)  396/     408 :                     	bdf $$bitloop	;move on if we have one
(1)  397/     408 :                     	shl4 rp1p2	;shift the input number
(1)  398/     408 :                     	dec r15		;reduce the number of times to shift
(1)  399/     408 :                     	glo r15
(1)  400/     408 :                     	bnz $$cktop	;
(1)  401/     408 :                     	inc r15		;our whole number was 0 but force at least one pass
(1)  402/     408 :                     $$bitloop:
(1)  403/     408 :                     	ldi 10	;digit count
(1)  404/     408 :                     	plo r9
(1)  405/     408 :                     $$dcklp:
(1)  406/     408 :                     	ldn r8 	;pick up a digit
(1)  407/     408 :                     	smi 5	;see if it's greater than 4
(1)  408/     408 :                     	bnf $$dnoadd ;if not, bypass add
(1)  409/     408 :                     	adi 0x08	;add the 5 black and 3 more
(1)  410/     408 :                     	str r8	;put it back
(1)  411/     408 :                     $$dnoadd:
(1)  412/     408 :                     	inc r8
(1)  413/     408 :                     	dec r9	;decrement digit count
(1)  414/     408 :                     	glo r9
(1)  415/     408 :                     	bnz $$dcklp ;and back for next digit
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 15 - 4/11/2017 17:16:52


(1)  416/     408 :                     	
(1)  417/     408 :                     	shl4 rp1p2 ;shift the input number
(1)  418/     408 :                     	
(1)  419/     408 :                     	ldi 10	;load the digit count again
(1)  420/     408 :                     	plo r9
(1)  421/     408 :                     ;r8 is now just past the units location and ready to walk back
(1)  422/     408 :                     $$dshlp:
(1)  423/     408 :                     	dec r8	;walk back from 0's position
(1)  424/     408 :                     	ldn r8	;get the digit back
(1)  425/     408 :                     	shlc	;continue the shift
(1)  426/     408 :                     	phi r15 ;save it for the carry test
(1)  427/     408 :                     	ani 0x0f ;clear the 10 bit
(1)  428/     408 :                     	str r8	;put the digit back
(1)  429/     408 :                     	ghi r15	;now test for carry
(1)  430/     408 :                     	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  431/     408 :                     	dec r9	;decrement the digit count
(1)  432/     408 :                     	glo r9
(1)  433/     408 :                     	bnz $$dshlp ;back for more if needed
(1)  434/     408 :                     	
(1)  435/     408 :                     	dec r15
(1)  436/     408 :                     	glo r15
(1)  437/     408 :                     	bnz $$bitloop
(1)  438/     408 :                     	
(1)  439/     408 :                     	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     408 :                     	ldi 10		;digit count again
(1)  441/     408 :                     	plo r9
(1)  442/     408 :                     $$upnxt:
(1)  443/     408 :                     	ldn r8		;get digit
(1)  444/     408 :                     	ori 0x30	;make ascii
(1)  445/     408 :                     	str r8		;put it back
(1)  446/     408 :                     	inc r8		;next digit
(1)  447/     408 :                     	dec r9		;counter
(1)  448/     408 :                     	glo r9
(1)  449/     408 :                     	bnz $$upnxt	;upgrade all 10 spots
(1)  450/     408 :                      if MOMCPU=$1805	
(1)  451/     408 :                     	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  452/     408 :                      else
(1)  453/     408 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  454/     408 : [450]                endif
(1)  455/     408 :                     	sex memaddr	;set up
(1)  456/     408 :                     	ldi 10		;max number of 0's to skip
(1)  457/     408 :                     	sm		;desired number of digits to skip
(1)  458/     408 :                     	sex sp		;reset index register
(1)  459/     408 :                     	plo r9		;number of leading 0's to skip
(1)  460/     408 :                     $$cknext:
(1)  461/     408 :                     	ldn r15		;check digit
(1)  462/     408 :                     	smi 0x30	;for '0'
(1)  463/     408 :                     	bnz $$done
(1)  464/     408 :                     	inc r15		;next digit
(1)  465/     408 :                     	dec r9		;reduce count
(1)  466/     408 :                     	glo r9
(1)  467/     408 :                     	bnz $$cknext
(1)  468/     408 :                     $$done:
(1)  469/     408 :                     	cretn
(1)  470/     408 : [359]                ENDIF	
(1)  471/     408 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  472/     408 :                     _modU4:	;32 bit unsigned remainder
(1)  473/     408 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/     408 :                         Ccall _divU4
(1)  475/     408 :                         cpy4 RL8,Rp1p2
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(lcc1802epiloNW.inc) - page 16 - 4/11/2017 17:16:52


(1)  476/     408 :                         Cretn
(1)  477/     408 :                         
(1)  478/     408 :                     _modI4:	;32 bit signed remainder
(1)  479/     408 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  480/     408 :                         Ccall _divI4
(1)  481/     408 :                         cpy4 RL8,Rp1p2
(1)  482/     408 :                         Cretn
(1)  483/     408 : [471]                ENDIF	
(1)  484/     408 :                     
     286/     408 :                     	include IO1802.inc
(1)    1/     408 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     408 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     408 :                     	align 64
(1)    4/     440 :                     _putc:
(1)    5/     440 :                     _out5:	
(1)    6/     440 : 8C                  	glo	regArg1
(1)    7/     441 : 22                  	dec	sp
(1)    8/     442 : 52                  	str	sp
(1)    9/     443 : 65                  	out	5
(1)   10/     444 : (MACRO)             	Cretn
(1)   11/     446 :                     _inp:		;raw port input
(1)   12/     446 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     446 : 22                  	dec	sp	;work backwards
(1)   14/     447 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     449 : 73                  	stxd		
(1)   16/     44A : 8C                  	glo	regarg1	;get the port number
(1)   17/     44B : FA 07               	ani	0x07	;clean it
(1)   18/     44D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     44F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     451 : 73                  	stxd		;store it for execution
(1)   21/     452 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     456 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     457 : D8                  	sep	rt1	;execute it
(1)   24/     458 :                     ;we will come back to here with the input byte in D
(1)   25/     458 : 12                  	inc	sp	;step over the work area
(1)   26/     459 : AF                  	plo	retVal	;save it to return
(1)   27/     45A : F8 00               	ldi	0
(1)   28/     45C : BF                  	phi	retval	;clear top byte
(1)   29/     45D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     45E : 12                  	inc	sp	;and the D3
(1)   31/     45F : (MACRO)             	Cretn		;and we're done
(1)   32/     461 :                     	
(1)   33/     461 :                     _out:		;raw port output
(1)   34/     461 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     461 :                     		;this could be bolder:
(1)   36/     461 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     461 :                     		;then SEP sp
(1)   38/     461 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     461 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     461 : 22                  	dec	sp	;work backwards
(1)   41/     462 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     464 : 73                  	stxd		
(1)   43/     465 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     469 : 8C                  	glo	regarg1	;get the port number
(1)   45/     46A : FA 07               	ani	0x07	;clean it
(1)   46/     46C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     46E : 73                  	stxd		;store it for execution
(1)   48/     46F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     470 : 52                  	str	sp	;store it where sp points
(1)   50/     471 : D8                  	sep	rt1	;execute it
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm(IO1802.inc) - page 17 - 4/11/2017 17:16:52


(1)   51/     472 :                     ;we will come back to here with sp stepped up by one
(1)   52/     472 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     473 : 12                  	inc	sp	;and the D3
(1)   54/     474 : (MACRO)             	Cretn		;and we're done
(1)   55/     476 :                     	
(1)   56/     476 :                     	
(1)   57/     476 :                     
     287/     476 :                     
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 18 - 4/11/2017 17:16:52


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  BVTABLE97 :                    31E C |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                   4/11/2017 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            99 C | *L10 :                          1A6 C |
 L12 :                          1A7 C | *L13 :                          223 C |
*L15 :                          294 C |  L16 :                          24A C |
 L17 :                          291 C |  L19 :                          28F C |
 L20 :                          291 C |  L21 :                          284 C |
*L23 :                          2CD C |  L24 :                          2B6 C |
*L25 :                          2BA C |  L27 :                          2BB C |
*L28 :                          331 C | *L3 :                            A9 C |
*L5 :                           143 C | *L7 :                           1AF C |
 L9 :                           19A C |  LCC1802CPUSPEED :            493E0 - |
 LCC1802INIT :                  333 C |  LCC1802SUBOVHD :                 E - |
 LCCCODELOC :                     0 - | *LCCNOLONG :                      1 - |
*LCCNOMATH :                      1 - |  LCCSTACKLOC :                 103F - |
*LISTON :                         1 - | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MOMCPU :                      1805 - |
*MOMCPUNAME :                  1805 - |  MSLP107 :                      402 C |
*NESTMAX :                      100 - |  OUTIT97 :                      31A C |
*PACKING :                        0 - | *PADDING :                        1 - |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - | *R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
*RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - | *RL10 :                           B - |
*RL12 :                           D - | *RL6 :                            7 - |
*RL8 :                            9 - | *RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
*RWORK :                          E - |  SETBITOFF97 :                  315 C |
 SP :                             2 - | *TIME :                    17:16:52 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 _00000102 :                    345 C | *_BOYDINC :                       4 C |
 _BOYDSCAN :                      4 C |  _BOYDSCAN.KEY_0 :               80 C |
 _BOYDSCAN.KEY_1 :               84 C |  _BOYDSCAN.KEY_10 :              68 C |
 _BOYDSCAN.KEY_11 :              6C C |  _BOYDSCAN.KEY_12 :              50 C |
 _BOYDSCAN.KEY_13 :              54 C |  _BOYDSCAN.KEY_14 :              58 C |
 _BOYDSCAN.KEY_15 :              5C C |  _BOYDSCAN.KEY_2 :               88 C |
 _BOYDSCAN.KEY_3 :               8C C |  _BOYDSCAN.KEY_4 :               70 C |
 _BOYDSCAN.KEY_5 :               74 C |  _BOYDSCAN.KEY_6 :               78 C |
 _BOYDSCAN.KEY_7 :               7C C |  _BOYDSCAN.KEY_8 :               60 C |
 _BOYDSCAN.KEY_9 :               64 C |  _BOYDSCAN.KEY_ADD :             90 C |
 _BOYDSCAN.KEY_CLEAR :           90 C |  _BOYDSCAN.KEY_CLR_ENTRY :       90 C |
 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 19 - 4/11/2017 17:16:52


 _BOYDSCAN.KEY_DIV_FIS :         90 C |  _BOYDSCAN.KEY_DIV_WHOLE :       90 C |
 _BOYDSCAN.KEY_EQU :             94 C |  _BOYDSCAN.KEY_INV_SIGN :        90 C |
 _BOYDSCAN.KEY_MEM_RECALL :      90 C |  _BOYDSCAN.KEY_MEM_STORE :       90 C |
 _BOYDSCAN.KEY_MUL :             90 C |  _BOYDSCAN.KEY_REM :             90 C |
 _BOYDSCAN.KEY_SAVE :            96 C |  _BOYDSCAN.KEY_SUB :             90 C |
 _BOYDSCAN.SCAN :                 9 C |  _DELAY :                       2A3 C |
 _DIE102 :                      349 C | *_DIGITALREAD :                 328 C |
*_DIGITALWRITE :                300 C |  _DISP1 :                        9B C |
 _DISP42 :                      1BA C |  _DISPMEMLOC :                   AB C |
 _DISPVAL :                     154 C | *_INP :                         446 C |
 _MAIN :                        229 C | *_OLDUINOINCLUDER :             2DA C |
 _ONEMS :                       400 C |  _OUT :                         461 C |
*_OUT4 :                        354 C | *_OUT5 :                        440 C |
 _PIN4 :                          3 C | *_PUTC :                        440 C |
*_SETQOFF :                     351 C | *_SETQON :                      34E C |
 __FORW0 :                      32F C |  __FORW1 :                      45D C |
*__FORW2 :                      472 C |

    147 symbols
     64 unused symbols

 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 20 - 4/11/2017 17:16:52


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file boydmon5.oasm - page 21 - 4/11/2017 17:16:52


  codepages:
  ----------

STANDARD (0 changed characters)


0.10 seconds assembly time

   2090 lines source file
   3154 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
