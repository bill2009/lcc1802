 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 1 - 4/11/2017 11:00:49


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Tue Apr 11 11:00:49 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 02 F3            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     ;$$function start$$ _ef1
      15/       4 :                     _ef1:		;framesize=2
      16/       4 :                     ;unsigned char ef1(){
      17/       4 :                     ;	asm(" rldi 15,1\n"
      18/       4 :                     ;	return 0; //if the assembly doesn't return, EF1 is not active
      19/       4 : 68 CF 00 01          rldi 15,1
      20/       8 : 3C 0C                bn1 .ret0
      21/       A : (MACRO)              cretn ;will return a '1'
      22/       C :                     .ret0: ;will drop thru to return 0
      23/       C : (MACRO)             	ld2z R15
      24/      10 :                     L1:
      25/      10 : (MACRO)             	Cretn
      26/      12 :                     
      27/      12 :                     ;$$function end$$ _ef1
      28/      12 :                     ;$$function start$$ _ef2
      29/      12 :                     _ef2:		;framesize=2
      30/      12 :                     ;unsigned char ef2(){
      31/      12 :                     ;	asm(" rldi 15,1\n"
      32/      12 :                     ;	return 0; //if the assembly doesn't return, EF1 is not active
      33/      12 : 68 CF 00 01          rldi 15,1
      34/      16 : 3D 1A                bn2 .ret0
      35/      18 : (MACRO)              cretn ;will return a '1'
      36/      1A :                     .ret0: ;will drop thru to return 0
      37/      1A : (MACRO)             	ld2z R15
      38/      1E :                     L3:
      39/      1E : (MACRO)             	Cretn
      40/      20 :                     
      41/      20 :                     ;$$function end$$ _ef2
      42/      20 :                     ;$$function start$$ _disp1
      43/      20 :                     _disp1:		;framesize=2
      44/      20 :                     ;void disp1(unsigned char d){//display a byte as two hex digits
      45/      20 :                     ;	asm(" glo 12\n ani 0x0f\n" //prep bottom digit
      46/      20 : 8C                   glo 12
      47/      21 : FA 0F                ani 0x0f
      48/      23 : 22                   dec 2
      49/      24 : 52                   str 2
      50/      25 : 67                   out 7
      51/      26 : 8C                   glo 12
      52/      27 : F6                   shr
      53/      28 : F6                   shr
      54/      29 : F6                   shr
      55/      2A : F6                   shr
      56/      2B : 22                   dec 2
      57/      2C : 52                   str 2
      58/      2D : 67                   out 7
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 2 - 4/11/2017 11:00:49


      59/      2E :                     ;}
      60/      2E :                     L5:
      61/      2E : (MACRO)             	Cretn
      62/      30 :                     
      63/      30 :                     ;$$function end$$ _disp1
      64/      30 :                     ;$$function start$$ _disp12
      65/      30 :                     _disp12:		;framesize=6
      66/      30 : (MACRO)             	reserve 4
      67/      34 :                     ;void disp12(){
      68/      34 :                     ;	initleds();
      69/      34 :                     ;	out(7,0x12);
      70/      34 : 7A                   req
      71/      35 : 7B                   seq
      72/      36 : 22                   dec 2
      73/      37 : 67                   out 7
      74/      38 : 7A                   req
      75/      39 : (MACRO)             	ldaD R12,7; reg:acon
      76/      3D : (MACRO)             	ldaD R13,18; reg:acon
      77/      41 : (MACRO)             	Ccall _out; CALLI2(ar)
      78/      45 :                     ;	out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);
      79/      45 : (MACRO)             	ldaD R12,7; reg:acon
      80/      49 : (MACRO)             	ldaD R13,15; reg:acon
      81/      4D : (MACRO)             	Ccall _out; CALLI2(ar)
      82/      51 : (MACRO)             	ldaD R12,7; reg:acon
      83/      55 : (MACRO)             	ldaD R13,15; reg:acon
      84/      59 : (MACRO)             	Ccall _out; CALLI2(ar)
      85/      5D : (MACRO)             	ldaD R12,7; reg:acon
      86/      61 : (MACRO)             	ldaD R13,15; reg:acon
      87/      65 : (MACRO)             	Ccall _out; CALLI2(ar)
      88/      69 : (MACRO)             	ldaD R12,7; reg:acon
      89/      6D : (MACRO)             	ldaD R13,15; reg:acon
      90/      71 : (MACRO)             	Ccall _out; CALLI2(ar)
      91/      75 : (MACRO)             	ldaD R12,7; reg:acon
      92/      79 : (MACRO)             	ldaD R13,15; reg:acon
      93/      7D : (MACRO)             	Ccall _out; CALLI2(ar)
      94/      81 : (MACRO)             	ldaD R12,7; reg:acon
      95/      85 : (MACRO)             	ldaD R13,15; reg:acon
      96/      89 : (MACRO)             	Ccall _out; CALLI2(ar)
      97/      8D : (MACRO)             	ldaD R12,7; reg:acon
      98/      91 : (MACRO)             	ldaD R13,15; reg:acon
      99/      95 : (MACRO)             	Ccall _out; CALLI2(ar)
     100/      99 :                     ;}
     101/      99 :                     L7:
     102/      99 : (MACRO)             	release 4
     103/      9D : (MACRO)             	Cretn
     104/      9F :                     
     105/      9F :                     ;$$function end$$ _disp12
     106/      9F :                     ;$$function start$$ _disp42
     107/      9F :                     _disp42:		;framesize=6
     108/      9F : (MACRO)             	reserve 4
     109/      A3 :                     ;void disp42(){
     110/      A3 :                     ;	initleds();
     111/      A3 :                     ;	out(7,2);
     112/      A3 : 7A                   req
     113/      A4 : 7B                   seq
     114/      A5 : 22                   dec 2
     115/      A6 : 67                   out 7
     116/      A7 : 7A                   req
     117/      A8 : (MACRO)             	ldaD R12,7; reg:acon
     118/      AC : (MACRO)             	ldaD R13,2; reg:acon
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 3 - 4/11/2017 11:00:49


     119/      B0 : (MACRO)             	Ccall _out; CALLI2(ar)
     120/      B4 :                     ;	out(7,4);
     121/      B4 : (MACRO)             	ldaD R12,7; reg:acon
     122/      B8 : (MACRO)             	ldaD R13,4; reg:acon
     123/      BC : (MACRO)             	Ccall _out; CALLI2(ar)
     124/      C0 :                     ;}
     125/      C0 :                     L9:
     126/      C0 : (MACRO)             	release 4
     127/      C4 : (MACRO)             	Cretn
     128/      C6 :                     
     129/      C6 :                     ;$$function end$$ _disp42
     130/      C6 :                     ;$$function start$$ _dispmemloc
     131/      C6 :                     _dispmemloc:		;framesize=14
     132/      C6 : (MACRO)             	pushr R4
     133/      C8 : (MACRO)             	pushr R5
     134/      CA : (MACRO)             	pushr R6
     135/      CC : (MACRO)             	pushr R7
     136/      CE : (MACRO)             	reserve 4; save room for outgoing arguments
     137/      D2 : (MACRO)             	st2 R12,'O',sp,(14+1); flag1 
     138/      DF :                     ;void dispmemloc(unsigned int loc){
     139/      DF :                     ;	register unsigned char* m=0;
     140/      DF : (MACRO)             	ldaD R7,0; reg:acon
     141/      E3 :                     ;	initleds();
     142/      E3 :                     ;	m1=m[loc]>>4;
     143/      E3 : 7A                   req
     144/      E4 : 7B                   seq
     145/      E5 : 22                   dec 2
     146/      E6 : 67                   out 7
     147/      E7 : 7A                   req
     148/      E8 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
     149/      F4 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     150/      FE : (MACRO)             	ldn1 R11,R11	;opt14*
     151/     100 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     152/     103 : (MACRO)             	shrI2I R11,4
     153/     123 : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     154/     125 :                     ;	m2=m[loc]&0x0f;
     155/     125 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
     156/     131 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     157/     13B : (MACRO)             	ldn1 R11,R11	;opt14*
     158/     13D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     159/     140 : (MACRO)             	alu2I R11,R11,15,ani,ani
     160/     148 :                     	;removed ?	cpy2 R11,R11
     161/     148 : (MACRO)             	cpy1 R5,R11;LOADU1(reg)
     162/     14A :                     ;	out(7,m2); out(7,m1);
     163/     14A : (MACRO)             	ldaD R12,7; reg:acon
     164/     14E : (MACRO)             	cpy1 R13,R5
     165/     150 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     166/     153 : (MACRO)             	Ccall _out; CALLI2(ar)
     167/     157 : (MACRO)             	ldaD R12,7; reg:acon
     168/     15B : (MACRO)             	cpy1 R13,R6
     169/     15D : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     170/     160 : (MACRO)             	Ccall _out; CALLI2(ar)
     171/     164 :                     ;	for (i=6;i!=0;i--) out(7,15);
     172/     164 : (MACRO)             	ldaD R4,6; reg:acon
     173/     168 : C0 01 78            	lbr L16
     174/     16B :                     L13:
     175/     16B : (MACRO)             	ldaD R12,7; reg:acon
     176/     16F : (MACRO)             	ldaD R13,15; reg:acon
     177/     173 : (MACRO)             	Ccall _out; CALLI2(ar)
     178/     177 :                     L14:
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 4 - 4/11/2017 11:00:49


     179/     177 : (MACRO)             	decm R4,1	;SUBU2(reg,consm)
     180/     178 :                     L16:
     181/     178 : (MACRO)             	jnzU2 R4,L13; NE 0 
     182/     180 :                     ;}
     183/     180 :                     L11:
     184/     180 : (MACRO)             	release 4; release room for outgoing arguments
     185/     184 : (MACRO)             	popf R7	;opt11.3
     186/     187 : (MACRO)             	popm R6	;opt11.4
     187/     189 : (MACRO)             	popm R5	;opt11.4
     188/     18B : (MACRO)             	popl R4	;opt11.4
     189/     18F : (MACRO)             	Cretn
     190/     191 :                     
     191/     191 :                     ;$$function end$$ _dispmemloc
     192/     191 :                     ;$$function start$$ _dispm2
     193/     191 :                     _dispm2:		;framesize=8
     194/     191 : (MACRO)             	pushr R7
     195/     193 : (MACRO)             	reserve 4; save room for outgoing arguments
     196/     197 : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     197/     1A4 :                     ;void dispm2(unsigned int loc){
     198/     1A4 :                     ;	initleds();
     199/     1A4 :                     ;	disp1(loc);
     200/     1A4 : 7A                   req
     201/     1A5 : 7B                   seq
     202/     1A6 : 22                   dec 2
     203/     1A7 : 67                   out 7
     204/     1A8 : 7A                   req
     205/     1A9 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRU2(addr)
     206/     1B5 : (MACRO)             	cpy1 R12,R11
     207/     1B7 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     208/     1BA : (MACRO)             	Ccall _disp1
     209/     1BE :                     ;	for (i=6;i!=0;i--) out(7,15);
     210/     1BE : (MACRO)             	ldaD R7,6; reg:acon
     211/     1C2 : C0 01 D2            	lbr L22
     212/     1C5 :                     L19:
     213/     1C5 : (MACRO)             	ldaD R12,7; reg:acon
     214/     1C9 : (MACRO)             	ldaD R13,15; reg:acon
     215/     1CD : (MACRO)             	Ccall _out; CALLI2(ar)
     216/     1D1 :                     L20:
     217/     1D1 : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     218/     1D2 :                     L22:
     219/     1D2 : (MACRO)             	jnzU2 R7,L19; NE 0 
     220/     1DA :                     ;}
     221/     1DA :                     L17:
     222/     1DA : (MACRO)             	release 4; release room for outgoing arguments
     223/     1DE : (MACRO)             	popr R7
     224/     1E3 : (MACRO)             	Cretn
     225/     1E5 :                     
     226/     1E5 :                     ;$$function end$$ _dispm2
     227/     1E5 :                     ;$$function start$$ _main
     228/     1E5 :                     _main: ;copt is peeping your size 6 frame with oct 23 rules
     229/     1E5 : (MACRO)             	reserve 4
     230/     1E9 :                     ;{
     231/     1E9 :                     ;	disp42();
     232/     1E9 : (MACRO)             	Ccall _disp42
     233/     1ED :                     ;	delay(1000);
     234/     1ED : (MACRO)             	ldaD R12,1000; reg:acon
     235/     1F1 : (MACRO)             	Ccall _delay
     236/     1F5 :                     ;	dispmemloc(0);
     237/     1F5 : (MACRO)             	ld2z R12
     238/     1F9 : (MACRO)             	Ccall _dispmemloc
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 5 - 4/11/2017 11:00:49


     239/     1FD :                     ;	delay(1000);
     240/     1FD : (MACRO)             	ldaD R12,1000; reg:acon
     241/     201 : (MACRO)             	Ccall _delay
     242/     205 :                     ;	dispm2(0x25);
     243/     205 : (MACRO)             	ldaD R12,37; reg:acon
     244/     209 : (MACRO)             	Ccall _dispm2
     245/     20D :                     ;	delay(1000);
     246/     20D : (MACRO)             	ldaD R12,1000; reg:acon
     247/     211 : (MACRO)             	Ccall _delay
     248/     215 : C0 02 68            	lbr L25
     249/     218 :                     L24:
     250/     218 :                     ;	while(1){
     251/     218 :                     ;		out(1,1); //activate top row of keys
     252/     218 : (MACRO)             	ldaD R11,1; reg:acon
     253/     21C : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)
     254/     220 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     255/     224 : (MACRO)             	Ccall _out; CALLI2(ar)
     256/     228 :                     ;		if(ef1()){ //key 12 pressed
     257/     228 : (MACRO)             	Ccall _ef1; CALLI2(ar)
     258/     22C : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     259/     230 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     260/     233 : (MACRO)             	jzU2 R11,L27; EQ 0
     261/     23B :                     ;			disp12();
     262/     23B : (MACRO)             	Ccall _disp12
     263/     23F :                     ;		} else if(ef2()){//key 8
     264/     23F : C0 02 68            	lbr L28
     265/     242 :                     L27:
     266/     242 : (MACRO)             	Ccall _ef2; CALLI2(ar)
     267/     246 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     268/     24A : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     269/     24D : (MACRO)             	jzU2 R11,L29; EQ 0
     270/     255 :                     ;			dispmemloc(01);
     271/     255 : (MACRO)             	ldaD R12,1; reg:acon
     272/     259 : (MACRO)             	Ccall _dispmemloc
     273/     25D :                     ;		}else{
     274/     25D : C0 02 68            	lbr L30
     275/     260 :                     L29:
     276/     260 :                     ;			dispmemloc(02);;
     277/     260 : (MACRO)             	ldaD R12,2; reg:acon
     278/     264 : (MACRO)             	Ccall _dispmemloc
     279/     268 :                     ;		}
     280/     268 :                     L30:
     281/     268 :                     L28:
     282/     268 :                     ;	}
     283/     268 :                     L25:
     284/     268 :                     ;	while(1){
     285/     268 : C0 02 18            	lbr L24
     286/     26B :                     L31:
     287/     26B :                     ;	while(1);
     288/     26B :                     L32:
     289/     26B : C0 02 6B            	lbr L31
     290/     26E :                     ;}
     291/     26E :                     L23:
     292/     26E : (MACRO)             	release 4
     293/     272 : (MACRO)             	Cretn
     294/     274 :                     
     295/     274 :                     ;$$function end$$ _main
     296/     274 :                     ;$$function start$$ _delay
     297/     274 :                     _delay:		;framesize=10
     298/     274 : (MACRO)             	pushr R6
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 6 - 4/11/2017 11:00:49


     299/     276 : (MACRO)             	pushr R7
     300/     278 : (MACRO)             	reserve 4; save room for outgoing arguments
     301/     27C : (MACRO)             	cpy2 R7,R12; function(2054) 1
     302/     280 :                     ;void delay(unsigned int howlong){
     303/     280 :                     ;	for (i=1;i!=howlong;i++){
     304/     280 : (MACRO)             	ldaD R6,1; reg:acon
     305/     284 : C0 02 8C            	lbr L38
     306/     287 :                     L35:
     307/     287 :                     ;		oneMs();
     308/     287 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
     309/     28B :                     ;	}
     310/     28B :                     L36:
     311/     28B :                     ;	for (i=1;i!=howlong;i++){
     312/     28B : (MACRO)             	incm R6,1
     313/     28C :                     L38:
     314/     28C : (MACRO)             	jneU2 R6,R7,L35; NE
     315/     29E :                     ;}
     316/     29E :                     L34:
     317/     29E : (MACRO)             	release 4; release room for outgoing arguments
     318/     2A2 : (MACRO)             	popf R7	;opt11.3
     319/     2A5 : (MACRO)             	popl R6	;opt11.3
     320/     2A9 : (MACRO)             	Cretn
     321/     2AB :                     
     322/     2AB :                     ;$$function end$$ _delay
     323/     2AB :                     ;$$function start$$ _olduinoincluder
     324/     2AB :                     _olduinoincluder:		;framesize=2
     325/     2AB :                     ;void olduinoincluder(){
     326/     2AB :                     ;	asm("\tinclude olduino.inc\n");
     327/     2AB :                     	include olduino.inc
(1)    1/     2AB :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     2AB :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     2AB :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     2AB :                     	align 64	;needed to make sure all on same page
(1)    5/     2C0 :                     _digitalWrite:
(1)    6/     2C0 : 8C                  	glo regArg1	;get the bit number
(1)    7/     2C1 : FC DE               	adi $$bvtable&255	;add the table offset
(1)    8/     2C3 : AE                  	plo memaddr
(1)    9/     2C4 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     2C5 : BE                  	phi memaddr	
(1)   11/     2C6 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     2C7 : A8                  	plo rt1		;save it in a temp
(1)   13/     2C8 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     2CC : EE                  	sex memaddr	;prepare to change it
(1)   15/     2CD : 8D                  	glo regArg2	;get on/off switch
(1)   16/     2CE : 32 D5               	bz $$setbitoff
(1)   17/     2D0 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     2D0 : 88                  	glo rt1		;get the bit value back
(1)   19/     2D1 : F1                  	or		;apply it
(1)   20/     2D2 : 5E                  	str memaddr	;and save it
(1)   21/     2D3 : 30 DA               	br $$outit	;go fnish up
(1)   22/     2D5 :                     $$setbitoff:
(1)   23/     2D5 : 88                  	glo rt1		;get the bit pattern
(1)   24/     2D6 : FB FF               	xri 0xff	;reverse it
(1)   25/     2D8 : F2                  	and		;combine it with the existing pin value
(1)   26/     2D9 : 5E                  	str memaddr	;and save it
(1)   27/     2DA :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     2DA :                     $$outit:
(1)   29/     2DA : 64                  	out 4		;X was already set to memaddr
(1)   30/     2DB : E2                  	sex sp		;reset X
(1)   31/     2DC : (MACRO)             	cretn
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(olduino.inc) - page 7 - 4/11/2017 11:00:49


(1)   32/     2DE : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     2E6 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     2E6 :                     	align 8	;protect jump boundary
(1)   35/     2E8 :                     _digitalRead:
(1)   36/     2E8 : F8 00               	ldi 0		;default is false
(1)   37/     2EA : AF                  	plo R15
(1)   38/     2EB : BF                  	phi R15
(1)   39/     2EC : 36 EF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     2EE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     2EF : (MACRO)             +	cretn
(1)   42/     2F1 :                     
     328/     2F1 :                     ;}
     329/     2F1 :                     L39:
     330/     2F1 : (MACRO)             	Cretn
     331/     2F3 :                     
     332/     2F3 :                     ;$$function end$$ _olduinoincluder
     333/     2F3 :                     	include lcc1802epiloNW.inc
(1)    1/     2F3 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     2F3 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     2F3 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     2F3 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     2F3 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     2F3 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     2F3 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     2F3 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     2F3 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     2F3 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     2F3 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     2F3 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     2F3 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     2F3 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     2F3 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     2F3 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     2F3 :                     ;16-09-20 allow stack relocation 
(1)   18/     2F3 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/     2F3 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/     2F3 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/     2F3 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/     2F3 :                     ;17-04-09 don't include call/return for 1806
(1)   23/     2F3 : =EH                 rwork	equ	memAddr	;work register
(1)   24/     2F3 :                     lcc1802init:	
(1)   25/     2F3 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   26/     2F7 : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   27/     2FB : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   28/     2FB :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   29/     2FB : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   30/     2FB : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   31/     2FF : [27]                  ENDIF				;wjr 16-09-20
(1)   32/     2FF : E2                  	sex	SP
(1)   33/     300 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   34/     304 : D3                  	sep	RPC
(1)   35/     305 :                     $$_00000:
(1)   36/     305 : (MACRO)             	Ccall _main	;call the main routine
(1)   37/     309 : C0 03 09            $$_die:	lbr	$$_die		;loop here when main returns
(1)   38/     30C : DE AD               	db	0xde,0xad
(1)   39/     30E :                     
(1)   40/     30E :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   41/     30E :                     _setqOn:
(1)   42/     30E : 7B                  	seq
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 8 - 4/11/2017 11:00:49


(1)   43/     30F : (MACRO)             	Cretn
(1)   44/     311 :                     _setqOff:
(1)   45/     311 : 7A                  	req
(1)   46/     312 : (MACRO)             	Cretn
(1)   47/     314 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   48/     314 :                     _modU2:	;16 bit unsigned remainder
(1)   49/     314 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   50/     314 :                         Ccall _divU2
(1)   51/     314 :                         glo regArg1
(1)   52/     314 :                         plo retVal
(1)   53/     314 :                         ghi regArg1
(1)   54/     314 :                         phi retVal
(1)   55/     314 :                         Cretn
(1)   56/     314 :                         
(1)   57/     314 :                     _modI2:	;16 bit signed remainder
(1)   58/     314 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   59/     314 :                         Ccall _divI2
(1)   60/     314 :                         glo regArg1
(1)   61/     314 :                         plo retVal
(1)   62/     314 :                         ghi regArg1
(1)   63/     314 :                         phi retVal
(1)   64/     314 :                         Cretn
(1)   65/     314 : [47]                 ENDIF
(1)   66/     314 :                     _out4:	
(1)   67/     314 : 8C                  	glo	regArg1
(1)   68/     315 : 22                  	dec	sp
(1)   69/     316 : 52                  	str	sp
(1)   70/     317 : 64                  	out	4
(1)   71/     318 : (MACRO)             	Cretn
(1)   72/     31A :                     
(1)   73/     31A :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   74/     31A :                     	align 256
(1)   75/     400 : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   76/     400 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   77/     400 :                     	sep     R3 ;go to subroutine
(1)   78/     400 :                     _call	sex	SP ;make sure X=SP
(1)   79/     400 :                     	glo	retAddr ;save previous return pointer on stack
(1)   80/     400 :                     	dec	sp
(1)   81/     400 :                     	stxd
(1)   82/     400 :                     	ghi	retAddr
(1)   83/     400 :                     	str	sp	
(1)   84/     400 :                     	glo	RPC ;copy old PC to retAddr
(1)   85/     400 :                     	plo	retAddr
(1)   86/     400 :                     	ghi	RPC
(1)   87/     400 :                     	phi	retAddr
(1)   88/     400 :                     	lda	retAddr ;pick up subroutine address into RPC
(1)   89/     400 :                     	phi	RPC
(1)   90/     400 :                     	lda	retAddr
(1)   91/     400 :                     	plo	RPC
(1)   92/     400 :                     	br	_call-1
(1)   93/     400 :                     
(1)   94/     400 :                     ;Standard subroutine return 
(1)   95/     400 :                     	sep	RPC	;return to the original program
(1)   96/     400 :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)   97/     400 :                     	plo	RPC
(1)   98/     400 :                     	ghi	retAddr
(1)   99/     400 :                     	phi	RPC
(1)  100/     400 :                     	lda	SP	;pick up old return address
(1)  101/     400 :                     	phi	retAddr
(1)  102/     400 :                     	lda	SP
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 9 - 4/11/2017 11:00:49


(1)  103/     400 :                     	plo	retAddr
(1)  104/     400 :                     	br	_return-1
(1)  105/     400 : [75]                 ENDIF
(1)  106/     400 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  107/     400 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  108/     400 :                     ;each loop is 2 instruction times
(1)  109/     400 :                     ;so the number of loops needed is 
(1)  110/     400 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  111/     400 : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  112/     400 :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  113/     400 : [111]               	ENDIF
(1)  114/     400 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  115/     400 : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  116/     400 : =>FALSE              else
(1)  117/     400 :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  118/     400 : [114]                endif 
(1)  119/     400 : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  120/     402 : FF 01               $$mslp:	smi	1
(1)  121/     404 : 3A 02               	bnz	$$mslp
(1)  122/     406 : (MACRO)             	Cretn
(1)  123/     408 :                     
(1)  124/     408 :                     
(1)  125/     408 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  126/     408 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  127/     408 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  128/     408 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  129/     408 :                     	ld2z retval
(1)  130/     408 :                     $$mulrlp:
(1)  131/     408 :                     	shru2 regarg2
(1)  132/     408 :                     	bnf $$mulrnoadd
(1)  133/     408 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  134/     408 :                     	alu2 retval,retval,regarg1,add,adc
(1)  135/     408 :                     $$mulrnoadd:
(1)  136/     408 :                     	ghi regarg2	;check for all bits of multiplier shifted out
(1)  137/     408 :                     	bnz $$mulrshft	;nope, continue
(1)  138/     408 :                     	glo regarg2	;check bottom byte
(1)  139/     408 :                     	bz $$mulrdone
(1)  140/     408 :                     $$mulrshft:
(1)  141/     408 :                     	shl2 regarg1	;shift multiplicand left 1
(1)  142/     408 :                     	br $$mulrlp
(1)  143/     408 :                     $$mulrdone:		;here the product is in retval
(1)  144/     408 :                     	cretn
(1)  145/     408 :                     
(1)  146/     408 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  147/     408 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  148/     408 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  149/     408 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  150/     408 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  151/     408 :                     	;regarg1 to hold develop remainder, 
(1)  152/     408 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  153/     408 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  154/     408 :                     				;result in D, rwork.hi, DF
(1)  155/     408 :                     	glo reg2
(1)  156/     408 :                     	str sp
(1)  157/     408 :                     	glo reg1
(1)  158/     408 :                     	sm
(1)  159/     408 :                     	plo R11
(1)  160/     408 :                     	ghi reg2
(1)  161/     408 :                     	str sp
(1)  162/     408 :                     	ghi reg1
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 10 - 4/11/2017 11:00:49


(1)  163/     408 :                     	smb
(1)  164/     408 :                     	endm
(1)  165/     408 :                     	
(1)  166/     408 :                     	pushf R10	;save R10 & leave stack down 1
(1)  167/     408 :                     	glo R11		;and bottom
(1)  168/     408 :                     	stxd		;of R11 - leaves stack clear of work area
(1)  169/     408 :                     	cpy2 R10,regarg1
(1)  170/     408 :                     	ld2z retval	;quotient
(1)  171/     408 :                     	cpy2 rwork,regarg2
(1)  172/     408 :                     	
(1)  173/     408 :                     	testsub R10,regarg2
(1)  174/     408 :                     	bnf $$computequot	;DF=0 means it didn't fit
(1)  175/     408 :                     	phi R10	;R10=R10-regarg2
(1)  176/     408 :                     	glo R11
(1)  177/     408 :                     	plo R10
(1)  178/     408 :                     	
(1)  179/     408 :                     $$again:	;this is the divisor doubling phase
(1)  180/     408 :                      	testsub R10,regarg2
(1)  181/     408 :                      	bnf $$computequot	;df=0 means it didn't fit
(1)  182/     408 :                     	phi R10	;R10=R10-regarg2
(1)  183/     408 :                     	glo R11
(1)  184/     408 :                     	plo R10 	
(1)  185/     408 :                      	shl2 regarg2	;y=y+y
(1)  186/     408 :                      	br $$again
(1)  187/     408 :                      	
(1)  188/     408 :                      $$computequot:	;here we're computing the quotient
(1)  189/     408 :                      	testsub regarg1,regarg2
(1)  190/     408 :                      	bnf $$testexit
(1)  191/     408 :                      	phi regarg1		;complete the subtraction
(1)  192/     408 :                      	glo R11
(1)  193/     408 :                      	plo regarg1
(1)  194/     408 :                      	inc retval
(1)  195/     408 :                      $$testexit:
(1)  196/     408 :                      	ghi rwork
(1)  197/     408 :                      	sm	;top of regarg2 is still on stack
(1)  198/     408 :                      	bnz $$ney0y
(1)  199/     408 :                      	glo regarg2
(1)  200/     408 :                      	str sp
(1)  201/     408 :                      	glo rwork
(1)  202/     408 :                      	sm	;test low order bytes
(1)  203/     408 :                      	bz	$$out	;if = we're done
(1)  204/     408 :                      $$ney0y:
(1)  205/     408 :                      	shl2 retval	;double quotient
(1)  206/     408 :                      	shrU2 regarg2	;halve divisor
(1)  207/     408 :                      	br $$computequot	;continue
(1)  208/     408 :                      $$out:
(1)  209/     408 :                      ;here the quotient is in retval, remainder in regarg1
(1)  210/     408 :                       	inc sp	;release work area
(1)  211/     408 :                     	lda sp	;recover
(1)  212/     408 :                     	plo R11	;bottom byte of R11
(1)  213/     408 :                     	popr R10 ;and all of R10
(1)  214/     408 :                     	cretn	;and we're done
(1)  215/     408 :                     
(1)  216/     408 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  217/     408 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  218/     408 :                     _divI2:
(1)  219/     408 :                         dec	sp	;leave a work area available
(1)  220/     408 :                         ghi regArg1
(1)  221/     408 :                         str sp	;save the sign of the 1st arg
(1)  222/     408 :                         shl
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 11 - 4/11/2017 11:00:49


(1)  223/     408 :                         bnf $$pos1	;if the 1st arg is -v
(1)  224/     408 :                         negI2 regArg1,regArg1 ;flip it to positive
(1)  225/     408 :                     $$pos1: ;1st is now +v, check 2nd
(1)  226/     408 :                         ghi regArg2
(1)  227/     408 :                         xor	
(1)  228/     408 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  229/     408 :                         ghi regArg2
(1)  230/     408 :                         shl
(1)  231/     408 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  232/     408 :                         negI2 regArg2,regArg2 ;flip it to +v
(1)  233/     408 :                     $$pos2: ; both args now +v
(1)  234/     408 :                      if MOMCPU=$1805
(1)  235/     408 :                         dec sp	;protect workarea on the 1802
(1)  236/     408 :                         Ccall _divU2	;call unsigned division
(1)  237/     408 :                         inc sp	;recover work area
(1)  238/     408 :                      else
(1)  239/     408 :                         Ccall _divU2	;call unsigned division
(1)  240/     408 : [234]                endif 
(1)  241/     408 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  242/     408 :                         lda	sp ;get back the sign bits and restore SP
(1)  243/     408 :                         shl
(1)  244/     408 :                         bnf $$done ;if the signs were different
(1)  245/     408 :                         negI2 retVal,retVal ;negate the quotient
(1)  246/     408 :                     $$done:
(1)  247/     408 :                         Cretn ;and we're done - I hope!
(1)  248/     408 : [125]                ENDIF
(1)  249/     408 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  250/     408 :                     	align 256    ;32 bit operations follow
(1)  251/     408 :                     _divu4:
(1)  252/     408 :                     ;This is an unsigned 32 bit restoring division
(1)  253/     408 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  254/     408 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  255/     408 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  256/     408 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  257/     408 :                     
(1)  258/     408 :                     	ldi 32		;set loop count
(1)  259/     408 :                     	plo memaddr	;in temp register
(1)  260/     408 :                     	ldi4 Rp1p2,0	;clear Rp1p2
(1)  261/     408 :                     $$loop:
(1)  262/     408 :                     	shL4 RL8	;shift bottom 32 bits left 1
(1)  263/     408 :                     	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  264/     408 :                     
(1)  265/     408 :                     	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  266/     408 :                     
(1)  267/     408 :                     	ani 0x80	;check the top bit
(1)  268/     408 :                     	bz $$norestore	;if it's 0
(1)  269/     408 :                     		glo RL8
(1)  270/     408 :                     		ani 0xfe	;turn off the bottom bit
(1)  271/     408 :                     		plo RL8
(1)  272/     408 :                     		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  273/     408 :                     	br $$endlp 	;else
(1)  274/     408 :                     $$norestore:
(1)  275/     408 :                     		glo RL8
(1)  276/     408 :                     		ori 1	;turn on the bottom bit
(1)  277/     408 :                     		plo RL8
(1)  278/     408 :                     	;end if
(1)  279/     408 :                     $$endlp:
(1)  280/     408 :                     	dec memaddr	;check the cycle count
(1)  281/     408 :                     	glo memaddr
(1)  282/     408 :                     	bnz $$loop	;back for more if needed
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 12 - 4/11/2017 11:00:49


(1)  283/     408 :                     	
(1)  284/     408 :                     	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  285/     408 :                     		
(1)  286/     408 :                     
(1)  287/     408 :                     _mulu4:
(1)  288/     408 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  289/     408 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  290/     408 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  291/     408 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  292/     408 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  293/     408 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  294/     408 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  295/     408 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  296/     408 :                     	;for 10 we subtract and shift
(1)  297/     408 :                     	;for 00 and 11 we just shift
(1)  298/     408 :                     
(1)  299/     408 :                         ldi4 rp1p2,0	;eventual product top 32 bits
(1)  300/     408 :                         ldi 32
(1)  301/     408 :                         plo memaddr		;cycle count
(1)  302/     408 :                         adi 0		;clear df
(1)  303/     408 :                     $$mloop:
(1)  304/     408 :                         glo RL8
(1)  305/     408 :                         ani 1		;isolate bottom bit of result
(1)  306/     408 :                         bnf	$$check_sub	;
(1)  307/     408 :                         bnz	$$shift		;that would be the 11 case
(1)  308/     408 :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  309/     408 :                         alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  310/     408 :                         br $$shift
(1)  311/     408 :                     $$check_sub:
(1)  312/     408 :                         bz $$shift	;that would be the 00 case
(1)  313/     408 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  314/     408 :                         alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  315/     408 :                     $$shift:
(1)  316/     408 :                         shRI4 Rp1p2		;shift the top 32 bits
(1)  317/     408 :                         shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  318/     408 :                     
(1)  319/     408 :                         dec memaddr		;cycle count
(1)  320/     408 :                         glo memaddr
(1)  321/     408 :                         bnz $$mloop		;repeat cycle once for each bit position
(1)  322/     408 :                         
(1)  323/     408 :                         cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  324/     408 :                     
(1)  325/     408 :                     	align 256
(1)  326/     408 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  327/     408 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  328/     408 :                     _divI4:
(1)  329/     408 :                         dec	sp	;leave a work area available
(1)  330/     408 :                         ghi RL8-1	;get the top of the dividend
(1)  331/     408 :                         str sp	;save the sign of the 1st arg
(1)  332/     408 :                         shl
(1)  333/     408 :                         bnf $$pos1	;if the 1st arg is -v
(1)  334/     408 :                         negI4 RL8,RL8 ;flip it to positive
(1)  335/     408 :                     $$pos1: ;1st is now +v, check 2nd
(1)  336/     408 :                         ghi RL10-1
(1)  337/     408 :                         xor	
(1)  338/     408 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  339/     408 :                         ghi RL10-1
(1)  340/     408 :                         shl
(1)  341/     408 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  342/     408 :                         negI4 RL10,RL10 ;flip it to +v
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 13 - 4/11/2017 11:00:49


(1)  343/     408 :                     $$pos2: ; both args now +v
(1)  344/     408 :                      if MOMCPU=$1805
(1)  345/     408 :                         dec sp	;protect workarea on the 1802
(1)  346/     408 :                         Ccall _divU4	;call unsigned division
(1)  347/     408 :                         inc sp	;recover work area
(1)  348/     408 :                      else
(1)  349/     408 :                         Ccall _divU4	;call unsigned division
(1)  350/     408 : [344]                endif 
(1)  351/     408 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  352/     408 :                         lda	sp ;get back the sign bits and restore SP
(1)  353/     408 :                         shl
(1)  354/     408 :                         bnf $$done ;if the signs were different
(1)  355/     408 :                         negI4 RL8,RL8 ;negate the quotient
(1)  356/     408 :                     $$done:
(1)  357/     408 :                         Cretn ;and we're done - I hope!
(1)  358/     408 : [249]                ENDIF
(1)  359/     408 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  360/     408 :                     _dubdabx:	
(1)  361/     408 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  362/     408 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  363/     408 :                     ;long interger is passed in rp1p2
(1)  364/     408 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  365/     408 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  366/     408 :                     ;r8-11 are used as temps
(1)  367/     408 :                     ;r8 is the working pointer
(1)  368/     408 :                     ;r15.0 is bit count(32) and the return value register
(1)  369/     408 :                     ;r9.0 is digit count
(1)  370/     408 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  371/     408 :                      if MOMCPU=$1805
(1)  372/     408 :                     	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  373/     408 :                     	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  374/     408 :                      else
(1)  375/     408 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  376/     408 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  377/     408 : [371]                endif
(1)  378/     408 :                     	cpy2 r15,r8 ;save address for now
(1)  379/     408 :                     	ldi 11	;digit count+1 for trailing 0
(1)  380/     408 :                     	plo r9
(1)  381/     408 :                     $$clrlp:	;clear the passed buffer
(1)  382/     408 :                     	ldi 0	
(1)  383/     408 :                     	str r8	;clear a byte
(1)  384/     408 :                     	inc r8
(1)  385/     408 :                     	dec r9
(1)  386/     408 :                     	glo r9	;check the count
(1)  387/     408 :                     	bnz $$clrlp ;back for more
(1)  388/     408 :                     	cpy2 r8,r15 ;get the address back
(1)  389/     408 :                     
(1)  390/     408 :                     	ldi 32	;bit count
(1)  391/     408 :                     	plo r15
(1)  392/     408 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  393/     408 :                     $$cktop:
(1)  394/     408 :                     	ghi rp1p2-1	;get the top bit of the number
(1)  395/     408 :                     	shl		;check for a 1
(1)  396/     408 :                     	bdf $$bitloop	;move on if we have one
(1)  397/     408 :                     	shl4 rp1p2	;shift the input number
(1)  398/     408 :                     	dec r15		;reduce the number of times to shift
(1)  399/     408 :                     	glo r15
(1)  400/     408 :                     	bnz $$cktop	;
(1)  401/     408 :                     	inc r15		;our whole number was 0 but force at least one pass
(1)  402/     408 :                     $$bitloop:
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 14 - 4/11/2017 11:00:49


(1)  403/     408 :                     	ldi 10	;digit count
(1)  404/     408 :                     	plo r9
(1)  405/     408 :                     $$dcklp:
(1)  406/     408 :                     	ldn r8 	;pick up a digit
(1)  407/     408 :                     	smi 5	;see if it's greater than 4
(1)  408/     408 :                     	bnf $$dnoadd ;if not, bypass add
(1)  409/     408 :                     	adi 0x08	;add the 5 black and 3 more
(1)  410/     408 :                     	str r8	;put it back
(1)  411/     408 :                     $$dnoadd:
(1)  412/     408 :                     	inc r8
(1)  413/     408 :                     	dec r9	;decrement digit count
(1)  414/     408 :                     	glo r9
(1)  415/     408 :                     	bnz $$dcklp ;and back for next digit
(1)  416/     408 :                     	
(1)  417/     408 :                     	shl4 rp1p2 ;shift the input number
(1)  418/     408 :                     	
(1)  419/     408 :                     	ldi 10	;load the digit count again
(1)  420/     408 :                     	plo r9
(1)  421/     408 :                     ;r8 is now just past the units location and ready to walk back
(1)  422/     408 :                     $$dshlp:
(1)  423/     408 :                     	dec r8	;walk back from 0's position
(1)  424/     408 :                     	ldn r8	;get the digit back
(1)  425/     408 :                     	shlc	;continue the shift
(1)  426/     408 :                     	phi r15 ;save it for the carry test
(1)  427/     408 :                     	ani 0x0f ;clear the 10 bit
(1)  428/     408 :                     	str r8	;put the digit back
(1)  429/     408 :                     	ghi r15	;now test for carry
(1)  430/     408 :                     	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  431/     408 :                     	dec r9	;decrement the digit count
(1)  432/     408 :                     	glo r9
(1)  433/     408 :                     	bnz $$dshlp ;back for more if needed
(1)  434/     408 :                     	
(1)  435/     408 :                     	dec r15
(1)  436/     408 :                     	glo r15
(1)  437/     408 :                     	bnz $$bitloop
(1)  438/     408 :                     	
(1)  439/     408 :                     	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     408 :                     	ldi 10		;digit count again
(1)  441/     408 :                     	plo r9
(1)  442/     408 :                     $$upnxt:
(1)  443/     408 :                     	ldn r8		;get digit
(1)  444/     408 :                     	ori 0x30	;make ascii
(1)  445/     408 :                     	str r8		;put it back
(1)  446/     408 :                     	inc r8		;next digit
(1)  447/     408 :                     	dec r9		;counter
(1)  448/     408 :                     	glo r9
(1)  449/     408 :                     	bnz $$upnxt	;upgrade all 10 spots
(1)  450/     408 :                      if MOMCPU=$1805	
(1)  451/     408 :                     	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  452/     408 :                      else
(1)  453/     408 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  454/     408 : [450]                endif
(1)  455/     408 :                     	sex memaddr	;set up
(1)  456/     408 :                     	ldi 10		;max number of 0's to skip
(1)  457/     408 :                     	sm		;desired number of digits to skip
(1)  458/     408 :                     	sex sp		;reset index register
(1)  459/     408 :                     	plo r9		;number of leading 0's to skip
(1)  460/     408 :                     $$cknext:
(1)  461/     408 :                     	ldn r15		;check digit
(1)  462/     408 :                     	smi 0x30	;for '0'
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(lcc1802epiloNW.inc) - page 15 - 4/11/2017 11:00:49


(1)  463/     408 :                     	bnz $$done
(1)  464/     408 :                     	inc r15		;next digit
(1)  465/     408 :                     	dec r9		;reduce count
(1)  466/     408 :                     	glo r9
(1)  467/     408 :                     	bnz $$cknext
(1)  468/     408 :                     $$done:
(1)  469/     408 :                     	cretn
(1)  470/     408 : [359]                ENDIF	
(1)  471/     408 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  472/     408 :                     _modU4:	;32 bit unsigned remainder
(1)  473/     408 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/     408 :                         Ccall _divU4
(1)  475/     408 :                         cpy4 RL8,Rp1p2
(1)  476/     408 :                         Cretn
(1)  477/     408 :                         
(1)  478/     408 :                     _modI4:	;32 bit signed remainder
(1)  479/     408 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  480/     408 :                         Ccall _divI4
(1)  481/     408 :                         cpy4 RL8,Rp1p2
(1)  482/     408 :                         Cretn
(1)  483/     408 : [471]                ENDIF	
(1)  484/     408 :                     
     334/     408 :                     	include IO1802.inc
(1)    1/     408 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     408 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     408 :                     	align 64
(1)    4/     440 :                     _putc:
(1)    5/     440 :                     _out5:	
(1)    6/     440 : 8C                  	glo	regArg1
(1)    7/     441 : 22                  	dec	sp
(1)    8/     442 : 52                  	str	sp
(1)    9/     443 : 65                  	out	5
(1)   10/     444 : (MACRO)             	Cretn
(1)   11/     446 :                     _inp:		;raw port input
(1)   12/     446 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     446 : 22                  	dec	sp	;work backwards
(1)   14/     447 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     449 : 73                  	stxd		
(1)   16/     44A : 8C                  	glo	regarg1	;get the port number
(1)   17/     44B : FA 07               	ani	0x07	;clean it
(1)   18/     44D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     44F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     451 : 73                  	stxd		;store it for execution
(1)   21/     452 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     456 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     457 : D8                  	sep	rt1	;execute it
(1)   24/     458 :                     ;we will come back to here with the input byte in D
(1)   25/     458 : 12                  	inc	sp	;step over the work area
(1)   26/     459 : AF                  	plo	retVal	;save it to return
(1)   27/     45A : F8 00               	ldi	0
(1)   28/     45C : BF                  	phi	retval	;clear top byte
(1)   29/     45D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     45E : 12                  	inc	sp	;and the D3
(1)   31/     45F : (MACRO)             	Cretn		;and we're done
(1)   32/     461 :                     	
(1)   33/     461 :                     _out:		;raw port output
(1)   34/     461 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     461 :                     		;this could be bolder:
(1)   36/     461 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     461 :                     		;then SEP sp
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm(IO1802.inc) - page 16 - 4/11/2017 11:00:50


(1)   38/     461 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     461 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     461 : 22                  	dec	sp	;work backwards
(1)   41/     462 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     464 : 73                  	stxd		
(1)   43/     465 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     469 : 8C                  	glo	regarg1	;get the port number
(1)   45/     46A : FA 07               	ani	0x07	;clean it
(1)   46/     46C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     46E : 73                  	stxd		;store it for execution
(1)   48/     46F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     470 : 52                  	str	sp	;store it where sp points
(1)   50/     471 : D8                  	sep	rt1	;execute it
(1)   51/     472 :                     ;we will come back to here with sp stepped up by one
(1)   52/     472 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     473 : 12                  	inc	sp	;and the D3
(1)   54/     474 : (MACRO)             	Cretn		;and we're done
(1)   55/     476 :                     	
(1)   56/     476 :                     	
(1)   57/     476 :                     
     335/     476 :                     
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 17 - 4/11/2017 11:00:50


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  BVTABLE80 :                    2DE C |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                   4/11/2017 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            10 C | *L11 :                          180 C |
 L13 :                          16B C | *L14 :                          177 C |
 L16 :                          178 C | *L17 :                          1DA C |
 L19 :                          1C5 C | *L20 :                          1D1 C |
 L22 :                          1D2 C | *L23 :                          26E C |
 L24 :                          218 C |  L25 :                          268 C |
 L27 :                          242 C |  L28 :                          268 C |
 L29 :                          260 C | *L3 :                            1E C |
 L30 :                          268 C |  L31 :                          26B C |
*L32 :                          26B C | *L34 :                          29E C |
 L35 :                          287 C | *L36 :                          28B C |
 L38 :                          28C C | *L39 :                          2F1 C |
*L5 :                            2E C | *L7 :                            99 C |
*L9 :                            C0 C |  LCC1802CPUSPEED :            493E0 - |
 LCC1802INIT :                  2F3 C |  LCC1802SUBOVHD :                 E - |
 LCCCODELOC :                     0 - | *LCCNOLONG :                      1 - |
*LCCNOMATH :                      1 - |  LCCSTACKLOC :                 103F - |
*LISTON :                         1 - | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MOMCPU :                      1805 - |
*MOMCPUNAME :                  1805 - |  MSLP90 :                       402 C |
*NESTMAX :                      100 - |  OUTIT80 :                      2DA C |
*PACKING :                        0 - | *PADDING :                        1 - |
*R0 :                             0 - | *R1 :                             1 - |
*R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - | *R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
*RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - | *RL10 :                           B - |
*RL12 :                           D - | *RL6 :                            7 - |
*RL8 :                            9 - | *RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
*RWORK :                          E - |  SETBITOFF80 :                  2D5 C |
 SP :                             2 - | *TIME :                    11:00:49 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 _0000085 :                     305 C |  _DELAY :                       274 C |
 _DIE85 :                       309 C | *_DIGITALREAD :                 2E8 C |
*_DIGITALWRITE :                2C0 C |  _DISP1 :                        20 C |
 _DISP12 :                       30 C |  _DISP42 :                       9F C |
 _DISPM2 :                      191 C |  _DISPMEMLOC :                   C6 C |
 _EF1 :                           4 C |  _EF1.RET0 :                      C C |
 _EF2 :                          12 C |  _EF2.RET0 :                     1A C |
 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 18 - 4/11/2017 11:00:50


*_INP :                         446 C |  _MAIN :                        1E5 C |
*_OLDUINOINCLUDER :             2AB C |  _ONEMS :                       400 C |
 _OUT :                         461 C | *_OUT4 :                        314 C |
*_OUT5 :                        440 C |  _PIN4 :                          3 C |
*_PUTC :                        440 C | *_SETQOFF :                     311 C |
*_SETQON :                      30E C |  __FORW2 :                      2EF C |
 __FORW3 :                      45D C | *__FORW4 :                      472 C |

    128 symbols
     70 unused symbols

 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 19 - 4/11/2017 11:00:50


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file boydmon4.oasm - page 20 - 4/11/2017 11:00:50


  codepages:
  ----------

STANDARD (0 changed characters)


0.12 seconds assembly time

   2043 lines source file
   3225 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
