 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 1 - 4/9/2017 10:10:53


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Sun Apr 09 10:10:51 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 00 F3            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _banner:
      15/       4 : 0F                  	db 15
      16/       5 : 0F                  	db 15
      17/       6 : 0F                  	db 15
      18/       7 : 0F                  	db 15
      19/       8 : 05                  	db 5
      20/       9 : 00                  	db 0
      21/       A : 08                  	db 8
      22/       B : 01                  	db 1
      23/       C : 0F                  	db 15
      24/       D :                     ;$$function start$$ _main
      25/       D :                     _main: ;copt is peeping your size 6 frame with oct 23 rules
      26/       D : (MACRO)             	reserve 4
      27/      11 :                     ;{
      28/      11 :                     ;	initleds();
      29/      11 :                     ;	out(7,2);
      30/      11 : 7A                   req
      31/      12 : 7B                   seq
      32/      13 : 22                   dec 2
      33/      14 : 67                   out 7
      34/      15 : 7A                   req
      35/      16 : (MACRO)             	ldaD R12,7; reg:acon
      36/      1A : (MACRO)             	ldaD R13,2; reg:acon
      37/      1E : (MACRO)             	Ccall _out; CALLI2(ar)
      38/      22 :                     ;	out(7,4);
      39/      22 : (MACRO)             	ldaD R12,7; reg:acon
      40/      26 : (MACRO)             	ldaD R13,4; reg:acon
      41/      2A : (MACRO)             	Ccall _out; CALLI2(ar)
      42/      2E :                     ;	out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);
      43/      2E : (MACRO)             	ldaD R12,7; reg:acon
      44/      32 : (MACRO)             	ldaD R13,15; reg:acon
      45/      36 : (MACRO)             	Ccall _out; CALLI2(ar)
      46/      3A : (MACRO)             	ldaD R12,7; reg:acon
      47/      3E : (MACRO)             	ldaD R13,15; reg:acon
      48/      42 : (MACRO)             	Ccall _out; CALLI2(ar)
      49/      46 : (MACRO)             	ldaD R12,7; reg:acon
      50/      4A : (MACRO)             	ldaD R13,15; reg:acon
      51/      4E : (MACRO)             	Ccall _out; CALLI2(ar)
      52/      52 : (MACRO)             	ldaD R12,7; reg:acon
      53/      56 : (MACRO)             	ldaD R13,15; reg:acon
      54/      5A : (MACRO)             	Ccall _out; CALLI2(ar)
      55/      5E : (MACRO)             	ldaD R12,7; reg:acon
      56/      62 : (MACRO)             	ldaD R13,15; reg:acon
      57/      66 : (MACRO)             	Ccall _out; CALLI2(ar)
      58/      6A : (MACRO)             	ldaD R12,7; reg:acon
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 2 - 4/9/2017 10:10:53


      59/      6E : (MACRO)             	ldaD R13,15; reg:acon
      60/      72 : (MACRO)             	Ccall _out; CALLI2(ar)
      61/      76 :                     L3:
      62/      76 :                     ;	while(1);
      63/      76 :                     L4:
      64/      76 : C0 00 76            	lbr L3
      65/      79 :                     ;}
      66/      79 :                     L1:
      67/      79 : (MACRO)             	release 4
      68/      7D : (MACRO)             	Cretn
      69/      7F :                     
      70/      7F :                     ;$$function end$$ _main
      71/      7F :                     ;$$function start$$ _delay
      72/      7F :                     _delay:		;framesize=10
      73/      7F : (MACRO)             	pushr R6
      74/      81 : (MACRO)             	pushr R7
      75/      83 : (MACRO)             	reserve 4; save room for outgoing arguments
      76/      87 : (MACRO)             	cpy2 R7,R12; function(2054) 1
      77/      8B :                     ;void delay(unsigned int howlong){
      78/      8B :                     ;	for (i=1;i!=howlong;i++){
      79/      8B : (MACRO)             	ldaD R6,1; reg:acon
      80/      8F : C0 00 97            	lbr L10
      81/      92 :                     L7:
      82/      92 :                     ;		oneMs();
      83/      92 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
      84/      96 :                     ;	}
      85/      96 :                     L8:
      86/      96 :                     ;	for (i=1;i!=howlong;i++){
      87/      96 : (MACRO)             	incm R6,1
      88/      97 :                     L10:
      89/      97 : (MACRO)             	jneU2 R6,R7,L7; NE
      90/      A9 :                     ;}
      91/      A9 :                     L6:
      92/      A9 : (MACRO)             	release 4; release room for outgoing arguments
      93/      AD : (MACRO)             	popf R7	;opt11.3
      94/      B0 : (MACRO)             	popl R6	;opt11.3
      95/      B4 : (MACRO)             	Cretn
      96/      B6 :                     
      97/      B6 :                     ;$$function end$$ _delay
      98/      B6 :                     ;$$function start$$ _olduinoincluder
      99/      B6 :                     _olduinoincluder:		;framesize=2
     100/      B6 :                     ;void olduinoincluder(){
     101/      B6 :                     ;	asm("\tinclude olduino.inc\n");
     102/      B6 :                     	include olduino.inc
(1)    1/      B6 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/      B6 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/      B6 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/      B6 :                     	align 64	;needed to make sure all on same page
(1)    5/      C0 :                     _digitalWrite:
(1)    6/      C0 : 8C                  	glo regArg1	;get the bit number
(1)    7/      C1 : FC DE               	adi $$bvtable&255	;add the table offset
(1)    8/      C3 : AE                  	plo memaddr
(1)    9/      C4 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/      C5 : BE                  	phi memaddr	
(1)   11/      C6 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/      C7 : A8                  	plo rt1		;save it in a temp
(1)   13/      C8 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/      CC : EE                  	sex memaddr	;prepare to change it
(1)   15/      CD : 8D                  	glo regArg2	;get on/off switch
(1)   16/      CE : 32 D5               	bz $$setbitoff
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(olduino.inc) - page 3 - 4/9/2017 10:10:53


(1)   17/      D0 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/      D0 : 88                  	glo rt1		;get the bit value back
(1)   19/      D1 : F1                  	or		;apply it
(1)   20/      D2 : 5E                  	str memaddr	;and save it
(1)   21/      D3 : 30 DA               	br $$outit	;go fnish up
(1)   22/      D5 :                     $$setbitoff:
(1)   23/      D5 : 88                  	glo rt1		;get the bit pattern
(1)   24/      D6 : FB FF               	xri 0xff	;reverse it
(1)   25/      D8 : F2                  	and		;combine it with the existing pin value
(1)   26/      D9 : 5E                  	str memaddr	;and save it
(1)   27/      DA :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/      DA :                     $$outit:
(1)   29/      DA : 64                  	out 4		;X was already set to memaddr
(1)   30/      DB : E2                  	sex sp		;reset X
(1)   31/      DC : (MACRO)             	cretn
(1)   32/      DE : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/      E6 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/      E6 :                     	align 8	;protect jump boundary
(1)   35/      E8 :                     _digitalRead:
(1)   36/      E8 : F8 00               	ldi 0		;default is false
(1)   37/      EA : AF                  	plo R15
(1)   38/      EB : BF                  	phi R15
(1)   39/      EC : 36 EF               	b3 +		;i have to reverse the sense of the external line
(1)   40/      EE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/      EF : (MACRO)             +	cretn
(1)   42/      F1 :                     
     103/      F1 :                     ;}
     104/      F1 :                     L11:
     105/      F1 : (MACRO)             	Cretn
     106/      F3 :                     
     107/      F3 :                     ;$$function end$$ _olduinoincluder
     108/      F3 :                     	include lcc1802epiloNW.inc
(1)    1/      F3 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/      F3 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/      F3 :                     ;this is the version published with the lcc1802121229 release
(1)    4/      F3 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/      F3 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/      F3 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/      F3 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/      F3 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/      F3 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/      F3 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/      F3 :                     ;feb 27 changed stack to start at 7fff
(1)   12/      F3 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/      F3 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/      F3 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/      F3 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/      F3 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/      F3 :                     ;16-09-20 allow stack relocation 
(1)   18/      F3 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/      F3 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/      F3 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/      F3 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/      F3 : =EH                 rwork	equ	memAddr	;work register
(1)   23/      F3 :                     lcc1802init:	
(1)   24/      F3 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   25/      F7 : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   26/      FB : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   27/      FB :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 4 - 4/9/2017 10:10:53


(1)   28/      FB : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   29/      FB : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   30/      FF : [26]                  ENDIF				;wjr 16-09-20
(1)   31/      FF : E2                  	sex	SP
(1)   32/     100 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   33/     104 : D3                  	sep	RPC
(1)   34/     105 :                     $$_00000:
(1)   35/     105 : (MACRO)             	Ccall _main	;call the main routine
(1)   36/     109 : C0 01 09            $$_die:	lbr	$$_die		;loop here when main returns
(1)   37/     10C : DE AD               	db	0xde,0xad
(1)   38/     10E :                     
(1)   39/     10E :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   40/     10E :                     _setqOn:
(1)   41/     10E : 7B                  	seq
(1)   42/     10F : (MACRO)             	Cretn
(1)   43/     111 :                     _setqOff:
(1)   44/     111 : 7A                  	req
(1)   45/     112 : (MACRO)             	Cretn
(1)   46/     114 :                     
(1)   47/     114 :                     _modU2:	;16 bit unsigned remainder
(1)   48/     114 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   49/     114 : (MACRO)                 Ccall _divU2
(1)   50/     118 : 8C                      glo regArg1
(1)   51/     119 : AF                      plo retVal
(1)   52/     11A : 9C                      ghi regArg1
(1)   53/     11B : BF                      phi retVal
(1)   54/     11C : (MACRO)                 Cretn
(1)   55/     11E :                         
(1)   56/     11E :                     _modI2:	;16 bit signed remainder
(1)   57/     11E :                     	; just calls the 16 bit division then puts remainder into return value
(1)   58/     11E : (MACRO)                 Ccall _divI2
(1)   59/     122 : 8C                      glo regArg1
(1)   60/     123 : AF                      plo retVal
(1)   61/     124 : 9C                      ghi regArg1
(1)   62/     125 : BF                      phi retVal
(1)   63/     126 : (MACRO)                 Cretn
(1)   64/     128 :                     
(1)   65/     128 :                     _out4:	
(1)   66/     128 : 8C                  	glo	regArg1
(1)   67/     129 : 22                  	dec	sp
(1)   68/     12A : 52                  	str	sp
(1)   69/     12B : 64                  	out	4
(1)   70/     12C : (MACRO)             	Cretn
(1)   71/     12E :                     
(1)   72/     12E :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   73/     12E :                     	align 256
(1)   74/     200 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   75/     200 : D3                  	sep     R3 ;go to subroutine
(1)   76/     201 : E2                  _call	sex	SP ;make sure X=SP
(1)   77/     202 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   78/     203 : 22                  	dec	sp
(1)   79/     204 : 73                  	stxd
(1)   80/     205 : 96                  	ghi	retAddr
(1)   81/     206 : 52                  	str	sp	
(1)   82/     207 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   83/     208 : A6                  	plo	retAddr
(1)   84/     209 : 93                  	ghi	RPC
(1)   85/     20A : B6                  	phi	retAddr
(1)   86/     20B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   87/     20C : B3                  	phi	RPC
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 5 - 4/9/2017 10:10:53


(1)   88/     20D : 46                  	lda	retAddr
(1)   89/     20E : A3                  	plo	RPC
(1)   90/     20F : 30 00               	br	_call-1
(1)   91/     211 :                     
(1)   92/     211 :                     ;Standard subroutine return 
(1)   93/     211 : D3                  	sep	RPC	;return to the original program
(1)   94/     212 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   95/     213 : A3                  	plo	RPC
(1)   96/     214 : 96                  	ghi	retAddr
(1)   97/     215 : B3                  	phi	RPC
(1)   98/     216 : 42                  	lda	SP	;pick up old return address
(1)   99/     217 : B6                  	phi	retAddr
(1)  100/     218 : 42                  	lda	SP
(1)  101/     219 : A6                  	plo	retAddr
(1)  102/     21A : 30 11               	br	_return-1
(1)  103/     21C :                     
(1)  104/     21C :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  105/     21C :                     ;subroutine overhead soaks up 27 instruction time.
(1)  106/     21C :                     ;each loop is 2 instruction times
(1)  107/     21C :                     ;so the number of loops needed is 
(1)  108/     21C :                     ;CPU speed/16000 less the 27 all divide by two
(1)  109/     21C : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  110/     21C :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  111/     21C : [109]               	ENDIF
(1)  112/     21C : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  113/     21C : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  114/     21C : =>FALSE              else
(1)  115/     21C :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  116/     21C : [112]                endif 
(1)  117/     21C : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  118/     21E : FF 01               $$mslp:	smi	1
(1)  119/     220 : 3A 1E               	bnz	$$mslp
(1)  120/     222 : (MACRO)             	Cretn
(1)  121/     224 :                     
(1)  122/     224 :                     
(1)  123/     224 :                     	
(1)  124/     224 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  125/     224 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  126/     224 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  127/     224 : (MACRO)             	ld2z retval
(1)  128/     228 :                     $$mulrlp:
(1)  129/     228 : (MACRO)             	shru2 regarg2
(1)  130/     22E : 3B 3A               	bnf $$mulrnoadd
(1)  131/     230 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  132/     230 : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  133/     23A :                     $$mulrnoadd:
(1)  134/     23A : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  135/     23B : 3A 40               	bnz $$mulrshft	;nope, continue
(1)  136/     23D : 8D                  	glo regarg2	;check bottom byte
(1)  137/     23E : 32 48               	bz $$mulrdone
(1)  138/     240 :                     $$mulrshft:
(1)  139/     240 : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  140/     246 : 30 28               	br $$mulrlp
(1)  141/     248 :                     $$mulrdone:		;here the product is in retval
(1)  142/     248 : (MACRO)             	cretn
(1)  143/     24A :                     
(1)  144/     24A :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  145/     24A :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  146/     24A :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  147/     24A :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 6 - 4/9/2017 10:10:53


(1)  148/     24A :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  149/     24A :                     	;regarg1 to hold develop remainder, 
(1)  150/     24A :                     	;R10 to hold working dividend R11.0 as a temp
(1)  151/     24A :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  152/     24A :                     				;result in D, rwork.hi, DF
(1)  153/     24A :                     	glo reg2
(1)  154/     24A :                     	str sp
(1)  155/     24A :                     	glo reg1
(1)  156/     24A :                     	sm
(1)  157/     24A :                     	plo R11
(1)  158/     24A :                     	ghi reg2
(1)  159/     24A :                     	str sp
(1)  160/     24A :                     	ghi reg1
(1)  161/     24A :                     	smb
(1)  162/     24A :                     	endm
(1)  163/     24A :                     	
(1)  164/     24A : (MACRO)             	pushf R10	;save R10 & leave stack down 1
(1)  165/     24F : 8B                  	glo R11		;and bottom
(1)  166/     250 : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  167/     251 : (MACRO)             	cpy2 R10,regarg1
(1)  168/     255 : (MACRO)             	ld2z retval	;quotient
(1)  169/     259 : (MACRO)             	cpy2 rwork,regarg2
(1)  170/     25D :                     	
(1)  171/     25D : (MACRO)             	testsub R10,regarg2
(1)  172/     266 : 3B 81               	bnf $$computequot	;DF=0 means it didn't fit
(1)  173/     268 : BA                  	phi R10	;R10=R10-regarg2
(1)  174/     269 : 8B                  	glo R11
(1)  175/     26A : AA                  	plo R10
(1)  176/     26B :                     	
(1)  177/     26B :                     $$again:	;this is the divisor doubling phase
(1)  178/     26B : (MACRO)              	testsub R10,regarg2
(1)  179/     274 : 3B 81                	bnf $$computequot	;df=0 means it didn't fit
(1)  180/     276 : BA                  	phi R10	;R10=R10-regarg2
(1)  181/     277 : 8B                  	glo R11
(1)  182/     278 : AA                  	plo R10 	
(1)  183/     279 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  184/     27F : 30 6B                	br $$again
(1)  185/     281 :                      	
(1)  186/     281 :                      $$computequot:	;here we're computing the quotient
(1)  187/     281 : (MACRO)              	testsub regarg1,regarg2
(1)  188/     28A : 3B 90                	bnf $$testexit
(1)  189/     28C : BC                   	phi regarg1		;complete the subtraction
(1)  190/     28D : 8B                   	glo R11
(1)  191/     28E : AC                   	plo regarg1
(1)  192/     28F : 1F                   	inc retval
(1)  193/     290 :                      $$testexit:
(1)  194/     290 : 9E                   	ghi rwork
(1)  195/     291 : F7                   	sm	;top of regarg2 is still on stack
(1)  196/     292 : 3A 9A                	bnz $$ney0y
(1)  197/     294 : 8D                   	glo regarg2
(1)  198/     295 : 52                   	str sp
(1)  199/     296 : 8E                   	glo rwork
(1)  200/     297 : F7                   	sm	;test low order bytes
(1)  201/     298 : 32 A8                	bz	$$out	;if = we're done
(1)  202/     29A :                      $$ney0y:
(1)  203/     29A : (MACRO)              	shl2 retval	;double quotient
(1)  204/     2A0 : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  205/     2A6 : 30 81                	br $$computequot	;continue
(1)  206/     2A8 :                      $$out:
(1)  207/     2A8 :                      ;here the quotient is in retval, remainder in regarg1
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 7 - 4/9/2017 10:10:53


(1)  208/     2A8 : 12                    	inc sp	;release work area
(1)  209/     2A9 : 42                  	lda sp	;recover
(1)  210/     2AA : AB                  	plo R11	;bottom byte of R11
(1)  211/     2AB : (MACRO)             	popr R10 ;and all of R10
(1)  212/     2B0 : (MACRO)             	cretn	;and we're done
(1)  213/     2B2 :                     
(1)  214/     2B2 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  215/     2B2 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  216/     2B2 :                     _divI2:
(1)  217/     2B2 : 22                      dec	sp	;leave a work area available
(1)  218/     2B3 : 9C                      ghi regArg1
(1)  219/     2B4 : 52                      str sp	;save the sign of the 1st arg
(1)  220/     2B5 : FE                      shl
(1)  221/     2B6 : 3B C1                   bnf $$pos1	;if the 1st arg is -v
(1)  222/     2B8 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  223/     2C1 :                     $$pos1: ;1st is now +v, check 2nd
(1)  224/     2C1 : 9D                      ghi regArg2
(1)  225/     2C2 : F3                      xor	
(1)  226/     2C3 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  227/     2C4 : 9D                      ghi regArg2
(1)  228/     2C5 : FE                      shl
(1)  229/     2C6 : 3B D1                   bnf $$pos2	;if the 2nd arg is -v
(1)  230/     2C8 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  231/     2D1 :                     $$pos2: ; both args now +v
(1)  232/     2D1 : =>TRUE               if MOMCPU=$1805
(1)  233/     2D1 : 22                      dec sp	;protect workarea on the 1802
(1)  234/     2D2 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  235/     2D6 : 12                      inc sp	;recover work area
(1)  236/     2D7 : =>FALSE              else
(1)  237/     2D7 :                         Ccall _divU2	;call unsigned division
(1)  238/     2D7 : [232]                endif 
(1)  239/     2D7 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  240/     2D7 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  241/     2D8 : FE                      shl
(1)  242/     2D9 : 3B E4                   bnf $$done ;if the signs were different
(1)  243/     2DB : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  244/     2E4 :                     $$done:
(1)  245/     2E4 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  246/     2E6 :                     
(1)  247/     2E6 :                     
(1)  248/     2E6 :                     	align 256    ;32 bit operations follow
(1)  249/     300 :                     _divu4:
(1)  250/     300 :                     ;This is an unsigned 32 bit restoring division
(1)  251/     300 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  252/     300 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  253/     300 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  254/     300 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  255/     300 :                     
(1)  256/     300 : F8 20               	ldi 32		;set loop count
(1)  257/     302 : AE                  	plo memaddr	;in temp register
(1)  258/     303 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  259/     30F :                     $$loop:
(1)  260/     30F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  261/     31B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  262/     327 :                     
(1)  263/     327 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  264/     33D :                     
(1)  265/     33D : FA 80               	ani 0x80	;check the top bit
(1)  266/     33F : 32 5D               	bz $$norestore	;if it's 0
(1)  267/     341 : 89                  		glo RL8
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 8 - 4/9/2017 10:10:53


(1)  268/     342 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  269/     344 : A9                  		plo RL8
(1)  270/     345 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  271/     35B : 30 61               	br $$endlp 	;else
(1)  272/     35D :                     $$norestore:
(1)  273/     35D : 89                  		glo RL8
(1)  274/     35E : F9 01               		ori 1	;turn on the bottom bit
(1)  275/     360 : A9                  		plo RL8
(1)  276/     361 :                     	;end if
(1)  277/     361 :                     $$endlp:
(1)  278/     361 : 2E                  	dec memaddr	;check the cycle count
(1)  279/     362 : 8E                  	glo memaddr
(1)  280/     363 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  281/     365 :                     	
(1)  282/     365 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  283/     367 :                     		
(1)  284/     367 :                     
(1)  285/     367 :                     _mulu4:
(1)  286/     367 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  287/     367 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  288/     367 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  289/     367 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  290/     367 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  291/     367 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  292/     367 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  293/     367 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  294/     367 :                     	;for 10 we subtract and shift
(1)  295/     367 :                     	;for 00 and 11 we just shift
(1)  296/     367 :                     
(1)  297/     367 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  298/     373 : F8 20                   ldi 32
(1)  299/     375 : AE                      plo memaddr		;cycle count
(1)  300/     376 : FC 00                   adi 0		;clear df
(1)  301/     378 :                     $$mloop:
(1)  302/     378 : 89                      glo RL8
(1)  303/     379 : FA 01                   ani 1		;isolate bottom bit of result
(1)  304/     37B : 3B 97                   bnf	$$check_sub	;
(1)  305/     37D : 3A AF                   bnz	$$shift		;that would be the 11 case
(1)  306/     37F :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  307/     37F : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  308/     395 : 30 AF                   br $$shift
(1)  309/     397 :                     $$check_sub:
(1)  310/     397 : 32 AF                   bz $$shift	;that would be the 00 case
(1)  311/     399 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  312/     399 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  313/     3AF :                     $$shift:
(1)  314/     3AF : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  315/     3BD : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  316/     3C9 :                     
(1)  317/     3C9 : 2E                      dec memaddr		;cycle count
(1)  318/     3CA : 8E                      glo memaddr
(1)  319/     3CB : 3A 78                   bnz $$mloop		;repeat cycle once for each bit position
(1)  320/     3CD :                         
(1)  321/     3CD : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  322/     3CF :                     
(1)  323/     3CF :                     	align 256
(1)  324/     400 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  325/     400 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  326/     400 :                     _divI4:
(1)  327/     400 : 22                      dec	sp	;leave a work area available
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 9 - 4/9/2017 10:10:53


(1)  328/     401 : 98                      ghi RL8-1	;get the top of the dividend
(1)  329/     402 : 52                      str sp	;save the sign of the 1st arg
(1)  330/     403 : FE                      shl
(1)  331/     404 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  332/     406 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  333/     426 :                     $$pos1: ;1st is now +v, check 2nd
(1)  334/     426 : 9A                      ghi RL10-1
(1)  335/     427 : F3                      xor	
(1)  336/     428 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  337/     429 : 9A                      ghi RL10-1
(1)  338/     42A : FE                      shl
(1)  339/     42B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  340/     42D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  341/     44D :                     $$pos2: ; both args now +v
(1)  342/     44D : =>TRUE               if MOMCPU=$1805
(1)  343/     44D : 22                      dec sp	;protect workarea on the 1802
(1)  344/     44E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  345/     452 : 12                      inc sp	;recover work area
(1)  346/     453 : =>FALSE              else
(1)  347/     453 :                         Ccall _divU4	;call unsigned division
(1)  348/     453 : [342]                endif 
(1)  349/     453 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  350/     453 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  351/     454 : FE                      shl
(1)  352/     455 : 3B 77                   bnf $$done ;if the signs were different
(1)  353/     457 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  354/     477 :                     $$done:
(1)  355/     477 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  356/     479 :                     
(1)  357/     479 :                     _dubdabx:	
(1)  358/     479 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  359/     479 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  360/     479 :                     ;long interger is passed in rp1p2
(1)  361/     479 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  362/     479 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  363/     479 :                     ;r8-11 are used as temps
(1)  364/     479 :                     ;r8 is the working pointer
(1)  365/     479 :                     ;r15.0 is bit count(32) and the return value register
(1)  366/     479 :                     ;r9.0 is digit count
(1)  367/     479 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  368/     479 : =>TRUE               if MOMCPU=$1805
(1)  369/     479 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  370/     485 : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  371/     491 : =>FALSE              else
(1)  372/     491 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  373/     491 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  374/     491 : [368]                endif
(1)  375/     491 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  376/     495 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  377/     497 : A9                  	plo r9
(1)  378/     498 :                     $$clrlp:	;clear the passed buffer
(1)  379/     498 : F8 00               	ldi 0	
(1)  380/     49A : 58                  	str r8	;clear a byte
(1)  381/     49B : 18                  	inc r8
(1)  382/     49C : 29                  	dec r9
(1)  383/     49D : 89                  	glo r9	;check the count
(1)  384/     49E : 3A 98               	bnz $$clrlp ;back for more
(1)  385/     4A0 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  386/     4A4 :                     
(1)  387/     4A4 : F8 20               	ldi 32	;bit count
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 10 - 4/9/2017 10:10:53


(1)  388/     4A6 : AF                  	plo r15
(1)  389/     4A7 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  390/     4A7 :                     $$cktop:
(1)  391/     4A7 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  392/     4A8 : FE                  	shl		;check for a 1
(1)  393/     4A9 : 33 BC               	bdf $$bitloop	;move on if we have one
(1)  394/     4AB : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  395/     4B7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  396/     4B8 : 8F                  	glo r15
(1)  397/     4B9 : 3A A7               	bnz $$cktop	;
(1)  398/     4BB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  399/     4BC :                     $$bitloop:
(1)  400/     4BC : F8 0A               	ldi 10	;digit count
(1)  401/     4BE : A9                  	plo r9
(1)  402/     4BF :                     $$dcklp:
(1)  403/     4BF : 08                  	ldn r8 	;pick up a digit
(1)  404/     4C0 : FF 05               	smi 5	;see if it's greater than 4
(1)  405/     4C2 : 3B C7               	bnf $$dnoadd ;if not, bypass add
(1)  406/     4C4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  407/     4C6 : 58                  	str r8	;put it back
(1)  408/     4C7 :                     $$dnoadd:
(1)  409/     4C7 : 18                  	inc r8
(1)  410/     4C8 : 29                  	dec r9	;decrement digit count
(1)  411/     4C9 : 89                  	glo r9
(1)  412/     4CA : 3A BF               	bnz $$dcklp ;and back for next digit
(1)  413/     4CC :                     	
(1)  414/     4CC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  415/     4D8 :                     	
(1)  416/     4D8 : F8 0A               	ldi 10	;load the digit count again
(1)  417/     4DA : A9                  	plo r9
(1)  418/     4DB :                     ;r8 is now just past the units location and ready to walk back
(1)  419/     4DB :                     $$dshlp:
(1)  420/     4DB : 28                  	dec r8	;walk back from 0's position
(1)  421/     4DC : 08                  	ldn r8	;get the digit back
(1)  422/     4DD : 7E                  	shlc	;continue the shift
(1)  423/     4DE : BF                  	phi r15 ;save it for the carry test
(1)  424/     4DF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  425/     4E1 : 58                  	str r8	;put the digit back
(1)  426/     4E2 : 9F                  	ghi r15	;now test for carry
(1)  427/     4E3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  428/     4E5 : 29                  	dec r9	;decrement the digit count
(1)  429/     4E6 : 89                  	glo r9
(1)  430/     4E7 : 3A DB               	bnz $$dshlp ;back for more if needed
(1)  431/     4E9 :                     	
(1)  432/     4E9 : 2F                  	dec r15
(1)  433/     4EA : 8F                  	glo r15
(1)  434/     4EB : 3A BC               	bnz $$bitloop
(1)  435/     4ED :                     	
(1)  436/     4ED : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  437/     4F1 : F8 0A               	ldi 10		;digit count again
(1)  438/     4F3 : A9                  	plo r9
(1)  439/     4F4 :                     $$upnxt:
(1)  440/     4F4 : 08                  	ldn r8		;get digit
(1)  441/     4F5 : F9 30               	ori 0x30	;make ascii
(1)  442/     4F7 : 58                  	str r8		;put it back
(1)  443/     4F8 : 18                  	inc r8		;next digit
(1)  444/     4F9 : 29                  	dec r9		;counter
(1)  445/     4FA : 89                  	glo r9
(1)  446/     4FB : 3A F4               	bnz $$upnxt	;upgrade all 10 spots
(1)  447/     4FD : =>TRUE               if MOMCPU=$1805	
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(lcc1802epiloNW.inc) - page 11 - 4/9/2017 10:10:53


(1)  448/     4FD : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  449/     505 : =>FALSE              else
(1)  450/     505 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  451/     505 : [447]                endif
(1)  452/     505 : EE                  	sex memaddr	;set up
(1)  453/     506 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  454/     508 : F7                  	sm		;desired number of digits to skip
(1)  455/     509 : E2                  	sex sp		;reset index register
(1)  456/     50A : A9                  	plo r9		;number of leading 0's to skip
(1)  457/     50B :                     $$cknext:
(1)  458/     50B : 0F                  	ldn r15		;check digit
(1)  459/     50C : FF 30               	smi 0x30	;for '0'
(1)  460/     50E : 3A 15               	bnz $$done
(1)  461/     510 : 1F                  	inc r15		;next digit
(1)  462/     511 : 29                  	dec r9		;reduce count
(1)  463/     512 : 89                  	glo r9
(1)  464/     513 : 3A 0B               	bnz $$cknext
(1)  465/     515 :                     $$done:
(1)  466/     515 : (MACRO)             	cretn
(1)  467/     517 :                     	
(1)  468/     517 :                     	
(1)  469/     517 :                     _modU4:	;32 bit unsigned remainder
(1)  470/     517 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  471/     517 : (MACRO)                 Ccall _divU4
(1)  472/     51B : (MACRO)                 cpy4 RL8,Rp1p2
(1)  473/     523 : (MACRO)                 Cretn
(1)  474/     525 :                         
(1)  475/     525 :                     _modI4:	;32 bit signed remainder
(1)  476/     525 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  477/     525 : (MACRO)                 Ccall _divI4
(1)  478/     529 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  479/     531 : (MACRO)                 Cretn
(1)  480/     533 :                     	
(1)  481/     533 :                     
     109/     533 :                     	include IO1802.inc
(1)    1/     533 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     533 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     533 :                     	align 64
(1)    4/     540 :                     _putc:
(1)    5/     540 :                     _out5:	
(1)    6/     540 : 8C                  	glo	regArg1
(1)    7/     541 : 22                  	dec	sp
(1)    8/     542 : 52                  	str	sp
(1)    9/     543 : 65                  	out	5
(1)   10/     544 : (MACRO)             	Cretn
(1)   11/     546 :                     _inp:		;raw port input
(1)   12/     546 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     546 : 22                  	dec	sp	;work backwards
(1)   14/     547 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     549 : 73                  	stxd		
(1)   16/     54A : 8C                  	glo	regarg1	;get the port number
(1)   17/     54B : FA 07               	ani	0x07	;clean it
(1)   18/     54D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     54F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     551 : 73                  	stxd		;store it for execution
(1)   21/     552 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     556 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     557 : D8                  	sep	rt1	;execute it
(1)   24/     558 :                     ;we will come back to here with the input byte in D
(1)   25/     558 : 12                  	inc	sp	;step over the work area
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm(IO1802.inc) - page 12 - 4/9/2017 10:10:53


(1)   26/     559 : AF                  	plo	retVal	;save it to return
(1)   27/     55A : F8 00               	ldi	0
(1)   28/     55C : BF                  	phi	retval	;clear top byte
(1)   29/     55D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     55E : 12                  	inc	sp	;and the D3
(1)   31/     55F : (MACRO)             	Cretn		;and we're done
(1)   32/     561 :                     	
(1)   33/     561 :                     _out:		;raw port output
(1)   34/     561 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     561 :                     		;this could be bolder:
(1)   36/     561 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     561 :                     		;then SEP sp
(1)   38/     561 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     561 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     561 : 22                  	dec	sp	;work backwards
(1)   41/     562 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     564 : 73                  	stxd		
(1)   43/     565 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     569 : 8C                  	glo	regarg1	;get the port number
(1)   45/     56A : FA 07               	ani	0x07	;clean it
(1)   46/     56C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     56E : 73                  	stxd		;store it for execution
(1)   48/     56F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     570 : 52                  	str	sp	;store it where sp points
(1)   50/     571 : D8                  	sep	rt1	;execute it
(1)   51/     572 :                     ;we will come back to here with sp stepped up by one
(1)   52/     572 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     573 : 12                  	inc	sp	;and the D3
(1)   54/     574 : (MACRO)             	Cretn		;and we're done
(1)   55/     576 :                     	
(1)   56/     576 :                     	
(1)   57/     576 :                     
     110/     576 :                     
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 13 - 4/9/2017 10:10:53


  symbol table (* = unused):
  ------------------------

 AGAIN67 :                      26B C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - |  BITLOOP72 :                    4BC C |
*BRANCHEXT :                      0 - |  BVTABLE51 :                     DE C |
*CASESENSITIVE :                  0 - |  CHECK_SUB70 :                  397 C |
 CKNEXT72 :                     50B C |  CKTOP72 :                      4A7 C |
 CLRLP72 :                      498 C |  COMPUTEQUOT67 :                281 C |
*CONSTPI :        3.141592653589793 - | *DATE :                    4/9/2017 - |
 DCKLP72 :                      4BF C |  DNOADD72 :                     4C7 C |
 DONE68 :                       2E4 C |  DONE71 :                       477 C |
 DONE72 :                       515 C |  DSHLP72 :                      4DB C |
 ENDLP69 :                      361 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            79 C |  L10 :                           97 C |
*L11 :                           F1 C |  L3 :                            76 C |
*L4 :                            76 C | *L6 :                            A9 C |
 L7 :                            92 C | *L8 :                            96 C |
 LCC1802CPUSPEED :            493E0 - |  LCC1802INIT :                   F3 C |
 LCC1802SUBOVHD :                 E - |  LCCCODELOC :                     0 - |
 LCCSTACKLOC :                 103F - | *LISTON :                         1 - |
 LOOP69 :                       30F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP70 :                      378 C |
 MOMCPU :                      1805 - | *MOMCPUNAME :                  1805 - |
 MSLP65 :                       21E C |  MULRDONE66 :                   248 C |
 MULRLP66 :                     228 C |  MULRNOADD66 :                  23A C |
 MULRSHFT66 :                   240 C | *NESTMAX :                      100 - |
 NEY0Y67 :                      29A C |  NORESTORE69 :                  35D C |
 OUT67 :                        2A8 C |  OUTIT51 :                       DA C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS168 :                       2C1 C |  POS171 :                       426 C |
 POS268 :                       2D1 C |  POS271 :                       44D C |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
*RL12 :                           D - | *RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SETBITOFF51 :                   D5 C |
 SHIFT70 :                      3AF C |  SP :                             2 - |
 TESTEXIT67 :                   290 C | *TIME :                    10:10:52 - |
*TRUE :                           1 - |  UPNXT72 :                      4F4 C |
*VERSION :                     142F - |  _0000056 :                     105 C |
*_BANNER :                        4 C |  _CALL :                        201 C |
*_DELAY :                        7F C |  _DIE56 :                       109 C |
 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 14 - 4/9/2017 10:10:53


*_DIGITALREAD :                  E8 C | *_DIGITALWRITE :                 C0 C |
 _DIVI2 :                       2B2 C |  _DIVI4 :                       400 C |
 _DIVU2 :                       24A C |  _DIVU4 :                       300 C |
*_DUBDABX :                     479 C | *_INP :                         546 C |
 _MAIN :                          D C | *_MODI2 :                       11E C |
*_MODI4 :                       525 C | *_MODU2 :                       114 C |
*_MODU4 :                       517 C | *_MULU2 :                       224 C |
*_MULU4 :                       367 C | *_OLDUINOINCLUDER :              B6 C |
 _ONEMS :                       21C C |  _OUT :                         561 C |
*_OUT4 :                        128 C | *_OUT5 :                        540 C |
 _PIN4 :                          3 C | *_PUTC :                        540 C |
 _RETURN :                      212 C | *_SETQOFF :                     111 C |
*_SETQON :                      10E C |  __FORW0 :                       EF C |
 __FORW1 :                      55D C | *__FORW2 :                      572 C |

    142 symbols
     61 unused symbols

 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 15 - 4/9/2017 10:10:53


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
TESTSUB                               | ZEXT                                 
ZEXT4                                 |

    107 macros

 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 16 - 4/9/2017 10:10:53


 AS V1.42 Beta [Bld 87] - source file boydblink.oasm - page 17 - 4/9/2017 10:10:53


  codepages:
  ----------

STANDARD (0 changed characters)


0.12 seconds assembly time

   1815 lines source file
   2786 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
