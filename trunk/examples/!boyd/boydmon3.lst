 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 1 - 4/10/2017 11:16:17


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Mon Apr 10 11:16:15 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 03 F3            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     ;$$function start$$ _ef1
      15/       4 :                     _ef1:		;framesize=2
      16/       4 :                     ;unsigned char ef1(){
      17/       4 :                     ;	asm(" rldi 15,1\n"
      18/       4 :                     ;	return 0; //if the assembly doesn't return, EF1 is not active
      19/       4 : 68 CF 00 01          rldi 15,1
      20/       8 : 3C 0C                bn1 .ret0
      21/       A : (MACRO)              cretn ;will return a '1'
      22/       C :                     .ret0: ;will drop thru to return 0
      23/       C : (MACRO)             	ld2z R15
      24/      10 :                     L1:
      25/      10 : (MACRO)             	Cretn
      26/      12 :                     
      27/      12 :                     ;$$function end$$ _ef1
      28/      12 :                     ;$$function start$$ _ef2
      29/      12 :                     _ef2:		;framesize=2
      30/      12 :                     ;unsigned char ef2(){
      31/      12 :                     ;	asm(" rldi 15,1\n"
      32/      12 :                     ;	return 0; //if the assembly doesn't return, EF1 is not active
      33/      12 : 68 CF 00 01          rldi 15,1
      34/      16 : 3D 1A                bn2 .ret0
      35/      18 : (MACRO)              cretn ;will return a '1'
      36/      1A :                     .ret0: ;will drop thru to return 0
      37/      1A : (MACRO)             	ld2z R15
      38/      1E :                     L3:
      39/      1E : (MACRO)             	Cretn
      40/      20 :                     
      41/      20 :                     ;$$function end$$ _ef2
      42/      20 :                     ;$$function start$$ _disp1
      43/      20 :                     _disp1:		;framesize=2
      44/      20 :                     ;void disp1(unsigned char d){//display a hex digit as two dec digits 00 to 15
      45/      20 :                     ;	asm(" glo 12\n smi 10\n bdf $$big\n" //df set means no overflow
      46/      20 : 8C                   glo 12
      47/      21 : FF 0A                smi 10
      48/      23 : 33 2A                bdf $$big
      49/      25 : F8 0F                ldi 15
      50/      27 : BC                   phi 12
      51/      28 : 30 2E                br $$disp
      52/      2A : AC                  $$big: plo 12
      53/      2B : F8 01                ldi 1
      54/      2D : BC                   phi 12
      55/      2E :                     $$disp:
      56/      2E : 22                   dec 2
      57/      2F : 8C                   glo 12
      58/      30 : 52                   str 2
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 2 - 4/10/2017 11:16:17


      59/      31 : 67                   out 7
      60/      32 : 22                   dec 2
      61/      33 : 9C                   ghi 12
      62/      34 : 52                   str 2
      63/      35 : 67                   out 7
      64/      36 :                     ;}
      65/      36 :                     L5:
      66/      36 : (MACRO)             	Cretn
      67/      38 :                     
      68/      38 :                     ;$$function end$$ _disp1
      69/      38 :                     ;$$function start$$ _disp2
      70/      38 :                     _disp2:		;framesize=6
      71/      38 : (MACRO)             	reserve 4
      72/      3C : (MACRO)             	st2 R12,'O',sp,(6+1); flag1 
      73/      49 : (MACRO)             	ldA2 R11,'O',sp,(6+1); reg:addr
      74/      51 : (MACRO)             	ld2 R10,'O',sp,(6+1) ;reg:INDIRI2(addr)
      75/      5D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
      76/      5F :                     ;void disp2(unsigned char xy){//display a byte as 4 decimal digits xx yy
      77/      5F :                     ;	disp1(xy&0x0f);//bottom digit
      78/      5F : (MACRO)             	ld1 R11,'O',sp,(6+1)
      79/      69 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      80/      6C : (MACRO)             	alu2I R11,R11,15,ani,ani
      81/      74 :                     	;removed ?	cpy2 R11,R11
      82/      74 : (MACRO)             	cpy1 R12,R11
      83/      76 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      84/      79 : (MACRO)             	Ccall _disp1
      85/      7D :                     ;	disp1(xy>>4);
      86/      7D : (MACRO)             	ld1 R11,'O',sp,(6+1)
      87/      87 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      88/      8A : (MACRO)             	shrI2I R11,4
      89/      AA : (MACRO)             	cpy1 R12,R11
      90/      AC : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      91/      AF : (MACRO)             	Ccall _disp1
      92/      B3 :                     ;}
      93/      B3 :                     L7:
      94/      B3 : (MACRO)             	release 4
      95/      B7 : (MACRO)             	Cretn
      96/      B9 :                     
      97/      B9 :                     ;$$function end$$ _disp2
      98/      B9 :                     ;$$function start$$ _disp12
      99/      B9 :                     _disp12:		;framesize=6
     100/      B9 : (MACRO)             	reserve 4
     101/      BD :                     ;void disp12(){
     102/      BD :                     ;	initleds();
     103/      BD :                     ;	out(7,2);
     104/      BD : 7A                   req
     105/      BE : 7B                   seq
     106/      BF : 22                   dec 2
     107/      C0 : 67                   out 7
     108/      C1 : 7A                   req
     109/      C2 : (MACRO)             	ldaD R12,7; reg:acon
     110/      C6 : (MACRO)             	ldaD R13,2; reg:acon
     111/      CA : (MACRO)             	Ccall _out; CALLI2(ar)
     112/      CE :                     ;	out(7,1);
     113/      CE : (MACRO)             	ldaD R12,7; reg:acon
     114/      D2 : (MACRO)             	ldaD R13,1; reg:acon
     115/      D6 : (MACRO)             	Ccall _out; CALLI2(ar)
     116/      DA :                     ;	out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);
     117/      DA : (MACRO)             	ldaD R12,7; reg:acon
     118/      DE : (MACRO)             	ldaD R13,15; reg:acon
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 3 - 4/10/2017 11:16:17


     119/      E2 : (MACRO)             	Ccall _out; CALLI2(ar)
     120/      E6 : (MACRO)             	ldaD R12,7; reg:acon
     121/      EA : (MACRO)             	ldaD R13,15; reg:acon
     122/      EE : (MACRO)             	Ccall _out; CALLI2(ar)
     123/      F2 : (MACRO)             	ldaD R12,7; reg:acon
     124/      F6 : (MACRO)             	ldaD R13,15; reg:acon
     125/      FA : (MACRO)             	Ccall _out; CALLI2(ar)
     126/      FE : (MACRO)             	ldaD R12,7; reg:acon
     127/     102 : (MACRO)             	ldaD R13,15; reg:acon
     128/     106 : (MACRO)             	Ccall _out; CALLI2(ar)
     129/     10A : (MACRO)             	ldaD R12,7; reg:acon
     130/     10E : (MACRO)             	ldaD R13,15; reg:acon
     131/     112 : (MACRO)             	Ccall _out; CALLI2(ar)
     132/     116 : (MACRO)             	ldaD R12,7; reg:acon
     133/     11A : (MACRO)             	ldaD R13,15; reg:acon
     134/     11E : (MACRO)             	Ccall _out; CALLI2(ar)
     135/     122 :                     ;}
     136/     122 :                     L8:
     137/     122 : (MACRO)             	release 4
     138/     126 : (MACRO)             	Cretn
     139/     128 :                     
     140/     128 :                     ;$$function end$$ _disp12
     141/     128 :                     ;$$function start$$ _disp42
     142/     128 :                     _disp42:		;framesize=6
     143/     128 : (MACRO)             	reserve 4
     144/     12C :                     ;void disp42(){
     145/     12C :                     ;	initleds();
     146/     12C :                     ;	out(7,2);
     147/     12C : 7A                   req
     148/     12D : 7B                   seq
     149/     12E : 22                   dec 2
     150/     12F : 67                   out 7
     151/     130 : 7A                   req
     152/     131 : (MACRO)             	ldaD R12,7; reg:acon
     153/     135 : (MACRO)             	ldaD R13,2; reg:acon
     154/     139 : (MACRO)             	Ccall _out; CALLI2(ar)
     155/     13D :                     ;	out(7,4);
     156/     13D : (MACRO)             	ldaD R12,7; reg:acon
     157/     141 : (MACRO)             	ldaD R13,4; reg:acon
     158/     145 : (MACRO)             	Ccall _out; CALLI2(ar)
     159/     149 :                     ;	out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);out(7,15);
     160/     149 : (MACRO)             	ldaD R12,7; reg:acon
     161/     14D : (MACRO)             	ldaD R13,15; reg:acon
     162/     151 : (MACRO)             	Ccall _out; CALLI2(ar)
     163/     155 : (MACRO)             	ldaD R12,7; reg:acon
     164/     159 : (MACRO)             	ldaD R13,15; reg:acon
     165/     15D : (MACRO)             	Ccall _out; CALLI2(ar)
     166/     161 : (MACRO)             	ldaD R12,7; reg:acon
     167/     165 : (MACRO)             	ldaD R13,15; reg:acon
     168/     169 : (MACRO)             	Ccall _out; CALLI2(ar)
     169/     16D : (MACRO)             	ldaD R12,7; reg:acon
     170/     171 : (MACRO)             	ldaD R13,15; reg:acon
     171/     175 : (MACRO)             	Ccall _out; CALLI2(ar)
     172/     179 : (MACRO)             	ldaD R12,7; reg:acon
     173/     17D : (MACRO)             	ldaD R13,15; reg:acon
     174/     181 : (MACRO)             	Ccall _out; CALLI2(ar)
     175/     185 : (MACRO)             	ldaD R12,7; reg:acon
     176/     189 : (MACRO)             	ldaD R13,15; reg:acon
     177/     18D : (MACRO)             	Ccall _out; CALLI2(ar)
     178/     191 :                     ;}
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 4 - 4/10/2017 11:16:17


     179/     191 :                     L10:
     180/     191 : (MACRO)             	release 4
     181/     195 : (MACRO)             	Cretn
     182/     197 :                     
     183/     197 :                     ;$$function end$$ _disp42
     184/     197 :                     ;$$function start$$ _dispbl
     185/     197 :                     _dispbl:		;framesize=8
     186/     197 : (MACRO)             	pushr R7
     187/     199 : (MACRO)             	reserve 4; save room for outgoing arguments
     188/     19D :                     ;void dispbl(){
     189/     19D :                     ;	initleds();
     190/     19D :                     ;	for (i=8;i>0;i--){
     191/     19D : 7A                   req
     192/     19E : 7B                   seq
     193/     19F : 22                   dec 2
     194/     1A0 : 67                   out 7
     195/     1A1 : 7A                   req
     196/     1A2 : (MACRO)             	ldaD R7,8; reg:acon
     197/     1A6 :                     L14:
     198/     1A6 :                     ;		out(7,15);
     199/     1A6 : (MACRO)             	ldaD R12,7; reg:acon
     200/     1AA : (MACRO)             	ldaD R13,15; reg:acon
     201/     1AE : (MACRO)             	Ccall _out; CALLI2(ar)
     202/     1B2 :                     ;	}
     203/     1B2 :                     L15:
     204/     1B2 :                     ;	for (i=8;i>0;i--){
     205/     1B2 : (MACRO)             	decm R7,1	;SUBI2(reg,consm)
     206/     1B3 : (MACRO)             	jnI2I R7,0,lbnf,L14; GT reverse  the subtraction
     207/     1C4 :                     ;}
     208/     1C4 :                     L12:
     209/     1C4 : (MACRO)             	release 4; release room for outgoing arguments
     210/     1C8 : (MACRO)             	popr R7
     211/     1CD : (MACRO)             	Cretn
     212/     1CF :                     
     213/     1CF :                     ;$$function end$$ _dispbl
     214/     1CF :                     ;$$function start$$ _dispmemloc
     215/     1CF :                     _dispmemloc:		;framesize=14
     216/     1CF : (MACRO)             	pushr R4
     217/     1D1 : (MACRO)             	pushr R5
     218/     1D3 : (MACRO)             	pushr R6
     219/     1D5 : (MACRO)             	pushr R7
     220/     1D7 : (MACRO)             	reserve 4; save room for outgoing arguments
     221/     1DB : (MACRO)             	st2 R12,'O',sp,(14+1); flag1 
     222/     1E8 :                     ;void dispmemloc(unsigned int loc){
     223/     1E8 :                     ;	register unsigned char* m=0;
     224/     1E8 : (MACRO)             	ldaD R7,0; reg:acon
     225/     1EC :                     ;	initleds();
     226/     1EC :                     ;	m1=m[loc]>>4;
     227/     1EC : 7A                   req
     228/     1ED : 7B                   seq
     229/     1EE : 22                   dec 2
     230/     1EF : 67                   out 7
     231/     1F0 : 7A                   req
     232/     1F1 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
     233/     1FD : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     234/     207 : (MACRO)             	ldn1 R11,R11	;opt14*
     235/     209 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     236/     20C : (MACRO)             	shrI2I R11,4
     237/     22C : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     238/     22E :                     ;	m2=m[loc]&0x0f;
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 5 - 4/10/2017 11:16:17


     239/     22E : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
     240/     23A : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
     241/     244 : (MACRO)             	ldn1 R11,R11	;opt14*
     242/     246 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     243/     249 : (MACRO)             	alu2I R11,R11,15,ani,ani
     244/     251 :                     	;removed ?	cpy2 R11,R11
     245/     251 : (MACRO)             	cpy1 R5,R11;LOADU1(reg)
     246/     253 :                     ;	out(7,m2); out(7,m1);
     247/     253 : (MACRO)             	ldaD R12,7; reg:acon
     248/     257 : (MACRO)             	cpy1 R13,R5
     249/     259 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     250/     25C : (MACRO)             	Ccall _out; CALLI2(ar)
     251/     260 : (MACRO)             	ldaD R12,7; reg:acon
     252/     264 : (MACRO)             	cpy1 R13,R6
     253/     266 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     254/     269 : (MACRO)             	Ccall _out; CALLI2(ar)
     255/     26D :                     ;	for (i=6;i!=0;i--) out(7,15);
     256/     26D : (MACRO)             	ldaD R4,6; reg:acon
     257/     271 : C0 02 81            	lbr L23
     258/     274 :                     L20:
     259/     274 : (MACRO)             	ldaD R12,7; reg:acon
     260/     278 : (MACRO)             	ldaD R13,15; reg:acon
     261/     27C : (MACRO)             	Ccall _out; CALLI2(ar)
     262/     280 :                     L21:
     263/     280 : (MACRO)             	decm R4,1	;SUBU2(reg,consm)
     264/     281 :                     L23:
     265/     281 : (MACRO)             	jnzU2 R4,L20; NE 0 
     266/     289 :                     ;}
     267/     289 :                     L18:
     268/     289 : (MACRO)             	release 4; release room for outgoing arguments
     269/     28D : (MACRO)             	popf R7	;opt11.3
     270/     290 : (MACRO)             	popm R6	;opt11.4
     271/     292 : (MACRO)             	popm R5	;opt11.4
     272/     294 : (MACRO)             	popl R4	;opt11.4
     273/     298 : (MACRO)             	Cretn
     274/     29A :                     
     275/     29A :                     ;$$function end$$ _dispmemloc
     276/     29A :                     ;$$function start$$ _dispm2
     277/     29A :                     _dispm2:		;framesize=8
     278/     29A : (MACRO)             	pushr R7
     279/     29C : (MACRO)             	reserve 4; save room for outgoing arguments
     280/     2A0 : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     281/     2AD :                     ;void dispm2(unsigned int loc){
     282/     2AD :                     ;	initleds();
     283/     2AD :                     ;	disp2(loc);
     284/     2AD : 7A                   req
     285/     2AE : 7B                   seq
     286/     2AF : 22                   dec 2
     287/     2B0 : 67                   out 7
     288/     2B1 : 7A                   req
     289/     2B2 : (MACRO)             	ld2 R11,'O',sp,(8+1) ;reg:INDIRU2(addr)
     290/     2BE : (MACRO)             	cpy1 R12,R11
     291/     2C0 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     292/     2C3 : (MACRO)             	Ccall _disp2
     293/     2C7 :                     ;	for (i=6;i!=0;i--) out(7,15);
     294/     2C7 : (MACRO)             	ldaD R7,6; reg:acon
     295/     2CB : C0 02 DB            	lbr L29
     296/     2CE :                     L26:
     297/     2CE : (MACRO)             	ldaD R12,7; reg:acon
     298/     2D2 : (MACRO)             	ldaD R13,15; reg:acon
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 6 - 4/10/2017 11:16:17


     299/     2D6 : (MACRO)             	Ccall _out; CALLI2(ar)
     300/     2DA :                     L27:
     301/     2DA : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     302/     2DB :                     L29:
     303/     2DB : (MACRO)             	jnzU2 R7,L26; NE 0 
     304/     2E3 :                     ;}
     305/     2E3 :                     L24:
     306/     2E3 : (MACRO)             	release 4; release room for outgoing arguments
     307/     2E7 : (MACRO)             	popr R7
     308/     2EC : (MACRO)             	Cretn
     309/     2EE :                     
     310/     2EE :                     ;$$function end$$ _dispm2
     311/     2EE :                     ;$$function start$$ _main
     312/     2EE :                     _main: ;copt is peeping your size 6 frame with oct 23 rules
     313/     2EE : (MACRO)             	reserve 4
     314/     2F2 :                     ;{
     315/     2F2 :                     ;	disp42();
     316/     2F2 : (MACRO)             	Ccall _disp42
     317/     2F6 :                     ;	delay(1000);
     318/     2F6 : (MACRO)             	ldaD R12,1000; reg:acon
     319/     2FA : (MACRO)             	Ccall _delay
     320/     2FE :                     ;	dispmemloc(0);
     321/     2FE : (MACRO)             	ld2z R12
     322/     302 : (MACRO)             	Ccall _dispmemloc
     323/     306 :                     ;	delay(1000);
     324/     306 : (MACRO)             	ldaD R12,1000; reg:acon
     325/     30A : (MACRO)             	Ccall _delay
     326/     30E :                     ;	dispm2(0x25);
     327/     30E : (MACRO)             	ldaD R12,37; reg:acon
     328/     312 : (MACRO)             	Ccall _dispm2
     329/     316 :                     ;	delay(1000);
     330/     316 : (MACRO)             	ldaD R12,1000; reg:acon
     331/     31A : (MACRO)             	Ccall _delay
     332/     31E : C0 03 71            	lbr L32
     333/     321 :                     L31:
     334/     321 :                     ;	while(1){
     335/     321 :                     ;		out(1,1); //activate top row of keys
     336/     321 : (MACRO)             	ldaD R11,1; reg:acon
     337/     325 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)
     338/     329 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     339/     32D : (MACRO)             	Ccall _out; CALLI2(ar)
     340/     331 :                     ;		if(ef1()){ //key 12 pressed
     341/     331 : (MACRO)             	Ccall _ef1; CALLI2(ar)
     342/     335 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     343/     339 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     344/     33C : (MACRO)             	jzU2 R11,L34; EQ 0
     345/     344 :                     ;			disp12();
     346/     344 : (MACRO)             	Ccall _disp12
     347/     348 :                     ;		} else if(ef2()){//key 8
     348/     348 : C0 03 71            	lbr L35
     349/     34B :                     L34:
     350/     34B : (MACRO)             	Ccall _ef2; CALLI2(ar)
     351/     34F : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     352/     353 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     353/     356 : (MACRO)             	jzU2 R11,L36; EQ 0
     354/     35E :                     ;			dispmemloc(01);
     355/     35E : (MACRO)             	ldaD R12,1; reg:acon
     356/     362 : (MACRO)             	Ccall _dispmemloc
     357/     366 :                     ;		}else{
     358/     366 : C0 03 71            	lbr L37
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 7 - 4/10/2017 11:16:17


     359/     369 :                     L36:
     360/     369 :                     ;			dispmemloc(02);;
     361/     369 : (MACRO)             	ldaD R12,2; reg:acon
     362/     36D : (MACRO)             	Ccall _dispmemloc
     363/     371 :                     ;		}
     364/     371 :                     L37:
     365/     371 :                     L35:
     366/     371 :                     ;	}
     367/     371 :                     L32:
     368/     371 :                     ;	while(1){
     369/     371 : C0 03 21            	lbr L31
     370/     374 :                     L38:
     371/     374 :                     ;	while(1);
     372/     374 :                     L39:
     373/     374 : C0 03 74            	lbr L38
     374/     377 :                     ;}
     375/     377 :                     L30:
     376/     377 : (MACRO)             	release 4
     377/     37B : (MACRO)             	Cretn
     378/     37D :                     
     379/     37D :                     ;$$function end$$ _main
     380/     37D :                     ;$$function start$$ _delay
     381/     37D :                     _delay:		;framesize=10
     382/     37D : (MACRO)             	pushr R6
     383/     37F : (MACRO)             	pushr R7
     384/     381 : (MACRO)             	reserve 4; save room for outgoing arguments
     385/     385 : (MACRO)             	cpy2 R7,R12; function(2054) 1
     386/     389 :                     ;void delay(unsigned int howlong){
     387/     389 :                     ;	for (i=1;i!=howlong;i++){
     388/     389 : (MACRO)             	ldaD R6,1; reg:acon
     389/     38D : C0 03 95            	lbr L45
     390/     390 :                     L42:
     391/     390 :                     ;		oneMs();
     392/     390 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
     393/     394 :                     ;	}
     394/     394 :                     L43:
     395/     394 :                     ;	for (i=1;i!=howlong;i++){
     396/     394 : (MACRO)             	incm R6,1
     397/     395 :                     L45:
     398/     395 : (MACRO)             	jneU2 R6,R7,L42; NE
     399/     3A7 :                     ;}
     400/     3A7 :                     L41:
     401/     3A7 : (MACRO)             	release 4; release room for outgoing arguments
     402/     3AB : (MACRO)             	popf R7	;opt11.3
     403/     3AE : (MACRO)             	popl R6	;opt11.3
     404/     3B2 : (MACRO)             	Cretn
     405/     3B4 :                     
     406/     3B4 :                     ;$$function end$$ _delay
     407/     3B4 :                     ;$$function start$$ _olduinoincluder
     408/     3B4 :                     _olduinoincluder:		;framesize=2
     409/     3B4 :                     ;void olduinoincluder(){
     410/     3B4 :                     ;	asm("\tinclude olduino.inc\n");
     411/     3B4 :                     	include olduino.inc
(1)    1/     3B4 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     3B4 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     3B4 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     3B4 :                     	align 64	;needed to make sure all on same page
(1)    5/     3C0 :                     _digitalWrite:
(1)    6/     3C0 : 8C                  	glo regArg1	;get the bit number
(1)    7/     3C1 : FC DE               	adi $$bvtable&255	;add the table offset
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(olduino.inc) - page 8 - 4/10/2017 11:16:17


(1)    8/     3C3 : AE                  	plo memaddr
(1)    9/     3C4 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     3C5 : BE                  	phi memaddr	
(1)   11/     3C6 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     3C7 : A8                  	plo rt1		;save it in a temp
(1)   13/     3C8 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     3CC : EE                  	sex memaddr	;prepare to change it
(1)   15/     3CD : 8D                  	glo regArg2	;get on/off switch
(1)   16/     3CE : 32 D5               	bz $$setbitoff
(1)   17/     3D0 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     3D0 : 88                  	glo rt1		;get the bit value back
(1)   19/     3D1 : F1                  	or		;apply it
(1)   20/     3D2 : 5E                  	str memaddr	;and save it
(1)   21/     3D3 : 30 DA               	br $$outit	;go fnish up
(1)   22/     3D5 :                     $$setbitoff:
(1)   23/     3D5 : 88                  	glo rt1		;get the bit pattern
(1)   24/     3D6 : FB FF               	xri 0xff	;reverse it
(1)   25/     3D8 : F2                  	and		;combine it with the existing pin value
(1)   26/     3D9 : 5E                  	str memaddr	;and save it
(1)   27/     3DA :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     3DA :                     $$outit:
(1)   29/     3DA : 64                  	out 4		;X was already set to memaddr
(1)   30/     3DB : E2                  	sex sp		;reset X
(1)   31/     3DC : (MACRO)             	cretn
(1)   32/     3DE : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     3E6 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     3E6 :                     	align 8	;protect jump boundary
(1)   35/     3E8 :                     _digitalRead:
(1)   36/     3E8 : F8 00               	ldi 0		;default is false
(1)   37/     3EA : AF                  	plo R15
(1)   38/     3EB : BF                  	phi R15
(1)   39/     3EC : 36 EF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     3EE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     3EF : (MACRO)             +	cretn
(1)   42/     3F1 :                     
     412/     3F1 :                     ;}
     413/     3F1 :                     L46:
     414/     3F1 : (MACRO)             	Cretn
     415/     3F3 :                     
     416/     3F3 :                     ;$$function end$$ _olduinoincluder
     417/     3F3 :                     	include lcc1802epiloNW.inc
(1)    1/     3F3 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     3F3 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     3F3 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     3F3 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     3F3 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     3F3 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     3F3 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     3F3 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     3F3 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     3F3 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     3F3 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     3F3 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     3F3 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     3F3 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     3F3 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     3F3 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     3F3 :                     ;16-09-20 allow stack relocation 
(1)   18/     3F3 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 9 - 4/10/2017 11:16:17


(1)   19/     3F3 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/     3F3 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/     3F3 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/     3F3 :                     ;17-04-09 don't include call/return for 1806
(1)   23/     3F3 : =EH                 rwork	equ	memAddr	;work register
(1)   24/     3F3 :                     lcc1802init:	
(1)   25/     3F3 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   26/     3F7 : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   27/     3FB : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   28/     3FB :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   29/     3FB : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   30/     3FB : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   31/     3FF : [27]                  ENDIF				;wjr 16-09-20
(1)   32/     3FF : E2                  	sex	SP
(1)   33/     400 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   34/     404 : D3                  	sep	RPC
(1)   35/     405 :                     $$_00000:
(1)   36/     405 : (MACRO)             	Ccall _main	;call the main routine
(1)   37/     409 : C0 04 09            $$_die:	lbr	$$_die		;loop here when main returns
(1)   38/     40C : DE AD               	db	0xde,0xad
(1)   39/     40E :                     
(1)   40/     40E :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   41/     40E :                     _setqOn:
(1)   42/     40E : 7B                  	seq
(1)   43/     40F : (MACRO)             	Cretn
(1)   44/     411 :                     _setqOff:
(1)   45/     411 : 7A                  	req
(1)   46/     412 : (MACRO)             	Cretn
(1)   47/     414 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   48/     414 :                     _modU2:	;16 bit unsigned remainder
(1)   49/     414 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   50/     414 :                         Ccall _divU2
(1)   51/     414 :                         glo regArg1
(1)   52/     414 :                         plo retVal
(1)   53/     414 :                         ghi regArg1
(1)   54/     414 :                         phi retVal
(1)   55/     414 :                         Cretn
(1)   56/     414 :                         
(1)   57/     414 :                     _modI2:	;16 bit signed remainder
(1)   58/     414 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   59/     414 :                         Ccall _divI2
(1)   60/     414 :                         glo regArg1
(1)   61/     414 :                         plo retVal
(1)   62/     414 :                         ghi regArg1
(1)   63/     414 :                         phi retVal
(1)   64/     414 :                         Cretn
(1)   65/     414 : [47]                 ENDIF
(1)   66/     414 :                     _out4:	
(1)   67/     414 : 8C                  	glo	regArg1
(1)   68/     415 : 22                  	dec	sp
(1)   69/     416 : 52                  	str	sp
(1)   70/     417 : 64                  	out	4
(1)   71/     418 : (MACRO)             	Cretn
(1)   72/     41A :                     
(1)   73/     41A :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   74/     41A :                     	align 256
(1)   75/     500 : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   76/     500 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   77/     500 :                     	sep     R3 ;go to subroutine
(1)   78/     500 :                     _call	sex	SP ;make sure X=SP
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 10 - 4/10/2017 11:16:17


(1)   79/     500 :                     	glo	retAddr ;save previous return pointer on stack
(1)   80/     500 :                     	dec	sp
(1)   81/     500 :                     	stxd
(1)   82/     500 :                     	ghi	retAddr
(1)   83/     500 :                     	str	sp	
(1)   84/     500 :                     	glo	RPC ;copy old PC to retAddr
(1)   85/     500 :                     	plo	retAddr
(1)   86/     500 :                     	ghi	RPC
(1)   87/     500 :                     	phi	retAddr
(1)   88/     500 :                     	lda	retAddr ;pick up subroutine address into RPC
(1)   89/     500 :                     	phi	RPC
(1)   90/     500 :                     	lda	retAddr
(1)   91/     500 :                     	plo	RPC
(1)   92/     500 :                     	br	_call-1
(1)   93/     500 :                     
(1)   94/     500 :                     ;Standard subroutine return 
(1)   95/     500 :                     	sep	RPC	;return to the original program
(1)   96/     500 :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)   97/     500 :                     	plo	RPC
(1)   98/     500 :                     	ghi	retAddr
(1)   99/     500 :                     	phi	RPC
(1)  100/     500 :                     	lda	SP	;pick up old return address
(1)  101/     500 :                     	phi	retAddr
(1)  102/     500 :                     	lda	SP
(1)  103/     500 :                     	plo	retAddr
(1)  104/     500 :                     	br	_return-1
(1)  105/     500 : [75]                 ENDIF
(1)  106/     500 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  107/     500 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  108/     500 :                     ;each loop is 2 instruction times
(1)  109/     500 :                     ;so the number of loops needed is 
(1)  110/     500 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  111/     500 : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  112/     500 :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  113/     500 : [111]               	ENDIF
(1)  114/     500 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  115/     500 : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  116/     500 : =>FALSE              else
(1)  117/     500 :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  118/     500 : [114]                endif 
(1)  119/     500 : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  120/     502 : FF 01               $$mslp:	smi	1
(1)  121/     504 : 3A 02               	bnz	$$mslp
(1)  122/     506 : (MACRO)             	Cretn
(1)  123/     508 :                     
(1)  124/     508 :                     
(1)  125/     508 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  126/     508 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  127/     508 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  128/     508 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  129/     508 :                     	ld2z retval
(1)  130/     508 :                     $$mulrlp:
(1)  131/     508 :                     	shru2 regarg2
(1)  132/     508 :                     	bnf $$mulrnoadd
(1)  133/     508 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  134/     508 :                     	alu2 retval,retval,regarg1,add,adc
(1)  135/     508 :                     $$mulrnoadd:
(1)  136/     508 :                     	ghi regarg2	;check for all bits of multiplier shifted out
(1)  137/     508 :                     	bnz $$mulrshft	;nope, continue
(1)  138/     508 :                     	glo regarg2	;check bottom byte
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 11 - 4/10/2017 11:16:17


(1)  139/     508 :                     	bz $$mulrdone
(1)  140/     508 :                     $$mulrshft:
(1)  141/     508 :                     	shl2 regarg1	;shift multiplicand left 1
(1)  142/     508 :                     	br $$mulrlp
(1)  143/     508 :                     $$mulrdone:		;here the product is in retval
(1)  144/     508 :                     	cretn
(1)  145/     508 :                     
(1)  146/     508 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  147/     508 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  148/     508 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  149/     508 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  150/     508 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  151/     508 :                     	;regarg1 to hold develop remainder, 
(1)  152/     508 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  153/     508 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  154/     508 :                     				;result in D, rwork.hi, DF
(1)  155/     508 :                     	glo reg2
(1)  156/     508 :                     	str sp
(1)  157/     508 :                     	glo reg1
(1)  158/     508 :                     	sm
(1)  159/     508 :                     	plo R11
(1)  160/     508 :                     	ghi reg2
(1)  161/     508 :                     	str sp
(1)  162/     508 :                     	ghi reg1
(1)  163/     508 :                     	smb
(1)  164/     508 :                     	endm
(1)  165/     508 :                     	
(1)  166/     508 :                     	pushf R10	;save R10 & leave stack down 1
(1)  167/     508 :                     	glo R11		;and bottom
(1)  168/     508 :                     	stxd		;of R11 - leaves stack clear of work area
(1)  169/     508 :                     	cpy2 R10,regarg1
(1)  170/     508 :                     	ld2z retval	;quotient
(1)  171/     508 :                     	cpy2 rwork,regarg2
(1)  172/     508 :                     	
(1)  173/     508 :                     	testsub R10,regarg2
(1)  174/     508 :                     	bnf $$computequot	;DF=0 means it didn't fit
(1)  175/     508 :                     	phi R10	;R10=R10-regarg2
(1)  176/     508 :                     	glo R11
(1)  177/     508 :                     	plo R10
(1)  178/     508 :                     	
(1)  179/     508 :                     $$again:	;this is the divisor doubling phase
(1)  180/     508 :                      	testsub R10,regarg2
(1)  181/     508 :                      	bnf $$computequot	;df=0 means it didn't fit
(1)  182/     508 :                     	phi R10	;R10=R10-regarg2
(1)  183/     508 :                     	glo R11
(1)  184/     508 :                     	plo R10 	
(1)  185/     508 :                      	shl2 regarg2	;y=y+y
(1)  186/     508 :                      	br $$again
(1)  187/     508 :                      	
(1)  188/     508 :                      $$computequot:	;here we're computing the quotient
(1)  189/     508 :                      	testsub regarg1,regarg2
(1)  190/     508 :                      	bnf $$testexit
(1)  191/     508 :                      	phi regarg1		;complete the subtraction
(1)  192/     508 :                      	glo R11
(1)  193/     508 :                      	plo regarg1
(1)  194/     508 :                      	inc retval
(1)  195/     508 :                      $$testexit:
(1)  196/     508 :                      	ghi rwork
(1)  197/     508 :                      	sm	;top of regarg2 is still on stack
(1)  198/     508 :                      	bnz $$ney0y
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 12 - 4/10/2017 11:16:17


(1)  199/     508 :                      	glo regarg2
(1)  200/     508 :                      	str sp
(1)  201/     508 :                      	glo rwork
(1)  202/     508 :                      	sm	;test low order bytes
(1)  203/     508 :                      	bz	$$out	;if = we're done
(1)  204/     508 :                      $$ney0y:
(1)  205/     508 :                      	shl2 retval	;double quotient
(1)  206/     508 :                      	shrU2 regarg2	;halve divisor
(1)  207/     508 :                      	br $$computequot	;continue
(1)  208/     508 :                      $$out:
(1)  209/     508 :                      ;here the quotient is in retval, remainder in regarg1
(1)  210/     508 :                       	inc sp	;release work area
(1)  211/     508 :                     	lda sp	;recover
(1)  212/     508 :                     	plo R11	;bottom byte of R11
(1)  213/     508 :                     	popr R10 ;and all of R10
(1)  214/     508 :                     	cretn	;and we're done
(1)  215/     508 :                     
(1)  216/     508 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  217/     508 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  218/     508 :                     _divI2:
(1)  219/     508 :                         dec	sp	;leave a work area available
(1)  220/     508 :                         ghi regArg1
(1)  221/     508 :                         str sp	;save the sign of the 1st arg
(1)  222/     508 :                         shl
(1)  223/     508 :                         bnf $$pos1	;if the 1st arg is -v
(1)  224/     508 :                         negI2 regArg1,regArg1 ;flip it to positive
(1)  225/     508 :                     $$pos1: ;1st is now +v, check 2nd
(1)  226/     508 :                         ghi regArg2
(1)  227/     508 :                         xor	
(1)  228/     508 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  229/     508 :                         ghi regArg2
(1)  230/     508 :                         shl
(1)  231/     508 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  232/     508 :                         negI2 regArg2,regArg2 ;flip it to +v
(1)  233/     508 :                     $$pos2: ; both args now +v
(1)  234/     508 :                      if MOMCPU=$1805
(1)  235/     508 :                         dec sp	;protect workarea on the 1802
(1)  236/     508 :                         Ccall _divU2	;call unsigned division
(1)  237/     508 :                         inc sp	;recover work area
(1)  238/     508 :                      else
(1)  239/     508 :                         Ccall _divU2	;call unsigned division
(1)  240/     508 : [234]                endif 
(1)  241/     508 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  242/     508 :                         lda	sp ;get back the sign bits and restore SP
(1)  243/     508 :                         shl
(1)  244/     508 :                         bnf $$done ;if the signs were different
(1)  245/     508 :                         negI2 retVal,retVal ;negate the quotient
(1)  246/     508 :                     $$done:
(1)  247/     508 :                         Cretn ;and we're done - I hope!
(1)  248/     508 : [125]                ENDIF
(1)  249/     508 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  250/     508 :                     	align 256    ;32 bit operations follow
(1)  251/     508 :                     _divu4:
(1)  252/     508 :                     ;This is an unsigned 32 bit restoring division
(1)  253/     508 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  254/     508 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  255/     508 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  256/     508 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  257/     508 :                     
(1)  258/     508 :                     	ldi 32		;set loop count
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 13 - 4/10/2017 11:16:17


(1)  259/     508 :                     	plo memaddr	;in temp register
(1)  260/     508 :                     	ldi4 Rp1p2,0	;clear Rp1p2
(1)  261/     508 :                     $$loop:
(1)  262/     508 :                     	shL4 RL8	;shift bottom 32 bits left 1
(1)  263/     508 :                     	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  264/     508 :                     
(1)  265/     508 :                     	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  266/     508 :                     
(1)  267/     508 :                     	ani 0x80	;check the top bit
(1)  268/     508 :                     	bz $$norestore	;if it's 0
(1)  269/     508 :                     		glo RL8
(1)  270/     508 :                     		ani 0xfe	;turn off the bottom bit
(1)  271/     508 :                     		plo RL8
(1)  272/     508 :                     		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  273/     508 :                     	br $$endlp 	;else
(1)  274/     508 :                     $$norestore:
(1)  275/     508 :                     		glo RL8
(1)  276/     508 :                     		ori 1	;turn on the bottom bit
(1)  277/     508 :                     		plo RL8
(1)  278/     508 :                     	;end if
(1)  279/     508 :                     $$endlp:
(1)  280/     508 :                     	dec memaddr	;check the cycle count
(1)  281/     508 :                     	glo memaddr
(1)  282/     508 :                     	bnz $$loop	;back for more if needed
(1)  283/     508 :                     	
(1)  284/     508 :                     	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  285/     508 :                     		
(1)  286/     508 :                     
(1)  287/     508 :                     _mulu4:
(1)  288/     508 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  289/     508 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  290/     508 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  291/     508 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  292/     508 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  293/     508 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  294/     508 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  295/     508 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  296/     508 :                     	;for 10 we subtract and shift
(1)  297/     508 :                     	;for 00 and 11 we just shift
(1)  298/     508 :                     
(1)  299/     508 :                         ldi4 rp1p2,0	;eventual product top 32 bits
(1)  300/     508 :                         ldi 32
(1)  301/     508 :                         plo memaddr		;cycle count
(1)  302/     508 :                         adi 0		;clear df
(1)  303/     508 :                     $$mloop:
(1)  304/     508 :                         glo RL8
(1)  305/     508 :                         ani 1		;isolate bottom bit of result
(1)  306/     508 :                         bnf	$$check_sub	;
(1)  307/     508 :                         bnz	$$shift		;that would be the 11 case
(1)  308/     508 :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  309/     508 :                         alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  310/     508 :                         br $$shift
(1)  311/     508 :                     $$check_sub:
(1)  312/     508 :                         bz $$shift	;that would be the 00 case
(1)  313/     508 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  314/     508 :                         alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  315/     508 :                     $$shift:
(1)  316/     508 :                         shRI4 Rp1p2		;shift the top 32 bits
(1)  317/     508 :                         shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  318/     508 :                     
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 14 - 4/10/2017 11:16:17


(1)  319/     508 :                         dec memaddr		;cycle count
(1)  320/     508 :                         glo memaddr
(1)  321/     508 :                         bnz $$mloop		;repeat cycle once for each bit position
(1)  322/     508 :                         
(1)  323/     508 :                         cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  324/     508 :                     
(1)  325/     508 :                     	align 256
(1)  326/     508 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  327/     508 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  328/     508 :                     _divI4:
(1)  329/     508 :                         dec	sp	;leave a work area available
(1)  330/     508 :                         ghi RL8-1	;get the top of the dividend
(1)  331/     508 :                         str sp	;save the sign of the 1st arg
(1)  332/     508 :                         shl
(1)  333/     508 :                         bnf $$pos1	;if the 1st arg is -v
(1)  334/     508 :                         negI4 RL8,RL8 ;flip it to positive
(1)  335/     508 :                     $$pos1: ;1st is now +v, check 2nd
(1)  336/     508 :                         ghi RL10-1
(1)  337/     508 :                         xor	
(1)  338/     508 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  339/     508 :                         ghi RL10-1
(1)  340/     508 :                         shl
(1)  341/     508 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  342/     508 :                         negI4 RL10,RL10 ;flip it to +v
(1)  343/     508 :                     $$pos2: ; both args now +v
(1)  344/     508 :                      if MOMCPU=$1805
(1)  345/     508 :                         dec sp	;protect workarea on the 1802
(1)  346/     508 :                         Ccall _divU4	;call unsigned division
(1)  347/     508 :                         inc sp	;recover work area
(1)  348/     508 :                      else
(1)  349/     508 :                         Ccall _divU4	;call unsigned division
(1)  350/     508 : [344]                endif 
(1)  351/     508 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  352/     508 :                         lda	sp ;get back the sign bits and restore SP
(1)  353/     508 :                         shl
(1)  354/     508 :                         bnf $$done ;if the signs were different
(1)  355/     508 :                         negI4 RL8,RL8 ;negate the quotient
(1)  356/     508 :                     $$done:
(1)  357/     508 :                         Cretn ;and we're done - I hope!
(1)  358/     508 : [249]                ENDIF
(1)  359/     508 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  360/     508 :                     _dubdabx:	
(1)  361/     508 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  362/     508 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  363/     508 :                     ;long interger is passed in rp1p2
(1)  364/     508 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  365/     508 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  366/     508 :                     ;r8-11 are used as temps
(1)  367/     508 :                     ;r8 is the working pointer
(1)  368/     508 :                     ;r15.0 is bit count(32) and the return value register
(1)  369/     508 :                     ;r9.0 is digit count
(1)  370/     508 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  371/     508 :                      if MOMCPU=$1805
(1)  372/     508 :                     	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  373/     508 :                     	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  374/     508 :                      else
(1)  375/     508 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  376/     508 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  377/     508 : [371]                endif
(1)  378/     508 :                     	cpy2 r15,r8 ;save address for now
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 15 - 4/10/2017 11:16:17


(1)  379/     508 :                     	ldi 11	;digit count+1 for trailing 0
(1)  380/     508 :                     	plo r9
(1)  381/     508 :                     $$clrlp:	;clear the passed buffer
(1)  382/     508 :                     	ldi 0	
(1)  383/     508 :                     	str r8	;clear a byte
(1)  384/     508 :                     	inc r8
(1)  385/     508 :                     	dec r9
(1)  386/     508 :                     	glo r9	;check the count
(1)  387/     508 :                     	bnz $$clrlp ;back for more
(1)  388/     508 :                     	cpy2 r8,r15 ;get the address back
(1)  389/     508 :                     
(1)  390/     508 :                     	ldi 32	;bit count
(1)  391/     508 :                     	plo r15
(1)  392/     508 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  393/     508 :                     $$cktop:
(1)  394/     508 :                     	ghi rp1p2-1	;get the top bit of the number
(1)  395/     508 :                     	shl		;check for a 1
(1)  396/     508 :                     	bdf $$bitloop	;move on if we have one
(1)  397/     508 :                     	shl4 rp1p2	;shift the input number
(1)  398/     508 :                     	dec r15		;reduce the number of times to shift
(1)  399/     508 :                     	glo r15
(1)  400/     508 :                     	bnz $$cktop	;
(1)  401/     508 :                     	inc r15		;our whole number was 0 but force at least one pass
(1)  402/     508 :                     $$bitloop:
(1)  403/     508 :                     	ldi 10	;digit count
(1)  404/     508 :                     	plo r9
(1)  405/     508 :                     $$dcklp:
(1)  406/     508 :                     	ldn r8 	;pick up a digit
(1)  407/     508 :                     	smi 5	;see if it's greater than 4
(1)  408/     508 :                     	bnf $$dnoadd ;if not, bypass add
(1)  409/     508 :                     	adi 0x08	;add the 5 black and 3 more
(1)  410/     508 :                     	str r8	;put it back
(1)  411/     508 :                     $$dnoadd:
(1)  412/     508 :                     	inc r8
(1)  413/     508 :                     	dec r9	;decrement digit count
(1)  414/     508 :                     	glo r9
(1)  415/     508 :                     	bnz $$dcklp ;and back for next digit
(1)  416/     508 :                     	
(1)  417/     508 :                     	shl4 rp1p2 ;shift the input number
(1)  418/     508 :                     	
(1)  419/     508 :                     	ldi 10	;load the digit count again
(1)  420/     508 :                     	plo r9
(1)  421/     508 :                     ;r8 is now just past the units location and ready to walk back
(1)  422/     508 :                     $$dshlp:
(1)  423/     508 :                     	dec r8	;walk back from 0's position
(1)  424/     508 :                     	ldn r8	;get the digit back
(1)  425/     508 :                     	shlc	;continue the shift
(1)  426/     508 :                     	phi r15 ;save it for the carry test
(1)  427/     508 :                     	ani 0x0f ;clear the 10 bit
(1)  428/     508 :                     	str r8	;put the digit back
(1)  429/     508 :                     	ghi r15	;now test for carry
(1)  430/     508 :                     	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  431/     508 :                     	dec r9	;decrement the digit count
(1)  432/     508 :                     	glo r9
(1)  433/     508 :                     	bnz $$dshlp ;back for more if needed
(1)  434/     508 :                     	
(1)  435/     508 :                     	dec r15
(1)  436/     508 :                     	glo r15
(1)  437/     508 :                     	bnz $$bitloop
(1)  438/     508 :                     	
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(lcc1802epiloNW.inc) - page 16 - 4/10/2017 11:16:17


(1)  439/     508 :                     	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     508 :                     	ldi 10		;digit count again
(1)  441/     508 :                     	plo r9
(1)  442/     508 :                     $$upnxt:
(1)  443/     508 :                     	ldn r8		;get digit
(1)  444/     508 :                     	ori 0x30	;make ascii
(1)  445/     508 :                     	str r8		;put it back
(1)  446/     508 :                     	inc r8		;next digit
(1)  447/     508 :                     	dec r9		;counter
(1)  448/     508 :                     	glo r9
(1)  449/     508 :                     	bnz $$upnxt	;upgrade all 10 spots
(1)  450/     508 :                      if MOMCPU=$1805	
(1)  451/     508 :                     	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  452/     508 :                      else
(1)  453/     508 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  454/     508 : [450]                endif
(1)  455/     508 :                     	sex memaddr	;set up
(1)  456/     508 :                     	ldi 10		;max number of 0's to skip
(1)  457/     508 :                     	sm		;desired number of digits to skip
(1)  458/     508 :                     	sex sp		;reset index register
(1)  459/     508 :                     	plo r9		;number of leading 0's to skip
(1)  460/     508 :                     $$cknext:
(1)  461/     508 :                     	ldn r15		;check digit
(1)  462/     508 :                     	smi 0x30	;for '0'
(1)  463/     508 :                     	bnz $$done
(1)  464/     508 :                     	inc r15		;next digit
(1)  465/     508 :                     	dec r9		;reduce count
(1)  466/     508 :                     	glo r9
(1)  467/     508 :                     	bnz $$cknext
(1)  468/     508 :                     $$done:
(1)  469/     508 :                     	cretn
(1)  470/     508 : [359]                ENDIF	
(1)  471/     508 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  472/     508 :                     _modU4:	;32 bit unsigned remainder
(1)  473/     508 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/     508 :                         Ccall _divU4
(1)  475/     508 :                         cpy4 RL8,Rp1p2
(1)  476/     508 :                         Cretn
(1)  477/     508 :                         
(1)  478/     508 :                     _modI4:	;32 bit signed remainder
(1)  479/     508 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  480/     508 :                         Ccall _divI4
(1)  481/     508 :                         cpy4 RL8,Rp1p2
(1)  482/     508 :                         Cretn
(1)  483/     508 : [471]                ENDIF	
(1)  484/     508 :                     
     418/     508 :                     	include IO1802.inc
(1)    1/     508 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     508 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     508 :                     	align 64
(1)    4/     540 :                     _putc:
(1)    5/     540 :                     _out5:	
(1)    6/     540 : 8C                  	glo	regArg1
(1)    7/     541 : 22                  	dec	sp
(1)    8/     542 : 52                  	str	sp
(1)    9/     543 : 65                  	out	5
(1)   10/     544 : (MACRO)             	Cretn
(1)   11/     546 :                     _inp:		;raw port input
(1)   12/     546 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     546 : 22                  	dec	sp	;work backwards
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm(IO1802.inc) - page 17 - 4/10/2017 11:16:17


(1)   14/     547 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     549 : 73                  	stxd		
(1)   16/     54A : 8C                  	glo	regarg1	;get the port number
(1)   17/     54B : FA 07               	ani	0x07	;clean it
(1)   18/     54D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     54F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     551 : 73                  	stxd		;store it for execution
(1)   21/     552 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     556 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     557 : D8                  	sep	rt1	;execute it
(1)   24/     558 :                     ;we will come back to here with the input byte in D
(1)   25/     558 : 12                  	inc	sp	;step over the work area
(1)   26/     559 : AF                  	plo	retVal	;save it to return
(1)   27/     55A : F8 00               	ldi	0
(1)   28/     55C : BF                  	phi	retval	;clear top byte
(1)   29/     55D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     55E : 12                  	inc	sp	;and the D3
(1)   31/     55F : (MACRO)             	Cretn		;and we're done
(1)   32/     561 :                     	
(1)   33/     561 :                     _out:		;raw port output
(1)   34/     561 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     561 :                     		;this could be bolder:
(1)   36/     561 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     561 :                     		;then SEP sp
(1)   38/     561 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     561 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     561 : 22                  	dec	sp	;work backwards
(1)   41/     562 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     564 : 73                  	stxd		
(1)   43/     565 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     569 : 8C                  	glo	regarg1	;get the port number
(1)   45/     56A : FA 07               	ani	0x07	;clean it
(1)   46/     56C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     56E : 73                  	stxd		;store it for execution
(1)   48/     56F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     570 : 52                  	str	sp	;store it where sp points
(1)   50/     571 : D8                  	sep	rt1	;execute it
(1)   51/     572 :                     ;we will come back to here with sp stepped up by one
(1)   52/     572 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     573 : 12                  	inc	sp	;and the D3
(1)   54/     574 : (MACRO)             	Cretn		;and we're done
(1)   55/     576 :                     	
(1)   56/     576 :                     	
(1)   57/     576 :                     
     419/     576 :                     
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 18 - 4/10/2017 11:16:17


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - |  BIG46 :                         2A C |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
 BVTABLE86 :                    3DE C | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   4/10/2017 - |
 DISP46 :                        2E C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            10 C | *L10 :                          191 C |
*L12 :                          1C4 C |  L14 :                          1A6 C |
*L15 :                          1B2 C | *L18 :                          289 C |
 L20 :                          274 C | *L21 :                          280 C |
 L23 :                          281 C | *L24 :                          2E3 C |
 L26 :                          2CE C | *L27 :                          2DA C |
 L29 :                          2DB C | *L3 :                            1E C |
*L30 :                          377 C |  L31 :                          321 C |
 L32 :                          371 C |  L34 :                          34B C |
 L35 :                          371 C |  L36 :                          369 C |
 L37 :                          371 C |  L38 :                          374 C |
*L39 :                          374 C | *L41 :                          3A7 C |
 L42 :                          390 C | *L43 :                          394 C |
 L45 :                          395 C | *L46 :                          3F1 C |
*L5 :                            36 C | *L7 :                            B3 C |
*L8 :                           122 C |  LCC1802CPUSPEED :            493E0 - |
 LCC1802INIT :                  3F3 C |  LCC1802SUBOVHD :                 E - |
 LCCCODELOC :                     0 - | *LCCNOLONG :                      1 - |
*LCCNOMATH :                      1 - |  LCCSTACKLOC :                 103F - |
*LISTON :                         1 - | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MOMCPU :                      1805 - |
*MOMCPUNAME :                  1805 - |  MSLP96 :                       502 C |
*NESTMAX :                      100 - |  OUTIT86 :                      3DA C |
*PACKING :                        0 - | *PADDING :                        1 - |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - | *R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
*RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - | *RL10 :                           B - |
*RL12 :                           D - | *RL6 :                            7 - |
*RL8 :                            9 - | *RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
*RWORK :                          E - |  SETBITOFF86 :                  3D5 C |
 SP :                             2 - | *TIME :                    11:16:17 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 _0000091 :                     405 C |  _DELAY :                       37D C |
 _DIE91 :                       409 C | *_DIGITALREAD :                 3E8 C |
*_DIGITALWRITE :                3C0 C |  _DISP1 :                        20 C |
 _DISP12 :                       B9 C |  _DISP2 :                        38 C |
 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 19 - 4/10/2017 11:16:17


 _DISP42 :                      128 C | *_DISPBL :                      197 C |
 _DISPM2 :                      29A C |  _DISPMEMLOC :                  1CF C |
 _EF1 :                           4 C |  _EF1.RET0 :                      C C |
 _EF2 :                          12 C |  _EF2.RET0 :                     1A C |
*_INP :                         546 C |  _MAIN :                        2EE C |
*_OLDUINOINCLUDER :             3B4 C |  _ONEMS :                       500 C |
 _OUT :                         561 C | *_OUT4 :                        414 C |
*_OUT5 :                        540 C |  _PIN4 :                          3 C |
*_PUTC :                        540 C | *_SETQOFF :                     411 C |
*_SETQON :                      40E C |  __FORW2 :                      3EF C |
 __FORW3 :                      55D C | *__FORW4 :                      572 C |

    136 symbols
     73 unused symbols

 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 20 - 4/10/2017 11:16:17


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file boydmon3.oasm - page 21 - 4/10/2017 11:16:17


  codepages:
  ----------

STANDARD (0 changed characters)


0.17 seconds assembly time

   2127 lines source file
   3714 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
