 AS V1.42 Beta [Bld 87] - source file t.oasm - page 1 - 4/12/2017 17:20:09


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Wed Apr 12 17:20:09 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 00 57            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     ;$$function start$$ _main
      13/       3 :                     _main: ;copt is peeping your size 6 frame with oct 23 rules
      14/       3 : (MACRO)             	reserve 2; save room for local variables
      15/       5 : (MACRO)             	pushr R7
      16/       7 :                     ;void main(){
      17/       7 :                     ;	register unsigned char* mem=0;
      18/       7 : (MACRO)             	ldaD R7,0; reg:acon
      19/       B :                     ;	unsigned char k=0;
      20/       B : (MACRO)             	ldA2 R11,'O',sp,(3+1); reg:addr
      21/      13 : (MACRO)             	str1I 0,R11; ASGNU1(indaddr,acon)	DH
      22/      16 :                     ;	mem[3]=42;
      23/      16 : (MACRO)             	cpy2 R11,R7
      24/      1A : (MACRO)             	incm R11,3
      25/      1D : (MACRO)             	str1I 42,R11; ASGNU1(indaddr,acon)	DH
      26/      20 :                     ;	mem[3]=k<<4;
      27/      20 : (MACRO)             	cpy2 R11,R7
      28/      24 : (MACRO)             	incm R11,3
      29/      27 : (MACRO)             	ld1 R10,'O',sp,(3+1)
      30/      31 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
      31/      34 : (MACRO)             	shl2I R10,4
      32/      4C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
      33/      4E :                     ;}
      34/      4E :                     L1:
      35/      4E : (MACRO)             	popr R7
      36/      53 : (MACRO)             	release 2; release room for local variables 
      37/      55 : (MACRO)             	Cretn
      38/      57 :                     
      39/      57 :                     ;$$function end$$ _main
      40/      57 :                     	include lcc1802epiloNW.inc
(1)    1/      57 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/      57 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/      57 :                     ;this is the version published with the lcc1802121229 release
(1)    4/      57 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/      57 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/      57 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/      57 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/      57 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/      57 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/      57 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/      57 :                     ;feb 27 changed stack to start at 7fff
(1)   12/      57 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/      57 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/      57 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/      57 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/      57 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/      57 :                     ;16-09-20 allow stack relocation 
(1)   18/      57 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 2 - 4/12/2017 17:20:09


(1)   19/      57 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/      57 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/      57 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/      57 :                     ;17-04-09 don't include call/return for 1806
(1)   23/      57 : =EH                 rwork	equ	memAddr	;work register
(1)   24/      57 :                     lcc1802init:	
(1)   25/      57 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   26/      5B : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   27/      5F : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   28/      5F :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   29/      5F : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   30/      5F : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   31/      63 : [27]                  ENDIF				;wjr 16-09-20
(1)   32/      63 : E2                  	sex	SP
(1)   33/      64 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   34/      68 : D3                  	sep	RPC
(1)   35/      69 :                     $$_00000:
(1)   36/      69 : (MACRO)             	Ccall _main	;call the main routine
(1)   37/      6D : C0 00 6D            $$_die:	lbr	$$_die		;loop here when main returns
(1)   38/      70 : DE AD               	db	0xde,0xad
(1)   39/      72 :                     
(1)   40/      72 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   41/      72 :                     _setqOn:
(1)   42/      72 : 7B                  	seq
(1)   43/      73 : (MACRO)             	Cretn
(1)   44/      75 :                     _setqOff:
(1)   45/      75 : 7A                  	req
(1)   46/      76 : (MACRO)             	Cretn
(1)   47/      78 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   48/      78 :                     _modU2:	;16 bit unsigned remainder
(1)   49/      78 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   50/      78 :                         Ccall _divU2
(1)   51/      78 :                         glo regArg1
(1)   52/      78 :                         plo retVal
(1)   53/      78 :                         ghi regArg1
(1)   54/      78 :                         phi retVal
(1)   55/      78 :                         Cretn
(1)   56/      78 :                         
(1)   57/      78 :                     _modI2:	;16 bit signed remainder
(1)   58/      78 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   59/      78 :                         Ccall _divI2
(1)   60/      78 :                         glo regArg1
(1)   61/      78 :                         plo retVal
(1)   62/      78 :                         ghi regArg1
(1)   63/      78 :                         phi retVal
(1)   64/      78 :                         Cretn
(1)   65/      78 : [47]                 ENDIF
(1)   66/      78 :                     _out4:	
(1)   67/      78 : 8C                  	glo	regArg1
(1)   68/      79 : 22                  	dec	sp
(1)   69/      7A : 52                  	str	sp
(1)   70/      7B : 64                  	out	4
(1)   71/      7C : (MACRO)             	Cretn
(1)   72/      7E :                     
(1)   73/      7E :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   74/      7E :                     	align 256
(1)   75/     100 : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   76/     100 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   77/     100 :                     	sep     R3 ;go to subroutine
(1)   78/     100 :                     _call	sex	SP ;make sure X=SP
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 3 - 4/12/2017 17:20:09


(1)   79/     100 :                     	glo	retAddr ;save previous return pointer on stack
(1)   80/     100 :                     	dec	sp
(1)   81/     100 :                     	stxd
(1)   82/     100 :                     	ghi	retAddr
(1)   83/     100 :                     	str	sp	
(1)   84/     100 :                     	glo	RPC ;copy old PC to retAddr
(1)   85/     100 :                     	plo	retAddr
(1)   86/     100 :                     	ghi	RPC
(1)   87/     100 :                     	phi	retAddr
(1)   88/     100 :                     	lda	retAddr ;pick up subroutine address into RPC
(1)   89/     100 :                     	phi	RPC
(1)   90/     100 :                     	lda	retAddr
(1)   91/     100 :                     	plo	RPC
(1)   92/     100 :                     	br	_call-1
(1)   93/     100 :                     
(1)   94/     100 :                     ;Standard subroutine return 
(1)   95/     100 :                     	sep	RPC	;return to the original program
(1)   96/     100 :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)   97/     100 :                     	plo	RPC
(1)   98/     100 :                     	ghi	retAddr
(1)   99/     100 :                     	phi	RPC
(1)  100/     100 :                     	lda	SP	;pick up old return address
(1)  101/     100 :                     	phi	retAddr
(1)  102/     100 :                     	lda	SP
(1)  103/     100 :                     	plo	retAddr
(1)  104/     100 :                     	br	_return-1
(1)  105/     100 : [75]                 ENDIF
(1)  106/     100 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  107/     100 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  108/     100 :                     ;each loop is 2 instruction times
(1)  109/     100 :                     ;so the number of loops needed is 
(1)  110/     100 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  111/     100 : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  112/     100 :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  113/     100 : [111]               	ENDIF
(1)  114/     100 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  115/     100 : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  116/     100 : =>FALSE              else
(1)  117/     100 :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  118/     100 : [114]                endif 
(1)  119/     100 : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  120/     102 : FF 01               $$mslp:	smi	1
(1)  121/     104 : 3A 02               	bnz	$$mslp
(1)  122/     106 : (MACRO)             	Cretn
(1)  123/     108 :                     
(1)  124/     108 :                     
(1)  125/     108 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  126/     108 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  127/     108 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  128/     108 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  129/     108 :                     	ld2z retval
(1)  130/     108 :                     $$mulrlp:
(1)  131/     108 :                     	shru2 regarg2
(1)  132/     108 :                     	bnf $$mulrnoadd
(1)  133/     108 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  134/     108 :                     	alu2 retval,retval,regarg1,add,adc
(1)  135/     108 :                     $$mulrnoadd:
(1)  136/     108 :                     	ghi regarg2	;check for all bits of multiplier shifted out
(1)  137/     108 :                     	bnz $$mulrshft	;nope, continue
(1)  138/     108 :                     	glo regarg2	;check bottom byte
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 4 - 4/12/2017 17:20:09


(1)  139/     108 :                     	bz $$mulrdone
(1)  140/     108 :                     $$mulrshft:
(1)  141/     108 :                     	shl2 regarg1	;shift multiplicand left 1
(1)  142/     108 :                     	br $$mulrlp
(1)  143/     108 :                     $$mulrdone:		;here the product is in retval
(1)  144/     108 :                     	cretn
(1)  145/     108 :                     
(1)  146/     108 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  147/     108 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  148/     108 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  149/     108 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  150/     108 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  151/     108 :                     	;regarg1 to hold develop remainder, 
(1)  152/     108 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  153/     108 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  154/     108 :                     				;result in D, rwork.hi, DF
(1)  155/     108 :                     	glo reg2
(1)  156/     108 :                     	str sp
(1)  157/     108 :                     	glo reg1
(1)  158/     108 :                     	sm
(1)  159/     108 :                     	plo R11
(1)  160/     108 :                     	ghi reg2
(1)  161/     108 :                     	str sp
(1)  162/     108 :                     	ghi reg1
(1)  163/     108 :                     	smb
(1)  164/     108 :                     	endm
(1)  165/     108 :                     	
(1)  166/     108 :                     	pushf R10	;save R10 & leave stack down 1
(1)  167/     108 :                     	glo R11		;and bottom
(1)  168/     108 :                     	stxd		;of R11 - leaves stack clear of work area
(1)  169/     108 :                     	cpy2 R10,regarg1
(1)  170/     108 :                     	ld2z retval	;quotient
(1)  171/     108 :                     	cpy2 rwork,regarg2
(1)  172/     108 :                     	
(1)  173/     108 :                     	testsub R10,regarg2
(1)  174/     108 :                     	bnf $$computequot	;DF=0 means it didn't fit
(1)  175/     108 :                     	phi R10	;R10=R10-regarg2
(1)  176/     108 :                     	glo R11
(1)  177/     108 :                     	plo R10
(1)  178/     108 :                     	
(1)  179/     108 :                     $$again:	;this is the divisor doubling phase
(1)  180/     108 :                      	testsub R10,regarg2
(1)  181/     108 :                      	bnf $$computequot	;df=0 means it didn't fit
(1)  182/     108 :                     	phi R10	;R10=R10-regarg2
(1)  183/     108 :                     	glo R11
(1)  184/     108 :                     	plo R10 	
(1)  185/     108 :                      	shl2 regarg2	;y=y+y
(1)  186/     108 :                      	br $$again
(1)  187/     108 :                      	
(1)  188/     108 :                      $$computequot:	;here we're computing the quotient
(1)  189/     108 :                      	testsub regarg1,regarg2
(1)  190/     108 :                      	bnf $$testexit
(1)  191/     108 :                      	phi regarg1		;complete the subtraction
(1)  192/     108 :                      	glo R11
(1)  193/     108 :                      	plo regarg1
(1)  194/     108 :                      	inc retval
(1)  195/     108 :                      $$testexit:
(1)  196/     108 :                      	ghi rwork
(1)  197/     108 :                      	sm	;top of regarg2 is still on stack
(1)  198/     108 :                      	bnz $$ney0y
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 5 - 4/12/2017 17:20:09


(1)  199/     108 :                      	glo regarg2
(1)  200/     108 :                      	str sp
(1)  201/     108 :                      	glo rwork
(1)  202/     108 :                      	sm	;test low order bytes
(1)  203/     108 :                      	bz	$$out	;if = we're done
(1)  204/     108 :                      $$ney0y:
(1)  205/     108 :                      	shl2 retval	;double quotient
(1)  206/     108 :                      	shrU2 regarg2	;halve divisor
(1)  207/     108 :                      	br $$computequot	;continue
(1)  208/     108 :                      $$out:
(1)  209/     108 :                      ;here the quotient is in retval, remainder in regarg1
(1)  210/     108 :                       	inc sp	;release work area
(1)  211/     108 :                     	lda sp	;recover
(1)  212/     108 :                     	plo R11	;bottom byte of R11
(1)  213/     108 :                     	popr R10 ;and all of R10
(1)  214/     108 :                     	cretn	;and we're done
(1)  215/     108 :                     
(1)  216/     108 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  217/     108 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  218/     108 :                     _divI2:
(1)  219/     108 :                         dec	sp	;leave a work area available
(1)  220/     108 :                         ghi regArg1
(1)  221/     108 :                         str sp	;save the sign of the 1st arg
(1)  222/     108 :                         shl
(1)  223/     108 :                         bnf $$pos1	;if the 1st arg is -v
(1)  224/     108 :                         negI2 regArg1,regArg1 ;flip it to positive
(1)  225/     108 :                     $$pos1: ;1st is now +v, check 2nd
(1)  226/     108 :                         ghi regArg2
(1)  227/     108 :                         xor	
(1)  228/     108 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  229/     108 :                         ghi regArg2
(1)  230/     108 :                         shl
(1)  231/     108 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  232/     108 :                         negI2 regArg2,regArg2 ;flip it to +v
(1)  233/     108 :                     $$pos2: ; both args now +v
(1)  234/     108 :                      if MOMCPU=$1805
(1)  235/     108 :                         dec sp	;protect workarea on the 1802
(1)  236/     108 :                         Ccall _divU2	;call unsigned division
(1)  237/     108 :                         inc sp	;recover work area
(1)  238/     108 :                      else
(1)  239/     108 :                         Ccall _divU2	;call unsigned division
(1)  240/     108 : [234]                endif 
(1)  241/     108 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  242/     108 :                         lda	sp ;get back the sign bits and restore SP
(1)  243/     108 :                         shl
(1)  244/     108 :                         bnf $$done ;if the signs were different
(1)  245/     108 :                         negI2 retVal,retVal ;negate the quotient
(1)  246/     108 :                     $$done:
(1)  247/     108 :                         Cretn ;and we're done - I hope!
(1)  248/     108 : [125]                ENDIF
(1)  249/     108 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  250/     108 :                     	align 256    ;32 bit operations follow
(1)  251/     108 :                     _divu4:
(1)  252/     108 :                     ;This is an unsigned 32 bit restoring division
(1)  253/     108 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  254/     108 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  255/     108 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  256/     108 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  257/     108 :                     
(1)  258/     108 :                     	ldi 32		;set loop count
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 6 - 4/12/2017 17:20:09


(1)  259/     108 :                     	plo memaddr	;in temp register
(1)  260/     108 :                     	ldi4 Rp1p2,0	;clear Rp1p2
(1)  261/     108 :                     $$loop:
(1)  262/     108 :                     	shL4 RL8	;shift bottom 32 bits left 1
(1)  263/     108 :                     	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  264/     108 :                     
(1)  265/     108 :                     	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  266/     108 :                     
(1)  267/     108 :                     	ani 0x80	;check the top bit
(1)  268/     108 :                     	bz $$norestore	;if it's 0
(1)  269/     108 :                     		glo RL8
(1)  270/     108 :                     		ani 0xfe	;turn off the bottom bit
(1)  271/     108 :                     		plo RL8
(1)  272/     108 :                     		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  273/     108 :                     	br $$endlp 	;else
(1)  274/     108 :                     $$norestore:
(1)  275/     108 :                     		glo RL8
(1)  276/     108 :                     		ori 1	;turn on the bottom bit
(1)  277/     108 :                     		plo RL8
(1)  278/     108 :                     	;end if
(1)  279/     108 :                     $$endlp:
(1)  280/     108 :                     	dec memaddr	;check the cycle count
(1)  281/     108 :                     	glo memaddr
(1)  282/     108 :                     	bnz $$loop	;back for more if needed
(1)  283/     108 :                     	
(1)  284/     108 :                     	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  285/     108 :                     		
(1)  286/     108 :                     
(1)  287/     108 :                     _mulu4:
(1)  288/     108 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  289/     108 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  290/     108 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  291/     108 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  292/     108 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  293/     108 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  294/     108 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  295/     108 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  296/     108 :                     	;for 10 we subtract and shift
(1)  297/     108 :                     	;for 00 and 11 we just shift
(1)  298/     108 :                     
(1)  299/     108 :                         ldi4 rp1p2,0	;eventual product top 32 bits
(1)  300/     108 :                         ldi 32
(1)  301/     108 :                         plo memaddr		;cycle count
(1)  302/     108 :                         adi 0		;clear df
(1)  303/     108 :                     $$mloop:
(1)  304/     108 :                         glo RL8
(1)  305/     108 :                         ani 1		;isolate bottom bit of result
(1)  306/     108 :                         bnf	$$check_sub	;
(1)  307/     108 :                         bnz	$$shift		;that would be the 11 case
(1)  308/     108 :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  309/     108 :                         alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  310/     108 :                         br $$shift
(1)  311/     108 :                     $$check_sub:
(1)  312/     108 :                         bz $$shift	;that would be the 00 case
(1)  313/     108 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  314/     108 :                         alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  315/     108 :                     $$shift:
(1)  316/     108 :                         shRI4 Rp1p2		;shift the top 32 bits
(1)  317/     108 :                         shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  318/     108 :                     
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 7 - 4/12/2017 17:20:09


(1)  319/     108 :                         dec memaddr		;cycle count
(1)  320/     108 :                         glo memaddr
(1)  321/     108 :                         bnz $$mloop		;repeat cycle once for each bit position
(1)  322/     108 :                         
(1)  323/     108 :                         cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  324/     108 :                     
(1)  325/     108 :                     	align 256
(1)  326/     108 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  327/     108 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  328/     108 :                     _divI4:
(1)  329/     108 :                         dec	sp	;leave a work area available
(1)  330/     108 :                         ghi RL8-1	;get the top of the dividend
(1)  331/     108 :                         str sp	;save the sign of the 1st arg
(1)  332/     108 :                         shl
(1)  333/     108 :                         bnf $$pos1	;if the 1st arg is -v
(1)  334/     108 :                         negI4 RL8,RL8 ;flip it to positive
(1)  335/     108 :                     $$pos1: ;1st is now +v, check 2nd
(1)  336/     108 :                         ghi RL10-1
(1)  337/     108 :                         xor	
(1)  338/     108 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  339/     108 :                         ghi RL10-1
(1)  340/     108 :                         shl
(1)  341/     108 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  342/     108 :                         negI4 RL10,RL10 ;flip it to +v
(1)  343/     108 :                     $$pos2: ; both args now +v
(1)  344/     108 :                      if MOMCPU=$1805
(1)  345/     108 :                         dec sp	;protect workarea on the 1802
(1)  346/     108 :                         Ccall _divU4	;call unsigned division
(1)  347/     108 :                         inc sp	;recover work area
(1)  348/     108 :                      else
(1)  349/     108 :                         Ccall _divU4	;call unsigned division
(1)  350/     108 : [344]                endif 
(1)  351/     108 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  352/     108 :                         lda	sp ;get back the sign bits and restore SP
(1)  353/     108 :                         shl
(1)  354/     108 :                         bnf $$done ;if the signs were different
(1)  355/     108 :                         negI4 RL8,RL8 ;negate the quotient
(1)  356/     108 :                     $$done:
(1)  357/     108 :                         Cretn ;and we're done - I hope!
(1)  358/     108 : [249]                ENDIF
(1)  359/     108 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  360/     108 :                     _dubdabx:	
(1)  361/     108 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  362/     108 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  363/     108 :                     ;long interger is passed in rp1p2
(1)  364/     108 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  365/     108 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  366/     108 :                     ;r8-11 are used as temps
(1)  367/     108 :                     ;r8 is the working pointer
(1)  368/     108 :                     ;r15.0 is bit count(32) and the return value register
(1)  369/     108 :                     ;r9.0 is digit count
(1)  370/     108 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  371/     108 :                      if MOMCPU=$1805
(1)  372/     108 :                     	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  373/     108 :                     	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  374/     108 :                      else
(1)  375/     108 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  376/     108 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  377/     108 : [371]                endif
(1)  378/     108 :                     	cpy2 r15,r8 ;save address for now
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 8 - 4/12/2017 17:20:09


(1)  379/     108 :                     	ldi 11	;digit count+1 for trailing 0
(1)  380/     108 :                     	plo r9
(1)  381/     108 :                     $$clrlp:	;clear the passed buffer
(1)  382/     108 :                     	ldi 0	
(1)  383/     108 :                     	str r8	;clear a byte
(1)  384/     108 :                     	inc r8
(1)  385/     108 :                     	dec r9
(1)  386/     108 :                     	glo r9	;check the count
(1)  387/     108 :                     	bnz $$clrlp ;back for more
(1)  388/     108 :                     	cpy2 r8,r15 ;get the address back
(1)  389/     108 :                     
(1)  390/     108 :                     	ldi 32	;bit count
(1)  391/     108 :                     	plo r15
(1)  392/     108 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  393/     108 :                     $$cktop:
(1)  394/     108 :                     	ghi rp1p2-1	;get the top bit of the number
(1)  395/     108 :                     	shl		;check for a 1
(1)  396/     108 :                     	bdf $$bitloop	;move on if we have one
(1)  397/     108 :                     	shl4 rp1p2	;shift the input number
(1)  398/     108 :                     	dec r15		;reduce the number of times to shift
(1)  399/     108 :                     	glo r15
(1)  400/     108 :                     	bnz $$cktop	;
(1)  401/     108 :                     	inc r15		;our whole number was 0 but force at least one pass
(1)  402/     108 :                     $$bitloop:
(1)  403/     108 :                     	ldi 10	;digit count
(1)  404/     108 :                     	plo r9
(1)  405/     108 :                     $$dcklp:
(1)  406/     108 :                     	ldn r8 	;pick up a digit
(1)  407/     108 :                     	smi 5	;see if it's greater than 4
(1)  408/     108 :                     	bnf $$dnoadd ;if not, bypass add
(1)  409/     108 :                     	adi 0x08	;add the 5 black and 3 more
(1)  410/     108 :                     	str r8	;put it back
(1)  411/     108 :                     $$dnoadd:
(1)  412/     108 :                     	inc r8
(1)  413/     108 :                     	dec r9	;decrement digit count
(1)  414/     108 :                     	glo r9
(1)  415/     108 :                     	bnz $$dcklp ;and back for next digit
(1)  416/     108 :                     	
(1)  417/     108 :                     	shl4 rp1p2 ;shift the input number
(1)  418/     108 :                     	
(1)  419/     108 :                     	ldi 10	;load the digit count again
(1)  420/     108 :                     	plo r9
(1)  421/     108 :                     ;r8 is now just past the units location and ready to walk back
(1)  422/     108 :                     $$dshlp:
(1)  423/     108 :                     	dec r8	;walk back from 0's position
(1)  424/     108 :                     	ldn r8	;get the digit back
(1)  425/     108 :                     	shlc	;continue the shift
(1)  426/     108 :                     	phi r15 ;save it for the carry test
(1)  427/     108 :                     	ani 0x0f ;clear the 10 bit
(1)  428/     108 :                     	str r8	;put the digit back
(1)  429/     108 :                     	ghi r15	;now test for carry
(1)  430/     108 :                     	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  431/     108 :                     	dec r9	;decrement the digit count
(1)  432/     108 :                     	glo r9
(1)  433/     108 :                     	bnz $$dshlp ;back for more if needed
(1)  434/     108 :                     	
(1)  435/     108 :                     	dec r15
(1)  436/     108 :                     	glo r15
(1)  437/     108 :                     	bnz $$bitloop
(1)  438/     108 :                     	
 AS V1.42 Beta [Bld 87] - source file t.oasm(lcc1802epiloNW.inc) - page 9 - 4/12/2017 17:20:09


(1)  439/     108 :                     	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     108 :                     	ldi 10		;digit count again
(1)  441/     108 :                     	plo r9
(1)  442/     108 :                     $$upnxt:
(1)  443/     108 :                     	ldn r8		;get digit
(1)  444/     108 :                     	ori 0x30	;make ascii
(1)  445/     108 :                     	str r8		;put it back
(1)  446/     108 :                     	inc r8		;next digit
(1)  447/     108 :                     	dec r9		;counter
(1)  448/     108 :                     	glo r9
(1)  449/     108 :                     	bnz $$upnxt	;upgrade all 10 spots
(1)  450/     108 :                      if MOMCPU=$1805	
(1)  451/     108 :                     	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  452/     108 :                      else
(1)  453/     108 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  454/     108 : [450]                endif
(1)  455/     108 :                     	sex memaddr	;set up
(1)  456/     108 :                     	ldi 10		;max number of 0's to skip
(1)  457/     108 :                     	sm		;desired number of digits to skip
(1)  458/     108 :                     	sex sp		;reset index register
(1)  459/     108 :                     	plo r9		;number of leading 0's to skip
(1)  460/     108 :                     $$cknext:
(1)  461/     108 :                     	ldn r15		;check digit
(1)  462/     108 :                     	smi 0x30	;for '0'
(1)  463/     108 :                     	bnz $$done
(1)  464/     108 :                     	inc r15		;next digit
(1)  465/     108 :                     	dec r9		;reduce count
(1)  466/     108 :                     	glo r9
(1)  467/     108 :                     	bnz $$cknext
(1)  468/     108 :                     $$done:
(1)  469/     108 :                     	cretn
(1)  470/     108 : [359]                ENDIF	
(1)  471/     108 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  472/     108 :                     _modU4:	;32 bit unsigned remainder
(1)  473/     108 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/     108 :                         Ccall _divU4
(1)  475/     108 :                         cpy4 RL8,Rp1p2
(1)  476/     108 :                         Cretn
(1)  477/     108 :                         
(1)  478/     108 :                     _modI4:	;32 bit signed remainder
(1)  479/     108 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  480/     108 :                         Ccall _divI4
(1)  481/     108 :                         cpy4 RL8,Rp1p2
(1)  482/     108 :                         Cretn
(1)  483/     108 : [471]                ENDIF	
(1)  484/     108 :                     
      41/     108 :                     	include IO1802.inc
(1)    1/     108 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     108 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     108 :                     	align 64
(1)    4/     140 :                     _putc:
(1)    5/     140 :                     _out5:	
(1)    6/     140 : 8C                  	glo	regArg1
(1)    7/     141 : 22                  	dec	sp
(1)    8/     142 : 52                  	str	sp
(1)    9/     143 : 65                  	out	5
(1)   10/     144 : (MACRO)             	Cretn
(1)   11/     146 :                     _inp:		;raw port input
(1)   12/     146 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     146 : 22                  	dec	sp	;work backwards
 AS V1.42 Beta [Bld 87] - source file t.oasm(IO1802.inc) - page 10 - 4/12/2017 17:20:09


(1)   14/     147 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     149 : 73                  	stxd		
(1)   16/     14A : 8C                  	glo	regarg1	;get the port number
(1)   17/     14B : FA 07               	ani	0x07	;clean it
(1)   18/     14D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     14F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     151 : 73                  	stxd		;store it for execution
(1)   21/     152 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     156 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     157 : D8                  	sep	rt1	;execute it
(1)   24/     158 :                     ;we will come back to here with the input byte in D
(1)   25/     158 : 12                  	inc	sp	;step over the work area
(1)   26/     159 : AF                  	plo	retVal	;save it to return
(1)   27/     15A : F8 00               	ldi	0
(1)   28/     15C : BF                  	phi	retval	;clear top byte
(1)   29/     15D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     15E : 12                  	inc	sp	;and the D3
(1)   31/     15F : (MACRO)             	Cretn		;and we're done
(1)   32/     161 :                     	
(1)   33/     161 :                     _out:		;raw port output
(1)   34/     161 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     161 :                     		;this could be bolder:
(1)   36/     161 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     161 :                     		;then SEP sp
(1)   38/     161 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     161 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     161 : 22                  	dec	sp	;work backwards
(1)   41/     162 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     164 : 73                  	stxd		
(1)   43/     165 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     169 : 8C                  	glo	regarg1	;get the port number
(1)   45/     16A : FA 07               	ani	0x07	;clean it
(1)   46/     16C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     16E : 73                  	stxd		;store it for execution
(1)   48/     16F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     170 : 52                  	str	sp	;store it where sp points
(1)   50/     171 : D8                  	sep	rt1	;execute it
(1)   51/     172 :                     ;we will come back to here with sp stepped up by one
(1)   52/     172 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     173 : 12                  	inc	sp	;and the D3
(1)   54/     174 : (MACRO)             	Cretn		;and we're done
(1)   55/     176 :                     	
(1)   56/     176 :                     	
(1)   57/     176 :                     
      42/     176 :                     
 AS V1.42 Beta [Bld 87] - source file t.oasm - page 11 - 4/12/2017 17:20:09


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   4/12/2017 - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            4E C |
 LCC1802CPUSPEED :            493E0 - |  LCC1802INIT :                   57 C |
 LCC1802SUBOVHD :                 E - |  LCCCODELOC :                     0 - |
*LCCNOLONG :                      1 - | *LCCNOMATH :                      1 - |
 LCCSTACKLOC :                 103F - | *LISTON :                         1 - |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MOMCPU :                      1805 - | *MOMCPUNAME :                  1805 - |
 MSLP47 :                       102 C | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
*R0 :                             0 - | *R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
*R12 :                            C - | *R13 :                            D - |
*R14 :                            E - | *R15 :                            F - |
*R2 :                             2 - | *R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - |  R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
*RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - | *RL10 :                           B - |
*RL12 :                           D - | *RL6 :                            7 - |
*RL8 :                            9 - | *RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
*RWORK :                          E - |  SP :                             2 - |
*TIME :                    17:20:09 - | *TRUE :                           1 - |
*VERSION :                     142F - |  _0000042 :                      69 C |
 _DIE42 :                        6D C | *_INP :                         146 C |
 _MAIN :                          3 C | *_ONEMS :                       100 C |
*_OUT :                         161 C | *_OUT4 :                         78 C |
*_OUT5 :                        140 C | *_PUTC :                        140 C |
*_SETQOFF :                      75 C | *_SETQON :                       72 C |
 __FORW0 :                      15D C | *__FORW1 :                      172 C |

     84 symbols
     61 unused symbols

 AS V1.42 Beta [Bld 87] - source file t.oasm - page 12 - 4/12/2017 17:20:09


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file t.oasm - page 13 - 4/12/2017 17:20:09


  codepages:
  ----------

STANDARD (0 changed characters)


0.16 seconds assembly time

   1708 lines source file
   1928 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
