 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 1 - 4/14/2017 12:13:58


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Fri Apr 14 12:13:58 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 05 B3            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     ;$$function start$$ _boydinc
      15/       4 :                     _boydinc:		;framesize=2
      16/       4 :                     ;void boydinc(){
      17/       4 :                     ;	asm(" include \"boydscan.inc\"\n");
      18/       4 :                      include "boydscan.inc"
(1)    1/       4 :                     _boydscan:			;SCAN THE KEYBOARD
(1)    2/       4 : EE                  		sex	r14 	;set up "don't care" X register
(1)    3/       5 : 68 CF 00 00         		rldi	r15,0	; r15 is return value
(1)    4/       9 : 61                  .scan:		OUT	1                     ;109: 61 	
(1)    5/       A : 34 50               		B1	.KEY_12                     ;10A: 34 50 	
(1)    6/       C : 35 60               		B2	.KEY_8                      ;10C: 35 60 	
(1)    7/       E : 36 70               		B3	.KEY_4                      ;10E: 36 70 	
(1)    8/      10 : 37 80               		B4	.KEY_0                      ;110: 37 80 	
(1)    9/      12 : 62                  		OUT	2                     ;112: 62 	
(1)   10/      13 : 34 54               		B1	.KEY_13                     ;113: 34 54 	
(1)   11/      15 : 35 64               		B2	.KEY_9                      ;115: 35 64 	
(1)   12/      17 : 36 74               		B3	.KEY_5                      ;117: 36 74 	
(1)   13/      19 : 37 84               		B4	.KEY_1                      ;119: 37 84 	
(1)   14/      1B : 63                  		OUT	3                     ;11B: 63 	
(1)   15/      1C : 34 58               		B1	.KEY_14                     ;11C: 34 58 	
(1)   16/      1E : 35 68               		B2	.KEY_10                     ;11E: 35 68 	
(1)   17/      20 : 36 78               		B3	.KEY_6                      ;120: 36 78 	
(1)   18/      22 : 37 88               		B4	.KEY_2                      ;122: 37 88 	
(1)   19/      24 : 64                  		OUT	4                     ;124: 64 	
(1)   20/      25 : 34 5C               		B1	.KEY_15                     ;125: 34 5C 	
(1)   21/      27 : 35 6C               		B2	.KEY_11                     ;127: 35 6C 	
(1)   22/      29 : 36 7C               		B3	.KEY_7                      ;129: 36 7C 	
(1)   23/      2B : 37 8C               		B4	.KEY_3                      ;12B: 37 8C 	
(1)   24/      2D : 65                  		OUT	5                     ;12D: 65 	
(1)   25/      2E : 34 AC               		B1	.KEY_DIV_WHOLE              ;12E: 34 99 	
(1)   26/      30 : 35 98               		B2	.KEY_MUL                    ;130: 35 96 	
(1)   27/      32 : 36 94               		B3	.KEY_SUB                    ;132: 36 93 	
(1)   28/      34 : 37 90               		B4	.KEY_ADD                    ;134: 37 90 	
(1)   29/      36 : 66                  		OUT	6                     ;136: 66 	
(1)   30/      37 : 34 A0               		B1	.KEY_REM                    ;137: 34 A5 	
(1)   31/      39 : 35 9C               		B2	.KEY_MEM_STORE              ;139: 35 A2 	
(1)   32/      3B : 36 AC               		B3	.KEY_MEM_RECALL             ;13B: 36 9F 	
(1)   33/      3D : 37 AC               		B4	.KEY_EQU                    ;13D: 37 9C 	
(1)   34/      3F : 7B                  		SEQ                                ;13F: 7B 	
(1)   35/      40 : 34 AB               		B1	.KEY_DIV_FIS                ;140: 34 B1 	
(1)   36/      42 : 35 A4               		B2	.KEY_CLEAR                  ;142: 35 AE 	
(1)   37/      44 : 36 AA               		B3	.KEY_CLR_ENTRY              ;144: 36 AB 	
(1)   38/      46 : 37 A9               		B4	.KEY_INV_SIGN               ;146: 37 A8 	
(1)   39/      48 : 7A                  		REQ                                ;148: 7A 	
(1)   40/      49 :                     ;here we have no keys pressed, if r15.0 has a value, return it -1
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(boydscan.inc) - page 2 - 4/14/2017 12:13:58


(1)   41/      49 : 8F                  		glo	r15
(1)   42/      4A : 32 09               		bz	.scan
(1)   43/      4C : 2F                  		dec	r15
(1)   44/      4D : E2                  		sex	r2	;restore the X register before returning
(1)   45/      4E : (MACRO)             		cretn
(1)   46/      50 :                     
(1)   47/      50 : F8 0D               .KEY_12		LDI	13                         ;150: F8  C 	
(1)   48/      52 : 30 AC               		BR	.KEY_SAVE                   ;152: 30 B4 	
(1)   49/      54 : F8 0E               .KEY_13		LDI	14                         ;154: F8  D 	
(1)   50/      56 : 30 AC               		BR	.KEY_SAVE                   ;156: 30 B4 	
(1)   51/      58 : F8 0F               .KEY_14		LDI	15                         ;158: F8  E 	
(1)   52/      5A : 30 AC               		BR	.KEY_SAVE                   ;15A: 30 B4 	
(1)   53/      5C : F8 10               .KEY_15		LDI	16                         ;15C: F8  F 	
(1)   54/      5E : 30 AC               		BR	.KEY_SAVE                   ;15E: 30 B4 	
(1)   55/      60 : F8 09               .KEY_8		LDI	 9                         ;160: F8  8 	
(1)   56/      62 : 30 AC               		BR	.KEY_SAVE                   ;162: 30 B4 	
(1)   57/      64 : F8 0A               .KEY_9		LDI	 10                         ;164: F8  9 	
(1)   58/      66 : 30 AC               		BR	.KEY_SAVE                   ;166: 30 B4 	
(1)   59/      68 : F8 0B               .KEY_10		LDI	11                         ;168: F8  A 	
(1)   60/      6A : 30 AC               		BR	.KEY_SAVE                   ;16A: 30 B4 	
(1)   61/      6C : F8 0C               .KEY_11		LDI	12                         ;16C: F8  B 	
(1)   62/      6E : 30 AC               		BR	.KEY_SAVE                   ;16E: 30 B4 	
(1)   63/      70 : F8 05               .KEY_4		LDI	 5                         ;170: F8  4 	
(1)   64/      72 : 30 AC               		BR	.KEY_SAVE                   ;172: 30 B4 	
(1)   65/      74 : F8 06               .KEY_5		LDI	 6                         ;174: F8  5 	
(1)   66/      76 : 30 AC               		BR	.KEY_SAVE                   ;176: 30 B4 	
(1)   67/      78 : F8 07               .KEY_6		LDI	 7                         ;178: F8  6 	
(1)   68/      7A : 30 AC               		BR	.KEY_SAVE                   ;17A: 30 B4 	
(1)   69/      7C : F8 08               .KEY_7		LDI	 8                         ;17C: F8  7 	
(1)   70/      7E : 30 AC               		BR	.KEY_SAVE                   ;17E: 30 B4 	
(1)   71/      80 : F8 01               .KEY_0		LDI	 1                         ;180: F8  0 	
(1)   72/      82 : 30 AC               		BR	.KEY_SAVE                   ;182: 30 B4 	
(1)   73/      84 : F8 02               .KEY_1		LDI	 2                         ;184: F8  1 	
(1)   74/      86 : 30 AC               		BR	.KEY_SAVE                   ;186: 30 B4 	
(1)   75/      88 : F8 03               .KEY_2		LDI	 3                         ;188: F8  2 	
(1)   76/      8A : 30 AC               		BR	.KEY_SAVE                   ;18A: 30 B4 	
(1)   77/      8C : F8 04               .KEY_3		LDI	 4                         ;18C: F8  3 	
(1)   78/      8E : 30 AC               		BR	.KEY_SAVE                   ;18E: 30 B4 	
(1)   79/      90 :                     		
(1)   80/      90 : F8 11               .KEY_ADD	ldi	16+1
(1)   81/      92 : 30 AC               		br	.key_save
(1)   82/      94 : F8 12               .KEY_SUB:	ldi	17+1
(1)   83/      96 : 30 AC               		br	.key_save
(1)   84/      98 : F8 15               .KEY_MUL:	ldi	20+1
(1)   85/      9A : 30 AC               		br	.key_save
(1)   86/      9C : F8 14               .KEY_MEM_STORE:	ldi	19+1
(1)   87/      9E : 30 AC               		br	.key_save
(1)   88/      A0 :                     
(1)   89/      A0 : F8 13               .KEY_REM:	ldi	18+1
(1)   90/      A2 : 30 AC               		br	.key_save
(1)   91/      A4 : 7A                  .KEY_CLEAR:	req
(1)   92/      A5 : F8 15               		ldi	20+1
(1)   93/      A7 : 30 AC               		br	.key_save
(1)   94/      A9 : 7A                  .KEY_INV_SIGN:	req
(1)   95/      AA : 7A                  .KEY_CLR_ENTRY:	req
(1)   96/      AB : 7A                  .KEY_DIV_FIS:	req
(1)   97/      AC :                     .KEY_EQU:
(1)   98/      AC :                     .KEY_DIV_WHOLE:
(1)   99/      AC :                     .KEY_MEM_RECALL:
(1)  100/      AC : AF                  .KEY_SAVE:	plo 15
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(boydscan.inc) - page 3 - 4/14/2017 12:13:58


(1)  101/      AD : 30 09               		br .scan
      19/      AF :                     ;}
      20/      AF :                     L1:
      21/      AF : (MACRO)             	Cretn
      22/      B1 :                     
      23/      B1 :                     ;$$function end$$ _boydinc
      24/      B1 :                     ;$$function start$$ _disp1
      25/      B1 :                     _disp1:		;framesize=2
      26/      B1 :                     ;void disp1(unsigned char d){//display a byte as two hex digits
      27/      B1 :                     ;	asm(" glo 12\n ani 0x0f\n" //prep bottom digit
      28/      B1 : 8C                   glo 12
      29/      B2 : FA 0F                ani 0x0f
      30/      B4 : 22                   dec 2
      31/      B5 : 52                   str 2
      32/      B6 : 67                   out 7
      33/      B7 : 8C                   glo 12
      34/      B8 : F6                   shr
      35/      B9 : F6                   shr
      36/      BA : F6                   shr
      37/      BB : F6                   shr
      38/      BC : 22                   dec 2
      39/      BD : 52                   str 2
      40/      BE : 67                   out 7
      41/      BF :                     ;}
      42/      BF :                     L3:
      43/      BF : (MACRO)             	Cretn
      44/      C1 :                     
      45/      C1 :                     ;$$function end$$ _disp1
      46/      C1 :                     ;$$function start$$ _dispmemloc
      47/      C1 :                     _dispmemloc:		;framesize=14
      48/      C1 : (MACRO)             	pushr R4
      49/      C3 : (MACRO)             	pushr R5
      50/      C5 : (MACRO)             	pushr R6
      51/      C7 : (MACRO)             	pushr R7
      52/      C9 : (MACRO)             	reserve 4; save room for outgoing arguments
      53/      CD : (MACRO)             	st2 R12,'O',sp,(14+1); flag1 
      54/      DA :                     ;void dispmemloc(unsigned int loc){
      55/      DA :                     ;	register unsigned char* m=0;
      56/      DA : (MACRO)             	ldaD R7,0; reg:acon
      57/      DE :                     ;	initleds();
      58/      DE :                     ;	disp1(m[loc+1]);
      59/      DE : 7A                   req
      60/      DF : 7B                   seq
      61/      E0 : 22                   dec 2
      62/      E1 : 67                   out 7
      63/      E2 : 7A                   req
      64/      E3 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      65/      EF : (MACRO)             	incm R11,1
      66/      F0 : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
      67/      FA : (MACRO)             	ldn1 R12,R11	;opt14*
      68/      FC : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
      69/      FF : (MACRO)             	Ccall _disp1
      70/     103 :                     ;	disp1(m[loc]);
      71/     103 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      72/     10F : (MACRO)             	alu2 R11,R11,R7,add,adc	;ADDP2(reg,reg)
      73/     119 : (MACRO)             	ldn1 R12,R11	;opt14*
      74/     11B : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
      75/     11E : (MACRO)             	Ccall _disp1
      76/     122 :                     ;	disp1(loc&0xff);
      77/     122 : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 4 - 4/14/2017 12:13:58


      78/     12E : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      79/     136 : (MACRO)             	cpy1 R12,R11
      80/     138 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      81/     13B : (MACRO)             	Ccall _disp1
      82/     13F :                     ;	disp1(loc>>8);
      83/     13F : (MACRO)             	ld2 R11,'O',sp,(14+1) ;reg:INDIRU2(addr)
      84/     14B : 9B                  	ghi	R11	;opt2
      85/     14C : AB                  	plo	R11
      86/     14D : F8 00               	ldi	0
      87/     14F : BB                  	phi	R11	
      88/     150 : (MACRO)             	cpy1 R12,R11
      89/     152 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      90/     155 : (MACRO)             	Ccall _disp1
      91/     159 :                     ;}
      92/     159 :                     L5:
      93/     159 : (MACRO)             	release 4; release room for outgoing arguments
      94/     15D : (MACRO)             	popf R7	;opt11.3
      95/     160 : (MACRO)             	popm R6	;opt11.4
      96/     162 : (MACRO)             	popm R5	;opt11.4
      97/     164 : (MACRO)             	popl R4	;opt11.4
      98/     168 : (MACRO)             	Cretn
      99/     16A :                     
     100/     16A :                     ;$$function end$$ _dispmemloc
     101/     16A :                     ;$$function start$$ _dispval
     102/     16A :                     _dispval:		;framesize=8
     103/     16A : (MACRO)             	pushr R7
     104/     16C : (MACRO)             	reserve 4; save room for outgoing arguments
     105/     170 : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     106/     17D : (MACRO)             	ldA2 R11,'O',sp,(8+1); reg:addr
     107/     185 : (MACRO)             	ld2 R10,'O',sp,(8+1) ;reg:INDIRI2(addr)
     108/     191 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     109/     193 :                     ;void dispval(unsigned char v){
     110/     193 :                     ;	initleds();
     111/     193 :                     ;	disp1(v);
     112/     193 : 7A                   req
     113/     194 : 7B                   seq
     114/     195 : 22                   dec 2
     115/     196 : 67                   out 7
     116/     197 : 7A                   req
     117/     198 : (MACRO)             	ld1 R12,'O',sp,(8+1)
     118/     1A2 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     119/     1A5 : (MACRO)             	Ccall _disp1
     120/     1A9 :                     ;	for (i=6;i!=0;i--) out(7,0);
     121/     1A9 : (MACRO)             	ldaD R7,6; reg:acon
     122/     1AD : C0 01 BD            	lbr L12
     123/     1B0 :                     L9:
     124/     1B0 : (MACRO)             	ldaD R12,7; reg:acon
     125/     1B4 : (MACRO)             	ld2z R13
     126/     1B8 : (MACRO)             	Ccall _out; CALLI2(ar)
     127/     1BC :                     L10:
     128/     1BC : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     129/     1BD :                     L12:
     130/     1BD : (MACRO)             	jnzU2 R7,L9; NE 0 
     131/     1C5 :                     ;}
     132/     1C5 :                     L7:
     133/     1C5 : (MACRO)             	release 4; release room for outgoing arguments
     134/     1C9 : (MACRO)             	popr R7
     135/     1CE : (MACRO)             	Cretn
     136/     1D0 :                     
     137/     1D0 :                     ;$$function end$$ _dispval
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 5 - 4/14/2017 12:13:58


     138/     1D0 :                     ;$$function start$$ _getsp
     139/     1D0 :                     _getsp:		;framesize=2
     140/     1D0 :                     ;unsigned int getsp(){//return stack pointer value
     141/     1D0 :                     ;	asm(" cpy2 r15,sp\n"  	//copy stack pointer to return reg
     142/     1D0 :                     ;	return 0;				//not executed
     143/     1D0 : (MACRO)              cpy2 r15,sp
     144/     1D4 : (MACRO)              cretn
     145/     1D6 : (MACRO)             	ld2z R15
     146/     1DA :                     L13:
     147/     1DA : (MACRO)             	Cretn
     148/     1DC :                     
     149/     1DC :                     ;$$function end$$ _getsp
     150/     1DC :                     ;$$function start$$ _execute
     151/     1DC :                     _execute:		;framesize=14
     152/     1DC : (MACRO)             	reserve 2; save room for local variables
     153/     1DE : (MACRO)             	pushr R5
     154/     1E0 : (MACRO)             	pushr R6
     155/     1E2 : (MACRO)             	pushr R7
     156/     1E4 : (MACRO)             	reserve 4; save room for outgoing arguments
     157/     1E8 : (MACRO)             	cpy2 R7,R12; function(2054) 1
     158/     1EC :                     ;void execute(unsigned int loc){
     159/     1EC :                     ;	unsigned char* mem=0;
     160/     1EC : (MACRO)             	ldaD R6,0; reg:acon
     161/     1F0 :                     ;		dispval(0x44); delay(250);
     162/     1F0 : (MACRO)             	ldaD R12,68; reg:acon
     163/     1F4 : (MACRO)             	Ccall _dispval
     164/     1F8 : (MACRO)             	ldaD R12,250; reg:acon
     165/     1FC : (MACRO)             	Ccall _delay
     166/     200 :                     ;		dispmemloc(loc); delay(3000);
     167/     200 : (MACRO)             	cpy2 R12,R7 ;LOADU2*(reg)
     168/     204 : (MACRO)             	Ccall _dispmemloc
     169/     208 : (MACRO)             	ldaD R12,3000; reg:acon
     170/     20C : (MACRO)             	Ccall _delay
     171/     210 :                     ;		op=mem[loc]; val=mem[loc+1];
     172/     210 : (MACRO)             	ldA2 R11,'O',sp,(11+1); reg:addr
     173/     218 : (MACRO)             	alu2 R10,R7,R6,add,adc	;ADDP2(reg,reg)
     174/     222 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     175/     224 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     176/     226 : (MACRO)             	ldA2 R11,'O',sp,(10+1); reg:addr
     177/     22E : (MACRO)             	cpy2 R10,R7
     178/     232 : (MACRO)             	incm R10,1
     179/     233 : (MACRO)             	alu2 R10,R10,R6,add,adc	;ADDP2(reg,reg)
     180/     23D : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     181/     23F : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     182/     241 :                     ;		switch (op){
     183/     241 : (MACRO)             	ld1 R5,'O',sp,(11+1)
     184/     24B : (MACRO)             	zExt R5 ;CVUI2: widen unsigned char to signed int (zero extend)
     185/     24E : (MACRO)             	jcI2I R5,0,lbnf,L16  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     186/     25F : (MACRO)             	jnI2I R5,4,lbnf,L16; GT reverse  the subtraction
     187/     270 : (MACRO)             	shlR2R	R11,R5	;opt6
     188/     276 : (MACRO)             	ld2 R11,'O',R11,(L24) ;reg:INDIRP2(addr)
     189/     282 : (MACRO)             	jumpv R11; JUMPV(reg)
     190/     28A :                     L24:
     191/     28A : 02 94               	dw L19
     192/     28C : 02 E7               	dw L20
     193/     28E : 03 11               	dw L21
     194/     290 : 03 2F               	dw L22
     195/     292 : 03 53               	dw L23
     196/     294 :                     L19:
     197/     294 :                     ;				dispval(0x49); delay(250);
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 6 - 4/14/2017 12:13:58


     198/     294 : (MACRO)             	ldaD R12,73; reg:acon
     199/     298 : (MACRO)             	Ccall _dispval
     200/     29C : (MACRO)             	ldaD R12,250; reg:acon
     201/     2A0 : (MACRO)             	Ccall _delay
     202/     2A4 :                     ;				dispval(mem[val+4096]); delay(1000);
     203/     2A4 : (MACRO)             	ld1 R11,'O',sp,(10+1)
     204/     2AE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     205/     2B1 : (MACRO)             	ldA2 R11,'O',R11,(4096); reg:addr
     206/     2B9 : (MACRO)             	alu2 R11,R11,R6,add,adc	;ADDP2(reg,reg)
     207/     2C3 : (MACRO)             	ldn1 R12,R11	;opt14*
     208/     2C5 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     209/     2C8 : (MACRO)             	Ccall _dispval
     210/     2CC : (MACRO)             	ldaD R12,1000; reg:acon
     211/     2D0 : (MACRO)             	Ccall _delay
     212/     2D4 :                     ;				dispval(0x50); delay(250);
     213/     2D4 : (MACRO)             	ldaD R12,80; reg:acon
     214/     2D8 : (MACRO)             	Ccall _dispval
     215/     2DC : (MACRO)             	ldaD R12,250; reg:acon
     216/     2E0 : (MACRO)             	Ccall _delay
     217/     2E4 :                     ;				break;
     218/     2E4 : C0 03 8D            	lbr L17
     219/     2E7 :                     L20:
     220/     2E7 :                     ;				mem[val+4096]+=1;
     221/     2E7 : (MACRO)             	ld1 R11,'O',sp,(10+1)
     222/     2F1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     223/     2F4 : (MACRO)             	ldA2 R11,'O',R11,(4096); reg:addr
     224/     2FC : (MACRO)             	alu2 R11,R11,R6,add,adc	;ADDP2(reg,reg)
     225/     306 : (MACRO)             	ldn1 R10,R11	;opt14*
     226/     308 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     227/     30B : (MACRO)             	incm R10,1
     228/     30C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     229/     30E :                     ;				break;
     230/     30E : C0 03 8D            	lbr L17
     231/     311 :                     L21:
     232/     311 :                     ;				loc=val+4096-2; //ugh
     233/     311 : (MACRO)             	ld1 R11,'O',sp,(10+1)
     234/     31B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     235/     31E : (MACRO)             	ldA2 R11,'O',R11,(4096); reg:addr
     236/     326 : (MACRO)             	decm R11,2	;SUBI2(reg,consm)
     237/     328 : (MACRO)             	cpy2 R7,R11 ;LOADU2*(reg)
     238/     32C :                     ;				break;
     239/     32C : C0 03 8D            	lbr L17
     240/     32F :                     L22:
     241/     32F :                     ;				delay(val*4);
     242/     32F : (MACRO)             	ld1 R11,'O',sp,(10+1)
     243/     339 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     244/     33C : (MACRO)             	shl2I R11,2
     245/     348 : (MACRO)             	cpy2 R12,R11 ;LOADU2*(reg)
     246/     34C : (MACRO)             	Ccall _delay
     247/     350 :                     ;				break;
     248/     350 : C0 03 8D            	lbr L17
     249/     353 :                     L23:
     250/     353 :                     ;				dispval(getsp());
     251/     353 : (MACRO)             	Ccall _getsp;CALLU2(ar)*
     252/     357 : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
     253/     359 : (MACRO)             	cpy1 R12,R11
     254/     35B : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     255/     35E : (MACRO)             	Ccall _dispval
     256/     362 :                     ;				delay(250);
     257/     362 : (MACRO)             	ldaD R12,250; reg:acon
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 7 - 4/14/2017 12:13:58


     258/     366 : (MACRO)             	Ccall _delay
     259/     36A :                     ;				break;
     260/     36A : C0 03 8D            	lbr L17
     261/     36D :                     L16:
     262/     36D :                     ;				dispval(0x41); delay(250);
     263/     36D : (MACRO)             	ldaD R12,65; reg:acon
     264/     371 : (MACRO)             	Ccall _dispval
     265/     375 : (MACRO)             	ldaD R12,250; reg:acon
     266/     379 : (MACRO)             	Ccall _delay
     267/     37D :                     ;				dispmemloc(loc); delay(5000);
     268/     37D : (MACRO)             	cpy2 R12,R7 ;LOADU2*(reg)
     269/     381 : (MACRO)             	Ccall _dispmemloc
     270/     385 : (MACRO)             	ldaD R12,5000; reg:acon
     271/     389 : (MACRO)             	Ccall _delay
     272/     38D :                     ;				break;
     273/     38D :                     L17:
     274/     38D :                     ;		loc+=2;
     275/     38D : (MACRO)             	incm R7,2
     276/     38F :                     ;}
     277/     38F :                     L15:
     278/     38F : (MACRO)             	release 4; release room for outgoing arguments
     279/     393 : (MACRO)             	popf R7	;opt11.3
     280/     396 : (MACRO)             	popm R6	;opt11.4
     281/     398 : (MACRO)             	popl R5	;opt11.4
     282/     39C : (MACRO)             	release 2; release room for local variables 
     283/     39E : (MACRO)             	Cretn
     284/     3A0 :                     
     285/     3A0 :                     ;$$function end$$ _execute
     286/     3A0 :                     ;$$function start$$ _main
     287/     3A0 :                     _main: ;copt is peeping your size 18 frame with oct 23 rules
     288/     3A0 : (MACRO)             	reserve 4; save room for local variables
     289/     3A4 : (MACRO)             	pushr R4
     290/     3A6 : (MACRO)             	pushr R5
     291/     3A8 : (MACRO)             	pushr R6
     292/     3AA : (MACRO)             	pushr R7
     293/     3AC : (MACRO)             	reserve 4; save room for outgoing arguments
     294/     3B0 :                     ;{
     295/     3B0 :                     ;	unsigned int loc=0;
     296/     3B0 : (MACRO)             	ld2z R5
     297/     3B4 :                     ;	unsigned char memtype='o'; //displaying o=eeprom,a=ram
     298/     3B4 : (MACRO)             	ldaD R4,111; reg:acon
     299/     3B8 :                     ;	register unsigned char* mem=0;
     300/     3B8 : (MACRO)             	ldaD R7,0; reg:acon
     301/     3BC :                     ;	dispval(0x42);
     302/     3BC : (MACRO)             	ldaD R12,66; reg:acon
     303/     3C0 : (MACRO)             	Ccall _dispval
     304/     3C4 :                     ;	delay(1000);
     305/     3C4 : (MACRO)             	ldaD R12,1000; reg:acon
     306/     3C8 : (MACRO)             	Ccall _delay
     307/     3CC : C0 05 2A            	lbr L27
     308/     3CF :                     L26:
     309/     3CF :                     ;	while(1){
     310/     3CF :                     ;		dispmemloc(loc);
     311/     3CF : (MACRO)             	cpy2 R12,R5 ;LOADU2*(reg)
     312/     3D3 : (MACRO)             	Ccall _dispmemloc
     313/     3D7 :                     ;		k=boydscan();
     314/     3D7 : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     315/     3DB : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     316/     3DF : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     317/     3E1 :                     ;		switch(k){
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 8 - 4/14/2017 12:13:58


     318/     3E1 : (MACRO)             	cpy1 R11,R6
     319/     3E3 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     320/     3E6 : (MACRO)             	st2 R11,'O',sp,(13+1); ASGNI2(addr,reg)
     321/     3F3 : (MACRO)             	ld2 R11,'O',sp,(13+1) ;reg:INDIRI2(addr)
     322/     3FF : (MACRO)             	jcI2I R11,16,lbnf,L29  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     323/     410 : (MACRO)             	jnI2I R11,20,lbnf,L29; GT reverse  the subtraction
     324/     421 : (MACRO)             	shl2I R11,1
     325/     427 : (MACRO)             	ld2 R11,'O',R11,(L39-32) ;reg:INDIRP2(addr)
     326/     433 : (MACRO)             	jumpv R11; JUMPV(reg)
     327/     43B :                     L39:
     328/     43B : 04 45               	dw L32
     329/     43D : 04 49               	dw L33
     330/     43F : 04 4D               	dw L34
     331/     441 : 04 69               	dw L37
     332/     443 : 04 FA               	dw L38
     333/     445 :                     L32:
     334/     445 :                     ;				loc +=1;
     335/     445 : (MACRO)             	incm R5,1
     336/     446 :                     ;				break;
     337/     446 : C0 05 2A            	lbr L30
     338/     449 :                     L33:
     339/     449 :                     ;				loc -=1;
     340/     449 : (MACRO)             	decm R5,1	;SUBU2(reg,consm)
     341/     44A :                     ;				break;
     342/     44A : C0 05 2A            	lbr L30
     343/     44D :                     L34:
     344/     44D :                     ;				if (memtype=='o'){
     345/     44D : (MACRO)             	jneU1I R4,111,L35	; DH 4
     346/     453 :                     ;					loc=4096;
     347/     453 : (MACRO)             	ldaD R5,4096; reg:acon
     348/     457 :                     ;					memtype='a';
     349/     457 : (MACRO)             	ldaD R4,97; reg:acon
     350/     45B :                     ;				}else{
     351/     45B : C0 05 2A            	lbr L30
     352/     45E :                     L35:
     353/     45E :                     ;					loc=0;
     354/     45E : (MACRO)             	ld2z R5
     355/     462 :                     ;					memtype='o';
     356/     462 : (MACRO)             	ldaD R4,111; reg:acon
     357/     466 :                     ;				}
     358/     466 :                     ;				break;
     359/     466 : C0 05 2A            	lbr L30
     360/     469 :                     L37:
     361/     469 :                     ;				dispmemloc(loc); //makes a blink
     362/     469 : (MACRO)             	cpy2 R12,R5 ;LOADU2*(reg)
     363/     46D : (MACRO)             	Ccall _dispmemloc
     364/     471 :                     ;				k=boydscan(); dispval(k); delay(250);
     365/     471 : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     366/     475 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     367/     479 : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     368/     47B : (MACRO)             	cpy1 R12,R6
     369/     47D : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     370/     480 : (MACRO)             	Ccall _dispval
     371/     484 : (MACRO)             	ldaD R12,250; reg:acon
     372/     488 : (MACRO)             	Ccall _delay
     373/     48C :                     ;				k2=boydscan(); dispval(k2); delay(250);
     374/     48C : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     375/     490 : (MACRO)             	ldA2 R10,'O',sp,(15+1); reg:addr
     376/     498 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     377/     49C : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)		DH
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 9 - 4/14/2017 12:13:58


     378/     49E : (MACRO)             	ld1 R12,'O',sp,(15+1)
     379/     4A8 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     380/     4AB : (MACRO)             	Ccall _dispval
     381/     4AF : (MACRO)             	ldaD R12,250; reg:acon
     382/     4B3 : (MACRO)             	Ccall _delay
     383/     4B7 :                     ;				mem[loc]=(k<<4)+k2;
     384/     4B7 : (MACRO)             	alu2 R11,R5,R7,add,adc	;ADDP2(reg,reg)
     385/     4C1 : (MACRO)             	cpy1 R10,R6
     386/     4C3 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     387/     4C6 : (MACRO)             	shl2I R10,4
     388/     4DE : (MACRO)             	ld1 R9,'O',sp,(15+1)
     389/     4E8 : (MACRO)             	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
     390/     4EB : (MACRO)             	alu2 R10,R10,R9,add,adc; ADDI2(r,r)
     391/     4F5 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     392/     4F7 :                     ;				break;
     393/     4F7 : C0 05 2A            	lbr L30
     394/     4FA :                     L38:
     395/     4FA :                     ;				loc=4096;
     396/     4FA : (MACRO)             	ldaD R5,4096; reg:acon
     397/     4FE :                     ;				dispval(0x45);
     398/     4FE : (MACRO)             	ldaD R12,69; reg:acon
     399/     502 : (MACRO)             	Ccall _dispval
     400/     506 :                     ;				delay(250);
     401/     506 : (MACRO)             	ldaD R12,250; reg:acon
     402/     50A : (MACRO)             	Ccall _delay
     403/     50E :                     ;				execute(4096);
     404/     50E : (MACRO)             	ldaD R12,4096; reg:acon
     405/     512 : (MACRO)             	Ccall _execute
     406/     516 :                     ;				break;
     407/     516 : C0 05 2A            	lbr L30
     408/     519 :                     L29:
     409/     519 :                     ;				dispval(k);
     410/     519 : (MACRO)             	cpy1 R12,R6
     411/     51B : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     412/     51E : (MACRO)             	Ccall _dispval
     413/     522 :                     ;				delay(250);
     414/     522 : (MACRO)             	ldaD R12,250; reg:acon
     415/     526 : (MACRO)             	Ccall _delay
     416/     52A :                     ;		}
     417/     52A :                     L30:
     418/     52A :                     ;	}
     419/     52A :                     L27:
     420/     52A :                     ;	while(1){
     421/     52A : C0 03 CF            	lbr L26
     422/     52D :                     ;}
     423/     52D :                     L25:
     424/     52D : (MACRO)             	release 4; release room for outgoing arguments
     425/     531 : (MACRO)             	popf R7	;opt11.3
     426/     534 : (MACRO)             	popm R6	;opt11.4
     427/     536 : (MACRO)             	popm R5	;opt11.4
     428/     538 : (MACRO)             	popl R4	;opt11.4
     429/     53C : (MACRO)             	release 4; release room for local variables 
     430/     540 : (MACRO)             	Cretn
     431/     542 :                     
     432/     542 :                     ;$$function end$$ _main
     433/     542 :                     ;$$function start$$ _delay
     434/     542 :                     _delay:		;framesize=10
     435/     542 : (MACRO)             	pushr R6
     436/     544 : (MACRO)             	pushr R7
     437/     546 : (MACRO)             	reserve 4; save room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 10 - 4/14/2017 12:13:58


     438/     54A : (MACRO)             	cpy2 R7,R12; function(2054) 1
     439/     54E :                     ;void delay(unsigned int howlong){
     440/     54E :                     ;	for (i=1;i!=howlong;i++){
     441/     54E : (MACRO)             	ldaD R6,1; reg:acon
     442/     552 : C0 05 5A            	lbr L45
     443/     555 :                     L42:
     444/     555 :                     ;		oneMs();
     445/     555 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
     446/     559 :                     ;	}
     447/     559 :                     L43:
     448/     559 :                     ;	for (i=1;i!=howlong;i++){
     449/     559 : (MACRO)             	incm R6,1
     450/     55A :                     L45:
     451/     55A : (MACRO)             	jneU2 R6,R7,L42; NE
     452/     56C :                     ;}
     453/     56C :                     L41:
     454/     56C : (MACRO)             	release 4; release room for outgoing arguments
     455/     570 : (MACRO)             	popf R7	;opt11.3
     456/     573 : (MACRO)             	popl R6	;opt11.3
     457/     577 : (MACRO)             	Cretn
     458/     579 :                     
     459/     579 :                     ;$$function end$$ _delay
     460/     579 :                     ;$$function start$$ _olduinoincluder
     461/     579 :                     _olduinoincluder:		;framesize=2
     462/     579 :                     ;void olduinoincluder(){
     463/     579 :                     ;	asm("\tinclude olduino.inc\n");
     464/     579 :                     	include olduino.inc
(1)    1/     579 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     579 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     579 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     579 :                     	align 64	;needed to make sure all on same page
(1)    5/     580 :                     _digitalWrite:
(1)    6/     580 : 8C                  	glo regArg1	;get the bit number
(1)    7/     581 : FC 9E               	adi $$bvtable&255	;add the table offset
(1)    8/     583 : AE                  	plo memaddr
(1)    9/     584 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     585 : BE                  	phi memaddr	
(1)   11/     586 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     587 : A8                  	plo rt1		;save it in a temp
(1)   13/     588 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     58C : EE                  	sex memaddr	;prepare to change it
(1)   15/     58D : 8D                  	glo regArg2	;get on/off switch
(1)   16/     58E : 32 95               	bz $$setbitoff
(1)   17/     590 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     590 : 88                  	glo rt1		;get the bit value back
(1)   19/     591 : F1                  	or		;apply it
(1)   20/     592 : 5E                  	str memaddr	;and save it
(1)   21/     593 : 30 9A               	br $$outit	;go fnish up
(1)   22/     595 :                     $$setbitoff:
(1)   23/     595 : 88                  	glo rt1		;get the bit pattern
(1)   24/     596 : FB FF               	xri 0xff	;reverse it
(1)   25/     598 : F2                  	and		;combine it with the existing pin value
(1)   26/     599 : 5E                  	str memaddr	;and save it
(1)   27/     59A :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     59A :                     $$outit:
(1)   29/     59A : 64                  	out 4		;X was already set to memaddr
(1)   30/     59B : E2                  	sex sp		;reset X
(1)   31/     59C : (MACRO)             	cretn
(1)   32/     59E : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(olduino.inc) - page 11 - 4/14/2017 12:13:58


(1)   33/     5A6 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     5A6 :                     	align 8	;protect jump boundary
(1)   35/     5A8 :                     _digitalRead:
(1)   36/     5A8 : F8 00               	ldi 0		;default is false
(1)   37/     5AA : AF                  	plo R15
(1)   38/     5AB : BF                  	phi R15
(1)   39/     5AC : 36 AF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     5AE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     5AF : (MACRO)             +	cretn
(1)   42/     5B1 :                     
     465/     5B1 :                     ;}
     466/     5B1 :                     L46:
     467/     5B1 : (MACRO)             	Cretn
     468/     5B3 :                     
     469/     5B3 :                     ;$$function end$$ _olduinoincluder
     470/     5B3 :                     	include lcc1802epiloNW.inc
(1)    1/     5B3 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     5B3 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     5B3 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     5B3 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     5B3 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     5B3 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     5B3 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     5B3 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     5B3 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     5B3 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     5B3 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     5B3 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     5B3 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     5B3 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     5B3 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     5B3 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     5B3 :                     ;16-09-20 allow stack relocation 
(1)   18/     5B3 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/     5B3 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/     5B3 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/     5B3 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/     5B3 :                     ;17-04-09 don't include call/return for 1806
(1)   23/     5B3 : =EH                 rwork	equ	memAddr	;work register
(1)   24/     5B3 :                     lcc1802init:	
(1)   25/     5B3 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   26/     5B7 : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   27/     5BB : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   28/     5BB :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   29/     5BB : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   30/     5BB : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   31/     5BF : [27]                  ENDIF				;wjr 16-09-20
(1)   32/     5BF : E2                  	sex	SP
(1)   33/     5C0 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   34/     5C4 : D3                  	sep	RPC
(1)   35/     5C5 :                     $$_00000:
(1)   36/     5C5 : (MACRO)             	Ccall _main	;call the main routine
(1)   37/     5C9 : C0 05 C9            $$_die:	lbr	$$_die		;loop here when main returns
(1)   38/     5CC : DE AD               	db	0xde,0xad
(1)   39/     5CE :                     
(1)   40/     5CE :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   41/     5CE :                     _setqOn:
(1)   42/     5CE : 7B                  	seq
(1)   43/     5CF : (MACRO)             	Cretn
(1)   44/     5D1 :                     _setqOff:
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 12 - 4/14/2017 12:13:58


(1)   45/     5D1 : 7A                  	req
(1)   46/     5D2 : (MACRO)             	Cretn
(1)   47/     5D4 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   48/     5D4 :                     _modU2:	;16 bit unsigned remainder
(1)   49/     5D4 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   50/     5D4 :                         Ccall _divU2
(1)   51/     5D4 :                         glo regArg1
(1)   52/     5D4 :                         plo retVal
(1)   53/     5D4 :                         ghi regArg1
(1)   54/     5D4 :                         phi retVal
(1)   55/     5D4 :                         Cretn
(1)   56/     5D4 :                         
(1)   57/     5D4 :                     _modI2:	;16 bit signed remainder
(1)   58/     5D4 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   59/     5D4 :                         Ccall _divI2
(1)   60/     5D4 :                         glo regArg1
(1)   61/     5D4 :                         plo retVal
(1)   62/     5D4 :                         ghi regArg1
(1)   63/     5D4 :                         phi retVal
(1)   64/     5D4 :                         Cretn
(1)   65/     5D4 : [47]                 ENDIF
(1)   66/     5D4 :                     _out4:	
(1)   67/     5D4 : 8C                  	glo	regArg1
(1)   68/     5D5 : 22                  	dec	sp
(1)   69/     5D6 : 52                  	str	sp
(1)   70/     5D7 : 64                  	out	4
(1)   71/     5D8 : (MACRO)             	Cretn
(1)   72/     5DA :                     
(1)   73/     5DA :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   74/     5DA : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   75/     5DA :                     	align 16
(1)   76/     5DA :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   77/     5DA :                     	sep     R3 ;go to subroutine
(1)   78/     5DA :                     _call	sex	SP ;make sure X=SP
(1)   79/     5DA :                     	glo	retAddr ;save previous return pointer on stack
(1)   80/     5DA :                     	dec	sp
(1)   81/     5DA :                     	stxd
(1)   82/     5DA :                     	ghi	retAddr
(1)   83/     5DA :                     	str	sp	
(1)   84/     5DA :                     	glo	RPC ;copy old PC to retAddr
(1)   85/     5DA :                     	plo	retAddr
(1)   86/     5DA :                     	ghi	RPC
(1)   87/     5DA :                     	phi	retAddr
(1)   88/     5DA :                     	lda	retAddr ;pick up subroutine address into RPC
(1)   89/     5DA :                     	phi	RPC
(1)   90/     5DA :                     	lda	retAddr
(1)   91/     5DA :                     	plo	RPC
(1)   92/     5DA :                     	br	_call-1
(1)   93/     5DA :                     
(1)   94/     5DA :                     ;Standard subroutine return 
(1)   95/     5DA :                     	align 16
(1)   96/     5DA :                     	sep	RPC	;return to the original program
(1)   97/     5DA :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)   98/     5DA :                     	plo	RPC
(1)   99/     5DA :                     	ghi	retAddr
(1)  100/     5DA :                     	phi	RPC
(1)  101/     5DA :                     	lda	SP	;pick up old return address
(1)  102/     5DA :                     	phi	retAddr
(1)  103/     5DA :                     	lda	SP
(1)  104/     5DA :                     	plo	retAddr
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 13 - 4/14/2017 12:13:58


(1)  105/     5DA :                     	br	_return-1
(1)  106/     5DA : [74]                 ENDIF
(1)  107/     5DA :                     	align 8
(1)  108/     5E0 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  109/     5E0 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  110/     5E0 :                     ;each loop is 2 instruction times
(1)  111/     5E0 :                     ;so the number of loops needed is 
(1)  112/     5E0 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  113/     5E0 : =>DEFINED           	IFNDEF	LCC1802CPUSPEED
(1)  114/     5E0 :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  115/     5E0 : [113]               	ENDIF
(1)  116/     5E0 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  117/     5E0 : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  118/     5E0 : =>FALSE              else
(1)  119/     5E0 :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  120/     5E0 : [116]                endif 
(1)  121/     5E0 : F8 02               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  122/     5E2 : FF 01               $$mslp:	smi	1
(1)  123/     5E4 : 3A E2               	bnz	$$mslp
(1)  124/     5E6 : (MACRO)             	Cretn
(1)  125/     5E8 :                     
(1)  126/     5E8 :                     
(1)  127/     5E8 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  128/     5E8 :                     	align 128
(1)  129/     5E8 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  130/     5E8 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  131/     5E8 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  132/     5E8 :                     	ld2z retval
(1)  133/     5E8 :                     $$mulrlp:
(1)  134/     5E8 :                     	shru2 regarg2
(1)  135/     5E8 :                     	bnf $$mulrnoadd
(1)  136/     5E8 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  137/     5E8 :                     	alu2 retval,retval,regarg1,add,adc
(1)  138/     5E8 :                     $$mulrnoadd:
(1)  139/     5E8 :                     	ghi regarg2	;check for all bits of multiplier shifted out
(1)  140/     5E8 :                     	bnz $$mulrshft	;nope, continue
(1)  141/     5E8 :                     	glo regarg2	;check bottom byte
(1)  142/     5E8 :                     	bz $$mulrdone
(1)  143/     5E8 :                     $$mulrshft:
(1)  144/     5E8 :                     	shl2 regarg1	;shift multiplicand left 1
(1)  145/     5E8 :                     	br $$mulrlp
(1)  146/     5E8 :                     $$mulrdone:		;here the product is in retval
(1)  147/     5E8 :                     	cretn
(1)  148/     5E8 :                     
(1)  149/     5E8 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  150/     5E8 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  151/     5E8 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  152/     5E8 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  153/     5E8 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  154/     5E8 :                     	;regarg1 to hold develop remainder, 
(1)  155/     5E8 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  156/     5E8 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  157/     5E8 :                     				;result in D, rwork.hi, DF
(1)  158/     5E8 :                     	glo reg2
(1)  159/     5E8 :                     	str sp
(1)  160/     5E8 :                     	glo reg1
(1)  161/     5E8 :                     	sm
(1)  162/     5E8 :                     	plo R11
(1)  163/     5E8 :                     	ghi reg2
(1)  164/     5E8 :                     	str sp
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 14 - 4/14/2017 12:13:58


(1)  165/     5E8 :                     	ghi reg1
(1)  166/     5E8 :                     	smb
(1)  167/     5E8 :                     	endm
(1)  168/     5E8 :                     	
(1)  169/     5E8 :                     	pushf R10	;save R10 & leave stack down 1
(1)  170/     5E8 :                     	glo R11		;and bottom
(1)  171/     5E8 :                     	stxd		;of R11 - leaves stack clear of work area
(1)  172/     5E8 :                     	cpy2 R10,regarg1
(1)  173/     5E8 :                     	ld2z retval	;quotient
(1)  174/     5E8 :                     	cpy2 rwork,regarg2
(1)  175/     5E8 :                     	
(1)  176/     5E8 :                     	testsub R10,regarg2
(1)  177/     5E8 :                     	bnf $$computequot	;DF=0 means it didn't fit
(1)  178/     5E8 :                     	phi R10	;R10=R10-regarg2
(1)  179/     5E8 :                     	glo R11
(1)  180/     5E8 :                     	plo R10
(1)  181/     5E8 :                     	
(1)  182/     5E8 :                     $$again:	;this is the divisor doubling phase
(1)  183/     5E8 :                      	testsub R10,regarg2
(1)  184/     5E8 :                      	bnf $$computequot	;df=0 means it didn't fit
(1)  185/     5E8 :                     	phi R10	;R10=R10-regarg2
(1)  186/     5E8 :                     	glo R11
(1)  187/     5E8 :                     	plo R10 	
(1)  188/     5E8 :                      	shl2 regarg2	;y=y+y
(1)  189/     5E8 :                      	br $$again
(1)  190/     5E8 :                      	
(1)  191/     5E8 :                      $$computequot:	;here we're computing the quotient
(1)  192/     5E8 :                      	testsub regarg1,regarg2
(1)  193/     5E8 :                      	bnf $$testexit
(1)  194/     5E8 :                      	phi regarg1		;complete the subtraction
(1)  195/     5E8 :                      	glo R11
(1)  196/     5E8 :                      	plo regarg1
(1)  197/     5E8 :                      	inc retval
(1)  198/     5E8 :                      $$testexit:
(1)  199/     5E8 :                      	ghi rwork
(1)  200/     5E8 :                      	sm	;top of regarg2 is still on stack
(1)  201/     5E8 :                      	bnz $$ney0y
(1)  202/     5E8 :                      	glo regarg2
(1)  203/     5E8 :                      	str sp
(1)  204/     5E8 :                      	glo rwork
(1)  205/     5E8 :                      	sm	;test low order bytes
(1)  206/     5E8 :                      	bz	$$out	;if = we're done
(1)  207/     5E8 :                      $$ney0y:
(1)  208/     5E8 :                      	shl2 retval	;double quotient
(1)  209/     5E8 :                      	shrU2 regarg2	;halve divisor
(1)  210/     5E8 :                      	br $$computequot	;continue
(1)  211/     5E8 :                      $$out:
(1)  212/     5E8 :                      ;here the quotient is in retval, remainder in regarg1
(1)  213/     5E8 :                       	inc sp	;release work area
(1)  214/     5E8 :                     	lda sp	;recover
(1)  215/     5E8 :                     	plo R11	;bottom byte of R11
(1)  216/     5E8 :                     	popr R10 ;and all of R10
(1)  217/     5E8 :                     	cretn	;and we're done
(1)  218/     5E8 :                     
(1)  219/     5E8 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  220/     5E8 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  221/     5E8 :                     _divI2:
(1)  222/     5E8 :                         dec	sp	;leave a work area available
(1)  223/     5E8 :                         ghi regArg1
(1)  224/     5E8 :                         str sp	;save the sign of the 1st arg
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 15 - 4/14/2017 12:13:58


(1)  225/     5E8 :                         shl
(1)  226/     5E8 :                         bnf $$pos1	;if the 1st arg is -v
(1)  227/     5E8 :                         negI2 regArg1,regArg1 ;flip it to positive
(1)  228/     5E8 :                     $$pos1: ;1st is now +v, check 2nd
(1)  229/     5E8 :                         ghi regArg2
(1)  230/     5E8 :                         xor	
(1)  231/     5E8 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  232/     5E8 :                         ghi regArg2
(1)  233/     5E8 :                         shl
(1)  234/     5E8 :                         bnf $$pos2	;if the 2nd arg is -v
(1)  235/     5E8 :                         negI2 regArg2,regArg2 ;flip it to +v
(1)  236/     5E8 :                     $$pos2: ; both args now +v
(1)  237/     5E8 :                      if MOMCPU=$1805
(1)  238/     5E8 :                         dec sp	;protect workarea on the 1802
(1)  239/     5E8 :                         Ccall _divU2	;call unsigned division
(1)  240/     5E8 :                         inc sp	;recover work area
(1)  241/     5E8 :                      else
(1)  242/     5E8 :                         Ccall _divU2	;call unsigned division
(1)  243/     5E8 : [237]                endif 
(1)  244/     5E8 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  245/     5E8 :                         lda	sp ;get back the sign bits and restore SP
(1)  246/     5E8 :                         shl
(1)  247/     5E8 :                         bnf $$done ;if the signs were different
(1)  248/     5E8 :                         negI2 retVal,retVal ;negate the quotient
(1)  249/     5E8 :                     $$done:
(1)  250/     5E8 :                         Cretn ;and we're done - I hope!
(1)  251/     5E8 : [127]                ENDIF
(1)  252/     5E8 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  253/     5E8 :                     	align 256    ;32 bit operations follow
(1)  254/     5E8 :                     _divu4:
(1)  255/     5E8 :                     ;This is an unsigned 32 bit restoring division
(1)  256/     5E8 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  257/     5E8 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  258/     5E8 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  259/     5E8 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  260/     5E8 :                     
(1)  261/     5E8 :                     	ldi 32		;set loop count
(1)  262/     5E8 :                     	plo memaddr	;in temp register
(1)  263/     5E8 :                     	ldi4 Rp1p2,0	;clear Rp1p2
(1)  264/     5E8 :                     $$loop:
(1)  265/     5E8 :                     	shL4 RL8	;shift bottom 32 bits left 1
(1)  266/     5E8 :                     	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  267/     5E8 :                     
(1)  268/     5E8 :                     	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  269/     5E8 :                     
(1)  270/     5E8 :                     	ani 0x80	;check the top bit
(1)  271/     5E8 :                     	bz $$norestore	;if it's 0
(1)  272/     5E8 :                     		glo RL8
(1)  273/     5E8 :                     		ani 0xfe	;turn off the bottom bit
(1)  274/     5E8 :                     		plo RL8
(1)  275/     5E8 :                     		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  276/     5E8 :                     	br $$endlp 	;else
(1)  277/     5E8 :                     $$norestore:
(1)  278/     5E8 :                     		glo RL8
(1)  279/     5E8 :                     		ori 1	;turn on the bottom bit
(1)  280/     5E8 :                     		plo RL8
(1)  281/     5E8 :                     	;end if
(1)  282/     5E8 :                     $$endlp:
(1)  283/     5E8 :                     	dec memaddr	;check the cycle count
(1)  284/     5E8 :                     	glo memaddr
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 16 - 4/14/2017 12:13:58


(1)  285/     5E8 :                     	bnz $$loop	;back for more if needed
(1)  286/     5E8 :                     	
(1)  287/     5E8 :                     	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  288/     5E8 :                     		
(1)  289/     5E8 :                     
(1)  290/     5E8 :                     _mulu4:
(1)  291/     5E8 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  292/     5E8 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  293/     5E8 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  294/     5E8 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  295/     5E8 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  296/     5E8 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  297/     5E8 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  298/     5E8 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  299/     5E8 :                     	;for 10 we subtract and shift
(1)  300/     5E8 :                     	;for 00 and 11 we just shift
(1)  301/     5E8 :                     
(1)  302/     5E8 :                         ldi4 rp1p2,0	;eventual product top 32 bits
(1)  303/     5E8 :                         ldi 32
(1)  304/     5E8 :                         plo memaddr		;cycle count
(1)  305/     5E8 :                         adi 0		;clear df
(1)  306/     5E8 :                     $$mloop:
(1)  307/     5E8 :                         glo RL8
(1)  308/     5E8 :                         ani 1		;isolate bottom bit of result
(1)  309/     5E8 :                         bnf	$$check_sub	;
(1)  310/     5E8 :                         bnz	$$shift		;that would be the 11 case
(1)  311/     5E8 :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  312/     5E8 :                         alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  313/     5E8 :                         br $$shift
(1)  314/     5E8 :                     $$check_sub:
(1)  315/     5E8 :                         bz $$shift	;that would be the 00 case
(1)  316/     5E8 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  317/     5E8 :                         alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  318/     5E8 :                     $$shift:
(1)  319/     5E8 :                         shRI4 Rp1p2		;shift the top 32 bits
(1)  320/     5E8 :                         shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  321/     5E8 :                     
(1)  322/     5E8 :                         dec memaddr		;cycle count
(1)  323/     5E8 :                         glo memaddr
(1)  324/     5E8 :                         bnz $$mloop		;repeat cycle once for each bit position
(1)  325/     5E8 :                         
(1)  326/     5E8 :                         cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  327/     5E8 :                     
(1)  328/     5E8 :                     	align 256
(1)  329/     5E8 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  330/     5E8 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  331/     5E8 :                     _divI4:
(1)  332/     5E8 :                         dec	sp	;leave a work area available
(1)  333/     5E8 :                         ghi RL8-1	;get the top of the dividend
(1)  334/     5E8 :                         str sp	;save the sign of the 1st arg
(1)  335/     5E8 :                         shl
(1)  336/     5E8 :                         bnf $$pos1	;if the 1st arg is -v
(1)  337/     5E8 :                         negI4 RL8,RL8 ;flip it to positive
(1)  338/     5E8 :                     $$pos1: ;1st is now +v, check 2nd
(1)  339/     5E8 :                         ghi RL10-1
(1)  340/     5E8 :                         xor	
(1)  341/     5E8 :                         str sp ;the stack now has bit 8 set if the signs are different
(1)  342/     5E8 :                         ghi RL10-1
(1)  343/     5E8 :                         shl
(1)  344/     5E8 :                         bnf $$pos2	;if the 2nd arg is -v
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 17 - 4/14/2017 12:13:58


(1)  345/     5E8 :                         negI4 RL10,RL10 ;flip it to +v
(1)  346/     5E8 :                     $$pos2: ; both args now +v
(1)  347/     5E8 :                      if MOMCPU=$1805
(1)  348/     5E8 :                         dec sp	;protect workarea on the 1802
(1)  349/     5E8 :                         Ccall _divU4	;call unsigned division
(1)  350/     5E8 :                         inc sp	;recover work area
(1)  351/     5E8 :                      else
(1)  352/     5E8 :                         Ccall _divU4	;call unsigned division
(1)  353/     5E8 : [347]                endif 
(1)  354/     5E8 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  355/     5E8 :                         lda	sp ;get back the sign bits and restore SP
(1)  356/     5E8 :                         shl
(1)  357/     5E8 :                         bnf $$done ;if the signs were different
(1)  358/     5E8 :                         negI4 RL8,RL8 ;negate the quotient
(1)  359/     5E8 :                     $$done:
(1)  360/     5E8 :                         Cretn ;and we're done - I hope!
(1)  361/     5E8 : [252]                ENDIF
(1)  362/     5E8 : =>DEFINED            IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  363/     5E8 :                     _dubdabx:	
(1)  364/     5E8 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  365/     5E8 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  366/     5E8 :                     ;long interger is passed in rp1p2
(1)  367/     5E8 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  368/     5E8 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  369/     5E8 :                     ;r8-11 are used as temps
(1)  370/     5E8 :                     ;r8 is the working pointer
(1)  371/     5E8 :                     ;r15.0 is bit count(32) and the return value register
(1)  372/     5E8 :                     ;r9.0 is digit count
(1)  373/     5E8 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  374/     5E8 :                      if MOMCPU=$1805
(1)  375/     5E8 :                     	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  376/     5E8 :                     	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  377/     5E8 :                      else
(1)  378/     5E8 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  379/     5E8 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  380/     5E8 : [374]                endif
(1)  381/     5E8 :                     	cpy2 r15,r8 ;save address for now
(1)  382/     5E8 :                     	ldi 11	;digit count+1 for trailing 0
(1)  383/     5E8 :                     	plo r9
(1)  384/     5E8 :                     $$clrlp:	;clear the passed buffer
(1)  385/     5E8 :                     	ldi 0	
(1)  386/     5E8 :                     	str r8	;clear a byte
(1)  387/     5E8 :                     	inc r8
(1)  388/     5E8 :                     	dec r9
(1)  389/     5E8 :                     	glo r9	;check the count
(1)  390/     5E8 :                     	bnz $$clrlp ;back for more
(1)  391/     5E8 :                     	cpy2 r8,r15 ;get the address back
(1)  392/     5E8 :                     
(1)  393/     5E8 :                     	ldi 32	;bit count
(1)  394/     5E8 :                     	plo r15
(1)  395/     5E8 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  396/     5E8 :                     $$cktop:
(1)  397/     5E8 :                     	ghi rp1p2-1	;get the top bit of the number
(1)  398/     5E8 :                     	shl		;check for a 1
(1)  399/     5E8 :                     	bdf $$bitloop	;move on if we have one
(1)  400/     5E8 :                     	shl4 rp1p2	;shift the input number
(1)  401/     5E8 :                     	dec r15		;reduce the number of times to shift
(1)  402/     5E8 :                     	glo r15
(1)  403/     5E8 :                     	bnz $$cktop	;
(1)  404/     5E8 :                     	inc r15		;our whole number was 0 but force at least one pass
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 18 - 4/14/2017 12:13:58


(1)  405/     5E8 :                     $$bitloop:
(1)  406/     5E8 :                     	ldi 10	;digit count
(1)  407/     5E8 :                     	plo r9
(1)  408/     5E8 :                     $$dcklp:
(1)  409/     5E8 :                     	ldn r8 	;pick up a digit
(1)  410/     5E8 :                     	smi 5	;see if it's greater than 4
(1)  411/     5E8 :                     	bnf $$dnoadd ;if not, bypass add
(1)  412/     5E8 :                     	adi 0x08	;add the 5 black and 3 more
(1)  413/     5E8 :                     	str r8	;put it back
(1)  414/     5E8 :                     $$dnoadd:
(1)  415/     5E8 :                     	inc r8
(1)  416/     5E8 :                     	dec r9	;decrement digit count
(1)  417/     5E8 :                     	glo r9
(1)  418/     5E8 :                     	bnz $$dcklp ;and back for next digit
(1)  419/     5E8 :                     	
(1)  420/     5E8 :                     	shl4 rp1p2 ;shift the input number
(1)  421/     5E8 :                     	
(1)  422/     5E8 :                     	ldi 10	;load the digit count again
(1)  423/     5E8 :                     	plo r9
(1)  424/     5E8 :                     ;r8 is now just past the units location and ready to walk back
(1)  425/     5E8 :                     $$dshlp:
(1)  426/     5E8 :                     	dec r8	;walk back from 0's position
(1)  427/     5E8 :                     	ldn r8	;get the digit back
(1)  428/     5E8 :                     	shlc	;continue the shift
(1)  429/     5E8 :                     	phi r15 ;save it for the carry test
(1)  430/     5E8 :                     	ani 0x0f ;clear the 10 bit
(1)  431/     5E8 :                     	str r8	;put the digit back
(1)  432/     5E8 :                     	ghi r15	;now test for carry
(1)  433/     5E8 :                     	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  434/     5E8 :                     	dec r9	;decrement the digit count
(1)  435/     5E8 :                     	glo r9
(1)  436/     5E8 :                     	bnz $$dshlp ;back for more if needed
(1)  437/     5E8 :                     	
(1)  438/     5E8 :                     	dec r15
(1)  439/     5E8 :                     	glo r15
(1)  440/     5E8 :                     	bnz $$bitloop
(1)  441/     5E8 :                     	
(1)  442/     5E8 :                     	cpy2 r15,r8	;save the starting location of the digits
(1)  443/     5E8 :                     	ldi 10		;digit count again
(1)  444/     5E8 :                     	plo r9
(1)  445/     5E8 :                     $$upnxt:
(1)  446/     5E8 :                     	ldn r8		;get digit
(1)  447/     5E8 :                     	ori 0x30	;make ascii
(1)  448/     5E8 :                     	str r8		;put it back
(1)  449/     5E8 :                     	inc r8		;next digit
(1)  450/     5E8 :                     	dec r9		;counter
(1)  451/     5E8 :                     	glo r9
(1)  452/     5E8 :                     	bnz $$upnxt	;upgrade all 10 spots
(1)  453/     5E8 :                      if MOMCPU=$1805	
(1)  454/     5E8 :                     	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  455/     5E8 :                      else
(1)  456/     5E8 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  457/     5E8 : [453]                endif
(1)  458/     5E8 :                     	sex memaddr	;set up
(1)  459/     5E8 :                     	ldi 10		;max number of 0's to skip
(1)  460/     5E8 :                     	sm		;desired number of digits to skip
(1)  461/     5E8 :                     	sex sp		;reset index register
(1)  462/     5E8 :                     	plo r9		;number of leading 0's to skip
(1)  463/     5E8 :                     $$cknext:
(1)  464/     5E8 :                     	ldn r15		;check digit
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(lcc1802epiloNW.inc) - page 19 - 4/14/2017 12:13:58


(1)  465/     5E8 :                     	smi 0x30	;for '0'
(1)  466/     5E8 :                     	bnz $$done
(1)  467/     5E8 :                     	inc r15		;next digit
(1)  468/     5E8 :                     	dec r9		;reduce count
(1)  469/     5E8 :                     	glo r9
(1)  470/     5E8 :                     	bnz $$cknext
(1)  471/     5E8 :                     $$done:
(1)  472/     5E8 :                     	cretn
(1)  473/     5E8 : [362]                ENDIF	
(1)  474/     5E8 : =>DEFINED            IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  475/     5E8 :                     _modU4:	;32 bit unsigned remainder
(1)  476/     5E8 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  477/     5E8 :                         Ccall _divU4
(1)  478/     5E8 :                         cpy4 RL8,Rp1p2
(1)  479/     5E8 :                         Cretn
(1)  480/     5E8 :                         
(1)  481/     5E8 :                     _modI4:	;32 bit signed remainder
(1)  482/     5E8 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  483/     5E8 :                         Ccall _divI4
(1)  484/     5E8 :                         cpy4 RL8,Rp1p2
(1)  485/     5E8 :                         Cretn
(1)  486/     5E8 : [474]                ENDIF	
(1)  487/     5E8 :                     
     471/     5E8 :                     	include IO1802.inc
(1)    1/     5E8 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     5E8 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     5E8 :                     	align 64
(1)    4/     600 :                     _putc:
(1)    5/     600 :                     _out5:	
(1)    6/     600 : 8C                  	glo	regArg1
(1)    7/     601 : 22                  	dec	sp
(1)    8/     602 : 52                  	str	sp
(1)    9/     603 : 65                  	out	5
(1)   10/     604 : (MACRO)             	Cretn
(1)   11/     606 :                     _inp:		;raw port input
(1)   12/     606 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     606 : 22                  	dec	sp	;work backwards
(1)   14/     607 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     609 : 73                  	stxd		
(1)   16/     60A : 8C                  	glo	regarg1	;get the port number
(1)   17/     60B : FA 07               	ani	0x07	;clean it
(1)   18/     60D : 32 1D               	bz	+	; inp(0) isn't valid
(1)   19/     60F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     611 : 73                  	stxd		;store it for execution
(1)   21/     612 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     616 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     617 : D8                  	sep	rt1	;execute it
(1)   24/     618 :                     ;we will come back to here with the input byte in D
(1)   25/     618 : 12                  	inc	sp	;step over the work area
(1)   26/     619 : AF                  	plo	retVal	;save it to return
(1)   27/     61A : F8 00               	ldi	0
(1)   28/     61C : BF                  	phi	retval	;clear top byte
(1)   29/     61D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     61E : 12                  	inc	sp	;and the D3
(1)   31/     61F : (MACRO)             	Cretn		;and we're done
(1)   32/     621 :                     	
(1)   33/     621 :                     _out:		;raw port output
(1)   34/     621 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     621 :                     		;this could be bolder:
(1)   36/     621 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm(IO1802.inc) - page 20 - 4/14/2017 12:13:58


(1)   37/     621 :                     		;then SEP sp
(1)   38/     621 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     621 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     621 : 22                  	dec	sp	;work backwards
(1)   41/     622 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     624 : 73                  	stxd		
(1)   43/     625 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     629 : 8C                  	glo	regarg1	;get the port number
(1)   45/     62A : FA 07               	ani	0x07	;clean it
(1)   46/     62C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     62E : 73                  	stxd		;store it for execution
(1)   48/     62F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     630 : 52                  	str	sp	;store it where sp points
(1)   50/     631 : D8                  	sep	rt1	;execute it
(1)   51/     632 :                     ;we will come back to here with sp stepped up by one
(1)   52/     632 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     633 : 12                  	inc	sp	;and the D3
(1)   54/     634 : (MACRO)             	Cretn		;and we're done
(1)   55/     636 :                     	
(1)   56/     636 :                     	
(1)   57/     636 :                     
     472/     636 :                     
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 21 - 4/14/2017 12:13:58


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  BVTABLE113 :                   59E C |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                   4/14/2017 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            AF C | *L10 :                          1BC C |
 L12 :                          1BD C | *L13 :                          1DA C |
*L15 :                          38F C |  L16 :                          36D C |
 L17 :                          38D C |  L19 :                          294 C |
 L20 :                          2E7 C |  L21 :                          311 C |
 L22 :                          32F C |  L23 :                          353 C |
 L24 :                          28A C | *L25 :                          52D C |
 L26 :                          3CF C |  L27 :                          52A C |
 L29 :                          519 C | *L3 :                            BF C |
 L30 :                          52A C |  L32 :                          445 C |
 L33 :                          449 C |  L34 :                          44D C |
 L35 :                          45E C |  L37 :                          469 C |
 L38 :                          4FA C |  L39 :                          43B C |
*L41 :                          56C C |  L42 :                          555 C |
*L43 :                          559 C |  L45 :                          55A C |
*L46 :                          5B1 C | *L5 :                           159 C |
*L7 :                           1C5 C |  L9 :                           1B0 C |
 LCC1802CPUSPEED :            493E0 - |  LCC1802INIT :                  5B3 C |
 LCC1802SUBOVHD :                 E - |  LCCCODELOC :                     0 - |
*LCCNOLONG :                      1 - | *LCCNOMATH :                      1 - |
 LCCSTACKLOC :                 103F - | *LISTON :                         1 - |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MOMCPU :                      1805 - | *MOMCPUNAME :                  1805 - |
 MSLP123 :                      5E2 C | *NESTMAX :                      100 - |
 OUTIT113 :                     59A C | *PACKING :                        0 - |
*PADDING :                        1 - | *R0 :                             0 - |
*R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - |  R14 :                            E - |
 R15 :                            F - |  R2 :                             2 - |
*R3 :                             3 - |  R4 :                             4 - |
 R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - | *R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - | *RETADDR :                        6 - |
 RETVAL :                         F - | *RL0 :                            1 - |
*RL10 :                           B - | *RL12 :                           D - |
*RL6 :                            7 - | *RL8 :                            9 - |
*RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - | *RWORK :                          E - |
 SETBITOFF113 :                 595 C |  SP :                             2 - |
*TIME :                    12:13:58 - | *TRUE :                           1 - |
*VERSION :                     142F - |  _00000118 :                    5C5 C |
*_BOYDINC :                       4 C |  _BOYDSCAN :                      4 C |
 _BOYDSCAN.KEY_0 :               80 C |  _BOYDSCAN.KEY_1 :               84 C |
 _BOYDSCAN.KEY_10 :              68 C |  _BOYDSCAN.KEY_11 :              6C C |
 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 22 - 4/14/2017 12:13:58


 _BOYDSCAN.KEY_12 :              50 C |  _BOYDSCAN.KEY_13 :              54 C |
 _BOYDSCAN.KEY_14 :              58 C |  _BOYDSCAN.KEY_15 :              5C C |
 _BOYDSCAN.KEY_2 :               88 C |  _BOYDSCAN.KEY_3 :               8C C |
 _BOYDSCAN.KEY_4 :               70 C |  _BOYDSCAN.KEY_5 :               74 C |
 _BOYDSCAN.KEY_6 :               78 C |  _BOYDSCAN.KEY_7 :               7C C |
 _BOYDSCAN.KEY_8 :               60 C |  _BOYDSCAN.KEY_9 :               64 C |
 _BOYDSCAN.KEY_ADD :             90 C |  _BOYDSCAN.KEY_CLEAR :           A4 C |
 _BOYDSCAN.KEY_CLR_ENTRY :       AA C |  _BOYDSCAN.KEY_DIV_FIS :         AB C |
 _BOYDSCAN.KEY_DIV_WHOLE :       AC C |  _BOYDSCAN.KEY_EQU :             AC C |
 _BOYDSCAN.KEY_INV_SIGN :        A9 C |  _BOYDSCAN.KEY_MEM_RECALL :      AC C |
 _BOYDSCAN.KEY_MEM_STORE :       9C C |  _BOYDSCAN.KEY_MUL :             98 C |
 _BOYDSCAN.KEY_REM :             A0 C |  _BOYDSCAN.KEY_SAVE :            AC C |
 _BOYDSCAN.KEY_SUB :             94 C |  _BOYDSCAN.SCAN :                 9 C |
 _DELAY :                       542 C |  _DIE118 :                      5C9 C |
*_DIGITALREAD :                 5A8 C | *_DIGITALWRITE :                580 C |
 _DISP1 :                        B1 C |  _DISPMEMLOC :                   C1 C |
 _DISPVAL :                     16A C |  _EXECUTE :                     1DC C |
 _GETSP :                       1D0 C | *_INP :                         606 C |
 _MAIN :                        3A0 C | *_OLDUINOINCLUDER :             579 C |
 _ONEMS :                       5E0 C |  _OUT :                         621 C |
*_OUT4 :                        5D4 C | *_OUT5 :                        600 C |
 _PIN4 :                          3 C | *_PUTC :                        600 C |
*_SETQOFF :                     5D1 C | *_SETQON :                      5CE C |
 __FORW0 :                      5AF C |  __FORW1 :                      61D C |
*__FORW2 :                      632 C |

    163 symbols
     64 unused symbols

 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 23 - 4/14/2017 12:13:58


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file boydmon6.oasm - page 24 - 4/14/2017 12:13:58


  codepages:
  ----------

STANDARD (0 changed characters)


0.08 seconds assembly time

   2284 lines source file
   4241 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
