 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 1 - 4/7/2017 8:14:26


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Fri Apr 07 08:14:26 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1122/       0 :                     	listing	on
(1) 1123/       0 : C0 00 26            	lbr	lcc1802Init
(1) 1124/       3 :                     	
(1) 1125/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _test:
      15/       4 : 0F                  	db 15
      16/       5 : 0F                  	db 15
      17/       6 : 0F                  	db 15
      18/       7 : 0F                  	db 15
      19/       8 : 05                  	db 5
      20/       9 : 00                  	db 0
      21/       A : 08                  	db 8
      22/       B : 01                  	db 1
      23/       C :                     ;$$function start$$ _main
      24/       C :                     _main: ;copt is peeping your size 2 frame with oct 23 rules
      25/       C :                     ;{
      26/       C :                     ;	asm(" req\n seq\n"
      27/       C : 7A                   req
      28/       D : 7B                   seq
      29/       E : 22                   dec 2
      30/       F : 67                   out 7
      31/      10 : 7A                   req
      32/      11 : (MACRO)              ldad r11,_test
      33/      15 : (MACRO)              ldad r10,8
      34/      19 : EB                   sex 11
      35/      1A : 67                   out 7
      36/      1B : 67                   out 7
      37/      1C : 67                   out 7
      38/      1D : 67                   out 7
      39/      1E : 67                   out 7
      40/      1F : 67                   out 7
      41/      20 : 67                   out 7
      42/      21 : 67                   out 7
      43/      22 : 30 22                br $
      44/      24 :                     ;}
      45/      24 :                     L1:
      46/      24 : (MACRO)             	Cretn
      47/      26 :                     
      48/      26 :                     ;$$function end$$ _main
      49/      26 :                     	include lcc1802epiloNW.inc
(1)    1/      26 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/      26 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/      26 :                     ;this is the version published with the lcc1802121229 release
(1)    4/      26 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/      26 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/      26 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/      26 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/      26 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/      26 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 2 - 4/7/2017 8:14:26


(1)   10/      26 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/      26 :                     ;feb 27 changed stack to start at 7fff
(1)   12/      26 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/      26 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/      26 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/      26 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/      26 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/      26 :                     ;16-09-20 allow stack relocation 
(1)   18/      26 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/      26 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/      26 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/      26 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/      26 : =EH                 rwork	equ	memAddr	;work register
(1)   23/      26 :                     lcc1802init:	
(1)   24/      26 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   25/      2A : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   26/      2E : =>DEFINED             IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   27/      2E :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   28/      2E : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   29/      2E : (MACRO)             	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   30/      32 : [26]                  ENDIF				;wjr 16-09-20
(1)   31/      32 : E2                  	sex	SP
(1)   32/      33 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   33/      37 : D3                  	sep	RPC
(1)   34/      38 :                     $$_00000:
(1)   35/      38 : (MACRO)             	Ccall _main	;call the main routine
(1)   36/      3C : C0 00 3C            $$_die:	lbr	$$_die		;loop here when main returns
(1)   37/      3F : DE AD               	db	0xde,0xad
(1)   38/      41 :                     
(1)   39/      41 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   40/      41 :                     _setqOn:
(1)   41/      41 : 7B                  	seq
(1)   42/      42 : (MACRO)             	Cretn
(1)   43/      44 :                     _setqOff:
(1)   44/      44 : 7A                  	req
(1)   45/      45 : (MACRO)             	Cretn
(1)   46/      47 :                     
(1)   47/      47 :                     _modU2:	;16 bit unsigned remainder
(1)   48/      47 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   49/      47 : (MACRO)                 Ccall _divU2
(1)   50/      4B : 8C                      glo regArg1
(1)   51/      4C : AF                      plo retVal
(1)   52/      4D : 9C                      ghi regArg1
(1)   53/      4E : BF                      phi retVal
(1)   54/      4F : (MACRO)                 Cretn
(1)   55/      51 :                         
(1)   56/      51 :                     _modI2:	;16 bit signed remainder
(1)   57/      51 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   58/      51 : (MACRO)                 Ccall _divI2
(1)   59/      55 : 8C                      glo regArg1
(1)   60/      56 : AF                      plo retVal
(1)   61/      57 : 9C                      ghi regArg1
(1)   62/      58 : BF                      phi retVal
(1)   63/      59 : (MACRO)                 Cretn
(1)   64/      5B :                     
(1)   65/      5B :                     _out4:	
(1)   66/      5B : 8C                  	glo	regArg1
(1)   67/      5C : 22                  	dec	sp
(1)   68/      5D : 52                  	str	sp
(1)   69/      5E : 64                  	out	4
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 3 - 4/7/2017 8:14:26


(1)   70/      5F : (MACRO)             	Cretn
(1)   71/      61 :                     
(1)   72/      61 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   73/      61 :                     	align 256
(1)   74/     100 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   75/     100 : D3                  	sep     R3 ;go to subroutine
(1)   76/     101 : E2                  _call	sex	SP ;make sure X=SP
(1)   77/     102 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   78/     103 : 22                  	dec	sp
(1)   79/     104 : 73                  	stxd
(1)   80/     105 : 96                  	ghi	retAddr
(1)   81/     106 : 52                  	str	sp	
(1)   82/     107 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   83/     108 : A6                  	plo	retAddr
(1)   84/     109 : 93                  	ghi	RPC
(1)   85/     10A : B6                  	phi	retAddr
(1)   86/     10B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   87/     10C : B3                  	phi	RPC
(1)   88/     10D : 46                  	lda	retAddr
(1)   89/     10E : A3                  	plo	RPC
(1)   90/     10F : 30 00               	br	_call-1
(1)   91/     111 :                     
(1)   92/     111 :                     ;Standard subroutine return 
(1)   93/     111 : D3                  	sep	RPC	;return to the original program
(1)   94/     112 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   95/     113 : A3                  	plo	RPC
(1)   96/     114 : 96                  	ghi	retAddr
(1)   97/     115 : B3                  	phi	RPC
(1)   98/     116 : 42                  	lda	SP	;pick up old return address
(1)   99/     117 : B6                  	phi	retAddr
(1)  100/     118 : 42                  	lda	SP
(1)  101/     119 : A6                  	plo	retAddr
(1)  102/     11A : 30 11               	br	_return-1
(1)  103/     11C :                     
(1)  104/     11C :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  105/     11C :                     ;subroutine overhead soaks up 27 instruction time.
(1)  106/     11C :                     ;each loop is 2 instruction times
(1)  107/     11C :                     ;so the number of loops needed is 
(1)  108/     11C :                     ;CPU speed/16000 less the 27 all divide by two
(1)  109/     11C : =>UNDEFINED         	IFNDEF	LCC1802CPUSPEED
(1)  110/     11C : =186A00H            LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  111/     11C : [109]               	ENDIF
(1)  112/     11C : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  113/     11C : =EH                 LCC1802SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  114/     11C : =>FALSE              else
(1)  115/     11C :                     LCC1802SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  116/     11C : [112]                endif 
(1)  117/     11C : F8 2B               	ldi	(LCC1802CPUSPEED/1000/16-LCC1802SUBOVHD)/2
(1)  118/     11E : FF 01               $$mslp:	smi	1
(1)  119/     120 : 3A 1E               	bnz	$$mslp
(1)  120/     122 : (MACRO)             	Cretn
(1)  121/     124 :                     
(1)  122/     124 :                     
(1)  123/     124 :                     	
(1)  124/     124 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  125/     124 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  126/     124 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  127/     124 : (MACRO)             	ld2z retval
(1)  128/     128 :                     $$mulrlp:
(1)  129/     128 : (MACRO)             	shru2 regarg2
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 4 - 4/7/2017 8:14:26


(1)  130/     12E : 3B 3A               	bnf $$mulrnoadd
(1)  131/     130 :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  132/     130 : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  133/     13A :                     $$mulrnoadd:
(1)  134/     13A : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  135/     13B : 3A 40               	bnz $$mulrshft	;nope, continue
(1)  136/     13D : 8D                  	glo regarg2	;check bottom byte
(1)  137/     13E : 32 48               	bz $$mulrdone
(1)  138/     140 :                     $$mulrshft:
(1)  139/     140 : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  140/     146 : 30 28               	br $$mulrlp
(1)  141/     148 :                     $$mulrdone:		;here the product is in retval
(1)  142/     148 : (MACRO)             	cretn
(1)  143/     14A :                     
(1)  144/     14A :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  145/     14A :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  146/     14A :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  147/     14A :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  148/     14A :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  149/     14A :                     	;regarg1 to hold develop remainder, 
(1)  150/     14A :                     	;R10 to hold working dividend R11.0 as a temp
(1)  151/     14A :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  152/     14A :                     				;result in D, rwork.hi, DF
(1)  153/     14A :                     	glo reg2
(1)  154/     14A :                     	str sp
(1)  155/     14A :                     	glo reg1
(1)  156/     14A :                     	sm
(1)  157/     14A :                     	plo R11
(1)  158/     14A :                     	ghi reg2
(1)  159/     14A :                     	str sp
(1)  160/     14A :                     	ghi reg1
(1)  161/     14A :                     	smb
(1)  162/     14A :                     	endm
(1)  163/     14A :                     	
(1)  164/     14A : (MACRO)             	pushf R10	;save R10 & leave stack down 1
(1)  165/     14F : 8B                  	glo R11		;and bottom
(1)  166/     150 : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  167/     151 : (MACRO)             	cpy2 R10,regarg1
(1)  168/     155 : (MACRO)             	ld2z retval	;quotient
(1)  169/     159 : (MACRO)             	cpy2 rwork,regarg2
(1)  170/     15D :                     	
(1)  171/     15D : (MACRO)             	testsub R10,regarg2
(1)  172/     166 : 3B 81               	bnf $$computequot	;DF=0 means it didn't fit
(1)  173/     168 : BA                  	phi R10	;R10=R10-regarg2
(1)  174/     169 : 8B                  	glo R11
(1)  175/     16A : AA                  	plo R10
(1)  176/     16B :                     	
(1)  177/     16B :                     $$again:	;this is the divisor doubling phase
(1)  178/     16B : (MACRO)              	testsub R10,regarg2
(1)  179/     174 : 3B 81                	bnf $$computequot	;df=0 means it didn't fit
(1)  180/     176 : BA                  	phi R10	;R10=R10-regarg2
(1)  181/     177 : 8B                  	glo R11
(1)  182/     178 : AA                  	plo R10 	
(1)  183/     179 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  184/     17F : 30 6B                	br $$again
(1)  185/     181 :                      	
(1)  186/     181 :                      $$computequot:	;here we're computing the quotient
(1)  187/     181 : (MACRO)              	testsub regarg1,regarg2
(1)  188/     18A : 3B 90                	bnf $$testexit
(1)  189/     18C : BC                   	phi regarg1		;complete the subtraction
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 5 - 4/7/2017 8:14:26


(1)  190/     18D : 8B                   	glo R11
(1)  191/     18E : AC                   	plo regarg1
(1)  192/     18F : 1F                   	inc retval
(1)  193/     190 :                      $$testexit:
(1)  194/     190 : 9E                   	ghi rwork
(1)  195/     191 : F7                   	sm	;top of regarg2 is still on stack
(1)  196/     192 : 3A 9A                	bnz $$ney0y
(1)  197/     194 : 8D                   	glo regarg2
(1)  198/     195 : 52                   	str sp
(1)  199/     196 : 8E                   	glo rwork
(1)  200/     197 : F7                   	sm	;test low order bytes
(1)  201/     198 : 32 A8                	bz	$$out	;if = we're done
(1)  202/     19A :                      $$ney0y:
(1)  203/     19A : (MACRO)              	shl2 retval	;double quotient
(1)  204/     1A0 : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  205/     1A6 : 30 81                	br $$computequot	;continue
(1)  206/     1A8 :                      $$out:
(1)  207/     1A8 :                      ;here the quotient is in retval, remainder in regarg1
(1)  208/     1A8 : 12                    	inc sp	;release work area
(1)  209/     1A9 : 42                  	lda sp	;recover
(1)  210/     1AA : AB                  	plo R11	;bottom byte of R11
(1)  211/     1AB : (MACRO)             	popr R10 ;and all of R10
(1)  212/     1B0 : (MACRO)             	cretn	;and we're done
(1)  213/     1B2 :                     
(1)  214/     1B2 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  215/     1B2 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  216/     1B2 :                     _divI2:
(1)  217/     1B2 : 22                      dec	sp	;leave a work area available
(1)  218/     1B3 : 9C                      ghi regArg1
(1)  219/     1B4 : 52                      str sp	;save the sign of the 1st arg
(1)  220/     1B5 : FE                      shl
(1)  221/     1B6 : 3B C1                   bnf $$pos1	;if the 1st arg is -v
(1)  222/     1B8 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  223/     1C1 :                     $$pos1: ;1st is now +v, check 2nd
(1)  224/     1C1 : 9D                      ghi regArg2
(1)  225/     1C2 : F3                      xor	
(1)  226/     1C3 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  227/     1C4 : 9D                      ghi regArg2
(1)  228/     1C5 : FE                      shl
(1)  229/     1C6 : 3B D1                   bnf $$pos2	;if the 2nd arg is -v
(1)  230/     1C8 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  231/     1D1 :                     $$pos2: ; both args now +v
(1)  232/     1D1 : =>TRUE               if MOMCPU=$1805
(1)  233/     1D1 : 22                      dec sp	;protect workarea on the 1802
(1)  234/     1D2 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  235/     1D6 : 12                      inc sp	;recover work area
(1)  236/     1D7 : =>FALSE              else
(1)  237/     1D7 :                         Ccall _divU2	;call unsigned division
(1)  238/     1D7 : [232]                endif 
(1)  239/     1D7 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  240/     1D7 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  241/     1D8 : FE                      shl
(1)  242/     1D9 : 3B E4                   bnf $$done ;if the signs were different
(1)  243/     1DB : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  244/     1E4 :                     $$done:
(1)  245/     1E4 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  246/     1E6 :                     
(1)  247/     1E6 :                     
(1)  248/     1E6 :                     	align 256    ;32 bit operations follow
(1)  249/     200 :                     _divu4:
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 6 - 4/7/2017 8:14:26


(1)  250/     200 :                     ;This is an unsigned 32 bit restoring division
(1)  251/     200 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  252/     200 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  253/     200 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  254/     200 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  255/     200 :                     
(1)  256/     200 : F8 20               	ldi 32		;set loop count
(1)  257/     202 : AE                  	plo memaddr	;in temp register
(1)  258/     203 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  259/     20F :                     $$loop:
(1)  260/     20F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  261/     21B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  262/     227 :                     
(1)  263/     227 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  264/     23D :                     
(1)  265/     23D : FA 80               	ani 0x80	;check the top bit
(1)  266/     23F : 32 5D               	bz $$norestore	;if it's 0
(1)  267/     241 : 89                  		glo RL8
(1)  268/     242 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  269/     244 : A9                  		plo RL8
(1)  270/     245 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  271/     25B : 30 61               	br $$endlp 	;else
(1)  272/     25D :                     $$norestore:
(1)  273/     25D : 89                  		glo RL8
(1)  274/     25E : F9 01               		ori 1	;turn on the bottom bit
(1)  275/     260 : A9                  		plo RL8
(1)  276/     261 :                     	;end if
(1)  277/     261 :                     $$endlp:
(1)  278/     261 : 2E                  	dec memaddr	;check the cycle count
(1)  279/     262 : 8E                  	glo memaddr
(1)  280/     263 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  281/     265 :                     	
(1)  282/     265 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  283/     267 :                     		
(1)  284/     267 :                     
(1)  285/     267 :                     _mulu4:
(1)  286/     267 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  287/     267 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  288/     267 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  289/     267 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  290/     267 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  291/     267 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  292/     267 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  293/     267 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  294/     267 :                     	;for 10 we subtract and shift
(1)  295/     267 :                     	;for 00 and 11 we just shift
(1)  296/     267 :                     
(1)  297/     267 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  298/     273 : F8 20                   ldi 32
(1)  299/     275 : AE                      plo memaddr		;cycle count
(1)  300/     276 : FC 00                   adi 0		;clear df
(1)  301/     278 :                     $$mloop:
(1)  302/     278 : 89                      glo RL8
(1)  303/     279 : FA 01                   ani 1		;isolate bottom bit of result
(1)  304/     27B : 3B 97                   bnf	$$check_sub	;
(1)  305/     27D : 3A AF                   bnz	$$shift		;that would be the 11 case
(1)  306/     27F :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  307/     27F : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  308/     295 : 30 AF                   br $$shift
(1)  309/     297 :                     $$check_sub:
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 7 - 4/7/2017 8:14:26


(1)  310/     297 : 32 AF                   bz $$shift	;that would be the 00 case
(1)  311/     299 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  312/     299 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  313/     2AF :                     $$shift:
(1)  314/     2AF : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  315/     2BD : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  316/     2C9 :                     
(1)  317/     2C9 : 2E                      dec memaddr		;cycle count
(1)  318/     2CA : 8E                      glo memaddr
(1)  319/     2CB : 3A 78                   bnz $$mloop		;repeat cycle once for each bit position
(1)  320/     2CD :                         
(1)  321/     2CD : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  322/     2CF :                     
(1)  323/     2CF :                     	align 256
(1)  324/     300 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  325/     300 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  326/     300 :                     _divI4:
(1)  327/     300 : 22                      dec	sp	;leave a work area available
(1)  328/     301 : 98                      ghi RL8-1	;get the top of the dividend
(1)  329/     302 : 52                      str sp	;save the sign of the 1st arg
(1)  330/     303 : FE                      shl
(1)  331/     304 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  332/     306 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  333/     326 :                     $$pos1: ;1st is now +v, check 2nd
(1)  334/     326 : 9A                      ghi RL10-1
(1)  335/     327 : F3                      xor	
(1)  336/     328 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  337/     329 : 9A                      ghi RL10-1
(1)  338/     32A : FE                      shl
(1)  339/     32B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  340/     32D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  341/     34D :                     $$pos2: ; both args now +v
(1)  342/     34D : =>TRUE               if MOMCPU=$1805
(1)  343/     34D : 22                      dec sp	;protect workarea on the 1802
(1)  344/     34E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  345/     352 : 12                      inc sp	;recover work area
(1)  346/     353 : =>FALSE              else
(1)  347/     353 :                         Ccall _divU4	;call unsigned division
(1)  348/     353 : [342]                endif 
(1)  349/     353 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  350/     353 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  351/     354 : FE                      shl
(1)  352/     355 : 3B 77                   bnf $$done ;if the signs were different
(1)  353/     357 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  354/     377 :                     $$done:
(1)  355/     377 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  356/     379 :                     
(1)  357/     379 :                     _dubdabx:	
(1)  358/     379 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  359/     379 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  360/     379 :                     ;long interger is passed in rp1p2
(1)  361/     379 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  362/     379 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  363/     379 :                     ;r8-11 are used as temps
(1)  364/     379 :                     ;r8 is the working pointer
(1)  365/     379 :                     ;r15.0 is bit count(32) and the return value register
(1)  366/     379 :                     ;r9.0 is digit count
(1)  367/     379 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  368/     379 : =>TRUE               if MOMCPU=$1805
(1)  369/     379 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 8 - 4/7/2017 8:14:26


(1)  370/     385 : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  371/     391 : =>FALSE              else
(1)  372/     391 :                     	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  373/     391 :                     	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  374/     391 : [368]                endif
(1)  375/     391 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  376/     395 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  377/     397 : A9                  	plo r9
(1)  378/     398 :                     $$clrlp:	;clear the passed buffer
(1)  379/     398 : F8 00               	ldi 0	
(1)  380/     39A : 58                  	str r8	;clear a byte
(1)  381/     39B : 18                  	inc r8
(1)  382/     39C : 29                  	dec r9
(1)  383/     39D : 89                  	glo r9	;check the count
(1)  384/     39E : 3A 98               	bnz $$clrlp ;back for more
(1)  385/     3A0 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  386/     3A4 :                     
(1)  387/     3A4 : F8 20               	ldi 32	;bit count
(1)  388/     3A6 : AF                  	plo r15
(1)  389/     3A7 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  390/     3A7 :                     $$cktop:
(1)  391/     3A7 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  392/     3A8 : FE                  	shl		;check for a 1
(1)  393/     3A9 : 33 BC               	bdf $$bitloop	;move on if we have one
(1)  394/     3AB : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  395/     3B7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  396/     3B8 : 8F                  	glo r15
(1)  397/     3B9 : 3A A7               	bnz $$cktop	;
(1)  398/     3BB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  399/     3BC :                     $$bitloop:
(1)  400/     3BC : F8 0A               	ldi 10	;digit count
(1)  401/     3BE : A9                  	plo r9
(1)  402/     3BF :                     $$dcklp:
(1)  403/     3BF : 08                  	ldn r8 	;pick up a digit
(1)  404/     3C0 : FF 05               	smi 5	;see if it's greater than 4
(1)  405/     3C2 : 3B C7               	bnf $$dnoadd ;if not, bypass add
(1)  406/     3C4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  407/     3C6 : 58                  	str r8	;put it back
(1)  408/     3C7 :                     $$dnoadd:
(1)  409/     3C7 : 18                  	inc r8
(1)  410/     3C8 : 29                  	dec r9	;decrement digit count
(1)  411/     3C9 : 89                  	glo r9
(1)  412/     3CA : 3A BF               	bnz $$dcklp ;and back for next digit
(1)  413/     3CC :                     	
(1)  414/     3CC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  415/     3D8 :                     	
(1)  416/     3D8 : F8 0A               	ldi 10	;load the digit count again
(1)  417/     3DA : A9                  	plo r9
(1)  418/     3DB :                     ;r8 is now just past the units location and ready to walk back
(1)  419/     3DB :                     $$dshlp:
(1)  420/     3DB : 28                  	dec r8	;walk back from 0's position
(1)  421/     3DC : 08                  	ldn r8	;get the digit back
(1)  422/     3DD : 7E                  	shlc	;continue the shift
(1)  423/     3DE : BF                  	phi r15 ;save it for the carry test
(1)  424/     3DF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  425/     3E1 : 58                  	str r8	;put the digit back
(1)  426/     3E2 : 9F                  	ghi r15	;now test for carry
(1)  427/     3E3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  428/     3E5 : 29                  	dec r9	;decrement the digit count
(1)  429/     3E6 : 89                  	glo r9
 AS V1.42 Beta [Bld 87] - source file blink.oasm(lcc1802epiloNW.inc) - page 9 - 4/7/2017 8:14:26


(1)  430/     3E7 : 3A DB               	bnz $$dshlp ;back for more if needed
(1)  431/     3E9 :                     	
(1)  432/     3E9 : 2F                  	dec r15
(1)  433/     3EA : 8F                  	glo r15
(1)  434/     3EB : 3A BC               	bnz $$bitloop
(1)  435/     3ED :                     	
(1)  436/     3ED : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  437/     3F1 : F8 0A               	ldi 10		;digit count again
(1)  438/     3F3 : A9                  	plo r9
(1)  439/     3F4 :                     $$upnxt:
(1)  440/     3F4 : 08                  	ldn r8		;get digit
(1)  441/     3F5 : F9 30               	ori 0x30	;make ascii
(1)  442/     3F7 : 58                  	str r8		;put it back
(1)  443/     3F8 : 18                  	inc r8		;next digit
(1)  444/     3F9 : 29                  	dec r9		;counter
(1)  445/     3FA : 89                  	glo r9
(1)  446/     3FB : 3A F4               	bnz $$upnxt	;upgrade all 10 spots
(1)  447/     3FD : =>TRUE               if MOMCPU=$1805	
(1)  448/     3FD : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  449/     405 : =>FALSE              else
(1)  450/     405 :                      	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  451/     405 : [447]                endif
(1)  452/     405 : EE                  	sex memaddr	;set up
(1)  453/     406 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  454/     408 : F7                  	sm		;desired number of digits to skip
(1)  455/     409 : E2                  	sex sp		;reset index register
(1)  456/     40A : A9                  	plo r9		;number of leading 0's to skip
(1)  457/     40B :                     $$cknext:
(1)  458/     40B : 0F                  	ldn r15		;check digit
(1)  459/     40C : FF 30               	smi 0x30	;for '0'
(1)  460/     40E : 3A 15               	bnz $$done
(1)  461/     410 : 1F                  	inc r15		;next digit
(1)  462/     411 : 29                  	dec r9		;reduce count
(1)  463/     412 : 89                  	glo r9
(1)  464/     413 : 3A 0B               	bnz $$cknext
(1)  465/     415 :                     $$done:
(1)  466/     415 : (MACRO)             	cretn
(1)  467/     417 :                     	
(1)  468/     417 :                     	
(1)  469/     417 :                     _modU4:	;32 bit unsigned remainder
(1)  470/     417 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  471/     417 : (MACRO)                 Ccall _divU4
(1)  472/     41B : (MACRO)                 cpy4 RL8,Rp1p2
(1)  473/     423 : (MACRO)                 Cretn
(1)  474/     425 :                         
(1)  475/     425 :                     _modI4:	;32 bit signed remainder
(1)  476/     425 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  477/     425 : (MACRO)                 Ccall _divI4
(1)  478/     429 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  479/     431 : (MACRO)                 Cretn
(1)  480/     433 :                     	
(1)  481/     433 :                     
      50/     433 :                     	include IO1802.inc
(1)    1/     433 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     433 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     433 :                     	align 64
(1)    4/     440 :                     _putc:
(1)    5/     440 :                     _out5:	
(1)    6/     440 : 8C                  	glo	regArg1
(1)    7/     441 : 22                  	dec	sp
 AS V1.42 Beta [Bld 87] - source file blink.oasm(IO1802.inc) - page 10 - 4/7/2017 8:14:26


(1)    8/     442 : 52                  	str	sp
(1)    9/     443 : 65                  	out	5
(1)   10/     444 : (MACRO)             	Cretn
(1)   11/     446 :                     _inp:		;raw port input
(1)   12/     446 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     446 : 22                  	dec	sp	;work backwards
(1)   14/     447 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     449 : 73                  	stxd		
(1)   16/     44A : 8C                  	glo	regarg1	;get the port number
(1)   17/     44B : FA 07               	ani	0x07	;clean it
(1)   18/     44D : 32 5D               	bz	+	; inp(0) isn't valid
(1)   19/     44F : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     451 : 73                  	stxd		;store it for execution
(1)   21/     452 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     456 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     457 : D8                  	sep	rt1	;execute it
(1)   24/     458 :                     ;we will come back to here with the input byte in D
(1)   25/     458 : 12                  	inc	sp	;step over the work area
(1)   26/     459 : AF                  	plo	retVal	;save it to return
(1)   27/     45A : F8 00               	ldi	0
(1)   28/     45C : BF                  	phi	retval	;clear top byte
(1)   29/     45D : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     45E : 12                  	inc	sp	;and the D3
(1)   31/     45F : (MACRO)             	Cretn		;and we're done
(1)   32/     461 :                     	
(1)   33/     461 :                     _out:		;raw port output
(1)   34/     461 :                     		;stores a small tailored program on the stack and executes it
(1)   35/     461 :                     		;this could be bolder:
(1)   36/     461 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/     461 :                     		;then SEP sp
(1)   38/     461 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/     461 :                     		;saves 6 instructions but it's a bit tricky.
(1)   40/     461 : 22                  	dec	sp	;work backwards
(1)   41/     462 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/     464 : 73                  	stxd		
(1)   43/     465 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/     469 : 8C                  	glo	regarg1	;get the port number
(1)   45/     46A : FA 07               	ani	0x07	;clean it
(1)   46/     46C : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/     46E : 73                  	stxd		;store it for execution
(1)   48/     46F : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/     470 : 52                  	str	sp	;store it where sp points
(1)   50/     471 : D8                  	sep	rt1	;execute it
(1)   51/     472 :                     ;we will come back to here with sp stepped up by one
(1)   52/     472 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/     473 : 12                  	inc	sp	;and the D3
(1)   54/     474 : (MACRO)             	Cretn		;and we're done
(1)   55/     476 :                     	
(1)   56/     476 :                     	
(1)   57/     476 :                     
      51/     476 :                     
 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 11 - 4/7/2017 8:14:26


  symbol table (* = unused):
  ------------------------

 AGAIN56 :                      16B C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - |  BITLOOP61 :                    3BC C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_SUB59 :                  297 C |  CKNEXT61 :                     40B C |
 CKTOP61 :                      3A7 C |  CLRLP61 :                      398 C |
 COMPUTEQUOT56 :                181 C | *CONSTPI :        3.141592653589793 - |
*DATE :                    4/7/2017 - |  DCKLP61 :                      3BF C |
 DNOADD61 :                     3C7 C |  DONE57 :                       1E4 C |
 DONE60 :                       377 C |  DONE61 :                       415 C |
 DSHLP61 :                      3DB C |  ENDLP58 :                      261 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            24 C |
 LCC1802CPUSPEED :           186A00 - |  LCC1802INIT :                   26 C |
 LCC1802SUBOVHD :                 E - |  LCCCODELOC :                     0 - |
 LCCSTACKLOC :                 1063 - | *LISTON :                         1 - |
 LOOP58 :                       20F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP59 :                      278 C |
 MOMCPU :                      1805 - | *MOMCPUNAME :                  1805 - |
 MSLP54 :                       11E C |  MULRDONE55 :                   148 C |
 MULRLP55 :                     128 C |  MULRNOADD55 :                  13A C |
 MULRSHFT55 :                   140 C | *NESTMAX :                      100 - |
 NEY0Y56 :                      19A C |  NORESTORE58 :                  25D C |
 OUT56 :                        1A8 C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS157 :                       1C1 C |
 POS160 :                       326 C |  POS257 :                       1D1 C |
 POS260 :                       34D C | *R0 :                             0 - |
*R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - | *R12 :                            C - |
*R13 :                            D - | *R14 :                            E - |
 R15 :                            F - | *R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
*R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - | *RL0 :                            1 - |
 RL10 :                           B - | *RL12 :                           D - |
*RL6 :                            7 - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SHIFT59 :                      2AF C |  SP :                             2 - |
 TESTEXIT56 :                   190 C | *TIME :                     8:14:26 - |
*TRUE :                           1 - |  UPNXT61 :                      3F4 C |
*VERSION :                     142F - |  _0000044 :                      38 C |
 _CALL :                        101 C |  _DIE44 :                        3C C |
 _DIVI2 :                       1B2 C |  _DIVI4 :                       300 C |
 _DIVU2 :                       14A C |  _DIVU4 :                       200 C |
*_DUBDABX :                     379 C | *_INP :                         446 C |
 _MAIN :                          C C | *_MODI2 :                        51 C |
*_MODI4 :                       425 C | *_MODU2 :                        47 C |
*_MODU4 :                       417 C | *_MULU2 :                       124 C |
 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 12 - 4/7/2017 8:14:26


*_MULU4 :                       267 C | *_ONEMS :                       11C C |
*_OUT :                         461 C | *_OUT4 :                         5B C |
*_OUT5 :                        440 C | *_PIN4 :                          3 C |
*_PUTC :                        440 C |  _RETURN :                      112 C |
*_SETQOFF :                      44 C | *_SETQON :                       41 C |
 _TEST :                          4 C |  __FORW0 :                      45D C |
*__FORW1 :                      472 C |

    127 symbols
     59 unused symbols

 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 13 - 4/7/2017 8:14:26


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHF                                
PUSHL                                 | PUSHM                                
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHLR2R                                | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST2I                                  | ST4                                  
STR1                                  | STR1I                                
STR2                                  | STR2I                                
TESTSUB                               | ZEXT                                 
ZEXT4                                 |

    107 macros

 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 14 - 4/7/2017 8:14:26


 AS V1.42 Beta [Bld 87] - source file blink.oasm - page 15 - 4/7/2017 8:14:26


  codepages:
  ----------

STANDARD (0 changed characters)


0.10 seconds assembly time

   1714 lines source file
   2366 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
