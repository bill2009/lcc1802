 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 1 - 1/31/2018 16:36:53


       1/       0 :                     ; generated by lcc-xr18NW $Version: 5.0 - XR18NW $ on Wed Jan 31 16:36:52 2018
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1071/       0 :                     	listing	on
(1) 1072/       0 : C0 05 B8            	lbr	lcc1802Init
(1) 1073/       3 :                     	
(1) 1074/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _boydsegments:
      15/       4 : 00                  	db 0
      16/       5 : 00                  	db 0
      17/       6 : 00                  	db 0
      18/       7 : 00                  	db 0
      19/       8 : 00                  	db 0
      20/       9 : 00                  	db 0
      21/       A : 00                  	db 0
      22/       B : 00                  	db 0
      23/       C : 00                  	db 0
      24/       D : 00                  	db 0
      25/       E : 00                  	db 0
      26/       F : 00                  	db 0
      27/      10 : 00                  	db 0
      28/      11 : 00                  	db 0
      29/      12 : 00                  	db 0
      30/      13 : 00                  	db 0
      31/      14 : 00                  	db 0
      32/      15 : 00                  	db 0
      33/      16 : 00                  	db 0
      34/      17 : 00                  	db 0
      35/      18 : 00                  	db 0
      36/      19 : 00                  	db 0
      37/      1A : 00                  	db 0
      38/      1B : 00                  	db 0
      39/      1C : 00                  	db 0
      40/      1D : 00                  	db 0
      41/      1E : 00                  	db 0
      42/      1F : 00                  	db 0
      43/      20 : 00                  	db 0
      44/      21 : 00                  	db 0
      45/      22 : 00                  	db 0
      46/      23 : 00                  	db 0
      47/      24 : 00                  	db 0
      48/      25 : 00                  	db 0
      49/      26 : 22                  	db 34
      50/      27 : 00                  	db 0
      51/      28 : 00                  	db 0
      52/      29 : 00                  	db 0
      53/      2A : 00                  	db 0
      54/      2B : 20                  	db 32
      55/      2C : 00                  	db 0
      56/      2D : 00                  	db 0
      57/      2E : 00                  	db 0
      58/      2F : 00                  	db 0
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 2 - 1/31/2018 16:36:53


      59/      30 : 11                  	db 17
      60/      31 : 04                  	db 4
      61/      32 : 00                  	db 0
      62/      33 : 2C                  	db 44
      63/      34 : 7B                  	db 123
      64/      35 : 30                  	db 48
      65/      36 : 6D                  	db 109
      66/      37 : 75                  	db 117
      67/      38 : 36                  	db 54
      68/      39 : 57                  	db 87
      69/      3A : 5F                  	db 95
      70/      3B : 70                  	db 112
      71/      3C : 7F                  	db 127
      72/      3D : 77                  	db 119
      73/      3E : 41                  	db 65
      74/      3F : 51                  	db 81
      75/      40 : 00                  	db 0
      76/      41 : 00                  	db 0
      77/      42 : 00                  	db 0
      78/      43 : 00                  	db 0
      79/      44 : 6F                  	db 111
      80/      45 : 7E                  	db 126
      81/      46 : 1F                  	db 31
      82/      47 : 4B                  	db 75
      83/      48 : 3D                  	db 61
      84/      49 : 4F                  	db 79
      85/      4A : 4E                  	db 78
      86/      4B : 5B                  	db 91
      87/      4C : 3E                  	db 62
      88/      4D : 10                  	db 16
      89/      4E : 39                  	db 57
      90/      4F : 5E                  	db 94
      91/      50 : 0B                  	db 11
      92/      51 : 58                  	db 88
      93/      52 : 1C                  	db 28
      94/      53 : 1D                  	db 29
      95/      54 : 6E                  	db 110
      96/      55 : 67                  	db 103
      97/      56 : 0C                  	db 12
      98/      57 : 53                  	db 83
      99/      58 : 0F                  	db 15
     100/      59 : 3B                  	db 59
     101/      5A : 19                  	db 25
     102/      5B : 23                  	db 35
     103/      5C : 5C                  	db 92
     104/      5D : 37                  	db 55
     105/      5E : 69                  	db 105
     106/      5F : 00                  	db 0
     107/      60 : 16                  	db 22
     108/      61 : 00                  	db 0
     109/      62 : 00                  	db 0
     110/      63 : 01                  	db 1
     111/      64 : 06                  	db 6
     112/      65 : 7E                  	db 126
     113/      66 : 1F                  	db 31
     114/      67 : 4B                  	db 75
     115/      68 : 3D                  	db 61
     116/      69 : 4F                  	db 79
     117/      6A : 4E                  	db 78
     118/      6B : 5B                  	db 91
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 3 - 1/31/2018 16:36:53


     119/      6C : 3E                  	db 62
     120/      6D : 10                  	db 16
     121/      6E : 39                  	db 57
     122/      6F : 5E                  	db 94
     123/      70 : 0B                  	db 11
     124/      71 : 58                  	db 88
     125/      72 : 1C                  	db 28
     126/      73 : 1D                  	db 29
     127/      74 : 6E                  	db 110
     128/      75 : 67                  	db 103
     129/      76 : 0C                  	db 12
     130/      77 : 53                  	db 83
     131/      78 : 0F                  	db 15
     132/      79 : 3B                  	db 59
     133/      7A : 19                  	db 25
     134/      7B : 23                  	db 35
     135/      7C : 5C                  	db 92
     136/      7D : 37                  	db 55
     137/      7E : 69                  	db 105
     138/      7F : 00                  	db 0
     139/      80 : 00                  	db 0
     140/      81 : 00                  	db 0
     141/      82 : 00                  	db 0
     142/      83 : 00                  	db 0
     143/      84 :                     ;$$function start$$ _disp1
     144/      84 :                     _disp1:		;framesize=2
     145/      84 :                     ;void disp1(unsigned char d){//display a byte as two hex digits
     146/      84 :                     ;	asm(" glo 12\n ani 0x0f\n" //prep bottom digit
     147/      84 : 8C                   glo 12
     148/      85 : FA 0F                ani 0x0f
     149/      87 : 22                   dec 2
     150/      88 : 52                   str 2
     151/      89 : 67                   out 7
     152/      8A : 8C                   glo 12
     153/      8B : F6                   shr
     154/      8C : F6                   shr
     155/      8D : F6                   shr
     156/      8E : F6                   shr
     157/      8F : 22                   dec 2
     158/      90 : 52                   str 2
     159/      91 : 67                   out 7
     160/      92 :                     ;}
     161/      92 :                     L1:
     162/      92 : (MACRO)             	Cretn
     163/      94 :                     
     164/      94 :                     ;$$function end$$ _disp1
     165/      94 :                     ;$$function start$$ _dispval
     166/      94 :                     _dispval:		;framesize=8
     167/      94 : (MACRO)             	pushr R7
     168/      96 : (MACRO)             	reserve 4; save room for outgoing arguments
     169/      9A : (MACRO)             	st2 R12,'O',sp,(8+1); flag1 
     170/      A7 : (MACRO)             	ldA2 R11,'O',sp,(8+1); reg:addr
     171/      AF : (MACRO)             	ld2 R10,'O',sp,(8+1) ;reg:INDIRI2(addr)
     172/      BB : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     173/      BD :                     ;void dispval(unsigned char v){
     174/      BD :                     ;	initleds(0b11010000); //LEDs in hex decode mode
     175/      BD :                     ;	disp1(v);
     176/      BD : 7A                   req
     177/      BE : 7B                   seq
     178/      BF : 22                   dec 2
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 4 - 1/31/2018 16:36:53


     179/      C0 : F8 D0                ldi 0b11010000
     180/      C2 : 52                   str 2
     181/      C3 : 67                   out 7
     182/      C4 : 7A                   req
     183/      C5 : (MACRO)             	ld1 R12,'O',sp,(8+1)
     184/      CF : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     185/      D2 : (MACRO)             	Ccall _disp1
     186/      D6 :                     ;	for (i=6;i!=0;i--) out(7,0);
     187/      D6 : (MACRO)             	ldaD R7,6; reg:acon
     188/      DA : C0 00 EA            	lbr L8
     189/      DD :                     L5:
     190/      DD : (MACRO)             	ldaD R12,7; reg:acon
     191/      E1 : (MACRO)             	ld2z R13
     192/      E5 : (MACRO)             	Ccall _out; CALLI2(ar)
     193/      E9 :                     L6:
     194/      E9 : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     195/      EA :                     L8:
     196/      EA : (MACRO)             	jnzU2 R7,L5; NE 0 
     197/      F2 :                     ;}
     198/      F2 :                     L3:
     199/      F2 : (MACRO)             	release 4; release room for outgoing arguments
     200/      F6 : (MACRO)             	popr R7
     201/      FB : (MACRO)             	Cretn
     202/      FD :                     
     203/      FD :                     ;$$function end$$ _dispval
     204/      FD :                     ;$$function start$$ _strlen
     205/      FD :                     _strlen:		;framesize=4
     206/      FD : (MACRO)             	pushr R7
     207/      FF :                     ;{
     208/      FF :                     ;	unsigned int slen = 0 ;
     209/      FF : (MACRO)             	ld2z R7
     210/     103 : C0 01 08            	lbr L11
     211/     106 :                     L10:
     212/     106 :                     ;	while (*str != 0) {
     213/     106 :                     ;      slen++ ;
     214/     106 : (MACRO)             	incm R7,1
     215/     107 :                     ;      str++ ;
     216/     107 : (MACRO)             	incm R12,1
     217/     108 :                     ;   }
     218/     108 :                     L11:
     219/     108 :                     ;	while (*str != 0) {
     220/     108 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
     221/     10A : (MACRO)             	jnzU1 R11,L10; NEI2(CVUI2(reg),con0)
     222/     10E :                     ;   return slen;
     223/     10E : (MACRO)             	cpy2 R15,R7 ;LOADU2*(reg)
     224/     112 :                     L9:
     225/     112 : (MACRO)             	popr R7
     226/     117 : (MACRO)             	Cretn
     227/     119 :                     
     228/     119 :                     ;$$function end$$ _strlen
     229/     119 :                     ;$$function start$$ _itoa
     230/     119 :                     _itoa:		;framesize=16
     231/     119 : (MACRO)             	reserve 2; save room for local variables
     232/     11B : (MACRO)             	pushr R0
     233/     11D : (MACRO)             	pushr R1
     234/     11F : (MACRO)             	pushr R6
     235/     121 : (MACRO)             	pushr R7
     236/     123 : (MACRO)             	reserve 4; save room for outgoing arguments
     237/     127 : (MACRO)             	st2 R12,'O',sp,(16+1)			
     238/     134 : 1E                  	inc memaddr				;opt16.1
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 5 - 1/31/2018 16:36:53


     239/     135 : (MACRO)             	str2 R13,memaddr			
     240/     13B :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     241/     13B :                     ;	unsigned int flag=0;
     242/     13B : (MACRO)             	ld2z R0
     243/     13F :                     ;	char * bptr; bptr=buffer;
     244/     13F : (MACRO)             	ld2 R11,'O',sp,(18+1) ;reg:INDIRP2(addr)
     245/     14B : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNP2(addr,reg)
     246/     158 :                     ;	if (s<0){
     247/     158 : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
     248/     164 : (MACRO)             	jcI2I R11,0,lbdf,L14; GE is flipped test from LT
     249/     175 :                     ;		*bptr='-';bptr++;
     250/     175 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     251/     181 : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
     252/     184 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     253/     190 : (MACRO)             	incm R11,1
     254/     191 : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNP2(addr,reg)
     255/     19E :                     ;		n=-s;
     256/     19E : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
     257/     1AA : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     258/     1B3 : (MACRO)             	cpy2 R6,R11 ;LOADU2*(reg)
     259/     1B7 :                     ;	} else{
     260/     1B7 : C0 01 CA            	lbr L15
     261/     1BA :                     L14:
     262/     1BA :                     ;		n=s;
     263/     1BA : (MACRO)             	ld2 R11,'O',sp,(16+1) ;reg:INDIRI2(addr)
     264/     1C6 : (MACRO)             	cpy2 R6,R11 ;LOADU2*(reg)
     265/     1CA :                     ;	}
     266/     1CA :                     L15:
     267/     1CA :                     ;	k=10000;
     268/     1CA : (MACRO)             	ldaD R7,10000; reg:acon
     269/     1CE : C0 02 50            	lbr L17
     270/     1D1 :                     L16:
     271/     1D1 :                     ;	while(k>0){
     272/     1D1 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     273/     1D1 : (MACRO)             	ld2z R1
     274/     1D5 : C0 01 E3            	lbr L22
     275/     1D8 :                     L19:
     276/     1D8 :                     L20:
     277/     1D8 : (MACRO)             	incm R1,1
     278/     1D9 : (MACRO)             	alu2 R6,R6,R7,sm,smb
     279/     1E3 :                     L22:
     280/     1E3 : (MACRO)             	jcU2 R6,R7,lbdf,L19 ;LE is flipped test & operands
     281/     1F0 :                     ;		if (flag || r>0||k==1){
     282/     1F0 : (MACRO)             	jnzU2 R0,L26; NE 0 
     283/     1F8 : (MACRO)             	jnzU2 R1,L26; NE 0 
     284/     200 : (MACRO)             	jneU2I R7,1,L23; NE
     285/     20C :                     L26:
     286/     20C :                     ;			*bptr=('0'+r);bptr++;
     287/     20C : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     288/     218 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
     289/     220 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     290/     222 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     291/     22E : (MACRO)             	incm R11,1
     292/     22F : (MACRO)             	st2 R11,'O',sp,(12+1); ASGNP2(addr,reg)
     293/     23C :                     ;			flag='y';
     294/     23C : (MACRO)             	ldaD R0,121; reg:acon
     295/     240 :                     ;		}
     296/     240 :                     L23:
     297/     240 :                     ;		k=k/10;
     298/     240 : (MACRO)             	cpy2 R12,R7 ;LOADU2*(reg)
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 6 - 1/31/2018 16:36:53


     299/     244 : (MACRO)             	ldaD R13,10; reg:acon
     300/     248 : (MACRO)             	Ccall _divu2
     301/     24C : (MACRO)             	cpy2 R7,R15 ;LOADU2*(reg)
     302/     250 :                     ;	}
     303/     250 :                     L17:
     304/     250 :                     ;	while(k>0){
     305/     250 : (MACRO)             	jnzU2 R7,L16; NE 0 
     306/     258 :                     ;	*bptr='\0';
     307/     258 : (MACRO)             	ld2 R11,'O',sp,(12+1) ;reg:INDIRP2(addr)
     308/     264 : (MACRO)             	str1I 0,R11; ASGNU1(indaddr,acon)	DH
     309/     267 :                     ;	return buffer;
     310/     267 : (MACRO)             	ld2 R15,'O',sp,(18+1) ;reg:INDIRP2(addr)
     311/     273 :                     L13:
     312/     273 : (MACRO)             	release 4; release room for outgoing arguments
     313/     277 : (MACRO)             	popf R7	;opt11.3
     314/     27A : (MACRO)             	popm R6	;opt11.4
     315/     27C : (MACRO)             	popm R1	;opt11.4
     316/     27E : (MACRO)             	popl R0	;opt11.4
     317/     282 : (MACRO)             	release 2; release room for local variables 
     318/     284 : (MACRO)             	Cretn
     319/     286 :                     
     320/     286 :                     ;$$function end$$ _itoa
     321/     286 :                     ;$$function start$$ _dispstr
     322/     286 :                     _dispstr:		;framesize=12
     323/     286 : (MACRO)             	pushr R1
     324/     288 : (MACRO)             	pushr R6
     325/     28A : (MACRO)             	pushr R7
     326/     28C : (MACRO)             	reserve 4; save room for outgoing arguments
     327/     290 : (MACRO)             	st2 R12,'O',sp,(12+1); flag1 
     328/     29D :                     ;void dispstr(char * str){//display 8 or fewer characters on the boyd LEDs
     329/     29D :                     ;	L=min(strlen((char *)str),8);//length to display
     330/     29D : (MACRO)             	ld2 R12,'O',sp,(12+1) ;reg:INDIRP2(addr)
     331/     2A9 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     332/     2AD : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     333/     2B1 : (MACRO)             	jcI2I R11,8,lbdf,L29; GE is flipped test from LT
     334/     2C2 : (MACRO)             	ld2 R12,'O',sp,(12+1) ;reg:INDIRP2(addr)
     335/     2CE : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     336/     2D2 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     337/     2D6 : (MACRO)             	cpy2 R1,R11 ;LOADU2*(reg)
     338/     2DA : C0 02 E1            	lbr L30
     339/     2DD :                     L29:
     340/     2DD : (MACRO)             	ldaD R1,8; reg:acon
     341/     2E1 :                     L30:
     342/     2E1 : (MACRO)             	cpy2 R6,R1 ;LOADU2*(reg)
     343/     2E5 :                     ;	initleds(0b11110000); //LEDs in no-decode mode
     344/     2E5 :                     ;	if (L<8){
     345/     2E5 : 7A                   req
     346/     2E6 : 7B                   seq
     347/     2E7 : 22                   dec 2
     348/     2E8 : F8 F0                ldi 0b11110000
     349/     2EA : 52                   str 2
     350/     2EB : 67                   out 7
     351/     2EC : 7A                   req
     352/     2ED : (MACRO)             	jcI2I R6,8,lbdf,L32; GE is flipped test from LT
     353/     2FE :                     ;		for(i=(8-L); i>0;i--){ //blank trailing positions
     354/     2FE : (MACRO)             	ldaD R11,8; reg:acon
     355/     302 : (MACRO)             	alu2 R7,R11,R6,sm,smb
     356/     30C : C0 03 1C            	lbr L37
     357/     30F :                     L34:
     358/     30F :                     ;			out(7,0);
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 7 - 1/31/2018 16:36:53


     359/     30F : (MACRO)             	ldaD R12,7; reg:acon
     360/     313 : (MACRO)             	ld2z R13
     361/     317 : (MACRO)             	Ccall _out; CALLI2(ar)
     362/     31B :                     ;		}
     363/     31B :                     L35:
     364/     31B :                     ;		for(i=(8-L); i>0;i--){ //blank trailing positions
     365/     31B : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     366/     31C :                     L37:
     367/     31C : (MACRO)             	jnzU2 R7,L34; NE 0 
     368/     324 :                     ;	}
     369/     324 :                     L32:
     370/     324 :                     ;	for (i=L;i>0;i--){
     371/     324 : (MACRO)             	cpy2 R7,R6 ;LOADU2*(reg)
     372/     328 : C0 03 5C            	lbr L41
     373/     32B :                     L38:
     374/     32B :                     ;		out(7,boydsegments[str[i-1]]);
     375/     32B : (MACRO)             	ldaD R12,7; reg:acon
     376/     32F : (MACRO)             	cpy2 R11,R7	;SUBU2(reg,consm)
     377/     333 : (MACRO)             	decm R11,1	;SUBU2(reg,consm)
     378/     334 : (MACRO)             	alu2RRS R11,R11,'O',sp,(12+1),add,adc; ADDI2(r,INDIRP2(addr))	DH3.1
     379/     345 : (MACRO)             	ldn1 R11,R11	;opt14*
     380/     347 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     381/     34A : (MACRO)             	ld1 R13,'O',R11,(_boydsegments)
     382/     354 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     383/     357 : (MACRO)             	Ccall _out; CALLI2(ar)
     384/     35B :                     ;	}
     385/     35B :                     L39:
     386/     35B :                     ;	for (i=L;i>0;i--){
     387/     35B : (MACRO)             	decm R7,1	;SUBU2(reg,consm)
     388/     35C :                     L41:
     389/     35C : (MACRO)             	jnzU2 R7,L38; NE 0 
     390/     364 :                     ;}
     391/     364 :                     L27:
     392/     364 : (MACRO)             	release 4; release room for outgoing arguments
     393/     368 : (MACRO)             	popf R7	;opt11.3
     394/     36B : (MACRO)             	popm R6	;opt11.4
     395/     36D : (MACRO)             	popl R1	;opt11.4
     396/     371 : (MACRO)             	Cretn
     397/     373 :                     
     398/     373 :                     ;$$function end$$ _dispstr
     399/     373 :                     L43:
     400/     373 : 30                  	db 48
     401/     374 : 31                  	db 49
     402/     375 : 32                  	db 50
     403/     376 : 33                  	db 51
     404/     377 : 34                  	db 52
     405/     378 : 35                  	db 53
     406/     379 : 36                  	db 54
     407/     37A : 37                  	db 55
     408/     37B :                     ;$$function start$$ _main
     409/     37B :                     _main: ;copt is peeping your size 20 frame with oct 23 rules
     410/     37B : (MACRO)             	reserve 10; save room for local variables
     411/     385 : (MACRO)             	pushr R6
     412/     387 : (MACRO)             	pushr R7
     413/     389 : (MACRO)             	reserve 4; save room for outgoing arguments
     414/     38D :                     ;{
     415/     38D :                     ;	unsigned int acc=0;
     416/     38D : (MACRO)             	ld2z R7
     417/     391 :                     ;	char buf[8]="01234567";
     418/     391 : (MACRO)             	ldA2 R11,'O',sp,(10+1); reg:addr
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 8 - 1/31/2018 16:36:53


     419/     399 : (MACRO)             	ldaD R8,L43; reg:acon
     420/     39D : (MACRO)             	blkcpy R11,R8,8; ASGNB(reg,INDIRB(reg))
     421/     3B0 :                     ;	dispval(0x42);
     422/     3B0 : (MACRO)             	ldaD R12,66; reg:acon
     423/     3B4 : (MACRO)             	Ccall _dispval
     424/     3B8 :                     ;	delay(100);
     425/     3B8 : (MACRO)             	ldaD R12,100; reg:acon
     426/     3BC : (MACRO)             	Ccall _delay
     427/     3C0 :                     ;	dispstr("BOYDPROG");
     428/     3C0 : (MACRO)             	ldaD R12,L44; reg:acon
     429/     3C4 : (MACRO)             	Ccall _dispstr
     430/     3C8 :                     ;	delay(2000);
     431/     3C8 : (MACRO)             	ldaD R12,2000; reg:acon
     432/     3CC : (MACRO)             	Ccall _delay
     433/     3D0 : C0 04 53            	lbr L46
     434/     3D3 :                     L45:
     435/     3D3 :                     ;	while(1){
     436/     3D3 :                     ;		dispstr("_"); acc=0;
     437/     3D3 : (MACRO)             	ldaD R12,L48; reg:acon
     438/     3D7 : (MACRO)             	Ccall _dispstr
     439/     3DB : (MACRO)             	ld2z R7
     440/     3DF :                     ;		k=boydscan();
     441/     3DF : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     442/     3E3 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     443/     3E7 : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     444/     3E9 : C0 04 3D            	lbr L50
     445/     3EC :                     L49:
     446/     3EC :                     ;		while(k<16){
     447/     3EC :                     ;			acc=(acc<<4)+k;
     448/     3EC : (MACRO)             	cpy2 R11,R7
     449/     3F0 : (MACRO)             	shl2I R11,4
     450/     408 : (MACRO)             	cpy1 R10,R6
     451/     40A : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     452/     40D : (MACRO)             	alu2 R7,R11,R10,add,adc; ADDU2(r,r)
     453/     417 :                     ;			dispstr(itoa(acc,buf));
     454/     417 : (MACRO)             	cpy2 R12,R7 ;LOADI2(reg)
     455/     41B : (MACRO)             	ldA2 R13,'O',sp,(10+1); reg:addr
     456/     423 : (MACRO)             	Ccall _itoa
     457/     427 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     458/     42B : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     459/     42F : (MACRO)             	Ccall _dispstr
     460/     433 :                     ;			k=boydscan();
     461/     433 : (MACRO)             	Ccall _boydscan; CALLI2(ar)
     462/     437 : (MACRO)             	cpy2 R11,R15 ;LOADU2*(reg)
     463/     43B : (MACRO)             	cpy1 R6,R11;LOADU1(reg)
     464/     43D :                     ;		}
     465/     43D :                     L50:
     466/     43D :                     ;		while(k<16){
     467/     43D : (MACRO)             	cpy1 R11,R6
     468/     43F : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     469/     442 : (MACRO)             	jcI2I R11,16,lbnf,L49  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     470/     453 :                     ;	}
     471/     453 :                     L46:
     472/     453 :                     ;	while(1){
     473/     453 : C0 03 D3            	lbr L45
     474/     456 :                     ;}
     475/     456 :                     L42:
     476/     456 : (MACRO)             	release 4; release room for outgoing arguments
     477/     45A : (MACRO)             	popf R7	;opt11.3
     478/     45D : (MACRO)             	popl R6	;opt11.3
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 9 - 1/31/2018 16:36:53


     479/     461 : (MACRO)             	release 10; release room for local variables 
     480/     469 : (MACRO)             	Cretn
     481/     46B :                     
     482/     46B :                     ;$$function end$$ _main
     483/     46B :                     ;$$function start$$ _delay
     484/     46B :                     _delay:		;framesize=10
     485/     46B : (MACRO)             	pushr R6
     486/     46D : (MACRO)             	pushr R7
     487/     46F : (MACRO)             	reserve 4; save room for outgoing arguments
     488/     473 : (MACRO)             	cpy2 R7,R12; function(2054) 1
     489/     477 :                     ;void delay(unsigned int howlong){
     490/     477 :                     ;	for (i=1;i!=howlong;i++){
     491/     477 : (MACRO)             	ldaD R6,1; reg:acon
     492/     47B : C0 04 83            	lbr L56
     493/     47E :                     L53:
     494/     47E :                     ;		oneMs();
     495/     47E : (MACRO)             	Ccall _oneMs; CALLI2(ar)
     496/     482 :                     ;	}
     497/     482 :                     L54:
     498/     482 :                     ;	for (i=1;i!=howlong;i++){
     499/     482 : (MACRO)             	incm R6,1
     500/     483 :                     L56:
     501/     483 : (MACRO)             	jneU2 R6,R7,L53; NE
     502/     495 :                     ;}
     503/     495 :                     L52:
     504/     495 : (MACRO)             	release 4; release room for outgoing arguments
     505/     499 : (MACRO)             	popf R7	;opt11.3
     506/     49C : (MACRO)             	popl R6	;opt11.3
     507/     4A0 : (MACRO)             	Cretn
     508/     4A2 :                     
     509/     4A2 :                     ;$$function end$$ _delay
     510/     4A2 :                     ;$$function start$$ _olduinoincluder
     511/     4A2 :                     _olduinoincluder:		;framesize=2
     512/     4A2 :                     ;void olduinoincluder(){
     513/     4A2 :                     ;	asm("\tinclude olduino.inc\n");
     514/     4A2 :                     	include olduino.inc
(1)    1/     4A2 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     4A2 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     4A2 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     4A2 :                     	align 64	;needed to make sure all on same page
(1)    5/     4C0 :                     _digitalWrite:
(1)    6/     4C0 : 8C                  	glo regArg1	;get the bit number
(1)    7/     4C1 : FC DE               	adi $$bvtable&255	;add the table offset
(1)    8/     4C3 : AE                  	plo memaddr
(1)    9/     4C4 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     4C5 : BE                  	phi memaddr	
(1)   11/     4C6 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     4C7 : A8                  	plo rt1		;save it in a temp
(1)   13/     4C8 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     4CC : EE                  	sex memaddr	;prepare to change it
(1)   15/     4CD : 8D                  	glo regArg2	;get on/off switch
(1)   16/     4CE : 32 D5               	bz $$setbitoff
(1)   17/     4D0 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     4D0 : 88                  	glo rt1		;get the bit value back
(1)   19/     4D1 : F1                  	or		;apply it
(1)   20/     4D2 : 5E                  	str memaddr	;and save it
(1)   21/     4D3 : 30 DA               	br $$outit	;go fnish up
(1)   22/     4D5 :                     $$setbitoff:
(1)   23/     4D5 : 88                  	glo rt1		;get the bit pattern
(1)   24/     4D6 : FB FF               	xri 0xff	;reverse it
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(olduino.inc) - page 10 - 1/31/2018 16:36:53


(1)   25/     4D8 : F2                  	and		;combine it with the existing pin value
(1)   26/     4D9 : 5E                  	str memaddr	;and save it
(1)   27/     4DA :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     4DA :                     $$outit:
(1)   29/     4DA : 64                  	out 4		;X was already set to memaddr
(1)   30/     4DB : E2                  	sex sp		;reset X
(1)   31/     4DC : (MACRO)             	cretn
(1)   32/     4DE : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     4E6 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     4E6 :                     	align 8	;protect jump boundary
(1)   35/     4E8 :                     _digitalRead:
(1)   36/     4E8 : F8 00               	ldi 0		;default is false
(1)   37/     4EA : AF                  	plo R15
(1)   38/     4EB : BF                  	phi R15
(1)   39/     4EC : 36 EF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     4EE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     4EF : (MACRO)             +	cretn
(1)   42/     4F1 :                     
     515/     4F1 :                     ;}
     516/     4F1 :                     L57:
     517/     4F1 : (MACRO)             	Cretn
     518/     4F3 :                     
     519/     4F3 :                     ;$$function end$$ _olduinoincluder
     520/     4F3 :                     ;$$function start$$ _boydinc
     521/     4F3 :                     _boydinc:		;framesize=2
     522/     4F3 :                     ;void boydinc(){
     523/     4F3 :                     ;	asm(" align 256\n");
     524/     4F3 :                     ;	asm(" include \"boydscan.inc\"\n");
     525/     4F3 :                      align 256
     526/     500 :                      include "boydscan.inc"
(1)    1/     500 :                     _boydscan:			;SCAN THE KEYBOARD
(1)    2/     500 : EE                  		sex	r14 	;set up "don't care" X register
(1)    3/     501 : 68 CF 00 00         		rldi	r15,0	; r15 is return value
(1)    4/     505 : 61                  .scan:		OUT	1                     ;109: 61 	
(1)    5/     506 : 34 4C               		B1	.KEY_12                     ;10A: 34 50 	
(1)    6/     508 : 35 5C               		B2	.KEY_8                      ;10C: 35 60 	
(1)    7/     50A : 36 6C               		B3	.KEY_4                      ;10E: 36 70 	
(1)    8/     50C : 37 7C               		B4	.KEY_0                      ;110: 37 80 	
(1)    9/     50E : 62                  		OUT	2                     ;112: 62 	
(1)   10/     50F : 34 50               		B1	.KEY_13                     ;113: 34 54 	
(1)   11/     511 : 35 60               		B2	.KEY_9                      ;115: 35 64 	
(1)   12/     513 : 36 70               		B3	.KEY_5                      ;117: 36 74 	
(1)   13/     515 : 37 80               		B4	.KEY_1                      ;119: 37 84 	
(1)   14/     517 : 63                  		OUT	3                     ;11B: 63 	
(1)   15/     518 : 34 54               		B1	.KEY_14                     ;11C: 34 58 	
(1)   16/     51A : 35 64               		B2	.KEY_10                     ;11E: 35 68 	
(1)   17/     51C : 36 74               		B3	.KEY_6                      ;120: 36 78 	
(1)   18/     51E : 37 84               		B4	.KEY_2                      ;122: 37 88 	
(1)   19/     520 : 64                  		OUT	4                     ;124: 64 	
(1)   20/     521 : 34 58               		B1	.KEY_15                     ;125: 34 5C 	
(1)   21/     523 : 35 68               		B2	.KEY_11                     ;127: 35 6C 	
(1)   22/     525 : 36 78               		B3	.KEY_7                      ;129: 36 7C 	
(1)   23/     527 : 37 88               		B4	.KEY_3                      ;12B: 37 8C 	
(1)   24/     529 : 65                  		OUT	5                     ;12D: 65 	
(1)   25/     52A : 34 A8               		B1	.KEY_DIV_WHOLE              ;12E: 34 99 	
(1)   26/     52C : 35 94               		B2	.KEY_MUL                    ;130: 35 96 	
(1)   27/     52E : 36 90               		B3	.KEY_SUB                    ;132: 36 93 	
(1)   28/     530 : 37 8C               		B4	.KEY_ADD                    ;134: 37 90 	
(1)   29/     532 : 66                  		OUT	6                     ;136: 66 	
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(boydscan.inc) - page 11 - 1/31/2018 16:36:53


(1)   30/     533 : 34 9C               		B1	.KEY_REM                    ;137: 34 A5 	
(1)   31/     535 : 35 98               		B2	.KEY_MEM_STORE              ;139: 35 A2 	
(1)   32/     537 : 36 A8               		B3	.KEY_MEM_RECALL             ;13B: 36 9F 	
(1)   33/     539 : 37 A8               		B4	.KEY_EQU                    ;13D: 37 9C 	
(1)   34/     53B : 7B                  		SEQ                                ;13F: 7B 	
(1)   35/     53C : 34 A7               		B1	.KEY_DIV_FIS                ;140: 34 B1 	
(1)   36/     53E : 35 A0               		B2	.KEY_CLEAR                  ;142: 35 AE 	
(1)   37/     540 : 36 A6               		B3	.KEY_CLR_ENTRY              ;144: 36 AB 	
(1)   38/     542 : 37 A5               		B4	.KEY_INV_SIGN               ;146: 37 A8 	
(1)   39/     544 : 7A                  		REQ                                ;148: 7A 	
(1)   40/     545 :                     ;here we have no keys pressed, if r15.0 has a value, return it -1
(1)   41/     545 : 8F                  		glo	r15
(1)   42/     546 : 32 05               		bz	.scan
(1)   43/     548 : 2F                  		dec	r15
(1)   44/     549 : E2                  		sex	r2	;restore the X register before returning
(1)   45/     54A : (MACRO)             		cretn
(1)   46/     54C :                     
(1)   47/     54C : F8 0D               .KEY_12		LDI	13                         ;150: F8  C 	
(1)   48/     54E : 30 A8               		BR	.KEY_SAVE                   ;152: 30 B4 	
(1)   49/     550 : F8 0E               .KEY_13		LDI	14                         ;154: F8  D 	
(1)   50/     552 : 30 A8               		BR	.KEY_SAVE                   ;156: 30 B4 	
(1)   51/     554 : F8 0F               .KEY_14		LDI	15                         ;158: F8  E 	
(1)   52/     556 : 30 A8               		BR	.KEY_SAVE                   ;15A: 30 B4 	
(1)   53/     558 : F8 10               .KEY_15		LDI	16                         ;15C: F8  F 	
(1)   54/     55A : 30 A8               		BR	.KEY_SAVE                   ;15E: 30 B4 	
(1)   55/     55C : F8 09               .KEY_8		LDI	 9                         ;160: F8  8 	
(1)   56/     55E : 30 A8               		BR	.KEY_SAVE                   ;162: 30 B4 	
(1)   57/     560 : F8 0A               .KEY_9		LDI	 10                         ;164: F8  9 	
(1)   58/     562 : 30 A8               		BR	.KEY_SAVE                   ;166: 30 B4 	
(1)   59/     564 : F8 0B               .KEY_10		LDI	11                         ;168: F8  A 	
(1)   60/     566 : 30 A8               		BR	.KEY_SAVE                   ;16A: 30 B4 	
(1)   61/     568 : F8 0C               .KEY_11		LDI	12                         ;16C: F8  B 	
(1)   62/     56A : 30 A8               		BR	.KEY_SAVE                   ;16E: 30 B4 	
(1)   63/     56C : F8 05               .KEY_4		LDI	 5                         ;170: F8  4 	
(1)   64/     56E : 30 A8               		BR	.KEY_SAVE                   ;172: 30 B4 	
(1)   65/     570 : F8 06               .KEY_5		LDI	 6                         ;174: F8  5 	
(1)   66/     572 : 30 A8               		BR	.KEY_SAVE                   ;176: 30 B4 	
(1)   67/     574 : F8 07               .KEY_6		LDI	 7                         ;178: F8  6 	
(1)   68/     576 : 30 A8               		BR	.KEY_SAVE                   ;17A: 30 B4 	
(1)   69/     578 : F8 08               .KEY_7		LDI	 8                         ;17C: F8  7 	
(1)   70/     57A : 30 A8               		BR	.KEY_SAVE                   ;17E: 30 B4 	
(1)   71/     57C : F8 01               .KEY_0		LDI	 1                         ;180: F8  0 	
(1)   72/     57E : 30 A8               		BR	.KEY_SAVE                   ;182: 30 B4 	
(1)   73/     580 : F8 02               .KEY_1		LDI	 2                         ;184: F8  1 	
(1)   74/     582 : 30 A8               		BR	.KEY_SAVE                   ;186: 30 B4 	
(1)   75/     584 : F8 03               .KEY_2		LDI	 3                         ;188: F8  2 	
(1)   76/     586 : 30 A8               		BR	.KEY_SAVE                   ;18A: 30 B4 	
(1)   77/     588 : F8 04               .KEY_3		LDI	 4                         ;18C: F8  3 	
(1)   78/     58A : 30 A8               		BR	.KEY_SAVE                   ;18E: 30 B4 	
(1)   79/     58C :                     		
(1)   80/     58C : F8 11               .KEY_ADD	ldi	16+1
(1)   81/     58E : 30 A8               		br	.key_save
(1)   82/     590 : F8 12               .KEY_SUB:	ldi	17+1
(1)   83/     592 : 30 A8               		br	.key_save
(1)   84/     594 : F8 15               .KEY_MUL:	ldi	20+1
(1)   85/     596 : 30 A8               		br	.key_save
(1)   86/     598 : F8 14               .KEY_MEM_STORE:	ldi	19+1
(1)   87/     59A : 30 A8               		br	.key_save
(1)   88/     59C :                     
(1)   89/     59C : F8 13               .KEY_REM:	ldi	18+1
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(boydscan.inc) - page 12 - 1/31/2018 16:36:53


(1)   90/     59E : 30 A8               		br	.key_save
(1)   91/     5A0 : 7A                  .KEY_CLEAR:	req
(1)   92/     5A1 : F8 15               		ldi	20+1
(1)   93/     5A3 : 30 A8               		br	.key_save
(1)   94/     5A5 : 7A                  .KEY_INV_SIGN:	req
(1)   95/     5A6 : 7A                  .KEY_CLR_ENTRY:	req
(1)   96/     5A7 : 7A                  .KEY_DIV_FIS:	req
(1)   97/     5A8 :                     .KEY_EQU:
(1)   98/     5A8 :                     .KEY_DIV_WHOLE:
(1)   99/     5A8 :                     .KEY_MEM_RECALL:
(1)  100/     5A8 : AF                  .KEY_SAVE:	plo 15
(1)  101/     5A9 : 30 05               		br .scan
     527/     5AB :                     ;}
     528/     5AB :                     L59:
     529/     5AB : (MACRO)             	Cretn
     530/     5AD :                     
     531/     5AD :                     ;$$function end$$ _boydinc
     532/     5AD :                     L48:
     533/     5AD : 5F                  	db 95
     534/     5AE : 00                  	db 0
     535/     5AF :                     L44:
     536/     5AF : 42                  	db 66
     537/     5B0 : 4F                  	db 79
     538/     5B1 : 59                  	db 89
     539/     5B2 : 44                  	db 68
     540/     5B3 : 50                  	db 80
     541/     5B4 : 52                  	db 82
     542/     5B5 : 4F                  	db 79
     543/     5B6 : 47                  	db 71
     544/     5B7 : 00                  	db 0
     545/     5B8 :                     	include lcc1802epiloNW.inc
(1)    1/     5B8 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     5B8 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     5B8 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     5B8 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     5B8 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     5B8 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     5B8 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     5B8 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     5B8 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     5B8 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     5B8 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     5B8 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     5B8 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     5B8 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     5B8 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     5B8 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     5B8 :                     ;16-09-20 allow stack relocation 
(1)   18/     5B8 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/     5B8 :                     ;17-03-07 adjusting stack offset for 1805/6 stack discipline
(1)   20/     5B8 :                     ;17-03-13 protecting work areas in divi2,divi4 routines from 1806 SCAL
(1)   21/     5B8 :                     ;17-03-15 onems compensates for reduced subroutine overhead in 1806
(1)   22/     5B8 :                     ;17-04-09 don't include call/return for 1806
(1)   23/     5B8 :                     ;17-10-17 SCRT routines changed to clean stack model i.e. push is stxd stxd, pop is inc lda inc ldn
(1)   24/     5B8 :                     ;17-10-19 using CPUSPEED instead of LCC1802CPUSPEED, also STACKLOC instead of LCCSTACKLOC
(1)   25/     5B8 :                     ;17-10-23 extending work area protection from 10-13 above for 1802 as well as 1805
(1)   26/     5B8 :                     ;17-11-25 conditional include for register saves
(1)   27/     5B8 :                     ;18-01-28 changed onems() to always use 4 instruction loop, accommodate slower CPU speed
(1)   28/     5B8 : =EH                 rwork	equ	memAddr	;work register
(1)   29/     5B8 :                     lcc1802init:
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 13 - 1/31/2018 16:36:53


(1)   30/     5B8 : =>UNDEFINED           IFDEF SAVEREGS
(1)   31/     5B8 :                         include "saveregs.inc"
(1)   32/     5B8 : [30]                  ENDIF
(1)   33/     5B8 : =>FALSE               IF    MOMCPU<>$1805		;for 1806 use SCAL 
(1)   34/     5B8 :                     	ldiReg	RCALL,_call
(1)   35/     5B8 :                     	ldiReg	RRET,_return
(1)   36/     5B8 : =>TRUE                ELSE
(1)   37/     5B8 : (MACRO)             	ldiReg	RCALL,$$_die; _call
(1)   38/     5BC : (MACRO)             	ldiReg	RRET,$$_die; _return
(1)   39/     5C0 : [33]                  ENDIF
(1)   40/     5C0 : =>DEFINED             IFNDEF  STACKLOC		;wjr 16-09-20 allow stack relocation
(1)   41/     5C0 :                     	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   42/     5C0 : =>TRUE                ELSEIF				;wjr 16-09-20
(1)   43/     5C0 : (MACRO)             	ldiReg	SP,STACKLOC	;wjr 16-09-20 start stack as specified
(1)   44/     5C4 : [40]                  ENDIF				;wjr 16-09-20
(1)   45/     5C4 : E2                  	sex	SP
(1)   46/     5C5 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   47/     5C9 : D3                  	sep	RPC
(1)   48/     5CA :                     $$_00000:
(1)   49/     5CA : (MACRO)             	Ccall _main	;call the main routine
(1)   50/     5CE : C0 05 CE            $$_die:	lbr	$$_die		;loop here when main returns
(1)   51/     5D1 : DE AD               	db	0xde,0xad
(1)   52/     5D3 :                     
(1)   53/     5D3 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   54/     5D3 :                     _setqOn:
(1)   55/     5D3 : 7B                  	seq
(1)   56/     5D4 : (MACRO)             	Cretn
(1)   57/     5D6 :                     _setqOff:
(1)   58/     5D6 : 7A                  	req
(1)   59/     5D7 : (MACRO)             	Cretn
(1)   60/     5D9 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)   61/     5D9 :                     _modU2:	;16 bit unsigned remainder
(1)   62/     5D9 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   63/     5D9 : (MACRO)                 Ccall _divU2
(1)   64/     5DD : 8C                      glo regArg1
(1)   65/     5DE : AF                      plo retVal
(1)   66/     5DF : 9C                      ghi regArg1
(1)   67/     5E0 : BF                      phi retVal
(1)   68/     5E1 : (MACRO)                 Cretn
(1)   69/     5E3 :                         
(1)   70/     5E3 :                     _modI2:	;16 bit signed remainder
(1)   71/     5E3 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   72/     5E3 : (MACRO)                 Ccall _divI2
(1)   73/     5E7 : 8C                      glo regArg1
(1)   74/     5E8 : AF                      plo retVal
(1)   75/     5E9 : 9C                      ghi regArg1
(1)   76/     5EA : BF                      phi retVal
(1)   77/     5EB : (MACRO)                 Cretn
(1)   78/     5ED : [60]                 ENDIF
(1)   79/     5ED :                     _out4:	
(1)   80/     5ED : 8C                  	glo	regArg1
(1)   81/     5EE : 22                  	dec	sp
(1)   82/     5EF : 52                  	str	sp
(1)   83/     5F0 : 64                  	out	4
(1)   84/     5F1 : (MACRO)             	Cretn
(1)   85/     5F3 :                     
(1)   86/     5F3 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   87/     5F3 : =>FALSE               if MOMCPU<>$1805		;for 1806 use SCAL
(1)   88/     5F3 :                     	align 16
(1)   89/     5F3 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 14 - 1/31/2018 16:36:53


(1)   90/     5F3 :                     	sep     R3 ;go to subroutine
(1)   91/     5F3 :                     _call	sex	SP ;make sure X=SP
(1)   92/     5F3 :                     	glo	retAddr ;save previous return pointer on stack
(1)   93/     5F3 :                     	stxd
(1)   94/     5F3 :                     	ghi	retAddr
(1)   95/     5F3 :                     	stxd	
(1)   96/     5F3 :                     	glo	RPC ;copy old PC to retAddr
(1)   97/     5F3 :                     	plo	retAddr
(1)   98/     5F3 :                     	ghi	RPC
(1)   99/     5F3 :                     	phi	retAddr
(1)  100/     5F3 :                     	lda	retAddr ;pick up subroutine address into RPC
(1)  101/     5F3 :                     	phi	RPC
(1)  102/     5F3 :                     	lda	retAddr
(1)  103/     5F3 :                     	plo	RPC
(1)  104/     5F3 :                     	br	_call-1
(1)  105/     5F3 :                     
(1)  106/     5F3 :                     ;Standard subroutine return 
(1)  107/     5F3 :                     	align 16
(1)  108/     5F3 :                     	sep	RPC	;return to the original program
(1)  109/     5F3 :                     _return	glo	retAddr	;transfer the current return address to RPC
(1)  110/     5F3 :                     	plo	RPC
(1)  111/     5F3 :                     	ghi	retAddr
(1)  112/     5F3 :                     	phi	RPC
(1)  113/     5F3 :                     	inc 	SP
(1)  114/     5F3 :                     	lda	SP	;pick up old return address
(1)  115/     5F3 :                     	phi	retAddr
(1)  116/     5F3 :                     	ldn	SP
(1)  117/     5F3 :                     	plo	retAddr
(1)  118/     5F3 :                     	br	_return-1
(1)  119/     5F3 : [87]                 ENDIF
(1)  120/     5F3 :                     	align 8
(1)  121/     5F8 :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  122/     5F8 :                     ;subroutine overhead soaks up 27 instruction time.
(1)  123/     5F8 :                     ;each loop is 2 instruction times
(1)  124/     5F8 :                     ;so the number of loops needed is 
(1)  125/     5F8 :                     ;CPU speed/16000 less the 27 all divide by two
(1)  126/     5F8 : =>DEFINED           	IFNDEF	CPUSPEED
(1)  127/     5F8 :                     CPUSPEED EQU 1600000	;1.6MHZ default
(1)  128/     5F8 : [126]               	ENDIF
(1)  129/     5F8 : =>TRUE               if MOMCPU=$1805		;for 1806 SCAL
(1)  130/     5F8 : =EH                 SUBOVHD  EQU 14		;1806 SCAL/SRET subroutine overhead
(1)  131/     5F8 : =>FALSE              else
(1)  132/     5F8 :                     SUBOVHD  EQU 27		;default SCRT subroutine overhead
(1)  133/     5F8 : [129]                endif 
(1)  134/     5F8 : =>FALSE                   IF (CPUSPEED/16000)>=(SUBOVHD+4);fast enough to need more than subroutine overhead
(1)  135/     5F8 :                     	ldi	(CPUSPEED/1000/16-SUBOVHD)/4
(1)  136/     5F8 :                     $$mslf:	smi	1
(1)  137/     5F8 :                     	sex	2
(1)  138/     5F8 :                     	sex	2
(1)  139/     5F8 :                     	bnz	$$mslf
(1)  140/     5F8 : [134]                 ENDIF
(1)  141/     5F8 : (MACRO)             	Cretn
(1)  142/     5FA :                     
(1)  143/     5FA :                     
(1)  144/     5FA : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math	
(1)  145/     5FA :                     	align 256
(1)  146/     600 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  147/     600 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  148/     600 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  149/     600 : (MACRO)             	ld2z retval
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 15 - 1/31/2018 16:36:53


(1)  150/     604 :                     $$mulrlp:
(1)  151/     604 : (MACRO)             	shru2 regarg2
(1)  152/     60A : 3B 16               	bnf $$mulrnoadd
(1)  153/     60C :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  154/     60C : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  155/     616 :                     $$mulrnoadd:
(1)  156/     616 : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  157/     617 : 3A 1C               	bnz $$mulrshft	;nope, continue
(1)  158/     619 : 8D                  	glo regarg2	;check bottom byte
(1)  159/     61A : 32 24               	bz $$mulrdone
(1)  160/     61C :                     $$mulrshft:
(1)  161/     61C : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  162/     622 : 30 04               	br $$mulrlp
(1)  163/     624 :                     $$mulrdone:		;here the product is in retval
(1)  164/     624 : (MACRO)             	cretn
(1)  165/     626 :                     
(1)  166/     626 :                     ;this is a divisor shifting algorithm which is faster for smaller operands
(1)  167/     626 :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  168/     626 :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  169/     626 :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  170/     626 :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  171/     626 :                     	;regarg1 to hold develop remainder, 
(1)  172/     626 :                     	;R10 to hold working dividend R11.0 as a temp
(1)  173/     626 :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  174/     626 :                     				;result in D, rwork.hi, DF
(1)  175/     626 :                     	glo reg2
(1)  176/     626 :                     	str sp
(1)  177/     626 :                     	glo reg1
(1)  178/     626 :                     	sm
(1)  179/     626 :                     	plo R11
(1)  180/     626 :                     	ghi reg2
(1)  181/     626 :                     	str sp
(1)  182/     626 :                     	ghi reg1
(1)  183/     626 :                     	smb
(1)  184/     626 :                     	endm
(1)  185/     626 :                     	
(1)  186/     626 :                     ;	pushf R10	;save R10 & leave stack down 1
(1)  187/     626 : (MACRO)             	pushr R10	;default push leaves stack clean
(1)  188/     628 : 8B                  	glo R11		;and bottom
(1)  189/     629 : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  190/     62A : (MACRO)             	cpy2 R10,regarg1
(1)  191/     62E : (MACRO)             	ld2z retval	;quotient
(1)  192/     632 : (MACRO)             	cpy2 rwork,regarg2
(1)  193/     636 :                     	
(1)  194/     636 : (MACRO)             	testsub R10,regarg2
(1)  195/     63F : 3B 5A               	bnf $$computequot	;DF=0 means it didn't fit
(1)  196/     641 : BA                  	phi R10	;R10=R10-regarg2
(1)  197/     642 : 8B                  	glo R11
(1)  198/     643 : AA                  	plo R10
(1)  199/     644 :                     	
(1)  200/     644 :                     $$again:	;this is the divisor doubling phase
(1)  201/     644 : (MACRO)              	testsub R10,regarg2
(1)  202/     64D : 3B 5A                	bnf $$computequot	;df=0 means it didn't fit
(1)  203/     64F : BA                  	phi R10	;R10=R10-regarg2
(1)  204/     650 : 8B                  	glo R11
(1)  205/     651 : AA                  	plo R10 	
(1)  206/     652 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  207/     658 : 30 44                	br $$again
(1)  208/     65A :                      	
(1)  209/     65A :                      $$computequot:	;here we're computing the quotient
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 16 - 1/31/2018 16:36:53


(1)  210/     65A : (MACRO)              	testsub regarg1,regarg2
(1)  211/     663 : 3B 69                	bnf $$testexit
(1)  212/     665 : BC                   	phi regarg1		;complete the subtraction
(1)  213/     666 : 8B                   	glo R11
(1)  214/     667 : AC                   	plo regarg1
(1)  215/     668 : 1F                   	inc retval
(1)  216/     669 :                      $$testexit:
(1)  217/     669 : 9E                   	ghi rwork
(1)  218/     66A : F7                   	sm	;top of regarg2 is still on stack
(1)  219/     66B : 3A 73                	bnz $$ney0y
(1)  220/     66D : 8D                   	glo regarg2
(1)  221/     66E : 52                   	str sp
(1)  222/     66F : 8E                   	glo rwork
(1)  223/     670 : F7                   	sm	;test low order bytes
(1)  224/     671 : 32 81                	bz	$$out	;if = we're done
(1)  225/     673 :                      $$ney0y:
(1)  226/     673 : (MACRO)              	shl2 retval	;double quotient
(1)  227/     679 : (MACRO)              	shrU2 regarg2	;halve divisor
(1)  228/     67F : 30 5A                	br $$computequot	;continue
(1)  229/     681 :                      $$out:
(1)  230/     681 :                      ;here the quotient is in retval, remainder in regarg1
(1)  231/     681 : 12                    	inc sp	;release work area
(1)  232/     682 : 02                  	ldn sp	;recover
(1)  233/     683 : AB                  	plo R11	;bottom byte of R11
(1)  234/     684 : (MACRO)             	popr R10 ;and all of R10
(1)  235/     689 : (MACRO)             	cretn	;and we're done
(1)  236/     68B :                     
(1)  237/     68B :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  238/     68B :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  239/     68B :                     _divI2:
(1)  240/     68B : 22                      dec	sp	;leave a work area available
(1)  241/     68C : 9C                      ghi regArg1
(1)  242/     68D : 52                      str sp	;save the sign of the 1st arg
(1)  243/     68E : FE                      shl
(1)  244/     68F : 3B 9A                   bnf $$pos1	;if the 1st arg is -v
(1)  245/     691 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  246/     69A :                     $$pos1: ;1st is now +v, check 2nd
(1)  247/     69A : 9D                      ghi regArg2
(1)  248/     69B : F3                      xor	
(1)  249/     69C : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  250/     69D : 9D                      ghi regArg2
(1)  251/     69E : FE                      shl
(1)  252/     69F : 3B AA                   bnf $$pos2	;if the 2nd arg is -v
(1)  253/     6A1 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  254/     6AA :                     $$pos2: ; both args now +v
(1)  255/     6AA : 22                      dec sp	;protect workarea on the 1802
(1)  256/     6AB : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  257/     6AF : 12                      inc sp	;recover work area
(1)  258/     6B0 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  259/     6B0 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  260/     6B1 : FE                      shl
(1)  261/     6B2 : 3B BD                   bnf $$done ;if the signs were different
(1)  262/     6B4 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  263/     6BD :                     $$done:
(1)  264/     6BD : (MACRO)                 Cretn ;and we're done - I hope!
(1)  265/     6BF : [144]                ENDIF
(1)  266/     6BF : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math
(1)  267/     6BF :                     	align 256    ;32 bit operations follow
(1)  268/     700 :                     _divu4:
(1)  269/     700 :                     ;This is an unsigned 32 bit restoring division
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 17 - 1/31/2018 16:36:53


(1)  270/     700 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  271/     700 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  272/     700 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  273/     700 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  274/     700 :                     
(1)  275/     700 : F8 20               	ldi 32		;set loop count
(1)  276/     702 : AE                  	plo memaddr	;in temp register
(1)  277/     703 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  278/     70F :                     $$loop:
(1)  279/     70F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  280/     71B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  281/     727 :                     
(1)  282/     727 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  283/     73D :                     
(1)  284/     73D : FA 80               	ani 0x80	;check the top bit
(1)  285/     73F : 32 5D               	bz $$norestore	;if it's 0
(1)  286/     741 : 89                  		glo RL8
(1)  287/     742 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  288/     744 : A9                  		plo RL8
(1)  289/     745 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  290/     75B : 30 61               	br $$endlp 	;else
(1)  291/     75D :                     $$norestore:
(1)  292/     75D : 89                  		glo RL8
(1)  293/     75E : F9 01               		ori 1	;turn on the bottom bit
(1)  294/     760 : A9                  		plo RL8
(1)  295/     761 :                     	;end if
(1)  296/     761 :                     $$endlp:
(1)  297/     761 : 2E                  	dec memaddr	;check the cycle count
(1)  298/     762 : 8E                  	glo memaddr
(1)  299/     763 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  300/     765 :                     	
(1)  301/     765 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  302/     767 :                     		
(1)  303/     767 :                     
(1)  304/     767 :                     _mulu4:
(1)  305/     767 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  306/     767 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  307/     767 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  308/     767 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  309/     767 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  310/     767 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  311/     767 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  312/     767 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  313/     767 :                     	;for 10 we subtract and shift
(1)  314/     767 :                     	;for 00 and 11 we just shift
(1)  315/     767 :                     
(1)  316/     767 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  317/     773 : F8 20                   ldi 32
(1)  318/     775 : AE                      plo memaddr		;cycle count
(1)  319/     776 : FC 00                   adi 0		;clear df
(1)  320/     778 :                     $$mloop:
(1)  321/     778 : 89                      glo RL8
(1)  322/     779 : FA 01                   ani 1		;isolate bottom bit of result
(1)  323/     77B : 3B 97                   bnf	$$check_sub	;
(1)  324/     77D : 3A AF                   bnz	$$shift		;that would be the 11 case
(1)  325/     77F :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  326/     77F : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  327/     795 : 30 AF                   br $$shift
(1)  328/     797 :                     $$check_sub:
(1)  329/     797 : 32 AF                   bz $$shift	;that would be the 00 case
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 18 - 1/31/2018 16:36:53


(1)  330/     799 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  331/     799 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  332/     7AF :                     $$shift:
(1)  333/     7AF : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  334/     7BD : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  335/     7C9 :                     
(1)  336/     7C9 : 2E                      dec memaddr		;cycle count
(1)  337/     7CA : 8E                      glo memaddr
(1)  338/     7CB : 3A 78                   bnz $$mloop		;repeat cycle once for each bit position
(1)  339/     7CD :                         
(1)  340/     7CD : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  341/     7CF :                     
(1)  342/     7CF :                     	align 256
(1)  343/     800 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  344/     800 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  345/     800 :                     _divI4:
(1)  346/     800 : 22                      dec	sp	;leave a work area available
(1)  347/     801 : 98                      ghi RL8-1	;get the top of the dividend
(1)  348/     802 : 52                      str sp	;save the sign of the 1st arg
(1)  349/     803 : FE                      shl
(1)  350/     804 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  351/     806 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  352/     826 :                     $$pos1: ;1st is now +v, check 2nd
(1)  353/     826 : 9A                      ghi RL10-1
(1)  354/     827 : F3                      xor	
(1)  355/     828 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  356/     829 : 9A                      ghi RL10-1
(1)  357/     82A : FE                      shl
(1)  358/     82B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  359/     82D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  360/     84D :                     $$pos2: ; both args now +v
(1)  361/     84D : 22                      dec sp	;protect workarea on the 1802
(1)  362/     84E : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  363/     852 : 12                      inc sp	;recover work area
(1)  364/     853 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  365/     853 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  366/     854 : FE                      shl
(1)  367/     855 : 3B 77                   bnf $$done ;if the signs were different
(1)  368/     857 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  369/     877 :                     $$done:
(1)  370/     877 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  371/     879 : [266]                ENDIF
(1)  372/     879 : =>UNDEFINED          IFNDEF  LCCNOMATH		;wjr 17-04-09 disable 16 bit math
(1)  373/     879 :                     _dubdabx:	
(1)  374/     879 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/     879 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/     879 :                     ;long interger is passed in rp1p2
(1)  377/     879 :                     ;buffer pointer is passed at sp+2+4**+1 for 1806
(1)  378/     879 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/     879 :                     ;r8-11 are used as temps
(1)  380/     879 :                     ;r8 is the working pointer
(1)  381/     879 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/     879 :                     ;r9.0 is digit count
(1)  383/     879 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/     879 : (MACRO)             	ld2 r8,'O',sp,(2+4+1); pick up the buffer pointer
(1)  385/     885 : (MACRO)             	ld2 r10,'O',sp,(2+4+2+1); pick up the number of digits wanted
(1)  386/     891 : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/     895 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/     897 : A9                  	plo r9
(1)  389/     898 :                     $$clrlp:	;clear the passed buffer
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 19 - 1/31/2018 16:36:53


(1)  390/     898 : F8 00               	ldi 0	
(1)  391/     89A : 58                  	str r8	;clear a byte
(1)  392/     89B : 18                  	inc r8
(1)  393/     89C : 29                  	dec r9
(1)  394/     89D : 89                  	glo r9	;check the count
(1)  395/     89E : 3A 98               	bnz $$clrlp ;back for more
(1)  396/     8A0 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/     8A4 :                     
(1)  398/     8A4 : F8 20               	ldi 32	;bit count
(1)  399/     8A6 : AF                  	plo r15
(1)  400/     8A7 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/     8A7 :                     $$cktop:
(1)  402/     8A7 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/     8A8 : FE                  	shl		;check for a 1
(1)  404/     8A9 : 33 BC               	bdf $$bitloop	;move on if we have one
(1)  405/     8AB : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/     8B7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/     8B8 : 8F                  	glo r15
(1)  408/     8B9 : 3A A7               	bnz $$cktop	;
(1)  409/     8BB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/     8BC :                     $$bitloop:
(1)  411/     8BC : F8 0A               	ldi 10	;digit count
(1)  412/     8BE : A9                  	plo r9
(1)  413/     8BF :                     $$dcklp:
(1)  414/     8BF : 08                  	ldn r8 	;pick up a digit
(1)  415/     8C0 : FF 05               	smi 5	;see if it's greater than 4
(1)  416/     8C2 : 3B C7               	bnf $$dnoadd ;if not, bypass add
(1)  417/     8C4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/     8C6 : 58                  	str r8	;put it back
(1)  419/     8C7 :                     $$dnoadd:
(1)  420/     8C7 : 18                  	inc r8
(1)  421/     8C8 : 29                  	dec r9	;decrement digit count
(1)  422/     8C9 : 89                  	glo r9
(1)  423/     8CA : 3A BF               	bnz $$dcklp ;and back for next digit
(1)  424/     8CC :                     	
(1)  425/     8CC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/     8D8 :                     	
(1)  427/     8D8 : F8 0A               	ldi 10	;load the digit count again
(1)  428/     8DA : A9                  	plo r9
(1)  429/     8DB :                     ;r8 is now just past the units location and ready to walk back
(1)  430/     8DB :                     $$dshlp:
(1)  431/     8DB : 28                  	dec r8	;walk back from 0's position
(1)  432/     8DC : 08                  	ldn r8	;get the digit back
(1)  433/     8DD : 7E                  	shlc	;continue the shift
(1)  434/     8DE : BF                  	phi r15 ;save it for the carry test
(1)  435/     8DF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/     8E1 : 58                  	str r8	;put the digit back
(1)  437/     8E2 : 9F                  	ghi r15	;now test for carry
(1)  438/     8E3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/     8E5 : 29                  	dec r9	;decrement the digit count
(1)  440/     8E6 : 89                  	glo r9
(1)  441/     8E7 : 3A DB               	bnz $$dshlp ;back for more if needed
(1)  442/     8E9 :                     	
(1)  443/     8E9 : 2F                  	dec r15
(1)  444/     8EA : 8F                  	glo r15
(1)  445/     8EB : 3A BC               	bnz $$bitloop
(1)  446/     8ED :                     	
(1)  447/     8ED : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/     8F1 : F8 0A               	ldi 10		;digit count again
(1)  449/     8F3 : A9                  	plo r9
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(lcc1802epiloNW.inc) - page 20 - 1/31/2018 16:36:53


(1)  450/     8F4 :                     $$upnxt:
(1)  451/     8F4 : 08                  	ldn r8		;get digit
(1)  452/     8F5 : F9 30               	ori 0x30	;make ascii
(1)  453/     8F7 : 58                  	str r8		;put it back
(1)  454/     8F8 : 18                  	inc r8		;next digit
(1)  455/     8F9 : 29                  	dec r9		;counter
(1)  456/     8FA : 89                  	glo r9
(1)  457/     8FB : 3A F4               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/     8FD : (MACRO)             	ldaX memaddr,sp,(2+4+2+1+1)	;point to lsb of desired digit count
(1)  459/     905 : EE                  	sex memaddr	;set up
(1)  460/     906 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  461/     908 : F7                  	sm		;desired number of digits to skip
(1)  462/     909 : E2                  	sex sp		;reset index register
(1)  463/     90A : A9                  	plo r9		;number of leading 0's to skip
(1)  464/     90B :                     $$cknext:
(1)  465/     90B : 0F                  	ldn r15		;check digit
(1)  466/     90C : FF 30               	smi 0x30	;for '0'
(1)  467/     90E : 3A 15               	bnz $$done
(1)  468/     910 : 1F                  	inc r15		;next digit
(1)  469/     911 : 29                  	dec r9		;reduce count
(1)  470/     912 : 89                  	glo r9
(1)  471/     913 : 3A 0B               	bnz $$cknext
(1)  472/     915 :                     $$done:
(1)  473/     915 : (MACRO)             	cretn
(1)  474/     917 : [372]                ENDIF	
(1)  475/     917 : =>UNDEFINED          IFNDEF  LCCNOLONG		;wjr 17-04-09 disable 32 bit math	
(1)  476/     917 :                     _modU4:	;32 bit unsigned remainder
(1)  477/     917 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  478/     917 : (MACRO)                 Ccall _divU4
(1)  479/     91B : (MACRO)                 cpy4 RL8,Rp1p2
(1)  480/     923 : (MACRO)                 Cretn
(1)  481/     925 :                         
(1)  482/     925 :                     _modI4:	;32 bit signed remainder
(1)  483/     925 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  484/     925 : (MACRO)                 Ccall _divI4
(1)  485/     929 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  486/     931 : (MACRO)                 Cretn
(1)  487/     933 : [475]                ENDIF	
(1)  488/     933 :                     
     546/     933 :                     	include IO1802.inc
(1)    1/     933 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     933 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     933 :                     ;17-10-16 adding _putcpace(port,byte) to limit output speed to the AVR
(1)    4/     933 :                     ;         defaulting putc(x) to putcpace(7,x)
(1)    5/     933 :                     ;17-11-22 removing putc altogether
(1)    6/     933 :                     
(1)    7/     933 :                     _inp:		;raw port input
(1)    8/     933 :                     		;stores a small tailored program on the stack and executes it
(1)    9/     933 : 22                  	dec	sp	;work backwards
(1)   10/     934 : F8 D3               	ldi	0xD3	;return instruction
(1)   11/     936 : 73                  	stxd		
(1)   12/     937 : 8C                  	glo	regarg1	;get the port number
(1)   13/     938 : FA 07               	ani	0x07	;clean it
(1)   14/     93A : 32 4A               	bz	+	; inp(0) isn't valid
(1)   15/     93C : F9 68               	ori	0x68	;make it an input instruction
(1)   16/     93E : 73                  	stxd		;store it for execution
(1)   17/     93F : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   18/     943 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   19/     944 : D8                  	sep	rt1	;execute it
(1)   20/     945 :                     ;we will come back to here with the input byte in D
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm(IO1802.inc) - page 21 - 1/31/2018 16:36:53


(1)   21/     945 : 12                  	inc	sp	;step over the work area
(1)   22/     946 : AF                  	plo	retVal	;save it to return
(1)   23/     947 : F8 00               	ldi	0
(1)   24/     949 : BF                  	phi	retval	;clear top byte
(1)   25/     94A : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   26/     94B : 12                  	inc	sp	;and the D3
(1)   27/     94C : (MACRO)             	Cretn		;and we're done
(1)   28/     94E :                     	
(1)   29/     94E :                     _out:		;raw port output
(1)   30/     94E :                     		;stores a small tailored program on the stack and executes it
(1)   31/     94E :                     		;this could be bolder:
(1)   32/     94E :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   33/     94E :                     		;then SEP sp
(1)   34/     94E :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   35/     94E :                     		;saves 6 instructions but it's a bit tricky.
(1)   36/     94E : 22                  	dec	sp	;work backwards
(1)   37/     94F : F8 D3               	ldi	0xD3	;return instruction
(1)   38/     951 : 73                  	stxd		
(1)   39/     952 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   40/     956 : 8C                  	glo	regarg1	;get the port number
(1)   41/     957 : FA 07               	ani	0x07	;clean it
(1)   42/     959 : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   43/     95B : 73                  	stxd		;store it for execution
(1)   44/     95C : 8D                  	glo	regarg2	;get the byte to be written
(1)   45/     95D : 52                  	str	sp	;store it where sp points
(1)   46/     95E : D8                  	sep	rt1	;execute it
(1)   47/     95F :                     ;we will come back to here with sp stepped up by one
(1)   48/     95F : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   49/     960 : 12                  	inc	sp	;and the D3
(1)   50/     961 : (MACRO)             	Cretn		;and we're done
(1)   51/     963 :                     	
(1)   52/     963 :                     	
(1)   53/     963 :                     
     547/     963 :                     
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 22 - 1/31/2018 16:36:53


  symbol table (* = unused):
  ------------------------

 AGAIN137 :                     644 C | *ARCHITECTURE :  i386-unknown-win32 - |
*BIGENDIAN :                      0 - |  BITLOOP142 :                   8BC C |
*BRANCHEXT :                      0 - |  BVTABLE88 :                    4DE C |
*CASESENSITIVE :                  0 - |  CHECK_SUB140 :                 797 C |
 CKNEXT142 :                    90B C |  CKTOP142 :                     8A7 C |
 CLRLP142 :                     898 C |  CODELOC :                        0 - |
 COMPUTEQUOT137 :               65A C | *CONSTPI :        3.141592653589793 - |
 CPUSPEED :                   30D40 - | *DATE :                   1/31/2018 - |
 DCKLP142 :                     8BF C |  DNOADD142 :                    8C7 C |
 DONE138 :                      6BD C |  DONE141 :                      877 C |
 DONE142 :                      915 C |  DSHLP142 :                     8DB C |
 ENDLP139 :                     761 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            92 C |  L10 :                          106 C |
 L11 :                          108 C | *L13 :                          273 C |
 L14 :                          1BA C |  L15 :                          1CA C |
 L16 :                          1D1 C |  L17 :                          250 C |
 L19 :                          1D8 C | *L20 :                          1D8 C |
 L22 :                          1E3 C |  L23 :                          240 C |
 L26 :                          20C C | *L27 :                          364 C |
 L29 :                          2DD C | *L3 :                            F2 C |
 L30 :                          2E1 C |  L32 :                          324 C |
 L34 :                          30F C | *L35 :                          31B C |
 L37 :                          31C C |  L38 :                          32B C |
*L39 :                          35B C |  L41 :                          35C C |
*L42 :                          456 C |  L43 :                          373 C |
 L44 :                          5AF C |  L45 :                          3D3 C |
 L46 :                          453 C |  L48 :                          5AD C |
 L49 :                          3EC C |  L5 :                            DD C |
 L50 :                          43D C | *L52 :                          495 C |
 L53 :                          47E C | *L54 :                          482 C |
 L56 :                          483 C | *L57 :                          4F1 C |
*L59 :                          5AB C | *L6 :                            E9 C |
 L8 :                            EA C | *L9 :                           112 C |
 LCC1802INIT :                  5B8 C | *LISTON :                         1 - |
 LOOP139 :                      70F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP140 :                     778 C |
 MOMCPU :                      1805 - | *MOMCPUNAME :                  1805 - |
 MULRDONE136 :                  624 C |  MULRLP136 :                    604 C |
 MULRNOADD136 :                 616 C |  MULRSHFT136 :                  61C C |
*NESTMAX :                      100 - |  NEY0Y137 :                     673 C |
 NORESTORE139 :                 75D C |  OUT137 :                       681 C |
 OUTIT88 :                      4DA C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS1138 :                      69A C |
 POS1141 :                      826 C |  POS2138 :                      6AA C |
 POS2141 :                      84D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - |  R14 :                            E - |
 R15 :                            F - |  R2 :                             2 - |
*R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 23 - 1/31/2018 16:36:53


 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - | *RETADDR :                        6 - |
 RETVAL :                         F - | *RL0 :                            1 - |
 RL10 :                           B - | *RL12 :                           D - |
*RL4 :                            5 - | *RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SETBITOFF88 :                  4D5 C |
 SHIFT140 :                     7AF C |  SP :                             2 - |
 STACKLOC :                    10FF - |  SUBOVHD :                        E - |
 TESTEXIT137 :                  669 C | *TIME :                    16:36:53 - |
*TRUE :                           1 - |  UPNXT142 :                     8F4 C |
 VERSION :                     142F - |  _00000128 :                    5CA C |
*_BOYDINC :                     4F3 C |  _BOYDSCAN :                    500 C |
 _BOYDSCAN.KEY_0 :              57C C |  _BOYDSCAN.KEY_1 :              580 C |
 _BOYDSCAN.KEY_10 :             564 C |  _BOYDSCAN.KEY_11 :             568 C |
 _BOYDSCAN.KEY_12 :             54C C |  _BOYDSCAN.KEY_13 :             550 C |
 _BOYDSCAN.KEY_14 :             554 C |  _BOYDSCAN.KEY_15 :             558 C |
 _BOYDSCAN.KEY_2 :              584 C |  _BOYDSCAN.KEY_3 :              588 C |
 _BOYDSCAN.KEY_4 :              56C C |  _BOYDSCAN.KEY_5 :              570 C |
 _BOYDSCAN.KEY_6 :              574 C |  _BOYDSCAN.KEY_7 :              578 C |
 _BOYDSCAN.KEY_8 :              55C C |  _BOYDSCAN.KEY_9 :              560 C |
 _BOYDSCAN.KEY_ADD :            58C C |  _BOYDSCAN.KEY_CLEAR :          5A0 C |
 _BOYDSCAN.KEY_CLR_ENTRY :      5A6 C |  _BOYDSCAN.KEY_DIV_FIS :        5A7 C |
 _BOYDSCAN.KEY_DIV_WHOLE :      5A8 C |  _BOYDSCAN.KEY_EQU :            5A8 C |
 _BOYDSCAN.KEY_INV_SIGN :       5A5 C |  _BOYDSCAN.KEY_MEM_RECALL :     5A8 C |
 _BOYDSCAN.KEY_MEM_STORE :      598 C |  _BOYDSCAN.KEY_MUL :            594 C |
 _BOYDSCAN.KEY_REM :            59C C |  _BOYDSCAN.KEY_SAVE :           5A8 C |
 _BOYDSCAN.KEY_SUB :            590 C |  _BOYDSCAN.SCAN :               505 C |
 _BOYDSEGMENTS :                  4 C |  _DELAY :                       46B C |
 _DIE128 :                      5CE C | *_DIGITALREAD :                 4E8 C |
*_DIGITALWRITE :                4C0 C |  _DISP1 :                        84 C |
 _DISPSTR :                     286 C |  _DISPVAL :                      94 C |
 _DIVI2 :                       68B C |  _DIVI4 :                       800 C |
 _DIVU2 :                       626 C |  _DIVU4 :                       700 C |
*_DUBDABX :                     879 C | *_INP :                         933 C |
 _ITOA :                        119 C |  _MAIN :                        37B C |
*_MODI2 :                       5E3 C | *_MODI4 :                       925 C |
*_MODU2 :                       5D9 C | *_MODU4 :                       917 C |
*_MULU2 :                       600 C | *_MULU4 :                       767 C |
*_OLDUINOINCLUDER :             4A2 C |  _ONEMS :                       5F8 C |
 _OUT :                         94E C | *_OUT4 :                        5ED C |
 _PIN4 :                          3 C | *_SETQOFF :                     5D6 C |
*_SETQON :                      5D3 C |  _STRLEN :                       FD C |
 __FORW0 :                      4EF C |  __FORW1 :                      94A C |
*__FORW2 :                      95F C |

    209 symbols
     65 unused symbols

 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 24 - 1/31/2018 16:36:53


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BLKCPY                               
CCALL                                 | CPY1                                 
CPY2                                  | CPY4                                 
CRETN                                 | DECM                                 
DEMOTE                                | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI1                                 | JEQI2                                
JEQI4                                 | JEQU1I                               
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPF                                 
POPL                                  | POPM                                 
POPR                                  | PUSHR                                
RELEASE                               | RELEASEL                             
RELEASES                              | RESERVE                              
RESERVEL                              | RESERVES                             
SEXT                                  | SEXT4                                
SHL2                                  | SHL2I                                
SHL2R                                 | SHL4                                 
SHL4I                                 | SHL4R                                
SHLC4                                 | SHLR2R                               
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST2I                                 
ST4                                   | STR1                                 
STR1I                                 | STR2                                 
STR2I                                 | TESTSUB                              
XUSHF                                 | XUSHL                                
XUSHM                                 | ZEXT                                 
ZEXT4                                 |

    107 macros

 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 25 - 1/31/2018 16:36:53


 AS V1.42 Beta [Bld 123] - source file boydmonseg.oasm - page 26 - 1/31/2018 16:36:53


  codepages:
  ----------

STANDARD (0 changed characters)


0.15 seconds assembly time

   2305 lines source file
   4463 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
