; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Sat Jun 22 16:15:54 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
_PIN4:
	db 0
_ledmode:
	dw 0
_cmdip:
	dw 0
	dw 0
	dw 0
	dw 182
_pagehits:
	dw 0
_SPI_Write:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(2+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+6); ASGNU1
;{
;  enablewiz();   			// Activate the CS pin
;  sendwizwrt(); //was shiftoutf(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
	req
	Ccall _sendwizwrt
;  shiftoutf(addr >>8); 		// Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
	cpy2 R12,R11
	shrU2I R12,8
	Ccall _shiftoutf
;  shiftoutf(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _shiftoutf
;  shiftoutf(data);			// Send the data byte
	ld1 R11,'O',sp,(2+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R12,R11 ;LOADU2(reg)*
	Ccall _shiftoutf
;  disablewiz();				// make CS pin not active
	seq
;}
L1:
	release 4
	Cretn

_SPI_Read:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
;{
;  enablewiz();   		// Activate the CS pin
;  sendwizrd(); //shiftoutf(WIZNET_READ_OPCODE);   //Send Wiznet W5100 Write OpCode
	req
	Ccall _sendwizrd
;  shiftoutf(addr >>8);	// Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	cpy2 R12,R11
	shrU2I R12,8
	Ccall _shiftoutf
;  shiftoutf(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _shiftoutf
;  value=shiftinf();	// Send Dummy transmission to read the data
	Ccall _shiftinf;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	st1 R11,'O',sp,(-3+8); ASGNU1
;  disablewiz();			// make CS pin inactive
;  return(value);
	seq
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
L4:
	release 6
	Cretn

L8:
	db 222
	db 173
	db 190
	db 239
	db 254
	db 237
L9:
	db 192
	db 168
	db 1
	db 184
L10:
	db 255
	db 255
	db 255
	db 0
L11:
	db 192
	db 168
	db 1
	db 1
_W5100_Init:
	reserve 34
;void W5100_Init(void){// Ethernet Setup
;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
	ldA2 R11,'O',sp,(-8+36); reg:addr
	ldaD R8,L8; reg:acon
	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
;  unsigned char ip_addr[] = {192,168,1,184};
	ldA2 R11,'O',sp,(-12+36); reg:addr
	ldaD R8,L9; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char sub_mask[] = {255,255,255,0};
	ldA2 R11,'O',sp,(-16+36); reg:addr
	ldaD R8,L10; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char gtw_addr[] = {192,168,1,1};
	ldA2 R11,'O',sp,(-20+36); reg:addr
	ldaD R8,L11; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
	ldaD R12,1; reg:acon
	ld1 R13,'O',sp,(-20+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,2; reg:acon
	ld1 R13,'O',sp,(-19+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
	ldaD R12,3; reg:acon
	ld1 R13,'O',sp,(-18+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,4; reg:acon
	ld1 R13,'O',sp,(-17+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
	ldaD R12,9; reg:acon
	ld1 R13,'O',sp,(-8+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,10; reg:acon
	ld1 R13,'O',sp,(-7+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
	ldaD R12,11; reg:acon
	ld1 R13,'O',sp,(-6+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,12; reg:acon
	ld1 R13,'O',sp,(-5+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
	ldaD R12,13; reg:acon
	ld1 R13,'O',sp,(-4+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,14; reg:acon
	ld1 R13,'O',sp,(-3+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
	ldaD R12,5; reg:acon
	ld1 R13,'O',sp,(-16+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,6; reg:acon
	ld1 R13,'O',sp,(-15+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
	ldaD R12,7; reg:acon
	ld1 R13,'O',sp,(-14+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,8; reg:acon
	ld1 R13,'O',sp,(-13+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
	ldaD R12,15; reg:acon
	ld1 R13,'O',sp,(-12+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,16; reg:acon
	ld1 R13,'O',sp,(-11+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
	ldaD R12,17; reg:acon
	ld1 R13,'O',sp,(-10+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,18; reg:acon
	ld1 R13,'O',sp,(-9+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(RMSR,0x55);
	ldaD R12,26; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  SPI_Write(TMSR,0x55);
	ldaD R12,27; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
	ldaD R12,15; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
	ldaD R12,16; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
	ldaD R12,17; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
	ldaD R12,18; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	ldaD R12,L26; reg:acon
	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;}
L7:
	release 34
	Cretn

_socket0_init:
	reserve 4
;void socket0_init(){ //initialize socket 0 for http server
;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
	ldaD R12,1024; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
	ldaD R12,1028; reg:acon
	ld2z R13
	Ccall _SPI_Write
;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
	ldaD R12,1029; reg:acon
	ldaD R13,80; reg:acon
	Ccall _SPI_Write
;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
	ldaD R12,1025; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	delay(10);
	ldaD R12,10; reg:acon
	Ccall _delay
;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
	ldaD R12,1025; reg:acon
	ldaD R13,2; reg:acon
	Ccall _SPI_Write
;}
L27:
	release 4
	Cretn

_disconnect0:
	reserve 4
;void disconnect0(){
;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
	ldaD R12,1025; reg:acon
	ldaD R13,8; reg:acon
	Ccall _SPI_Write
L29:
;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
L30:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L29; NE 0
;}
L28:
	release 4
	Cretn

_close0:
	reserve 4
;void close0(){
;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
	ldaD R12,1025; reg:acon
	ldaD R13,16; reg:acon
	Ccall _SPI_Write
L33:
;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
L34:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L33; NE 0
;}
L32:
	release 4
	Cretn

_recv0:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r1,r13; function(2054) 1
;unsigned int recv0(unsigned char *buf,unsigned int buflen){
;    if (buflen <= 0) return 1;
	jnzU2 r1,L37; NE 0
	ldaD R15,1; reg:acon
	lbr L36
L37:
;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
	jnU2I r1,512,lbdf,L39 ;LEU2 512 1 L39; LE is flipped test & subtraction
;        buflen=MAX_BUF - 2;
	ldaD R1,510; reg:acon
L39:
;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
	ldaD R12,1064; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-6+16); ASGNU2(addr,LOADU2(reg))*
;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	ldaD R12,1065; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	ld2 R10,'O',sp,(-6+16); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
	lbr L42
L41:
;		while(buflen) {//receive individual bytes into the buffer
;		  buflen--;
	decm R1,1
;		  realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R11,'O',R11,(24576); reg:addr
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;		  *buf = SPI_Read(realaddr);
	ld2 R12,'O',sp,(-4+16); reg:INDIRU2(addr)
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	str1 R11,R7; ASGNU1(indaddr,reg)
;		  offaddr++;
	incm R0,1
;		  buf++;
	incm R7,1
;		}
L42:
;		while(buflen) {//receive individual bytes into the buffer
	jnzU2 r1,L41; NE 0
;    *buf='\0';        // terminate string
	ldaD R11,0; reg:acon
	str1 R11,R7; ASGNU1(indaddr,reg)
;    return 1;
	ldaD R15,1; reg:acon
L36:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_flush:
	reserve 2; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(10); flag1 
;void flush(rsize){ //flush the receive buffer
;    ptr = SPI_Read(S0_RX_RD);   // Read the Rx Read Pointer
	ldaD R12,1064; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-4+10); ASGNU2(addr,LOADU2(reg))*
;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	ldaD R12,1065; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	ld2 R10,'O',sp,(-4+10); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R7,R10,R11,add,adc; ADDU2(r,r)
;	offaddr+=rsize;				//how much to skip
	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
	alu2 R7,R7,R11,add,adc; ADDU2(r,r)
;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
	ldaD R12,1064; reg:acon
	cpy2 R11,R7
	shrU2I R11,8
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
	ldaD R12,1065; reg:acon
	alu2I R11,R7,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
	ldaD R12,1025; reg:acon
	ldaD R13,64; reg:acon
	Ccall _SPI_Write
;    delay(5);    				// Wait for Receive Process
	ldaD R12,5; reg:acon
	Ccall _delay
;}
L44:
	release 4; release room for outgoing arguments
	popr r7
	release 2; release room for local variables 
	Cretn

_recv_size:
	reserve 6
;unsigned int recv_size(void){
;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
	ldaD R12,1062; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
	ldaD R12,1063; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2I R10,R10,255,ani,ani
	;removed ?	cpy2 R10,R10
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
	cpy2 R15,R11 ;LOADU2(reg)*
L45:
	release 6
	Cretn

_send0:
	reserve 8; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r1,r13; function(2054) 1
;unsigned int send0(unsigned char *buf,unsigned int buflen){
;    if (buflen <= 0) return 0;
	jnzU2 r1,L47; NE 0
	ld2z R15
	lbr L46
L47:
;    txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;    timeout=0;
	ld2z R11
	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
	lbr L50
L49:
;    while (txsize < buflen) {
;      delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;     txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	cpy2 R0,R11 ;LOADU2(reg)*
;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
;     if (timeout++ > 1000) {
	ld2 R11,'O',sp,(-8+20); reg:INDIRU2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-8+20); ASGNU2(addr,reg)*
	jnU2I r11,1000,lbdf,L52 ;LEU2 1000 11 L52; LE is flipped test & subtraction
;       printf("TX Free Size Error!\n");
	ldaD R12,L54; reg:acon
	Ccall _printf
;       disconnect0();
	Ccall _disconnect0
;       return 0;
	ld2z R15
	lbr L46
L52:
;   }
L50:
;    while (txsize < buflen) {
	jcU2 r0,r1,lbnf,L49; LT=lbnf i.e. subtract B from A and jump if borrow 
;   ptr = SPI_Read(S0_TX_WR);
	ldaD R12,1060; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-10+20); ASGNU2(addr,LOADU2(reg))*
;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	ldaD R12,1061; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	ld2 R10,'O',sp,(-10+20); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDU2(r,r)
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
	lbr L56
L55:
;    while(buflen) {
;      buflen--;
	decm R1,1
;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
	alu2I R11,R11,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R11,'O',R11,(16384); reg:addr
	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
;      SPI_Write(realaddr,*buf);
	ld2 R12,'O',sp,(-6+20); reg:INDIRU2(addr)
	ld1 R13,'O',R7,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;      offaddr++;
	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
;      buf++;
	incm R7,1
;    }
L56:
;    while(buflen) {
	jnzU2 r1,L55; NE 0
;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1060; reg:acon
	ld2 RL10,'O',sp,(-4+20)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
	ldaD R12,1061; reg:acon
	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_SEND);
	ldaD R12,1025; reg:acon
	ldaD R13,32; reg:acon
	Ccall _SPI_Write
L58:
;    while(SPI_Read(S0_CR));
L59:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L58; NE 0
;    return 1;
	ldaD R15,1; reg:acon
L46:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 8; release room for local variables 
	Cretn

_sendnak:
	reserve 4
;void sendnak(){
;	send0s((unsigned char *)"HTTP/1.1 404 Not Found\r\n\r\n"); 	// Now Send the HTTP Response
	ldaD R12,L62; reg:acon
	Ccall _send0s
;}
L61:
	release 4
	Cretn

L64:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 13
	db 10
	db 0
_sendack:
	reserve 6
;void sendack(){
;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
	ldaD R12,L64; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ldaD R12,L64; reg:acon
	cpy2 R13,R11 ;LOADU2(reg)*
	Ccall _send0;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,LOADI2(reg)) wjrtest
;}
L63:
	release 6
	Cretn

_send0s:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;int send0s(char* what){
;	return send0((unsigned char *)what,strlen(what));
	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
	cpy2 R13,R11 ;LOADU2(reg)*
	Ccall _send0;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R15,R11 ;LOADI2(reg)*
L65:
	release 4
	Cretn

_sendip:
	reserve 4
;void sendip(){
;	send0s("Last command from: ");
	ldaD R12,L67; reg:acon
	Ccall _send0s
;	send0s(itoa(cmdip[0],strbuf));
	ld2 R12,'D',(_cmdip),0 ;reg:INDIRI2(addr)
	ldaD R13,_strbuf; reg:acon
	Ccall _itoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _send0s
;	send0s(".");
	ldaD R12,L68; reg:acon
	Ccall _send0s
;	send0s(itoa(cmdip[1],strbuf));
	ld2 R12,'D',(_cmdip+2),0 ;reg:INDIRI2(addr)
	ldaD R13,_strbuf; reg:acon
	Ccall _itoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _send0s
;	send0s(".");
	ldaD R12,L68; reg:acon
	Ccall _send0s
;	send0s(itoa(cmdip[2],strbuf));
	ld2 R12,'D',(_cmdip+4),0 ;reg:INDIRI2(addr)
	ldaD R13,_strbuf; reg:acon
	Ccall _itoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _send0s
;	send0s(".");
	ldaD R12,L68; reg:acon
	Ccall _send0s
;	send0s(itoa(cmdip[3],strbuf));
	ld2 R12,'D',(_cmdip+6),0 ;reg:INDIRI2(addr)
	ldaD R13,_strbuf; reg:acon
	Ccall _itoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _send0s
;	send0s("<p>");
	ldaD R12,L72; reg:acon
	Ccall _send0s
;}
L66:
	release 4
	Cretn

L74:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 45
	db 84
	db 121
	db 112
	db 101
	db 58
	db 32
	db 116
	db 101
	db 120
	db 116
	db 47
	db 104
	db 116
	db 109
	db 108
	db 13
	db 10
	db 13
	db 10
	db 60
	db 104
	db 116
	db 109
	db 108
	db 62
	db 60
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 115
	db 112
	db 97
	db 110
	db 32
	db 115
	db 116
	db 121
	db 108
	db 101
	db 61
	db 34
	db 99
	db 111
	db 108
	db 111
	db 114
	db 58
	db 35
	db 48
	db 48
	db 48
	db 48
	db 65
	db 48
	db 34
	db 62
	db 13
	db 10
	db 60
	db 104
	db 49
	db 62
	db 60
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 79
	db 108
	db 100
	db 117
	db 105
	db 110
	db 111
	db 32
	db 49
	db 56
	db 48
	db 50
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 32
	db 86
	db 52
	db 46
	db 50
	db 60
	db 47
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 60
	db 47
	db 104
	db 49
	db 62
	db 13
	db 10
	db 0
L75:
	db 60
	db 112
	db 62
	db 60
	db 102
	db 111
	db 114
	db 109
	db 32
	db 109
	db 101
	db 116
	db 104
	db 111
	db 100
	db 61
	db 34
	db 80
	db 79
	db 83
	db 84
	db 34
	db 62
	db 13
	db 10
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 115
	db 117
	db 98
	db 109
	db 105
	db 116
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 84
	db 111
	db 103
	db 103
	db 108
	db 101
	db 32
	db 76
	db 69
	db 68
	db 34
	db 62
	db 13
	db 10
	db 60
	db 47
	db 102
	db 111
	db 114
	db 109
	db 62
	db 0
L76:
	db 60
	db 112
	db 62
	db 60
	db 102
	db 111
	db 114
	db 109
	db 32
	db 109
	db 101
	db 116
	db 104
	db 111
	db 100
	db 61
	db 34
	db 71
	db 69
	db 84
	db 34
	db 62
	db 13
	db 10
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 115
	db 117
	db 98
	db 109
	db 105
	db 116
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 76
	db 69
	db 68
	db 32
	db 83
	db 116
	db 97
	db 116
	db 117
	db 115
	db 34
	db 62
	db 13
	db 10
	db 60
	db 47
	db 102
	db 111
	db 114
	db 109
	db 62
	db 0
L77:
	db 60
	db 47
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 47
	db 104
	db 116
	db 109
	db 108
	db 62
	db 13
	db 10
	db 13
	db 10
	db 0
_sendform:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
;void sendform(){
;	pagehits+=1;
	ld2 R11,'D',(_pagehits),0 ;reg:INDIRI2(addr)
	incm R11,1
	st2 R11,'D',(_pagehits),0; ASGNI2(addr,reg)*;
;	sendrc=send0s(hdr); 	// Now Send the HTTP Response first part
	ldaD R12,L74; reg:acon
	Ccall _send0s
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy2 R7,R11 ;LOADI2(reg)*
;	send0s("Pages Served: "); send0s(itoa(pagehits,strbuf)); send0s("<p>");
	ldaD R12,L78; reg:acon
	Ccall _send0s
	ld2 R12,'D',(_pagehits),0 ;reg:INDIRI2(addr)
	ldaD R13,_strbuf; reg:acon
	Ccall _itoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _send0s
	ldaD R12,L72; reg:acon
	Ccall _send0s
;	if (cmdip[0]!=0)
	ld2 R11,'D',(_cmdip),0 ;reg:INDIRI2(addr)
	jzU2 r11,L79; EQ 0
;		sendip();
	Ccall _sendip
L79:
;	sendrc=send0s("LED is ");
	ldaD R12,L81; reg:acon
	Ccall _send0s
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy2 R7,R11 ;LOADI2(reg)*
;	if (ledmode==1)
	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
	jneU2I r11,1,L82; NE
;		send0s("ON\r\n");
	ldaD R12,L84; reg:acon
	Ccall _send0s
	lbr L83
L82:
;		send0s("OFF\r\n");
	ldaD R12,L85; reg:acon
	Ccall _send0s
L83:
;	sendrc=send0s(postform); 	// Now Send the "POST" form
	ldaD R12,L75; reg:acon
	Ccall _send0s
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy2 R7,R11 ;LOADI2(reg)*
;	sendrc=send0s(getform); 	// Now Send the "GET" form
	ldaD R12,L76; reg:acon
	Ccall _send0s
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy2 R7,R11 ;LOADI2(reg)*
;	sendrc=send0s(trlr); 	// Now Send the rest of the page
	ldaD R12,L77; reg:acon
	Ccall _send0s
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy2 R7,R11 ;LOADI2(reg)*
;}
L73:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_strindex:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r1,r13; function(2055) 1
;{
;  n=strlen(t);
	cpy2 R12,R1 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;  for(i=0;*(s+i); i++) {
	ld2z R0
	lbr L90
L87:
;    if (strncmp(s+i,t,n) == 0)
	alu2 R12,R0,R7,add,adc
	cpy2 R13,R1 ;LOADP2(reg)
	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _strncmp
	cpy2 R11,R15 ;LOADI2(reg)*
	jnzU2 r11,L91; NE 0
;      return i;
	cpy2 R15,R0 ;LOADI2(reg)*
	lbr L86
L91:
;  }
L88:
;  for(i=0;*(s+i); i++) {
	incm R0,1
L90:
	alu2 R11,R0,R7,add,adc
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L87; NE 0
;  return -1;
	ldaD R15,-1; reg:acon
L86:
	release 6; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_handlepost:
	reserve 4
;void handlepost(){
;	if (ledmode==1){
	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
	jneU2I r11,1,L94; NE
;		ledmode=0;
	ld2z R11
	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
;		digitalWrite(0,LOW);
	ld2z R11
	cpy2 R12,R11 ;LOADI2(reg)*
	cpy2 R13,R11 ;LOADI2(reg)*
	Ccall _digitalWrite
;	} else {
	lbr L95
L94:
;		ledmode=1;
	ldaD R11,1; reg:acon
	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
;		digitalWrite(0,HIGH);
	ld2z R12
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;	}
L95:
;	cmdip[0]=SPI_Read(S0_DIPR + 0);cmdip[1]=SPI_Read(S0_DIPR + 1);cmdip[2]=SPI_Read(S0_DIPR + 2);cmdip[3]=SPI_Read(S0_DIPR + 3);
	ldaD R12,1036; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'D',(_cmdip),0; ASGNI2(addr,reg)*;
	ldaD R12,1037; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'D',(_cmdip+2),0; ASGNI2(addr,reg)*;
	ldaD R12,1038; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'D',(_cmdip+4),0; ASGNI2(addr,reg)*;
	ldaD R12,1039; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'D',(_cmdip+6),0; ASGNI2(addr,reg)*;
;	sendform();
	Ccall _sendform
;}
L93:
	release 4
	Cretn

_handlesession:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
;void handlesession(){	//handle a session once it's established
;	rsize=recv_size();
	Ccall _recv_size;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R7,R11 ;LOADU2(reg)*
;	if (rsize>0){
	jeqU2I r7,0,L100;EQU2(reg,con)
;		if (recv0(buf,min(12,rsize))>0){
	ldaD R12,_buf; reg:acon
	ldaD R11,12; reg:acon
	jcU2 r11,r7,lbdf,L105; GE is flipped test from LT
	ldaD R1,12; reg:acon
	lbr L106
L105:
	cpy2 R1,R7 ;LOADU2(reg)*
L106:
	cpy2 R13,R1 ;LOADU2(reg)*
	Ccall _recv0;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	jeqU2I r11,0,L102;EQU2(reg,con)
;  			if (strncmp((char *)buf,"POST /",6)==0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L109; reg:acon
	ldaD R11,6; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _strncmp
	cpy2 R11,R15 ;LOADI2(reg)*
	jnzU2 r11,L107; NE 0
;  				handlepost(); //handle a button press
	Ccall _handlepost
	lbr L108
L107:
;			else if (strncmp((char *)buf,"GET /favicon",12)==0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L112; reg:acon
	ldaD R11,12; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _strncmp
	cpy2 R11,R15 ;LOADI2(reg)*
	jnzU2 r11,L110; NE 0
;  				sendnak(); //no favicon here
	Ccall _sendnak
	lbr L111
L110:
;  			else if (strncmp((char *)buf,"GET /",5)>=0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L115; reg:acon
	ldaD R11,5; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _strncmp
	cpy2 R11,R15 ;LOADI2(reg)*
	jcI2I r11,0,lbnf,L113  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  				sendform(); //send the form
	Ccall _sendform
L113:
L111:
L108:
;  			flush(rsize);	//get rid of the received data
	cpy2 R12,R7 ;LOADU2(reg)*
	Ccall _flush
;			disconnect0();	//in any case, we're done here
	Ccall _disconnect0
;		}
L102:
;	}
L100:
;}
L99:
	release 6; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_main:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
;void main(void){
;	delay(100);
	ldaD R12,100; reg:acon
	Ccall _delay
;	printf("\nOlduino Web Server v4.2\n");
	ldaD R12,L117; reg:acon
	Ccall _printf
;    W5100_Init(); //initialize the wiznet chip
	Ccall _W5100_Init
	lbr L119
L118:
;	while(1){  // Loop forever
;		socket0status=SPI_Read(S0_SR);
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)*
	cpy1 R7,R11
	zExt R7 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
;		switch (socket0status){
	ld2z R11
	jzU2 r7,L123; EQ 0
	jcI2 r7,r11,lbnf,L121; LT=lbnf i.e. subtract B from A and jump if borrow 
L126:
	jcI2I r7,23,lbnf,L121  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r7,29,lbnf,L121; GT reverse  the subtraction
	cpy2 R11,R7
	shl2I R11,1
	ld2 R11,'O',R11,(L127-46);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L127:
	dw L124
	dw L125
	dw L121
	dw L125
	dw L125
	dw L125
	dw L125
L123:
;				socket0_init();	//initialize socket 0
	Ccall _socket0_init
;				break;
	lbr L122
L124:
;				handlesession();
	Ccall _handlesession
;				break;
	lbr L122
L125:
;				close0();
	Ccall _close0
;				break;
L121:
L122:
;		delay(100);
	ldaD R12,100; reg:acon
	Ccall _delay
;	}
L119:
;	while(1){  // Loop forever
	lbr L118
;}
L116:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_delay:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R1,1; reg:acon
	lbr L133
L130:
;		oneMs();
	Ccall _oneMs
;	}
L131:
;	for (i=1;i!=howlong;i++){
	incm R1,1
L133:
	jneU2 r1,r7,L130; NE
;}
L129:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L134:
	Cretn

_strncmp:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L140
L137:
;	if (*s1 != *s2)
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L141; EQI2(reg,reg)
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbdf,L144; GE is flipped test from LT
	ldaD R1,-1; reg:acon
	lbr L145
L144:
	ldaD R1,1; reg:acon
L145:
	cpy2 R15,R1 ;LOADI2(reg)*
	lbr L136
L141:
;	else if (*s1 == '\0')
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L146; NE 0
;	    return 0;
	ld2z R15
	lbr L136
L146:
L138:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L140:
	jnzU2 r7,L137; NE 0
;    return 0;
	ld2z R15
L136:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L152
L149:
L150:
	incm R13,1
	incm R12,1
L152:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L149; NE 0
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L148:
	release 2
	Cretn

_strlen:
	reserve 0; save room for local variables
	pushr r7
	reserve 0; save room for outgoing arguments
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L155
L154:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L155:
;	while (*str != 0) {
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L154; NE 0
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)*
L153:
	release 0; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_printstr:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L159
L158:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L159:
	ld1 R11,'O',R7,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L158; NE 0
;}
L157:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_itoa:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L162; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11 ;LOADU2(reg)*
;	} else{
	lbr L163
L162:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R1,R11 ;LOADU2(reg)*
;	}
L163:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L165
L164:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R0
	lbr L170
L167:
L168:
	incm R0,1
	alu2 R1,R1,R7,sm,smb
L170:
	jcU2 r1,r7,lbdf,L167 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
	jnzU2 r11,L174; NE 0
	jnzU2 r0,L174; NE 0
	jneU2I r7,1,L171; NE
L174:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R0,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldaD R11,121; reg:acon
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;		}
L171:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R7,R11 ;LOADU2(reg)*
;	}
L165:
;	while(k>0){
	jnzU2 r7,L164; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L161:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_ltoa:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+16);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L176; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L176:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R7 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
L175:
	release 8; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L178:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L179:
	release 18
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L181; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L182
L181:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L182:
;}
L180:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L183:
	release 4
	Cretn

_printf:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L186
L185:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L188;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L189
L188:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-5+16); ASGNI2(addr,reg)*;
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,105,L193;EQI2(reg,con)
	ldaD R10,108; reg:acon
	jeqI2 r11,r10,L197; EQI2(reg,reg)
	jcI2 r10,r11,lbnf,L205 ;GT is reversed operands from LT
L204:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,88; reg:acon
	jeqI2 r11,r10,L196; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L190; LT=lbnf i.e. subtract B from A and jump if borrow 
L206:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,99,L195;EQI2(reg,con)
	jeqU2I r11,100,L193;EQI2(reg,con)
	lbr L190
L205:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,115; reg:acon
	jeqI2 r11,r10,L194; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L190; LT=lbnf i.e. subtract B from A and jump if borrow 
L207:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,120,L196;EQI2(reg,con)
	lbr L190
L193:
;					printint(*this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L191
L194:
;					printstr((char*) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L191
L195:
;					putc((unsigned int) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L191
L196:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L191
L197:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L198; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L200; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L200:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L202; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L203
L202:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L203:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L191
L198:
L190:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L191:
;		} //%
L189:
;	} //while
L186:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L185; NE 0
;} //prtf
L184:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L209; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L210:
;	while(1);
L211:
	lbr L210
;}
L208:
	release 4
	Cretn

_memcmp:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R1
;    p1 = (unsigned char *)Ptr1;
	cpy2 R0,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	st2 R13,'O',sp,(-4+10); ASGNP2
	lbr L215
L214:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
	cpy2 R9,R10
	incm R9,1
	st2 R9,'O',sp,(-4+10); ASGNP2
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R1,R11,R10,sm,smb
;    }
L215:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jeqU2I r11,0,L217;EQU2(reg,con)
	jzU2 r1,L214; EQ 0
L217:
;    return v;
	cpy2 R15,R1 ;LOADI2(reg)*
L213:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_memcpy:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R1,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L220
L219:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	incm R0,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L220:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L219; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L218:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_memset:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R1,R12 ;LOADP2(reg)
	lbr L224
L223:
;        *p++ = (unsigned char)c;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L224:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L223; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L222:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_spincluder:
;void spincluder(){
;	asm("\tinclude fastspi.inc\n");
	include fastspi.inc
;}
L226:
	Cretn

_strbuf:
	db 16 dup (0); zerofill global
_buf:
	db 512 dup (0); zerofill global
L209:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
L117:
	db 10
	db 79
	db 108
	db 100
	db 117
	db 105
	db 110
	db 111
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 32
	db 118
	db 52
	db 46
	db 50
	db 10
	db 0
L115:
	db 71
	db 69
	db 84
	db 32
	db 47
	db 0
L112:
	db 71
	db 69
	db 84
	db 32
	db 47
	db 102
	db 97
	db 118
	db 105
	db 99
	db 111
	db 110
	db 0
L109:
	db 80
	db 79
	db 83
	db 84
	db 32
	db 47
	db 0
L85:
	db 79
	db 70
	db 70
	db 13
	db 10
	db 0
L84:
	db 79
	db 78
	db 13
	db 10
	db 0
L81:
	db 76
	db 69
	db 68
	db 32
	db 105
	db 115
	db 32
	db 0
L78:
	db 80
	db 97
	db 103
	db 101
	db 115
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 100
	db 58
	db 32
	db 0
L72:
	db 60
	db 112
	db 62
	db 0
L68:
	db 46
	db 0
L67:
	db 76
	db 97
	db 115
	db 116
	db 32
	db 99
	db 111
	db 109
	db 109
	db 97
	db 110
	db 100
	db 32
	db 102
	db 114
	db 111
	db 109
	db 58
	db 32
	db 0
L62:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 49
	db 32
	db 52
	db 48
	db 52
	db 32
	db 78
	db 111
	db 116
	db 32
	db 70
	db 111
	db 117
	db 110
	db 100
	db 13
	db 10
	db 13
	db 10
	db 0
L54:
	db 84
	db 88
	db 32
	db 70
	db 114
	db 101
	db 101
	db 32
	db 83
	db 105
	db 122
	db 101
	db 32
	db 69
	db 114
	db 114
	db 111
	db 114
	db 33
	db 10
	db 0
L26:
	db 68
	db 111
	db 110
	db 101
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 87
	db 53
	db 49
	db 48
	db 48
	db 32
	db 73
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 32
	db 111
	db 110
	db 32
	db 73
	db 80
	db 32
	db 97
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
	include lcc1802Epilofl.inc
	include IO1802.inc
