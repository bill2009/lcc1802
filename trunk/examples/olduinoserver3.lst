 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 1 - 6/19/2013 13:05:07


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Wed Jun 19 13:04:53 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  840/       0 :                     	listing	on
(1)  841/       0 : C0 26 AE            	lbr	lcc1802Init
(1)  842/       3 :                     	
(1)  843/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _ledmode:
      15/       4 : 00 03               	dw 3
      16/       6 :                     _reqtype:
      17/       6 : 00 03               	dw 3
      18/       8 :                     _cmdip:
      19/       8 : 00 B6               	dw 182
      20/       A :                     _SPI_Write:
      21/       A : (MACRO)             	reserve 4
      22/       E : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      23/      1B : (MACRO)             	st2 r13,'O',sp,(8); flag1 
      24/      28 : (MACRO)             	ld2 R11,'O',sp,(2+6) ;reg:INDIRI2(addr)
      25/      34 : (MACRO)             	st1 R11,'O',sp,(2+6); ASGNU1
      26/      3E :                     ;{
      27/      3E :                     ;  enablewiz();   			// Activate the CS pin
      28/      3E :                     ;  sendwizwrt(); //was shiftoutf(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
      29/      3E : 7A                  	req
      30/      3F : (MACRO)             	Ccall _sendwizwrt; CALLI2(ar)
      31/      42 :                     ;  shiftoutf(addr >>8); 		// Send Wiznet W5100 Address High Byte
      32/      42 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      33/      4E : (MACRO)             	cpy2 R12,R11
      34/      52 : 9C                  	ghi	R12	;opt2
      35/      53 : AC                  	plo	R12
      36/      54 : F8 00               	ldi	0
      37/      56 : BC                  	phi	R12
      38/      57 : (MACRO)             	Ccall _shiftoutf
      39/      5A :                     ;  shiftoutf(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
      40/      5A : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      41/      66 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      42/      6E : (MACRO)             	Ccall _shiftoutf
      43/      71 :                     ;  shiftoutf(data);			// Send the data byte
      44/      71 : (MACRO)             	ld1 R11,'O',sp,(2+6)
      45/      7B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      46/      7E : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
      47/      82 : (MACRO)             	Ccall _shiftoutf
      48/      85 :                     ;  disablewiz();				// make CS pin not active
      49/      85 : 7B                  	seq
      50/      86 :                     ;}
      51/      86 :                     L1:
      52/      86 : (MACRO)             	release 4
      53/      8A : (MACRO)             	Cretn
      54/      8B :                     
      55/      8B :                     _SPI_Read:
      56/      8B : (MACRO)             	reserve 6
      57/      91 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
      58/      9E :                     ;{
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 2 - 6/19/2013 13:05:07


      59/      9E :                     ;  enablewiz();   		// Activate the CS pin
      60/      9E :                     ;  sendwizrd(); //shiftoutf(WIZNET_READ_OPCODE);   //Send Wiznet W5100 Write OpCode
      61/      9E : 7A                  	req
      62/      9F : (MACRO)             	Ccall _sendwizrd; CALLI2(ar)
      63/      A2 :                     ;  shiftoutf(addr >>8);	// Send Wiznet W5100 Address High Byte
      64/      A2 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      65/      AE : (MACRO)             	cpy2 R12,R11
      66/      B2 : 9C                  	ghi	R12	;opt2
      67/      B3 : AC                  	plo	R12
      68/      B4 : F8 00               	ldi	0
      69/      B6 : BC                  	phi	R12
      70/      B7 : (MACRO)             	Ccall _shiftoutf
      71/      BA :                     ;  shiftoutf(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
      72/      BA : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      73/      C6 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      74/      CE : (MACRO)             	Ccall _shiftoutf
      75/      D1 :                     ;  value=shiftinf();	// Send Dummy transmission to read the data
      76/      D1 : (MACRO)             	Ccall _shiftinf;CALLU2(ar)*
      77/      D4 : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
      78/      D6 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
      79/      E0 :                     ;  disablewiz();			// make CS pin inactive
      80/      E0 :                     ;  return(value);
      81/      E0 : 7B                  	seq
      82/      E1 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
      83/      EB : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
      84/      EE :                     L4:
      85/      EE : (MACRO)             	release 6
      86/      F4 : (MACRO)             	Cretn
      87/      F5 :                     
      88/      F5 :                     L8:
      89/      F5 : DE                  	db 222
      90/      F6 : AD                  	db 173
      91/      F7 : BE                  	db 190
      92/      F8 : EF                  	db 239
      93/      F9 : FE                  	db 254
      94/      FA : ED                  	db 237
      95/      FB :                     L9:
      96/      FB : C0                  	db 192
      97/      FC : A8                  	db 168
      98/      FD : 01                  	db 1
      99/      FE : B8                  	db 184
     100/      FF :                     L10:
     101/      FF : FF                  	db 255
     102/     100 : FF                  	db 255
     103/     101 : FF                  	db 255
     104/     102 : 00                  	db 0
     105/     103 :                     L11:
     106/     103 : C0                  	db 192
     107/     104 : A8                  	db 168
     108/     105 : 01                  	db 1
     109/     106 : 01                  	db 1
     110/     107 :                     _W5100_Init:
     111/     107 : (MACRO)             	reserve 34
     112/     111 :                     ;void W5100_Init(void){// Ethernet Setup
     113/     111 :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     114/     111 : (MACRO)             	ldA2 R11,'O',sp,(-8+36); reg:addr
     115/     119 : (MACRO)             	ldaD R8,L8; reg:acon
     116/     11F : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     117/     134 :                     ;  unsigned char ip_addr[] = {192,168,1,184};
     118/     134 : (MACRO)             	ldA2 R11,'O',sp,(-12+36); reg:addr
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 3 - 6/19/2013 13:05:07


     119/     13C : (MACRO)             	ldaD R8,L9; reg:acon
     120/     142 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     121/     157 :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     122/     157 : (MACRO)             	ldA2 R11,'O',sp,(-16+36); reg:addr
     123/     15F : (MACRO)             	ldaD R8,L10; reg:acon
     124/     165 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     125/     17A :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     126/     17A : (MACRO)             	ldA2 R11,'O',sp,(-20+36); reg:addr
     127/     182 : (MACRO)             	ldaD R8,L11; reg:acon
     128/     188 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     129/     19D :                     ;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
     130/     19D : (MACRO)             	ld2z R12
     131/     1A1 : (MACRO)             	ldaD R13,128; reg:acon
     132/     1A7 : (MACRO)             	Ccall _SPI_Write
     133/     1AA :                     ;  delay(1);
     134/     1AA : (MACRO)             	ldaD R12,1; reg:acon
     135/     1B0 : (MACRO)             	Ccall _delay
     136/     1B3 :                     ;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
     137/     1B3 : (MACRO)             	ldaD R12,1; reg:acon
     138/     1B9 : (MACRO)             	ld1 R13,'O',sp,(-20+36)
     139/     1C3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     140/     1C6 : (MACRO)             	Ccall _SPI_Write
     141/     1C9 : (MACRO)             	ldaD R12,2; reg:acon
     142/     1CF : (MACRO)             	ld1 R13,'O',sp,(-19+36)
     143/     1D9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     144/     1DC : (MACRO)             	Ccall _SPI_Write
     145/     1DF :                     ;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
     146/     1DF : (MACRO)             	ldaD R12,3; reg:acon
     147/     1E5 : (MACRO)             	ld1 R13,'O',sp,(-18+36)
     148/     1EF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     149/     1F2 : (MACRO)             	Ccall _SPI_Write
     150/     1F5 : (MACRO)             	ldaD R12,4; reg:acon
     151/     1FB : (MACRO)             	ld1 R13,'O',sp,(-17+36)
     152/     205 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     153/     208 : (MACRO)             	Ccall _SPI_Write
     154/     20B :                     ;  delay(1);
     155/     20B : (MACRO)             	ldaD R12,1; reg:acon
     156/     211 : (MACRO)             	Ccall _delay
     157/     214 :                     ;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
     158/     214 : (MACRO)             	ldaD R12,9; reg:acon
     159/     21A : (MACRO)             	ld1 R13,'O',sp,(-8+36)
     160/     224 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     161/     227 : (MACRO)             	Ccall _SPI_Write
     162/     22A : (MACRO)             	ldaD R12,10; reg:acon
     163/     230 : (MACRO)             	ld1 R13,'O',sp,(-7+36)
     164/     23A : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     165/     23D : (MACRO)             	Ccall _SPI_Write
     166/     240 :                     ;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
     167/     240 : (MACRO)             	ldaD R12,11; reg:acon
     168/     246 : (MACRO)             	ld1 R13,'O',sp,(-6+36)
     169/     250 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     170/     253 : (MACRO)             	Ccall _SPI_Write
     171/     256 : (MACRO)             	ldaD R12,12; reg:acon
     172/     25C : (MACRO)             	ld1 R13,'O',sp,(-5+36)
     173/     266 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     174/     269 : (MACRO)             	Ccall _SPI_Write
     175/     26C :                     ;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
     176/     26C : (MACRO)             	ldaD R12,13; reg:acon
     177/     272 : (MACRO)             	ld1 R13,'O',sp,(-4+36)
     178/     27C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 4 - 6/19/2013 13:05:07


     179/     27F : (MACRO)             	Ccall _SPI_Write
     180/     282 : (MACRO)             	ldaD R12,14; reg:acon
     181/     288 : (MACRO)             	ld1 R13,'O',sp,(-3+36)
     182/     292 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     183/     295 : (MACRO)             	Ccall _SPI_Write
     184/     298 :                     ;  delay(1);
     185/     298 : (MACRO)             	ldaD R12,1; reg:acon
     186/     29E : (MACRO)             	Ccall _delay
     187/     2A1 :                     ;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
     188/     2A1 : (MACRO)             	ldaD R12,5; reg:acon
     189/     2A7 : (MACRO)             	ld1 R13,'O',sp,(-16+36)
     190/     2B1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     191/     2B4 : (MACRO)             	Ccall _SPI_Write
     192/     2B7 : (MACRO)             	ldaD R12,6; reg:acon
     193/     2BD : (MACRO)             	ld1 R13,'O',sp,(-15+36)
     194/     2C7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     195/     2CA : (MACRO)             	Ccall _SPI_Write
     196/     2CD :                     ;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
     197/     2CD : (MACRO)             	ldaD R12,7; reg:acon
     198/     2D3 : (MACRO)             	ld1 R13,'O',sp,(-14+36)
     199/     2DD : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     200/     2E0 : (MACRO)             	Ccall _SPI_Write
     201/     2E3 : (MACRO)             	ldaD R12,8; reg:acon
     202/     2E9 : (MACRO)             	ld1 R13,'O',sp,(-13+36)
     203/     2F3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     204/     2F6 : (MACRO)             	Ccall _SPI_Write
     205/     2F9 :                     ;  delay(1);
     206/     2F9 : (MACRO)             	ldaD R12,1; reg:acon
     207/     2FF : (MACRO)             	Ccall _delay
     208/     302 :                     ;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
     209/     302 : (MACRO)             	ldaD R12,15; reg:acon
     210/     308 : (MACRO)             	ld1 R13,'O',sp,(-12+36)
     211/     312 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     212/     315 : (MACRO)             	Ccall _SPI_Write
     213/     318 : (MACRO)             	ldaD R12,16; reg:acon
     214/     31E : (MACRO)             	ld1 R13,'O',sp,(-11+36)
     215/     328 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     216/     32B : (MACRO)             	Ccall _SPI_Write
     217/     32E :                     ;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
     218/     32E : (MACRO)             	ldaD R12,17; reg:acon
     219/     334 : (MACRO)             	ld1 R13,'O',sp,(-10+36)
     220/     33E : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     221/     341 : (MACRO)             	Ccall _SPI_Write
     222/     344 : (MACRO)             	ldaD R12,18; reg:acon
     223/     34A : (MACRO)             	ld1 R13,'O',sp,(-9+36)
     224/     354 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     225/     357 : (MACRO)             	Ccall _SPI_Write
     226/     35A :                     ;  delay(1);
     227/     35A : (MACRO)             	ldaD R12,1; reg:acon
     228/     360 : (MACRO)             	Ccall _delay
     229/     363 :                     ;  SPI_Write(RMSR,0x55);
     230/     363 : (MACRO)             	ldaD R12,26; reg:acon
     231/     369 : (MACRO)             	ldaD R13,85; reg:acon
     232/     36F : (MACRO)             	Ccall _SPI_Write
     233/     372 :                     ;  SPI_Write(TMSR,0x55);
     234/     372 : (MACRO)             	ldaD R12,27; reg:acon
     235/     378 : (MACRO)             	ldaD R13,85; reg:acon
     236/     37E : (MACRO)             	Ccall _SPI_Write
     237/     381 :                     ;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
     238/     381 : (MACRO)             	ldaD R12,15; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 5 - 6/19/2013 13:05:07


     239/     387 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     240/     38A : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     241/     38E : (MACRO)             	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
     242/     39B : (MACRO)             	ldaD R12,16; reg:acon
     243/     3A1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     244/     3A4 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     245/     3A8 : (MACRO)             	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
     246/     3B5 : (MACRO)             	ldaD R12,17; reg:acon
     247/     3BB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     248/     3BE : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     249/     3C2 : (MACRO)             	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
     250/     3CF : (MACRO)             	ldaD R12,18; reg:acon
     251/     3D5 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     252/     3D8 : (MACRO)             	ldaD R12,L26; reg:acon
     253/     3DE : (MACRO)             	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
     254/     3EA : (MACRO)             	cpy1 R13,R10
     255/     3EC : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     256/     3EF : (MACRO)             	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
     257/     3FB : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     258/     3FE : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     259/     40B : (MACRO)             	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
     260/     417 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     261/     41A : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     262/     427 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     263/     42B : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     264/     42E : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     265/     43B : (MACRO)             	Ccall _printf
     266/     43E :                     ;}
     267/     43E :                     L7:
     268/     43E : (MACRO)             	release 34
     269/     446 : (MACRO)             	Cretn
     270/     447 :                     
     271/     447 :                     _socket0_init:
     272/     447 : (MACRO)             	reserve 4
     273/     44B :                     ;void socket0_init(){ //initialize socket 0 for http server
     274/     44B :                     ;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
     275/     44B : (MACRO)             	ldaD R12,1024; reg:acon
     276/     451 : (MACRO)             	ldaD R13,1; reg:acon
     277/     457 : (MACRO)             	Ccall _SPI_Write
     278/     45A :                     ;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
     279/     45A : (MACRO)             	ldaD R12,1028; reg:acon
     280/     460 : (MACRO)             	ld2z R13
     281/     464 : (MACRO)             	Ccall _SPI_Write
     282/     467 :                     ;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
     283/     467 : (MACRO)             	ldaD R12,1029; reg:acon
     284/     46D : (MACRO)             	ldaD R13,80; reg:acon
     285/     473 : (MACRO)             	Ccall _SPI_Write
     286/     476 :                     ;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     287/     476 : (MACRO)             	ldaD R12,1025; reg:acon
     288/     47C : (MACRO)             	ldaD R13,1; reg:acon
     289/     482 : (MACRO)             	Ccall _SPI_Write
     290/     485 :                     ;	delay(10);
     291/     485 : (MACRO)             	ldaD R12,10; reg:acon
     292/     48B : (MACRO)             	Ccall _delay
     293/     48E :                     ;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
     294/     48E : (MACRO)             	ldaD R12,1025; reg:acon
     295/     494 : (MACRO)             	ldaD R13,2; reg:acon
     296/     49A : (MACRO)             	Ccall _SPI_Write
     297/     49D :                     ;}
     298/     49D :                     L27:
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 6 - 6/19/2013 13:05:07


     299/     49D : (MACRO)             	release 4
     300/     4A1 : (MACRO)             	Cretn
     301/     4A2 :                     
     302/     4A2 :                     _disconnect0:
     303/     4A2 : (MACRO)             	reserve 4
     304/     4A6 :                     ;void disconnect0(){
     305/     4A6 :                     ;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
     306/     4A6 : (MACRO)             	ldaD R12,1025; reg:acon
     307/     4AC : (MACRO)             	ldaD R13,8; reg:acon
     308/     4B2 : (MACRO)             	Ccall _SPI_Write
     309/     4B5 :                     L29:
     310/     4B5 :                     ;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
     311/     4B5 :                     L30:
     312/     4B5 : (MACRO)             	ldaD R12,1025; reg:acon
     313/     4BB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     314/     4BE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     315/     4C2 : (MACRO)             	jnzU1 r11,L29; NEI2(CVUI2(reg),con0)
     316/     4C6 :                     ;}
     317/     4C6 :                     L28:
     318/     4C6 : (MACRO)             	release 4
     319/     4CA : (MACRO)             	Cretn
     320/     4CB :                     
     321/     4CB :                     _close0:
     322/     4CB : (MACRO)             	reserve 4
     323/     4CF :                     ;void close0(){
     324/     4CF :                     ;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
     325/     4CF : (MACRO)             	ldaD R12,1025; reg:acon
     326/     4D5 : (MACRO)             	ldaD R13,16; reg:acon
     327/     4DB : (MACRO)             	Ccall _SPI_Write
     328/     4DE :                     L33:
     329/     4DE :                     ;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
     330/     4DE :                     L34:
     331/     4DE : (MACRO)             	ldaD R12,1025; reg:acon
     332/     4E4 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     333/     4E7 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     334/     4EB : (MACRO)             	jnzU1 r11,L33; NEI2(CVUI2(reg),con0)
     335/     4EF :                     ;}
     336/     4EF :                     L32:
     337/     4EF : (MACRO)             	release 4
     338/     4F3 : (MACRO)             	Cretn
     339/     4F4 :                     
     340/     4F4 :                     _recv0:
     341/     4F4 : (MACRO)             	reserve 6; save room for local variables
     342/     4FA : (MACRO)             	pushr r0
     343/     4FF : (MACRO)             	pushr r1
     344/     504 : (MACRO)             	pushr r6
     345/     509 : (MACRO)             	pushr r7
     346/     50E : (MACRO)             	reserve 6; save room for outgoing arguments
     347/     514 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     348/     518 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     349/     51C :                     ;unsigned int recv0(unsigned char *buf,unsigned int buflen){
     350/     51C :                     ;    if (buflen <= 0) return 1;
     351/     51C : (MACRO)             	jnzU2 r6,L37; NE 0
     352/     524 : (MACRO)             	ldaD R15,1; reg:acon
     353/     52A : C0 07 3B            	lbr L36
     354/     52D :                     L37:
     355/     52D :                     ;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
     356/     52D : (MACRO)             	jnU2I r6,512,lbdf,L39 ;LEU2 512 6 L39; LE is flipped test & subtraction
     357/     536 :                     ;        buflen=MAX_BUF - 2;
     358/     536 : (MACRO)             	ldaD R6,510; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 7 - 6/19/2013 13:05:07


     359/     53C :                     L39:
     360/     53C :                     ;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
     361/     53C : (MACRO)             	ldaD R12,1064; reg:acon
     362/     542 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     363/     545 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     364/     549 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     365/     54C : (MACRO)             	st2 R11,'O',sp,(-6+22); ASGNU2(addr,reg)*
     366/     559 :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     367/     559 : (MACRO)             	ldaD R12,1065; reg:acon
     368/     55F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     369/     562 : (MACRO)             	ld2 R10,'O',sp,(-6+22); reg:INDIRU2(addr)
     370/     56E : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     371/     576 : (MACRO)             	shl2I R10,8
     372/     5A6 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     373/     5AA : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     374/     5AD : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     375/     5B9 :                     ;    if (buflen>hdrlen){
     376/     5B9 : (MACRO)             	jnU2I r6,16,lbdf,L51 ;LEU2 16 6 L51; LE is flipped test & subtraction
     377/     5C2 :                     ;		toread=hdrlen;
     378/     5C2 : (MACRO)             	ldaD R11,16; reg:acon
     379/     5C8 : (MACRO)             	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
     380/     5D5 :                     ;		toskip=buflen-hdrlen-trlrlen;
     381/     5D5 : (MACRO)             	alu2I R11,R6,16,smi,smbi
     382/     5DD : (MACRO)             	alu2I R11,R11,32,smi,smbi
     383/     5E5 : (MACRO)             	st2 R11,'O',sp,(-8+22); ASGNU2(addr,reg)*
     384/     5F2 :                     ;		printf("toread=%d,toskip=%d\n",toread,toskip);
     385/     5F2 : (MACRO)             	ldaD R12,L43; reg:acon
     386/     5F8 : (MACRO)             	ld2 R13,'O',sp,(-4+22); reg:INDIRU2(addr)
     387/     604 : (MACRO)             	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
     388/     610 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     389/     61D : (MACRO)             	Ccall _printf
     390/     620 : C0 06 5D            	lbr L45
     391/     623 :                     L44:
     392/     623 :                     ;		while(buflen && toread) {//receive individual bytes into the buffer
     393/     623 :                     ;		  buflen--; toread--;
     394/     623 : (MACRO)             	decm R6,1
     395/     624 : (MACRO)             	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
     396/     630 : (MACRO)             	decm R11,1
     397/     631 : (MACRO)             	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
     398/     63E :                     ;		  realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     399/     63E : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     400/     646 : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     401/     64E :                     ;		  *buf = SPI_Read(realaddr);
     402/     64E : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     403/     652 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     404/     655 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     405/     659 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     406/     65B :                     ;		  offaddr++;
     407/     65B : (MACRO)             	incm R1,1
     408/     65C :                     ;		  buf++;
     409/     65C : (MACRO)             	incm R7,1
     410/     65D :                     ;		}
     411/     65D :                     L45:
     412/     65D :                     ;		while(buflen && toread) {//receive individual bytes into the buffer
     413/     65D : (MACRO)             	jzU2 r6,L47; EQ 0
     414/     665 : (MACRO)             	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
     415/     671 : (MACRO)             	jnzU2 r11,L44; NE 0
     416/     679 :                     L47:
     417/     679 :                     ;		if (toskip>0){
     418/     679 : (MACRO)             	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 8 - 6/19/2013 13:05:07


     419/     685 : (MACRO)             	jzU2 r11,L51; EQ 0
     420/     68D :                     ;			buflen-=toskip;
     421/     68D : (MACRO)             	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
     422/     699 : (MACRO)             	alu2 R6,R6,R11,sm,smb
     423/     6A5 :                     ;			offaddr+=toskip;
     424/     6A5 : (MACRO)             	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
     425/     6B1 : (MACRO)             	alu2 R1,R1,R11,add,adc; ADDU2(r,r)
     426/     6BD :                     ;		}
     427/     6BD :                     ;	}
     428/     6BD : C0 06 E0            	lbr L51
     429/     6C0 :                     L50:
     430/     6C0 :                     ;    while(buflen) {//receive individual bytes into the buffer
     431/     6C0 :                     ;      buflen--;
     432/     6C0 : (MACRO)             	decm R6,1
     433/     6C1 :                     ;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     434/     6C1 : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     435/     6C9 : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     436/     6D1 :                     ;      *buf = SPI_Read(realaddr);
     437/     6D1 : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     438/     6D5 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     439/     6D8 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     440/     6DC : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     441/     6DE :                     ;      offaddr++;
     442/     6DE : (MACRO)             	incm R1,1
     443/     6DF :                     ;      buf++;
     444/     6DF : (MACRO)             	incm R7,1
     445/     6E0 :                     ;    }
     446/     6E0 :                     L51:
     447/     6E0 :                     ;    while(buflen) {//receive individual bytes into the buffer
     448/     6E0 : (MACRO)             	jnzU2 r6,L50; NE 0
     449/     6E8 :                     ;    *buf='\0';        // terminate string
     450/     6E8 : (MACRO)             	ldaD R11,0; reg:acon
     451/     6EE : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     452/     6F0 :                     ;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
     453/     6F0 : (MACRO)             	ldaD R12,1064; reg:acon
     454/     6F6 : (MACRO)             	cpy2 R11,R1
     455/     6FA : 9B                  	ghi	R11	;opt2
     456/     6FB : AB                  	plo	R11
     457/     6FC : F8 00               	ldi	0
     458/     6FE : BB                  	phi	R11
     459/     6FF : (MACRO)             	cpy1 R13,R11
     460/     701 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     461/     704 : (MACRO)             	Ccall _SPI_Write
     462/     707 :                     ;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     463/     707 : (MACRO)             	ldaD R12,1065; reg:acon
     464/     70D : (MACRO)             	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     465/     715 : (MACRO)             	cpy1 R13,R11
     466/     717 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     467/     71A : (MACRO)             	Ccall _SPI_Write
     468/     71D :                     ;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
     469/     71D : (MACRO)             	ldaD R12,1025; reg:acon
     470/     723 : (MACRO)             	ldaD R13,64; reg:acon
     471/     729 : (MACRO)             	Ccall _SPI_Write
     472/     72C :                     ;    delay(5);    				// Wait for Receive Process
     473/     72C : (MACRO)             	ldaD R12,5; reg:acon
     474/     732 : (MACRO)             	Ccall _delay
     475/     735 :                     ;    return 1;
     476/     735 : (MACRO)             	ldaD R15,1; reg:acon
     477/     73B :                     L36:
     478/     73B : (MACRO)             	release 6; release room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 9 - 6/19/2013 13:05:07


     479/     741 : (MACRO)             	popr r7
     480/     745 : (MACRO)             	popr r6
     481/     749 : (MACRO)             	popr r1
     482/     74D : (MACRO)             	popr r0
     483/     751 : (MACRO)             	release 6; release room for local variables 
     484/     757 : (MACRO)             	Cretn
     485/     758 :                     
     486/     758 :                     _recv_size:
     487/     758 : (MACRO)             	reserve 6
     488/     75E :                     ;unsigned int recv_size(void){
     489/     75E :                     ;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     490/     75E : (MACRO)             	ldaD R12,1062; reg:acon
     491/     764 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     492/     767 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     493/     76B : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     494/     778 : (MACRO)             	ldaD R12,1063; reg:acon
     495/     77E : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     496/     781 : (MACRO)             	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
     497/     78D : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     498/     790 : (MACRO)             	alu2I R10,R10,255,ani,ani
     499/     798 :                     	;removed ?	cpy2 R10,R10
     500/     798 : (MACRO)             	shl2I R10,8
     501/     7C8 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     502/     7CC : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     503/     7CF : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
     504/     7DB : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     505/     7DF :                     L53:
     506/     7DF : (MACRO)             	release 6
     507/     7E5 : (MACRO)             	Cretn
     508/     7E6 :                     
     509/     7E6 :                     _send0:
     510/     7E6 : (MACRO)             	reserve 6; save room for local variables
     511/     7EC : (MACRO)             	pushr r0
     512/     7F1 : (MACRO)             	pushr r1
     513/     7F6 : (MACRO)             	pushr r6
     514/     7FB : (MACRO)             	pushr r7
     515/     800 : (MACRO)             	reserve 4; save room for outgoing arguments
     516/     804 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     517/     808 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     518/     80C :                     ;unsigned int send0(unsigned char *buf,unsigned int buflen){
     519/     80C :                     ;    if (buflen <= 0) return 0;
     520/     80C : (MACRO)             	jnzU2 r6,L55; NE 0
     521/     814 : (MACRO)             	ld2z R15
     522/     818 : C0 0A F2            	lbr L54
     523/     81B :                     L55:
     524/     81B :                     ;    txsize=SPI_Read(SO_TX_FSR);
     525/     81B : (MACRO)             	ldaD R12,1056; reg:acon
     526/     821 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     527/     824 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     528/     828 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     529/     82B : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     530/     82F :                     ;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     531/     82F : (MACRO)             	ldaD R12,1057; reg:acon
     532/     835 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     533/     838 : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     534/     840 : (MACRO)             	shl2I R10,8
     535/     870 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     536/     874 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     537/     877 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     538/     883 :                     ;    timeout=0;
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 10 - 6/19/2013 13:05:07


     539/     883 : (MACRO)             	ld2z R11
     540/     887 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
     541/     894 : C0 09 39            	lbr L58
     542/     897 :                     L57:
     543/     897 :                     ;    while (txsize < buflen) {
     544/     897 :                     ;      delay(1);
     545/     897 : (MACRO)             	ldaD R12,1; reg:acon
     546/     89D : (MACRO)             	Ccall _delay
     547/     8A0 :                     ;     txsize=SPI_Read(SO_TX_FSR);
     548/     8A0 : (MACRO)             	ldaD R12,1056; reg:acon
     549/     8A6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     550/     8A9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     551/     8AD : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     552/     8B0 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     553/     8B4 :                     ;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     554/     8B4 : (MACRO)             	ldaD R12,1057; reg:acon
     555/     8BA : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     556/     8BD : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     557/     8C5 : (MACRO)             	shl2I R10,8
     558/     8F5 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     559/     8F9 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     560/     8FC : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     561/     908 :                     ;     if (timeout++ > 1000) {
     562/     908 : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
     563/     914 : (MACRO)             	cpy2 R10,R11
     564/     918 : (MACRO)             	incm R10,1
     565/     919 : (MACRO)             	st2 R10,'O',sp,(-6+20); ASGNU2(addr,reg)*
     566/     926 : (MACRO)             	jnU2I r11,1000,lbdf,L60 ;LEU2 1000 11 L60; LE is flipped test & subtraction
     567/     92F :                     ;       disconnect0();
     568/     92F : (MACRO)             	Ccall _disconnect0
     569/     932 :                     ;       return 0;
     570/     932 : (MACRO)             	ld2z R15
     571/     936 : C0 0A F2            	lbr L54
     572/     939 :                     L60:
     573/     939 :                     ;   }
     574/     939 :                     L58:
     575/     939 :                     ;    while (txsize < buflen) {
     576/     939 : (MACRO)             	jcU2 r1,r6,lbnf,L57; LT=lbnf i.e. subtract B from A and jump if borrow 
     577/     946 :                     ;   ptr = SPI_Read(S0_TX_WR);
     578/     946 : (MACRO)             	ldaD R12,1060; reg:acon
     579/     94C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     580/     94F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     581/     953 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     582/     956 : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
     583/     963 :                     ;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     584/     963 : (MACRO)             	ldaD R12,1061; reg:acon
     585/     969 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     586/     96C : (MACRO)             	ld2 R10,'O',sp,(-8+20); reg:INDIRU2(addr)
     587/     978 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     588/     980 : (MACRO)             	shl2I R10,8
     589/     9B0 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     590/     9B4 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     591/     9B7 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     592/     9C3 : C0 0A 02            	lbr L63
     593/     9C6 :                     L62:
     594/     9C6 :                     ;    while(buflen) {
     595/     9C6 :                     ;      buflen--;
     596/     9C6 : (MACRO)             	decm R6,1
     597/     9C7 :                     ;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     598/     9C7 : (MACRO)             	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 11 - 6/19/2013 13:05:07


     599/     9CF : (MACRO)             	ldA2 R11,'O',R11,(16384); reg:addr
     600/     9D7 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
     601/     9E4 :                     ;      SPI_Write(realaddr,*buf);
     602/     9E4 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
     603/     9F0 : (MACRO)             	ld1 R13,'O',R7,0
     604/     9FA : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     605/     9FD : (MACRO)             	Ccall _SPI_Write
     606/     A00 :                     ;      offaddr++;
     607/     A00 : (MACRO)             	incm R0,1
     608/     A01 :                     ;      buf++;
     609/     A01 : (MACRO)             	incm R7,1
     610/     A02 :                     ;    }
     611/     A02 :                     L63:
     612/     A02 :                     ;    while(buflen) {
     613/     A02 : (MACRO)             	jnzU2 r6,L62; NE 0
     614/     A0A :                     ;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     615/     A0A : (MACRO)             	ldaD R12,1060; reg:acon
     616/     A10 : (MACRO)             	cpy2 RL10,R0
     617/     A14 : (MACRO)             	zext4 RL10; CVUI4 jan 16
     618/     A18 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     619/     A24 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     620/     A3A : (MACRO)             	shrI4I RL10,8
     621/     AAA : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     622/     AAE : (MACRO)             	cpy1 R13,R11
     623/     AB0 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     624/     AB3 : (MACRO)             	Ccall _SPI_Write
     625/     AB6 :                     ;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     626/     AB6 : (MACRO)             	ldaD R12,1061; reg:acon
     627/     ABC : (MACRO)             	alu2I R11,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     628/     AC4 : (MACRO)             	cpy1 R13,R11
     629/     AC6 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     630/     AC9 : (MACRO)             	Ccall _SPI_Write
     631/     ACC :                     ;    SPI_Write(S0_CR,CR_SEND);
     632/     ACC : (MACRO)             	ldaD R12,1025; reg:acon
     633/     AD2 : (MACRO)             	ldaD R13,32; reg:acon
     634/     AD8 : (MACRO)             	Ccall _SPI_Write
     635/     ADB :                     L65:
     636/     ADB :                     ;    while(SPI_Read(S0_CR));
     637/     ADB :                     L66:
     638/     ADB : (MACRO)             	ldaD R12,1025; reg:acon
     639/     AE1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     640/     AE4 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     641/     AE8 : (MACRO)             	jnzU1 r11,L65; NEI2(CVUI2(reg),con0)
     642/     AEC :                     ;    return 1;
     643/     AEC : (MACRO)             	ldaD R15,1; reg:acon
     644/     AF2 :                     L54:
     645/     AF2 : (MACRO)             	release 4; release room for outgoing arguments
     646/     AF6 : (MACRO)             	popr r7
     647/     AFA : (MACRO)             	popr r6
     648/     AFE : (MACRO)             	popr r1
     649/     B02 : (MACRO)             	popr r0
     650/     B06 : (MACRO)             	release 6; release room for local variables 
     651/     B0C : (MACRO)             	Cretn
     652/     B0D :                     
     653/     B0D :                     _report:
     654/     B0D : (MACRO)             	reserve 22
     655/     B17 : (MACRO)             	st2 r12,'O',sp,(24); flag1 
     656/     B24 :                     ;void report(char * where){
     657/     B24 :                     ;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
     658/     B24 : (MACRO)             	ld2z R12
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 12 - 6/19/2013 13:05:07


     659/     B28 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     660/     B2B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     661/     B2F : (MACRO)             	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
     662/     B3C : (MACRO)             	ldaD R12,1027; reg:acon
     663/     B42 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     664/     B45 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     665/     B49 : (MACRO)             	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
     666/     B56 : (MACRO)             	ldaD R12,1024; reg:acon
     667/     B5C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     668/     B5F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     669/     B63 : (MACRO)             	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
     670/     B70 : (MACRO)             	ldaD R12,1028; reg:acon
     671/     B76 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     672/     B79 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     673/     B7D : (MACRO)             	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
     674/     B8A : (MACRO)             	ldaD R12,1029; reg:acon
     675/     B90 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     676/     B93 : (MACRO)             	ldaD R12,L69; reg:acon
     677/     B99 : (MACRO)             	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
     678/     BA5 : (MACRO)             	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
     679/     BB1 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     680/     BB4 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     681/     BC1 : (MACRO)             	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
     682/     BCD : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     683/     BD0 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     684/     BDD : (MACRO)             	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
     685/     BE9 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     686/     BEC : (MACRO)             	st2 r10,'O',sp,(8); arg+f**
     687/     BF9 : (MACRO)             	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
     688/     C05 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     689/     C08 : (MACRO)             	st2 r10,'O',sp,(10); arg+f**
     690/     C15 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     691/     C19 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     692/     C1C : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     693/     C29 : (MACRO)             	Ccall _printf
     694/     C2C :                     ;}
     695/     C2C :                     L68:
     696/     C2C : (MACRO)             	release 22
     697/     C34 : (MACRO)             	Cretn
     698/     C35 :                     
     699/     C35 :                     L71:
     700/     C35 : 48                  	db 72
     701/     C36 : 54                  	db 84
     702/     C37 : 54                  	db 84
     703/     C38 : 50                  	db 80
     704/     C39 : 2F                  	db 47
     705/     C3A : 31                  	db 49
     706/     C3B : 2E                  	db 46
     707/     C3C : 30                  	db 48
     708/     C3D : 20                  	db 32
     709/     C3E : 32                  	db 50
     710/     C3F : 30                  	db 48
     711/     C40 : 30                  	db 48
     712/     C41 : 20                  	db 32
     713/     C42 : 4F                  	db 79
     714/     C43 : 4B                  	db 75
     715/     C44 : 0D                  	db 13
     716/     C45 : 0A                  	db 10
     717/     C46 : 0D                  	db 13
     718/     C47 : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 13 - 6/19/2013 13:05:07


     719/     C48 : 00                  	db 0
     720/     C49 :                     _sendack:
     721/     C49 : (MACRO)             	reserve 6
     722/     C4F :                     ;void sendack(){
     723/     C4F :                     ;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
     724/     C4F : (MACRO)             	ldaD R12,L71; reg:acon
     725/     C55 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     726/     C58 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     727/     C5C : (MACRO)             	ldaD R12,L71; reg:acon
     728/     C62 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     729/     C66 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     730/     C69 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     731/     C6D : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     732/     C7A :                     ;}
     733/     C7A :                     L70:
     734/     C7A : (MACRO)             	release 6
     735/     C80 : (MACRO)             	Cretn
     736/     C81 :                     
     737/     C81 :                     _send0s:
     738/     C81 : (MACRO)             	reserve 4
     739/     C85 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     740/     C92 :                     ;int send0s(unsigned char* what){
     741/     C92 :                     ;	return send0(what,strlen((char *)what));
     742/     C92 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     743/     C9E : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     744/     CA1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     745/     CA5 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     746/     CB1 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     747/     CB5 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     748/     CB8 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     749/     CBC :                     L72:
     750/     CBC : (MACRO)             	release 4
     751/     CC0 : (MACRO)             	Cretn
     752/     CC1 :                     
     753/     CC1 :                     L74:
     754/     CC1 : 48                  	db 72
     755/     CC2 : 54                  	db 84
     756/     CC3 : 54                  	db 84
     757/     CC4 : 50                  	db 80
     758/     CC5 : 2F                  	db 47
     759/     CC6 : 31                  	db 49
     760/     CC7 : 2E                  	db 46
     761/     CC8 : 30                  	db 48
     762/     CC9 : 20                  	db 32
     763/     CCA : 32                  	db 50
     764/     CCB : 30                  	db 48
     765/     CCC : 30                  	db 48
     766/     CCD : 20                  	db 32
     767/     CCE : 4F                  	db 79
     768/     CCF : 4B                  	db 75
     769/     CD0 : 0D                  	db 13
     770/     CD1 : 0A                  	db 10
     771/     CD2 : 3C                  	db 60
     772/     CD3 : 68                  	db 104
     773/     CD4 : 74                  	db 116
     774/     CD5 : 6D                  	db 109
     775/     CD6 : 6C                  	db 108
     776/     CD7 : 3E                  	db 62
     777/     CD8 : 3C                  	db 60
     778/     CD9 : 62                  	db 98
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 14 - 6/19/2013 13:05:07


     779/     CDA : 6F                  	db 111
     780/     CDB : 64                  	db 100
     781/     CDC : 79                  	db 121
     782/     CDD : 3E                  	db 62
     783/     CDE : 0D                  	db 13
     784/     CDF : 0A                  	db 10
     785/     CE0 : 3C                  	db 60
     786/     CE1 : 68                  	db 104
     787/     CE2 : 31                  	db 49
     788/     CE3 : 3E                  	db 62
     789/     CE4 : 3C                  	db 60
     790/     CE5 : 63                  	db 99
     791/     CE6 : 65                  	db 101
     792/     CE7 : 6E                  	db 110
     793/     CE8 : 74                  	db 116
     794/     CE9 : 65                  	db 101
     795/     CEA : 72                  	db 114
     796/     CEB : 3E                  	db 62
     797/     CEC : 4F                  	db 79
     798/     CED : 6C                  	db 108
     799/     CEE : 64                  	db 100
     800/     CEF : 75                  	db 117
     801/     CF0 : 69                  	db 105
     802/     CF1 : 6E                  	db 110
     803/     CF2 : 6F                  	db 111
     804/     CF3 : 20                  	db 32
     805/     CF4 : 31                  	db 49
     806/     CF5 : 38                  	db 56
     807/     CF6 : 30                  	db 48
     808/     CF7 : 32                  	db 50
     809/     CF8 : 20                  	db 32
     810/     CF9 : 57                  	db 87
     811/     CFA : 65                  	db 101
     812/     CFB : 62                  	db 98
     813/     CFC : 20                  	db 32
     814/     CFD : 53                  	db 83
     815/     CFE : 65                  	db 101
     816/     CFF : 72                  	db 114
     817/     D00 : 76                  	db 118
     818/     D01 : 65                  	db 101
     819/     D02 : 72                  	db 114
     820/     D03 : 3C                  	db 60
     821/     D04 : 2F                  	db 47
     822/     D05 : 63                  	db 99
     823/     D06 : 65                  	db 101
     824/     D07 : 6E                  	db 110
     825/     D08 : 74                  	db 116
     826/     D09 : 65                  	db 101
     827/     D0A : 72                  	db 114
     828/     D0B : 3E                  	db 62
     829/     D0C : 3C                  	db 60
     830/     D0D : 2F                  	db 47
     831/     D0E : 68                  	db 104
     832/     D0F : 31                  	db 49
     833/     D10 : 3E                  	db 62
     834/     D11 : 0D                  	db 13
     835/     D12 : 0A                  	db 10
     836/     D13 : 3C                  	db 60
     837/     D14 : 70                  	db 112
     838/     D15 : 3E                  	db 62
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 15 - 6/19/2013 13:05:07


     839/     D16 : 3C                  	db 60
     840/     D17 : 66                  	db 102
     841/     D18 : 6F                  	db 111
     842/     D19 : 72                  	db 114
     843/     D1A : 6D                  	db 109
     844/     D1B : 20                  	db 32
     845/     D1C : 6D                  	db 109
     846/     D1D : 65                  	db 101
     847/     D1E : 74                  	db 116
     848/     D1F : 68                  	db 104
     849/     D20 : 6F                  	db 111
     850/     D21 : 64                  	db 100
     851/     D22 : 3D                  	db 61
     852/     D23 : 22                  	db 34
     853/     D24 : 50                  	db 80
     854/     D25 : 4F                  	db 79
     855/     D26 : 53                  	db 83
     856/     D27 : 54                  	db 84
     857/     D28 : 22                  	db 34
     858/     D29 : 3E                  	db 62
     859/     D2A : 0D                  	db 13
     860/     D2B : 0A                  	db 10
     861/     D2C : 00                  	db 0
     862/     D2D :                     L75:
     863/     D2D : 3C                  	db 60
     864/     D2E : 70                  	db 112
     865/     D2F : 3E                  	db 62
     866/     D30 : 3C                  	db 60
     867/     D31 : 73                  	db 115
     868/     D32 : 74                  	db 116
     869/     D33 : 72                  	db 114
     870/     D34 : 6F                  	db 111
     871/     D35 : 6E                  	db 110
     872/     D36 : 67                  	db 103
     873/     D37 : 3E                  	db 62
     874/     D38 : 3C                  	db 60
     875/     D39 : 69                  	db 105
     876/     D3A : 6E                  	db 110
     877/     D3B : 70                  	db 112
     878/     D3C : 75                  	db 117
     879/     D3D : 74                  	db 116
     880/     D3E : 20                  	db 32
     881/     D3F : 74                  	db 116
     882/     D40 : 79                  	db 121
     883/     D41 : 70                  	db 112
     884/     D42 : 65                  	db 101
     885/     D43 : 3D                  	db 61
     886/     D44 : 22                  	db 34
     887/     D45 : 72                  	db 114
     888/     D46 : 61                  	db 97
     889/     D47 : 64                  	db 100
     890/     D48 : 69                  	db 105
     891/     D49 : 6F                  	db 111
     892/     D4A : 22                  	db 34
     893/     D4B : 20                  	db 32
     894/     D4C : 6E                  	db 110
     895/     D4D : 61                  	db 97
     896/     D4E : 6D                  	db 109
     897/     D4F : 65                  	db 101
     898/     D50 : 3D                  	db 61
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 16 - 6/19/2013 13:05:07


     899/     D51 : 22                  	db 34
     900/     D52 : 72                  	db 114
     901/     D53 : 64                  	db 100
     902/     D54 : 22                  	db 34
     903/     D55 : 20                  	db 32
     904/     D56 : 76                  	db 118
     905/     D57 : 61                  	db 97
     906/     D58 : 6C                  	db 108
     907/     D59 : 75                  	db 117
     908/     D5A : 65                  	db 101
     909/     D5B : 3D                  	db 61
     910/     D5C : 22                  	db 34
     911/     D5D : 30                  	db 48
     912/     D5E : 22                  	db 34
     913/     D5F : 20                  	db 32
     914/     D60 : 00                  	db 0
     915/     D61 :                     L76:
     916/     D61 : 3E                  	db 62
     917/     D62 : 4C                  	db 76
     918/     D63 : 45                  	db 69
     919/     D64 : 44                  	db 68
     920/     D65 : 20                  	db 32
     921/     D66 : 4F                  	db 79
     922/     D67 : 46                  	db 70
     923/     D68 : 46                  	db 70
     924/     D69 : 0D                  	db 13
     925/     D6A : 0A                  	db 10
     926/     D6B : 3C                  	db 60
     927/     D6C : 62                  	db 98
     928/     D6D : 72                  	db 114
     929/     D6E : 3E                  	db 62
     930/     D6F : 3C                  	db 60
     931/     D70 : 69                  	db 105
     932/     D71 : 6E                  	db 110
     933/     D72 : 70                  	db 112
     934/     D73 : 75                  	db 117
     935/     D74 : 74                  	db 116
     936/     D75 : 20                  	db 32
     937/     D76 : 74                  	db 116
     938/     D77 : 79                  	db 121
     939/     D78 : 70                  	db 112
     940/     D79 : 65                  	db 101
     941/     D7A : 3D                  	db 61
     942/     D7B : 22                  	db 34
     943/     D7C : 72                  	db 114
     944/     D7D : 61                  	db 97
     945/     D7E : 64                  	db 100
     946/     D7F : 69                  	db 105
     947/     D80 : 6F                  	db 111
     948/     D81 : 22                  	db 34
     949/     D82 : 20                  	db 32
     950/     D83 : 6E                  	db 110
     951/     D84 : 61                  	db 97
     952/     D85 : 6D                  	db 109
     953/     D86 : 65                  	db 101
     954/     D87 : 3D                  	db 61
     955/     D88 : 22                  	db 34
     956/     D89 : 72                  	db 114
     957/     D8A : 64                  	db 100
     958/     D8B : 22                  	db 34
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 17 - 6/19/2013 13:05:07


     959/     D8C : 20                  	db 32
     960/     D8D : 76                  	db 118
     961/     D8E : 61                  	db 97
     962/     D8F : 6C                  	db 108
     963/     D90 : 75                  	db 117
     964/     D91 : 65                  	db 101
     965/     D92 : 3D                  	db 61
     966/     D93 : 22                  	db 34
     967/     D94 : 31                  	db 49
     968/     D95 : 22                  	db 34
     969/     D96 : 20                  	db 32
     970/     D97 : 00                  	db 0
     971/     D98 :                     L77:
     972/     D98 : 3E                  	db 62
     973/     D99 : 4C                  	db 76
     974/     D9A : 45                  	db 69
     975/     D9B : 44                  	db 68
     976/     D9C : 20                  	db 32
     977/     D9D : 4F                  	db 79
     978/     D9E : 4E                  	db 78
     979/     D9F : 0D                  	db 13
     980/     DA0 : 0A                  	db 10
     981/     DA1 : 3C                  	db 60
     982/     DA2 : 2F                  	db 47
     983/     DA3 : 73                  	db 115
     984/     DA4 : 74                  	db 116
     985/     DA5 : 72                  	db 114
     986/     DA6 : 6F                  	db 111
     987/     DA7 : 6E                  	db 110
     988/     DA8 : 67                  	db 103
     989/     DA9 : 3E                  	db 62
     990/     DAA : 3C                  	db 60
     991/     DAB : 70                  	db 112
     992/     DAC : 3E                  	db 62
     993/     DAD : 0D                  	db 13
     994/     DAE : 0A                  	db 10
     995/     DAF : 3C                  	db 60
     996/     DB0 : 69                  	db 105
     997/     DB1 : 6E                  	db 110
     998/     DB2 : 70                  	db 112
     999/     DB3 : 75                  	db 117
    1000/     DB4 : 74                  	db 116
    1001/     DB5 : 20                  	db 32
    1002/     DB6 : 74                  	db 116
    1003/     DB7 : 79                  	db 121
    1004/     DB8 : 70                  	db 112
    1005/     DB9 : 65                  	db 101
    1006/     DBA : 3D                  	db 61
    1007/     DBB : 22                  	db 34
    1008/     DBC : 73                  	db 115
    1009/     DBD : 75                  	db 117
    1010/     DBE : 62                  	db 98
    1011/     DBF : 6D                  	db 109
    1012/     DC0 : 69                  	db 105
    1013/     DC1 : 74                  	db 116
    1014/     DC2 : 22                  	db 34
    1015/     DC3 : 3E                  	db 62
    1016/     DC4 : 0D                  	db 13
    1017/     DC5 : 0A                  	db 10
    1018/     DC6 : 3C                  	db 60
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 18 - 6/19/2013 13:05:07


    1019/     DC7 : 2F                  	db 47
    1020/     DC8 : 66                  	db 102
    1021/     DC9 : 6F                  	db 111
    1022/     DCA : 72                  	db 114
    1023/     DCB : 6D                  	db 109
    1024/     DCC : 3E                  	db 62
    1025/     DCD : 3C                  	db 60
    1026/     DCE : 2F                  	db 47
    1027/     DCF : 62                  	db 98
    1028/     DD0 : 6F                  	db 111
    1029/     DD1 : 64                  	db 100
    1030/     DD2 : 79                  	db 121
    1031/     DD3 : 3E                  	db 62
    1032/     DD4 : 3C                  	db 60
    1033/     DD5 : 2F                  	db 47
    1034/     DD6 : 68                  	db 104
    1035/     DD7 : 74                  	db 116
    1036/     DD8 : 6D                  	db 109
    1037/     DD9 : 6C                  	db 108
    1038/     DDA : 3E                  	db 62
    1039/     DDB : 0D                  	db 13
    1040/     DDC : 0A                  	db 10
    1041/     DDD : 00                  	db 0
    1042/     DDE :                     L78:
    1043/     DDE : 63                  	db 99
    1044/     DDF : 68                  	db 104
    1045/     DE0 : 65                  	db 101
    1046/     DE1 : 63                  	db 99
    1047/     DE2 : 6B                  	db 107
    1048/     DE3 : 65                  	db 101
    1049/     DE4 : 64                  	db 100
    1050/     DE5 : 00                  	db 0
    1051/     DE6 :                     L79:
    1052/     DE6 : 20                  	db 32
    1053/     DE7 : 00                  	db 0
    1054/     DE8 :                     _sendstuff:
    1055/     DE8 : (MACRO)             	pushr r7
    1056/     DED : (MACRO)             	reserve 4; save room for outgoing arguments
    1057/     DF1 :                     ;void sendstuff(){
    1058/     DF1 :                     ;	printf("sendstuff sees ledmode=%d\n",ledmode);
    1059/     DF1 : (MACRO)             	ldaD R12,L80; reg:acon
    1060/     DF7 : (MACRO)             	ld2 R13,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1061/     E01 : (MACRO)             	Ccall _printf
    1062/     E04 :                     ;	sendrc=send0s(hdr); 	// Now Send the HTTP Response first part
    1063/     E04 : (MACRO)             	ldaD R12,L74; reg:acon
    1064/     E0A : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1065/     E0D : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1066/     E11 :                     ;	sendrc=send0s(rpart1); 	// Now Send the radio button 1st part
    1067/     E11 : (MACRO)             	ldaD R12,L75; reg:acon
    1068/     E17 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1069/     E1A : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1070/     E1E :                     ;	if (ledmode==0) send0s(checked); else send0s(unchecked);
    1071/     E1E : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1072/     E28 : (MACRO)             	jnzU2 r11,L81; NE 0
    1073/     E30 : (MACRO)             	ldaD R12,L78; reg:acon
    1074/     E36 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1075/     E39 : C0 0E 45            	lbr L82
    1076/     E3C :                     L81:
    1077/     E3C : (MACRO)             	ldaD R12,L79; reg:acon
    1078/     E42 : (MACRO)             	Ccall _send0s; CALLI2(ar)
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 19 - 6/19/2013 13:05:07


    1079/     E45 :                     L82:
    1080/     E45 :                     ;	sendrc=send0s(rpart2); 	// Now Send the radio button 2nd part
    1081/     E45 : (MACRO)             	ldaD R12,L76; reg:acon
    1082/     E4B : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1083/     E4E : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1084/     E52 :                     ;	if (ledmode==1) send0s(checked); else send0s(unchecked);
    1085/     E52 : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1086/     E5C : (MACRO)             	jneU2I r11,1,L83; NE
    1087/     E68 : (MACRO)             	ldaD R12,L78; reg:acon
    1088/     E6E : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1089/     E71 : C0 0E 7D            	lbr L84
    1090/     E74 :                     L83:
    1091/     E74 : (MACRO)             	ldaD R12,L79; reg:acon
    1092/     E7A : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1093/     E7D :                     L84:
    1094/     E7D :                     ;	sendrc=send0s(trlr); 	// Now Send the rest of the page
    1095/     E7D : (MACRO)             	ldaD R12,L77; reg:acon
    1096/     E83 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1097/     E86 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1098/     E8A :                     ;}
    1099/     E8A :                     L73:
    1100/     E8A : (MACRO)             	release 4; release room for outgoing arguments
    1101/     E8E : (MACRO)             	popr r7
    1102/     E92 : (MACRO)             	Cretn
    1103/     E93 :                     
    1104/     E93 :                     _strindex:
    1105/     E93 : (MACRO)             	pushr r0
    1106/     E98 : (MACRO)             	pushr r1
    1107/     E9D : (MACRO)             	pushr r6
    1108/     EA2 : (MACRO)             	pushr r7
    1109/     EA7 : (MACRO)             	reserve 6; save room for outgoing arguments
    1110/     EAD : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1111/     EB1 : (MACRO)             	cpy2 r6,r13; function(2055) 1
    1112/     EB5 :                     ;{
    1113/     EB5 :                     ;  n=strlen(t);
    1114/     EB5 : (MACRO)             	cpy2 R12,R6 ;LOADP2(reg)
    1115/     EB9 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1116/     EBC : (MACRO)             	cpy2 R0,R15 ;LOADU2(reg)*
    1117/     EC0 :                     ;  for(i=0;*(s+i); i++) {
    1118/     EC0 : (MACRO)             	ld2z R1
    1119/     EC4 : C0 0E F7            	lbr L89
    1120/     EC7 :                     L86:
    1121/     EC7 :                     ;    if (strncmp(s+i,t,n) == 0)
    1122/     EC7 : (MACRO)             	alu2 R12,R1,R7,add,adc
    1123/     ED3 : (MACRO)             	cpy2 R13,R6 ;LOADP2(reg)
    1124/     ED7 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1125/     EE4 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1126/     EE7 : (MACRO)             	jnzU2 r15,L90; NE 0
    1127/     EEF :                     ;      return i;
    1128/     EEF : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)*
    1129/     EF3 : C0 0F 0F            	lbr L85
    1130/     EF6 :                     L90:
    1131/     EF6 :                     ;  }
    1132/     EF6 :                     L87:
    1133/     EF6 :                     ;  for(i=0;*(s+i); i++) {
    1134/     EF6 : (MACRO)             	incm R1,1
    1135/     EF7 :                     L89:
    1136/     EF7 : (MACRO)             	alu2 R11,R1,R7,add,adc
    1137/     F03 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1138/     F05 : (MACRO)             	jnzU1 r11,L86; NEI2(CVUI2(reg),con0)
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 20 - 6/19/2013 13:05:07


    1139/     F09 :                     ;  return -1;
    1140/     F09 : (MACRO)             	ldaD R15,-1; reg:acon
    1141/     F0F :                     L85:
    1142/     F0F : (MACRO)             	release 6; release room for outgoing arguments
    1143/     F15 : (MACRO)             	popr r7
    1144/     F19 : (MACRO)             	popr r6
    1145/     F1D : (MACRO)             	popr r1
    1146/     F21 : (MACRO)             	popr r0
    1147/     F25 : (MACRO)             	Cretn
    1148/     F26 :                     
    1149/     F26 :                     _analyzeinput:
    1150/     F26 : (MACRO)             	reserve 18
    1151/     F30 :                     ;void analyzeinput(){
    1152/     F30 :                     ;	int reqmode=3; //mode request zero=off, 1=on, else =no request
    1153/     F30 : (MACRO)             	ldaD R11,3; reg:acon
    1154/     F36 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNI2(addr,reg)*;
    1155/     F43 :                     ;	printf("input from %d.%d.%d.%d\n\n",SPI_Read(S0_DIPR + 0),SPI_Read(S0_DIPR + 1),SPI_Read(S0_DIPR + 2),SPI_Read(S0_DIPR + 3));
    1156/     F43 : (MACRO)             	ldaD R12,1036; reg:acon
    1157/     F49 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1158/     F4C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1159/     F50 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNI2(addr,reg)*;
    1160/     F5D : (MACRO)             	ldaD R12,1037; reg:acon
    1161/     F63 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1162/     F66 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1163/     F6A : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNI2(addr,reg)*;
    1164/     F77 : (MACRO)             	ldaD R12,1038; reg:acon
    1165/     F7D : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1166/     F80 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1167/     F84 : (MACRO)             	st2 R11,'O',sp,(-10+20); ASGNI2(addr,reg)*;
    1168/     F91 : (MACRO)             	ldaD R12,1039; reg:acon
    1169/     F97 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1170/     F9A : (MACRO)             	ldaD R12,L93; reg:acon
    1171/     FA0 : (MACRO)             	ld2 R10,'O',sp,(-6+20) ;reg:INDIRI2(addr)
    1172/     FAC : (MACRO)             	cpy1 R13,R10
    1173/     FAE : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1174/     FB1 : (MACRO)             	ld2 R10,'O',sp,(-8+20) ;reg:INDIRI2(addr)
    1175/     FBD : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1176/     FC0 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
    1177/     FCD : (MACRO)             	ld2 R10,'O',sp,(-10+20) ;reg:INDIRI2(addr)
    1178/     FD9 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1179/     FDC : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
    1180/     FE9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1181/     FED : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1182/     FF0 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
    1183/     FFD : (MACRO)             	Ccall _printf
    1184/    1000 :                     ;	printf("analyzing:\n%s\n",buf);
    1185/    1000 : (MACRO)             	ldaD R12,L94; reg:acon
    1186/    1006 : (MACRO)             	ldaD R13,_buf; reg:acon
    1187/    100C : (MACRO)             	Ccall _printf
    1188/    100F :                     ;  	if (strncmp((char *)buf,"POST /",6)==0)
    1189/    100F : (MACRO)             	ldaD R12,_buf; reg:acon
    1190/    1015 : (MACRO)             	ldaD R13,L97; reg:acon
    1191/    101B : (MACRO)             	ldaD R11,6; reg:acon
    1192/    1021 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1193/    102E : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1194/    1031 : (MACRO)             	jnzU2 r15,L95; NE 0
    1195/    1039 :                     ;  		reqtype=post;
    1196/    1039 : (MACRO)             	ldaD R11,1; reg:acon
    1197/    103F : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1198/    104A : C0 10 CD            	lbr L96
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 21 - 6/19/2013 13:05:07


    1199/    104D :                     L95:
    1200/    104D :                     ;	else if (strncmp((char *)buf,"GET /favicon",12)==0)
    1201/    104D : (MACRO)             	ldaD R12,_buf; reg:acon
    1202/    1053 : (MACRO)             	ldaD R13,L100; reg:acon
    1203/    1059 : (MACRO)             	ldaD R11,12; reg:acon
    1204/    105F : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1205/    106C : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1206/    106F : (MACRO)             	jnzU2 r15,L98; NE 0
    1207/    1077 :                     ;		reqtype=favicon;
    1208/    1077 : (MACRO)             	ldaD R11,2; reg:acon
    1209/    107D : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1210/    1088 : C0 10 CD            	lbr L99
    1211/    108B :                     L98:
    1212/    108B :                     ;	else if (strncmp((char *)buf,"GET /",5)>=0)
    1213/    108B : (MACRO)             	ldaD R12,_buf; reg:acon
    1214/    1091 : (MACRO)             	ldaD R13,L103; reg:acon
    1215/    1097 : (MACRO)             	ldaD R11,5; reg:acon
    1216/    109D : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1217/    10AA : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1218/    10AD : (MACRO)             	jcI2I r15,0,lbnf,L101  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1219/    10BE :                     ;		reqtype=get;
    1220/    10BE : (MACRO)             	ld2z R11
    1221/    10C2 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1222/    10CD :                     L101:
    1223/    10CD :                     L99:
    1224/    10CD :                     L96:
    1225/    10CD :                     ;	if (reqtype==post){
    1226/    10CD : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1227/    10D7 : (MACRO)             	jneU2I r11,1,L104; NE
    1228/    10E3 :                     ;	    printf("POST received\n");
    1229/    10E3 : (MACRO)             	ldaD R12,L106; reg:acon
    1230/    10E9 : (MACRO)             	Ccall _printf
    1231/    10EC :                     ;	  if (strindex((char *)buf,"rd=0") > 0)
    1232/    10EC : (MACRO)             	ldaD R12,_buf; reg:acon
    1233/    10F2 : (MACRO)             	ldaD R13,L109; reg:acon
    1234/    10F8 : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1235/    10FB : (MACRO)             	jnI2I r15,0,lbdf,L107 ;LEI2 0 15 L107; LE is flipped test & subtraction
    1236/    110C :                     ;		reqmode=0;
    1237/    110C : (MACRO)             	ld2z R11
    1238/    1110 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNI2(addr,reg)*;
    1239/    111D : C0 11 9F            	lbr L105
    1240/    1120 :                     L107:
    1241/    1120 :                     ;	  else if (strindex((char *)buf,"rd=1") > 0)
    1242/    1120 : (MACRO)             	ldaD R12,_buf; reg:acon
    1243/    1126 : (MACRO)             	ldaD R13,L112; reg:acon
    1244/    112C : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1245/    112F : (MACRO)             	jnI2I r15,0,lbdf,L105 ;LEI2 0 15 L105; LE is flipped test & subtraction
    1246/    1140 :                     ;		reqmode=1;
    1247/    1140 : (MACRO)             	ldaD R11,1; reg:acon
    1248/    1146 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNI2(addr,reg)*;
    1249/    1153 :                     ;	}
    1250/    1153 : C0 11 9F            	lbr L105
    1251/    1156 :                     L104:
    1252/    1156 :                     ;	else if (reqtype==get)
    1253/    1156 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1254/    1160 : (MACRO)             	jnzU2 r11,L113; NE 0
    1255/    1168 :                     ;		printf("GET received.\n");
    1256/    1168 : (MACRO)             	ldaD R12,L115; reg:acon
    1257/    116E : (MACRO)             	Ccall _printf
    1258/    1171 : C0 11 9F            	lbr L114
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 22 - 6/19/2013 13:05:07


    1259/    1174 :                     L113:
    1260/    1174 :                     ;	else if (reqtype==favicon)
    1261/    1174 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1262/    117E : (MACRO)             	jneU2I r11,2,L116; NE
    1263/    118A :                     ;		printf("favicon ignored\n");
    1264/    118A : (MACRO)             	ldaD R12,L118; reg:acon
    1265/    1190 : (MACRO)             	Ccall _printf
    1266/    1193 : C0 11 9F            	lbr L117
    1267/    1196 :                     L116:
    1268/    1196 :                     ;		printf("unknown input\n");
    1269/    1196 : (MACRO)             	ldaD R12,L119; reg:acon
    1270/    119C : (MACRO)             	Ccall _printf
    1271/    119F :                     L117:
    1272/    119F :                     L114:
    1273/    119F :                     L105:
    1274/    119F :                     ;	if (reqmode==0){
    1275/    119F : (MACRO)             	ld2 R11,'O',sp,(-4+20) ;reg:INDIRI2(addr)
    1276/    11AB : (MACRO)             	jnzU2 r11,L120; NE 0
    1277/    11B3 :                     ;		printf("setting led off\n");
    1278/    11B3 : (MACRO)             	ldaD R12,L122; reg:acon
    1279/    11B9 : (MACRO)             	Ccall _printf
    1280/    11BC :                     ;		ledmode=0;
    1281/    11BC : (MACRO)             	ld2z R11
    1282/    11C0 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1283/    11CB :                     ;		digitalWrite(0,LOW);
    1284/    11CB : (MACRO)             	ld2z R11
    1285/    11CF : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1286/    11D3 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1287/    11D7 : (MACRO)             	Ccall _digitalWrite
    1288/    11DA :                     ;	} else{
    1289/    11DA : C0 12 28            	lbr L121
    1290/    11DD :                     L120:
    1291/    11DD :                     ;		if (reqmode==1){
    1292/    11DD : (MACRO)             	ld2 R11,'O',sp,(-4+20) ;reg:INDIRI2(addr)
    1293/    11E9 : (MACRO)             	jneU2I r11,1,L123; NE
    1294/    11F5 :                     ;			printf("setting led ON\n");
    1295/    11F5 : (MACRO)             	ldaD R12,L125; reg:acon
    1296/    11FB : (MACRO)             	Ccall _printf
    1297/    11FE :                     ;			ledmode=1;
    1298/    11FE : (MACRO)             	ldaD R11,1; reg:acon
    1299/    1204 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1300/    120F :                     ;			digitalWrite(0,HIGH);
    1301/    120F : (MACRO)             	ld2z R12
    1302/    1213 : (MACRO)             	ldaD R13,1; reg:acon
    1303/    1219 : (MACRO)             	Ccall _digitalWrite
    1304/    121C :                     ;		}else{
    1305/    121C : C0 12 28            	lbr L124
    1306/    121F :                     L123:
    1307/    121F :                     ;			printf("No led action request\n");
    1308/    121F : (MACRO)             	ldaD R12,L126; reg:acon
    1309/    1225 : (MACRO)             	Ccall _printf
    1310/    1228 :                     ;		}
    1311/    1228 :                     L124:
    1312/    1228 :                     ;	}
    1313/    1228 :                     L121:
    1314/    1228 :                     ;}
    1315/    1228 :                     L92:
    1316/    1228 : (MACRO)             	release 18
    1317/    1230 : (MACRO)             	Cretn
    1318/    1231 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 23 - 6/19/2013 13:05:07


    1319/    1231 :                     _sendresponse:
    1320/    1231 : (MACRO)             	reserve 4
    1321/    1235 :                     ;void sendresponse(){
    1322/    1235 :                     ;	switch (reqtype){
    1323/    1235 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1324/    123F : (MACRO)             	jzU2 r11,L130; EQ 0
    1325/    1247 : (MACRO)             	jeqU2I r11,1,L130;EQI2(reg,con)
    1326/    1253 : (MACRO)             	jeqU2I r11,2,L132;EQI2(reg,con)
    1327/    125F : C0 12 7D            	lbr L128
    1328/    1262 :                     L130:
    1329/    1262 :                     ;			printf("sending form \n");
    1330/    1262 : (MACRO)             	ldaD R12,L131; reg:acon
    1331/    1268 : (MACRO)             	Ccall _printf
    1332/    126B :                     ;			sendstuff();
    1333/    126B : (MACRO)             	Ccall _sendstuff
    1334/    126E :                     ;			break;
    1335/    126E : C0 12 7D            	lbr L129
    1336/    1271 :                     L132:
    1337/    1271 :                     ;			printf("sending ack\n");
    1338/    1271 : (MACRO)             	ldaD R12,L133; reg:acon
    1339/    1277 : (MACRO)             	Ccall _printf
    1340/    127A :                     ;			sendack();
    1341/    127A : (MACRO)             	Ccall _sendack
    1342/    127D :                     ;			break;
    1343/    127D :                     L128:
    1344/    127D :                     L129:
    1345/    127D :                     ;}
    1346/    127D :                     L127:
    1347/    127D : (MACRO)             	release 4
    1348/    1281 : (MACRO)             	Cretn
    1349/    1282 :                     
    1350/    1282 :                     _handlesession:
    1351/    1282 : (MACRO)             	pushr r7
    1352/    1287 : (MACRO)             	reserve 4; save room for outgoing arguments
    1353/    128B :                     ;void handlesession(){	//handle a session once it's established
    1354/    128B :                     ;	rsize=recv_size();
    1355/    128B : (MACRO)             	Ccall _recv_size;CALLU2(ar)*
    1356/    128E : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1357/    1292 :                     ;	printf("rsz=%d\n",rsize);
    1358/    1292 : (MACRO)             	ldaD R12,L135; reg:acon
    1359/    1298 : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1360/    129C : (MACRO)             	Ccall _printf
    1361/    129F :                     ;	if (rsize>0){
    1362/    129F : (MACRO)             	jzU2 r7,L136; EQ 0
    1363/    12A7 :                     ;		if (recv0(buf,rsize)>0){
    1364/    12A7 : (MACRO)             	ldaD R12,_buf; reg:acon
    1365/    12AD : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1366/    12B1 : (MACRO)             	Ccall _recv0;CALLU2(ar)*
    1367/    12B4 : (MACRO)             	jzU2 r15,L138; EQ 0
    1368/    12BC :                     ;			analyzeinput();
    1369/    12BC : (MACRO)             	Ccall _analyzeinput
    1370/    12BF :                     ;			sendresponse();
    1371/    12BF : (MACRO)             	Ccall _sendresponse
    1372/    12C2 :                     ;			disconnect0();
    1373/    12C2 : (MACRO)             	Ccall _disconnect0
    1374/    12C5 :                     ;		}
    1375/    12C5 :                     L138:
    1376/    12C5 :                     ;	}
    1377/    12C5 :                     L136:
    1378/    12C5 :                     ;}
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 24 - 6/19/2013 13:05:07


    1379/    12C5 :                     L134:
    1380/    12C5 : (MACRO)             	release 4; release room for outgoing arguments
    1381/    12C9 : (MACRO)             	popr r7
    1382/    12CD : (MACRO)             	Cretn
    1383/    12CE :                     
    1384/    12CE :                     _server_loop:
    1385/    12CE : (MACRO)             	reserve 6
    1386/    12D4 :                     ;void server_loop(){
    1387/    12D4 :                     ;  	socketstatus=SPI_Read(S0_SR);
    1388/    12D4 : (MACRO)             	ldaD R12,1027; reg:acon
    1389/    12DA : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1390/    12DD : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1391/    12E1 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1392/    12E4 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
    1393/    12F1 :                     ;  	switch (socketstatus){
    1394/    12F1 : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1395/    12FD : (MACRO)             	ld2z R10
    1396/    1301 : (MACRO)             	jzU2 r11,L143; EQ 0
    1397/    1309 : (MACRO)             	jcI2 r11,r10,lbnf,L141; LT=lbnf i.e. subtract B from A and jump if borrow 
    1398/    131D :                     L149:
    1399/    131D : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1400/    1329 : (MACRO)             	jcI2I r11,23,lbnf,L141  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1401/    133A : (MACRO)             	jnI2I r11,29,lbnf,L141; GT reverse  the subtraction
    1402/    134B : (MACRO)             	shl2I R11,1
    1403/    1351 : (MACRO)             	ld2 R11,'O',R11,(L150-46);reg:  INDIRP2(addr)
    1404/    135D : (MACRO)             	jumpv r11; JUMPV(reg)
    1405/    1367 :                     L150:
    1406/    1367 : 13 84               	dw L145
    1407/    1369 : 13 93               	dw L147
    1408/    136B : 13 9F               	dw L141
    1409/    136D : 13 93               	dw L147
    1410/    136F : 13 93               	dw L147
    1411/    1371 : 13 93               	dw L147
    1412/    1373 : 13 93               	dw L147
    1413/    1375 :                     L143:
    1414/    1375 :                     ;	  	printf("SC\n");
    1415/    1375 : (MACRO)             	ldaD R12,L144; reg:acon
    1416/    137B : (MACRO)             	Ccall _printf
    1417/    137E :                     ;			socket0_init();	//initialize socket 0
    1418/    137E : (MACRO)             	Ccall _socket0_init
    1419/    1381 :                     ;	  		break;
    1420/    1381 : C0 13 9F            	lbr L142
    1421/    1384 :                     L145:
    1422/    1384 :                     ;	  	printf("SX\n");
    1423/    1384 : (MACRO)             	ldaD R12,L146; reg:acon
    1424/    138A : (MACRO)             	Ccall _printf
    1425/    138D :                     ;	  		handlesession();
    1426/    138D : (MACRO)             	Ccall _handlesession
    1427/    1390 :                     ;	  		break;
    1428/    1390 : C0 13 9F            	lbr L142
    1429/    1393 :                     L147:
    1430/    1393 :                     ;		  	printf("CS\n");
    1431/    1393 : (MACRO)             	ldaD R12,L148; reg:acon
    1432/    1399 : (MACRO)             	Ccall _printf
    1433/    139C :                     ;      		close0();
    1434/    139C : (MACRO)             	Ccall _close0
    1435/    139F :                     ;      		break;
    1436/    139F :                     L141:
    1437/    139F :                     L142:
    1438/    139F :                     ;}
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 25 - 6/19/2013 13:05:07


    1439/    139F :                     L140:
    1440/    139F : (MACRO)             	release 6
    1441/    13A5 : (MACRO)             	Cretn
    1442/    13A6 :                     
    1443/    13A6 :                     _main: ;copt is peeping you now!
    1444/    13A6 : (MACRO)             	reserve 12
    1445/    13B0 :                     ;void main(void){
    1446/    13B0 :                     ;	ledmode=1;
    1447/    13B0 : (MACRO)             	ldaD R11,1; reg:acon
    1448/    13B6 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1449/    13C1 :                     ;	digitalWrite(0,HIGH);
    1450/    13C1 : (MACRO)             	ld2z R12
    1451/    13C5 : (MACRO)             	ldaD R13,1; reg:acon
    1452/    13CB : (MACRO)             	Ccall _digitalWrite
    1453/    13CE :                     ;	delay(1000);
    1454/    13CE : (MACRO)             	ldaD R12,1000; reg:acon
    1455/    13D4 : (MACRO)             	Ccall _delay
    1456/    13D7 :                     ;	printf("\nOlduino Web Server v2.1\n");
    1457/    13D7 : (MACRO)             	ldaD R12,L153; reg:acon
    1458/    13DD : (MACRO)             	Ccall _printf
    1459/    13E0 :                     ;    W5100_Init(); //initialize the wiznet chip
    1460/    13E0 : (MACRO)             	Ccall _W5100_Init
    1461/    13E3 : C0 13 F2            	lbr L155
    1462/    13E6 :                     L154:
    1463/    13E6 :                     ;	while(1){  // Loop forever
    1464/    13E6 :                     ;		server_loop();
    1465/    13E6 : (MACRO)             	Ccall _server_loop
    1466/    13E9 :                     ;		delay(100);
    1467/    13E9 : (MACRO)             	ldaD R12,100; reg:acon
    1468/    13EF : (MACRO)             	Ccall _delay
    1469/    13F2 :                     ;	}
    1470/    13F2 :                     L155:
    1471/    13F2 :                     ;	while(1){  // Loop forever
    1472/    13F2 : C0 13 E6            	lbr L154
    1473/    13F5 :                     ;}
    1474/    13F5 :                     L152:
    1475/    13F5 : (MACRO)             	release 12
    1476/    13FD : (MACRO)             	Cretn
    1477/    13FE :                     
    1478/    13FE :                     _delay:
    1479/    13FE : (MACRO)             	pushr r6
    1480/    1403 : (MACRO)             	pushr r7
    1481/    1408 : (MACRO)             	reserve 4; save room for outgoing arguments
    1482/    140C : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1483/    1410 :                     ;void delay(unsigned int howlong){
    1484/    1410 :                     ;	for (i=1;i!=howlong;i++){
    1485/    1410 : (MACRO)             	ldaD R6,1; reg:acon
    1486/    1416 : C0 14 1D            	lbr L161
    1487/    1419 :                     L158:
    1488/    1419 :                     ;		oneMs();
    1489/    1419 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
    1490/    141C :                     ;	}
    1491/    141C :                     L159:
    1492/    141C :                     ;	for (i=1;i!=howlong;i++){
    1493/    141C : (MACRO)             	incm R6,1
    1494/    141D :                     L161:
    1495/    141D : (MACRO)             	jneU2 r6,r7,L158; NE
    1496/    142F :                     ;}
    1497/    142F :                     L157:
    1498/    142F : (MACRO)             	release 4; release room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 26 - 6/19/2013 13:05:07


    1499/    1433 : (MACRO)             	popr r7
    1500/    1437 : (MACRO)             	popr r6
    1501/    143B : (MACRO)             	Cretn
    1502/    143C :                     
    1503/    143C :                     _olduinoincluder:
    1504/    143C :                     ;void olduinoincluder(){
    1505/    143C :                     ;	asm("\tinclude olduino.inc\n");
    1506/    143C :                     	include olduino.inc
(1)    1/    143C :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    143C :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/    143C :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    143C :                     	align 64	;needed to make sure all on same page
(1)    5/    1440 :                     _digitalWrite:
(1)    6/    1440 : 8C                  	glo regArg1	;get the bit number
(1)    7/    1441 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/    1443 : AE                  	plo memaddr
(1)    9/    1444 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    1445 : BE                  	phi memaddr	
(1)   11/    1446 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    1447 : A8                  	plo rt1		;save it in a temp
(1)   13/    1448 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/    144E : EE                  	sex memaddr	;prepare to change it
(1)   15/    144F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    1450 : 32 57               	bz $$setbitoff
(1)   17/    1452 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    1452 : 88                  	glo rt1		;get the bit value back
(1)   19/    1453 : F1                  	or		;apply it
(1)   20/    1454 : 5E                  	str memaddr	;and save it
(1)   21/    1455 : 30 5C               	br $$outit	;go fnish up
(1)   22/    1457 :                     $$setbitoff:
(1)   23/    1457 : 88                  	glo rt1		;get the bit pattern
(1)   24/    1458 : FB FF               	xri 0xff	;reverse it
(1)   25/    145A : F2                  	and		;combine it with the existing pin value
(1)   26/    145B : 5E                  	str memaddr	;and save it
(1)   27/    145C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    145C :                     $$outit:
(1)   29/    145C : 64                  	out 4		;X was already set to memaddr
(1)   30/    145D : E2                  	sex sp		;reset X
(1)   31/    145E : (MACRO)             	cretn
(1)   32/    145F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    1467 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    1467 :                     	align 8	;protect jump boundary
(1)   35/    1468 :                     _digitalRead:
(1)   36/    1468 : F8 00               	ldi 0		;default is false
(1)   37/    146A : AF                  	plo R15
(1)   38/    146B : BF                  	phi R15
(1)   39/    146C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    146E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    146F : (MACRO)             +	cretn
(1)   42/    1470 :                     
    1507/    1470 :                     ;}
    1508/    1470 :                     L162:
    1509/    1470 : (MACRO)             	Cretn
    1510/    1471 :                     
    1511/    1471 :                     _strncmp:
    1512/    1471 : (MACRO)             	pushr r6
    1513/    1476 : (MACRO)             	pushr r7
    1514/    147B : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1515/    1487 :                     ;{
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 27 - 6/19/2013 13:05:07


    1516/    1487 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1517/    1487 : C0 15 0A            	lbr L168
    1518/    148A :                     L165:
    1519/    148A :                     ;	if (*s1 != *s2)
    1520/    148A : (MACRO)             	ld1 R11,'O',R12,0
    1521/    1494 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1522/    1497 : (MACRO)             	ld1 R10,'O',R13,0
    1523/    14A1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1524/    14A4 : (MACRO)             	jeqI2 r11,r10,L169; EQI2(reg,reg)
    1525/    14B6 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1526/    14B6 : (MACRO)             	ld1 R11,'O',R12,0
    1527/    14C0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1528/    14C3 : (MACRO)             	ld1 R10,'O',R13,0
    1529/    14CD : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1530/    14D0 : (MACRO)             	jcI2 r11,r10,lbdf,L172; GE is flipped test from LT
    1531/    14E4 : (MACRO)             	ldaD R6,-1; reg:acon
    1532/    14EA : C0 14 F3            	lbr L173
    1533/    14ED :                     L172:
    1534/    14ED : (MACRO)             	ldaD R6,1; reg:acon
    1535/    14F3 :                     L173:
    1536/    14F3 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1537/    14F7 : C0 15 16            	lbr L164
    1538/    14FA :                     L169:
    1539/    14FA :                     ;	else if (*s1 == '\0')
    1540/    14FA : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1541/    14FC : (MACRO)             	jnzU1 r11,L174; NEI2(CVUI2(reg),con0)
    1542/    1500 :                     ;	    return 0;
    1543/    1500 : (MACRO)             	ld2z R15
    1544/    1504 : C0 15 16            	lbr L164
    1545/    1507 :                     L174:
    1546/    1507 :                     L166:
    1547/    1507 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1548/    1507 : (MACRO)             	incm R12,1
    1549/    1508 : (MACRO)             	incm R13,1
    1550/    1509 : (MACRO)             	decm R7,1
    1551/    150A :                     L168:
    1552/    150A : (MACRO)             	jnzU2 r7,L165; NE 0
    1553/    1512 :                     ;    return 0;
    1554/    1512 : (MACRO)             	ld2z R15
    1555/    1516 :                     L164:
    1556/    1516 : (MACRO)             	popr r7
    1557/    151A : (MACRO)             	popr r6
    1558/    151E : (MACRO)             	Cretn
    1559/    151F :                     
    1560/    151F :                     _strcpy:
    1561/    151F : (MACRO)             	reserve 2
    1562/    1521 :                     ;{
    1563/    1521 :                     ;	char *save = to;
    1564/    1521 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    1565/    152E :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    1566/    152E : C0 15 33            	lbr L180
    1567/    1531 :                     L177:
    1568/    1531 :                     L178:
    1569/    1531 : (MACRO)             	incm R13,1
    1570/    1532 : (MACRO)             	incm R12,1
    1571/    1533 :                     L180:
    1572/    1533 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    1573/    1535 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    1574/    1537 : (MACRO)             	jnzU1 r11,L177; NEI2(CVUI2(reg),con0)
    1575/    153B :                     ;	return(save);
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 28 - 6/19/2013 13:05:07


    1576/    153B : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    1577/    1547 :                     L176:
    1578/    1547 : (MACRO)             	release 2
    1579/    1549 : (MACRO)             	Cretn
    1580/    154A :                     
    1581/    154A :                     _strlen:
    1582/    154A : (MACRO)             	pushr r7
    1583/    154F :                     ;{
    1584/    154F :                     ;	unsigned int slen = 0 ;
    1585/    154F : (MACRO)             	ld2z R7
    1586/    1553 : C0 15 58            	lbr L183
    1587/    1556 :                     L182:
    1588/    1556 :                     ;	while (*str != 0) {
    1589/    1556 :                     ;      slen++ ;
    1590/    1556 : (MACRO)             	incm R7,1
    1591/    1557 :                     ;      str++ ;
    1592/    1557 : (MACRO)             	incm R12,1
    1593/    1558 :                     ;   }
    1594/    1558 :                     L183:
    1595/    1558 :                     ;	while (*str != 0) {
    1596/    1558 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1597/    155A : (MACRO)             	jnzU1 r11,L182; NEI2(CVUI2(reg),con0)
    1598/    155E :                     ;   return slen;
    1599/    155E : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1600/    1562 :                     L181:
    1601/    1562 : (MACRO)             	popr r7
    1602/    1566 : (MACRO)             	Cretn
    1603/    1567 :                     
    1604/    1567 :                     _printstr:
    1605/    1567 : (MACRO)             	pushr r7
    1606/    156C : (MACRO)             	reserve 4; save room for outgoing arguments
    1607/    1570 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1608/    1574 :                     ;void printstr(char *ptr){
    1609/    1574 : C0 15 92            	lbr L187
    1610/    1577 :                     L186:
    1611/    1577 :                     ;    while(*ptr) out(5,*ptr++);
    1612/    1577 : (MACRO)             	ldaD R12,5; reg:acon
    1613/    157D : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) opt1
    1614/    1581 : (MACRO)             	incm R7,1
    1615/    1582 : (MACRO)             	ld1 R13,'O',R11,0
    1616/    158C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1617/    158F : (MACRO)             	Ccall _out; CALLI2(ar)
    1618/    1592 :                     L187:
    1619/    1592 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1620/    1594 : (MACRO)             	jnzU1 r11,L186; NEI2(CVUI2(reg),con0)
    1621/    1598 :                     ;}
    1622/    1598 :                     L185:
    1623/    1598 : (MACRO)             	release 4; release room for outgoing arguments
    1624/    159C : (MACRO)             	popr r7
    1625/    15A0 : (MACRO)             	Cretn
    1626/    15A1 :                     
    1627/    15A1 :                     	align 4
    1628/    15A4 :                     _round_nums:
    1629/    15A4 : 3F 00 00 00         	dd 0x3f000000
    1630/    15A8 : 3D 4C CC CD         	dd 0x3d4ccccd
    1631/    15AC : 3B A3 D7 0A         	dd 0x3ba3d70a
    1632/    15B0 : 3A 03 12 6F         	dd 0x3a03126f
    1633/    15B4 : 38 51 B7 17         	dd 0x3851b717
    1634/    15B8 : 36 A7 C5 AC         	dd 0x36a7c5ac
    1635/    15BC : 35 06 37 BD         	dd 0x350637bd
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 29 - 6/19/2013 13:05:07


    1636/    15C0 : 33 56 BF 95         	dd 0x3356bf95
    1637/    15C4 :                     	align 4
    1638/    15C4 :                     _mult_nums:
    1639/    15C4 : 3F 80 00 00         	dd 0x3f800000
    1640/    15C8 : 41 20 00 00         	dd 0x41200000
    1641/    15CC : 42 C8 00 00         	dd 0x42c80000
    1642/    15D0 : 44 7A 00 00         	dd 0x447a0000
    1643/    15D4 : 46 1C 40 00         	dd 0x461c4000
    1644/    15D8 : 47 C3 50 00         	dd 0x47c35000
    1645/    15DC : 49 74 24 00         	dd 0x49742400
    1646/    15E0 : 4B 18 96 80         	dd 0x4b189680
    1647/    15E4 :                     _ftoa:
    1648/    15E4 : (MACRO)             	reserve 62; save room for local variables
    1649/    15EE : (MACRO)             	pushr r0
    1650/    15F3 : (MACRO)             	pushr r1
    1651/    15F8 : (MACRO)             	pushr r6
    1652/    15FD : (MACRO)             	pushr r7
    1653/    1602 : (MACRO)             	reserve 8; save room for outgoing arguments
    1654/    160A : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
    1655/    1612 : (MACRO)             	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
    1656/    161E :                     ;{
    1657/    161E :                     ;   char *output = outbfr ;
    1658/    161E : (MACRO)             	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
    1659/    162A :                     ;   if (flt < 0.0) {
    1660/    162A : (MACRO)             	ld4 RL10,'D',(L192),0;INDIRF4(addr)
    1661/    1638 : (MACRO)             	jcF4 RL6,RL10,lbdf,L190;GEF4(reg,reg) - reverse test
    1662/    167D :                     ;      *output++ = '-' ;
    1663/    167D : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1664/    1681 : (MACRO)             	incm R0,1
    1665/    1682 : (MACRO)             	ldaD R10,45; reg:acon
    1666/    1688 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1667/    168A :                     ;      flt *= -1.0 ;
    1668/    168A : (MACRO)             	ld4 RL8,'D',(L193),0;INDIRF4(addr)
    1669/    1698 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
    1670/    16A0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1671/    16A3 : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1672/    16AB :                     ;   } else {
    1673/    16AB : C0 16 BE            	lbr L191
    1674/    16AE :                     L190:
    1675/    16AE :                     ;      if (use_leading_plus) {
    1676/    16AE : C0 16 BE            	lbr L194
    1677/    16B1 :                     ;         *output++ = '+' ;
    1678/    16B1 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1679/    16B5 : (MACRO)             	incm R0,1
    1680/    16B6 : (MACRO)             	ldaD R10,43; reg:acon
    1681/    16BC : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1682/    16BE :                     ;      }
    1683/    16BE :                     L194:
    1684/    16BE :                     ;   }
    1685/    16BE :                     L191:
    1686/    16BE :                     ;   if (dec_digits < 8) {
    1687/    16BE : (MACRO)             	jcI2I r1,8,lbdf,L196; GE is flipped test from LT
    1688/    16CF :                     ;      flt += round_nums[dec_digits] ;
    1689/    16CF : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1690/    16D7 : (MACRO)             	cpy2 R11,R1
    1691/    16DB : (MACRO)             	shl2I R11,2
    1692/    16E7 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
    1693/    16F7 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
    1694/    16FA : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1695/    1702 :                     ;   }
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 30 - 6/19/2013 13:05:07


    1696/    1702 :                     L196:
    1697/    1702 :                     ;	mult=mult_nums[dec_digits];
    1698/    1702 : (MACRO)             	cpy2 R11,R1
    1699/    1706 : (MACRO)             	shl2I R11,2
    1700/    1712 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
    1701/    1722 : (MACRO)             	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
    1702/    1735 :                     ;   wholeNum = flt;
    1703/    1735 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1704/    173D : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1705/    1740 : (MACRO)             	st4 RL8,'O',sp,(-8+80)
    1706/    1753 :                     ;   decimalNum = ((flt - wholeNum) * mult);
    1707/    1753 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1708/    175B : (MACRO)             	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
    1709/    176E : (MACRO)             	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1710/    177E : (MACRO)             	Ccall cvif4; emit2
    1711/    1781 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1712/    1789 : (MACRO)             	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
    1713/    1799 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
    1714/    179C : (MACRO)             	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
    1715/    17AC : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1716/    17AF : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1717/    17B2 : (MACRO)             	st4 RL8,'O',sp,(-16+80)
    1718/    17C5 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
    1719/    17C5 : (MACRO)             	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1720/    17D5 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1721/    17E2 : (MACRO)             	ldaD R11,1; reg:acon
    1722/    17E8 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1723/    17F5 : (MACRO)             	Ccall _dubdabx
    1724/    17F8 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1725/    17FC : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1726/    1800 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1727/    1804 : (MACRO)             	Ccall _strcpy
    1728/    1807 :                     ;   output+=strlen(output);
    1729/    1807 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1730/    180B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1731/    180E : (MACRO)             	alu2 R0,R15,R0,add,adc
    1732/    181A :                     ;   if (dec_digits > 0) {
    1733/    181A : (MACRO)             	jzU2 r1,L198; EQ 0
    1734/    1822 :                     ;		*output++ = '.' ;
    1735/    1822 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1736/    1826 : (MACRO)             	incm R0,1
    1737/    1827 : (MACRO)             	ldaD R10,46; reg:acon
    1738/    182D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1739/    182F :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
    1740/    182F : (MACRO)             	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
    1741/    183F : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1742/    184C : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)*
    1743/    1850 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1744/    185D : (MACRO)             	Ccall _dubdabx
    1745/    1860 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1746/    1864 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1747/    1868 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1748/    186C : (MACRO)             	Ccall _strcpy
    1749/    186F :                     ;	}
    1750/    186F :                     L198:
    1751/    186F :                     ;   return outbfr;
    1752/    186F : (MACRO)             	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
    1753/    187B :                     L189:
    1754/    187B : (MACRO)             	release 8; release room for outgoing arguments
    1755/    1883 : (MACRO)             	popr r7
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 31 - 6/19/2013 13:05:07


    1756/    1887 : (MACRO)             	popr r6
    1757/    188B : (MACRO)             	popr r1
    1758/    188F : (MACRO)             	popr r0
    1759/    1893 : (MACRO)             	release 62; release room for local variables 
    1760/    189B : (MACRO)             	Cretn
    1761/    189C :                     
    1762/    189C :                     _itoa:
    1763/    189C : (MACRO)             	reserve 2; save room for local variables
    1764/    189E : (MACRO)             	pushr r0
    1765/    18A3 : (MACRO)             	pushr r1
    1766/    18A8 : (MACRO)             	pushr r6
    1767/    18AD : (MACRO)             	pushr r7
    1768/    18B2 : (MACRO)             	reserve 4; save room for outgoing arguments
    1769/    18B6 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1770/    18C3 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    1771/    18D0 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1772/    18D0 :                     ;	unsigned int flag=0;
    1773/    18D0 : (MACRO)             	ld2z R0
    1774/    18D4 :                     ;	char * bptr; bptr=buffer;
    1775/    18D4 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1776/    18E0 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1777/    18ED :                     ;	if (s<0){
    1778/    18ED : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1779/    18F9 : (MACRO)             	jcI2I r11,0,lbdf,L201; GE is flipped test from LT
    1780/    190A :                     ;		*bptr='-';bptr++;
    1781/    190A : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1782/    1916 : (MACRO)             	ldaD R10,45; reg:acon
    1783/    191C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1784/    191E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1785/    192A : (MACRO)             	incm R11,1
    1786/    192B : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1787/    1938 :                     ;		n=-s;
    1788/    1938 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1789/    1944 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1790/    194D : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1791/    1951 :                     ;	} else{
    1792/    1951 : C0 19 64            	lbr L202
    1793/    1954 :                     L201:
    1794/    1954 :                     ;		n=s;
    1795/    1954 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1796/    1960 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1797/    1964 :                     ;	}
    1798/    1964 :                     L202:
    1799/    1964 :                     ;	k=10000;
    1800/    1964 : (MACRO)             	ldaD R7,10000; reg:acon
    1801/    196A : C0 19 F1            	lbr L204
    1802/    196D :                     L203:
    1803/    196D :                     ;	while(k>0){
    1804/    196D :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1805/    196D : (MACRO)             	ld2z R1
    1806/    1971 : C0 19 81            	lbr L209
    1807/    1974 :                     L206:
    1808/    1974 :                     L207:
    1809/    1974 : (MACRO)             	incm R1,1
    1810/    1975 : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1811/    1981 :                     L209:
    1812/    1981 : (MACRO)             	jcU2 r6,r7,lbdf,L206 ;LE is flipped test & operands
    1813/    198E :                     ;		if (flag || r>0||k==1){
    1814/    198E : (MACRO)             	jnzU2 r0,L213; NE 0
    1815/    1996 : (MACRO)             	jnzU2 r1,L213; NE 0
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 32 - 6/19/2013 13:05:07


    1816/    199E : (MACRO)             	jneU2I r7,1,L210; NE
    1817/    19AA :                     L213:
    1818/    19AA :                     ;			*bptr=('0'+r);bptr++;
    1819/    19AA : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1820/    19B6 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    1821/    19BE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1822/    19C0 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1823/    19CC : (MACRO)             	incm R11,1
    1824/    19CD : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1825/    19DA :                     ;			flag='y';
    1826/    19DA : (MACRO)             	ldaD R0,121; reg:acon
    1827/    19E0 :                     ;		}
    1828/    19E0 :                     L210:
    1829/    19E0 :                     ;		k=k/10;
    1830/    19E0 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1831/    19E4 : (MACRO)             	ldaD R13,10; reg:acon
    1832/    19EA : (MACRO)             	Ccall _divu2
    1833/    19ED : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1834/    19F1 :                     ;	}
    1835/    19F1 :                     L204:
    1836/    19F1 :                     ;	while(k>0){
    1837/    19F1 : (MACRO)             	jnzU2 r7,L203; NE 0
    1838/    19F9 :                     ;	*bptr='\0';
    1839/    19F9 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1840/    1A05 : (MACRO)             	ldaD R10,0; reg:acon
    1841/    1A0B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1842/    1A0D :                     ;	return buffer;
    1843/    1A0D : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1844/    1A19 :                     L200:
    1845/    1A19 : (MACRO)             	release 4; release room for outgoing arguments
    1846/    1A1D : (MACRO)             	popr r7
    1847/    1A21 : (MACRO)             	popr r6
    1848/    1A25 : (MACRO)             	popr r1
    1849/    1A29 : (MACRO)             	popr r0
    1850/    1A2D : (MACRO)             	release 2; release room for local variables 
    1851/    1A2F : (MACRO)             	Cretn
    1852/    1A30 :                     
    1853/    1A30 :                     _ltoa:
    1854/    1A30 : (MACRO)             	pushr r1
    1855/    1A35 : (MACRO)             	pushr r6
    1856/    1A3A : (MACRO)             	pushr r7
    1857/    1A3F : (MACRO)             	reserve 8; save room for outgoing arguments
    1858/    1A47 : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1859/    1A4F :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1860/    1A4F :                     ;	char* bptr=buffer;
    1861/    1A4F : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
    1862/    1A5B :                     ;	if (s<0){
    1863/    1A5B : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1864/    1A67 : (MACRO)             	jcI4 RL6,RL10,lbdf,L215; GE is flipped test from LT
    1865/    1A83 :                     ;		*bptr++='-';
    1866/    1A83 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1867/    1A87 : (MACRO)             	incm R1,1
    1868/    1A88 : (MACRO)             	ldaD R10,45; reg:acon
    1869/    1A8E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1870/    1A90 :                     ;		s=-s;
    1871/    1A90 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1872/    1AB0 :                     ;	}
    1873/    1AB0 :                     L215:
    1874/    1AB0 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1875/    1AB0 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 33 - 6/19/2013 13:05:07


    1876/    1AB8 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1877/    1AC5 : (MACRO)             	ldaD R11,1; reg:acon
    1878/    1ACB : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1879/    1AD8 : (MACRO)             	Ccall _dubdabx
    1880/    1ADB : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1881/    1ADF : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
    1882/    1AE3 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1883/    1AE7 : (MACRO)             	Ccall _strcpy
    1884/    1AEA :                     ;	return buffer;
    1885/    1AEA : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    1886/    1AF6 :                     L214:
    1887/    1AF6 : (MACRO)             	release 8; release room for outgoing arguments
    1888/    1AFE : (MACRO)             	popr r7
    1889/    1B02 : (MACRO)             	popr r6
    1890/    1B06 : (MACRO)             	popr r1
    1891/    1B0A : (MACRO)             	Cretn
    1892/    1B0B :                     
    1893/    1B0B :                     _printint:
    1894/    1B0B : (MACRO)             	reserve 12
    1895/    1B15 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1896/    1B22 :                     ;void printint(int s){ //print an integer
    1897/    1B22 :                     ;	itoa(s,buffer);
    1898/    1B22 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1899/    1B2E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1900/    1B36 : (MACRO)             	Ccall _itoa
    1901/    1B39 :                     ;	printstr(buffer);
    1902/    1B39 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1903/    1B41 : (MACRO)             	Ccall _printstr
    1904/    1B44 :                     ;}
    1905/    1B44 :                     L217:
    1906/    1B44 : (MACRO)             	release 12
    1907/    1B4C : (MACRO)             	Cretn
    1908/    1B4D :                     
    1909/    1B4D :                     _printlint:
    1910/    1B4D : (MACRO)             	reserve 18
    1911/    1B57 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1912/    1B64 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1913/    1B71 :                     ;void printlint(long s){ //print a long integer
    1914/    1B71 :                     ;	printstr(ltoa(s,buffer));
    1915/    1B71 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    1916/    1B81 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1917/    1B89 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1918/    1B96 : (MACRO)             	Ccall _ltoa
    1919/    1B99 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1920/    1B9D : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1921/    1BA1 : (MACRO)             	Ccall _printstr
    1922/    1BA4 :                     ;}
    1923/    1BA4 :                     L218:
    1924/    1BA4 : (MACRO)             	release 18
    1925/    1BAC : (MACRO)             	Cretn
    1926/    1BAD :                     
    1927/    1BAD :                     _printflt:
    1928/    1BAD : (MACRO)             	reserve 28
    1929/    1BB7 : (MACRO)             	st2 r12,'O',sp,(30); flag1 
    1930/    1BC4 : (MACRO)             	st2 r13,'O',sp,(32); flag1 
    1931/    1BD1 :                     ;void printflt(float s){ //print a float
    1932/    1BD1 :                     ;	printstr(ftoa(s,buffer,3));
    1933/    1BD1 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
    1934/    1BE1 : (MACRO)             	ldA2 R11,'O',sp,(-22+30); reg:addr
    1935/    1BE9 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 34 - 6/19/2013 13:05:07


    1936/    1BF6 : (MACRO)             	ldaD R11,3; reg:acon
    1937/    1BFC : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1938/    1C09 : (MACRO)             	Ccall _ftoa
    1939/    1C0C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1940/    1C10 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1941/    1C14 : (MACRO)             	Ccall _printstr
    1942/    1C17 :                     ;}
    1943/    1C17 :                     L219:
    1944/    1C17 : (MACRO)             	release 28
    1945/    1C1F : (MACRO)             	Cretn
    1946/    1C20 :                     
    1947/    1C20 :                     _putxn:
    1948/    1C20 : (MACRO)             	reserve 4
    1949/    1C24 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1950/    1C31 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1951/    1C3D : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1952/    1C47 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1953/    1C47 :                     ;	if (x<10){
    1954/    1C47 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1955/    1C51 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1956/    1C54 : (MACRO)             	jcI2I r11,10,lbdf,L221; GE is flipped test from LT
    1957/    1C65 :                     ;		putc(x+'0');
    1958/    1C65 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1959/    1C6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1960/    1C72 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1961/    1C7A : (MACRO)             	cpy1 R12,R11
    1962/    1C7C : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1963/    1C7F : (MACRO)             	Ccall _putc
    1964/    1C82 :                     ;	} else {
    1965/    1C82 : C0 1C AA            	lbr L222
    1966/    1C85 :                     L221:
    1967/    1C85 :                     ;		putc(x+'A'-10);
    1968/    1C85 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1969/    1C8F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1970/    1C92 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1971/    1C9A : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1972/    1CA2 : (MACRO)             	cpy1 R12,R11
    1973/    1CA4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1974/    1CA7 : (MACRO)             	Ccall _putc
    1975/    1CAA :                     ;	}
    1976/    1CAA :                     L222:
    1977/    1CAA :                     ;}
    1978/    1CAA :                     L220:
    1979/    1CAA : (MACRO)             	release 4
    1980/    1CAE : (MACRO)             	Cretn
    1981/    1CAF :                     
    1982/    1CAF :                     _putx:
    1983/    1CAF : (MACRO)             	reserve 4
    1984/    1CB3 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1985/    1CC0 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1986/    1CCC : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1987/    1CD6 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1988/    1CD6 :                     ;	putxn(x>>4);
    1989/    1CD6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1990/    1CE0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1991/    1CE3 : (MACRO)             	shrI2I R11,4
    1992/    1D03 : (MACRO)             	cpy1 R12,R11
    1993/    1D05 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1994/    1D08 : (MACRO)             	Ccall _putxn
    1995/    1D0B :                     ;	putxn(x & 0x0F);
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 35 - 6/19/2013 13:05:07


    1996/    1D0B : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1997/    1D15 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1998/    1D18 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1999/    1D20 :                     	;removed ?	cpy2 R11,R11
    2000/    1D20 : (MACRO)             	cpy1 R12,R11
    2001/    1D22 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2002/    1D25 : (MACRO)             	Ccall _putxn
    2003/    1D28 :                     ;}
    2004/    1D28 :                     L223:
    2005/    1D28 : (MACRO)             	release 4
    2006/    1D2C : (MACRO)             	Cretn
    2007/    1D2D :                     
    2008/    1D2D :                     _printf:
    2009/    1D2D : (MACRO)             	reserve 2; save room for local variables
    2010/    1D2F : (MACRO)             	pushr r0
    2011/    1D34 : (MACRO)             	pushr r1
    2012/    1D39 : (MACRO)             	pushr r6
    2013/    1D3E : (MACRO)             	pushr r7
    2014/    1D43 : (MACRO)             	reserve 4; save room for outgoing arguments
    2015/    1D47 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2016/    1D54 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    2017/    1D61 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    2018/    1D61 :                     ;	int argslot=0;	//used to align longs
    2019/    1D61 : (MACRO)             	ld2z R1
    2020/    1D65 :                     ;	int * this=(int *)&ptr;
    2021/    1D65 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
    2022/    1D6D :                     ;	this++; argslot++; //advance argument pointer and slot #
    2023/    1D6D : (MACRO)             	incm R6,2
    2024/    1D6F : (MACRO)             	incm R1,1
    2025/    1D70 : C0 20 74            	lbr L226
    2026/    1D73 :                     L225:
    2027/    1D73 :                     ;    while(*ptr) {
    2028/    1D73 :                     ;		c=*ptr++;
    2029/    1D73 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2030/    1D7F : (MACRO)             	cpy2 R10,R11
    2031/    1D83 : (MACRO)             	incm R10,1
    2032/    1D84 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2033/    1D91 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2034/    1D93 :                     ;		if (c!='%'){
    2035/    1D93 : (MACRO)             	cpy1 R11,R7
    2036/    1D95 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2037/    1D98 : (MACRO)             	jeqU2I r11,37,L228;EQI2(reg,con)
    2038/    1DA4 :                     ;			putc(c);
    2039/    1DA4 : (MACRO)             	cpy1 R12,R7
    2040/    1DA6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2041/    1DA9 : (MACRO)             	Ccall _putc
    2042/    1DAC :                     ;		} else{
    2043/    1DAC : C0 20 74            	lbr L229
    2044/    1DAF :                     L228:
    2045/    1DAF :                     ;			c=*ptr++;
    2046/    1DAF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2047/    1DBB : (MACRO)             	cpy2 R10,R11
    2048/    1DBF : (MACRO)             	incm R10,1
    2049/    1DC0 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2050/    1DCD : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2051/    1DCF :                     ;			switch (c){
    2052/    1DCF : (MACRO)             	cpy1 R0,R7
    2053/    1DD1 : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2054/    1DD4 : (MACRO)             	jcI2I r0,99,lbnf,L249  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    2055/    1DE5 : (MACRO)             	jnI2I r0,108,lbnf,L250; GT reverse  the subtraction
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 36 - 6/19/2013 13:05:07


    2056/    1DF6 : (MACRO)             	cpy2 R11,R0
    2057/    1DFA : (MACRO)             	shl2I R11,1
    2058/    1E00 : (MACRO)             	ld2 R11,'O',R11,(L251-198);reg:  INDIRP2(addr)
    2059/    1E0C : (MACRO)             	jumpv r11; JUMPV(reg)
    2060/    1E16 :                     L251:
    2061/    1E16 : 1E AA               	dw L235
    2062/    1E18 : 1E 74               	dw L233
    2063/    1E1A : 20 63               	dw L230
    2064/    1E1C : 20 13               	dw L244
    2065/    1E1E : 20 63               	dw L230
    2066/    1E20 : 20 63               	dw L230
    2067/    1E22 : 1E 74               	dw L233
    2068/    1E24 : 20 63               	dw L230
    2069/    1E26 : 20 63               	dw L230
    2070/    1E28 : 1F 07               	dw L237
    2071/    1E2A :                     L249:
    2072/    1E2A : (MACRO)             	jeqU2I r0,88,L236;EQI2(reg,con)
    2073/    1E36 : C0 20 63            	lbr L230
    2074/    1E39 :                     L250:
    2075/    1E39 : (MACRO)             	ldaD R11,115; reg:acon
    2076/    1E3F : (MACRO)             	jeqI2 r0,r11,L234; EQI2(reg,reg)
    2077/    1E51 : (MACRO)             	jcI2 r0,r11,lbnf,L230; LT=lbnf i.e. subtract B from A and jump if borrow 
    2078/    1E65 :                     L253:
    2079/    1E65 : (MACRO)             	jeqU2I r0,120,L236;EQI2(reg,con)
    2080/    1E71 : C0 20 63            	lbr L230
    2081/    1E74 :                     L233:
    2082/    1E74 :                     ;					printint(*this++);
    2083/    1E74 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2084/    1E78 : (MACRO)             	incm R6,2
    2085/    1E7A : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    2086/    1E86 : (MACRO)             	Ccall _printint
    2087/    1E89 :                     ;					argslot+=1; //next argument slot
    2088/    1E89 : (MACRO)             	incm R1,1
    2089/    1E8A :                     ;					break;
    2090/    1E8A : C0 20 74            	lbr L231
    2091/    1E8D :                     L234:
    2092/    1E8D :                     ;					printstr((char*) *this++);
    2093/    1E8D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2094/    1E91 : (MACRO)             	incm R6,2
    2095/    1E93 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2096/    1E9F : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2097/    1EA3 : (MACRO)             	Ccall _printstr
    2098/    1EA6 :                     ;					argslot+=1; //next argument slot
    2099/    1EA6 : (MACRO)             	incm R1,1
    2100/    1EA7 :                     ;					break;
    2101/    1EA7 : C0 20 74            	lbr L231
    2102/    1EAA :                     L235:
    2103/    1EAA :                     ;					putc((unsigned int) *this++);
    2104/    1EAA : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2105/    1EAE : (MACRO)             	incm R6,2
    2106/    1EB0 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2107/    1EBC : (MACRO)             	cpy1 R12,R11
    2108/    1EBE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2109/    1EC1 : (MACRO)             	Ccall _putc
    2110/    1EC4 :                     ;					argslot+=1; //next argument slot
    2111/    1EC4 : (MACRO)             	incm R1,1
    2112/    1EC5 :                     ;					break;
    2113/    1EC5 : C0 20 74            	lbr L231
    2114/    1EC8 :                     L236:
    2115/    1EC8 :                     ;					putx(((unsigned int) *this)>>8);
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 37 - 6/19/2013 13:05:07


    2116/    1EC8 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2117/    1ED4 : 9B                  	ghi	R11	;opt2
    2118/    1ED5 : AB                  	plo	R11
    2119/    1ED6 : F8 00               	ldi	0
    2120/    1ED8 : BB                  	phi	R11
    2121/    1ED9 : (MACRO)             	cpy1 R12,R11
    2122/    1EDB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2123/    1EDE : (MACRO)             	Ccall _putx
    2124/    1EE1 :                     ;					putx(((unsigned int) *this++)&255);
    2125/    1EE1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2126/    1EE5 : (MACRO)             	incm R6,2
    2127/    1EE7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2128/    1EF3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2129/    1EFB : (MACRO)             	cpy1 R12,R11
    2130/    1EFD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2131/    1F00 : (MACRO)             	Ccall _putx
    2132/    1F03 :                     ;					argslot+=1; //next argument slot
    2133/    1F03 : (MACRO)             	incm R1,1
    2134/    1F04 :                     ;					break;
    2135/    1F04 : C0 20 74            	lbr L231
    2136/    1F07 :                     L237:
    2137/    1F07 :                     ;					if (*ptr){ //as long as there's something there
    2138/    1F07 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2139/    1F13 : (MACRO)             	ld1 R11,'O',R11,0
    2140/    1F1D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2141/    1F20 : (MACRO)             	jzU2 r11,L238; EQ 0
    2142/    1F28 :                     ;						xord=*ptr++;
    2143/    1F28 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2144/    1F34 : (MACRO)             	cpy2 R10,R11
    2145/    1F38 : (MACRO)             	incm R10,1
    2146/    1F39 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2147/    1F46 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2148/    1F48 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    2149/    1F52 :                     ;						if (argslot&1) {
    2150/    1F52 : (MACRO)             	alu2I R11,R1,1,ani,ani
    2151/    1F5A :                     	;removed ?	cpy2 R11,R1
    2152/    1F5A : (MACRO)             	jzU2 r11,L240; EQ 0
    2153/    1F62 :                     ;							this++;
    2154/    1F62 : (MACRO)             	incm R6,2
    2155/    1F64 :                     ;							argslot++;
    2156/    1F64 : (MACRO)             	incm R1,1
    2157/    1F65 :                     ;						}
    2158/    1F65 :                     L240:
    2159/    1F65 :                     ;						if(xord=='d'){
    2160/    1F65 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    2161/    1F6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2162/    1F72 : (MACRO)             	jneU2I r11,100,L242; NE
    2163/    1F7E :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    2164/    1F7E : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
    2165/    1F8E : (MACRO)             	Ccall _printlint
    2166/    1F91 :                     ;							this+=2;				// and advances it 4 bytes
    2167/    1F91 : (MACRO)             	incm R6,4
    2168/    1F95 :                     ;						} else{
    2169/    1F95 : C0 20 0E            	lbr L243
    2170/    1F98 :                     L242:
    2171/    1F98 :                     ;							putx(((unsigned int) *this)>>8);
    2172/    1F98 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2173/    1FA4 : 9B                  	ghi	R11	;opt2
    2174/    1FA5 : AB                  	plo	R11
    2175/    1FA6 : F8 00               	ldi	0
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 38 - 6/19/2013 13:05:07


    2176/    1FA8 : BB                  	phi	R11
    2177/    1FA9 : (MACRO)             	cpy1 R12,R11
    2178/    1FAB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2179/    1FAE : (MACRO)             	Ccall _putx
    2180/    1FB1 :                     ;							putx(((unsigned int) *this++)&255);
    2181/    1FB1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2182/    1FB5 : (MACRO)             	incm R6,2
    2183/    1FB7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2184/    1FC3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2185/    1FCB : (MACRO)             	cpy1 R12,R11
    2186/    1FCD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2187/    1FD0 : (MACRO)             	Ccall _putx
    2188/    1FD3 :                     ;							putx(((unsigned int) *this)>>8);
    2189/    1FD3 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2190/    1FDF : 9B                  	ghi	R11	;opt2
    2191/    1FE0 : AB                  	plo	R11
    2192/    1FE1 : F8 00               	ldi	0
    2193/    1FE3 : BB                  	phi	R11
    2194/    1FE4 : (MACRO)             	cpy1 R12,R11
    2195/    1FE6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2196/    1FE9 : (MACRO)             	Ccall _putx
    2197/    1FEC :                     ;							putx(((unsigned int) *this++)&255);
    2198/    1FEC : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2199/    1FF0 : (MACRO)             	incm R6,2
    2200/    1FF2 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2201/    1FFE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2202/    2006 : (MACRO)             	cpy1 R12,R11
    2203/    2008 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2204/    200B : (MACRO)             	Ccall _putx
    2205/    200E :                     ;						}
    2206/    200E :                     L243:
    2207/    200E :                     ;						argslot+=2;
    2208/    200E : (MACRO)             	incm R1,2
    2209/    2010 :                     ;						break;
    2210/    2010 : C0 20 74            	lbr L231
    2211/    2013 :                     L238:
    2212/    2013 :                     L244:
    2213/    2013 :                     ;					if (*ptr){ //as long as there's something there
    2214/    2013 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2215/    201F : (MACRO)             	ld1 R11,'O',R11,0
    2216/    2029 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2217/    202C : (MACRO)             	jzU2 r11,L245; EQ 0
    2218/    2034 :                     ;						if (argslot&1) { //adjust alignment
    2219/    2034 : (MACRO)             	alu2I R11,R1,1,ani,ani
    2220/    203C :                     	;removed ?	cpy2 R11,R1
    2221/    203C : (MACRO)             	jzU2 r11,L247; EQ 0
    2222/    2044 :                     ;							this++;
    2223/    2044 : (MACRO)             	incm R6,2
    2224/    2046 :                     ;							argslot++;
    2225/    2046 : (MACRO)             	incm R1,1
    2226/    2047 :                     ;						}
    2227/    2047 :                     L247:
    2228/    2047 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    2229/    2047 : (MACRO)             	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
    2230/    2057 : (MACRO)             	Ccall _printflt
    2231/    205A :                     ;						this+=2;				// and advances it 4 bytes
    2232/    205A : (MACRO)             	incm R6,4
    2233/    205E :                     ;						argslot+=2;
    2234/    205E : (MACRO)             	incm R1,2
    2235/    2060 :                     ;						break;
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 39 - 6/19/2013 13:05:07


    2236/    2060 : C0 20 74            	lbr L231
    2237/    2063 :                     L245:
    2238/    2063 :                     L230:
    2239/    2063 :                     ;					putc('%');putc(c);
    2240/    2063 : (MACRO)             	ldaD R12,37; reg:acon
    2241/    2069 : (MACRO)             	Ccall _putc
    2242/    206C : (MACRO)             	cpy1 R12,R7
    2243/    206E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2244/    2071 : (MACRO)             	Ccall _putc
    2245/    2074 :                     ;			} //switch
    2246/    2074 :                     L231:
    2247/    2074 :                     ;		} //%
    2248/    2074 :                     L229:
    2249/    2074 :                     ;	} //while
    2250/    2074 :                     L226:
    2251/    2074 :                     ;    while(*ptr) {
    2252/    2074 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2253/    2080 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2254/    2082 : (MACRO)             	jnzU1 r11,L225; NEI2(CVUI2(reg),con0)
    2255/    2086 :                     ;} //prtf
    2256/    2086 :                     L224:
    2257/    2086 : (MACRO)             	release 4; release room for outgoing arguments
    2258/    208A : (MACRO)             	popr r7
    2259/    208E : (MACRO)             	popr r6
    2260/    2092 : (MACRO)             	popr r1
    2261/    2096 : (MACRO)             	popr r0
    2262/    209A : (MACRO)             	release 2; release room for local variables 
    2263/    209C : (MACRO)             	Cretn
    2264/    209D :                     
    2265/    209D :                     _exit:
    2266/    209D : (MACRO)             	reserve 4
    2267/    20A1 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2268/    20AE :                     ;void exit(int code){
    2269/    20AE :                     ;	printf("exit %d\n",code);
    2270/    20AE : (MACRO)             	ldaD R12,L255; reg:acon
    2271/    20B4 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2272/    20C0 : (MACRO)             	Ccall _printf
    2273/    20C3 :                     L256:
    2274/    20C3 :                     ;	while(1);
    2275/    20C3 :                     L257:
    2276/    20C3 : C0 20 C3            	lbr L256
    2277/    20C6 :                     ;}
    2278/    20C6 :                     L254:
    2279/    20C6 : (MACRO)             	release 4
    2280/    20CA : (MACRO)             	Cretn
    2281/    20CB :                     
    2282/    20CB :                     _memcmp:
    2283/    20CB : (MACRO)             	pushr r0
    2284/    20D0 : (MACRO)             	pushr r1
    2285/    20D5 : (MACRO)             	pushr r6
    2286/    20DA : (MACRO)             	pushr r7
    2287/    20DF : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    2288/    20EB :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    2289/    20EB :                     ;    int v = 0;
    2290/    20EB : (MACRO)             	ld2z R6
    2291/    20EF :                     ;    p1 = (unsigned char *)Ptr1;
    2292/    20EF : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    2293/    20F3 :                     ;    p2 = (unsigned char *)Ptr2;
    2294/    20F3 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    2295/    20F7 : C0 21 2A            	lbr L261
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 40 - 6/19/2013 13:05:07


    2296/    20FA :                     L260:
    2297/    20FA :                     ;    while(Count-- > 0 && v == 0) {
    2298/    20FA :                     ;        v = *(p1++) - *(p2++);
    2299/    20FA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    2300/    20FE : (MACRO)             	incm R1,1
    2301/    20FF : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) opt1
    2302/    2103 : (MACRO)             	incm R0,1
    2303/    2104 : (MACRO)             	ld1 R11,'O',R11,0
    2304/    210E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2305/    2111 : (MACRO)             	ld1 R10,'O',R10,0
    2306/    211B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2307/    211E : (MACRO)             	alu2 R6,R11,R10,sm,smb
    2308/    212A :                     ;    }
    2309/    212A :                     L261:
    2310/    212A :                     ;    while(Count-- > 0 && v == 0) {
    2311/    212A : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2312/    212E : (MACRO)             	cpy2 R7,R11
    2313/    2132 : (MACRO)             	decm R7,1
    2314/    2133 : (MACRO)             	jzU2 r11,L263; EQ 0
    2315/    213B : (MACRO)             	jzU2 r6,L260; EQ 0
    2316/    2143 :                     L263:
    2317/    2143 :                     ;    return v;
    2318/    2143 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    2319/    2147 :                     L259:
    2320/    2147 : (MACRO)             	popr r7
    2321/    214B : (MACRO)             	popr r6
    2322/    214F : (MACRO)             	popr r1
    2323/    2153 : (MACRO)             	popr r0
    2324/    2157 : (MACRO)             	Cretn
    2325/    2158 :                     
    2326/    2158 :                     _memcpy:
    2327/    2158 : (MACRO)             	pushr r1
    2328/    215D : (MACRO)             	pushr r6
    2329/    2162 : (MACRO)             	pushr r7
    2330/    2167 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    2331/    2173 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    2332/    2173 :                     ;        char* dst8 = (char*)dest;
    2333/    2173 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2334/    2177 :                     ;        char* src8 = (char*)src;
    2335/    2177 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
    2336/    217B : C0 21 8C            	lbr L266
    2337/    217E :                     L265:
    2338/    217E :                     ;        while (count--) {
    2339/    217E :                     ;            *dst8++ = *src8++;
    2340/    217E : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2341/    2182 : (MACRO)             	incm R6,1
    2342/    2183 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) opt1
    2343/    2187 : (MACRO)             	incm R1,1
    2344/    2188 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    2345/    218A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2346/    218C :                     ;        }
    2347/    218C :                     L266:
    2348/    218C :                     ;        while (count--) {
    2349/    218C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2350/    2190 : (MACRO)             	cpy2 R7,R11
    2351/    2194 : (MACRO)             	decm R7,1
    2352/    2195 : (MACRO)             	jnzU2 r11,L265; NE 0
    2353/    219D :                     ;        return dest;
    2354/    219D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2355/    21A1 :                     L264:
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 41 - 6/19/2013 13:05:07


    2356/    21A1 : (MACRO)             	popr r7
    2357/    21A5 : (MACRO)             	popr r6
    2358/    21A9 : (MACRO)             	popr r1
    2359/    21AD : (MACRO)             	Cretn
    2360/    21AE :                     
    2361/    21AE :                     _memset:
    2362/    21AE : (MACRO)             	pushr r6
    2363/    21B3 : (MACRO)             	pushr r7
    2364/    21B8 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    2365/    21C4 :                     ;{
    2366/    21C4 :                     ;    unsigned char* p=s;
    2367/    21C4 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2368/    21C8 : C0 21 D6            	lbr L270
    2369/    21CB :                     L269:
    2370/    21CB :                     ;        *p++ = (unsigned char)c;
    2371/    21CB : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2372/    21CF : (MACRO)             	incm R6,1
    2373/    21D0 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    2374/    21D4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2375/    21D6 :                     L270:
    2376/    21D6 :                     ;    while(n--)
    2377/    21D6 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2378/    21DA : (MACRO)             	cpy2 R7,R11
    2379/    21DE : (MACRO)             	decm R7,1
    2380/    21DF : (MACRO)             	jnzU2 r11,L269; NE 0
    2381/    21E7 :                     ;    return s;
    2382/    21E7 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2383/    21EB :                     L268:
    2384/    21EB : (MACRO)             	popr r7
    2385/    21EF : (MACRO)             	popr r6
    2386/    21F3 : (MACRO)             	Cretn
    2387/    21F4 :                     
    2388/    21F4 :                     _spincluder:
    2389/    21F4 :                     ;void spincluder(){
    2390/    21F4 :                     ;	asm("\tinclude fastspi.inc\n");
    2391/    21F4 :                     	include fastspi.inc
(1)    1/    21F4 :                     ;unsigned char xferspi(unsigned char value){
(1)    2/    21F4 :                     ;  int i;
(1)    3/    21F4 :                     ;  for(i=0;i<8;i++){
(1)    4/    21F4 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
(1)    5/    21F4 :                     ;    value=(value<<1)|digitalRead(miso);;
(1)    6/    21F4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
(1)    7/    21F4 :                     ;    digitalWrite(sck,LOW);
(1)    8/    21F4 :                     ;  }
(1)    9/    21F4 :                     ;  return value;
(1)   10/    21F4 :                     ;}
(1)   11/    21F4 :                     	align	64
(1)   12/    2200 : =5H                 spisck:	equ	5
(1)   13/    2200 : =2H                 clkport: equ	2
(1)   14/    2200 : =7H                 spimosi: equ	7
(1)   15/    2200 :                     _xferspif:	;spi transfer routine - uses bit 7 of port 4 for mosi, bit 4 for clock
(1)   16/    2200 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   17/    2206 : EE                  	sex	memaddr
(1)   18/    2207 : F8 08               	ldi	8		;bit count
(1)   19/    2209 : A8                  	plo	r8		;for loop exit test
(1)   20/    220A :                     $$loop:
(1)   21/    220A : 0E                  	ldn	memaddr		;pick it up
(1)   22/    220B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   23/    220D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   24/    220E :                     ;
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(fastspi.inc) - page 42 - 6/19/2013 13:05:07


(1)   25/    220E : 8C                  	glo	r12		;first parameter
(1)   26/    220F : FA 80               	ani	0x80		;data bit
(1)   27/    2211 : F1                  	or			;combine with PIN4 value
(1)   28/    2212 : 5E                  	str	memaddr		;prepare to send out
(1)   29/    2213 : 64                  	out	4		;put out data bit with clock 0
(1)   30/    2214 : 2E                  	dec	memaddr		;back up the X register
(1)   31/    2215 :                     ;now we have to read the incoming data on ef3
(1)   32/    2215 : 8C                  	glo	r12		;get the data byte
(1)   33/    2216 : FE                  	shl			;advance to the next bit
(1)   34/    2217 : 36 1B               	b3	$$zeroin	;check the external line
(1)   35/    2219 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   36/    221B :                     $$zeroin:			
(1)   37/    221B : AC                  	plo	r12		;put it back
(1)   38/    221C :                     ;now we clock out our outbound bit
(1)   39/    221C : 0E                  	ldn	memaddr
(1)   40/    221D : F9 20               	ori	(1<<spisck)		;raise the clock bit
(1)   41/    221F : 5E                  	str	memaddr
(1)   42/    2220 : 64                  	out	4		;send it out
(1)   43/    2221 : 2E                  	dec	memaddr
(1)   44/    2222 : FA DF               	ani	0xff-(1<<spisck)	;clear the clock bit
(1)   45/    2224 : 5E                  	str	memaddr
(1)   46/    2225 : 64                  	out	4		;send out the falling clock edge
(1)   47/    2226 : 2E                  	dec	memaddr		
(1)   48/    2227 :                     ;now we check the bit count to do the rest of the byte
(1)   49/    2227 : 28                  	dec	r8		;bit count-1
(1)   50/    2228 : 88                  	glo	r8		;see if we're done
(1)   51/    2229 : 3A 0A               	bnz	$$loop		;go back for more if not
(1)   52/    222B :                     ;clean up and return the incoming data
(1)   53/    222B : 8C                  	glo	r12
(1)   54/    222C : AF                  	plo	retval		;put return value in correct register
(1)   55/    222D : (MACRO)             	zext	retval
(1)   56/    2230 : E2                  	sex	sp		;re-establish sp as X
(1)   57/    2231 : (MACRO)             	cretn
(1)   58/    2232 :                     	align	64
(1)   59/    2240 :                     _xferspif2:	;spi transfer routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   60/    2240 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   61/    2246 : EE                  	sex	memaddr
(1)   62/    2247 : F8 08               	ldi	8		;bit count
(1)   63/    2249 : A8                  	plo	r8		;for loop exit test
(1)   64/    224A :                     $$loop:
(1)   65/    224A : 0E                  	ldn	memaddr		;pick it up
(1)   66/    224B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   67/    224D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   68/    224E :                     ;
(1)   69/    224E : 8C                  	glo	r12		;first parameter
(1)   70/    224F : FA 80               	ani	0x80		;data bit
(1)   71/    2251 : F1                  	or			;combine with PIN4 value
(1)   72/    2252 : 5E                  	str	memaddr		;prepare to send out
(1)   73/    2253 : 64                  	out	4		;put out data bit with clock 0
(1)   74/    2254 : 2E                  	dec	memaddr		;back up the X register
(1)   75/    2255 :                     ;now we have to read the incoming data on ef3
(1)   76/    2255 : 8C                  	glo	r12		;get the data byte
(1)   77/    2256 : FE                  	shl			;advance to the next bit
(1)   78/    2257 : 36 5B               	b3	$$zeroin	;check the external line
(1)   79/    2259 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   80/    225B :                     $$zeroin:			
(1)   81/    225B : AC                  	plo	r12		;put it back
(1)   82/    225C :                     ;now we clock out our outbound bit
(1)   83/    225C : 62                  	out	clkport		;send out the clock pulse
(1)   84/    225D : 2E                  	dec	memaddr
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(fastspi.inc) - page 43 - 6/19/2013 13:05:07


(1)   85/    225E :                     ;now we check the bit count to do the rest of the byte
(1)   86/    225E : 28                  	dec	r8		;bit count-1
(1)   87/    225F : 88                  	glo	r8		;see if we're done
(1)   88/    2260 : 3A 4A               	bnz	$$loop		;go back for more if not(19 instructions/bit)
(1)   89/    2262 :                     ;clean up and return the incoming data
(1)   90/    2262 : 8C                  	glo	r12
(1)   91/    2263 : AF                  	plo	retval		;put return value in correct register
(1)   92/    2264 : (MACRO)             	zext	retval
(1)   93/    2267 : E2                  	sex	sp		;re-establish sp as X
(1)   94/    2268 : (MACRO)             	cretn
(1)   95/    2269 :                     	align 64
(1)   96/    2280 :                     _shiftoutf:	;spi shift out routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   97/    2280 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   98/    2286 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)   99/    2287 : FA 7F               	ani	0x7f		;make sure mosi is off
(1)  100/    2289 : 22                  	dec	sp		;make a work area
(1)  101/    228A : 52                  	str	sp		;save pin4 value
(1)  102/    228B : F8 08               	ldi	8		;bit count
(1)  103/    228D : A8                  	plo	r8		;for loop exit test
(1)  104/    228E :                     $$loop:
(1)  105/    228E : 8C                  	glo	regarg1		;get the value
(1)  106/    228F : FE                  	shl			;shift left for next bit
(1)  107/    2290 : AC                  	plo	regarg1		;save it
(1)  108/    2291 : 76                  	shrc			;get the top bit back
(1)  109/    2292 : FA 80               	ani	0x80		;isolate it
(1)  110/    2294 : F1                  	or			;combine with PIN4 value
(1)  111/    2295 : 22                  	dec 	sp		;make a work area
(1)  112/    2296 : 52                  	str	sp		;place value to be output
(1)  113/    2297 : 64                  	out 	4		;put it in the latch
(1)  114/    2298 : 22                  	dec	sp		;prep for clock
(1)  115/    2299 : 62                  	out	clkport		;send clock signal
(1)  116/    229A : 28                  	dec	r8		;bit count
(1)  117/    229B : 88                  	glo	r8
(1)  118/    229C : 3A 8E               	bnz	$$loop		;back for more (13 instructions per byte)
(1)  119/    229E : 12                  	inc	sp		;release work area
(1)  120/    229F : (MACRO)             	cretn
(1)  121/    22A0 :                     _sendwizrd:	;spi shift out 0F routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)  122/    22A0 : =3H                 subpc:	equ	3		;i'll need to chnge this
(1)  123/    22A0 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)  124/    22A6 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)  125/    22A7 : FA 7F               	ani	0x7f		;make sure mosi is on for 0 part of 0F
(1)  126/    22A9 : 30 B4               	br	sendbdy		;go send 8 bits
(1)  127/    22AB :                     _sendwizwrt:	;spi shift out F0 routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)  128/    22AB : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)  129/    22B1 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)  130/    22B2 : F9 80               	ori	0x80		;make sure mosi is on for F part of F0
(1)  131/    22B4 :                     sendbdy:
(1)  132/    22B4 : 5E                  	str	memaddr		;save pin4 value
(1)  133/    22B5 : EE                  	sex	memaddr
(1)  134/    22B6 : 64                  	out	4		;send it out
(1)  135/    22B7 : 2E                  	dec	memaddr		;point back to PIN4
(1)  136/    22B8 : FB 80               	xri	0x80		;prep to ttoggle mosi
(1)  137/    22BA : 5E                  	str	memaddr		;save it
(1)  138/    22BB : E3                  	sex	subpc		;set up to toggle N1 *************
(1)  139/    22BC : 62                  	out	clkport		;toggle out bit 7
(1)  140/    22BD : 07                  	db	7		;dummy
(1)  141/    22BE : 62                  	out	clkport		;toggle out bit 6
(1)  142/    22BF : 06                  	db	6		;dummy
(1)  143/    22C0 : 62                  	out	clkport		;toggle out bit 5
(1)  144/    22C1 : 05                  	db	5		;dummy
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(fastspi.inc) - page 44 - 6/19/2013 13:05:07


(1)  145/    22C2 : 62                  	out	clkport		;toggle out bit 4
(1)  146/    22C3 : 04                  	db	4		;dummy
(1)  147/    22C4 : EE                  	sex	memaddr		;point back to pin4 with mosi off
(1)  148/    22C5 : 64                  	out	4		;send it out
(1)  149/    22C6 : E3                  	sex	subpc		;make pc
(1)  150/    22C7 : 62                  	out	clkport		;toggle out bit 3
(1)  151/    22C8 : 03                  	db	3		;dummy
(1)  152/    22C9 : 62                  	out	clkport		;toggle out bit 2
(1)  153/    22CA : 02                  	db	2		;dummy
(1)  154/    22CB : 62                  	out	clkport		;toggle out bit 1
(1)  155/    22CC : 01                  	db	1		;dummy
(1)  156/    22CD : 62                  	out	clkport		;toggle out bit 0
(1)  157/    22CE : 00                  	db	0		;dummy
(1)  158/    22CF : E2                  	sex	sp		;put things back to normal
(1)  159/    22D0 : (MACRO)             	cretn
(1)  160/    22D1 :                     _xferspif3:	;fast spi using send	
(1)  161/    22D1 :                     _shiftinf:	;spi input routine - uses ef3 for miso, N1 for clock
(1)  162/    22D1 : F8 00               	ldi	0		;initial value
(1)  163/    22D3 : AF                  	plo	retval		;prepare to return as an int
(1)  164/    22D4 : BF                  	phi	retval
(1)  165/    22D5 : F8 08               	ldi	8		;bit count		
(1)  166/    22D7 : A8                  	plo	r8		;for read loop
(1)  167/    22D8 :                     $$loop:
(1)  168/    22D8 :                     ;now we have to read the incoming data on ef3
(1)  169/    22D8 : 8F                  	glo	retval		;get the data byte
(1)  170/    22D9 : FE                  	shl			;advance to the next bit
(1)  171/    22DA : 36 DE               	b3	$$zeroin	;check the external line
(1)  172/    22DC : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)  173/    22DE :                     $$zeroin:			
(1)  174/    22DE : AF                  	plo	retval		;put it back
(1)  175/    22DF :                     ;now we cycle the clock for our next inbound bit
(1)  176/    22DF : 22                  	dec	sp		;make a work area
(1)  177/    22E0 : 62                  	out	clkport		;clock the next bit
(1)  178/    22E1 :                     	
(1)  179/    22E1 :                     ;now we check the bit count to do the rest of the byte
(1)  180/    22E1 : 28                  	dec	r8		;bit count-1
(1)  181/    22E2 : 88                  	glo	r8		;see if we're done
(1)  182/    22E3 : 3A D8               	bnz	$$loop		;go back for more if not(10 instructions per bit)
(1)  183/    22E5 :                     
(1)  184/    22E5 : E2                  	sex	sp		;re-establish sp as X
(1)  185/    22E6 : (MACRO)             	cretn
(1)  186/    22E7 :                     	
(1)  187/    22E7 :                     
    2392/    22E7 :                     ;}
    2393/    22E7 :                     L272:
    2394/    22E7 : (MACRO)             	Cretn
    2395/    22E8 :                     
    2396/    22E8 :                     _buf:
    2397/    22E8 : 00 00 00 00 00 00   	db 512 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 45 - 6/19/2013 13:05:07


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 46 - 6/19/2013 13:05:07


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
    2398/    24E8 :                     L255:
    2399/    24E8 : 65                  	db 101
    2400/    24E9 : 78                  	db 120
    2401/    24EA : 69                  	db 105
    2402/    24EB : 74                  	db 116
    2403/    24EC : 20                  	db 32
    2404/    24ED : 25                  	db 37
    2405/    24EE : 64                  	db 100
    2406/    24EF : 0A                  	db 10
    2407/    24F0 : 00                  	db 0
    2408/    24F1 :                     	align 4
    2409/    24F4 :                     L193:
    2410/    24F4 : BF 80 00 00         	dd 0xbf800000
    2411/    24F8 :                     	align 4
    2412/    24F8 :                     L192:
    2413/    24F8 : 00 00 00 00         	dd 0x0
    2414/    24FC :                     L153:
    2415/    24FC : 0A                  	db 10
    2416/    24FD : 4F                  	db 79
    2417/    24FE : 6C                  	db 108
    2418/    24FF : 64                  	db 100
    2419/    2500 : 75                  	db 117
    2420/    2501 : 69                  	db 105
    2421/    2502 : 6E                  	db 110
    2422/    2503 : 6F                  	db 111
    2423/    2504 : 20                  	db 32
    2424/    2505 : 57                  	db 87
    2425/    2506 : 65                  	db 101
    2426/    2507 : 62                  	db 98
    2427/    2508 : 20                  	db 32
    2428/    2509 : 53                  	db 83
    2429/    250A : 65                  	db 101
    2430/    250B : 72                  	db 114
    2431/    250C : 76                  	db 118
    2432/    250D : 65                  	db 101
    2433/    250E : 72                  	db 114
    2434/    250F : 20                  	db 32
    2435/    2510 : 76                  	db 118
    2436/    2511 : 32                  	db 50
    2437/    2512 : 2E                  	db 46
    2438/    2513 : 31                  	db 49
    2439/    2514 : 0A                  	db 10
    2440/    2515 : 00                  	db 0
    2441/    2516 :                     L148:
    2442/    2516 : 43                  	db 67
    2443/    2517 : 53                  	db 83
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 47 - 6/19/2013 13:05:07


    2444/    2518 : 0A                  	db 10
    2445/    2519 : 00                  	db 0
    2446/    251A :                     L146:
    2447/    251A : 53                  	db 83
    2448/    251B : 58                  	db 88
    2449/    251C : 0A                  	db 10
    2450/    251D : 00                  	db 0
    2451/    251E :                     L144:
    2452/    251E : 53                  	db 83
    2453/    251F : 43                  	db 67
    2454/    2520 : 0A                  	db 10
    2455/    2521 : 00                  	db 0
    2456/    2522 :                     L135:
    2457/    2522 : 72                  	db 114
    2458/    2523 : 73                  	db 115
    2459/    2524 : 7A                  	db 122
    2460/    2525 : 3D                  	db 61
    2461/    2526 : 25                  	db 37
    2462/    2527 : 64                  	db 100
    2463/    2528 : 0A                  	db 10
    2464/    2529 : 00                  	db 0
    2465/    252A :                     L133:
    2466/    252A : 73                  	db 115
    2467/    252B : 65                  	db 101
    2468/    252C : 6E                  	db 110
    2469/    252D : 64                  	db 100
    2470/    252E : 69                  	db 105
    2471/    252F : 6E                  	db 110
    2472/    2530 : 67                  	db 103
    2473/    2531 : 20                  	db 32
    2474/    2532 : 61                  	db 97
    2475/    2533 : 63                  	db 99
    2476/    2534 : 6B                  	db 107
    2477/    2535 : 0A                  	db 10
    2478/    2536 : 00                  	db 0
    2479/    2537 :                     L131:
    2480/    2537 : 73                  	db 115
    2481/    2538 : 65                  	db 101
    2482/    2539 : 6E                  	db 110
    2483/    253A : 64                  	db 100
    2484/    253B : 69                  	db 105
    2485/    253C : 6E                  	db 110
    2486/    253D : 67                  	db 103
    2487/    253E : 20                  	db 32
    2488/    253F : 66                  	db 102
    2489/    2540 : 6F                  	db 111
    2490/    2541 : 72                  	db 114
    2491/    2542 : 6D                  	db 109
    2492/    2543 : 20                  	db 32
    2493/    2544 : 0A                  	db 10
    2494/    2545 : 00                  	db 0
    2495/    2546 :                     L126:
    2496/    2546 : 4E                  	db 78
    2497/    2547 : 6F                  	db 111
    2498/    2548 : 20                  	db 32
    2499/    2549 : 6C                  	db 108
    2500/    254A : 65                  	db 101
    2501/    254B : 64                  	db 100
    2502/    254C : 20                  	db 32
    2503/    254D : 61                  	db 97
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 48 - 6/19/2013 13:05:07


    2504/    254E : 63                  	db 99
    2505/    254F : 74                  	db 116
    2506/    2550 : 69                  	db 105
    2507/    2551 : 6F                  	db 111
    2508/    2552 : 6E                  	db 110
    2509/    2553 : 20                  	db 32
    2510/    2554 : 72                  	db 114
    2511/    2555 : 65                  	db 101
    2512/    2556 : 71                  	db 113
    2513/    2557 : 75                  	db 117
    2514/    2558 : 65                  	db 101
    2515/    2559 : 73                  	db 115
    2516/    255A : 74                  	db 116
    2517/    255B : 0A                  	db 10
    2518/    255C : 00                  	db 0
    2519/    255D :                     L125:
    2520/    255D : 73                  	db 115
    2521/    255E : 65                  	db 101
    2522/    255F : 74                  	db 116
    2523/    2560 : 74                  	db 116
    2524/    2561 : 69                  	db 105
    2525/    2562 : 6E                  	db 110
    2526/    2563 : 67                  	db 103
    2527/    2564 : 20                  	db 32
    2528/    2565 : 6C                  	db 108
    2529/    2566 : 65                  	db 101
    2530/    2567 : 64                  	db 100
    2531/    2568 : 20                  	db 32
    2532/    2569 : 4F                  	db 79
    2533/    256A : 4E                  	db 78
    2534/    256B : 0A                  	db 10
    2535/    256C : 00                  	db 0
    2536/    256D :                     L122:
    2537/    256D : 73                  	db 115
    2538/    256E : 65                  	db 101
    2539/    256F : 74                  	db 116
    2540/    2570 : 74                  	db 116
    2541/    2571 : 69                  	db 105
    2542/    2572 : 6E                  	db 110
    2543/    2573 : 67                  	db 103
    2544/    2574 : 20                  	db 32
    2545/    2575 : 6C                  	db 108
    2546/    2576 : 65                  	db 101
    2547/    2577 : 64                  	db 100
    2548/    2578 : 20                  	db 32
    2549/    2579 : 6F                  	db 111
    2550/    257A : 66                  	db 102
    2551/    257B : 66                  	db 102
    2552/    257C : 0A                  	db 10
    2553/    257D : 00                  	db 0
    2554/    257E :                     L119:
    2555/    257E : 75                  	db 117
    2556/    257F : 6E                  	db 110
    2557/    2580 : 6B                  	db 107
    2558/    2581 : 6E                  	db 110
    2559/    2582 : 6F                  	db 111
    2560/    2583 : 77                  	db 119
    2561/    2584 : 6E                  	db 110
    2562/    2585 : 20                  	db 32
    2563/    2586 : 69                  	db 105
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 49 - 6/19/2013 13:05:07


    2564/    2587 : 6E                  	db 110
    2565/    2588 : 70                  	db 112
    2566/    2589 : 75                  	db 117
    2567/    258A : 74                  	db 116
    2568/    258B : 0A                  	db 10
    2569/    258C : 00                  	db 0
    2570/    258D :                     L118:
    2571/    258D : 66                  	db 102
    2572/    258E : 61                  	db 97
    2573/    258F : 76                  	db 118
    2574/    2590 : 69                  	db 105
    2575/    2591 : 63                  	db 99
    2576/    2592 : 6F                  	db 111
    2577/    2593 : 6E                  	db 110
    2578/    2594 : 20                  	db 32
    2579/    2595 : 69                  	db 105
    2580/    2596 : 67                  	db 103
    2581/    2597 : 6E                  	db 110
    2582/    2598 : 6F                  	db 111
    2583/    2599 : 72                  	db 114
    2584/    259A : 65                  	db 101
    2585/    259B : 64                  	db 100
    2586/    259C : 0A                  	db 10
    2587/    259D : 00                  	db 0
    2588/    259E :                     L115:
    2589/    259E : 47                  	db 71
    2590/    259F : 45                  	db 69
    2591/    25A0 : 54                  	db 84
    2592/    25A1 : 20                  	db 32
    2593/    25A2 : 72                  	db 114
    2594/    25A3 : 65                  	db 101
    2595/    25A4 : 63                  	db 99
    2596/    25A5 : 65                  	db 101
    2597/    25A6 : 69                  	db 105
    2598/    25A7 : 76                  	db 118
    2599/    25A8 : 65                  	db 101
    2600/    25A9 : 64                  	db 100
    2601/    25AA : 2E                  	db 46
    2602/    25AB : 0A                  	db 10
    2603/    25AC : 00                  	db 0
    2604/    25AD :                     L112:
    2605/    25AD : 72                  	db 114
    2606/    25AE : 64                  	db 100
    2607/    25AF : 3D                  	db 61
    2608/    25B0 : 31                  	db 49
    2609/    25B1 : 00                  	db 0
    2610/    25B2 :                     L109:
    2611/    25B2 : 72                  	db 114
    2612/    25B3 : 64                  	db 100
    2613/    25B4 : 3D                  	db 61
    2614/    25B5 : 30                  	db 48
    2615/    25B6 : 00                  	db 0
    2616/    25B7 :                     L106:
    2617/    25B7 : 50                  	db 80
    2618/    25B8 : 4F                  	db 79
    2619/    25B9 : 53                  	db 83
    2620/    25BA : 54                  	db 84
    2621/    25BB : 20                  	db 32
    2622/    25BC : 72                  	db 114
    2623/    25BD : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 50 - 6/19/2013 13:05:07


    2624/    25BE : 63                  	db 99
    2625/    25BF : 65                  	db 101
    2626/    25C0 : 69                  	db 105
    2627/    25C1 : 76                  	db 118
    2628/    25C2 : 65                  	db 101
    2629/    25C3 : 64                  	db 100
    2630/    25C4 : 0A                  	db 10
    2631/    25C5 : 00                  	db 0
    2632/    25C6 :                     L103:
    2633/    25C6 : 47                  	db 71
    2634/    25C7 : 45                  	db 69
    2635/    25C8 : 54                  	db 84
    2636/    25C9 : 20                  	db 32
    2637/    25CA : 2F                  	db 47
    2638/    25CB : 00                  	db 0
    2639/    25CC :                     L100:
    2640/    25CC : 47                  	db 71
    2641/    25CD : 45                  	db 69
    2642/    25CE : 54                  	db 84
    2643/    25CF : 20                  	db 32
    2644/    25D0 : 2F                  	db 47
    2645/    25D1 : 66                  	db 102
    2646/    25D2 : 61                  	db 97
    2647/    25D3 : 76                  	db 118
    2648/    25D4 : 69                  	db 105
    2649/    25D5 : 63                  	db 99
    2650/    25D6 : 6F                  	db 111
    2651/    25D7 : 6E                  	db 110
    2652/    25D8 : 00                  	db 0
    2653/    25D9 :                     L97:
    2654/    25D9 : 50                  	db 80
    2655/    25DA : 4F                  	db 79
    2656/    25DB : 53                  	db 83
    2657/    25DC : 54                  	db 84
    2658/    25DD : 20                  	db 32
    2659/    25DE : 2F                  	db 47
    2660/    25DF : 00                  	db 0
    2661/    25E0 :                     L94:
    2662/    25E0 : 61                  	db 97
    2663/    25E1 : 6E                  	db 110
    2664/    25E2 : 61                  	db 97
    2665/    25E3 : 6C                  	db 108
    2666/    25E4 : 79                  	db 121
    2667/    25E5 : 7A                  	db 122
    2668/    25E6 : 69                  	db 105
    2669/    25E7 : 6E                  	db 110
    2670/    25E8 : 67                  	db 103
    2671/    25E9 : 3A                  	db 58
    2672/    25EA : 0A                  	db 10
    2673/    25EB : 25                  	db 37
    2674/    25EC : 73                  	db 115
    2675/    25ED : 0A                  	db 10
    2676/    25EE : 00                  	db 0
    2677/    25EF :                     L93:
    2678/    25EF : 69                  	db 105
    2679/    25F0 : 6E                  	db 110
    2680/    25F1 : 70                  	db 112
    2681/    25F2 : 75                  	db 117
    2682/    25F3 : 74                  	db 116
    2683/    25F4 : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 51 - 6/19/2013 13:05:07


    2684/    25F5 : 66                  	db 102
    2685/    25F6 : 72                  	db 114
    2686/    25F7 : 6F                  	db 111
    2687/    25F8 : 6D                  	db 109
    2688/    25F9 : 20                  	db 32
    2689/    25FA : 25                  	db 37
    2690/    25FB : 64                  	db 100
    2691/    25FC : 2E                  	db 46
    2692/    25FD : 25                  	db 37
    2693/    25FE : 64                  	db 100
    2694/    25FF : 2E                  	db 46
    2695/    2600 : 25                  	db 37
    2696/    2601 : 64                  	db 100
    2697/    2602 : 2E                  	db 46
    2698/    2603 : 25                  	db 37
    2699/    2604 : 64                  	db 100
    2700/    2605 : 0A                  	db 10
    2701/    2606 : 0A                  	db 10
    2702/    2607 : 00                  	db 0
    2703/    2608 :                     L80:
    2704/    2608 : 73                  	db 115
    2705/    2609 : 65                  	db 101
    2706/    260A : 6E                  	db 110
    2707/    260B : 64                  	db 100
    2708/    260C : 73                  	db 115
    2709/    260D : 74                  	db 116
    2710/    260E : 75                  	db 117
    2711/    260F : 66                  	db 102
    2712/    2610 : 66                  	db 102
    2713/    2611 : 20                  	db 32
    2714/    2612 : 73                  	db 115
    2715/    2613 : 65                  	db 101
    2716/    2614 : 65                  	db 101
    2717/    2615 : 73                  	db 115
    2718/    2616 : 20                  	db 32
    2719/    2617 : 6C                  	db 108
    2720/    2618 : 65                  	db 101
    2721/    2619 : 64                  	db 100
    2722/    261A : 6D                  	db 109
    2723/    261B : 6F                  	db 111
    2724/    261C : 64                  	db 100
    2725/    261D : 65                  	db 101
    2726/    261E : 3D                  	db 61
    2727/    261F : 25                  	db 37
    2728/    2620 : 64                  	db 100
    2729/    2621 : 0A                  	db 10
    2730/    2622 : 00                  	db 0
    2731/    2623 :                     L69:
    2732/    2623 : 20                  	db 32
    2733/    2624 : 61                  	db 97
    2734/    2625 : 74                  	db 116
    2735/    2626 : 20                  	db 32
    2736/    2627 : 25                  	db 37
    2737/    2628 : 73                  	db 115
    2738/    2629 : 3A                  	db 58
    2739/    262A : 20                  	db 32
    2740/    262B : 77                  	db 119
    2741/    262C : 69                  	db 105
    2742/    262D : 7A                  	db 122
    2743/    262E : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 52 - 6/19/2013 13:05:07


    2744/    262F : 65                  	db 101
    2745/    2630 : 74                  	db 116
    2746/    2631 : 20                  	db 32
    2747/    2632 : 4D                  	db 77
    2748/    2633 : 52                  	db 82
    2749/    2634 : 3D                  	db 61
    2750/    2635 : 25                  	db 37
    2751/    2636 : 78                  	db 120
    2752/    2637 : 2C                  	db 44
    2753/    2638 : 20                  	db 32
    2754/    2639 : 53                  	db 83
    2755/    263A : 30                  	db 48
    2756/    263B : 5F                  	db 95
    2757/    263C : 53                  	db 83
    2758/    263D : 52                  	db 82
    2759/    263E : 3D                  	db 61
    2760/    263F : 25                  	db 37
    2761/    2640 : 78                  	db 120
    2762/    2641 : 2C                  	db 44
    2763/    2642 : 20                  	db 32
    2764/    2643 : 53                  	db 83
    2765/    2644 : 30                  	db 48
    2766/    2645 : 5F                  	db 95
    2767/    2646 : 4D                  	db 77
    2768/    2647 : 52                  	db 82
    2769/    2648 : 3D                  	db 61
    2770/    2649 : 25                  	db 37
    2771/    264A : 78                  	db 120
    2772/    264B : 2C                  	db 44
    2773/    264C : 20                  	db 32
    2774/    264D : 53                  	db 83
    2775/    264E : 30                  	db 48
    2776/    264F : 5F                  	db 95
    2777/    2650 : 50                  	db 80
    2778/    2651 : 4F                  	db 79
    2779/    2652 : 52                  	db 82
    2780/    2653 : 54                  	db 84
    2781/    2654 : 3D                  	db 61
    2782/    2655 : 25                  	db 37
    2783/    2656 : 78                  	db 120
    2784/    2657 : 20                  	db 32
    2785/    2658 : 25                  	db 37
    2786/    2659 : 78                  	db 120
    2787/    265A : 0A                  	db 10
    2788/    265B : 00                  	db 0
    2789/    265C :                     L43:
    2790/    265C : 74                  	db 116
    2791/    265D : 6F                  	db 111
    2792/    265E : 72                  	db 114
    2793/    265F : 65                  	db 101
    2794/    2660 : 61                  	db 97
    2795/    2661 : 64                  	db 100
    2796/    2662 : 3D                  	db 61
    2797/    2663 : 25                  	db 37
    2798/    2664 : 64                  	db 100
    2799/    2665 : 2C                  	db 44
    2800/    2666 : 74                  	db 116
    2801/    2667 : 6F                  	db 111
    2802/    2668 : 73                  	db 115
    2803/    2669 : 6B                  	db 107
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 53 - 6/19/2013 13:05:07


    2804/    266A : 69                  	db 105
    2805/    266B : 70                  	db 112
    2806/    266C : 3D                  	db 61
    2807/    266D : 25                  	db 37
    2808/    266E : 64                  	db 100
    2809/    266F : 0A                  	db 10
    2810/    2670 : 00                  	db 0
    2811/    2671 :                     L26:
    2812/    2671 : 44                  	db 68
    2813/    2672 : 6F                  	db 111
    2814/    2673 : 6E                  	db 110
    2815/    2674 : 65                  	db 101
    2816/    2675 : 20                  	db 32
    2817/    2676 : 57                  	db 87
    2818/    2677 : 69                  	db 105
    2819/    2678 : 7A                  	db 122
    2820/    2679 : 6E                  	db 110
    2821/    267A : 65                  	db 101
    2822/    267B : 74                  	db 116
    2823/    267C : 20                  	db 32
    2824/    267D : 57                  	db 87
    2825/    267E : 35                  	db 53
    2826/    267F : 31                  	db 49
    2827/    2680 : 30                  	db 48
    2828/    2681 : 30                  	db 48
    2829/    2682 : 20                  	db 32
    2830/    2683 : 49                  	db 73
    2831/    2684 : 6E                  	db 110
    2832/    2685 : 69                  	db 105
    2833/    2686 : 74                  	db 116
    2834/    2687 : 69                  	db 105
    2835/    2688 : 61                  	db 97
    2836/    2689 : 6C                  	db 108
    2837/    268A : 69                  	db 105
    2838/    268B : 7A                  	db 122
    2839/    268C : 61                  	db 97
    2840/    268D : 74                  	db 116
    2841/    268E : 69                  	db 105
    2842/    268F : 6F                  	db 111
    2843/    2690 : 6E                  	db 110
    2844/    2691 : 20                  	db 32
    2845/    2692 : 6F                  	db 111
    2846/    2693 : 6E                  	db 110
    2847/    2694 : 20                  	db 32
    2848/    2695 : 49                  	db 73
    2849/    2696 : 50                  	db 80
    2850/    2697 : 20                  	db 32
    2851/    2698 : 61                  	db 97
    2852/    2699 : 64                  	db 100
    2853/    269A : 64                  	db 100
    2854/    269B : 72                  	db 114
    2855/    269C : 65                  	db 101
    2856/    269D : 73                  	db 115
    2857/    269E : 73                  	db 115
    2858/    269F : 20                  	db 32
    2859/    26A0 : 25                  	db 37
    2860/    26A1 : 64                  	db 100
    2861/    26A2 : 2E                  	db 46
    2862/    26A3 : 25                  	db 37
    2863/    26A4 : 64                  	db 100
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 54 - 6/19/2013 13:05:07


    2864/    26A5 : 2E                  	db 46
    2865/    26A6 : 25                  	db 37
    2866/    26A7 : 64                  	db 100
    2867/    26A8 : 2E                  	db 46
    2868/    26A9 : 25                  	db 37
    2869/    26AA : 64                  	db 100
    2870/    26AB : 0A                  	db 10
    2871/    26AC : 0A                  	db 10
    2872/    26AD : 00                  	db 0
    2873/    26AE :                     	include lcc1802Epilofl.inc
(1)    1/    26AE :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    26AE :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    26AE :                     ;this is the version published with the lcc1802121229 release
(1)    4/    26AE :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    26AE :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    26AE :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    26AE :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    26AE :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    26AE :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    26AE :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    26AE :                     ;feb 27 changed stack to start at 7fff
(1)   12/    26AE :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    26AE :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    26AE :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    26AE :                     
(1)   16/    26AE : =EH                 rwork	equ	memAddr	;work register
(1)   17/    26AE :                     lcc1802init:	
(1)   18/    26AE : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    26B4 : (MACRO)             	ldiReg	RRET,_return
(1)   20/    26BA : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    26C0 : E2                  	sex	SP
(1)   22/    26C1 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    26C7 : D3                  	sep	RPC
(1)   24/    26C8 :                     $$_00000:
(1)   25/    26C8 : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    26CB : C0 26 CB            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    26CE : DE AD               	db	0xde,0xad
(1)   28/    26D0 :                     
(1)   29/    26D0 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    26D0 :                     _setqOn:
(1)   31/    26D0 : 7B                  	seq
(1)   32/    26D1 : (MACRO)             	Cretn
(1)   33/    26D2 :                     _setqOff:
(1)   34/    26D2 : 7A                  	req
(1)   35/    26D3 : (MACRO)             	Cretn
(1)   36/    26D4 :                     
(1)   37/    26D4 :                     _modU2:	;16 bit unsigned remainder
(1)   38/    26D4 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    26D4 : (MACRO)                 Ccall _divU2
(1)   40/    26D7 : 8D                      glo regArg2
(1)   41/    26D8 : AF                      plo retVal
(1)   42/    26D9 : 9D                      ghi regArg2
(1)   43/    26DA : BF                      phi retVal
(1)   44/    26DB : (MACRO)                 Cretn
(1)   45/    26DC :                         
(1)   46/    26DC :                     _modI2:	;16 bit signed remainder
(1)   47/    26DC :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    26DC : (MACRO)                 Ccall _divI2
(1)   49/    26DF : 8D                      glo regArg2
(1)   50/    26E0 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 55 - 6/19/2013 13:05:07


(1)   51/    26E1 : 9D                      ghi regArg2
(1)   52/    26E2 : BF                      phi retVal
(1)   53/    26E3 : (MACRO)                 Cretn
(1)   54/    26E4 :                     
(1)   55/    26E4 :                     _out4:	
(1)   56/    26E4 : 8C                  	glo	regArg1
(1)   57/    26E5 : 22                  	dec	sp
(1)   58/    26E6 : 52                  	str	sp
(1)   59/    26E7 : 64                  	out	4
(1)   60/    26E8 : (MACRO)             	Cretn
(1)   61/    26E9 :                     
(1)   62/    26E9 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    26E9 :                     	align 256
(1)   64/    2700 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    2700 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    2700 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    2700 : D3                  	sep     R3 ;go to subroutine
(1)   68/    2701 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    2702 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    2703 : 22                  	dec	sp
(1)   71/    2704 : 73                  	stxd
(1)   72/    2705 : 96                  	ghi	retAddr
(1)   73/    2706 : 52                  	str	sp	
(1)   74/    2707 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    2708 : A6                  	plo	retAddr
(1)   76/    2709 : 93                  	ghi	RPC
(1)   77/    270A : B6                  	phi	retAddr
(1)   78/    270B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    270C : B3                  	phi	RPC
(1)   80/    270D : 46                  	lda	retAddr
(1)   81/    270E : A3                  	plo	RPC
(1)   82/    270F : 30 00               	br	_call-1
(1)   83/    2711 :                     
(1)   84/    2711 :                     ;Standard subroutine return 
(1)   85/    2711 : D3                  	sep	RPC	;return to the original program
(1)   86/    2712 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    2713 : A3                  	plo	RPC
(1)   88/    2714 : 96                  	ghi	retAddr
(1)   89/    2715 : B3                  	phi	RPC
(1)   90/    2716 : 42                  	lda	SP	;pick up old return address
(1)   91/    2717 : B6                  	phi	retAddr
(1)   92/    2718 : 42                  	lda	SP
(1)   93/    2719 : A6                  	plo	retAddr
(1)   94/    271A : 30 11               	br	_return-1
(1)   95/    271C :                     
(1)   96/    271C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    271C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    271E : FF 01               $$mslp:	smi	1
(1)   99/    2720 : 3A 1E               	bnz	$$mslp
(1)  100/    2722 : (MACRO)             	Cretn
(1)  101/    2723 :                     
(1)  102/    2723 :                     
(1)  103/    2723 :                     	
(1)  104/    2723 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    2723 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    2723 :                     _mulu2:		
(1)  107/    2723 : 22                      dec sp
(1)  108/    2724 : F8 10                   ldi 16
(1)  109/    2726 : AE                      plo	rwork	;bit count
(1)  110/    2727 : F8 00                   ldi 0
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 56 - 6/19/2013 13:05:07


(1)  111/    2729 : BF                      phi	retVal	;quotient
(1)  112/    272A : AF                      plo retVal
(1)  113/    272B :                     $$MultLoop16_16:
(1)  114/    272B : 9C                      ghi regArg1
(1)  115/    272C : F6                      shr
(1)  116/    272D : BC                      phi regArg1
(1)  117/    272E : 8C                      glo regArg1
(1)  118/    272F : 76                      shrc
(1)  119/    2730 : AC                      plo regArg1
(1)  120/    2731 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    2733 : 8D                      glo regArg2
(1)  122/    2734 : 52                      str sp
(1)  123/    2735 : 8F                      glo retVal
(1)  124/    2736 : F4                      add 
(1)  125/    2737 : AF                      plo retVal
(1)  126/    2738 : 9D                      ghi regArg2
(1)  127/    2739 : 52                      str sp
(1)  128/    273A : 9F                      ghi retVal
(1)  129/    273B : 74                      adc
(1)  130/    273C : BF                      phi retVal
(1)  131/    273D :                     $$MultSkip16_16:
(1)  132/    273D : 8D                      glo regArg2
(1)  133/    273E : FE                      shl
(1)  134/    273F : AD                      plo regArg2
(1)  135/    2740 : 9D                      ghi regArg2
(1)  136/    2741 : 7E                      shlc
(1)  137/    2742 : BD                      phi regArg2
(1)  138/    2743 : 2E                      dec rwork
(1)  139/    2744 : 8E                      glo rwork
(1)  140/    2745 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    2747 : 12                      inc sp
(1)  142/    2748 : D5                      sep 5
(1)  143/    2749 :                     
(1)  144/    2749 :                     
(1)  145/    2749 :                     _divU2:
(1)  146/    2749 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    2749 :                     	; This is really an unsigned 23 bit divide
(1)  148/    2749 :                     	;thanks to Ted Rossin
(1)  149/    2749 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    2749 : 22                      dec sp
(1)  151/    274A : F8 10                   ldi 16
(1)  152/    274C : AE                      plo rwork
(1)  153/    274D : F8 00                   ldi 0
(1)  154/    274F : BF                      phi retVal
(1)  155/    2750 : AF                      plo retVal
(1)  156/    2751 : BE                      phi rwork
(1)  157/    2752 :                     $$DivLoop16_16:
(1)  158/    2752 : 8C                      glo regArg1
(1)  159/    2753 : FE                      shl
(1)  160/    2754 : AC                      plo regArg1
(1)  161/    2755 : 9C                      ghi regArg1
(1)  162/    2756 : 7E                      shlc
(1)  163/    2757 : BC                      phi regArg1
(1)  164/    2758 : 8F                      glo retVal
(1)  165/    2759 : 7E                      shlc
(1)  166/    275A : AF                      plo retVal
(1)  167/    275B : 9F                      ghi retVal
(1)  168/    275C : 7E                      shlc
(1)  169/    275D : BF                      phi retVal
(1)  170/    275E : 9E                      ghi rwork
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 57 - 6/19/2013 13:05:07


(1)  171/    275F : 7E                      shlc
(1)  172/    2760 : BE                      phi rwork
(1)  173/    2761 : 3B 73                   bnf $$DivSub16_16
(1)  174/    2763 : 8D                      glo regArg2
(1)  175/    2764 : 52                      str sp
(1)  176/    2765 : 8F                      glo retVal
(1)  177/    2766 : F4                      add 
(1)  178/    2767 : AF                      plo retVal
(1)  179/    2768 : 9D                      ghi regArg2
(1)  180/    2769 : 52                      str sp
(1)  181/    276A : 9F                      ghi retVal
(1)  182/    276B : 74                      adc 
(1)  183/    276C : BF                      phi retVal
(1)  184/    276D : 9E                      ghi rwork
(1)  185/    276E : 7C 00                   adci 0
(1)  186/    2770 : BE                      phi rwork
(1)  187/    2771 : 30 81                   br $$DivSkip16_16
(1)  188/    2773 :                     $$DivSub16_16:
(1)  189/    2773 : 8D                      glo regArg2
(1)  190/    2774 : 52                      str sp
(1)  191/    2775 : 8F                      glo retVal
(1)  192/    2776 : F7                      sm
(1)  193/    2777 : AF                      plo retVal
(1)  194/    2778 : 9D                      ghi regArg2
(1)  195/    2779 : 52                      str sp
(1)  196/    277A : 9F                      ghi retVal
(1)  197/    277B : 77                      smb 
(1)  198/    277C : BF                      phi retVal
(1)  199/    277D : 9E                      ghi rwork
(1)  200/    277E : 7F 00                   smbi 0
(1)  201/    2780 : BE                      phi rwork 
(1)  202/    2781 :                     $$DivSkip16_16:
(1)  203/    2781 : FE                      shl
(1)  204/    2782 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    2784 :                     $$DivSetBit16_16:
(1)  206/    2784 : 8C                      glo regArg1
(1)  207/    2785 : F9 01                   ori  0x01
(1)  208/    2787 : AC                      plo regArg1
(1)  209/    2788 :                     $$DivSkipClear16_16:
(1)  210/    2788 : 2E                      dec rwork
(1)  211/    2789 : 8E                      glo rwork
(1)  212/    278A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    278C : 9E                      ghi rwork
(1)  214/    278D : FE                      shl
(1)  215/    278E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    2790 : 8D                      glo regArg2
(1)  217/    2791 : 52                      str sp
(1)  218/    2792 : 8F                      glo retVal
(1)  219/    2793 : F4                      add
(1)  220/    2794 : AF                      plo retVal
(1)  221/    2795 : 9D                      ghi regArg2
(1)  222/    2796 : 52                      str sp
(1)  223/    2797 : 9F                      ghi retVal
(1)  224/    2798 : 74                      adc
(1)  225/    2799 : BF                      phi retVal
(1)  226/    279A :                     $$DivSkipFinalAdd16_16:
(1)  227/    279A : 12                      inc sp
(1)  228/    279B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    279B : 8F                      glo retVal
(1)  230/    279C : AD                      plo regArg2
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 58 - 6/19/2013 13:05:07


(1)  231/    279D : 9F                      ghi retVal
(1)  232/    279E : BD                      phi regArg2
(1)  233/    279F : 8C                      glo regArg1
(1)  234/    27A0 : AF                      plo retVal
(1)  235/    27A1 : 9C                      ghi regArg1
(1)  236/    27A2 : BF                      phi retVal
(1)  237/    27A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    27A3 : D5                      sep 5
(1)  239/    27A4 :                     
(1)  240/    27A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    27A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    27A4 :                     _divI2:
(1)  243/    27A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    27A4 : 22                      dec	sp	;leave a work area available
(1)  245/    27A5 : 9C                      ghi regArg1
(1)  246/    27A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    27A7 : FE                      shl
(1)  248/    27A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    27AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    27B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    27B3 : 9D                      ghi regArg2
(1)  252/    27B4 : F3                      xor	
(1)  253/    27B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    27B6 : 9D                      ghi regArg2
(1)  255/    27B7 : FE                      shl
(1)  256/    27B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    27BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    27C3 :                     $$pos2: ; both args now +v
(1)  259/    27C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    27C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    27C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    27C7 : FE                      shl
(1)  263/    27C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    27CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    27D3 :                     $$done:
(1)  266/    27D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    27D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    27D4 :                     
(1)  269/    27D4 :                     
(1)  270/    27D4 :                     	align 256    ;32 bit operations follow
(1)  271/    2800 :                     _divu4:
(1)  272/    2800 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    2800 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    2800 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    2800 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    2800 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    2800 :                     
(1)  278/    2800 : F8 20               	ldi 32		;set loop count
(1)  279/    2802 : AE                  	plo memaddr	;in temp register
(1)  280/    2803 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    280F :                     $$loop:
(1)  282/    280F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    281B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    2827 :                     
(1)  285/    2827 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    283D :                     
(1)  287/    283D : FA 80               	ani 0x80	;check the top bit
(1)  288/    283F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    2841 : 89                  		glo RL8
(1)  290/    2842 : FA FE               		ani 0xfe	;turn off the bottom bit
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 59 - 6/19/2013 13:05:07


(1)  291/    2844 : A9                  		plo RL8
(1)  292/    2845 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    285B : 30 61               	br $$endlp 	;else
(1)  294/    285D :                     $$norestore:
(1)  295/    285D : 89                  		glo RL8
(1)  296/    285E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    2860 : A9                  		plo RL8
(1)  298/    2861 :                     	;end if
(1)  299/    2861 :                     $$endlp:
(1)  300/    2861 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    2862 : 8E                  	glo memaddr
(1)  302/    2863 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    2865 :                     	
(1)  304/    2865 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    2866 :                     		
(1)  306/    2866 :                     
(1)  307/    2866 :                     _mulu4:
(1)  308/    2866 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    2866 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    2866 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    2866 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    2866 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    2866 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    2866 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    2866 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    2866 :                     	;for 10 we subtract and shift
(1)  317/    2866 :                     	;for 00 and 11 we just shift
(1)  318/    2866 :                     
(1)  319/    2866 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    2872 : F8 20                   ldi 32
(1)  321/    2874 : AE                      plo memaddr		;cycle count
(1)  322/    2875 : FC 00                   adi 0		;clear df
(1)  323/    2877 :                     $$mloop:
(1)  324/    2877 : 89                      glo RL8
(1)  325/    2878 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    287A : 3B 96                   bnf	$$check_sub	;
(1)  327/    287C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    287E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    287E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    2894 : 30 AE                   br $$shift
(1)  331/    2896 :                     $$check_sub:
(1)  332/    2896 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    2898 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    2898 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    28AE :                     $$shift:
(1)  336/    28AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    28BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    28C8 :                     
(1)  339/    28C8 : 2E                      dec memaddr		;cycle count
(1)  340/    28C9 : 8E                      glo memaddr
(1)  341/    28CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    28CC :                         
(1)  343/    28CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    28CD :                     
(1)  345/    28CD :                     	align 256
(1)  346/    2900 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    2900 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    2900 :                     _divI4:
(1)  349/    2900 : 22                      dec	sp	;leave a work area available
(1)  350/    2901 : 98                      ghi RL8-1	;get the top of the dividend
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 60 - 6/19/2013 13:05:07


(1)  351/    2902 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    2903 : FE                      shl
(1)  353/    2904 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    2906 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    2926 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    2926 : 9A                      ghi RL10-1
(1)  357/    2927 : F3                      xor	
(1)  358/    2928 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    2929 : 9A                      ghi RL10-1
(1)  360/    292A : FE                      shl
(1)  361/    292B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    292D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    294D :                     $$pos2: ; both args now +v
(1)  364/    294D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    2950 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    2950 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    2951 : FE                      shl
(1)  368/    2952 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    2954 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    2974 :                     $$done:
(1)  371/    2974 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    2975 :                     
(1)  373/    2975 :                     _dubdabx:	
(1)  374/    2975 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    2975 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    2975 :                     ;long interger is passed in rp1p2
(1)  377/    2975 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    2975 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    2975 :                     ;r8-11 are used as temps
(1)  380/    2975 :                     ;r8 is the working pointer
(1)  381/    2975 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    2975 :                     ;r9.0 is digit count
(1)  383/    2975 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    2975 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    2981 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    298D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    2991 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    2993 : A9                  	plo r9
(1)  389/    2994 :                     $$clrlp:	;clear the passed buffer
(1)  390/    2994 : F8 00               	ldi 0	
(1)  391/    2996 : 58                  	str r8	;clear a byte
(1)  392/    2997 : 18                  	inc r8
(1)  393/    2998 : 29                  	dec r9
(1)  394/    2999 : 89                  	glo r9	;check the count
(1)  395/    299A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    299C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    29A0 :                     
(1)  398/    29A0 : F8 20               	ldi 32	;bit count
(1)  399/    29A2 : AF                  	plo r15
(1)  400/    29A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    29A3 :                     $$cktop:
(1)  402/    29A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    29A4 : FE                  	shl		;check for a 1
(1)  404/    29A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    29A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    29B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    29B4 : 8F                  	glo r15
(1)  408/    29B5 : 3A A3               	bnz $$cktop	;
(1)  409/    29B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    29B8 :                     $$bitloop:
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 61 - 6/19/2013 13:05:07


(1)  411/    29B8 : F8 0A               	ldi 10	;digit count
(1)  412/    29BA : A9                  	plo r9
(1)  413/    29BB :                     $$dcklp:
(1)  414/    29BB : 08                  	ldn r8 	;pick up a digit
(1)  415/    29BC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    29BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    29C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    29C2 : 58                  	str r8	;put it back
(1)  419/    29C3 :                     $$dnoadd:
(1)  420/    29C3 : 18                  	inc r8
(1)  421/    29C4 : 29                  	dec r9	;decrement digit count
(1)  422/    29C5 : 89                  	glo r9
(1)  423/    29C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    29C8 :                     	
(1)  425/    29C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    29D4 :                     	
(1)  427/    29D4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    29D6 : A9                  	plo r9
(1)  429/    29D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    29D7 :                     $$dshlp:
(1)  431/    29D7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    29D8 : 08                  	ldn r8	;get the digit back
(1)  433/    29D9 : 7E                  	shlc	;continue the shift
(1)  434/    29DA : BF                  	phi r15 ;save it for the carry test
(1)  435/    29DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    29DD : 58                  	str r8	;put the digit back
(1)  437/    29DE : 9F                  	ghi r15	;now test for carry
(1)  438/    29DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    29E1 : 29                  	dec r9	;decrement the digit count
(1)  440/    29E2 : 89                  	glo r9
(1)  441/    29E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    29E5 :                     	
(1)  443/    29E5 : 2F                  	dec r15
(1)  444/    29E6 : 8F                  	glo r15
(1)  445/    29E7 : 3A B8               	bnz $$bitloop
(1)  446/    29E9 :                     	
(1)  447/    29E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    29ED : F8 0A               	ldi 10		;digit count again
(1)  449/    29EF : A9                  	plo r9
(1)  450/    29F0 :                     $$upnxt:
(1)  451/    29F0 : 08                  	ldn r8		;get digit
(1)  452/    29F1 : F9 30               	ori 0x30	;make ascii
(1)  453/    29F3 : 58                  	str r8		;put it back
(1)  454/    29F4 : 18                  	inc r8		;next digit
(1)  455/    29F5 : 29                  	dec r9		;counter
(1)  456/    29F6 : 89                  	glo r9
(1)  457/    29F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    29F9 :                     	
(1)  459/    29F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    2A01 : EE                  	sex memaddr	;set up
(1)  461/    2A02 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    2A04 : F7                  	sm		;desired number of digits to skip
(1)  463/    2A05 : E2                  	sex sp		;reset index register
(1)  464/    2A06 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    2A07 :                     $$cknext:
(1)  466/    2A07 : 0F                  	ldn r15		;check digit
(1)  467/    2A08 : FF 30               	smi 0x30	;for '0'
(1)  468/    2A0A : 3A 11               	bnz $$done
(1)  469/    2A0C : 1F                  	inc r15		;next digit
(1)  470/    2A0D : 29                  	dec r9		;reduce count
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(lcc1802Epilofl.inc) - page 62 - 6/19/2013 13:05:07


(1)  471/    2A0E : 89                  	glo r9
(1)  472/    2A0F : 3A 07               	bnz $$cknext
(1)  473/    2A11 :                     $$done:
(1)  474/    2A11 : (MACRO)             	cretn
(1)  475/    2A12 :                     	
(1)  476/    2A12 :                     	
(1)  477/    2A12 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    2A12 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    2A12 : (MACRO)                 Ccall _divU4
(1)  480/    2A15 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    2A1D : (MACRO)                 Cretn
(1)  482/    2A1E :                         
(1)  483/    2A1E :                     _modI4:	;32 bit signed remainder
(1)  484/    2A1E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    2A1E : (MACRO)                 Ccall _divI4
(1)  486/    2A21 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    2A29 : (MACRO)                 Cretn
(1)  488/    2A2A :                         
(1)  489/    2A2A :                     	
(1)  490/    2A2A :                      
    2874/    2A2A :                     	include LCC1802fp.inc
(1)    1/    2A2A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    2A2A :                     ;maybe originally from RCA
(1)    3/    2A2A :                     ;these routines use ALL the registers from 6-15!
(1)    4/    2A2A :                     ;8-15 were more or less available to start with
(1)    5/    2A2A :                     ;it saves 6 when it uses it
(1)    6/    2A2A :                     ;I save 7 on entry and restore on exit
(1)    7/    2A2A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    2A2A : =BH                 FB	equ	11	;was R9
(1)    9/    2A2A : =9H                 F9	equ	9	;was R7
(1)   10/    2A2A : =7H                 F7	equ	7	;was RB
(1)   11/    2A2A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    2A2A :                     ; *** Convert signed long to float
(1)   13/    2A2A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    2A2A :                     ; *** result in same register
(1)   15/    2A2A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    2A2A :                     	align 256
(1)   17/    2B00 : F8 00               cvif4:	ldi	0
(1)   18/    2B02 : BE                  	phi	memaddr	;sign
(1)   19/    2B03 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    2B05 : AE                  	plo	memaddr	;
(1)   21/    2B06 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    2B07 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    2B09 : FE                  	shl		;sign bit to df
(1)   24/    2B0A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    2B0C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    2B0D : BE                  	phi	memaddr	;save it
(1)   27/    2B0E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    2B2E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    2B30 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    2B31 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    2B33 : 99                  	ghi	RL8	;next byte
(1)   32/    2B34 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    2B36 : 89                  	glo	RL8	;last byte
(1)   34/    2B37 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    2B39 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    2B3A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    2B3C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    2B3D : (MACRO)             	shru4	RL8
(1)   39/    2B49 : 30 39               	br	$$sgnpos
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 63 - 6/19/2013 13:05:07


(1)   40/    2B4B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    2B4C : FA 80               	ani	0x80	;isolate it
(1)   42/    2B4E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    2B50 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    2B51 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    2B5D : 30 4B               	br	$$shl
(1)   46/    2B5F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    2B60 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    2B61 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    2B62 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    2B64 : 88                  	glo	RL8-1	;get the byte
(1)   51/    2B65 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    2B67 : A8                  	plo	RL8-1	;put it back
(1)   53/    2B68 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    2B69 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    2B6B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    2B6C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    2B6E : B8                  	phi	RL8-1	;place it
(1)   58/    2B6F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    2B70 :                     	
(1)   60/    2B70 :                     
(1)   61/    2B70 :                     
(1)   62/    2B70 :                     ; *** Convert float to signed long
(1)   63/    2B70 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    2B70 :                     ; *** result in same register
(1)   65/    2B70 :                     	align 256
(1)   66/    2C00 :                     cvfi4:
(1)   67/    2C00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2C01 : BE                  	phi	memaddr ;save for later
(1)   69/    2C02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2C03 : FE                  	shl		;shift to df
(1)   71/    2C04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2C05 : 7E                  	shlc		;combine with 0
(1)   73/    2C06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2C06 : 22                  	dec	sp
(1)   75/    2C07 : 52                  	str	sp
(1)   76/    2C08 : F8 96               	ldi	150
(1)   77/    2C0A : F7                  	sm		;calculate shift count needed
(1)   78/    2C0B :                     ;*******note - the df flag set here is tested later
(1)   79/    2C0B : AE                  	plo	memaddr
(1)   80/    2C0C : 12                  	inc	sp	;release work area
(1)   81/    2C0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    2C0D : F8 00               	ldi	0
(1)   83/    2C0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2C10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2C11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2C13 : A8                  	plo	RL8-1	;put it back
(1)   87/    2C14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2C15 : 32 3B               	bz	$$sign
(1)   89/    2C17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2C17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2C19 :                     
(1)   92/    2C19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2C25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2C26 : 8E                  	glo	memaddr
(1)   95/    2C27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    2C29 : 30 3B               	br	$$sign
(1)   97/    2C2B :                     
(1)   98/    2C2B :                     ;handle negative shift as best I can - gigo
(1)   99/    2C2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 64 - 6/19/2013 13:05:07


(1)  100/    2C37 : 1E                  	inc	memaddr
(1)  101/    2C38 : 8E                  	glo	memaddr
(1)  102/    2C39 : 3A 2B               	bnz	$$lsh	
(1)  103/    2C3B :                     	
(1)  104/    2C3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    2C3C : FE                  	shl		;shift sign bit into df
(1)  106/    2C3D : 3B 61               	bnf	$$done
(1)  107/    2C3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    2C5F : 30 61               	br	$$done	; and return
(1)  109/    2C61 :                     
(1)  110/    2C61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2C62 :                     
(1)  112/    2C62 :                     ; *** Check if character is numeric
(1)  113/    2C62 :                     ; *** D - char to check
(1)  114/    2C62 :                     ; *** Returns DF=1 if numeric
(1)  115/    2C62 :                     ; ***         DF=0 if not
(1)  116/    2C62 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    2C63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2C65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2C67 : FF 0A                          smi     10                  ; see if above
(1)  120/    2C69 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    2C6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    2C6D : C8                             lskp
(1)  123/    2C6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2C70 : 8E                             glo     r14                 ; recover character
(1)  125/    2C71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2C72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2C72 :                     ; *******************************
(1)  128/    2C72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2C73 : F6                             shr
(1)  130/    2C74 : B8                             phi   r8
(1)  131/    2C75 : 88                             glo   r8
(1)  132/    2C76 : 76                             shrc
(1)  133/    2C77 : A8                             plo   r8
(1)  134/    2C78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2C79 : 76                             shrc
(1)  136/    2C7A : B9                             phi   F9
(1)  137/    2C7B : 89                             glo   F9
(1)  138/    2C7C : 76                             shrc
(1)  139/    2C7D : A9                             plo   F9
(1)  140/    2C7E : (MACRO)                        Cretn
(1)  141/    2C7F :                     
(1)  142/    2C7F :                     ; ******************************
(1)  143/    2C7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    2C7F :                     ; ******************************
(1)  145/    2C7F : 89                  fp_shl_1:  glo   F9
(1)  146/    2C80 : FE                             shl
(1)  147/    2C81 : A9                             plo   F9
(1)  148/    2C82 : 99                             ghi   F9
(1)  149/    2C83 : 7E                             shlc
(1)  150/    2C84 : B9                             phi   F9
(1)  151/    2C85 : 88                             glo   r8
(1)  152/    2C86 : 7E                             shlc
(1)  153/    2C87 : A8                             plo   r8
(1)  154/    2C88 : 98                             ghi   r8
(1)  155/    2C89 : 7E                             shlc
(1)  156/    2C8A : B8                             phi   r8
(1)  157/    2C8B : D5                             sep   RRET
(1)  158/    2C8C :                     
(1)  159/    2C8C :                     ; **********************
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 65 - 6/19/2013 13:05:07


(1)  160/    2C8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    2C8C :                     ; **********************
(1)  162/    2C8C : 8B                  fp_add_12: glo   FB
(1)  163/    2C8D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    2C8E : 52                             str   r2
(1)  165/    2C8F : 89                             glo   F9
(1)  166/    2C90 : F4                             add
(1)  167/    2C91 : A9                             plo   F9
(1)  168/    2C92 : 9B                             ghi   FB
(1)  169/    2C93 : 52                             str   r2
(1)  170/    2C94 : 99                             ghi   F9
(1)  171/    2C95 : 74                             adc
(1)  172/    2C96 : B9                             phi   F9
(1)  173/    2C97 : 8A                             glo   R10
(1)  174/    2C98 : 52                             str   r2
(1)  175/    2C99 : 88                             glo   r8
(1)  176/    2C9A : 74                             adc
(1)  177/    2C9B : A8                             plo   r8
(1)  178/    2C9C : 9A                             ghi   R10
(1)  179/    2C9D : 52                             str   r2
(1)  180/    2C9E : 98                             ghi   r8
(1)  181/    2C9F : 74                             adc
(1)  182/    2CA0 : B8                             phi   r8
(1)  183/    2CA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    2CA2 : (MACRO)                        Cretn
(1)  185/    2CA3 :                     
(1)  186/    2CA3 :                     ; *******************************
(1)  187/    2CA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    2CA3 :                     ; *******************************
(1)  189/    2CA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    2CA4 : F6                             shr
(1)  191/    2CA5 : BF                             phi   R15
(1)  192/    2CA6 : 8F                             glo   R15
(1)  193/    2CA7 : 76                             shrc
(1)  194/    2CA8 : AF                             plo   R15
(1)  195/    2CA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    2CAA : 76                             shrc
(1)  197/    2CAB : BD                             phi   R13
(1)  198/    2CAC : 8D                             glo   R13
(1)  199/    2CAD : 76                             shrc
(1)  200/    2CAE : AD                             plo   R13
(1)  201/    2CAF : (MACRO)                        Cretn
(1)  202/    2CB0 :                     
(1)  203/    2CB0 :                     ; *************************************
(1)  204/    2CB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    2CB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    2CB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    2CB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    2CB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    2CB0 :                     ; *************************************
(1)  210/    2CB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    2CB1 : FA 80                          ani   080h                  ; check it
(1)  212/    2CB3 : CA 2C C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    2CB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    2CB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    2CBA : FF 01                          smi   1                     ; minus 1
(1)  216/    2CBC : BF                             phi   R15                    ; and put it back
(1)  217/    2CBD : C0 2C B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    2CC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    2CC1 : FE                             shl                         ; shift out high 1 bit
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 66 - 6/19/2013 13:05:07


(1)  220/    2CC2 : A8                             plo   r8                    ; set aside
(1)  221/    2CC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    2CC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    2CC5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    2CC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    2CC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    2CC8 : A8                             plo   r8                    ; and put it back
(1)  227/    2CC9 : 87                             glo   F7                   ; get signs
(1)  228/    2CCA : F6                             shr                         ; get sign 1
(1)  229/    2CCB : 98                             ghi   r8                    ; recover exponent
(1)  230/    2CCC : 76                             shrc                        ; shift in sign
(1)  231/    2CCD : B8                             phi   r8                    ; put it back
(1)  232/    2CCE : 12                             inc	r2	;wjr release work area
(1)  233/    2CCF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    2CD3 : (MACRO)             	   popr R12	;wjr
(1)  235/    2CD7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    2CDB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    2CDC :                     
(1)  238/    2CDC :                     ; ************************************
(1)  239/    2CDC :                     ; *** Get exponenst from arguments ***
(1)  240/    2CDC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    2CDC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    2CDC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    2CDC :                     ; ***          RF.0 - exp2         ***
(1)  244/    2CDC :                     ; ************************************
(1)  245/    2CDC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    2CDD : FE                             shl                         ; shift it into DF
(1)  247/    2CDE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    2CDF : 7E                             shlc                        ; shift in first bit
(1)  249/    2CE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    2CE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    2CE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    2CE2 : FE                             shl                         ; shift it into DF
(1)  253/    2CE3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    2CE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    2CE5 : AF                             plo   R15                    ; put into RF
(1)  256/    2CE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    2CE7 :                     
(1)  258/    2CE7 :                     ; ************************************
(1)  259/    2CE7 :                     ; *** Get signs from arguments     ***
(1)  260/    2CE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    2CE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    2CE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    2CE7 :                     ; ************************************
(1)  264/    2CE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    2CE8 : FE                             shl                         ; shift into DF
(1)  266/    2CE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    2CEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    2CEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    2CEC : A7                             plo   F7                    ; save them
(1)  270/    2CED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    2CEE :                     
(1)  272/    2CEE :                     ; ***************************************
(1)  273/    2CEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    2CEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    2CEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    2CEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    2CEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    2CEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    2CEE :                     ; ***        F7.0 - signs        ***
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 67 - 6/19/2013 13:05:07


(1)  280/    2CEE :                     ; ***************************************
(1)  281/    2CEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    2CEF : CA 2D 07                       lbnz  add_a1nz
(1)  283/    2CF2 : 88                             glo   r8
(1)  284/    2CF3 : CA 2D 07                       lbnz  add_a1nz
(1)  285/    2CF6 : 99                             ghi   F9
(1)  286/    2CF7 : CA 2D 07                       lbnz  add_a1nz
(1)  287/    2CFA : 89                             glo   F9
(1)  288/    2CFB : CA 2D 07                       lbnz  add_a1nz
(1)  289/    2CFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    2CFF : B8                             phi   r8
(1)  291/    2D00 : 8A                             glo   R10
(1)  292/    2D01 : A8                             plo   r8
(1)  293/    2D02 : 9B                             ghi   FB
(1)  294/    2D03 : B9                             phi   F9
(1)  295/    2D04 : 8B                             glo   FB
(1)  296/    2D05 : A9                             plo   F9
(1)  297/    2D06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2D07 :                     
(1)  299/    2D07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2D08 : CA 2D 18                       lbnz  add_a2nz
(1)  301/    2D0B : 8A                             glo   R10
(1)  302/    2D0C : CA 2D 18                       lbnz  add_a2nz
(1)  303/    2D0F : 9B                             ghi   FB
(1)  304/    2D10 : CA 2D 18                       lbnz  add_a2nz
(1)  305/    2D13 : 8B                             glo   FB
(1)  306/    2D14 : CA 2D 18                       lbnz  add_a2nz
(1)  307/    2D17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2D18 :                                
(1)  309/    2D18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    2D1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2D22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2D27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2D28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    2D2B : 9F                             ghi   R15
(1)  315/    2D2C : 52                             str   r2
(1)  316/    2D2D : 8F                             glo   R15
(1)  317/    2D2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    2D2F : CB 2D 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2D32 :                     
(1)  320/    2D32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2D33 : AE                             plo   R14
(1)  322/    2D34 : 9A                             ghi   R10
(1)  323/    2D35 : B8                             phi   r8
(1)  324/    2D36 : 8E                             glo   R14
(1)  325/    2D37 : BA                             phi   R10
(1)  326/    2D38 : 88                             glo   r8
(1)  327/    2D39 : AE                             plo   R14
(1)  328/    2D3A : 8A                             glo   R10
(1)  329/    2D3B : A8                             plo   r8
(1)  330/    2D3C : 8E                             glo   R14
(1)  331/    2D3D : AA                             plo   R10
(1)  332/    2D3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    2D3F : AE                             plo   R14
(1)  334/    2D40 : 9B                             ghi   FB
(1)  335/    2D41 : B9                             phi   F9
(1)  336/    2D42 : 8E                             glo   R14
(1)  337/    2D43 : BB                             phi   FB
(1)  338/    2D44 : 89                             glo   F9
(1)  339/    2D45 : AE                             plo   R14
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 68 - 6/19/2013 13:05:07


(1)  340/    2D46 : 8B                             glo   FB
(1)  341/    2D47 : A9                             plo   F9
(1)  342/    2D48 : 8E                             glo   R14
(1)  343/    2D49 : AB                             plo   FB
(1)  344/    2D4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    2D4B : AE                             plo   R14
(1)  346/    2D4C : 8F                             glo   R15
(1)  347/    2D4D : BF                             phi   R15
(1)  348/    2D4E : 8E                             glo   R14
(1)  349/    2D4F : AF                             plo   R15
(1)  350/    2D50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2D53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2D55 : B8                             phi   r8
(1)  353/    2D56 : BA                             phi   R10
(1)  354/    2D57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2D59 : 52                             str   r2
(1)  356/    2D5A : 88                             glo   r8
(1)  357/    2D5B : F1                             or
(1)  358/    2D5C : A8                             plo   r8
(1)  359/    2D5D : 8A                             glo   R10
(1)  360/    2D5E : F1                             or
(1)  361/    2D5F : AA                             plo   R10
(1)  362/    2D60 : 9F                             ghi   R15                    ; get exp1
(1)  363/    2D61 : 52                             str   r2                    ; place into memory
(1)  364/    2D62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2D63 : F7                             sm                          ; see if match to exp1
(1)  366/    2D64 : C2 2D 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2D67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2D68 : FC 01                          adi   1
(1)  369/    2D6A : AF                             plo   R15
(1)  370/    2D6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    2D6C : F6                             shr
(1)  372/    2D6D : AA                             plo   R10
(1)  373/    2D6E : 9B                             ghi   FB
(1)  374/    2D6F : 76                             shrc
(1)  375/    2D70 : BB                             phi   FB
(1)  376/    2D71 : 8B                             glo   FB
(1)  377/    2D72 : 76                             shrc
(1)  378/    2D73 : AB                             plo   FB
(1)  379/    2D74 : C0 2D 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2D77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2D78 : 52                             str   r2
(1)  382/    2D79 : F6                             shr
(1)  383/    2D7A : F3                             xor
(1)  384/    2D7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    2D7D : CA 2D 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2D80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2D83 : C0 2D BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2D86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2D87 : 52                             str   r2
(1)  390/    2D88 : 89                             glo   F9
(1)  391/    2D89 : F7                             sm
(1)  392/    2D8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    2D8B : 9B                             ghi   FB
(1)  394/    2D8C : 52                             str   r2
(1)  395/    2D8D : 99                             ghi   F9
(1)  396/    2D8E : 77                             smb
(1)  397/    2D8F : BC                             phi   R12
(1)  398/    2D90 : 8A                             glo   R10
(1)  399/    2D91 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 69 - 6/19/2013 13:05:07


(1)  400/    2D92 : 88                             glo   r8
(1)  401/    2D93 : 77                             smb
(1)  402/    2D94 : AD                             plo   R13
(1)  403/    2D95 : 9A                             ghi   R10
(1)  404/    2D96 : 52                             str   r2
(1)  405/    2D97 : 98                             ghi   r8
(1)  406/    2D98 : 77                             smb
(1)  407/    2D99 : BD                             phi   R13
(1)  408/    2D9A : CB 2D A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    2D9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    2D9E : B8                             phi   r8
(1)  411/    2D9F : 8D                             glo   R13
(1)  412/    2DA0 : A8                             plo   r8
(1)  413/    2DA1 : 9C                             ghi   R12
(1)  414/    2DA2 : B9                             phi   F9
(1)  415/    2DA3 : 8C                             glo   R12
(1)  416/    2DA4 : A9                             plo   F9
(1)  417/    2DA5 : C0 2D BF                       lbr   add_fnl               ; finalize
(1)  418/    2DA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    2DA9 : 52                             str   r2
(1)  420/    2DAA : 8B                             glo   FB
(1)  421/    2DAB : F7                             sm
(1)  422/    2DAC : A9                             plo   F9
(1)  423/    2DAD : 99                             ghi   F9
(1)  424/    2DAE : 52                             str   r2
(1)  425/    2DAF : 9B                             ghi   FB
(1)  426/    2DB0 : 77                             smb
(1)  427/    2DB1 : B9                             phi   F9
(1)  428/    2DB2 : 88                             glo   r8
(1)  429/    2DB3 : 52                             str   r2
(1)  430/    2DB4 : 8A                             glo   R10
(1)  431/    2DB5 : 77                             smb
(1)  432/    2DB6 : A8                             plo   r8
(1)  433/    2DB7 : 98                             ghi   r8
(1)  434/    2DB8 : 52                             str   r2
(1)  435/    2DB9 : 9A                             ghi   R10
(1)  436/    2DBA : 77                             smb
(1)  437/    2DBB : B8                             phi   r8
(1)  438/    2DBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    2DBD : FE                             shl
(1)  440/    2DBE : A7                             plo   F7
(1)  441/    2DBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    2DC0 : CA 2D DD                       lbnz  add_nz                ; jump if not
(1)  443/    2DC3 : 88                             glo   r8
(1)  444/    2DC4 : CA 2D DD                       lbnz  add_nz
(1)  445/    2DC7 : 99                             ghi   F9
(1)  446/    2DC8 : CA 2D DD                       lbnz  add_nz
(1)  447/    2DCB : 89                             glo   F9
(1)  448/    2DCC : CA 2D DD                       lbnz  add_nz
(1)  449/    2DCF : 12                             inc	r2	;wjr release work area
(1)  450/    2DD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    2DD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    2DD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    2DDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    2DDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    2DDE : C2 2D EB                       lbz   add_nx                ; jump if not
(1)  456/    2DE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    2DE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    2DE5 : FC 01                          adi   1                     ; increment it
(1)  459/    2DE7 : BF                             phi   R15                    ; and put it back
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 70 - 6/19/2013 13:05:07


(1)  460/    2DE8 : C0 2D DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    2DEB :                     
(1)  462/    2DEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    2DEC : F6                             shr
(1)  464/    2DED : A7                             plo   F7
(1)  465/    2DEE : C0 2C B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    2DF1 :                     
(1)  467/    2DF1 :                     ; ***************************************
(1)  468/    2DF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    2DF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    2DF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    2DF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    2DF1 :                     ; ***************************************
(1)  473/    2DF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    2DF2 : FB 80                          xri   080h
(1)  475/    2DF4 : BA                             phi   R10                    ; and put it back
(1)  476/    2DF5 : C0 2C EE                       lbr   fp_add                ; now just add
(1)  477/    2DF8 :                     
(1)  478/    2DF8 :                     ; ***************************************
(1)  479/    2DF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    2DF8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    2DF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    2DF8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    2DF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    2DF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    2DF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    2DF8 :                     ; ***************************************
(1)  487/    2DF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    2DF9 : CA 2E 09                       lbnz  div_a1nz
(1)  489/    2DFC : 88                             glo   r8
(1)  490/    2DFD : CA 2E 09                       lbnz  div_a1nz
(1)  491/    2E00 : 99                             ghi   F9
(1)  492/    2E01 : CA 2E 09                       lbnz  div_a1nz
(1)  493/    2E04 : 89                             glo   F9
(1)  494/    2E05 : CA 2E 09                       lbnz  div_a1nz
(1)  495/    2E08 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    2E09 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    2E0A : CA 2E 27                       lbnz  div_a2nz
(1)  498/    2E0D : 8A                             glo   R10
(1)  499/    2E0E : CA 2E 27                       lbnz  div_a2nz
(1)  500/    2E11 : 9B                             ghi   FB
(1)  501/    2E12 : CA 2E 27                       lbnz  div_a2nz
(1)  502/    2E15 : 8B                             glo   FB
(1)  503/    2E16 : CA 2E 27                       lbnz  div_a2nz
(1)  504/    2E19 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    2E1A : FA 80                          ani   080h                  ; want only sign
(1)  506/    2E1C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    2E1E : B8                             phi   r8                    ; put into answer
(1)  508/    2E1F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    2E21 : A8                             plo   r8 
(1)  510/    2E22 : F8 00                          ldi   0
(1)  511/    2E24 : B9                             phi   F9
(1)  512/    2E25 : A9                             plo   F9
(1)  513/    2E26 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    2E27 :                     
(1)  515/    2E27 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    2E2C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    2E31 : (MACRO)             	   pushr R13	;wjr
(1)  518/    2E36 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    2E37 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 71 - 6/19/2013 13:05:07


(1)  520/    2E37 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    2E3A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    2E3D : 8F                             glo   R15                    ; get exp2
(1)  523/    2E3E : FF 7F                          smi   127                   ; remove bias
(1)  524/    2E40 : 52                             str   r2                    ; place into memory
(1)  525/    2E41 : 9F                             ghi   R15                    ; get exp1
(1)  526/    2E42 : FF 7F                          smi   127                   ; remove bias
(1)  527/    2E44 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    2E45 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    2E47 : 73                             stxd                        ; save onto stack
(1)  530/    2E48 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    2E49 : 52                             str   r2
(1)  532/    2E4A : F6                             shr
(1)  533/    2E4B : F3                             xor
(1)  534/    2E4C : 73                             stxd                        ; place onto stack
(1)  535/    2E4D : F8 00                          ldi   0                     ; setup man
(1)  536/    2E4F : BA                             phi   R10
(1)  537/    2E50 : 8A                             glo   R10
(1)  538/    2E51 : F9 80                          ori   080h
(1)  539/    2E53 : AA                             plo   R10
(1)  540/    2E54 : F8 00                          ldi   0                     ; setup div
(1)  541/    2E56 : B8                             phi   r8
(1)  542/    2E57 : 88                             glo   r8
(1)  543/    2E58 : F9 80                          ori   080h
(1)  544/    2E5A : A8                             plo   r8
(1)  545/    2E5B : F8 00                          ldi   0                     ; setup result
(1)  546/    2E5D : BC                             phi   R12
(1)  547/    2E5E : AC                             plo   R12
(1)  548/    2E5F : B7                             phi   F7
(1)  549/    2E60 : A7                             plo   F7
(1)  550/    2E61 : AF                             plo   R15                    ; setup quotient
(1)  551/    2E62 : BF                             phi   R15
(1)  552/    2E63 : BD                             phi   R13
(1)  553/    2E64 : AD                             plo   R13
(1)  554/    2E65 : F8 80                          ldi   080h
(1)  555/    2E67 : AF                             plo   R15
(1)  556/    2E68 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    2E69 : CA 2E 7B                       lbnz  div_go1
(1)  558/    2E6C : 88                             glo   r8
(1)  559/    2E6D : CA 2E 7B                       lbnz  div_go1
(1)  560/    2E70 : 99                             ghi   F9
(1)  561/    2E71 : CA 2E 7B                       lbnz  div_go1
(1)  562/    2E74 : 89                             glo   F9
(1)  563/    2E75 : CA 2E 7B                       lbnz  div_go1
(1)  564/    2E78 : C0 2E DB                       lbr   div_z
(1)  565/    2E7B : 9A                  div_go1:   ghi   R10
(1)  566/    2E7C : CA 2E 8E                       lbnz  div_go
(1)  567/    2E7F : 8A                             glo   R10
(1)  568/    2E80 : CA 2E 8E                       lbnz  div_go
(1)  569/    2E83 : 9B                             ghi   FB
(1)  570/    2E84 : CA 2E 8E                       lbnz  div_go
(1)  571/    2E87 : 8B                             glo   FB
(1)  572/    2E88 : CA 2E 8E                       lbnz  div_go
(1)  573/    2E8B : C0 2E DB                       lbr   div_z                 ; nothing more to do
(1)  574/    2E8E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    2E8F : 52                             str   r2
(1)  576/    2E90 : 89                             glo   F9
(1)  577/    2E91 : F7                             sm
(1)  578/    2E92 : 9B                             ghi   FB
(1)  579/    2E93 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 72 - 6/19/2013 13:05:07


(1)  580/    2E94 : 99                             ghi   F9
(1)  581/    2E95 : 77                             smb
(1)  582/    2E96 : 8A                             glo   R10
(1)  583/    2E97 : 52                             str   r2
(1)  584/    2E98 : 88                             glo   r8
(1)  585/    2E99 : 77                             smb
(1)  586/    2E9A : 9A                             ghi   R10
(1)  587/    2E9B : 52                             str   r2
(1)  588/    2E9C : 98                             ghi   r8
(1)  589/    2E9D : 77                             smb
(1)  590/    2E9E : CB 2E C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    2EA1 : 8B                             glo   FB                    ; div -= man
(1)  592/    2EA2 : 52                             str   r2
(1)  593/    2EA3 : 89                             glo   F9
(1)  594/    2EA4 : F7                             sm
(1)  595/    2EA5 : A9                             plo   F9
(1)  596/    2EA6 : 9B                             ghi   FB
(1)  597/    2EA7 : 52                             str   r2
(1)  598/    2EA8 : 99                             ghi   F9
(1)  599/    2EA9 : 77                             smb
(1)  600/    2EAA : B9                             phi   F9
(1)  601/    2EAB : 8A                             glo   R10
(1)  602/    2EAC : 52                             str   r2
(1)  603/    2EAD : 88                             glo   r8
(1)  604/    2EAE : 77                             smb
(1)  605/    2EAF : A8                             plo   r8
(1)  606/    2EB0 : 9A                             ghi   R10
(1)  607/    2EB1 : 52                             str   r2
(1)  608/    2EB2 : 98                             ghi   r8
(1)  609/    2EB3 : 77                             smb
(1)  610/    2EB4 : B8                             phi   r8
(1)  611/    2EB5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    2EB6 : 52                             str   r2
(1)  613/    2EB7 : 9C                             ghi   R12
(1)  614/    2EB8 : F1                             or
(1)  615/    2EB9 : BC                             phi   R12
(1)  616/    2EBA : 8F                             glo   R15
(1)  617/    2EBB : 52                             str   r2
(1)  618/    2EBC : 8C                             glo   R12
(1)  619/    2EBD : F1                             or
(1)  620/    2EBE : AC                             plo   R12
(1)  621/    2EBF : 9D                             ghi   R13
(1)  622/    2EC0 : 52                             str   r2
(1)  623/    2EC1 : 97                             ghi   F7
(1)  624/    2EC2 : F1                             or
(1)  625/    2EC3 : B7                             phi   F7
(1)  626/    2EC4 : 8D                             glo   R13
(1)  627/    2EC5 : 52                             str   r2
(1)  628/    2EC6 : 87                             glo   F7
(1)  629/    2EC7 : F1                             or
(1)  630/    2EC8 : A7                             plo   F7
(1)  631/    2EC9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    2ECA : 2C A3                          dw    fp_shr_fd
(1)  633/    2ECC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    2ECD : F6                             shr
(1)  635/    2ECE : BA                             phi   R10
(1)  636/    2ECF : 8A                             glo   R10
(1)  637/    2ED0 : 76                             shrc
(1)  638/    2ED1 : AA                             plo   R10
(1)  639/    2ED2 : 9B                             ghi   FB
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 73 - 6/19/2013 13:05:07


(1)  640/    2ED3 : 76                             shrc
(1)  641/    2ED4 : BB                             phi   FB
(1)  642/    2ED5 : 8B                             glo   FB
(1)  643/    2ED6 : 76                             shrc
(1)  644/    2ED7 : AB                             plo   FB
(1)  645/    2ED8 : C0 2E 68                       lbr   div_lp                ; loop back until done
(1)  646/    2EDB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    2EDC : B8                             phi   r8
(1)  648/    2EDD : 8C                             glo   R12
(1)  649/    2EDE : A8                             plo   r8
(1)  650/    2EDF : 97                             ghi   F7
(1)  651/    2EE0 : B9                             phi   F9
(1)  652/    2EE1 : 87                             glo   F7
(1)  653/    2EE2 : A9                             plo   F9
(1)  654/    2EE3 : 60                             irx                         ; recover sign
(1)  655/    2EE4 : 72                             ldxa
(1)  656/    2EE5 : A7                             plo   F7
(1)  657/    2EE6 : F0                             ldx                         ; recover answer exponent
(1)  658/    2EE7 : BF                             phi   R15
(1)  659/    2EE8 : C0 2C B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    2EEB :                     
(1)  661/    2EEB :                     ; ***************************************
(1)  662/    2EEB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    2EEB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    2EEB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    2EEB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    2EEB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    2EEB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    2EEB :                     ; ***        F7.0 - signs             ***
(1)  669/    2EEB :                     ; ***************************************
(1)  670/    2EEB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    2EF0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    2EF5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    2EFA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    2EFB :                     
(1)  675/    2EFB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    2EFE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    2F01 : 8F                             glo   R15                    ; get exp2
(1)  678/    2F02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    2F04 : 52                             str   r2                    ; place into memory
(1)  680/    2F05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    2F06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    2F08 : F4                             add                         ; add in exponent 2
(1)  683/    2F09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    2F0B : 73                             stxd                        ; place onto stack
(1)  685/    2F0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    2F0D : 52                             str   r2
(1)  687/    2F0E : F6                             shr
(1)  688/    2F0F : F3                             xor
(1)  689/    2F10 : 73                             stxd                        ; place onto stack
(1)  690/    2F11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    2F12 : 73                             stxd                        ; save on stack
(1)  692/    2F13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    2F14 : 73                             stxd
(1)  694/    2F15 : 86                             glo   r6
(1)  695/    2F16 : 73                             stxd
(1)  696/    2F17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    2F19 : 73                             stxd
(1)  698/    2F1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    2F1B : AE                             plo   R14
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 74 - 6/19/2013 13:05:07


(1)  700/    2F1C : B6                             phi   r6
(1)  701/    2F1D : A6                             plo   r6
(1)  702/    2F1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    2F1F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    2F20 : F9 80                          ori   080h
(1)  705/    2F22 : A8                             plo   r8
(1)  706/    2F23 : F8 00                          ldi   0
(1)  707/    2F25 : BC                             phi   R12                    ; set result to 0
(1)  708/    2F26 : AC                             plo   R12
(1)  709/    2F27 : B7                             phi   F7
(1)  710/    2F28 : A7                             plo   F7
(1)  711/    2F29 : BF                             phi   R15
(1)  712/    2F2A : AF                             plo   R15
(1)  713/    2F2B : BD                             phi   R13
(1)  714/    2F2C : AD                             plo   R13
(1)  715/    2F2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    2F2E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    2F2F : F9 80                          ori   080h
(1)  718/    2F31 : AA                             plo   R10
(1)  719/    2F32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    2F33 : CA 2F 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    2F36 : 9B                             ghi   FB
(1)  722/    2F37 : CA 2F 42                       lbnz  mul_go1
(1)  723/    2F3A : 8A                             glo   R10
(1)  724/    2F3B : CA 2F 42                       lbnz  mul_go1
(1)  725/    2F3E : 9A                             ghi   R10
(1)  726/    2F3F : C2 2F BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    2F42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    2F43 : F6                             shr
(1)  729/    2F44 : BA                             phi   R10
(1)  730/    2F45 : 8A                             glo   R10
(1)  731/    2F46 : 76                             shrc
(1)  732/    2F47 : AA                             plo   R10
(1)  733/    2F48 : 9B                             ghi   FB
(1)  734/    2F49 : 76                             shrc
(1)  735/    2F4A : BB                             phi   FB
(1)  736/    2F4B : 8B                             glo   FB
(1)  737/    2F4C : 76                             shrc
(1)  738/    2F4D : AB                             plo   FB
(1)  739/    2F4E : CB 2F 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    2F51 : 89                             glo   F9                    ; res += mul
(1)  741/    2F52 : 52                             str   r2
(1)  742/    2F53 : 87                             glo   F7
(1)  743/    2F54 : F4                             add
(1)  744/    2F55 : A7                             plo   F7
(1)  745/    2F56 : 99                             ghi   F9
(1)  746/    2F57 : 52                             str   r2
(1)  747/    2F58 : 97                             ghi   F7
(1)  748/    2F59 : 74                             adc
(1)  749/    2F5A : B7                             phi   F7
(1)  750/    2F5B : 88                             glo   r8
(1)  751/    2F5C : 52                             str   r2
(1)  752/    2F5D : 8C                             glo   R12
(1)  753/    2F5E : 74                             adc
(1)  754/    2F5F : AC                             plo   R12
(1)  755/    2F60 : 98                             ghi   r8
(1)  756/    2F61 : 52                             str   r2
(1)  757/    2F62 : 9C                             ghi   R12
(1)  758/    2F63 : 74                             adc
(1)  759/    2F64 : BC                             phi   R12
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 75 - 6/19/2013 13:05:07


(1)  760/    2F65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    2F66 : 52                             str   r2
(1)  762/    2F67 : 8D                             glo   R13
(1)  763/    2F68 : F4                             add
(1)  764/    2F69 : AD                             plo   R13
(1)  765/    2F6A : 96                             ghi   r6
(1)  766/    2F6B : 52                             str   r2
(1)  767/    2F6C : 96                             ghi   r6
(1)  768/    2F6D : 52                             str   r2
(1)  769/    2F6E : 9D                             ghi   R13
(1)  770/    2F6F : 74                             adc
(1)  771/    2F70 : BD                             phi   R13
(1)  772/    2F71 : 8E                             glo   R14
(1)  773/    2F72 : 52                             str   r2
(1)  774/    2F73 : 8F                             glo   R15
(1)  775/    2F74 : 74                             adc
(1)  776/    2F75 : AF                             plo   R15
(1)  777/    2F76 : 9E                             ghi   R14
(1)  778/    2F77 : 52                             str   r2
(1)  779/    2F78 : 9F                             ghi   R15
(1)  780/    2F79 : 74                             adc
(1)  781/    2F7A : BF                             phi   R15
(1)  782/    2F7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    2F7C : C2 2F 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    2F7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    2F80 : FC 01                          adi   1
(1)  786/    2F82 : AD                             plo   R13
(1)  787/    2F83 : 9D                             ghi   R13
(1)  788/    2F84 : 7C 00                          adci  0
(1)  789/    2F86 : BD                             phi   R13
(1)  790/    2F87 : 8F                             glo   R15
(1)  791/    2F88 : 7C 00                          adci  0
(1)  792/    2F8A : AF                             plo   R15
(1)  793/    2F8B : 9F                             ghi   R15
(1)  794/    2F8C : 7C 00                          adci  0
(1)  795/    2F8E : BF                             phi   R15
(1)  796/    2F8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    2F90 : F0                             ldx
(1)  798/    2F91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    2F93 : 73                             stxd                        ; and put it back
(1)  800/    2F94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    2F95 : FE                             shl
(1)  802/    2F96 : A9                             plo   F9
(1)  803/    2F97 : 99                             ghi   F9
(1)  804/    2F98 : 7E                             shlc
(1)  805/    2F99 : B9                             phi   F9
(1)  806/    2F9A : 88                             glo   r8
(1)  807/    2F9B : 7E                             shlc
(1)  808/    2F9C : A8                             plo   r8
(1)  809/    2F9D : 98                             ghi   r8
(1)  810/    2F9E : 7E                             shlc
(1)  811/    2F9F : B8                             phi   r8
(1)  812/    2FA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    2FA1 : FE                             shl
(1)  814/    2FA2 : A6                             plo   r6
(1)  815/    2FA3 : 96                             ghi   r6
(1)  816/    2FA4 : 7E                             shlc
(1)  817/    2FA5 : B6                             phi   r6
(1)  818/    2FA6 : 8E                             glo   R14
(1)  819/    2FA7 : 7E                             shlc
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 76 - 6/19/2013 13:05:07


(1)  820/    2FA8 : AE                             plo   R14
(1)  821/    2FA9 : 9E                             ghi   R14
(1)  822/    2FAA : 7E                             shlc
(1)  823/    2FAB : BE                             phi   R14
(1)  824/    2FAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    2FAD : C2 2F 32                       lbz   mul_lp1               ; jump if not
(1)  826/    2FB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    2FB2 : B8                             phi   r8
(1)  828/    2FB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    2FB4 : F9 01                          ori   1
(1)  830/    2FB6 : A6                             plo   r6
(1)  831/    2FB7 : C0 2F 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    2FBA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    2FBB : 72                             ldxa
(1)  834/    2FBC : AE                             plo   R14                    ; set aside
(1)  835/    2FBD : 72                             ldxa
(1)  836/    2FBE : A6                             plo   r6
(1)  837/    2FBF : 72                             ldxa
(1)  838/    2FC0 : B6                             phi   r6
(1)  839/    2FC1 : F0                             ldx
(1)  840/    2FC2 : BE                             phi   R14
(1)  841/    2FC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    2FC4 : B8                             phi   r8
(1)  843/    2FC5 : 8C                             glo   R12
(1)  844/    2FC6 : A8                             plo   r8
(1)  845/    2FC7 : 97                             ghi   F7
(1)  846/    2FC8 : B9                             phi   F9
(1)  847/    2FC9 : 87                             glo   F7
(1)  848/    2FCA : A9                             plo   F9
(1)  849/    2FCB : 8E                             glo   R14
(1)  850/    2FCC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    2FCD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    2FCE : FF 02                          smi   2                     ; see if <2
(1)  853/    2FD0 : CB 2F E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    2FD3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    2FD4 : 2C 72                          dw    fp_shr_1
(1)  856/    2FD6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    2FD7 : 2C A3                          dw    fp_shr_fd
(1)  858/    2FD9 : CB 2F E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    2FDC : 88                             glo   r8                    ; set high bit
(1)  860/    2FDD : F9 80                          ori   080h
(1)  861/    2FDF : A8                             plo   r8
(1)  862/    2FE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    2FE1 : C0 2F CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    2FE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    2FE5 : 72                             ldxa
(1)  866/    2FE6 : A7                             plo   F7
(1)  867/    2FE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    2FE8 : AC                             plo   R12
(1)  869/    2FE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    2FEA : CA 2F FC                       lbnz  mul_lp3a
(1)  871/    2FED : 8F                             glo   R15
(1)  872/    2FEE : CA 2F FC                       lbnz  mul_lp3a
(1)  873/    2FF1 : 9D                             ghi   R13
(1)  874/    2FF2 : CA 2F FC                       lbnz  mul_lp3a
(1)  875/    2FF5 : 8D                             glo   R13
(1)  876/    2FF6 : CA 2F FC                       lbnz  mul_lp3a
(1)  877/    2FF9 : C0 30 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    2FFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    2FFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 77 - 6/19/2013 13:05:07


(1)  880/    3000 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    3003 : CB 2F E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    3006 : 88                             glo   r8                    ; set high bit
(1)  883/    3007 : F9 80                          ori   080h
(1)  884/    3009 : A8                             plo   r8
(1)  885/    300A : C0 2F E9                       lbr   mul_lp3
(1)  886/    300D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    300E : BF                             phi   R15                    ; to high R15
(1)  888/    300F : C0 2C B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    3012 :                     
(1)  890/    3012 :                     ; ***************************************
(1)  891/    3012 :                     ; *** Convert ascii to floating point ***
(1)  892/    3012 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    3012 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    3012 :                     ; ***************************************
(1)  895/    3012 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    3013 : FF 20                          smi   ' '                   ; check for space
(1)  897/    3015 : C2 30 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    3018 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    3019 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    301A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    301C : CA 30 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    301F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    3021 : 73                             stxd                        ; place onto stack
(1)  904/    3022 : 1F                             inc   R15                    ; move past sign
(1)  905/    3023 : C0 30 30                       lbr   atof_go1              ; and continue
(1)  906/    3026 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    3028 : 73                             stxd                        ; place onto stack
(1)  908/    3029 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    302A : FF 2B                          smi   '+'
(1)  910/    302C : CA 30 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    302F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    3030 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    3032 : B8                             phi   r8
(1)  914/    3033 : A8                             plo   r8
(1)  915/    3034 : B9                             phi   F9
(1)  916/    3035 : A9                             plo   F9
(1)  917/    3036 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    3037 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    303A : CB 30 67                       lbnf  atof_no1              ; jump if not
(1)  920/    303D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    303E : BA                             phi   R10
(1)  922/    303F : 88                             glo   r8
(1)  923/    3040 : AA                             plo   R10
(1)  924/    3041 : 99                             ghi   F9
(1)  925/    3042 : BB                             phi   FB
(1)  926/    3043 : 89                             glo   F9
(1)  927/    3044 : AB                             plo   FB
(1)  928/    3045 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    3048 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    304B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    304E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    3051 : 4F                             lda   R15                    ; get number
(1)  933/    3052 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    3054 : 52                             str   r2                    ; setup for add
(1)  935/    3055 : 89                             glo   F9                    ; add in next digit
(1)  936/    3056 : F4                             add
(1)  937/    3057 : A9                             plo   F9
(1)  938/    3058 : 99                             ghi   F9                    ; propagate carry
(1)  939/    3059 : 7C 00                          adci  0
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 78 - 6/19/2013 13:05:07


(1)  940/    305B : B9                             phi   F9
(1)  941/    305C : 88                             glo   r8
(1)  942/    305D : 7C 00                          adci  0
(1)  943/    305F : A8                             plo   r8
(1)  944/    3060 : 98                             ghi   r8
(1)  945/    3061 : 7C 00                          adci  0
(1)  946/    3063 : B8                             phi   r8
(1)  947/    3064 : C0 30 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    3067 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    3068 : FF 2E                          smi   '.'
(1)  950/    306A : CA 30 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    306D : 1F                             inc   R15                    ; move past decimal
(1)  952/    306E : F8 31               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    3070 : BA                             phi   R10
(1)  954/    3071 : F8 A3                          ldi   scratch&255
(1)  955/    3073 : AA                             plo   R10
(1)  956/    3074 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    3076 : AC                             plo   R12
(1)  958/    3077 : F8 00               atof_lpx:  ldi   0
(1)  959/    3079 : 5A                             str   R10
(1)  960/    307A : 1A                             inc   R10
(1)  961/    307B : 2C                             dec   R12
(1)  962/    307C : 8C                             glo   R12
(1)  963/    307D : CA 30 77                       lbnz  atof_lpx
(1)  964/    3080 : F8 31                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    3082 : BA                             phi   R10
(1)  966/    3083 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    3085 : AA                             plo   R10
(1)  968/    3086 : F8 01                          ldi   1                     ; setup count
(1)  969/    3088 : AC                             plo   R12
(1)  970/    3089 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    308B : BC                             phi   R12
(1)  972/    308C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    308D : FF 11                          smi   17
(1)  974/    308F : C2 30 A8                       lbz   atof_dn3              ; jump if so
(1)  975/    3092 : 0F                             ldn   R15                    ; get character
(1)  976/    3093 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    3094 : 2C 62                          dw    f_isnum
(1)  978/    3096 : CB 30 A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    3099 : 4F                             lda   R15                    ; get character
(1)  980/    309A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    309C : 5A                             str   R10                    ; write into bcd area
(1)  982/    309D : 1A                             inc   R10
(1)  983/    309E : 1C                             inc   R12                    ; increment count
(1)  984/    309F : CA 30 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    30A2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    30A4 : BC                             phi   R12
(1)  987/    30A5 : C0 30 8C                       lbr   atof_lp2
(1)  988/    30A8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    30A9 : CA 30 C2                       lbnz  atof_nz
(1)  990/    30AC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    30AD : CA 30 C2                       lbnz  atof_nz
(1)  992/    30B0 : 88                             glo   r8
(1)  993/    30B1 : CA 30 C2                       lbnz  atof_nz
(1)  994/    30B4 : 99                             ghi   F9
(1)  995/    30B5 : CA 30 C2                       lbnz  atof_nz
(1)  996/    30B8 : 89                             glo   F9
(1)  997/    30B9 : CA 30 C2                       lbnz  atof_nz
(1)  998/    30BC : 60                             irx                         ; recover sign
(1)  999/    30BD : F0                             ldx
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 79 - 6/19/2013 13:05:07


(1) 1000/    30BE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    30BF : C0 31 95                       lbr	atof_end               ; and return
(1) 1002/    30C2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    30C4 : BC                             phi   R12
(1) 1004/    30C5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    30C6 : FA 80                          ani   080h
(1) 1006/    30C8 : CA 31 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    30CB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    30CE : F8 31                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    30D0 : BA                             phi   R10
(1) 1010/    30D1 : F8 A3                          ldi   255&scratch
(1) 1011/    30D3 : AA                             plo   R10
(1) 1012/    30D4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    30D6 : 5A                             str   R10
(1) 1014/    30D7 : F8 31                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    30D9 : BA                             phi   R10
(1) 1016/    30DA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    30DC : AA                             plo   R10
(1) 1018/    30DD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    30DF : AE                             plo   R14
(1) 1020/    30E0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    30E2 : AC                             plo   R12
(1) 1022/    30E3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    30E4 : 52                             str   r2                    ; in memory for add
(1) 1024/    30E5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    30E6 : F4                             add                         ; add in carry
(1) 1026/    30E7 : 52                             str   r2                    ; place into memory
(1) 1027/    30E8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    30E9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    30EA : 5A                             str   R10                    ; put it back
(1) 1030/    30EB : FF 0A                          smi   10
(1) 1031/    30ED : CB 30 F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    30F0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    30F1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    30F3 : C8                             lskp                        ; skip next instruction
(1) 1035/    30F4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    30F6 : AE                             plo   R14
(1) 1037/    30F7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    30F8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    30F9 : 8C                             glo   R12                    ; see if done
(1) 1040/    30FA : CA 30 E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    30FD : F8 31                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    30FF : BA                             phi   R10
(1) 1043/    3100 : F8 A3                          ldi   255&scratch
(1) 1044/    3102 : AA                             plo   R10
(1) 1045/    3103 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    3104 : C2 31 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    3107 : 89                             glo   F9                    ; add in the carry
(1) 1048/    3108 : F9 01                          ori   1
(1) 1049/    310A : A9                             plo   F9
(1) 1050/    310B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    310C : FC 01                          adi   1
(1) 1052/    310E : BC                             phi   R12
(1) 1053/    310F : C0 30 C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    3112 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    3113 : 52                             str   r2                    ; into memory
(1) 1056/    3114 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    3116 : F7                             sm
(1) 1058/    3117 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    3119 : BD                             phi   R13                    ; set aside
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 80 - 6/19/2013 13:05:07


(1) 1060/    311A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    311B : A9                             plo   F9
(1) 1062/    311C : 88                             glo   r8
(1) 1063/    311D : B9                             phi   F9
(1) 1064/    311E : 98                             ghi   r8
(1) 1065/    311F : FE                             shl                         ; shift out high bit
(1) 1066/    3120 : A8                             plo   r8
(1) 1067/    3121 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    3122 : F6                             shr
(1) 1069/    3123 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    3124 : 88                             glo   r8                    ; get mantissa
(1) 1071/    3125 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    3126 : A8                             plo   r8                    ; and write it
(1) 1073/    3127 : 60                             irx                         ; point to sign
(1) 1074/    3128 : 98                             ghi   r8                    ; high byte
(1) 1075/    3129 : F1                             or                          ; set sign
(1) 1076/    312A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    312B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    312C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    312E : C2 31 37                       lbz   atof_exp
(1) 1080/    3131 : 0F                             ldn   R15
(1) 1081/    3132 : FF 45                          smi   'E'
(1) 1082/    3134 : CA 31 95                       lbnz  atof_end
(1) 1083/    3137 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    3138 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    3139 : FF 2D                          smi   '-'
(1) 1086/    313B : C2 31 48                       lbz   atof_n
(1) 1087/    313E : 0F                             ldn   R15
(1) 1088/    313F : FF 2B                          smi   '+'
(1) 1089/    3141 : C2 31 45                       lbz   atof_p
(1) 1090/    3144 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    3145 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    3147 : C8                             lskp
(1) 1093/    3148 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    314A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    314B : 1F                             inc   R15                    ; move past sign
(1) 1096/    314C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    314E : AC                             plo   R12
(1) 1098/    314F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    3150 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    3153 : CB 31 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    3156 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    3157 : 52                             str   r2
(1) 1103/    3158 : F6                             shr                         ; multiply by 2
(1) 1104/    3159 : F6                             shr                         ; by 4
(1) 1105/    315A : F4                             add                         ; by 5
(1) 1106/    315B : F6                             shr                         ; by 10
(1) 1107/    315C : 52                             str   r2                    ; put here for add
(1) 1108/    315D : 4F                             lda   R15                    ; recover number
(1) 1109/    315E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    3160 : F4                             add                         ; add with total
(1) 1111/    3161 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    3162 : C0 31 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    3165 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    3166 : C2 31 95                       lbz   atof_end              ; jump if so
(1) 1115/    3169 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    316A : 8C                             glo   R12                    ; save count
(1) 1117/    316B : 73                             stxd
(1) 1118/    316C : 9C                             ghi   R12                    ; save sign
(1) 1119/    316D : 73                             stxd
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(LCC1802fp.inc) - page 81 - 6/19/2013 13:05:07


(1) 1120/    316E : 8F                             glo   R15
(1) 1121/    316F : 73                             stxd
(1) 1122/    3170 : 9F                             ghi   R15
(1) 1123/    3171 : 73                             stxd
(1) 1124/    3172 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    3174 : BA                             phi   R10
(1) 1126/    3175 : F8 20                          ldi   020h
(1) 1127/    3177 : AA                             plo   R10
(1) 1128/    3178 : F8 00                          ldi   0
(1) 1129/    317A : BB                             phi   FB
(1) 1130/    317B : AB                             plo   FB
(1) 1131/    317C : 9C                             ghi   R12
(1) 1132/    317D : C2 31 86                       lbz   atof_div              ; jump if negative
(1) 1133/    3180 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    3183 : C0 31 89                       lbr   atof_go5              ; clean up call
(1) 1135/    3186 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    3189 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    318A : 72                             ldxa
(1) 1138/    318B : BF                             phi   R15
(1) 1139/    318C : 72                             ldxa
(1) 1140/    318D : AF                             plo   R15
(1) 1141/    318E : 72                             ldxa
(1) 1142/    318F : BC                             phi   R12
(1) 1143/    3190 : F0                             ldx
(1) 1144/    3191 : AC                             plo   R12
(1) 1145/    3192 : C0 31 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    3195 :                     atof_end:
(1) 1147/    3195 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    3196 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    319A : (MACRO)             	   popr R12	;wjr
(1) 1150/    319E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    31A2 : (MACRO)             	   Cretn
(1) 1152/    31A3 : 00 00               scratch:   db	00,00
    2875/    31A5 :                     	include IO1802.inc
(1)    1/    31A5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    31A5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    31A5 :                     	align 64
(1)    4/    31C0 :                     _putc:
(1)    5/    31C0 :                     _out5:	
(1)    6/    31C0 : 8C                  	glo	regArg1
(1)    7/    31C1 : 22                  	dec	sp
(1)    8/    31C2 : 52                  	str	sp
(1)    9/    31C3 : 65                  	out	5
(1)   10/    31C4 : (MACRO)             	Cretn
(1)   11/    31C5 :                     _inp:		;raw port input
(1)   12/    31C5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    31C5 : 22                  	dec	sp	;work backwards
(1)   14/    31C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    31C8 : 73                  	stxd		
(1)   16/    31C9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    31CA : FA 07               	ani	0x07	;clean it
(1)   18/    31CC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    31CE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    31D0 : 73                  	stxd		;store it for execution
(1)   21/    31D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    31D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    31D6 : D8                  	sep	rt1	;execute it
(1)   24/    31D7 :                     ;we will come back to here with the input byte in D
(1)   25/    31D7 : 12                  	inc	sp	;step over the work area
(1)   26/    31D8 : AF                  	plo	retVal	;save it to return
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm(IO1802.inc) - page 82 - 6/19/2013 13:05:07


(1)   27/    31D9 : F8 00               	ldi	0
(1)   28/    31DB : BF                  	phi	retval	;clear top byte
(1)   29/    31DC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    31DD : 12                  	inc	sp	;and the D3
(1)   31/    31DE : (MACRO)             	Cretn		;and we're done
(1)   32/    31DF :                     	
(1)   33/    31DF :                     _out:		;raw port output
(1)   34/    31DF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    31DF :                     		;this could be bolder:
(1)   36/    31DF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/    31DF :                     		;then SEP sp
(1)   38/    31DF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    31DF :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    31DF : 22                  	dec	sp	;work backwards
(1)   41/    31E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    31E2 : 73                  	stxd		
(1)   43/    31E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/    31E7 : 8C                  	glo	regarg1	;get the port number
(1)   45/    31E8 : FA 07               	ani	0x07	;clean it
(1)   46/    31EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    31EC : 73                  	stxd		;store it for execution
(1)   48/    31ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    31EE : 52                  	str	sp	;store it where sp points
(1)   50/    31EF : D8                  	sep	rt1	;execute it
(1)   51/    31F0 :                     ;we will come back to here with sp stepped up by one
(1)   52/    31F0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    31F1 : 12                  	inc	sp	;and the D3
(1)   54/    31F2 : (MACRO)             	Cretn		;and we're done
(1)   55/    31F3 :                     	
(1)   56/    31F3 :                     	
    2876/    31F3 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 83 - 6/19/2013 13:05:07


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2D07 C |  ADD_A2NZ :                    2D18 C |
 ADD_FNL :                     2DBF C |  ADD_LP1 :                     2D62 C |
 ADD_LP1DN :                   2D77 C |  ADD_NM :                      2D86 C |
 ADD_NO :                      2DA8 C |  ADD_NS :                      2D50 C |
 ADD_NX :                      2DEB C |  ADD_NZ :                      2DDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    3186 C |
 ATOF_DN3 :                    30A8 C |  ATOF_DN4 :                    3112 C |
 ATOF_DN5 :                    3165 C |  ATOF_END :                    3195 C |
 ATOF_EXP :                    3137 C |  ATOF_GO1 :                    3030 C |
 ATOF_GO5 :                    3189 C |  ATOF_LP1 :                    3036 C |
 ATOF_LP2 :                    308C C |  ATOF_LP3 :                    30C5 C |
 ATOF_LP4 :                    30E3 C |  ATOF_LP5 :                    314F C |
 ATOF_LPX :                    3077 C |  ATOF_N :                      3148 C |
 ATOF_NC4 :                    310B C |  ATOF_NDP :                    306E C |
 ATOF_NM :                     3026 C |  ATOF_NO1 :                    3067 C |
 ATOF_NO4 :                    30F4 C |  ATOF_NZ :                     30C2 C |
 ATOF_P :                      3145 C | *BIGENDIAN :                      0 - |
 BITLOOP331 :                  29B8 C | *BRANCHEXT :                      0 - |
 BVTABLE163 :                  145F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB329 :                2896 C |  CKNEXT331 :                   2A07 C |
 CKTOP331 :                    29A3 C |  CLKPORT :                        2 - |
 CLRLP331 :                    2994 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       2C00 C |  CVIF4 :                       2B00 C |
*DATE :                   6/19/2013 - |  DCKLP331 :                    29BB C |
 DIVLOOP16_16326 :             2752 C | *DIVSETBIT16_16326 :           2784 C |
 DIVSKIP16_16326 :             2781 C |  DIVSKIPCLEAR16_16326 :        2788 C |
 DIVSKIPFINALADD16_16326 :     279A C |  DIVSUB16_16326 :              2773 C |
 DIV_A1NZ :                    2E09 C |  DIV_A2NZ :                    2E27 C |
 DIV_GO :                      2E8E C |  DIV_GO1 :                     2E7B C |
 DIV_LP :                      2E68 C |  DIV_NOPE :                    2EC9 C |
 DIV_Z :                       2EDB C |  DNOADD331 :                   29C3 C |
 DONE327 :                     27D3 C |  DONE330 :                     2974 C |
 DONE331 :                     2A11 C |  DONE337 :                     2B6F C |
 DONE338 :                     2C61 C |  DSHLP331 :                    29D7 C |
 ENDLP328 :                    2861 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       2C6E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      2CEE C |  FP_ADD_12 :                   2C8C C |
 FP_ATOF :                     3012 C |  FP_DIV :                      2DF8 C |
 FP_GETEXP :                   2CDC C |  FP_GETSGN :                   2CE7 C |
 FP_MUL :                      2EEB C |  FP_SC_CLN :                   2CC0 C |
 FP_SC_UP :                    2CB0 C |  FP_SHL_1 :                    2C7F C |
 FP_SHR_1 :                    2C72 C |  FP_SHR_FD :                   2CA3 C |
 FP_SUB :                      2DF1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     2C62 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            86 C |  L10 :                           FF C |
 L100 :                        25CC C |  L101 :                        10CD C |
 L103 :                        25C6 C |  L104 :                        1156 C |
 L105 :                        119F C |  L106 :                        25B7 C |
 L107 :                        1120 C |  L109 :                        25B2 C |
 L11 :                          103 C |  L112 :                        25AD C |
 L113 :                        1174 C |  L114 :                        119F C |
 L115 :                        259E C |  L116 :                        1196 C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 84 - 6/19/2013 13:05:07


 L117 :                        119F C |  L118 :                        258D C |
 L119 :                        257E C |  L120 :                        11DD C |
 L121 :                        1228 C |  L122 :                        256D C |
 L123 :                        121F C |  L124 :                        1228 C |
 L125 :                        255D C |  L126 :                        2546 C |
*L127 :                        127D C |  L128 :                        127D C |
 L129 :                        127D C |  L130 :                        1262 C |
 L131 :                        2537 C |  L132 :                        1271 C |
 L133 :                        252A C | *L134 :                        12C5 C |
 L135 :                        2522 C |  L136 :                        12C5 C |
 L138 :                        12C5 C | *L140 :                        139F C |
 L141 :                        139F C |  L142 :                        139F C |
 L143 :                        1375 C |  L144 :                        251E C |
 L145 :                        1384 C |  L146 :                        251A C |
 L147 :                        1393 C |  L148 :                        2516 C |
*L149 :                        131D C |  L150 :                        1367 C |
*L152 :                        13F5 C |  L153 :                        24FC C |
 L154 :                        13E6 C |  L155 :                        13F2 C |
*L157 :                        142F C |  L158 :                        1419 C |
*L159 :                        141C C |  L161 :                        141D C |
*L162 :                        1470 C |  L164 :                        1516 C |
 L165 :                        148A C | *L166 :                        1507 C |
 L168 :                        150A C |  L169 :                        14FA C |
 L172 :                        14ED C |  L173 :                        14F3 C |
 L174 :                        1507 C | *L176 :                        1547 C |
 L177 :                        1531 C | *L178 :                        1531 C |
 L180 :                        1533 C | *L181 :                        1562 C |
 L182 :                        1556 C |  L183 :                        1558 C |
*L185 :                        1598 C |  L186 :                        1577 C |
 L187 :                        1592 C | *L189 :                        187B C |
 L190 :                        16AE C |  L191 :                        16BE C |
 L192 :                        24F8 C |  L193 :                        24F4 C |
 L194 :                        16BE C |  L196 :                        1702 C |
 L198 :                        186F C | *L200 :                        1A19 C |
 L201 :                        1954 C |  L202 :                        1964 C |
 L203 :                        196D C |  L204 :                        19F1 C |
 L206 :                        1974 C | *L207 :                        1974 C |
 L209 :                        1981 C |  L210 :                        19E0 C |
 L213 :                        19AA C | *L214 :                        1AF6 C |
 L215 :                        1AB0 C | *L217 :                        1B44 C |
*L218 :                        1BA4 C | *L219 :                        1C17 C |
*L220 :                        1CAA C |  L221 :                        1C85 C |
 L222 :                        1CAA C | *L223 :                        1D28 C |
*L224 :                        2086 C |  L225 :                        1D73 C |
 L226 :                        2074 C |  L228 :                        1DAF C |
 L229 :                        2074 C |  L230 :                        2063 C |
 L231 :                        2074 C |  L233 :                        1E74 C |
 L234 :                        1E8D C |  L235 :                        1EAA C |
 L236 :                        1EC8 C |  L237 :                        1F07 C |
 L238 :                        2013 C |  L240 :                        1F65 C |
 L242 :                        1F98 C |  L243 :                        200E C |
 L244 :                        2013 C |  L245 :                        2063 C |
 L247 :                        2047 C |  L249 :                        1E2A C |
 L250 :                        1E39 C |  L251 :                        1E16 C |
*L253 :                        1E65 C | *L254 :                        20C6 C |
 L255 :                        24E8 C |  L256 :                        20C3 C |
*L257 :                        20C3 C | *L259 :                        2147 C |
 L26 :                         2671 C |  L260 :                        20FA C |
 L261 :                        212A C |  L263 :                        2143 C |
*L264 :                        21A1 C |  L265 :                        217E C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 85 - 6/19/2013 13:05:07


 L266 :                        218C C | *L268 :                        21EB C |
 L269 :                        21CB C | *L27 :                          49D C |
 L270 :                        21D6 C | *L272 :                        22E7 C |
*L28 :                          4C6 C |  L29 :                          4B5 C |
*L30 :                          4B5 C | *L32 :                          4EF C |
 L33 :                          4DE C | *L34 :                          4DE C |
 L36 :                          73B C |  L37 :                          52D C |
 L39 :                          53C C | *L4 :                            EE C |
 L43 :                         265C C |  L44 :                          623 C |
 L45 :                          65D C |  L47 :                          679 C |
 L50 :                          6C0 C |  L51 :                          6E0 C |
*L53 :                          7DF C |  L54 :                          AF2 C |
 L55 :                          81B C |  L57 :                          897 C |
 L58 :                          939 C |  L60 :                          939 C |
 L62 :                          9C6 C |  L63 :                          A02 C |
 L65 :                          ADB C | *L66 :                          ADB C |
*L68 :                          C2C C |  L69 :                         2623 C |
*L7 :                           43E C | *L70 :                          C7A C |
 L71 :                          C35 C | *L72 :                          CBC C |
*L73 :                          E8A C |  L74 :                          CC1 C |
 L75 :                          D2D C |  L76 :                          D61 C |
 L77 :                          D98 C |  L78 :                          DDE C |
 L79 :                          DE6 C |  L8 :                            F5 C |
 L80 :                         2608 C |  L81 :                          E3C C |
 L82 :                          E45 C |  L83 :                          E74 C |
 L84 :                          E7D C |  L85 :                          F0F C |
 L86 :                          EC7 C | *L87 :                          EF6 C |
 L89 :                          EF7 C |  L9 :                            FB C |
 L90 :                          EF6 C | *L92 :                         1228 C |
 L93 :                         25EF C |  L94 :                         25E0 C |
 L95 :                         104D C |  L96 :                         10CD C |
 L97 :                         25D9 C |  L98 :                         108B C |
 L99 :                         10CD C |  LCC1802INIT :                 26AE C |
*LISTON :                         1 - |  LOOP276 :                     220A C |
 LOOP277 :                     224A C |  LOOP278 :                     228E C |
 LOOP284 :                     22D8 C |  LOOP328 :                     280F C |
 LSH338 :                      2C2B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP329 :                    2877 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP324 :                     271E C |  MULTLOOP16_16325 :            272B C |
 MULTSKIP16_16325 :            273D C |  MUL_DN :                      2FBA C |
 MUL_GO1 :                     2F42 C |  MUL_LP1 :                     2F32 C |
 MUL_LP2 :                     2FCD C |  MUL_LP2A :                    2FE0 C |
 MUL_LP3 :                     2FE9 C |  MUL_LP3A :                    2FFC C |
 MUL_LP4 :                     300D C |  MUL_NO :                      2F8F C |
 MUL_NXT1 :                    2FE4 C | *NESTMAX :                      100 - |
 NORESTORE328 :                285D C |  NXT337 :                      2B30 C |
 OUTIT163 :                    145C C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      2C6B C |
 POS1327 :                     27B3 C |  POS1330 :                     2926 C |
 POS2327 :                     27C3 C |  POS2330 :                     294D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 86 - 6/19/2013 13:05:07


 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     31A3 C |
 SENDBDY :                     22B4 C |  SETBITOFF163 :                1457 C |
 SETSGN337 :                   2B68 C |  SGNPOS337 :                   2B39 C |
 SHDN337 :                     2B5F C |  SHIFT329 :                    28AE C |
 SHL337 :                      2B4B C |  SHR338 :                      2C19 C |
 SIGN338 :                     2C3B C |  SP :                             2 - |
*SPIMOSI :                        7 - |  SPISCK :                         5 - |
 SUBPC :                          3 - | *TIME :                    13:05:06 - |
*TRUE :                           1 - |  UPNXT331 :                    29F0 C |
*VERSION :                     142F - |  ZEROIN276 :                   221B C |
 ZEROIN277 :                   225B C |  ZEROIN284 :                   22DE C |
 _00000316 :                   26C8 C |  _ANALYZEINPUT :                F26 C |
 _BUF :                        22E8 C |  _CALL :                       2701 C |
 _CLOSE0 :                      4CB C | *_CMDIP :                         8 C |
 _DELAY :                      13FE C |  _DIE316 :                     26CB C |
*_DIGITALREAD :                1468 C |  _DIGITALWRITE :               1440 C |
 _DISCONNECT0 :                 4A2 C |  _DIVI2 :                      27A4 C |
 _DIVI4 :                      2900 C |  _DIVU2 :                      2749 C |
 _DIVU4 :                      2800 C |  _DUBDABX :                    2975 C |
*_EXIT :                       209D C |  _FTOA :                       15E4 C |
 _HANDLESESSION :              1282 C | *_INP :                        31C5 C |
 _ITOA :                       189C C |  _LEDMODE :                       4 C |
 _LTOA :                       1A30 C |  _MAIN :                       13A6 C |
*_MEMCMP :                     20CB C | *_MEMCPY :                     2158 C |
*_MEMSET :                     21AE C | *_MODI2 :                      26DC C |
*_MODI4 :                      2A1E C | *_MODU2 :                      26D4 C |
*_MODU4 :                      2A12 C |  _MULT_NUMS :                  15C4 C |
*_MULU2 :                      2723 C | *_MULU4 :                      2866 C |
*_OLDUINOINCLUDER :            143C C |  _ONEMS :                      271C C |
 _OUT :                        31DF C | *_OUT4 :                       26E4 C |
*_OUT5 :                       31C0 C |  _PIN4 :                          3 C |
 _PRINTF :                     1D2D C |  _PRINTFLT :                   1BAD C |
 _PRINTINT :                   1B0B C |  _PRINTLINT :                  1B4D C |
 _PRINTSTR :                   1567 C |  _PUTC :                       31C0 C |
 _PUTX :                       1CAF C |  _PUTXN :                      1C20 C |
 _RECV0 :                       4F4 C |  _RECV_SIZE :                   758 C |
*_REPORT :                      B0D C |  _REQTYPE :                       6 C |
 _RETURN :                     2712 C |  _ROUND_NUMS :                 15A4 C |
 _SEND0 :                       7E6 C |  _SEND0S :                      C81 C |
 _SENDACK :                     C49 C |  _SENDRESPONSE :               1231 C |
 _SENDSTUFF :                   DE8 C |  _SENDWIZRD :                  22A0 C |
 _SENDWIZWRT :                 22AB C |  _SERVER_LOOP :                12CE C |
*_SETQOFF :                    26D2 C | *_SETQON :                     26D0 C |
 _SHIFTINF :                   22D1 C |  _SHIFTOUTF :                  2280 C |
 _SOCKET0_INIT :                447 C | *_SPINCLUDER :                 21F4 C |
 _SPI_READ :                     8B C |  _SPI_WRITE :                     A C |
 _STRCPY :                     151F C |  _STRINDEX :                    E93 C |
 _STRLEN :                     154A C |  _STRNCMP :                    1471 C |
 _W5100_INIT :                  107 C | *_XFERSPIF :                   2200 C |
*_XFERSPIF2 :                  2240 C | *_XFERSPIF3 :                  22D1 C |
 __FORW14 :                    31DC C | *__FORW15 :                    31F0 C |
 __FORW6 :                     146F C |

 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 87 - 6/19/2013 13:05:07


    471 symbols
    105 unused symbols

 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 88 - 6/19/2013 13:05:07


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     83 macros

 AS V1.42 Beta [Bld 87] - source file olduinoserver3.asm - page 89 - 6/19/2013 13:05:07


  codepages:
  ----------

STANDARD (0 changed characters)


0.13 seconds assembly time

   5646 lines source file
  14882 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
