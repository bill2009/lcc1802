 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 1 - 11/21/2017 16:01:12


       1/       0 :                     ; generated by lcc-xr18DH $Version: 5.0 - XR18DH $ on Tue Nov 21 16:01:12 2017
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1) 1020/       0 :                     	listing	on
(1) 1021/       0 : C0 0E 65            	lbr	lcc1802Init
(1) 1022/       3 :                     	
(1) 1023/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _main: ;copt is peeping your size 8 frame with oct 23 rules
      15/       4 : (MACRO)             	pushr R7
      16/       9 : (MACRO)             	reserve 4; save room for outgoing arguments
      17/       D :                     ;void main(){
      18/       D :                     ;	unsigned char cin='?';
      19/       D : (MACRO)             	ldaD R7,63; reg:acon
      20/      13 :                     ;	asm(" seq\n"); //make sure Q is high to start
      21/      13 :                     ;		printf("U");
      22/      13 : 7B                   seq
      23/      14 : (MACRO)             	ldaD R12,L3; reg:acon
      24/      1A : (MACRO)             	Ccall _printf
      25/      1D :                     ;		delay(10);
      26/      1D : (MACRO)             	ldaD R12,10; reg:acon
      27/      23 : (MACRO)             	Ccall _delay
      28/      26 :                     ;		putcser(0x55);
      29/      26 : (MACRO)             	ldaD R12,85; reg:acon
      30/      2C : (MACRO)             	Ccall _putcser
      31/      2F :                     ;		delay(100);
      32/      2F : (MACRO)             	ldaD R12,100; reg:acon
      33/      35 : (MACRO)             	Ccall _delay
      34/      38 : C0 00 64            	lbr L5
      35/      3B :                     L4:
      36/      3B :                     ;	while(1){
      37/      3B :                     ;		printf("Hello From The Emma Side!\n");
      38/      3B : (MACRO)             	ldaD R12,L7; reg:acon
      39/      41 : (MACRO)             	Ccall _printf
      40/      44 :                     ;		cin=getcser();
      41/      44 : (MACRO)             	Ccall _getcser; CALLI2(ar)
      42/      47 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)
      43/      4B : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
      44/      4D :                     ;		printf("Thanks for the %cx\n",cin);
      45/      4D : (MACRO)             	ldaD R12,L8; reg:acon
      46/      53 : (MACRO)             	cpy1 R13,R7
      47/      55 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      48/      58 : (MACRO)             	Ccall _printf
      49/      5B :                     ;		delay(1000);
      50/      5B : (MACRO)             	ldaD R12,1000; reg:acon
      51/      61 : (MACRO)             	Ccall _delay
      52/      64 :                     ;	}
      53/      64 :                     L5:
      54/      64 :                     ;	while(1){
      55/      64 : C0 00 3B            	lbr L4
      56/      67 :                     ;}
      57/      67 :                     L1:
      58/      67 : (MACRO)             	release 4; release room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 2 - 11/21/2017 16:01:12


      59/      6B : (MACRO)             	popr R7
      60/      6F : (MACRO)             	Cretn
      61/      70 :                     
      62/      70 :                     _includeser:		;framesize=2
      63/      70 :                     ;void includeser(){
      64/      70 :                     ;	asm(" include VELFserial2.inc");
      65/      70 :                      include VELFserial2.inc;}
(1)    1/      70 :                     ;**********************************************************************
(1)    2/      70 :                     ;bit-bang Serial routines adapted from Josh Bensadon's VELFbios-v3.1.asm
(1)    3/      70 :                     ;Transmit Byte via Q connected to RS232 driver
(1)    4/      70 :                     ;call via SCRT
(1)    5/      70 :                     ;Byte to send in r12.0
(1)    6/      70 :                     ;Destroys r14
(1)    7/      70 :                     ;----------------------------------------------------------------------
(1)    8/      70 : =>UNDEFINED          	IFNDEF 	LCC1802CPUSPEED
(1)    9/      70 : =3D0900H            LCC1802CPUSPEED EQU 4000000
(1)   10/      70 : [8]                  	ENDIF
(1)   11/      70 :                     bitdelay: MACRO baudrate,cpuspeed,baseline,xreg
(1)   12/      70 :                     	rept ((cpuspeed/(baudrate*8)-baseline))/3
(1)   13/      70 :                     	NOP
(1)   14/      70 :                     	endm
(1)   15/      70 :                     	rept (((cpuspeed/(baudrate*8)-baseline)#3))>=1
(1)   16/      70 :                     	sex xreg
(1)   17/      70 :                     	endm
(1)   18/      70 :                     	ENDM
(1)   19/      70 : =2580H              __BAUDRATE EQU 	9600
(1)   20/      70 :                     	align 32
(1)   21/      80 :                     _putcser:		;entry from C program with character in reg 12
(1)   22/      80 : F8 09               	ldi 9		;9 bits to transmit (1 start + 8 data)
(1)   23/      82 : AE                  	plo r14
(1)   24/      83 : 8C                  	glo r12
(1)   25/      84 : FE                  	shl		;set start bit
(1)   26/      85 : 76                  	rshr		;DF=0
(1)   27/      86 :                     
(1)   28/      86 :                     .txcloop:
(1)   29/      86 : 33 8B               	bdf $+5		;10.5   jump to seq to send a 1 bit
(1)   30/      88 : 7A                  	req		;11.5   send a 0 bit
(1)   31/      89 : 30 8E               	br $+5		;1      jump +5 to next shift
(1)   32/      8B : 7B                  	seq		;11.5   send a 1 bit
(1)   33/      8C : 30 8E               	br $+2		;1      jump +2 to next shift (NOP for timing)
(1)   34/      8E : 76                  	rshr		;2      shift next bit to DF flag
(1)   35/      8F : BE                  	phi r14		;3      save D in r14.1
(1)   36/      90 : 2E                  	DEC r14		;4      dec bit count
(1)   37/      91 : 8E                  	glo r14		;5      get bit count
(1)   38/      92 : 32 A2               	bz .txcret	;6      if 0 then all 9 bits (start and data) sent
(1)   39/      94 : 9E                  	ghi r14		;7      restore D
(1)   40/      95 : (MACRO)             	bitdelay __BAUDRATE,LCC1802CPUSPEED,20,2
(1)   41/      A0 : 30 86               	br .txcloop	;9.5    loop back to send next bit
(1)   42/      A2 : 9E                  .txcret: ghi r14		;7
(1)   43/      A3 : (MACRO)             	bitdelay __BAUDRATE,LCC1802CPUSPEED,16,2
(1)   44/      AF : 7B                  	seq		;11.5 stop bit
(1)   45/      B0 : (MACRO)             	cretn		;return and re-call will cover stop bit time
(1)   46/      B1 :                     ;**********************************************************************
(1)   47/      B1 :                     ;rx_char
(1)   48/      B1 :                     ;Receive Byte via EF2 connected to RS232 receiver
(1)   49/      B1 :                     ;Receives 8 bits
(1)   50/      B1 :                     ;call via SCRT
(1)   51/      B1 :                     ;Returns with Byte received in D and rf.0
(1)   52/      B1 :                     ;Destroys r14.0
(1)   53/      B1 :                     ;----------------------------------------------------------------------
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(VELFserial2.inc) - page 3 - 11/21/2017 16:01:12


(1)   54/      B1 :                     	align 64
(1)   55/      C0 :                     _getcser:
(1)   56/      C0 : F8 08                	ldi 8		;start bit +7 bits from loop, last bit on returning
(1)   57/      C2 : AE                  	plo r14
(1)   58/      C3 : F8 00               	ldi 0
(1)   59/      C5 :                     .rxcw:			;wait for start bit
(1)   60/      C5 :                     	;bn4 $+4		;loop while high
(1)   61/      C5 :                     	;br  RomLoad
(1)   62/      C5 : 3E C5               	bn3 .rxcw	;each instr takes 9us, we need 104us = 11.5
(1)   63/      C7 :                     			;delay 1/2 bit time to center samples
(1)   64/      C7 : C4                  	NOP		;     Don't test for correct start bit
(1)   65/      C8 : C4                  	NOP		;     it will work. if there's too much
(1)   66/      C9 : C4                  	NOP		;     noise on the line, shorten the cable!
(1)   67/      CA :                     .rxcloop:
(1)   68/      CA : (MACRO)             	bitdelay __BAUDRATE,LCC1802CPUSPEED,20,2
(1)   69/      D5 : 36 DB               	b3 $+6		;11.5 sample rx input bit
(1)   70/      D7 : F9 80               	ori 80h		;1
(1)   71/      D9 : 30 DD               	br $+4		;2
(1)   72/      DB : BE                  	phi r14		;1
(1)   73/      DC : BE                  	phi r14		;2
(1)   74/      DD : F6                  	shr		;3
(1)   75/      DE : BE                  	phi r14		;4
(1)   76/      DF : 2E                  	DEC r14		;5
(1)   77/      E0 : 8E                  	glo r14		;6
(1)   78/      E1 : 32 E6               	bz .rxcret	;7
(1)   79/      E3 : 9E                  	ghi r14		;8
(1)   80/      E4 : 30 CA               	br  .rxcloop	;9
(1)   81/      E6 : 9E                  .rxcret: ghi r14	;8
(1)   82/      E7 : 9E                  	ghi r14		;9
(1)   83/      E8 : (MACRO)             	bitdelay __BAUDRATE,LCC1802CPUSPEED,20,2
(1)   84/      F3 : 36 F7               	b3 $+4		;11.5 sample last rx input bit
(1)   85/      F5 : F9 80               	ori 80h		;1
(1)   86/      F7 : AF                  	plo r15
(1)   87/      F8 : (MACRO)             	cretn
(1)   88/      F9 :                     
      66/      F9 :                     L9:
      67/      F9 : (MACRO)             	Cretn
      68/      FA :                     
      69/      FA :                     _delay:		;framesize=10
      70/      FA : (MACRO)             	pushf R6	;opt11
      71/      FF : (MACRO)             	pushl R7	;opt11
      72/     103 : (MACRO)             	reserve 4; save room for outgoing arguments
      73/     107 : (MACRO)             	cpy2 R7,R12; function(2054) 1
      74/     10B :                     ;void delay(unsigned int howlong){
      75/     10B :                     ;	for (i=1;i!=howlong;i++){
      76/     10B : (MACRO)             	ldaD R6,1; reg:acon
      77/     111 : C0 01 18            	lbr L15
      78/     114 :                     L12:
      79/     114 :                     ;		oneMs();
      80/     114 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
      81/     117 :                     ;	}
      82/     117 :                     L13:
      83/     117 :                     ;	for (i=1;i!=howlong;i++){
      84/     117 : (MACRO)             	incm R6,1
      85/     118 :                     L15:
      86/     118 : (MACRO)             	jneU2 R6,R7,L12; NE
      87/     12A :                     ;}
      88/     12A :                     L11:
      89/     12A : (MACRO)             	release 4; release room for outgoing arguments
      90/     12E : (MACRO)             	popr R7
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 4 - 11/21/2017 16:01:12


      91/     132 : (MACRO)             	popr R6
      92/     136 : (MACRO)             	Cretn
      93/     137 :                     
      94/     137 :                     _olduinoincluder:		;framesize=2
      95/     137 :                     ;void olduinoincluder(){
      96/     137 :                     ;	asm("\tinclude olduino.inc\n");
      97/     137 :                     	include olduino.inc
(1)    1/     137 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     137 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/     137 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     137 :                     	align 64	;needed to make sure all on same page
(1)    5/     140 :                     _digitalWrite:
(1)    6/     140 : 8C                  	glo regArg1	;get the bit number
(1)    7/     141 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/     143 : AE                  	plo memaddr
(1)    9/     144 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     145 : BE                  	phi memaddr	
(1)   11/     146 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     147 : A8                  	plo rt1		;save it in a temp
(1)   13/     148 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/     14E : EE                  	sex memaddr	;prepare to change it
(1)   15/     14F : 8D                  	glo regArg2	;get on/off switch
(1)   16/     150 : 32 57               	bz $$setbitoff
(1)   17/     152 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     152 : 88                  	glo rt1		;get the bit value back
(1)   19/     153 : F1                  	or		;apply it
(1)   20/     154 : 5E                  	str memaddr	;and save it
(1)   21/     155 : 30 5C               	br $$outit	;go fnish up
(1)   22/     157 :                     $$setbitoff:
(1)   23/     157 : 88                  	glo rt1		;get the bit pattern
(1)   24/     158 : FB FF               	xri 0xff	;reverse it
(1)   25/     15A : F2                  	and		;combine it with the existing pin value
(1)   26/     15B : 5E                  	str memaddr	;and save it
(1)   27/     15C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     15C :                     $$outit:
(1)   29/     15C : 64                  	out 4		;X was already set to memaddr
(1)   30/     15D : E2                  	sex sp		;reset X
(1)   31/     15E : (MACRO)             	cretn
(1)   32/     15F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     167 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     167 :                     	align 8	;protect jump boundary
(1)   35/     168 :                     _digitalRead:
(1)   36/     168 : F8 00               	ldi 0		;default is false
(1)   37/     16A : AF                  	plo R15
(1)   38/     16B : BF                  	phi R15
(1)   39/     16C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/     16E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     16F : (MACRO)             +	cretn
(1)   42/     170 :                     
      98/     170 :                     ;}
      99/     170 :                     L16:
     100/     170 : (MACRO)             	Cretn
     101/     171 :                     
     102/     171 :                     _strncmp:		;framesize=6
     103/     171 : (MACRO)             	pushf R6	;opt11
     104/     176 : (MACRO)             	pushl R7	;opt11
     105/     17A : (MACRO)             	ld2 R7,'O',sp,(10) ;reg:INDIRU2(addr)
     106/     186 :                     ;{
     107/     186 :                     ;    for ( ; n > 0; s1++, s2++, --n)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 5 - 11/21/2017 16:01:12


     108/     186 : C0 01 DA            	lbr L22
     109/     189 :                     L19:
     110/     189 :                     ;	if (*s1 != *s2)
     111/     189 : (MACRO)             	ldn1 R11,R12	;opt14*
     112/     18B : (MACRO)             	ldn1 R10,R13	;opt14*
     113/     18D : (MACRO)             	jeqI1 R11,R10,L23	;opt21
     114/     196 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
     115/     196 : (MACRO)             	ldn1 R11,R12	;opt14*
     116/     198 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     117/     19B : (MACRO)             	ldn1 R10,R13	;opt14*
     118/     19D : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     119/     1A0 : (MACRO)             	jcI2 R11,R10,lbdf,L26; GE is flipped test from LT
     120/     1B4 : (MACRO)             	ldaD R6,-1; reg:acon
     121/     1BA : C0 01 C3            	lbr L27
     122/     1BD :                     L26:
     123/     1BD : (MACRO)             	ldaD R6,1; reg:acon
     124/     1C3 :                     L27:
     125/     1C3 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)
     126/     1C7 : C0 01 E6            	lbr L18
     127/     1CA :                     L23:
     128/     1CA :                     ;	else if (*s1 == '\0')
     129/     1CA : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
     130/     1CC : (MACRO)             	jnzU1 R11,L28; NEI2(CVUI2(reg),con0)
     131/     1D0 :                     ;	    return 0;
     132/     1D0 : (MACRO)             	ld2z R15
     133/     1D4 : C0 01 E6            	lbr L18
     134/     1D7 :                     L28:
     135/     1D7 :                     L20:
     136/     1D7 :                     ;    for ( ; n > 0; s1++, s2++, --n)
     137/     1D7 : (MACRO)             	incm R12,1
     138/     1D8 : (MACRO)             	incm R13,1
     139/     1D9 : (MACRO)             	decm R7,1
     140/     1DA :                     L22:
     141/     1DA : (MACRO)             	jnzU2 R7,L19; NE 0
     142/     1E2 :                     ;    return 0;
     143/     1E2 : (MACRO)             	ld2z R15
     144/     1E6 :                     L18:
     145/     1E6 : (MACRO)             	popr R7
     146/     1EA : (MACRO)             	popr R6
     147/     1EE : (MACRO)             	Cretn
     148/     1EF :                     
     149/     1EF :                     _strlen:		;framesize=4
     150/     1EF : (MACRO)             	pushr R7
     151/     1F4 :                     ;{
     152/     1F4 :                     ;	unsigned int slen = 0 ;
     153/     1F4 : (MACRO)             	ld2z R7
     154/     1F8 : C0 01 FD            	lbr L32
     155/     1FB :                     L31:
     156/     1FB :                     ;	while (*str != 0) {
     157/     1FB :                     ;      slen++ ;
     158/     1FB : (MACRO)             	incm R7,1
     159/     1FC :                     ;      str++ ;
     160/     1FC : (MACRO)             	incm R12,1
     161/     1FD :                     ;   }
     162/     1FD :                     L32:
     163/     1FD :                     ;	while (*str != 0) {
     164/     1FD : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
     165/     1FF : (MACRO)             	jnzU1 R11,L31; NEI2(CVUI2(reg),con0)
     166/     203 :                     ;   return slen;
     167/     203 : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 6 - 11/21/2017 16:01:12


     168/     207 :                     L30:
     169/     207 : (MACRO)             	popr R7
     170/     20B : (MACRO)             	Cretn
     171/     20C :                     
     172/     20C :                     _printstr:		;framesize=8
     173/     20C : (MACRO)             	pushr R7
     174/     211 : (MACRO)             	reserve 4; save room for outgoing arguments
     175/     215 : (MACRO)             	cpy2 R7,R12; function(2055) 1
     176/     219 :                     ;void printstr(char *ptr){
     177/     219 : C0 02 29            	lbr L36
     178/     21C :                     L35:
     179/     21C :                     ;    while(*ptr){
     180/     21C :                     ;		putc(*ptr++); //jan 29
     181/     21C : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
     182/     220 : (MACRO)             	incm R7,1
     183/     221 : (MACRO)             	ldn1 R12,R11	;opt14*
     184/     223 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     185/     226 : (MACRO)             	Ccall _putcser
     186/     229 :                     ;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
     187/     229 : (MACRO)              nop1806
     188/     229 : (MACRO)              nop1806
     189/     229 : (MACRO)              nop1806
     190/     229 :                     ;	}
     191/     229 :                     L36:
     192/     229 :                     ;    while(*ptr){
     193/     229 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
     194/     22B : (MACRO)             	jnzU1 R11,L35; NEI2(CVUI2(reg),con0)
     195/     22F :                     ;}
     196/     22F :                     L34:
     197/     22F : (MACRO)             	release 4; release room for outgoing arguments
     198/     233 : (MACRO)             	popr R7
     199/     237 : (MACRO)             	Cretn
     200/     238 :                     
     201/     238 :                     	align 4
     202/     238 :                     _round_nums:
     203/     238 : 3F 00 00 00         	dd 0x3f000000
     204/     23C : 3D 4C CC CD         	dd 0x3d4ccccd
     205/     240 : 3B A3 D7 0A         	dd 0x3ba3d70a
     206/     244 : 3A 03 12 6F         	dd 0x3a03126f
     207/     248 : 38 51 B7 17         	dd 0x3851b717
     208/     24C : 36 A7 C5 AC         	dd 0x36a7c5ac
     209/     250 : 35 06 37 BD         	dd 0x350637bd
     210/     254 : 33 56 BF 95         	dd 0x3356bf95
     211/     258 :                     	align 4
     212/     258 :                     _mult_nums:
     213/     258 : 3F 80 00 00         	dd 0x3f800000
     214/     25C : 41 20 00 00         	dd 0x41200000
     215/     260 : 42 C8 00 00         	dd 0x42c80000
     216/     264 : 44 7A 00 00         	dd 0x447a0000
     217/     268 : 46 1C 40 00         	dd 0x461c4000
     218/     26C : 47 C3 50 00         	dd 0x47c35000
     219/     270 : 49 74 24 00         	dd 0x49742400
     220/     274 : 4B 18 96 80         	dd 0x4b189680
     221/     278 :                     _ftoa:		;framesize=80
     222/     278 : (MACRO)             	reserve 62; save room for local variables
     223/     282 : (MACRO)             	pushf R0	;opt11
     224/     287 : (MACRO)             	pushm R1	;opt11.1
     225/     28B : (MACRO)             	pushm R6	;opt11.1
     226/     28F : (MACRO)             	pushl R7	;opt11.1
     227/     293 : (MACRO)             	reserve 8; save room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 7 - 11/21/2017 16:01:12


     228/     29B : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
     229/     2A3 : (MACRO)             	ld2 R1,'O',sp,(86) ;reg:INDIRU2(addr)
     230/     2AF :                     ;{
     231/     2AF :                     ;   char *output = outbfr ;
     232/     2AF : (MACRO)             	ld2 R0,'O',sp,(84) ;reg:INDIRP2(addr)
     233/     2BB :                     ;   if (flt < 0.0) {
     234/     2BB : (MACRO)             	ld4 RL10,'D',(L42),0;INDIRF4(addr)
     235/     2C9 : (MACRO)             	jcF4 RL6,RL10,lbdf,L40;GEF4(reg,reg) - reverse test
     236/     30E :                     ;      *output++ = '-' ;
     237/     30E : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
     238/     312 : (MACRO)             	incm R0,1
     239/     313 : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
     240/     316 :                     ;      flt *= -1.0 ;
     241/     316 : (MACRO)             	ld4 RL8,'D',(L43),0;INDIRF4(addr)
     242/     324 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
     243/     32C : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     244/     32F : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
     245/     337 :                     ;   } else {
     246/     337 : C0 03 45            	lbr L41
     247/     33A :                     L40:
     248/     33A :                     ;      if (use_leading_plus) {
     249/     33A : C0 03 45            	lbr L44
     250/     33D :                     ;         *output++ = '+' ;
     251/     33D : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
     252/     341 : (MACRO)             	incm R0,1
     253/     342 : (MACRO)             	str1I 43,R11; ASGNU1(indaddr,acon)	DH
     254/     345 :                     ;      }
     255/     345 :                     L44:
     256/     345 :                     ;   }
     257/     345 :                     L41:
     258/     345 :                     ;   if (dec_digits < 8) {
     259/     345 : (MACRO)             	jcI2I R1,8,lbdf,L46; GE is flipped test from LT
     260/     356 :                     ;      flt += round_nums[dec_digits] ;
     261/     356 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     262/     35E : (MACRO)             	shlR2R	R11,R1	;opt6.1
     263/     364 : (MACRO)             	shl2I 	R11,1	;opt6.1
     264/     36A : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
     265/     37A : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     266/     37D : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
     267/     385 :                     ;   }
     268/     385 :                     L46:
     269/     385 :                     ;	mult=mult_nums[dec_digits];
     270/     385 : (MACRO)             	shlR2R	R11,R1	;opt6.1
     271/     38B : (MACRO)             	shl2I 	R11,1	;opt6.1
     272/     391 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
     273/     3A1 : (MACRO)             	st4 RL10,'O',sp,(68); ASGNF4(addr,reg)
     274/     3B4 :                     ;   wholeNum = flt;
     275/     3B4 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     276/     3BC : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     277/     3BF : (MACRO)             	st4 RL8,'O',sp,(72)
     278/     3D2 :                     ;   decimalNum = ((flt - wholeNum) * mult);
     279/     3D2 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     280/     3DA : (MACRO)             	st4 RL8,'O',sp,(16); ASGNF4(addr,reg)
     281/     3ED : (MACRO)             	ld4 RL8,'O',sp,(72);reg:  INDIRI4(addr)
     282/     3FD : (MACRO)             	Ccall cvif4; emit2
     283/     400 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     284/     408 : (MACRO)             	ld4 RL8,'O',sp,(16);INDIRF4(addr)
     285/     418 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     286/     41B : (MACRO)             	ld4 RL10,'O',sp,(68);INDIRF4(addr)
     287/     42B : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 8 - 11/21/2017 16:01:12


     288/     42E : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     289/     431 : (MACRO)             	st4 RL8,'O',sp,(64)
     290/     444 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
     291/     444 : (MACRO)             	ld4 Rp1p2,'O',sp,(72);reg:  INDIRI4(addr)
     292/     454 : (MACRO)             	st2 R0,'O',sp,(4); arg+f**
     293/     461 : (MACRO)             	ldaD R11,1; reg:acon
     294/     467 : (MACRO)             	st2 R11,'O',sp,(6); arg+f**
     295/     474 : (MACRO)             	Ccall _dubdabx
     296/     477 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     297/     47B : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     298/     47F : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     299/     483 : (MACRO)             	Ccall _strcpy
     300/     486 :                     ;   output+=strlen(output);
     301/     486 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     302/     48A : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     303/     48D : (MACRO)             	alu2 R0,R15,R0,add,adc	;ADDP2(reg,reg)
     304/     499 :                     ;   if (dec_digits > 0) {
     305/     499 : (MACRO)             	jzU2 R1,L48; EQ 0
     306/     4A1 :                     ;		*output++ = '.' ;
     307/     4A1 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
     308/     4A5 : (MACRO)             	incm R0,1
     309/     4A6 : (MACRO)             	str1I 46,R11; ASGNU1(indaddr,acon)	DH
     310/     4A9 :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
     311/     4A9 : (MACRO)             	ld4 Rp1p2,'O',sp,(64);reg:  INDIRI4(addr)
     312/     4B9 : (MACRO)             	st2 R0,'O',sp,(4); arg+f**
     313/     4C6 : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)
     314/     4CA : (MACRO)             	st2 R11,'O',sp,(6); arg+f**
     315/     4D7 : (MACRO)             	Ccall _dubdabx
     316/     4DA : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     317/     4DE : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     318/     4E2 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     319/     4E6 : (MACRO)             	Ccall _strcpy
     320/     4E9 :                     ;	}
     321/     4E9 :                     L48:
     322/     4E9 :                     ;   return outbfr;
     323/     4E9 : (MACRO)             	ld2 R15,'O',sp,(84) ;reg:INDIRP2(addr)
     324/     4F5 :                     L39:
     325/     4F5 : (MACRO)             	release 8; release room for outgoing arguments
     326/     4FD : (MACRO)             	popr R7
     327/     501 : (MACRO)             	popr R6
     328/     505 : (MACRO)             	popr R1
     329/     509 : (MACRO)             	popr R0
     330/     50D : (MACRO)             	release 62; release room for local variables 
     331/     515 : (MACRO)             	Cretn
     332/     516 :                     
     333/     516 :                     _itoa:		;framesize=16
     334/     516 : (MACRO)             	reserve 2; save room for local variables
     335/     518 : (MACRO)             	pushf R0	;opt11
     336/     51D : (MACRO)             	pushm R1	;opt11.1
     337/     521 : (MACRO)             	pushm R6	;opt11.1
     338/     525 : (MACRO)             	pushl R7	;opt11.1
     339/     529 : (MACRO)             	reserve 4; save room for outgoing arguments
     340/     52D : (MACRO)             	st2 R12,'O',sp,(16)			
     341/     53A : 1E                  	inc memaddr				;opt16.1
     342/     53B : (MACRO)             	str2 R13,memaddr			
     343/     541 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     344/     541 :                     ;	unsigned int flag=0;
     345/     541 : (MACRO)             	ld2z R0
     346/     545 :                     ;	char * bptr; bptr=buffer;
     347/     545 : (MACRO)             	ld2 R11,'O',sp,(18) ;reg:INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 9 - 11/21/2017 16:01:12


     348/     551 : (MACRO)             	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
     349/     55E :                     ;	if (s<0){
     350/     55E : (MACRO)             	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
     351/     56A : (MACRO)             	jcI2I R11,0,lbdf,L51; GE is flipped test from LT
     352/     57B :                     ;		*bptr='-';bptr++;
     353/     57B : (MACRO)             	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
     354/     587 : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
     355/     58A : (MACRO)             	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
     356/     596 : (MACRO)             	incm R11,1
     357/     597 : (MACRO)             	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
     358/     5A4 :                     ;		n=-s;
     359/     5A4 : (MACRO)             	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
     360/     5B0 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     361/     5B9 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)
     362/     5BD :                     ;	} else{
     363/     5BD : C0 05 D0            	lbr L52
     364/     5C0 :                     L51:
     365/     5C0 :                     ;		n=s;
     366/     5C0 : (MACRO)             	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
     367/     5CC : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)
     368/     5D0 :                     ;	}
     369/     5D0 :                     L52:
     370/     5D0 :                     ;	k=10000;
     371/     5D0 : (MACRO)             	ldaD R7,10000; reg:acon
     372/     5D6 : C0 06 5D            	lbr L54
     373/     5D9 :                     L53:
     374/     5D9 :                     ;	while(k>0){
     375/     5D9 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     376/     5D9 : (MACRO)             	ld2z R1
     377/     5DD : C0 05 ED            	lbr L59
     378/     5E0 :                     L56:
     379/     5E0 :                     L57:
     380/     5E0 : (MACRO)             	incm R1,1
     381/     5E1 : (MACRO)             	alu2 R6,R6,R7,sm,smb
     382/     5ED :                     L59:
     383/     5ED : (MACRO)             	jcU2 R6,R7,lbdf,L56 ;LE is flipped test & operands
     384/     5FA :                     ;		if (flag || r>0||k==1){
     385/     5FA : (MACRO)             	jnzU2 R0,L63; NE 0
     386/     602 : (MACRO)             	jnzU2 R1,L63; NE 0
     387/     60A : (MACRO)             	jneU2I R7,1,L60; NE
     388/     616 :                     L63:
     389/     616 :                     ;			*bptr=('0'+r);bptr++;
     390/     616 : (MACRO)             	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
     391/     622 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
     392/     62A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     393/     62C : (MACRO)             	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
     394/     638 : (MACRO)             	incm R11,1
     395/     639 : (MACRO)             	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
     396/     646 :                     ;			flag='y';
     397/     646 : (MACRO)             	ldaD R0,121; reg:acon
     398/     64C :                     ;		}
     399/     64C :                     L60:
     400/     64C :                     ;		k=k/10;
     401/     64C : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)
     402/     650 : (MACRO)             	ldaD R13,10; reg:acon
     403/     656 : (MACRO)             	Ccall _divu2
     404/     659 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)
     405/     65D :                     ;	}
     406/     65D :                     L54:
     407/     65D :                     ;	while(k>0){
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 10 - 11/21/2017 16:01:12


     408/     65D : (MACRO)             	jnzU2 R7,L53; NE 0
     409/     665 :                     ;	*bptr='\0';
     410/     665 : (MACRO)             	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
     411/     671 : (MACRO)             	str1I 0,R11; ASGNU1(indaddr,acon)	DH
     412/     674 :                     ;	return buffer;
     413/     674 : (MACRO)             	ld2 R15,'O',sp,(18) ;reg:INDIRP2(addr)
     414/     680 :                     L50:
     415/     680 : (MACRO)             	release 4; release room for outgoing arguments
     416/     684 : (MACRO)             	popr R7
     417/     688 : (MACRO)             	popr R6
     418/     68C : (MACRO)             	popr R1
     419/     690 : (MACRO)             	popr R0
     420/     694 : (MACRO)             	release 2; release room for local variables 
     421/     696 : (MACRO)             	Cretn
     422/     697 :                     
     423/     697 :                     _ltoa:		;framesize=16
     424/     697 : (MACRO)             	pushf R1	;opt11
     425/     69C : (MACRO)             	pushm R6	;opt11.1
     426/     6A0 : (MACRO)             	pushl R7	;opt11.1
     427/     6A4 : (MACRO)             	reserve 8; save room for outgoing arguments
     428/     6AC : (MACRO)             	cpy4 RL6,RL12; halfbaked
     429/     6B4 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     430/     6B4 :                     ;	char* bptr=buffer;
     431/     6B4 : (MACRO)             	ld2 R1,'O',sp,(20) ;reg:INDIRP2(addr)
     432/     6C0 :                     ;	if (s<0){
     433/     6C0 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     434/     6CC : (MACRO)             	jcI4 RL6,RL10,lbdf,L65; GE is flipped test from LT
     435/     6E8 :                     ;		*bptr++='-';
     436/     6E8 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     437/     6EC : (MACRO)             	incm R1,1
     438/     6ED : (MACRO)             	str1I 45,R11; ASGNU1(indaddr,acon)	DH
     439/     6F0 :                     ;		s=-s;
     440/     6F0 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
     441/     710 :                     ;	}
     442/     710 :                     L65:
     443/     710 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
     444/     710 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
     445/     718 : (MACRO)             	st2 R1,'O',sp,(4); arg+f**
     446/     725 : (MACRO)             	ldaD R11,1; reg:acon
     447/     72B : (MACRO)             	st2 R11,'O',sp,(6); arg+f**
     448/     738 : (MACRO)             	Ccall _dubdabx
     449/     73B : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     450/     73F : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
     451/     743 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     452/     747 : (MACRO)             	Ccall _strcpy
     453/     74A :                     ;	return buffer;
     454/     74A : (MACRO)             	ld2 R15,'O',sp,(20) ;reg:INDIRP2(addr)
     455/     756 :                     L64:
     456/     756 : (MACRO)             	release 8; release room for outgoing arguments
     457/     75E : (MACRO)             	popr R7
     458/     762 : (MACRO)             	popr R6
     459/     766 : (MACRO)             	popr R1
     460/     76A : (MACRO)             	Cretn
     461/     76B :                     
     462/     76B :                     _printint:		;framesize=14
     463/     76B : (MACRO)             	reserve 12
     464/     775 : (MACRO)             	st2 R12,'O',sp,(14); flag1 
     465/     782 :                     ;void printint(int s){ //print an integer
     466/     782 :                     ;	itoa(s,buffer);
     467/     782 : (MACRO)             	ld2 R12,'O',sp,(14) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 11 - 11/21/2017 16:01:12


     468/     78E : (MACRO)             	ldA2 R13,'O',sp,(4); reg:addr
     469/     796 : (MACRO)             	Ccall _itoa
     470/     799 :                     ;	printstr(buffer);
     471/     799 : (MACRO)             	ldA2 R12,'O',sp,(4); reg:addr
     472/     7A1 : (MACRO)             	Ccall _printstr
     473/     7A4 :                     ;}
     474/     7A4 :                     L67:
     475/     7A4 : (MACRO)             	release 12
     476/     7AC : (MACRO)             	Cretn
     477/     7AD :                     
     478/     7AD :                     _printlint:		;framesize=20
     479/     7AD : (MACRO)             	reserve 18
     480/     7B7 : (MACRO)             	st2 R12,'O',sp,(20)			
     481/     7C4 : 1E                  	inc memaddr				;opt16.1
     482/     7C5 : (MACRO)             	str2 R13,memaddr			
     483/     7CB :                     ;void printlint(long s){ //print a long integer
     484/     7CB :                     ;	printstr(ltoa(s,buffer));
     485/     7CB : (MACRO)             	ld4 Rp1p2,'O',sp,(20);reg:  INDIRI4(addr)
     486/     7DB : (MACRO)             	ldA2 R11,'O',sp,(6); reg:addr
     487/     7E3 : (MACRO)             	st2 R11,'O',sp,(4); arg+f**
     488/     7F0 : (MACRO)             	Ccall _ltoa
     489/     7F3 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     490/     7F7 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     491/     7FB : (MACRO)             	Ccall _printstr
     492/     7FE :                     ;}
     493/     7FE :                     L68:
     494/     7FE : (MACRO)             	release 18
     495/     806 : (MACRO)             	Cretn
     496/     807 :                     
     497/     807 :                     _printflt:		;framesize=30
     498/     807 : (MACRO)             	reserve 28
     499/     811 : (MACRO)             	st2 R12,'O',sp,(30)			
     500/     81E : 1E                  	inc memaddr				;opt16.1
     501/     81F : (MACRO)             	str2 R13,memaddr			
     502/     825 :                     ;void printflt(float s){ //print a float
     503/     825 :                     ;	printstr(ftoa(s,buffer,3));
     504/     825 : (MACRO)             	ld4 Rp1p2,'O',sp,(30);INDIRF4(addr)
     505/     835 : (MACRO)             	ldA2 R11,'O',sp,(8); reg:addr
     506/     83D : (MACRO)             	st2 R11,'O',sp,(4); arg+f**
     507/     84A : (MACRO)             	ldaD R11,3; reg:acon
     508/     850 : (MACRO)             	st2 R11,'O',sp,(6); arg+f**
     509/     85D : (MACRO)             	Ccall _ftoa
     510/     860 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     511/     864 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     512/     868 : (MACRO)             	Ccall _printstr
     513/     86B :                     ;}
     514/     86B :                     L69:
     515/     86B : (MACRO)             	release 28
     516/     873 : (MACRO)             	Cretn
     517/     874 :                     
     518/     874 :                     _putxn:		;framesize=6
     519/     874 : (MACRO)             	reserve 4
     520/     878 : (MACRO)             	st2 R12,'O',sp,(6); flag1 
     521/     885 : (MACRO)             	ldA2 R11,'O',sp,(6); reg:addr
     522/     88D : (MACRO)             	ld2 R10,'O',sp,(6) ;reg:INDIRI2(addr)
     523/     899 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     524/     89B :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     525/     89B :                     ;	if (x<10){
     526/     89B : (MACRO)             	ld1 R11,'O',sp,(6)
     527/     8A5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 12 - 11/21/2017 16:01:12


     528/     8A8 : (MACRO)             	jcI2I R11,10,lbdf,L71; GE is flipped test from LT
     529/     8B9 :                     ;		putc(x+'0');
     530/     8B9 : (MACRO)             	ld1 R11,'O',sp,(6)
     531/     8C3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     532/     8C6 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     533/     8CE : (MACRO)             	cpy1 R12,R11
     534/     8D0 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     535/     8D3 : (MACRO)             	Ccall _putcser
     536/     8D6 :                     ;	} else {
     537/     8D6 : C0 08 FE            	lbr L72
     538/     8D9 :                     L71:
     539/     8D9 :                     ;		putc(x+'A'-10);
     540/     8D9 : (MACRO)             	ld1 R11,'O',sp,(6)
     541/     8E3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     542/     8E6 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     543/     8EE : (MACRO)             	alu2I R11,R11,10,smi,smbi
     544/     8F6 : (MACRO)             	cpy1 R12,R11
     545/     8F8 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     546/     8FB : (MACRO)             	Ccall _putcser
     547/     8FE :                     ;	}
     548/     8FE :                     L72:
     549/     8FE :                     ;}
     550/     8FE :                     L70:
     551/     8FE : (MACRO)             	release 4
     552/     902 : (MACRO)             	Cretn
     553/     903 :                     
     554/     903 :                     _putx:		;framesize=6
     555/     903 : (MACRO)             	reserve 4
     556/     907 : (MACRO)             	st2 R12,'O',sp,(6); flag1 
     557/     914 : (MACRO)             	ldA2 R11,'O',sp,(6); reg:addr
     558/     91C : (MACRO)             	ld2 R10,'O',sp,(6) ;reg:INDIRI2(addr)
     559/     928 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     560/     92A :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     561/     92A :                     ;	putxn(x>>4);
     562/     92A : (MACRO)             	ld1 R11,'O',sp,(6)
     563/     934 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     564/     937 : (MACRO)             	shrI2I R11,4
     565/     957 : (MACRO)             	cpy1 R12,R11
     566/     959 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     567/     95C : (MACRO)             	Ccall _putxn
     568/     95F :                     ;	putxn(x & 0x0F);
     569/     95F : (MACRO)             	ld1 R11,'O',sp,(6)
     570/     969 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     571/     96C : (MACRO)             	alu2I R11,R11,15,ani,ani
     572/     974 :                     	;removed ?	cpy2 R11,R11
     573/     974 : (MACRO)             	cpy1 R12,R11
     574/     976 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     575/     979 : (MACRO)             	Ccall _putxn
     576/     97C :                     ;}
     577/     97C :                     L73:
     578/     97C : (MACRO)             	release 4
     579/     980 : (MACRO)             	Cretn
     580/     981 :                     
     581/     981 :                     _printf:		;framesize=18
     582/     981 : (MACRO)             	reserve 4; save room for local variables
     583/     985 : (MACRO)             	pushf R0	;opt11
     584/     98A : (MACRO)             	pushm R1	;opt11.1
     585/     98E : (MACRO)             	pushm R6	;opt11.1
     586/     992 : (MACRO)             	pushl R7	;opt11.1
     587/     996 : (MACRO)             	reserve 4; save room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 13 - 11/21/2017 16:01:12


     588/     99A : (MACRO)             	st2 R12,'O',sp,(18)			
     589/     9A7 : 1E                  	inc memaddr				;opt16
     590/     9A8 : (MACRO)             	str2 R13,memaddr			
     591/     9AE :                     ;void printf(char *pptr,...){ //limited implementation of printf
     592/     9AE :                     ;	register char* ptr=pptr; //try to save on loads/spills
     593/     9AE : (MACRO)             	ld2 R7,'O',sp,(18) ;reg:INDIRP2(addr)
     594/     9BA :                     ;	int argslot=0;	//used to align longs
     595/     9BA : (MACRO)             	ld2z R0
     596/     9BE :                     ;	int * this=(int *)&pptr;
     597/     9BE : (MACRO)             	ldA2 R1,'O',sp,(18); reg:addr
     598/     9C6 :                     ;	this++; argslot++; //advance argument pointer and slot #
     599/     9C6 : (MACRO)             	incm R1,2
     600/     9C8 : (MACRO)             	incm R0,1
     601/     9C9 : C0 0C 76            	lbr L76
     602/     9CC :                     L75:
     603/     9CC :                     ;    while(*ptr) {
     604/     9CC :                     ;		c=*ptr; ptr++;
     605/     9CC : (MACRO)             	ldn1 R6,R7;reg:  INDIRU1(indaddr)
     606/     9CE : (MACRO)             	incm R7,1
     607/     9CF :                     ;		if (c!='%'){
     608/     9CF : (MACRO)             	cpy1 R11,R6
     609/     9D1 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     610/     9D4 : (MACRO)             	jeqU2I R11,37,L78;EQI2(reg,con)
     611/     9E0 :                     ;			putc(c);
     612/     9E0 : (MACRO)             	cpy1 R12,R6
     613/     9E2 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     614/     9E5 : (MACRO)             	Ccall _putcser
     615/     9E8 :                     ;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
     616/     9E8 : (MACRO)              nop1806
     617/     9E8 : (MACRO)              nop1806
     618/     9E8 : (MACRO)              nop1806
     619/     9E8 :                     ;		} else{
     620/     9E8 : C0 0C 76            	lbr L79
     621/     9EB :                     L78:
     622/     9EB :                     ;			c=*ptr;ptr++;
     623/     9EB : (MACRO)             	ldn1 R6,R7;reg:  INDIRU1(indaddr)
     624/     9ED : (MACRO)             	incm R7,1
     625/     9EE :                     ;			switch (c){
     626/     9EE : (MACRO)             	cpy1 R11,R6
     627/     9F0 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     628/     9F3 : (MACRO)             	st2 R11,'O',sp,(13); ASGNI2(addr,reg)
     629/     A00 : (MACRO)             	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
     630/     A0C : (MACRO)             	jcI2I R11,99,lbnf,L102  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     631/     A1D : (MACRO)             	jnI2I R11,108,lbnf,L103; GT reverse  the subtraction
     632/     A2E : (MACRO)             	shl2I R11,1
     633/     A34 : (MACRO)             	ld2 R11,'O',R11,(L104-198) ;reg:INDIRP2(addr)
     634/     A40 : (MACRO)             	jumpv R11; JUMPV(reg)
     635/     A4A :                     L104:
     636/     A4A : 0A F6               	dw L86
     637/     A4C : 0A CC               	dw L84
     638/     A4E : 0C 65               	dw L81
     639/     A50 : 0C 29               	dw L97
     640/     A52 : 0C 65               	dw L81
     641/     A54 : 0C 65               	dw L81
     642/     A56 : 0A CC               	dw L84
     643/     A58 : 0C 65               	dw L81
     644/     A5A : 0C 65               	dw L81
     645/     A5C : 0B 6B               	dw L90
     646/     A5E :                     L102:
     647/     A5E : (MACRO)             	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 14 - 11/21/2017 16:01:12


     648/     A6A : (MACRO)             	jeqU2I R11,88,L89;EQI2(reg,con)
     649/     A76 : C0 0C 65            	lbr L81
     650/     A79 :                     L103:
     651/     A79 : (MACRO)             	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
     652/     A85 : (MACRO)             	ldaD R10,115; reg:acon
     653/     A8B : (MACRO)             	jeqI2 R11,R10,L85; EQI2(reg,reg)
     654/     A9D : (MACRO)             	jcI2 R11,R10,lbnf,L81; LT=lbnf i.e. subtract B from A and jump if borrow 
     655/     AB1 :                     L106:
     656/     AB1 : (MACRO)             	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
     657/     ABD : (MACRO)             	jeqU2I R11,120,L89;EQI2(reg,con)
     658/     AC9 : C0 0C 65            	lbr L81
     659/     ACC :                     L84:
     660/     ACC :                     ;					printint(*this++);
     661/     ACC : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     662/     AD0 : (MACRO)             	incm R1,2
     663/     AD2 : (MACRO)             	ldn2 R12,R11	;opt9x
     664/     AD7 : (MACRO)             	Ccall _printint
     665/     ADA :                     ;					argslot+=1; //next argument slot
     666/     ADA : (MACRO)             	incm R0,1
     667/     ADB :                     ;					break;
     668/     ADB : C0 0C 76            	lbr L82
     669/     ADE :                     L85:
     670/     ADE :                     ;					printstr((char*) *this++);
     671/     ADE : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     672/     AE2 : (MACRO)             	incm R1,2
     673/     AE4 : (MACRO)             	ldn2s R11,R11	;opt9xs
     674/     AEB : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     675/     AEF : (MACRO)             	Ccall _printstr
     676/     AF2 :                     ;					argslot+=1; //next argument slot
     677/     AF2 : (MACRO)             	incm R0,1
     678/     AF3 :                     ;					break;
     679/     AF3 : C0 0C 76            	lbr L82
     680/     AF6 :                     L86:
     681/     AF6 :                     ;					if (*ptr=='x'){ //if there's an x
     682/     AF6 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
     683/     AF8 : (MACRO)             	jneU1I R11,120,L87	; DH 4
     684/     AFE :                     ;						ptr++; //skip over the x
     685/     AFE : (MACRO)             	incm R7,1
     686/     AFF :                     ;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
     687/     AFF : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     688/     B03 : (MACRO)             	incm R1,2
     689/     B05 : (MACRO)             	ldn2s R11,R11	;opt9xs
     690/     B0C : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     691/     B14 : (MACRO)             	cpy1 R12,R11
     692/     B16 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     693/     B19 : (MACRO)             	Ccall _putx
     694/     B1C :                     ;					} else{
     695/     B1C : C0 0B 34            	lbr L88
     696/     B1F :                     L87:
     697/     B1F :                     ;						putc((unsigned int) *this++);		//print as char
     698/     B1F : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     699/     B23 : (MACRO)             	incm R1,2
     700/     B25 : (MACRO)             	ldn2s R11,R11	;opt9xs
     701/     B2C : (MACRO)             	cpy1 R12,R11
     702/     B2E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     703/     B31 : (MACRO)             	Ccall _putcser
     704/     B34 :                     ;					}
     705/     B34 :                     L88:
     706/     B34 :                     ;					argslot+=1; //next argument slot
     707/     B34 : (MACRO)             	incm R0,1
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 15 - 11/21/2017 16:01:12


     708/     B35 :                     ;					break;
     709/     B35 : C0 0C 76            	lbr L82
     710/     B38 :                     L89:
     711/     B38 :                     ;					putx(((unsigned int) *this)>>8);
     712/     B38 : (MACRO)             	ldn2 R11,R1	;opt9x
     713/     B3D : 9B                  	ghi	R11	;opt2
     714/     B3E : AB                  	plo	R11
     715/     B3F : F8 00               	ldi	0
     716/     B41 : BB                  	phi	R11	
     717/     B42 : (MACRO)             	cpy1 R12,R11
     718/     B44 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     719/     B47 : (MACRO)             	Ccall _putx
     720/     B4A :                     ;					putx(((unsigned int) *this++)&255);
     721/     B4A : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     722/     B4E : (MACRO)             	incm R1,2
     723/     B50 : (MACRO)             	ldn2s R11,R11	;opt9xs
     724/     B57 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     725/     B5F : (MACRO)             	cpy1 R12,R11
     726/     B61 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     727/     B64 : (MACRO)             	Ccall _putx
     728/     B67 :                     ;					argslot+=1; //next argument slot
     729/     B67 : (MACRO)             	incm R0,1
     730/     B68 :                     ;					break;
     731/     B68 : C0 0C 76            	lbr L82
     732/     B6B :                     L90:
     733/     B6B :                     ;					if (*ptr){ //as long as there's something there
     734/     B6B : (MACRO)             	ldn1 R11,R7	;opt14*
     735/     B6D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     736/     B70 : (MACRO)             	jzU2 R11,L91; EQ 0
     737/     B78 :                     ;						xord=*ptr++;
     738/     B78 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
     739/     B7C : (MACRO)             	incm R7,1
     740/     B7D : (MACRO)             	ldA2 R10,'O',sp,(15); reg:addr
     741/     B85 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     742/     B87 : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)		DH
     743/     B89 :                     ;						if (argslot&1) {
     744/     B89 : (MACRO)             	alu2I R11,R0,1,ani,ani
     745/     B91 :                     	;removed ?	cpy2 R11,R0
     746/     B91 : (MACRO)             	jzU2 R11,L93; EQ 0
     747/     B99 :                     ;							this++;
     748/     B99 : (MACRO)             	incm R1,2
     749/     B9B :                     ;							argslot++;
     750/     B9B : (MACRO)             	incm R0,1
     751/     B9C :                     ;						}
     752/     B9C :                     L93:
     753/     B9C :                     ;						if(xord=='d'){
     754/     B9C : (MACRO)             	ld1 R11,'O',sp,(15)
     755/     BA6 : (MACRO)             	jneU1I R11,100,L95	; DH 4
     756/     BAC :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     757/     BAC : (MACRO)             	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
     758/     BBC : (MACRO)             	Ccall _printlint
     759/     BBF :                     ;							this+=2;				// and advances it 4 bytes
     760/     BBF : (MACRO)             	incm R1,4
     761/     BC3 :                     ;						} else{
     762/     BC3 : C0 0C 24            	lbr L96
     763/     BC6 :                     L95:
     764/     BC6 :                     ;							putx(((unsigned int) *this)>>8);
     765/     BC6 : (MACRO)             	ldn2 R11,R1	;opt9x
     766/     BCB : 9B                  	ghi	R11	;opt2
     767/     BCC : AB                  	plo	R11
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 16 - 11/21/2017 16:01:12


     768/     BCD : F8 00               	ldi	0
     769/     BCF : BB                  	phi	R11	
     770/     BD0 : (MACRO)             	cpy1 R12,R11
     771/     BD2 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     772/     BD5 : (MACRO)             	Ccall _putx
     773/     BD8 :                     ;							putx(((unsigned int) *this++)&255);
     774/     BD8 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     775/     BDC : (MACRO)             	incm R1,2
     776/     BDE : (MACRO)             	ldn2s R11,R11	;opt9xs
     777/     BE5 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     778/     BED : (MACRO)             	cpy1 R12,R11
     779/     BEF : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     780/     BF2 : (MACRO)             	Ccall _putx
     781/     BF5 :                     ;							putx(((unsigned int) *this)>>8);
     782/     BF5 : (MACRO)             	ldn2 R11,R1	;opt9x
     783/     BFA : 9B                  	ghi	R11	;opt2
     784/     BFB : AB                  	plo	R11
     785/     BFC : F8 00               	ldi	0
     786/     BFE : BB                  	phi	R11	
     787/     BFF : (MACRO)             	cpy1 R12,R11
     788/     C01 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     789/     C04 : (MACRO)             	Ccall _putx
     790/     C07 :                     ;							putx(((unsigned int) *this++)&255);
     791/     C07 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     792/     C0B : (MACRO)             	incm R1,2
     793/     C0D : (MACRO)             	ldn2s R11,R11	;opt9xs
     794/     C14 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     795/     C1C : (MACRO)             	cpy1 R12,R11
     796/     C1E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     797/     C21 : (MACRO)             	Ccall _putx
     798/     C24 :                     ;						}
     799/     C24 :                     L96:
     800/     C24 :                     ;						argslot+=2;
     801/     C24 : (MACRO)             	incm R0,2
     802/     C26 :                     ;						break;
     803/     C26 : C0 0C 76            	lbr L82
     804/     C29 :                     L91:
     805/     C29 :                     L97:
     806/     C29 :                     ;					if (*ptr){ //as long as there's something there
     807/     C29 : (MACRO)             	ldn1 R11,R7	;opt14*
     808/     C2B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     809/     C2E : (MACRO)             	jzU2 R11,L98; EQ 0
     810/     C36 :                     ;						if (argslot&1) { //adjust alignment
     811/     C36 : (MACRO)             	alu2I R11,R0,1,ani,ani
     812/     C3E :                     	;removed ?	cpy2 R11,R0
     813/     C3E : (MACRO)             	jzU2 R11,L100; EQ 0
     814/     C46 :                     ;							this++;
     815/     C46 : (MACRO)             	incm R1,2
     816/     C48 :                     ;							argslot++;
     817/     C48 : (MACRO)             	incm R0,1
     818/     C49 :                     ;						}
     819/     C49 :                     L100:
     820/     C49 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
     821/     C49 : (MACRO)             	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
     822/     C59 : (MACRO)             	Ccall _printflt
     823/     C5C :                     ;						this+=2;				// and advances it 4 bytes
     824/     C5C : (MACRO)             	incm R1,4
     825/     C60 :                     ;						argslot+=2;
     826/     C60 : (MACRO)             	incm R0,2
     827/     C62 :                     ;						break;
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 17 - 11/21/2017 16:01:12


     828/     C62 : C0 0C 76            	lbr L82
     829/     C65 :                     L98:
     830/     C65 :                     L81:
     831/     C65 :                     ;					putc('%');putc(c);
     832/     C65 : (MACRO)             	ldaD R12,37; reg:acon
     833/     C6B : (MACRO)             	Ccall _putcser
     834/     C6E : (MACRO)             	cpy1 R12,R6
     835/     C70 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     836/     C73 : (MACRO)             	Ccall _putcser
     837/     C76 :                     ;			} //switch
     838/     C76 :                     L82:
     839/     C76 :                     ;		} //%
     840/     C76 :                     L79:
     841/     C76 :                     ;	} //while
     842/     C76 :                     L76:
     843/     C76 :                     ;    while(*ptr) {
     844/     C76 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
     845/     C78 : (MACRO)             	jnzU1 R11,L75; NEI2(CVUI2(reg),con0)
     846/     C7C :                     ;} //prtf
     847/     C7C :                     L74:
     848/     C7C : (MACRO)             	release 4; release room for outgoing arguments
     849/     C80 : (MACRO)             	popr R7
     850/     C84 : (MACRO)             	popr R6
     851/     C88 : (MACRO)             	popr R1
     852/     C8C : (MACRO)             	popr R0
     853/     C90 : (MACRO)             	release 4; release room for local variables 
     854/     C94 : (MACRO)             	Cretn
     855/     C95 :                     
     856/     C95 :                     _exit:		;framesize=6
     857/     C95 : (MACRO)             	reserve 4
     858/     C99 : (MACRO)             	st2 R12,'O',sp,(6); flag1 
     859/     CA6 :                     ;void exit(int code){
     860/     CA6 :                     ;	printf("exit %d\n",code);
     861/     CA6 : (MACRO)             	ldaD R12,L108; reg:acon
     862/     CAC : (MACRO)             	ld2 R13,'O',sp,(6) ;reg:INDIRI2(addr)
     863/     CB8 : (MACRO)             	Ccall _printf
     864/     CBB :                     L109:
     865/     CBB :                     ;	while(1);
     866/     CBB :                     L110:
     867/     CBB : C0 0C BB            	lbr L109
     868/     CBE :                     ;}
     869/     CBE :                     L107:
     870/     CBE : (MACRO)             	release 4
     871/     CC2 : (MACRO)             	Cretn
     872/     CC3 :                     
     873/     CC3 :                     _memcmp:		;framesize=10
     874/     CC3 : (MACRO)             	pushf R0	;opt11
     875/     CC8 : (MACRO)             	pushm R1	;opt11.1
     876/     CCC : (MACRO)             	pushm R6	;opt11.1
     877/     CD0 : (MACRO)             	pushl R7	;opt11.1
     878/     CD4 : (MACRO)             	ld2 R7,'O',sp,(14) ;reg:INDIRU2(addr)
     879/     CE0 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     880/     CE0 :                     ;    int v = 0;
     881/     CE0 : (MACRO)             	ld2z R6
     882/     CE4 :                     ;    p1 = (unsigned char *)Ptr1;
     883/     CE4 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
     884/     CE8 :                     ;    p2 = (unsigned char *)Ptr2;
     885/     CE8 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
     886/     CEC : C0 0D 0F            	lbr L114
     887/     CEF :                     L113:
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 18 - 11/21/2017 16:01:12


     888/     CEF :                     ;    while(Count-- > 0 && v == 0) {
     889/     CEF :                     ;        v = *(p1++) - *(p2++);
     890/     CEF : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
     891/     CF3 : (MACRO)             	incm R1,1
     892/     CF4 : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) ;opt1.1
     893/     CF8 : (MACRO)             	incm R0,1
     894/     CF9 : (MACRO)             	ldn1 R11,R11	;opt14*
     895/     CFB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     896/     CFE : (MACRO)             	ldn1 R10,R10	;opt14*
     897/     D00 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     898/     D03 : (MACRO)             	alu2 R6,R11,R10,sm,smb
     899/     D0F :                     ;    }
     900/     D0F :                     L114:
     901/     D0F :                     ;    while(Count-- > 0 && v == 0) {
     902/     D0F : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
     903/     D13 : (MACRO)             	decm R7,1
     904/     D14 : (MACRO)             	jzU2 R11,L116; EQ 0
     905/     D1C : (MACRO)             	jzU2 R6,L113; EQ 0
     906/     D24 :                     L116:
     907/     D24 :                     ;    return v;
     908/     D24 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)
     909/     D28 :                     L112:
     910/     D28 : (MACRO)             	popr R7
     911/     D2C : (MACRO)             	popr R6
     912/     D30 : (MACRO)             	popr R1
     913/     D34 : (MACRO)             	popr R0
     914/     D38 : (MACRO)             	Cretn
     915/     D39 :                     
     916/     D39 :                     _memcpy:		;framesize=8
     917/     D39 : (MACRO)             	pushf R1	;opt11
     918/     D3E : (MACRO)             	pushm R6	;opt11.1
     919/     D42 : (MACRO)             	pushl R7	;opt11.1
     920/     D46 : (MACRO)             	ld2 R7,'O',sp,(12) ;reg:INDIRU2(addr)
     921/     D52 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     922/     D52 :                     ;        char* dst8 = (char*)dest;
     923/     D52 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
     924/     D56 :                     ;        char* src8 = (char*)src;
     925/     D56 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
     926/     D5A : C0 0D 6B            	lbr L119
     927/     D5D :                     L118:
     928/     D5D :                     ;        while (count--) {
     929/     D5D :                     ;            *dst8++ = *src8++;
     930/     D5D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1.1
     931/     D61 : (MACRO)             	incm R6,1
     932/     D62 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) ;opt1.1
     933/     D66 : (MACRO)             	incm R1,1
     934/     D67 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     935/     D69 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     936/     D6B :                     ;        }
     937/     D6B :                     L119:
     938/     D6B :                     ;        while (count--) {
     939/     D6B : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
     940/     D6F : (MACRO)             	decm R7,1
     941/     D70 : (MACRO)             	jnzU2 R11,L118; NE 0
     942/     D78 :                     ;        return dest;
     943/     D78 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     944/     D7C :                     L117:
     945/     D7C : (MACRO)             	popr R7
     946/     D80 : (MACRO)             	popr R6
     947/     D84 : (MACRO)             	popr R1
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 19 - 11/21/2017 16:01:12


     948/     D88 : (MACRO)             	Cretn
     949/     D89 :                     
     950/     D89 :                     _memset:		;framesize=6
     951/     D89 : (MACRO)             	pushf R6	;opt11
     952/     D8E : (MACRO)             	pushl R7	;opt11
     953/     D92 : (MACRO)             	ld2 R7,'O',sp,(10) ;reg:INDIRU2(addr)
     954/     D9E :                     ;{
     955/     D9E :                     ;    unsigned char* p=s;
     956/     D9E : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
     957/     DA2 : C0 0D B0            	lbr L123
     958/     DA5 :                     L122:
     959/     DA5 :                     ;        *p++ = (unsigned char)c;
     960/     DA5 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1.1
     961/     DA9 : (MACRO)             	incm R6,1
     962/     DAA : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)
     963/     DAE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)		DH
     964/     DB0 :                     L123:
     965/     DB0 :                     ;    while(n--)
     966/     DB0 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
     967/     DB4 : (MACRO)             	decm R7,1
     968/     DB5 : (MACRO)             	jnzU2 R11,L122; NE 0
     969/     DBD :                     ;    return s;
     970/     DBD : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     971/     DC1 :                     L121:
     972/     DC1 : (MACRO)             	popr R7
     973/     DC5 : (MACRO)             	popr R6
     974/     DC9 : (MACRO)             	Cretn
     975/     DCA :                     
     976/     DCA :                     _nstdlibincluder:		;framesize=2
     977/     DCA :                     ;void nstdlibincluder(){
     978/     DCA :                     ;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
     979/     DCA :                     	include nstdlib.inc
(1)    1/     DCA :                     ;nstdlib.inc includes assembly versions of nstdlib routines strcpy, strcmp
(1)    2/     DCA :                     ;Oct 1 first test seems ok
(1)    3/     DCA :                     ;char * strcpy(char * to, const char *from)
(1)    4/     DCA :                     	align 64
(1)    5/     E00 :                     _strcpy:
(1)    6/     E00 :                     ;char *save = to; (to is R12, from is R13)
(1)    7/     E00 : 8C                  	glo R12	
(1)    8/     E01 : AF                  	plo R15
(1)    9/     E02 : 9C                  	ghi R12
(1)   10/     E03 : BF                  	phi R15
(1)   11/     E04 :                     ;for (; (*to = *from) != 0; ++from, ++to);
(1)   12/     E04 : 4D                  __strcpy: lda R13
(1)   13/     E05 : 5C                  	str R12
(1)   14/     E06 : 1C                  	inc R12
(1)   15/     E07 : 3A 04               	bnz __strcpy
(1)   16/     E09 :                     ;return(save);
(1)   17/     E09 : (MACRO)             	cretn
(1)   18/     E0A :                     ;}
(1)   19/     E0A :                     
(1)   20/     E0A :                     
(1)   21/     E0A :                     ;int strcmp(const char *s1, const char *s2){  s1 will be R12, s2 R13
(1)   22/     E0A :                     _strcmp:	;entry point from C program
(1)   23/     E0A :                     ;  int ret = 0;
(1)   24/     E0A : (MACRO)             	ld2z	R15	;ret is R15
(1)   25/     E0E :                     ;  while (!(ret = *(unsigned char *) s1 - *(unsigned char *) s2) && *s2) ++s1, ++s2;
(1)   26/     E0E : 22                  	dec	sp	;make a work area
(1)   27/     E0F :                     __strcmplp:
(1)   28/     E0F : 4D                  	lda	R13	;get string 2 character
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(nstdlib.inc) - page 20 - 11/21/2017 16:01:12


(1)   29/     E10 : 52                  	str	sp	;prep for compare
(1)   30/     E11 : 4C                  	lda	R12	;get string 1 character
(1)   31/     E12 : F7                  	sm		;subtract string 2 char from string 1
(1)   32/     E13 : 3A 1A               	bnz	__strcmpne ;strings not equal quit
(1)   33/     E15 :                     	
(1)   34/     E15 : 02                  	ldn	sp	;check string 2 character
(1)   35/     E16 : 3A 0F               	bnz	__strcmplp ;back for more if not done
(1)   36/     E18 : 12                  	inc	sp	;release the work area
(1)   37/     E19 : (MACRO)             	cretn		;back to caler with 0 in R15
(1)   38/     E1A :                     	
(1)   39/     E1A :                     __strcmpne:	;here I know they're not equal
(1)   40/     E1A : 12                  	inc	sp		;release the work area
(1)   41/     E1B : 33 1F               	bdf	__strcmpgt	;string1>string2
(1)   42/     E1D : 2F                  	dec	R15		;string 1<string 2, return -1
(1)   43/     E1E : (MACRO)             	cretn
(1)   44/     E1F :                     __strcmpgt:
(1)   45/     E1F : 1F                  	inc	R15		;string1>string2, return 1
(1)   46/     E20 : (MACRO)             	cretn
(1)   47/     E21 :                     
     980/     E21 :                     ;}
     981/     E21 :                     L125:
     982/     E21 : (MACRO)             	Cretn
     983/     E22 :                     
     984/     E22 :                     L108:
     985/     E22 : 65                  	db 101
     986/     E23 : 78                  	db 120
     987/     E24 : 69                  	db 105
     988/     E25 : 74                  	db 116
     989/     E26 : 20                  	db 32
     990/     E27 : 25                  	db 37
     991/     E28 : 64                  	db 100
     992/     E29 : 0A                  	db 10
     993/     E2A : 00                  	db 0
     994/     E2B :                     	align 4
     995/     E2C :                     L43:
     996/     E2C : BF 80 00 00         	dd 0xbf800000
     997/     E30 :                     	align 4
     998/     E30 :                     L42:
     999/     E30 : 00 00 00 00         	dd 0x0
    1000/     E34 :                     L8:
    1001/     E34 : 54                  	db 84
    1002/     E35 : 68                  	db 104
    1003/     E36 : 61                  	db 97
    1004/     E37 : 6E                  	db 110
    1005/     E38 : 6B                  	db 107
    1006/     E39 : 73                  	db 115
    1007/     E3A : 20                  	db 32
    1008/     E3B : 66                  	db 102
    1009/     E3C : 6F                  	db 111
    1010/     E3D : 72                  	db 114
    1011/     E3E : 20                  	db 32
    1012/     E3F : 74                  	db 116
    1013/     E40 : 68                  	db 104
    1014/     E41 : 65                  	db 101
    1015/     E42 : 20                  	db 32
    1016/     E43 : 25                  	db 37
    1017/     E44 : 63                  	db 99
    1018/     E45 : 78                  	db 120
    1019/     E46 : 0A                  	db 10
    1020/     E47 : 00                  	db 0
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 21 - 11/21/2017 16:01:12


    1021/     E48 :                     L7:
    1022/     E48 : 48                  	db 72
    1023/     E49 : 65                  	db 101
    1024/     E4A : 6C                  	db 108
    1025/     E4B : 6C                  	db 108
    1026/     E4C : 6F                  	db 111
    1027/     E4D : 20                  	db 32
    1028/     E4E : 46                  	db 70
    1029/     E4F : 72                  	db 114
    1030/     E50 : 6F                  	db 111
    1031/     E51 : 6D                  	db 109
    1032/     E52 : 20                  	db 32
    1033/     E53 : 54                  	db 84
    1034/     E54 : 68                  	db 104
    1035/     E55 : 65                  	db 101
    1036/     E56 : 20                  	db 32
    1037/     E57 : 45                  	db 69
    1038/     E58 : 6D                  	db 109
    1039/     E59 : 6D                  	db 109
    1040/     E5A : 61                  	db 97
    1041/     E5B : 20                  	db 32
    1042/     E5C : 53                  	db 83
    1043/     E5D : 69                  	db 105
    1044/     E5E : 64                  	db 100
    1045/     E5F : 65                  	db 101
    1046/     E60 : 21                  	db 33
    1047/     E61 : 0A                  	db 10
    1048/     E62 : 00                  	db 0
    1049/     E63 :                     L3:
    1050/     E63 : 55                  	db 85
    1051/     E64 : 00                  	db 0
    1052/     E65 :                     	include lcc1802epiloDH.inc
(1)    1/     E65 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     E65 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     E65 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     E65 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     E65 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     E65 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     E65 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     E65 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     E65 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     E65 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     E65 :                     ;feb 27 changed stack to start at 7fff
(1)   12/     E65 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/     E65 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/     E65 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/     E65 :                     ;Oct 2, 2013 redoing mulu2 for faster results with small arg1 - dhrystone
(1)   16/     E65 :                     ;oct 12 divu2 redone for faster perf on small numbers, remainder now in regarg1 - modu2/modi2 changed to match
(1)   17/     E65 :                     ;16-09-20 allow stack relocation 
(1)   18/     E65 :                     ;16-11-26 calculate onems delay from cpu speed in LCC1802CPUSPEED
(1)   19/     E65 :                     ;17-10-17 allow for cpu speed >8MHz in ms calculation!
(1)   20/     E65 : =EH                 rwork	equ	memAddr	;work register
(1)   21/     E65 :                     lcc1802init:	
(1)   22/     E65 : (MACRO)             	ldiReg	RCALL,_call
(1)   23/     E6B : (MACRO)             	ldiReg	RRET,_return
(1)   24/     E71 : =>UNDEFINED           IFNDEF  LCCSTACKLOC		;wjr 16-09-20 allow stack relocation
(1)   25/     E71 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1 as default
(1)   26/     E77 : =>FALSE               ELSEIF				;wjr 16-09-20
(1)   27/     E77 :                     	ldiReg	SP,LCCSTACKLOC	;wjr 16-09-20 start stack as specified
(1)   28/     E77 : [24]                  ENDIF				;wjr 16-09-20
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 22 - 11/21/2017 16:01:12


(1)   29/     E77 : E2                  	sex	SP
(1)   30/     E78 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   31/     E7E : D3                  	sep	RPC
(1)   32/     E7F :                     $$_00000:
(1)   33/     E7F : (MACRO)             	Ccall _main	;call the main routine
(1)   34/     E82 : C0 0E 82            $$_die:	lbr	$$_die		;loop here when main returns
(1)   35/     E85 : DE AD               	db	0xde,0xad
(1)   36/     E87 :                     
(1)   37/     E87 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   38/     E87 :                     _setqOn:
(1)   39/     E87 : 7B                  	seq
(1)   40/     E88 : (MACRO)             	Cretn
(1)   41/     E89 :                     _setqOff:
(1)   42/     E89 : 7A                  	req
(1)   43/     E8A : (MACRO)             	Cretn
(1)   44/     E8B :                     
(1)   45/     E8B :                     _modU2:	;16 bit unsigned remainder
(1)   46/     E8B :                     	; just calls the 16 bit division then puts remainder into return value
(1)   47/     E8B : (MACRO)                 Ccall _divU2
(1)   48/     E8E : 8C                      glo regArg1
(1)   49/     E8F : AF                      plo retVal
(1)   50/     E90 : 9C                      ghi regArg1
(1)   51/     E91 : BF                      phi retVal
(1)   52/     E92 : (MACRO)                 Cretn
(1)   53/     E93 :                         
(1)   54/     E93 :                     _modI2:	;16 bit signed remainder
(1)   55/     E93 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   56/     E93 : (MACRO)                 Ccall _divI2
(1)   57/     E96 : 8C                      glo regArg1
(1)   58/     E97 : AF                      plo retVal
(1)   59/     E98 : 9C                      ghi regArg1
(1)   60/     E99 : BF                      phi retVal
(1)   61/     E9A : (MACRO)                 Cretn
(1)   62/     E9B :                     
(1)   63/     E9B :                     _out4:	
(1)   64/     E9B : 8C                  	glo	regArg1
(1)   65/     E9C : 22                  	dec	sp
(1)   66/     E9D : 52                  	str	sp
(1)   67/     E9E : 64                  	out	4
(1)   68/     E9F : (MACRO)             	Cretn
(1)   69/     EA0 :                     
(1)   70/     EA0 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   71/     EA0 :                     	align 256
(1)   72/     F00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   73/     F00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   74/     F00 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   75/     F00 : D3                  	sep     R3 ;go to subroutine
(1)   76/     F01 : E2                  _call	sex	SP ;make sure X=SP
(1)   77/     F02 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   78/     F03 : 22                  	dec	sp
(1)   79/     F04 : 73                  	stxd
(1)   80/     F05 : 96                  	ghi	retAddr
(1)   81/     F06 : 52                  	str	sp	
(1)   82/     F07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   83/     F08 : A6                  	plo	retAddr
(1)   84/     F09 : 93                  	ghi	RPC
(1)   85/     F0A : B6                  	phi	retAddr
(1)   86/     F0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   87/     F0C : B3                  	phi	RPC
(1)   88/     F0D : 46                  	lda	retAddr
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 23 - 11/21/2017 16:01:12


(1)   89/     F0E : A3                  	plo	RPC
(1)   90/     F0F : 30 00               	br	_call-1
(1)   91/     F11 :                     
(1)   92/     F11 :                     ;Standard subroutine return 
(1)   93/     F11 : D3                  	sep	RPC	;return to the original program
(1)   94/     F12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   95/     F13 : A3                  	plo	RPC
(1)   96/     F14 : 96                  	ghi	retAddr
(1)   97/     F15 : B3                  	phi	RPC
(1)   98/     F16 : 42                  	lda	SP	;pick up old return address
(1)   99/     F17 : B6                  	phi	retAddr
(1)  100/     F18 : 42                  	lda	SP
(1)  101/     F19 : A6                  	plo	retAddr
(1)  102/     F1A : 30 11               	br	_return-1
(1)  103/     F1C :                     
(1)  104/     F1C :                     _oneMs:		;execute 1ms worth of instructions including call(15)/return(10) sequence. takes about 1 ms
(1)  105/     F1C :                     ;subroutine overhead soaks up 27 instruction time.
(1)  106/     F1C :                     ;each loop is 2 instruction times
(1)  107/     F1C :                     ;so the number of loops needed is 
(1)  108/     F1C :                     ;CPU speed/16000 less the 27 all divide by two
(1)  109/     F1C : =>DEFINED             IFNDEF LCC1802CPUSPEED
(1)  110/     F1C :                     LCC1802CPUSPEED EQU 1600000	;1.6MHZ default
(1)  111/     F1C : [109]                 ENDIF
(1)  112/     F1C :                       
(1)  113/     F1C : =>TRUE                IF LCC1802CPUSPEED<=8000000
(1)  114/     F1C : F8 6F               	ldi	(LCC1802CPUSPEED/1000/16-15-10-2)/2
(1)  115/     F1E : FF 01               $$mslp:	smi	1
(1)  116/     F20 : 3A 1E               	bnz	$$mslp
(1)  117/     F22 : =>FALSE               ELSE
(1)  118/     F22 :                     	ldi	(LCC1802CPUSPEED/1000/16-15-10-2)/4
(1)  119/     F22 :                     $$mslf:	smi	1
(1)  120/     F22 :                     	sex	2
(1)  121/     F22 :                     	sex	2
(1)  122/     F22 :                     	bnz	$$mslf
(1)  123/     F22 : [113]                 ENDIF
(1)  124/     F22 : (MACRO)             	Cretn
(1)  125/     F23 :                     
(1)  126/     F23 :                     
(1)  127/     F23 :                     	
(1)  128/     F23 :                     ;16 bit right shifting multiply which is faster for smaller operands
(1)  129/     F23 :                     ; credit to http://map.grauw.nl/articles/mult_div_shifts.php#lrmultr
(1)  130/     F23 :                     _mulU2:		;retval(product)=regarg1(multiplicand)*regarg2(multiplier)
(1)  131/     F23 : (MACRO)             	ld2z retval
(1)  132/     F27 :                     $$mulrlp:
(1)  133/     F27 : (MACRO)             	shru2 regarg2
(1)  134/     F2D : 3B 3B               	bnf $$mulrnoadd
(1)  135/     F2F :                     ;	bottom bit of multiplier is one so add multiplicand to product
(1)  136/     F2F : (MACRO)             	alu2 retval,retval,regarg1,add,adc
(1)  137/     F3B :                     $$mulrnoadd:
(1)  138/     F3B : 9D                  	ghi regarg2	;check for all bits of multiplier shifted out
(1)  139/     F3C : 3A 41               	bnz $$mulrshft	;nope, continue
(1)  140/     F3E : 8D                  	glo regarg2	;check bottom byte
(1)  141/     F3F : 32 49               	bz $$mulrdone
(1)  142/     F41 :                     $$mulrshft:
(1)  143/     F41 : (MACRO)             	shl2 regarg1	;shift multiplicand left 1
(1)  144/     F47 : 30 27               	br $$mulrlp
(1)  145/     F49 :                     $$mulrdone:		;here the product is in retval
(1)  146/     F49 : (MACRO)             	cretn
(1)  147/     F4A :                     
(1)  148/     F4A :                     ;this is a divisor shifting algorithm which is faster for smaller operands
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 24 - 11/21/2017 16:01:12


(1)  149/     F4A :                     ;credit to http://research.microsoft.com/pubs/70645/tr-2008-141.pdf
(1)  150/     F4A :                     ;changed oct 12 to save R10 & 1/2 R11 on stack
(1)  151/     F4A :                     _divu2: ;retval=regarg1(x or dividend)/regarg2(y or divisor)
(1)  152/     F4A :                     	;uses R14(rwork) to hold original divisor y0, 
(1)  153/     F4A :                     	;regarg1 to hold develop remainder, 
(1)  154/     F4A :                     	;R10 to hold working dividend R11.0 as a temp
(1)  155/     F4A :                     testsub: macro reg1,reg2	;test subtraction of reg2 from reg1
(1)  156/     F4A :                     				;result in D, rwork.hi, DF
(1)  157/     F4A :                     	glo reg2
(1)  158/     F4A :                     	str sp
(1)  159/     F4A :                     	glo reg1
(1)  160/     F4A :                     	sm
(1)  161/     F4A :                     	plo R11
(1)  162/     F4A :                     	ghi reg2
(1)  163/     F4A :                     	str sp
(1)  164/     F4A :                     	ghi reg1
(1)  165/     F4A :                     	smb
(1)  166/     F4A :                     	endm
(1)  167/     F4A :                     	
(1)  168/     F4A : (MACRO)             	pushf R10	;save R10 & leave stack down 1
(1)  169/     F4F : 8B                  	glo R11		;and bottom
(1)  170/     F50 : 73                  	stxd		;of R11 - leaves stack clear of work area
(1)  171/     F51 : (MACRO)             	cpy2 R10,regarg1
(1)  172/     F55 : (MACRO)             	ld2z retval	;quotient
(1)  173/     F59 : (MACRO)             	cpy2 rwork,regarg2
(1)  174/     F5D :                     	
(1)  175/     F5D : (MACRO)             	testsub R10,regarg2
(1)  176/     F66 : 3B 81               	bnf $$computequot	;DF=0 means it didn't fit
(1)  177/     F68 : BA                  	phi R10	;R10=R10-regarg2
(1)  178/     F69 : 8B                  	glo R11
(1)  179/     F6A : AA                  	plo R10
(1)  180/     F6B :                     	
(1)  181/     F6B :                     $$again:	;this is the divisor doubling phase
(1)  182/     F6B : (MACRO)              	testsub R10,regarg2
(1)  183/     F74 : 3B 81                	bnf $$computequot	;df=0 means it didn't fit
(1)  184/     F76 : BA                  	phi R10	;R10=R10-regarg2
(1)  185/     F77 : 8B                  	glo R11
(1)  186/     F78 : AA                  	plo R10 	
(1)  187/     F79 : (MACRO)              	shl2 regarg2	;y=y+y
(1)  188/     F7F : 30 6B                	br $$again
(1)  189/     F81 :                      	
(1)  190/     F81 :                      $$computequot:	;here we're computing the quotient
(1)  191/     F81 : (MACRO)              	testsub regarg1,regarg2
(1)  192/     F8A : 3B 90                	bnf $$testexit
(1)  193/     F8C : BC                   	phi regarg1		;complete the subtraction
(1)  194/     F8D : 8B                   	glo R11
(1)  195/     F8E : AC                   	plo regarg1
(1)  196/     F8F : 1F                   	inc retval
(1)  197/     F90 :                      $$testexit:
(1)  198/     F90 : 9E                   	ghi rwork
(1)  199/     F91 : F7                   	sm	;top of regarg2 is still on stack
(1)  200/     F92 : 3A 9A                	bnz $$ney0y
(1)  201/     F94 : 8D                   	glo regarg2
(1)  202/     F95 : 52                   	str sp
(1)  203/     F96 : 8E                   	glo rwork
(1)  204/     F97 : F7                   	sm	;test low order bytes
(1)  205/     F98 : 32 A8                	bz	$$out	;if = we're done
(1)  206/     F9A :                      $$ney0y:
(1)  207/     F9A : (MACRO)              	shl2 retval	;double quotient
(1)  208/     FA0 : (MACRO)              	shrU2 regarg2	;halve divisor
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 25 - 11/21/2017 16:01:12


(1)  209/     FA6 : 30 81                	br $$computequot	;continue
(1)  210/     FA8 :                      $$out:
(1)  211/     FA8 :                      ;here the quotient is in retval, remainder in regarg1
(1)  212/     FA8 : 12                    	inc sp	;release work area
(1)  213/     FA9 : 42                  	lda sp	;recover
(1)  214/     FAA : AB                  	plo R11	;bottom byte of R11
(1)  215/     FAB : (MACRO)             	popr R10 ;and all of R10
(1)  216/     FAF : (MACRO)             	cretn	;and we're done
(1)  217/     FB0 :                     
(1)  218/     FB0 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  219/     FB0 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  220/     FB0 :                     _divI2:
(1)  221/     FB0 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  222/     FB0 : 22                      dec	sp	;leave a work area available
(1)  223/     FB1 : 9C                      ghi regArg1
(1)  224/     FB2 : 52                      str sp	;save the sign of the 1st arg
(1)  225/     FB3 : FE                      shl
(1)  226/     FB4 : 3B BF                   bnf $$pos1	;if the 1st arg is -v
(1)  227/     FB6 : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  228/     FBF :                     $$pos1: ;1st is now +v, check 2nd
(1)  229/     FBF : 9D                      ghi regArg2
(1)  230/     FC0 : F3                      xor	
(1)  231/     FC1 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  232/     FC2 : 9D                      ghi regArg2
(1)  233/     FC3 : FE                      shl
(1)  234/     FC4 : 3B CF                   bnf $$pos2	;if the 2nd arg is -v
(1)  235/     FC6 : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  236/     FCF :                     $$pos2: ; both args now +v
(1)  237/     FCF : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  238/     FD2 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  239/     FD2 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  240/     FD3 : FE                      shl
(1)  241/     FD4 : 3B DF                   bnf $$done ;if the signs were different
(1)  242/     FD6 : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  243/     FDF :                     $$done:
(1)  244/     FDF :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  245/     FDF : (MACRO)                 Cretn ;and we're done - I hope!
(1)  246/     FE0 :                     
(1)  247/     FE0 :                     
(1)  248/     FE0 :                     	align 256    ;32 bit operations follow
(1)  249/    1000 :                     _divu4:
(1)  250/    1000 :                     ;This is an unsigned 32 bit restoring division
(1)  251/    1000 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  252/    1000 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  253/    1000 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  254/    1000 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  255/    1000 :                     
(1)  256/    1000 : F8 20               	ldi 32		;set loop count
(1)  257/    1002 : AE                  	plo memaddr	;in temp register
(1)  258/    1003 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  259/    100F :                     $$loop:
(1)  260/    100F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  261/    101B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  262/    1027 :                     
(1)  263/    1027 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  264/    103D :                     
(1)  265/    103D : FA 80               	ani 0x80	;check the top bit
(1)  266/    103F : 32 5D               	bz $$norestore	;if it's 0
(1)  267/    1041 : 89                  		glo RL8
(1)  268/    1042 : FA FE               		ani 0xfe	;turn off the bottom bit
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 26 - 11/21/2017 16:01:12


(1)  269/    1044 : A9                  		plo RL8
(1)  270/    1045 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  271/    105B : 30 61               	br $$endlp 	;else
(1)  272/    105D :                     $$norestore:
(1)  273/    105D : 89                  		glo RL8
(1)  274/    105E : F9 01               		ori 1	;turn on the bottom bit
(1)  275/    1060 : A9                  		plo RL8
(1)  276/    1061 :                     	;end if
(1)  277/    1061 :                     $$endlp:
(1)  278/    1061 : 2E                  	dec memaddr	;check the cycle count
(1)  279/    1062 : 8E                  	glo memaddr
(1)  280/    1063 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  281/    1065 :                     	
(1)  282/    1065 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  283/    1066 :                     		
(1)  284/    1066 :                     
(1)  285/    1066 :                     _mulu4:
(1)  286/    1066 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  287/    1066 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  288/    1066 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  289/    1066 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  290/    1066 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  291/    1066 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  292/    1066 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  293/    1066 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  294/    1066 :                     	;for 10 we subtract and shift
(1)  295/    1066 :                     	;for 00 and 11 we just shift
(1)  296/    1066 :                     
(1)  297/    1066 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  298/    1072 : F8 20                   ldi 32
(1)  299/    1074 : AE                      plo memaddr		;cycle count
(1)  300/    1075 : FC 00                   adi 0		;clear df
(1)  301/    1077 :                     $$mloop:
(1)  302/    1077 : 89                      glo RL8
(1)  303/    1078 : FA 01                   ani 1		;isolate bottom bit of result
(1)  304/    107A : 3B 96                   bnf	$$check_sub	;
(1)  305/    107C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  306/    107E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  307/    107E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  308/    1094 : 30 AE                   br $$shift
(1)  309/    1096 :                     $$check_sub:
(1)  310/    1096 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  311/    1098 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  312/    1098 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  313/    10AE :                     $$shift:
(1)  314/    10AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  315/    10BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  316/    10C8 :                     
(1)  317/    10C8 : 2E                      dec memaddr		;cycle count
(1)  318/    10C9 : 8E                      glo memaddr
(1)  319/    10CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  320/    10CC :                         
(1)  321/    10CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  322/    10CD :                     
(1)  323/    10CD :                     	align 256
(1)  324/    1100 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  325/    1100 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  326/    1100 :                     _divI4:
(1)  327/    1100 : 22                      dec	sp	;leave a work area available
(1)  328/    1101 : 98                      ghi RL8-1	;get the top of the dividend
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 27 - 11/21/2017 16:01:12


(1)  329/    1102 : 52                      str sp	;save the sign of the 1st arg
(1)  330/    1103 : FE                      shl
(1)  331/    1104 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  332/    1106 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  333/    1126 :                     $$pos1: ;1st is now +v, check 2nd
(1)  334/    1126 : 9A                      ghi RL10-1
(1)  335/    1127 : F3                      xor	
(1)  336/    1128 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  337/    1129 : 9A                      ghi RL10-1
(1)  338/    112A : FE                      shl
(1)  339/    112B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  340/    112D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  341/    114D :                     $$pos2: ; both args now +v
(1)  342/    114D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  343/    1150 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  344/    1150 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  345/    1151 : FE                      shl
(1)  346/    1152 : 3B 74                   bnf $$done ;if the signs were different
(1)  347/    1154 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  348/    1174 :                     $$done:
(1)  349/    1174 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  350/    1175 :                     
(1)  351/    1175 :                     _dubdabx:	
(1)  352/    1175 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  353/    1175 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  354/    1175 :                     ;long interger is passed in rp1p2
(1)  355/    1175 :                     ;buffer pointer is passed at sp+2+4
(1)  356/    1175 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  357/    1175 :                     ;r8-11 are used as temps
(1)  358/    1175 :                     ;r8 is the working pointer
(1)  359/    1175 :                     ;r15.0 is bit count(32) and the return value register
(1)  360/    1175 :                     ;r9.0 is digit count
(1)  361/    1175 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  362/    1175 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  363/    1181 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  364/    118D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  365/    1191 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  366/    1193 : A9                  	plo r9
(1)  367/    1194 :                     $$clrlp:	;clear the passed buffer
(1)  368/    1194 : F8 00               	ldi 0	
(1)  369/    1196 : 58                  	str r8	;clear a byte
(1)  370/    1197 : 18                  	inc r8
(1)  371/    1198 : 29                  	dec r9
(1)  372/    1199 : 89                  	glo r9	;check the count
(1)  373/    119A : 3A 94               	bnz $$clrlp ;back for more
(1)  374/    119C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  375/    11A0 :                     
(1)  376/    11A0 : F8 20               	ldi 32	;bit count
(1)  377/    11A2 : AF                  	plo r15
(1)  378/    11A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  379/    11A3 :                     $$cktop:
(1)  380/    11A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  381/    11A4 : FE                  	shl		;check for a 1
(1)  382/    11A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  383/    11A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  384/    11B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  385/    11B4 : 8F                  	glo r15
(1)  386/    11B5 : 3A A3               	bnz $$cktop	;
(1)  387/    11B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  388/    11B8 :                     $$bitloop:
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 28 - 11/21/2017 16:01:12


(1)  389/    11B8 : F8 0A               	ldi 10	;digit count
(1)  390/    11BA : A9                  	plo r9
(1)  391/    11BB :                     $$dcklp:
(1)  392/    11BB : 08                  	ldn r8 	;pick up a digit
(1)  393/    11BC : FF 05               	smi 5	;see if it's greater than 4
(1)  394/    11BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  395/    11C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  396/    11C2 : 58                  	str r8	;put it back
(1)  397/    11C3 :                     $$dnoadd:
(1)  398/    11C3 : 18                  	inc r8
(1)  399/    11C4 : 29                  	dec r9	;decrement digit count
(1)  400/    11C5 : 89                  	glo r9
(1)  401/    11C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  402/    11C8 :                     	
(1)  403/    11C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  404/    11D4 :                     	
(1)  405/    11D4 : F8 0A               	ldi 10	;load the digit count again
(1)  406/    11D6 : A9                  	plo r9
(1)  407/    11D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  408/    11D7 :                     $$dshlp:
(1)  409/    11D7 : 28                  	dec r8	;walk back from 0's position
(1)  410/    11D8 : 08                  	ldn r8	;get the digit back
(1)  411/    11D9 : 7E                  	shlc	;continue the shift
(1)  412/    11DA : BF                  	phi r15 ;save it for the carry test
(1)  413/    11DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  414/    11DD : 58                  	str r8	;put the digit back
(1)  415/    11DE : 9F                  	ghi r15	;now test for carry
(1)  416/    11DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  417/    11E1 : 29                  	dec r9	;decrement the digit count
(1)  418/    11E2 : 89                  	glo r9
(1)  419/    11E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  420/    11E5 :                     	
(1)  421/    11E5 : 2F                  	dec r15
(1)  422/    11E6 : 8F                  	glo r15
(1)  423/    11E7 : 3A B8               	bnz $$bitloop
(1)  424/    11E9 :                     	
(1)  425/    11E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  426/    11ED : F8 0A               	ldi 10		;digit count again
(1)  427/    11EF : A9                  	plo r9
(1)  428/    11F0 :                     $$upnxt:
(1)  429/    11F0 : 08                  	ldn r8		;get digit
(1)  430/    11F1 : F9 30               	ori 0x30	;make ascii
(1)  431/    11F3 : 58                  	str r8		;put it back
(1)  432/    11F4 : 18                  	inc r8		;next digit
(1)  433/    11F5 : 29                  	dec r9		;counter
(1)  434/    11F6 : 89                  	glo r9
(1)  435/    11F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  436/    11F9 :                     	
(1)  437/    11F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  438/    1201 : EE                  	sex memaddr	;set up
(1)  439/    1202 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  440/    1204 : F7                  	sm		;desired number of digits to skip
(1)  441/    1205 : E2                  	sex sp		;reset index register
(1)  442/    1206 : A9                  	plo r9		;number of leading 0's to skip
(1)  443/    1207 :                     $$cknext:
(1)  444/    1207 : 0F                  	ldn r15		;check digit
(1)  445/    1208 : FF 30               	smi 0x30	;for '0'
(1)  446/    120A : 3A 11               	bnz $$done
(1)  447/    120C : 1F                  	inc r15		;next digit
(1)  448/    120D : 29                  	dec r9		;reduce count
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(lcc1802epiloDH.inc) - page 29 - 11/21/2017 16:01:12


(1)  449/    120E : 89                  	glo r9
(1)  450/    120F : 3A 07               	bnz $$cknext
(1)  451/    1211 :                     $$done:
(1)  452/    1211 : (MACRO)             	cretn
(1)  453/    1212 :                     	
(1)  454/    1212 :                     	
(1)  455/    1212 :                     _modU4:	;32 bit unsigned remainder
(1)  456/    1212 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  457/    1212 : (MACRO)                 Ccall _divU4
(1)  458/    1215 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  459/    121D : (MACRO)                 Cretn
(1)  460/    121E :                         
(1)  461/    121E :                     _modI4:	;32 bit signed remainder
(1)  462/    121E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  463/    121E : (MACRO)                 Ccall _divI4
(1)  464/    1221 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  465/    1229 : (MACRO)                 Cretn
(1)  466/    122A :                     	
(1)  467/    122A :                     
    1053/    122A :                     	include LCC1802FP.inc
(1)    1/    122A :                     ;17-03-06 changing sep rret to cretn, sep rcall to ccall
(1)    2/    122A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    3/    122A :                     ;maybe originally from RCA
(1)    4/    122A :                     ;these routines use ALL the registers from 6-15!
(1)    5/    122A :                     ;8-15 were more or less available to start with
(1)    6/    122A :                     ;it saves 6 when it uses it
(1)    7/    122A :                     ;I save 7 on entry and restore on exit
(1)    8/    122A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    9/    122A : =BH                 FB	equ	11	;was R9
(1)   10/    122A : =9H                 F9	equ	9	;was R7
(1)   11/    122A : =7H                 F7	equ	7	;was RB
(1)   12/    122A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   13/    122A :                     ; *** Convert signed long to float
(1)   14/    122A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   15/    122A :                     ; *** result in same register
(1)   16/    122A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   17/    122A :                     	align 256
(1)   18/    1300 : F8 00               cvif4:	ldi	0
(1)   19/    1302 : BE                  	phi	memaddr	;sign
(1)   20/    1303 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   21/    1305 : AE                  	plo	memaddr	;
(1)   22/    1306 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   23/    1307 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   24/    1309 : FE                  	shl		;sign bit to df
(1)   25/    130A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   26/    130C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   27/    130D : BE                  	phi	memaddr	;save it
(1)   28/    130E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   29/    132E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   30/    1330 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   31/    1331 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   32/    1333 : 99                  	ghi	RL8	;next byte
(1)   33/    1334 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   34/    1336 : 89                  	glo	RL8	;last byte
(1)   35/    1337 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   36/    1339 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   37/    133A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   38/    133C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   39/    133D : (MACRO)             	shru4	RL8
(1)   40/    1349 : 30 39               	br	$$sgnpos
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 30 - 11/21/2017 16:01:12


(1)   41/    134B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   42/    134C : FA 80               	ani	0x80	;isolate it
(1)   43/    134E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   44/    1350 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   45/    1351 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   46/    135D : 30 4B               	br	$$shl
(1)   47/    135F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   48/    1360 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   49/    1361 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   50/    1362 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   51/    1364 : 88                  	glo	RL8-1	;get the byte
(1)   52/    1365 : FA 7F               	ani	0x7f	;clear bit 23
(1)   53/    1367 : A8                  	plo	RL8-1	;put it back
(1)   54/    1368 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   55/    1369 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   56/    136B : 98                  	ghi	RL8-1	;get the sign byte
(1)   57/    136C : F9 80               	ori	0x80	;set the sign bit
(1)   58/    136E : B8                  	phi	RL8-1	;place it
(1)   59/    136F : (MACRO)             $$done:	Cretn		;and we're done
(1)   60/    1370 :                     	
(1)   61/    1370 :                     
(1)   62/    1370 :                     
(1)   63/    1370 :                     ; *** Convert float to signed long
(1)   64/    1370 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   65/    1370 :                     ; *** result in same register
(1)   66/    1370 :                     	align 256
(1)   67/    1400 :                     cvfi4:
(1)   68/    1400 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   69/    1401 : BE                  	phi	memaddr ;save for later
(1)   70/    1402 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   71/    1403 : FE                  	shl		;shift to df
(1)   72/    1404 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   73/    1405 : 7E                  	shlc		;combine with 0
(1)   74/    1406 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   75/    1406 : 22                  	dec	sp
(1)   76/    1407 : 52                  	str	sp
(1)   77/    1408 : F8 96               	ldi	150
(1)   78/    140A : F7                  	sm		;calculate shift count needed
(1)   79/    140B :                     ;*******note - the df flag set here is tested later
(1)   80/    140B : AE                  	plo	memaddr
(1)   81/    140C : 12                  	inc	sp	;release work area
(1)   82/    140D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   83/    140D : F8 00               	ldi	0
(1)   84/    140F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   85/    1410 : 88                  	glo	RL8-1	;get the next byte
(1)   86/    1411 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   87/    1413 : A8                  	plo	RL8-1	;put it back
(1)   88/    1414 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   89/    1415 : 32 3B               	bz	$$sign
(1)   90/    1417 :                     ;**********note df is set from subtraction before setting mantissa
(1)   91/    1417 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   92/    1419 :                     
(1)   93/    1419 : (MACRO)             $$shr:	shru4	RL8
(1)   94/    1425 : 2E                  	dec	memaddr	;check shift count
(1)   95/    1426 : 8E                  	glo	memaddr
(1)   96/    1427 : 3A 19               	bnz	$$shr	;complete the shift
(1)   97/    1429 : 30 3B               	br	$$sign
(1)   98/    142B :                     
(1)   99/    142B :                     ;handle negative shift as best I can - gigo
(1)  100/    142B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 31 - 11/21/2017 16:01:12


(1)  101/    1437 : 1E                  	inc	memaddr
(1)  102/    1438 : 8E                  	glo	memaddr
(1)  103/    1439 : 3A 2B               	bnz	$$lsh	
(1)  104/    143B :                     	
(1)  105/    143B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  106/    143C : FE                  	shl		;shift sign bit into df
(1)  107/    143D : 3B 61               	bnf	$$done
(1)  108/    143F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  109/    145F : 30 61               	br	$$done	; and return
(1)  110/    1461 :                     
(1)  111/    1461 : (MACRO)             $$done:	Cretn		;and we're done
(1)  112/    1462 :                     
(1)  113/    1462 :                     ; *** Check if character is numeric
(1)  114/    1462 :                     ; *** D - char to check
(1)  115/    1462 :                     ; *** Returns DF=1 if numeric
(1)  116/    1462 :                     ; ***         DF=0 if not
(1)  117/    1462 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  118/    1463 : FF 30                          smi     '0'                 ; check for below zero
(1)  119/    1465 : 3B 6E                          bnf     fails               ; jump if below
(1)  120/    1467 : FF 0A                          smi     10                  ; see if above
(1)  121/    1469 : 33 6E                          bdf     fails               ; fails if so
(1)  122/    146B : FF 00               passes:    smi     0                   ; signal success
(1)  123/    146D : C8                             lskp
(1)  124/    146E : FC 00               fails:     adi     0                   ; signal failure
(1)  125/    1470 : 8E                             glo     r14                 ; recover character
(1)  126/    1471 : (MACRO)                        cretn	                ; and return; ******************************* 17-03-06
(1)  127/    1472 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  128/    1472 :                     ; *******************************
(1)  129/    1472 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  130/    1473 : F6                             shr
(1)  131/    1474 : B8                             phi   r8
(1)  132/    1475 : 88                             glo   r8
(1)  133/    1476 : 76                             shrc
(1)  134/    1477 : A8                             plo   r8
(1)  135/    1478 : 99                             ghi   F9                    ; shift low word right
(1)  136/    1479 : 76                             shrc
(1)  137/    147A : B9                             phi   F9
(1)  138/    147B : 89                             glo   F9
(1)  139/    147C : 76                             shrc
(1)  140/    147D : A9                             plo   F9
(1)  141/    147E : (MACRO)                        Cretn
(1)  142/    147F :                     
(1)  143/    147F :                     ; ******************************
(1)  144/    147F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  145/    147F :                     ; ******************************
(1)  146/    147F : 89                  fp_shl_1:  glo   F9
(1)  147/    1480 : FE                             shl
(1)  148/    1481 : A9                             plo   F9
(1)  149/    1482 : 99                             ghi   F9
(1)  150/    1483 : 7E                             shlc
(1)  151/    1484 : B9                             phi   F9
(1)  152/    1485 : 88                             glo   r8
(1)  153/    1486 : 7E                             shlc
(1)  154/    1487 : A8                             plo   r8
(1)  155/    1488 : 98                             ghi   r8
(1)  156/    1489 : 7E                             shlc
(1)  157/    148A : B8                             phi   r8
(1)  158/    148B : (MACRO)                        cretn	;17-03-06
(1)  159/    148C :                     
(1)  160/    148C :                     ; **********************
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 32 - 11/21/2017 16:01:12


(1)  161/    148C :                     ; *** R8:F9 += RA:FB ***
(1)  162/    148C :                     ; **********************
(1)  163/    148C : 8B                  fp_add_12: glo   FB
(1)  164/    148D : 22                  	   dec r2	;wjr - make a work area
(1)  165/    148E : 52                             str   r2
(1)  166/    148F : 89                             glo   F9
(1)  167/    1490 : F4                             add
(1)  168/    1491 : A9                             plo   F9
(1)  169/    1492 : 9B                             ghi   FB
(1)  170/    1493 : 52                             str   r2
(1)  171/    1494 : 99                             ghi   F9
(1)  172/    1495 : 74                             adc
(1)  173/    1496 : B9                             phi   F9
(1)  174/    1497 : 8A                             glo   R10
(1)  175/    1498 : 52                             str   r2
(1)  176/    1499 : 88                             glo   r8
(1)  177/    149A : 74                             adc
(1)  178/    149B : A8                             plo   r8
(1)  179/    149C : 9A                             ghi   R10
(1)  180/    149D : 52                             str   r2
(1)  181/    149E : 98                             ghi   r8
(1)  182/    149F : 74                             adc
(1)  183/    14A0 : B8                             phi   r8
(1)  184/    14A1 : 12                             inc	r2	;wjr - release work area
(1)  185/    14A2 : (MACRO)                        Cretn
(1)  186/    14A3 :                     
(1)  187/    14A3 :                     ; *******************************
(1)  188/    14A3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  189/    14A3 :                     ; *******************************
(1)  190/    14A3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  191/    14A4 : F6                             shr
(1)  192/    14A5 : BF                             phi   R15
(1)  193/    14A6 : 8F                             glo   R15
(1)  194/    14A7 : 76                             shrc
(1)  195/    14A8 : AF                             plo   R15
(1)  196/    14A9 : 9D                             ghi   R13                    ; shift low word right
(1)  197/    14AA : 76                             shrc
(1)  198/    14AB : BD                             phi   R13
(1)  199/    14AC : 8D                             glo   R13
(1)  200/    14AD : 76                             shrc
(1)  201/    14AE : AD                             plo   R13
(1)  202/    14AF : (MACRO)                        Cretn
(1)  203/    14B0 :                     
(1)  204/    14B0 :                     ; *************************************
(1)  205/    14B0 :                     ; *** Scale number to high bit is 1 ***
(1)  206/    14B0 :                     ; *** R8:F9 - Number to scale       ***
(1)  207/    14B0 :                     ; *** RF.1  - Exponent for number   ***
(1)  208/    14B0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  209/    14B0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  210/    14B0 :                     ; *************************************
(1)  211/    14B0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  212/    14B1 : FA 80                          ani   080h                  ; check it
(1)  213/    14B3 : CA 14 C0                       lbnz  fp_sc_cln             ; jump if good
(1)  214/    14B6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  215/    14B9 : 9F                             ghi   R15                    ; get exp1
(1)  216/    14BA : FF 01                          smi   1                     ; minus 1
(1)  217/    14BC : BF                             phi   R15                    ; and put it back
(1)  218/    14BD : C0 14 B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  219/    14C0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  220/    14C1 : FE                             shl                         ; shift out high 1 bit
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 33 - 11/21/2017 16:01:12


(1)  221/    14C2 : A8                             plo   r8                    ; set aside
(1)  222/    14C3 : 9F                             ghi   R15                    ; get exponent byte
(1)  223/    14C4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  224/    14C5 : F6                             shr                         ; shift bit 0 into DF
(1)  225/    14C6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  226/    14C7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  227/    14C8 : A8                             plo   r8                    ; and put it back
(1)  228/    14C9 : 87                             glo   F7                   ; get signs
(1)  229/    14CA : F6                             shr                         ; get sign 1
(1)  230/    14CB : 98                             ghi   r8                    ; recover exponent
(1)  231/    14CC : 76                             shrc                        ; shift in sign
(1)  232/    14CD : B8                             phi   r8                    ; put it back
(1)  233/    14CE : 12                             inc	r2	;wjr release work area
(1)  234/    14CF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  235/    14D3 : (MACRO)             	   popr R12	;wjr
(1)  236/    14D7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  237/    14DB : (MACRO)                        Cretn                       ; return to caller
(1)  238/    14DC :                     
(1)  239/    14DC :                     ; ************************************
(1)  240/    14DC :                     ; *** Get exponenst from arguments ***
(1)  241/    14DC :                     ; *** R8:F9 - Arg 1                ***
(1)  242/    14DC :                     ; *** RA:FB - Arg 2                ***
(1)  243/    14DC :                     ; *** Returns: RF.1 - exp1         ***
(1)  244/    14DC :                     ; ***          RF.0 - exp2         ***
(1)  245/    14DC :                     ; ************************************
(1)  246/    14DC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  247/    14DD : FE                             shl                         ; shift it into DF
(1)  248/    14DE : 98                             ghi   r8                    ; get top 7 bits
(1)  249/    14DF : 7E                             shlc                        ; shift in first bit
(1)  250/    14E0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  251/    14E1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  252/    14E1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  253/    14E2 : FE                             shl                         ; shift it into DF
(1)  254/    14E3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  255/    14E4 : 7E                             shlc                        ; shift in first bit
(1)  256/    14E5 : AF                             plo   R15                    ; put into RF
(1)  257/    14E6 : (MACRO)                        cretn	                  ; return to caller 17-03-06
(1)  258/    14E7 :                     
(1)  259/    14E7 :                     ; ************************************
(1)  260/    14E7 :                     ; *** Get signs from arguments     ***
(1)  261/    14E7 :                     ; *** R8:F9 - Arg 1                ***
(1)  262/    14E7 :                     ; *** RA:FB - Arg 2                ***
(1)  263/    14E7 :                     ; *** Returns: F7.0 - signs        ***
(1)  264/    14E7 :                     ; ************************************
(1)  265/    14E7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  266/    14E8 : FE                             shl                         ; shift into DF
(1)  267/    14E9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  268/    14EA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  269/    14EB : 7E                             shlc                        ; now shift in sign of arg2
(1)  270/    14EC : A7                             plo   F7                    ; save them
(1)  271/    14ED : (MACRO)                        Cretn                       ; return to caller
(1)  272/    14EE :                     
(1)  273/    14EE :                     ; ***************************************
(1)  274/    14EE :                     ; *** Add 2 SP floating point numbers ***
(1)  275/    14EE :                     ; *** R8:F9 - Arg 1                   ***
(1)  276/    14EE :                     ; *** RA:FB - Arg 2                   ***
(1)  277/    14EE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  278/    14EE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  279/    14EE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  280/    14EE :                     ; ***        F7.0 - signs        ***
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 34 - 11/21/2017 16:01:12


(1)  281/    14EE :                     ; ***************************************
(1)  282/    14EE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  283/    14EF : CA 15 07                       lbnz  add_a1nz
(1)  284/    14F2 : 88                             glo   r8
(1)  285/    14F3 : CA 15 07                       lbnz  add_a1nz
(1)  286/    14F6 : 99                             ghi   F9
(1)  287/    14F7 : CA 15 07                       lbnz  add_a1nz
(1)  288/    14FA : 89                             glo   F9
(1)  289/    14FB : CA 15 07                       lbnz  add_a1nz
(1)  290/    14FE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  291/    14FF : B8                             phi   r8
(1)  292/    1500 : 8A                             glo   R10
(1)  293/    1501 : A8                             plo   r8
(1)  294/    1502 : 9B                             ghi   FB
(1)  295/    1503 : B9                             phi   F9
(1)  296/    1504 : 8B                             glo   FB
(1)  297/    1505 : A9                             plo   F9
(1)  298/    1506 : (MACRO)                        Cretn                        ; return to caller
(1)  299/    1507 :                     
(1)  300/    1507 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  301/    1508 : CA 15 18                       lbnz  add_a2nz
(1)  302/    150B : 8A                             glo   R10
(1)  303/    150C : CA 15 18                       lbnz  add_a2nz
(1)  304/    150F : 9B                             ghi   FB
(1)  305/    1510 : CA 15 18                       lbnz  add_a2nz
(1)  306/    1513 : 8B                             glo   FB
(1)  307/    1514 : CA 15 18                       lbnz  add_a2nz
(1)  308/    1517 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  309/    1518 :                                
(1)  310/    1518 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  311/    151D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  312/    1522 : (MACRO)             	   pushr R13	;wjr
(1)  313/    1527 : 22                  	   dec	r2	;wjr - make a work area
(1)  314/    1528 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  315/    152B : 9F                             ghi   R15
(1)  316/    152C : 52                             str   r2
(1)  317/    152D : 8F                             glo   R15
(1)  318/    152E : F7                             sm                          ; perfrom exp2 - exp1
(1)  319/    152F : CB 15 50                       lbnf  add_ns                ; jump if no swap needed
(1)  320/    1532 :                     
(1)  321/    1532 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  322/    1533 : AE                             plo   R14
(1)  323/    1534 : 9A                             ghi   R10
(1)  324/    1535 : B8                             phi   r8
(1)  325/    1536 : 8E                             glo   R14
(1)  326/    1537 : BA                             phi   R10
(1)  327/    1538 : 88                             glo   r8
(1)  328/    1539 : AE                             plo   R14
(1)  329/    153A : 8A                             glo   R10
(1)  330/    153B : A8                             plo   r8
(1)  331/    153C : 8E                             glo   R14
(1)  332/    153D : AA                             plo   R10
(1)  333/    153E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  334/    153F : AE                             plo   R14
(1)  335/    1540 : 9B                             ghi   FB
(1)  336/    1541 : B9                             phi   F9
(1)  337/    1542 : 8E                             glo   R14
(1)  338/    1543 : BB                             phi   FB
(1)  339/    1544 : 89                             glo   F9
(1)  340/    1545 : AE                             plo   R14
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 35 - 11/21/2017 16:01:12


(1)  341/    1546 : 8B                             glo   FB
(1)  342/    1547 : A9                             plo   F9
(1)  343/    1548 : 8E                             glo   R14
(1)  344/    1549 : AB                             plo   FB
(1)  345/    154A : 9F                             ghi   R15                    ; swap exponents
(1)  346/    154B : AE                             plo   R14
(1)  347/    154C : 8F                             glo   R15
(1)  348/    154D : BF                             phi   R15
(1)  349/    154E : 8E                             glo   R14
(1)  350/    154F : AF                             plo   R15
(1)  351/    1550 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  352/    1553 : F8 00                          ldi   0                     ; setup mantissas
(1)  353/    1555 : B8                             phi   r8
(1)  354/    1556 : BA                             phi   R10
(1)  355/    1557 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  356/    1559 : 52                             str   r2
(1)  357/    155A : 88                             glo   r8
(1)  358/    155B : F1                             or
(1)  359/    155C : A8                             plo   r8
(1)  360/    155D : 8A                             glo   R10
(1)  361/    155E : F1                             or
(1)  362/    155F : AA                             plo   R10
(1)  363/    1560 : 9F                             ghi   R15                    ; get exp1
(1)  364/    1561 : 52                             str   r2                    ; place into memory
(1)  365/    1562 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  366/    1563 : F7                             sm                          ; see if match to exp1
(1)  367/    1564 : C2 15 77                       lbz   add_lp1dn             ; jump if match
(1)  368/    1567 : 8F                             glo   R15                    ; need to increase it
(1)  369/    1568 : FC 01                          adi   1
(1)  370/    156A : AF                             plo   R15
(1)  371/    156B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  372/    156C : F6                             shr
(1)  373/    156D : AA                             plo   R10
(1)  374/    156E : 9B                             ghi   FB
(1)  375/    156F : 76                             shrc
(1)  376/    1570 : BB                             phi   FB
(1)  377/    1571 : 8B                             glo   FB
(1)  378/    1572 : 76                             shrc
(1)  379/    1573 : AB                             plo   FB
(1)  380/    1574 : C0 15 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  381/    1577 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  382/    1578 : 52                             str   r2
(1)  383/    1579 : F6                             shr
(1)  384/    157A : F3                             xor
(1)  385/    157B : FA 01                          ani   1                     ; keep only bottom bit
(1)  386/    157D : CA 15 86                       lbnz  add_nm                ; jump if signs do not match
(1)  387/    1580 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  388/    1583 : C0 15 BF                       lbr   add_fnl               ; jump to clean up
(1)  389/    1586 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  390/    1587 : 52                             str   r2
(1)  391/    1588 : 89                             glo   F9
(1)  392/    1589 : F7                             sm
(1)  393/    158A : AC                             plo   R12                    ; place into RD:RC
(1)  394/    158B : 9B                             ghi   FB
(1)  395/    158C : 52                             str   r2
(1)  396/    158D : 99                             ghi   F9
(1)  397/    158E : 77                             smb
(1)  398/    158F : BC                             phi   R12
(1)  399/    1590 : 8A                             glo   R10
(1)  400/    1591 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 36 - 11/21/2017 16:01:12


(1)  401/    1592 : 88                             glo   r8
(1)  402/    1593 : 77                             smb
(1)  403/    1594 : AD                             plo   R13
(1)  404/    1595 : 9A                             ghi   R10
(1)  405/    1596 : 52                             str   r2
(1)  406/    1597 : 98                             ghi   r8
(1)  407/    1598 : 77                             smb
(1)  408/    1599 : BD                             phi   R13
(1)  409/    159A : CB 15 A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  410/    159D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  411/    159E : B8                             phi   r8
(1)  412/    159F : 8D                             glo   R13
(1)  413/    15A0 : A8                             plo   r8
(1)  414/    15A1 : 9C                             ghi   R12
(1)  415/    15A2 : B9                             phi   F9
(1)  416/    15A3 : 8C                             glo   R12
(1)  417/    15A4 : A9                             plo   F9
(1)  418/    15A5 : C0 15 BF                       lbr   add_fnl               ; finalize
(1)  419/    15A8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  420/    15A9 : 52                             str   r2
(1)  421/    15AA : 8B                             glo   FB
(1)  422/    15AB : F7                             sm
(1)  423/    15AC : A9                             plo   F9
(1)  424/    15AD : 99                             ghi   F9
(1)  425/    15AE : 52                             str   r2
(1)  426/    15AF : 9B                             ghi   FB
(1)  427/    15B0 : 77                             smb
(1)  428/    15B1 : B9                             phi   F9
(1)  429/    15B2 : 88                             glo   r8
(1)  430/    15B3 : 52                             str   r2
(1)  431/    15B4 : 8A                             glo   R10
(1)  432/    15B5 : 77                             smb
(1)  433/    15B6 : A8                             plo   r8
(1)  434/    15B7 : 98                             ghi   r8
(1)  435/    15B8 : 52                             str   r2
(1)  436/    15B9 : 9A                             ghi   R10
(1)  437/    15BA : 77                             smb
(1)  438/    15BB : B8                             phi   r8
(1)  439/    15BC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  440/    15BD : FE                             shl
(1)  441/    15BE : A7                             plo   F7
(1)  442/    15BF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  443/    15C0 : CA 15 DD                       lbnz  add_nz                ; jump if not
(1)  444/    15C3 : 88                             glo   r8
(1)  445/    15C4 : CA 15 DD                       lbnz  add_nz
(1)  446/    15C7 : 99                             ghi   F9
(1)  447/    15C8 : CA 15 DD                       lbnz  add_nz
(1)  448/    15CB : 89                             glo   F9
(1)  449/    15CC : CA 15 DD                       lbnz  add_nz
(1)  450/    15CF : 12                             inc	r2	;wjr release work area
(1)  451/    15D0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  452/    15D4 : (MACRO)             	   popr R12	;wjr
(1)  453/    15D8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  454/    15DC : (MACRO)                        Cretn                       ; return the zero
(1)  455/    15DD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  456/    15DE : C2 15 EB                       lbz   add_nx                ; jump if not
(1)  457/    15E1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  458/    15E4 : 9F                             ghi   R15                    ; get exp1
(1)  459/    15E5 : FC 01                          adi   1                     ; increment it
(1)  460/    15E7 : BF                             phi   R15                    ; and put it back
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 37 - 11/21/2017 16:01:12


(1)  461/    15E8 : C0 15 DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  462/    15EB :                     
(1)  463/    15EB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  464/    15EC : F6                             shr
(1)  465/    15ED : A7                             plo   F7
(1)  466/    15EE : C0 14 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  467/    15F1 :                     
(1)  468/    15F1 :                     ; ***************************************
(1)  469/    15F1 :                     ; *** sub 2 SP floating point numbers ***
(1)  470/    15F1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  471/    15F1 :                     ; *** RA:FB - Arg 2                   ***
(1)  472/    15F1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  473/    15F1 :                     ; ***************************************
(1)  474/    15F1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  475/    15F2 : FB 80                          xri   080h
(1)  476/    15F4 : BA                             phi   R10                    ; and put it back
(1)  477/    15F5 : C0 14 EE                       lbr   fp_add                ; now just add
(1)  478/    15F8 :                     
(1)  479/    15F8 :                     ; ***************************************
(1)  480/    15F8 :                     ; *** Div 2 SP floating point numbers ***
(1)  481/    15F8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  482/    15F8 :                     ; *** RA:FB - Arg 2                   ***
(1)  483/    15F8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  484/    15F8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  485/    15F8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  486/    15F8 :                     ; ***        F7.0 - signs        ***
(1)  487/    15F8 :                     ; ***************************************
(1)  488/    15F8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  489/    15F9 : CA 16 09                       lbnz  div_a1nz
(1)  490/    15FC : 88                             glo   r8
(1)  491/    15FD : CA 16 09                       lbnz  div_a1nz
(1)  492/    1600 : 99                             ghi   F9
(1)  493/    1601 : CA 16 09                       lbnz  div_a1nz
(1)  494/    1604 : 89                             glo   F9
(1)  495/    1605 : CA 16 09                       lbnz  div_a1nz
(1)  496/    1608 : (MACRO)                        Cretn	                ; just return the zero
(1)  497/    1609 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  498/    160A : CA 16 27                       lbnz  div_a2nz
(1)  499/    160D : 8A                             glo   R10
(1)  500/    160E : CA 16 27                       lbnz  div_a2nz
(1)  501/    1611 : 9B                             ghi   FB
(1)  502/    1612 : CA 16 27                       lbnz  div_a2nz
(1)  503/    1615 : 8B                             glo   FB
(1)  504/    1616 : CA 16 27                       lbnz  div_a2nz
(1)  505/    1619 : 98                             ghi   r8                    ; need sign of arg1
(1)  506/    161A : FA 80                          ani   080h                  ; want only sign
(1)  507/    161C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  508/    161E : B8                             phi   r8                    ; put into answer
(1)  509/    161F : F8 80                          ldi   080h                  ; build rest of answer
(1)  510/    1621 : A8                             plo   r8 
(1)  511/    1622 : F8 00                          ldi   0
(1)  512/    1624 : B9                             phi   F9
(1)  513/    1625 : A9                             plo   F9
(1)  514/    1626 : (MACRO)                        Cretn                  	; and return to caller
(1)  515/    1627 :                     
(1)  516/    1627 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  517/    162C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  518/    1631 : (MACRO)             	   pushr R13	;wjr
(1)  519/    1636 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  520/    1637 :                     
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 38 - 11/21/2017 16:01:12


(1)  521/    1637 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  522/    163A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  523/    163D : 8F                             glo   R15                    ; get exp2
(1)  524/    163E : FF 7F                          smi   127                   ; remove bias
(1)  525/    1640 : 52                             str   r2                    ; place into memory
(1)  526/    1641 : 9F                             ghi   R15                    ; get exp1
(1)  527/    1642 : FF 7F                          smi   127                   ; remove bias
(1)  528/    1644 : F7                             sm                          ; perform exp1 - exp2
(1)  529/    1645 : FC 7F                          adi   127                   ; put bias back in
(1)  530/    1647 : 73                             stxd                        ; save onto stack
(1)  531/    1648 : 87                             glo   F7                    ; determine sign for answer
(1)  532/    1649 : 52                             str   r2
(1)  533/    164A : F6                             shr
(1)  534/    164B : F3                             xor
(1)  535/    164C : 73                             stxd                        ; place onto stack
(1)  536/    164D : F8 00                          ldi   0                     ; setup man
(1)  537/    164F : BA                             phi   R10
(1)  538/    1650 : 8A                             glo   R10
(1)  539/    1651 : F9 80                          ori   080h
(1)  540/    1653 : AA                             plo   R10
(1)  541/    1654 : F8 00                          ldi   0                     ; setup div
(1)  542/    1656 : B8                             phi   r8
(1)  543/    1657 : 88                             glo   r8
(1)  544/    1658 : F9 80                          ori   080h
(1)  545/    165A : A8                             plo   r8
(1)  546/    165B : F8 00                          ldi   0                     ; setup result
(1)  547/    165D : BC                             phi   R12
(1)  548/    165E : AC                             plo   R12
(1)  549/    165F : B7                             phi   F7
(1)  550/    1660 : A7                             plo   F7
(1)  551/    1661 : AF                             plo   R15                    ; setup quotient
(1)  552/    1662 : BF                             phi   R15
(1)  553/    1663 : BD                             phi   R13
(1)  554/    1664 : AD                             plo   R13
(1)  555/    1665 : F8 80                          ldi   080h
(1)  556/    1667 : AF                             plo   R15
(1)  557/    1668 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  558/    1669 : CA 16 7B                       lbnz  div_go1
(1)  559/    166C : 88                             glo   r8
(1)  560/    166D : CA 16 7B                       lbnz  div_go1
(1)  561/    1670 : 99                             ghi   F9
(1)  562/    1671 : CA 16 7B                       lbnz  div_go1
(1)  563/    1674 : 89                             glo   F9
(1)  564/    1675 : CA 16 7B                       lbnz  div_go1
(1)  565/    1678 : C0 16 DB                       lbr   div_z
(1)  566/    167B : 9A                  div_go1:   ghi   R10
(1)  567/    167C : CA 16 8E                       lbnz  div_go
(1)  568/    167F : 8A                             glo   R10
(1)  569/    1680 : CA 16 8E                       lbnz  div_go
(1)  570/    1683 : 9B                             ghi   FB
(1)  571/    1684 : CA 16 8E                       lbnz  div_go
(1)  572/    1687 : 8B                             glo   FB
(1)  573/    1688 : CA 16 8E                       lbnz  div_go
(1)  574/    168B : C0 16 DB                       lbr   div_z                 ; nothing more to do
(1)  575/    168E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  576/    168F : 52                             str   r2
(1)  577/    1690 : 89                             glo   F9
(1)  578/    1691 : F7                             sm
(1)  579/    1692 : 9B                             ghi   FB
(1)  580/    1693 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 39 - 11/21/2017 16:01:12


(1)  581/    1694 : 99                             ghi   F9
(1)  582/    1695 : 77                             smb
(1)  583/    1696 : 8A                             glo   R10
(1)  584/    1697 : 52                             str   r2
(1)  585/    1698 : 88                             glo   r8
(1)  586/    1699 : 77                             smb
(1)  587/    169A : 9A                             ghi   R10
(1)  588/    169B : 52                             str   r2
(1)  589/    169C : 98                             ghi   r8
(1)  590/    169D : 77                             smb
(1)  591/    169E : CB 16 C9                       lbnf  div_nope              ; jump if div was smaller
(1)  592/    16A1 : 8B                             glo   FB                    ; div -= man
(1)  593/    16A2 : 52                             str   r2
(1)  594/    16A3 : 89                             glo   F9
(1)  595/    16A4 : F7                             sm
(1)  596/    16A5 : A9                             plo   F9
(1)  597/    16A6 : 9B                             ghi   FB
(1)  598/    16A7 : 52                             str   r2
(1)  599/    16A8 : 99                             ghi   F9
(1)  600/    16A9 : 77                             smb
(1)  601/    16AA : B9                             phi   F9
(1)  602/    16AB : 8A                             glo   R10
(1)  603/    16AC : 52                             str   r2
(1)  604/    16AD : 88                             glo   r8
(1)  605/    16AE : 77                             smb
(1)  606/    16AF : A8                             plo   r8
(1)  607/    16B0 : 9A                             ghi   R10
(1)  608/    16B1 : 52                             str   r2
(1)  609/    16B2 : 98                             ghi   r8
(1)  610/    16B3 : 77                             smb
(1)  611/    16B4 : B8                             phi   r8
(1)  612/    16B5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  613/    16B6 : 52                             str   r2
(1)  614/    16B7 : 9C                             ghi   R12
(1)  615/    16B8 : F1                             or
(1)  616/    16B9 : BC                             phi   R12
(1)  617/    16BA : 8F                             glo   R15
(1)  618/    16BB : 52                             str   r2
(1)  619/    16BC : 8C                             glo   R12
(1)  620/    16BD : F1                             or
(1)  621/    16BE : AC                             plo   R12
(1)  622/    16BF : 9D                             ghi   R13
(1)  623/    16C0 : 52                             str   r2
(1)  624/    16C1 : 97                             ghi   F7
(1)  625/    16C2 : F1                             or
(1)  626/    16C3 : B7                             phi   F7
(1)  627/    16C4 : 8D                             glo   R13
(1)  628/    16C5 : 52                             str   r2
(1)  629/    16C6 : 87                             glo   F7
(1)  630/    16C7 : F1                             or
(1)  631/    16C8 : A7                             plo   F7
(1)  632/    16C9 : (MACRO)             div_nope:  ccall fp_shr_fd              ; shift quotient right 17-03-06
(1)  633/    16CC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    16CD : F6                             shr
(1)  635/    16CE : BA                             phi   R10
(1)  636/    16CF : 8A                             glo   R10
(1)  637/    16D0 : 76                             shrc
(1)  638/    16D1 : AA                             plo   R10
(1)  639/    16D2 : 9B                             ghi   FB
(1)  640/    16D3 : 76                             shrc
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 40 - 11/21/2017 16:01:12


(1)  641/    16D4 : BB                             phi   FB
(1)  642/    16D5 : 8B                             glo   FB
(1)  643/    16D6 : 76                             shrc
(1)  644/    16D7 : AB                             plo   FB
(1)  645/    16D8 : C0 16 68                       lbr   div_lp                ; loop back until done
(1)  646/    16DB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    16DC : B8                             phi   r8
(1)  648/    16DD : 8C                             glo   R12
(1)  649/    16DE : A8                             plo   r8
(1)  650/    16DF : 97                             ghi   F7
(1)  651/    16E0 : B9                             phi   F9
(1)  652/    16E1 : 87                             glo   F7
(1)  653/    16E2 : A9                             plo   F9
(1)  654/    16E3 : 60                             irx                         ; recover sign
(1)  655/    16E4 : 72                             ldxa
(1)  656/    16E5 : A7                             plo   F7
(1)  657/    16E6 : F0                             ldx                         ; recover answer exponent
(1)  658/    16E7 : BF                             phi   R15
(1)  659/    16E8 : C0 14 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    16EB :                     
(1)  661/    16EB :                     ; ***************************************
(1)  662/    16EB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    16EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    16EB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    16EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    16EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    16EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    16EB :                     ; ***        F7.0 - signs             ***
(1)  669/    16EB :                     ; ***************************************
(1)  670/    16EB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    16F0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    16F5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    16FA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    16FB :                     
(1)  675/    16FB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    16FE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    1701 : 8F                             glo   R15                    ; get exp2
(1)  678/    1702 : FF 7F                          smi   127                   ; remove bias
(1)  679/    1704 : 52                             str   r2                    ; place into memory
(1)  680/    1705 : 9F                             ghi   R15                    ; get exp1
(1)  681/    1706 : FF 7F                          smi   127                   ; remove bias
(1)  682/    1708 : F4                             add                         ; add in exponent 2
(1)  683/    1709 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    170B : 73                             stxd                        ; place onto stack
(1)  685/    170C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    170D : 52                             str   r2
(1)  687/    170E : F6                             shr
(1)  688/    170F : F3                             xor
(1)  689/    1710 : 73                             stxd                        ; place onto stack
(1)  690/    1711 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    1712 : 73                             stxd                        ; save on stack
(1)  692/    1713 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    1714 : 73                             stxd
(1)  694/    1715 : 86                             glo   r6
(1)  695/    1716 : 73                             stxd
(1)  696/    1717 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    1719 : 73                             stxd
(1)  698/    171A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    171B : AE                             plo   R14
(1)  700/    171C : B6                             phi   r6
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 41 - 11/21/2017 16:01:12


(1)  701/    171D : A6                             plo   r6
(1)  702/    171E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    171F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    1720 : F9 80                          ori   080h
(1)  705/    1722 : A8                             plo   r8
(1)  706/    1723 : F8 00                          ldi   0
(1)  707/    1725 : BC                             phi   R12                    ; set result to 0
(1)  708/    1726 : AC                             plo   R12
(1)  709/    1727 : B7                             phi   F7
(1)  710/    1728 : A7                             plo   F7
(1)  711/    1729 : BF                             phi   R15
(1)  712/    172A : AF                             plo   R15
(1)  713/    172B : BD                             phi   R13
(1)  714/    172C : AD                             plo   R13
(1)  715/    172D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    172E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    172F : F9 80                          ori   080h
(1)  718/    1731 : AA                             plo   R10
(1)  719/    1732 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    1733 : CA 17 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    1736 : 9B                             ghi   FB
(1)  722/    1737 : CA 17 42                       lbnz  mul_go1
(1)  723/    173A : 8A                             glo   R10
(1)  724/    173B : CA 17 42                       lbnz  mul_go1
(1)  725/    173E : 9A                             ghi   R10
(1)  726/    173F : C2 17 BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    1742 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    1743 : F6                             shr
(1)  729/    1744 : BA                             phi   R10
(1)  730/    1745 : 8A                             glo   R10
(1)  731/    1746 : 76                             shrc
(1)  732/    1747 : AA                             plo   R10
(1)  733/    1748 : 9B                             ghi   FB
(1)  734/    1749 : 76                             shrc
(1)  735/    174A : BB                             phi   FB
(1)  736/    174B : 8B                             glo   FB
(1)  737/    174C : 76                             shrc
(1)  738/    174D : AB                             plo   FB
(1)  739/    174E : CB 17 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    1751 : 89                             glo   F9                    ; res += mul
(1)  741/    1752 : 52                             str   r2
(1)  742/    1753 : 87                             glo   F7
(1)  743/    1754 : F4                             add
(1)  744/    1755 : A7                             plo   F7
(1)  745/    1756 : 99                             ghi   F9
(1)  746/    1757 : 52                             str   r2
(1)  747/    1758 : 97                             ghi   F7
(1)  748/    1759 : 74                             adc
(1)  749/    175A : B7                             phi   F7
(1)  750/    175B : 88                             glo   r8
(1)  751/    175C : 52                             str   r2
(1)  752/    175D : 8C                             glo   R12
(1)  753/    175E : 74                             adc
(1)  754/    175F : AC                             plo   R12
(1)  755/    1760 : 98                             ghi   r8
(1)  756/    1761 : 52                             str   r2
(1)  757/    1762 : 9C                             ghi   R12
(1)  758/    1763 : 74                             adc
(1)  759/    1764 : BC                             phi   R12
(1)  760/    1765 : 86                             glo   r6                    ; now high 32 bits
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 42 - 11/21/2017 16:01:12


(1)  761/    1766 : 52                             str   r2
(1)  762/    1767 : 8D                             glo   R13
(1)  763/    1768 : F4                             add
(1)  764/    1769 : AD                             plo   R13
(1)  765/    176A : 96                             ghi   r6
(1)  766/    176B : 52                             str   r2
(1)  767/    176C : 96                             ghi   r6
(1)  768/    176D : 52                             str   r2
(1)  769/    176E : 9D                             ghi   R13
(1)  770/    176F : 74                             adc
(1)  771/    1770 : BD                             phi   R13
(1)  772/    1771 : 8E                             glo   R14
(1)  773/    1772 : 52                             str   r2
(1)  774/    1773 : 8F                             glo   R15
(1)  775/    1774 : 74                             adc
(1)  776/    1775 : AF                             plo   R15
(1)  777/    1776 : 9E                             ghi   R14
(1)  778/    1777 : 52                             str   r2
(1)  779/    1778 : 9F                             ghi   R15
(1)  780/    1779 : 74                             adc
(1)  781/    177A : BF                             phi   R15
(1)  782/    177B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    177C : C2 17 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    177F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    1780 : FC 01                          adi   1
(1)  786/    1782 : AD                             plo   R13
(1)  787/    1783 : 9D                             ghi   R13
(1)  788/    1784 : 7C 00                          adci  0
(1)  789/    1786 : BD                             phi   R13
(1)  790/    1787 : 8F                             glo   R15
(1)  791/    1788 : 7C 00                          adci  0
(1)  792/    178A : AF                             plo   R15
(1)  793/    178B : 9F                             ghi   R15
(1)  794/    178C : 7C 00                          adci  0
(1)  795/    178E : BF                             phi   R15
(1)  796/    178F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    1790 : F0                             ldx
(1)  798/    1791 : FC 01                          adi   1                     ; increment by 1
(1)  799/    1793 : 73                             stxd                        ; and put it back
(1)  800/    1794 : 89                             glo   F9                    ; shift mulL left
(1)  801/    1795 : FE                             shl
(1)  802/    1796 : A9                             plo   F9
(1)  803/    1797 : 99                             ghi   F9
(1)  804/    1798 : 7E                             shlc
(1)  805/    1799 : B9                             phi   F9
(1)  806/    179A : 88                             glo   r8
(1)  807/    179B : 7E                             shlc
(1)  808/    179C : A8                             plo   r8
(1)  809/    179D : 98                             ghi   r8
(1)  810/    179E : 7E                             shlc
(1)  811/    179F : B8                             phi   r8
(1)  812/    17A0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    17A1 : FE                             shl
(1)  814/    17A2 : A6                             plo   r6
(1)  815/    17A3 : 96                             ghi   r6
(1)  816/    17A4 : 7E                             shlc
(1)  817/    17A5 : B6                             phi   r6
(1)  818/    17A6 : 8E                             glo   R14
(1)  819/    17A7 : 7E                             shlc
(1)  820/    17A8 : AE                             plo   R14
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 43 - 11/21/2017 16:01:12


(1)  821/    17A9 : 9E                             ghi   R14
(1)  822/    17AA : 7E                             shlc
(1)  823/    17AB : BE                             phi   R14
(1)  824/    17AC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    17AD : C2 17 32                       lbz   mul_lp1               ; jump if not
(1)  826/    17B0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    17B2 : B8                             phi   r8
(1)  828/    17B3 : 86                             glo   r6                    ; add in the carry
(1)  829/    17B4 : F9 01                          ori   1
(1)  830/    17B6 : A6                             plo   r6
(1)  831/    17B7 : C0 17 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    17BA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    17BB : 72                             ldxa
(1)  834/    17BC : AE                             plo   R14                    ; set aside
(1)  835/    17BD : 72                             ldxa
(1)  836/    17BE : A6                             plo   r6
(1)  837/    17BF : 72                             ldxa
(1)  838/    17C0 : B6                             phi   r6
(1)  839/    17C1 : F0                             ldx
(1)  840/    17C2 : BE                             phi   R14
(1)  841/    17C3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    17C4 : B8                             phi   r8
(1)  843/    17C5 : 8C                             glo   R12
(1)  844/    17C6 : A8                             plo   r8
(1)  845/    17C7 : 97                             ghi   F7
(1)  846/    17C8 : B9                             phi   F9
(1)  847/    17C9 : 87                             glo   F7
(1)  848/    17CA : A9                             plo   F9
(1)  849/    17CB : 8E                             glo   R14
(1)  850/    17CC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    17CD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    17CE : FF 02                          smi   2                     ; see if <2
(1)  853/    17D0 : CB 17 E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    17D3 : (MACRO)                        ccall    fp_shr_1           ; shift answer to the right 17-03-06
(1)  855/    17D6 : (MACRO)                        ccall    fp_shr_fd          ; shift resH right 17-03-06
(1)  856/    17D9 : CB 17 E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  857/    17DC : 88                             glo   r8                    ; set high bit
(1)  858/    17DD : F9 80                          ori   080h
(1)  859/    17DF : A8                             plo   r8
(1)  860/    17E0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  861/    17E1 : C0 17 CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  862/    17E4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  863/    17E5 : 72                             ldxa
(1)  864/    17E6 : A7                             plo   F7
(1)  865/    17E7 : F0                             ldx                         ; recover answer exponent
(1)  866/    17E8 : AC                             plo   R12
(1)  867/    17E9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  868/    17EA : CA 17 FC                       lbnz  mul_lp3a
(1)  869/    17ED : 8F                             glo   R15
(1)  870/    17EE : CA 17 FC                       lbnz  mul_lp3a
(1)  871/    17F1 : 9D                             ghi   R13
(1)  872/    17F2 : CA 17 FC                       lbnz  mul_lp3a
(1)  873/    17F5 : 8D                             glo   R13
(1)  874/    17F6 : CA 17 FC                       lbnz  mul_lp3a
(1)  875/    17F9 : C0 18 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  876/    17FC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  877/    17FD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  878/    1800 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  879/    1803 : CB 17 E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  880/    1806 : 88                             glo   r8                    ; set high bit
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 44 - 11/21/2017 16:01:12


(1)  881/    1807 : F9 80                          ori   080h
(1)  882/    1809 : A8                             plo   r8
(1)  883/    180A : C0 17 E9                       lbr   mul_lp3
(1)  884/    180D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  885/    180E : BF                             phi   R15                    ; to high R15
(1)  886/    180F : C0 14 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  887/    1812 :                     
(1)  888/    1812 :                     ; ***************************************
(1)  889/    1812 :                     ; *** Convert ascii to floating point ***
(1)  890/    1812 :                     ; *** RF - buffer to ascii text       ***
(1)  891/    1812 :                     ; *** Returns: R8:F9 - number         ***
(1)  892/    1812 :                     ; ***************************************
(1)  893/    1812 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  894/    1813 : FF 20                          smi   ' '                   ; check for space
(1)  895/    1815 : C2 18 12                       lbz   fp_atof               ; move past any spaces
(1)  896/    1818 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  897/    1819 : 0F                             ldn   R15                    ; check for possible sign
(1)  898/    181A : FF 2D                          smi   '-'                   ; first check for minus
(1)  899/    181C : CA 18 26                       lbnz   atof_nm              ; jump if not minus
(1)  900/    181F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  901/    1821 : 73                             stxd                        ; place onto stack
(1)  902/    1822 : 1F                             inc   R15                    ; move past sign
(1)  903/    1823 : C0 18 30                       lbr   atof_go1              ; and continue
(1)  904/    1826 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  905/    1828 : 73                             stxd                        ; place onto stack
(1)  906/    1829 : 0F                             ldn   R15                    ; now check for + sign
(1)  907/    182A : FF 2B                          smi   '+'
(1)  908/    182C : CA 18 30                       lbnz  atof_go1              ; jump if not plus
(1)  909/    182F : 1F                             inc   R15                    ; move past plus sign
(1)  910/    1830 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  911/    1832 : B8                             phi   r8
(1)  912/    1833 : A8                             plo   r8
(1)  913/    1834 : B9                             phi   F9
(1)  914/    1835 : A9                             plo   F9
(1)  915/    1836 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  916/    1837 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  917/    183A : CB 18 67                       lbnf  atof_no1              ; jump if not
(1)  918/    183D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  919/    183E : BA                             phi   R10
(1)  920/    183F : 88                             glo   r8
(1)  921/    1840 : AA                             plo   R10
(1)  922/    1841 : 99                             ghi   F9
(1)  923/    1842 : BB                             phi   FB
(1)  924/    1843 : 89                             glo   F9
(1)  925/    1844 : AB                             plo   FB
(1)  926/    1845 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  927/    1848 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  928/    184B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  929/    184E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  930/    1851 : 4F                             lda   R15                    ; get number
(1)  931/    1852 : FF 30                          smi   '0'                   ; convert to binary
(1)  932/    1854 : 52                             str   r2                    ; setup for add
(1)  933/    1855 : 89                             glo   F9                    ; add in next digit
(1)  934/    1856 : F4                             add
(1)  935/    1857 : A9                             plo   F9
(1)  936/    1858 : 99                             ghi   F9                    ; propagate carry
(1)  937/    1859 : 7C 00                          adci  0
(1)  938/    185B : B9                             phi   F9
(1)  939/    185C : 88                             glo   r8
(1)  940/    185D : 7C 00                          adci  0
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 45 - 11/21/2017 16:01:12


(1)  941/    185F : A8                             plo   r8
(1)  942/    1860 : 98                             ghi   r8
(1)  943/    1861 : 7C 00                          adci  0
(1)  944/    1863 : B8                             phi   r8
(1)  945/    1864 : C0 18 36                       lbr   atof_lp1              ; loop until no more digits
(1)  946/    1867 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  947/    1868 : FF 2E                          smi   '.'
(1)  948/    186A : CA 18 6E                       lbnz  atof_ndp              ; jump if none
(1)  949/    186D : 1F                             inc   R15                    ; move past decimal
(1)  950/    186E : F8 19               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  951/    1870 : BA                             phi   R10
(1)  952/    1871 : F8 A3                          ldi   scratch&255
(1)  953/    1873 : AA                             plo   R10
(1)  954/    1874 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  955/    1876 : AC                             plo   R12
(1)  956/    1877 : F8 00               atof_lpx:  ldi   0
(1)  957/    1879 : 5A                             str   R10
(1)  958/    187A : 1A                             inc   R10
(1)  959/    187B : 2C                             dec   R12
(1)  960/    187C : 8C                             glo   R12
(1)  961/    187D : CA 18 77                       lbnz  atof_lpx
(1)  962/    1880 : F8 19                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  963/    1882 : BA                             phi   R10
(1)  964/    1883 : F8 A4                          ldi   (scratch+1)&255
(1)  965/    1885 : AA                             plo   R10
(1)  966/    1886 : F8 01                          ldi   1                     ; setup count
(1)  967/    1888 : AC                             plo   R12
(1)  968/    1889 : F8 00                          ldi   0                     ; setup exp flag
(1)  969/    188B : BC                             phi   R12
(1)  970/    188C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  971/    188D : FF 11                          smi   17
(1)  972/    188F : C2 18 A8                       lbz   atof_dn3              ; jump if so
(1)  973/    1892 : 0F                             ldn   R15                    ; get character
(1)  974/    1893 : (MACRO)                        ccall    f_isnum                 ; is it numeric
(1)  975/    1896 : CB 18 A8                       lbnf  atof_dn3              ; jump if not
(1)  976/    1899 : 4F                             lda   R15                    ; get character
(1)  977/    189A : FF 30                          smi   '0'                   ; converto to binary
(1)  978/    189C : 5A                             str   R10                    ; write into bcd area
(1)  979/    189D : 1A                             inc   R10
(1)  980/    189E : 1C                             inc   R12                    ; increment count
(1)  981/    189F : CA 18 8C                       lbnz  atof_lp2              ; loop back until done
(1)  982/    18A2 : F8 01                          ldi   1                     ; set non zero flag
(1)  983/    18A4 : BC                             phi   R12
(1)  984/    18A5 : C0 18 8C                       lbr   atof_lp2
(1)  985/    18A8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  986/    18A9 : CA 18 C2                       lbnz  atof_nz
(1)  987/    18AC : 98                             ghi   r8                    ; check for non-zero integer
(1)  988/    18AD : CA 18 C2                       lbnz  atof_nz
(1)  989/    18B0 : 88                             glo   r8
(1)  990/    18B1 : CA 18 C2                       lbnz  atof_nz
(1)  991/    18B4 : 99                             ghi   F9
(1)  992/    18B5 : CA 18 C2                       lbnz  atof_nz
(1)  993/    18B8 : 89                             glo   F9
(1)  994/    18B9 : CA 18 C2                       lbnz  atof_nz
(1)  995/    18BC : 60                             irx                         ; recover sign
(1)  996/    18BD : F0                             ldx
(1)  997/    18BE : B8                             phi   r8                    ; put in high of zero
(1)  998/    18BF : C0 19 95                       lbr	atof_end               ; and return
(1)  999/    18C2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1000/    18C4 : BC                             phi   R12
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 46 - 11/21/2017 16:01:12


(1) 1001/    18C5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1002/    18C6 : FA 80                          ani   080h
(1) 1003/    18C8 : CA 19 12                       lbnz  atof_dn4              ; jump if so
(1) 1004/    18CB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1005/    18CE : F8 19                          ldi   scratch>>8          ; point to bcd number
(1) 1006/    18D0 : BA                             phi   R10
(1) 1007/    18D1 : F8 A3                          ldi   255&scratch
(1) 1008/    18D3 : AA                             plo   R10
(1) 1009/    18D4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1010/    18D6 : 5A                             str   R10
(1) 1011/    18D7 : F8 19                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1012/    18D9 : BA                             phi   R10
(1) 1013/    18DA : F8 B2                          ldi   255&(scratch+15)
(1) 1014/    18DC : AA                             plo   R10
(1) 1015/    18DD : F8 00                          ldi   0                     ; set carry forward
(1) 1016/    18DF : AE                             plo   R14
(1) 1017/    18E0 : F8 10                          ldi   16                    ; setup count
(1) 1018/    18E2 : AC                             plo   R12
(1) 1019/    18E3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1020/    18E4 : 52                             str   r2                    ; in memory for add
(1) 1021/    18E5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1022/    18E6 : F4                             add                         ; add in carry
(1) 1023/    18E7 : 52                             str   r2                    ; place into memory
(1) 1024/    18E8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1025/    18E9 : F4                             add                         ; digit now doubled with carry
(1) 1026/    18EA : 5A                             str   R10                    ; put it back
(1) 1027/    18EB : FF 0A                          smi   10
(1) 1028/    18ED : CB 18 F4                       lbnf  atof_no4              ; jump if below 10
(1) 1029/    18F0 : 5A                             str   R10                    ; store value - 10
(1) 1030/    18F1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1031/    18F3 : C8                             lskp                        ; skip next instruction
(1) 1032/    18F4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1033/    18F6 : AE                             plo   R14
(1) 1034/    18F7 : 2A                             dec   R10                    ; move to previous digit
(1) 1035/    18F8 : 2C                             dec   R12                    ; decrement digit count
(1) 1036/    18F9 : 8C                             glo   R12                    ; see if done
(1) 1037/    18FA : CA 18 E3                       lbnz  atof_lp4              ; jump if not
(1) 1038/    18FD : F8 19                          ldi   scratch>>8	       ; point to first digit
(1) 1039/    18FF : BA                             phi   R10
(1) 1040/    1900 : F8 A3                          ldi   255&scratch
(1) 1041/    1902 : AA                             plo   R10
(1) 1042/    1903 : 0A                             ldn   R10                    ; retrieve it
(1) 1043/    1904 : C2 19 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1044/    1907 : 89                             glo   F9                    ; add in the carry
(1) 1045/    1908 : F9 01                          ori   1
(1) 1046/    190A : A9                             plo   F9
(1) 1047/    190B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1048/    190C : FC 01                          adi   1
(1) 1049/    190E : BC                             phi   R12
(1) 1050/    190F : C0 18 C5                       lbr   atof_lp3              ; loop until full
(1) 1051/    1912 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1052/    1913 : 52                             str   r2                    ; into memory
(1) 1053/    1914 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1054/    1916 : F7                             sm
(1) 1055/    1917 : FC 7F                          adi   127                   ; add in bias
(1) 1056/    1919 : BD                             phi   R13                    ; set aside
(1) 1057/    191A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1058/    191B : A9                             plo   F9
(1) 1059/    191C : 88                             glo   r8
(1) 1060/    191D : B9                             phi   F9
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 47 - 11/21/2017 16:01:12


(1) 1061/    191E : 98                             ghi   r8
(1) 1062/    191F : FE                             shl                         ; shift out high bit
(1) 1063/    1920 : A8                             plo   r8
(1) 1064/    1921 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1065/    1922 : F6                             shr
(1) 1066/    1923 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1067/    1924 : 88                             glo   r8                    ; get mantissa
(1) 1068/    1925 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1069/    1926 : A8                             plo   r8                    ; and write it
(1) 1070/    1927 : 60                             irx                         ; point to sign
(1) 1071/    1928 : 98                             ghi   r8                    ; high byte
(1) 1072/    1929 : F1                             or                          ; set sign
(1) 1073/    192A : B8                             phi   r8                    ; done with base conversion
(1) 1074/    192B : 0F                             ldn   R15                    ; get next byte
(1) 1075/    192C : FF 65                          smi   'e'                   ; check for exponents
(1) 1076/    192E : C2 19 37                       lbz   atof_exp
(1) 1077/    1931 : 0F                             ldn   R15
(1) 1078/    1932 : FF 45                          smi   'E'
(1) 1079/    1934 : CA 19 95                       lbnz  atof_end
(1) 1080/    1937 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1081/    1938 : 0F                             ldn   R15                    ; check for sign
(1) 1082/    1939 : FF 2D                          smi   '-'
(1) 1083/    193B : C2 19 48                       lbz   atof_n
(1) 1084/    193E : 0F                             ldn   R15
(1) 1085/    193F : FF 2B                          smi   '+'
(1) 1086/    1941 : C2 19 45                       lbz   atof_p
(1) 1087/    1944 : 2F                             dec   R15                    ; positive if no sign
(1) 1088/    1945 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1089/    1947 : C8                             lskp
(1) 1090/    1948 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1091/    194A : BC                             phi   R12                    ; place into sign variable
(1) 1092/    194B : 1F                             inc   R15                    ; move past sign
(1) 1093/    194C : F8 00                          ldi   0                     ; setup intial count
(1) 1094/    194E : AC                             plo   R12
(1) 1095/    194F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1096/    1950 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1097/    1953 : CB 19 65                       lbnf  atof_dn5              ; jump if not
(1) 1098/    1956 : 8C                             glo   R12                    ; make copy of exponent
(1) 1099/    1957 : 52                             str   r2
(1) 1100/    1958 : F6                             shr                         ; multiply by 2
(1) 1101/    1959 : F6                             shr                         ; by 4
(1) 1102/    195A : F4                             add                         ; by 5
(1) 1103/    195B : F6                             shr                         ; by 10
(1) 1104/    195C : 52                             str   r2                    ; put here for add
(1) 1105/    195D : 4F                             lda   R15                    ; recover number
(1) 1106/    195E : FF 30                          smi   '0'                   ; convert to binary
(1) 1107/    1960 : F4                             add                         ; add with total
(1) 1108/    1961 : AC                             plo   R12                    ; copy back to R12
(1) 1109/    1962 : C0 19 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1110/    1965 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1111/    1966 : C2 19 95                       lbz   atof_end              ; jump if so
(1) 1112/    1969 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1113/    196A : 8C                             glo   R12                    ; save count
(1) 1114/    196B : 73                             stxd
(1) 1115/    196C : 9C                             ghi   R12                    ; save sign
(1) 1116/    196D : 73                             stxd
(1) 1117/    196E : 8F                             glo   R15
(1) 1118/    196F : 73                             stxd
(1) 1119/    1970 : 9F                             ghi   R15
(1) 1120/    1971 : 73                             stxd
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(LCC1802FP.inc) - page 48 - 11/21/2017 16:01:12


(1) 1121/    1972 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1122/    1974 : BA                             phi   R10
(1) 1123/    1975 : F8 20                          ldi   020h
(1) 1124/    1977 : AA                             plo   R10
(1) 1125/    1978 : F8 00                          ldi   0
(1) 1126/    197A : BB                             phi   FB
(1) 1127/    197B : AB                             plo   FB
(1) 1128/    197C : 9C                             ghi   R12
(1) 1129/    197D : C2 19 86                       lbz   atof_div              ; jump if negative
(1) 1130/    1980 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1131/    1983 : C0 19 89                       lbr   atof_go5              ; clean up call
(1) 1132/    1986 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1133/    1989 : 60                  atof_go5:  irx                         ; recover variables
(1) 1134/    198A : 72                             ldxa
(1) 1135/    198B : BF                             phi   R15
(1) 1136/    198C : 72                             ldxa
(1) 1137/    198D : AF                             plo   R15
(1) 1138/    198E : 72                             ldxa
(1) 1139/    198F : BC                             phi   R12
(1) 1140/    1990 : F0                             ldx
(1) 1141/    1991 : AC                             plo   R12
(1) 1142/    1992 : C0 19 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1143/    1995 :                     atof_end:
(1) 1144/    1995 : 12                  	   inc	r2	;wjr release work area
(1) 1145/    1996 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1146/    199A : (MACRO)             	   popr R12	;wjr
(1) 1147/    199E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1148/    19A2 : (MACRO)             	   Cretn
(1) 1149/    19A3 : 00 00               scratch:   db	00,00
    1054/    19A5 :                     	include IO1802.inc
(1)    1/    19A5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    19A5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    19A5 :                     ;17-10-16 adding _putcpace(port,byte) to limit output speed to the AVR
(1)    4/    19A5 :                     ;         defaulting putc(x) to putcpace(7,x)
(1)    5/    19A5 :                     	align 64
(1)    6/    19C0 :                     _putc:		;default putc(x) is paced output on port 7
(1)    7/    19C0 : (MACRO)             	cpy2 	13,12	;move data to second param reg
(1)    8/    19C4 : (MACRO)             	ldad	12,7	;select port 7
(1)    9/    19CA : 30 CC               	br	_putcpace ;drop into paced output	
(1)   10/    19CC :                     _putcpace:	;putcpace(x,y) does host output on port x at no more than about 57600 baud
(1)   11/    19CC :                     		;i'm doing the pacing before the output so i can branch to _out when done.
(1)   12/    19CC : =>FALSE              if MOMCPU=$1805	;first balance off the call path for the 1806
(1)   13/    19CC :                     	nop
(1)   14/    19CC :                     	nop
(1)   15/    19CC :                     	nop
(1)   16/    19CC : [12]                 endif
(1)   17/    19CC : =>UNDEFINED          ifdef CPUSPEED
(1)   18/    19CC :                        if CPUSPEED>4000000	;now deal with the processor speed
(1)   19/    19CC :                           ;targetting a thruput of 57600 baud - 5760 characters per second
(1)   20/    19CC :                           ;each character needs CPUSPEED/5760/16 instruction times
(1)   21/    19CC :                           ;the baseline out() is 42 instructions including call/return
(1)   22/    19CC :                            NEEDINST: equ (CPUSPEED/5760/16)
(1)   23/    19CC :                            ldi (NEEDINST-42+1)/2
(1)   24/    19CC :                     -:     smi 1
(1)   25/    19CC :                            bnz -
(1)   26/    19CC : [18]                    endif
(1)   27/    19CC : [17]                  endif
(1)   28/    19CC : 30 E8                 br _out
(1)   29/    19CE :                     
(1)   30/    19CE :                     _inp:		;raw port input
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm(IO1802.inc) - page 49 - 11/21/2017 16:01:12


(1)   31/    19CE :                     		;stores a small tailored program on the stack and executes it
(1)   32/    19CE : 22                  	dec	sp	;work backwards
(1)   33/    19CF : F8 D3               	ldi	0xD3	;return instruction
(1)   34/    19D1 : 73                  	stxd		
(1)   35/    19D2 : 8C                  	glo	regarg1	;get the port number
(1)   36/    19D3 : FA 07               	ani	0x07	;clean it
(1)   37/    19D5 : 32 E5               	bz	+	; inp(0) isn't valid
(1)   38/    19D7 : F9 68               	ori	0x68	;make it an input instruction
(1)   39/    19D9 : 73                  	stxd		;store it for execution
(1)   40/    19DA : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   41/    19DE : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   42/    19DF : D8                  	sep	rt1	;execute it
(1)   43/    19E0 :                     ;we will come back to here with the input byte in D
(1)   44/    19E0 : 12                  	inc	sp	;step over the work area
(1)   45/    19E1 : AF                  	plo	retVal	;save it to return
(1)   46/    19E2 : F8 00               	ldi	0
(1)   47/    19E4 : BF                  	phi	retval	;clear top byte
(1)   48/    19E5 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   49/    19E6 : 12                  	inc	sp	;and the D3
(1)   50/    19E7 : (MACRO)             	Cretn		;and we're done
(1)   51/    19E8 :                     	
(1)   52/    19E8 :                     _out:		;raw port output
(1)   53/    19E8 :                     		;stores a small tailored program on the stack and executes it
(1)   54/    19E8 :                     		;this could be bolder:
(1)   55/    19E8 :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   56/    19E8 :                     		;then SEP sp
(1)   57/    19E8 :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   58/    19E8 :                     		;saves 6 instructions but it's a bit tricky.
(1)   59/    19E8 : 22                  	dec	sp	;work backwards
(1)   60/    19E9 : F8 D3               	ldi	0xD3	;return instruction
(1)   61/    19EB : 73                  	stxd		
(1)   62/    19EC : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   63/    19F0 : 8C                  	glo	regarg1	;get the port number
(1)   64/    19F1 : FA 07               	ani	0x07	;clean it
(1)   65/    19F3 : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   66/    19F5 : 73                  	stxd		;store it for execution
(1)   67/    19F6 : 8D                  	glo	regarg2	;get the byte to be written
(1)   68/    19F7 : 52                  	str	sp	;store it where sp points
(1)   69/    19F8 : D8                  	sep	rt1	;execute it
(1)   70/    19F9 :                     ;we will come back to here with sp stepped up by one
(1)   71/    19F9 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   72/    19FA : 12                  	inc	sp	;and the D3
(1)   73/    19FB : (MACRO)             	Cretn		;and we're done
(1)   74/    19FC :                     	
(1)   75/    19FC :                     	
(1)   76/    19FC :                     
    1055/    19FC :                     
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 50 - 11/21/2017 16:01:12


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    1507 C |  ADD_A2NZ :                    1518 C |
 ADD_FNL :                     15BF C |  ADD_LP1 :                     1562 C |
 ADD_LP1DN :                   1577 C |  ADD_NM :                      1586 C |
 ADD_NO :                      15A8 C |  ADD_NS :                      1550 C |
 ADD_NX :                      15EB C |  ADD_NZ :                      15DD C |
 AGAIN193 :                     F6B C | *ARCHITECTURE :  i386-unknown-win32 - |
 ATOF_DIV :                    1986 C |  ATOF_DN3 :                    18A8 C |
 ATOF_DN4 :                    1912 C |  ATOF_DN5 :                    1965 C |
 ATOF_END :                    1995 C |  ATOF_EXP :                    1937 C |
 ATOF_GO1 :                    1830 C |  ATOF_GO5 :                    1989 C |
 ATOF_LP1 :                    1836 C |  ATOF_LP2 :                    188C C |
 ATOF_LP3 :                    18C5 C |  ATOF_LP4 :                    18E3 C |
 ATOF_LP5 :                    194F C |  ATOF_LPX :                    1877 C |
 ATOF_N :                      1948 C |  ATOF_NC4 :                    190B C |
 ATOF_NDP :                    186E C |  ATOF_NM :                     1826 C |
 ATOF_NO1 :                    1867 C |  ATOF_NO4 :                    18F4 C |
 ATOF_NZ :                     18C2 C |  ATOF_P :                      1945 C |
*BIGENDIAN :                      0 - |  BITLOOP198 :                  11B8 C |
*BRANCHEXT :                      0 - |  BVTABLE62 :                    15F C |
*CASESENSITIVE :                  0 - |  CHECK_SUB196 :                1096 C |
 CKNEXT198 :                   1207 C |  CKTOP198 :                    11A3 C |
 CLRLP198 :                    1194 C |  COMPUTEQUOT193 :               F81 C |
*CONSTPI :        3.141592653589793 - |  CVFI4 :                       1400 C |
 CVIF4 :                       1300 C | *DATE :                  11/21/2017 - |
 DCKLP198 :                    11BB C |  DIV_A1NZ :                    1609 C |
 DIV_A2NZ :                    1627 C |  DIV_GO :                      168E C |
 DIV_GO1 :                     167B C |  DIV_LP :                      1668 C |
 DIV_NOPE :                    16C9 C |  DIV_Z :                       16DB C |
 DNOADD198 :                   11C3 C |  DONE194 :                      FDF C |
 DONE197 :                     1174 C |  DONE198 :                     1211 C |
 DONE204 :                     136F C |  DONE205 :                     1461 C |
 DSHLP198 :                    11D7 C |  ENDLP195 :                    1061 C |
 F7 :                             7 - |  F9 :                             9 - |
 FAILS :                       146E C | *FALSE :                          0 - |
 FB :                             B - |  FP_ADD :                      14EE C |
 FP_ADD_12 :                   148C C |  FP_ATOF :                     1812 C |
 FP_DIV :                      15F8 C |  FP_GETEXP :                   14DC C |
 FP_GETSGN :                   14E7 C |  FP_MUL :                      16EB C |
 FP_SC_CLN :                   14C0 C |  FP_SC_UP :                    14B0 C |
 FP_SHL_1 :                    147F C |  FP_SHR_1 :                    1472 C |
 FP_SHR_FD :                   14A3 C |  FP_SUB :                      15F1 C |
*FULLPMMU :                       1 - |  F_ISNUM :                     1462 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            67 C |
 L100 :                         C49 C |  L102 :                         A5E C |
 L103 :                         A79 C |  L104 :                         A4A C |
*L106 :                         AB1 C | *L107 :                         CBE C |
 L108 :                         E22 C |  L109 :                         CBB C |
*L11 :                          12A C | *L110 :                         CBB C |
*L112 :                         D28 C |  L113 :                         CEF C |
 L114 :                         D0F C |  L116 :                         D24 C |
*L117 :                         D7C C |  L118 :                         D5D C |
 L119 :                         D6B C |  L12 :                          114 C |
*L121 :                         DC1 C |  L122 :                         DA5 C |
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 51 - 11/21/2017 16:01:12


 L123 :                         DB0 C | *L125 :                         E21 C |
*L13 :                          117 C |  L15 :                          118 C |
*L16 :                          170 C |  L18 :                          1E6 C |
 L19 :                          189 C | *L20 :                          1D7 C |
 L22 :                          1DA C |  L23 :                          1CA C |
 L26 :                          1BD C |  L27 :                          1C3 C |
 L28 :                          1D7 C |  L3 :                           E63 C |
*L30 :                          207 C |  L31 :                          1FB C |
 L32 :                          1FD C | *L34 :                          22F C |
 L35 :                          21C C |  L36 :                          229 C |
*L39 :                          4F5 C |  L4 :                            3B C |
 L40 :                          33A C |  L41 :                          345 C |
 L42 :                          E30 C |  L43 :                          E2C C |
 L44 :                          345 C |  L46 :                          385 C |
 L48 :                          4E9 C |  L5 :                            64 C |
*L50 :                          680 C |  L51 :                          5C0 C |
 L52 :                          5D0 C |  L53 :                          5D9 C |
 L54 :                          65D C |  L56 :                          5E0 C |
*L57 :                          5E0 C |  L59 :                          5ED C |
 L60 :                          64C C |  L63 :                          616 C |
*L64 :                          756 C |  L65 :                          710 C |
*L67 :                          7A4 C | *L68 :                          7FE C |
*L69 :                          86B C |  L7 :                           E48 C |
*L70 :                          8FE C |  L71 :                          8D9 C |
 L72 :                          8FE C | *L73 :                          97C C |
*L74 :                          C7C C |  L75 :                          9CC C |
 L76 :                          C76 C |  L78 :                          9EB C |
 L79 :                          C76 C |  L8 :                           E34 C |
 L81 :                          C65 C |  L82 :                          C76 C |
 L84 :                          ACC C |  L85 :                          ADE C |
 L86 :                          AF6 C |  L87 :                          B1F C |
 L88 :                          B34 C |  L89 :                          B38 C |
*L9 :                            F9 C |  L90 :                          B6B C |
 L91 :                          C29 C |  L93 :                          B9C C |
 L95 :                          BC6 C |  L96 :                          C24 C |
 L97 :                          C29 C |  L98 :                          C65 C |
 LCC1802CPUSPEED :           3D0900 - |  LCC1802INIT :                  E65 C |
*LISTON :                         1 - |  LOOP195 :                     100F C |
 LSH205 :                      142B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP196 :                    1077 C |
 MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP191 :                      F1E C |  MULRDONE192 :                  F49 C |
 MULRLP192 :                    F27 C |  MULRNOADD192 :                 F3B C |
 MULRSHFT192 :                  F41 C |  MUL_DN :                      17BA C |
 MUL_GO1 :                     1742 C |  MUL_LP1 :                     1732 C |
 MUL_LP2 :                     17CD C |  MUL_LP2A :                    17E0 C |
 MUL_LP3 :                     17E9 C |  MUL_LP3A :                    17FC C |
 MUL_LP4 :                     180D C |  MUL_NO :                      178F C |
 MUL_NXT1 :                    17E4 C | *NESTMAX :                      100 - |
 NEY0Y193 :                     F9A C |  NORESTORE195 :                105D C |
 NXT204 :                      1330 C |  OUT193 :                       FA8 C |
 OUTIT62 :                      15C C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      146B C |
 POS1194 :                      FBF C |  POS1197 :                     1126 C |
 POS2194 :                      FCF C |  POS2197 :                     114D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 52 - 11/21/2017 16:01:12


*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     19A3 C |
 SETBITOFF62 :                  157 C |  SETSGN204 :                   1368 C |
 SGNPOS204 :                   1339 C |  SHDN204 :                     135F C |
 SHIFT196 :                    10AE C |  SHL204 :                      134B C |
 SHR205 :                      1419 C |  SIGN205 :                     143B C |
 SP :                             2 - |  TESTEXIT193 :                  F90 C |
*TIME :                    16:01:12 - | *TRUE :                           1 - |
 UPNXT198 :                    11F0 C | *VERSION :                     142F - |
 _00000183 :                    E7F C |  _CALL :                        F01 C |
 _DELAY :                        FA C |  _DIE183 :                      E82 C |
*_DIGITALREAD :                 168 C | *_DIGITALWRITE :                140 C |
 _DIVI2 :                       FB0 C |  _DIVI4 :                      1100 C |
 _DIVU2 :                       F4A C |  _DIVU4 :                      1000 C |
 _DUBDABX :                    1175 C | *_EXIT :                        C95 C |
 _FTOA :                        278 C |  _GETCSER :                      C0 C |
 _GETCSER.RXCLOOP :              CA C |  _GETCSER.RXCRET :               E6 C |
 _GETCSER.RXCW :                 C5 C | *_INCLUDESER :                   70 C |
*_INP :                        19CE C |  _ITOA :                        516 C |
 _LTOA :                        697 C |  _MAIN :                          4 C |
*_MEMCMP :                      CC3 C | *_MEMCPY :                      D39 C |
*_MEMSET :                      D89 C | *_MODI2 :                       E93 C |
*_MODI4 :                      121E C | *_MODU2 :                       E8B C |
*_MODU4 :                      1212 C |  _MULT_NUMS :                   258 C |
*_MULU2 :                       F23 C | *_MULU4 :                      1066 C |
*_NSTDLIBINCLUDER :             DCA C | *_OLDUINOINCLUDER :             137 C |
 _ONEMS :                       F1C C |  _OUT :                        19E8 C |
*_OUT4 :                        E9B C |  _PIN4 :                          3 C |
 _PRINTF :                      981 C |  _PRINTFLT :                    807 C |
 _PRINTINT :                    76B C |  _PRINTLINT :                   7AD C |
 _PRINTSTR :                    20C C | *_PUTC :                       19C0 C |
 _PUTCPACE :                   19CC C |  _PUTCSER :                      80 C |
 _PUTCSER.TXCLOOP :              86 C |  _PUTCSER.TXCRET :               A2 C |
 _PUTX :                        903 C |  _PUTXN :                       874 C |
 _RETURN :                      F12 C |  _ROUND_NUMS :                  238 C |
*_SETQOFF :                     E89 C | *_SETQON :                      E87 C |
*_STRCMP :                      E0A C |  _STRCPY :                      E00 C |
 _STRLEN :                      1EF C | *_STRNCMP :                     171 C |
 __BAUDRATE :                  2580 - |  __FORW0 :                      16F C |
 __FORW8 :                     19E5 C | *__FORW9 :                     19F9 C |
 __STRCMPGT :                   E1F C |  __STRCMPLP :                   E0F C |
 __STRCMPNE :                   E1A C |  __STRCPY :                     E04 C |

    338 symbols
     80 unused symbols

 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 53 - 11/21/2017 16:01:12


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU2RRS                               | ALU4                                 
ALU4I                                 | BITDELAY                             
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | DEMOTE                               
INC4                                  | INCM                                 
JCF4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI1                                
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU1I                               
JNEU2                                 | JNEU2I                               
JNEU2NI                               | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDAXS                                 | LDI4                                 
LDIREG                                | LDN1                                 
LDN2                                  | LDN2S                                
MVC1                                  | MVC2                                 
MVCN1                                 | MVCN2                                
NEGI2                                 | NEGI4                                
NOP1806                               | POPR                                 
PUSHF                                 | PUSHL                                
PUSHM                                 | PUSHR                                
RELEASE                               | RELEASEL                             
RELEASES                              | RESERVE                              
RESERVEL                              | RESERVES                             
RLDMI                                 | SAVMI                                
SEXT                                  | SEXT4                                
SHL2                                  | SHL2I                                
SHL2R                                 | SHL4                                 
SHL4I                                 | SHL4R                                
SHLC4                                 | SHLR2R                               
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST2I                                 
ST4                                   | STR1                                 
STR1I                                 | STR2                                 
STR2I                                 | TESTSUB                              
ZEXT                                  | ZEXT4                                

    106 macros

 AS V1.42 Beta [Bld 87] - source file VserialNW.asm - page 54 - 11/21/2017 16:01:12


  codepages:
  ----------

STANDARD (0 changed characters)


0.14 seconds assembly time

   3947 lines source file
   8325 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
