; generated by lcc-xr18DH $Version: 5.0 - XR18DH $ on Tue Nov 21 16:01:12 2017

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802proloDH.inc
	listing on
_PIN4:
	db 0
_main: ;copt is peeping your size 8 frame with oct 23 rules
	pushr R7
	reserve 4; save room for outgoing arguments
;void main(){
;	unsigned char cin='?';
	ldaD R7,63; reg:acon
;	asm(" seq\n"); //make sure Q is high to start
;		printf("U");
 seq
	ldaD R12,L3; reg:acon
	Ccall _printf
;		delay(10);
	ldaD R12,10; reg:acon
	Ccall _delay
;		putcser(0x55);
	ldaD R12,85; reg:acon
	Ccall _putcser
;		delay(100);
	ldaD R12,100; reg:acon
	Ccall _delay
	lbr L5
L4:
;	while(1){
;		printf("Hello From The Emma Side!\n");
	ldaD R12,L7; reg:acon
	Ccall _printf
;		cin=getcser();
	Ccall _getcser; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)
	cpy1 R7,R11;LOADU1(reg)
;		printf("Thanks for the %cx\n",cin);
	ldaD R12,L8; reg:acon
	cpy1 R13,R7
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _printf
;		delay(1000);
	ldaD R12,1000; reg:acon
	Ccall _delay
;	}
L5:
;	while(1){
	lbr L4
;}
L1:
	release 4; release room for outgoing arguments
	popr R7
	Cretn

_includeser:		;framesize=2
;void includeser(){
;	asm(" include VELFserial2.inc");
 include VELFserial2.inc;}
L9:
	Cretn

_delay:		;framesize=10
	pushf R6	;opt11
	pushl R7	;opt11
	reserve 4; save room for outgoing arguments
	cpy2 R7,R12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R6,1; reg:acon
	lbr L15
L12:
;		oneMs();
	Ccall _oneMs; CALLI2(ar)
;	}
L13:
;	for (i=1;i!=howlong;i++){
	incm R6,1
L15:
	jneU2 R6,R7,L12; NE
;}
L11:
	release 4; release room for outgoing arguments
	popr R7
	popr R6
	Cretn

_olduinoincluder:		;framesize=2
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L16:
	Cretn

_strncmp:		;framesize=6
	pushf R6	;opt11
	pushl R7	;opt11
	ld2 R7,'O',sp,(10) ;reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L22
L19:
;	if (*s1 != *s2)
	ldn1 R11,R12	;opt14*
	ldn1 R10,R13	;opt14*
	jeqI1 R11,R10,L23	;opt21
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ldn1 R11,R12	;opt14*
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldn1 R10,R13	;opt14*
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 R11,R10,lbdf,L26; GE is flipped test from LT
	ldaD R6,-1; reg:acon
	lbr L27
L26:
	ldaD R6,1; reg:acon
L27:
	cpy2 R15,R6 ;LOADI2(reg)
	lbr L18
L23:
;	else if (*s1 == '\0')
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 R11,L28; NEI2(CVUI2(reg),con0)
;	    return 0;
	ld2z R15
	lbr L18
L28:
L20:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L22:
	jnzU2 R7,L19; NE 0
;    return 0;
	ld2z R15
L18:
	popr R7
	popr R6
	Cretn

_strlen:		;framesize=4
	pushr R7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L32
L31:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L32:
;	while (*str != 0) {
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 R11,L31; NEI2(CVUI2(reg),con0)
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)
L30:
	popr R7
	Cretn

_printstr:		;framesize=8
	pushr R7
	reserve 4; save room for outgoing arguments
	cpy2 R7,R12; function(2055) 1
;void printstr(char *ptr){
	lbr L36
L35:
;    while(*ptr){
;		putc(*ptr++); //jan 29
	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
	incm R7,1
	ldn1 R12,R11	;opt14*
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putcser
;		asm(" nop1806\n nop1806\n nop1806\n"); //17-03-09
 nop1806
 nop1806
 nop1806
;	}
L36:
;    while(*ptr){
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 R11,L35; NEI2(CVUI2(reg),con0)
;}
L34:
	release 4; release room for outgoing arguments
	popr R7
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:		;framesize=80
	reserve 62; save room for local variables
	pushf R0	;opt11
	pushm R1	;opt11.1
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked&floaty
	ld2 R1,'O',sp,(86) ;reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(84) ;reg:INDIRP2(addr)
;   if (flt < 0.0) {
	ld4 RL10,'D',(L42),0;INDIRF4(addr)
	jcF4 RL6,RL10,lbdf,L40;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
	incm R0,1
	str1I 45,R11; ASGNU1(indaddr,acon)	DH
;      flt *= -1.0 ;
	ld4 RL8,'D',(L43),0;INDIRF4(addr)
	cpy4 RL10,RL6; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   } else {
	lbr L41
L40:
;      if (use_leading_plus) {
	lbr L44
;         *output++ = '+' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
	incm R0,1
	str1I 43,R11; ASGNU1(indaddr,acon)	DH
;      }
L44:
;   }
L41:
;   if (dec_digits < 8) {
	jcI2I R1,8,lbdf,L46; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6; LOADU4(reg)
	shlR2R	R11,R1	;opt6.1
	shl2I 	R11,1	;opt6.1
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   }
L46:
;	mult=mult_nums[dec_digits];
	shlR2R	R11,R1	;opt6.1
	shl2I 	R11,1	;opt6.1
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(68); ASGNF4(addr,reg)
;   wholeNum = flt;
	cpy4 RL8,RL6; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(72)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6; LOADU4(reg)
	st4 RL8,'O',sp,(16); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(72);reg:  INDIRI4(addr)
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(16);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(68);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(64)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(72);reg:  INDIRI4(addr)
	st2 R0,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	alu2 R0,R15,R0,add,adc	;ADDP2(reg,reg)
;   if (dec_digits > 0) {
	jzU2 R1,L48; EQ 0
;		*output++ = '.' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1.1
	incm R0,1
	str1I 46,R11; ASGNU1(indaddr,acon)	DH
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(64);reg:  INDIRI4(addr)
	st2 R0,'O',sp,(4); arg+f**
	cpy2 R11,R1 ;LOADI2(reg)
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	}
L48:
;   return outbfr;
	ld2 R15,'O',sp,(84) ;reg:INDIRP2(addr)
L39:
	release 8; release room for outgoing arguments
	popr R7
	popr R6
	popr R1
	popr R0
	release 62; release room for local variables 
	Cretn

_itoa:		;framesize=16
	reserve 2; save room for local variables
	pushf R0	;opt11
	pushm R1	;opt11.1
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	reserve 4; save room for outgoing arguments
	st2 R12,'O',sp,(16)			
	inc memaddr				;opt16.1
	str2 R13,memaddr			
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(18) ;reg:INDIRP2(addr)
	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
;	if (s<0){
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	jcI2I R11,0,lbdf,L51; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
	str1I 45,R11; ASGNU1(indaddr,acon)	DH
	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
;		n=-s;
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R6,R11 ;LOADU2(reg)
;	} else{
	lbr L52
L51:
;		n=s;
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	cpy2 R6,R11 ;LOADU2(reg)
;	}
L52:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L54
L53:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L59
L56:
L57:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L59:
	jcU2 R6,R7,lbdf,L56 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	jnzU2 R0,L63; NE 0
	jnzU2 R1,L63; NE 0
	jneU2I R7,1,L60; NE
L63:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
	ldA2 R10,'O',R1,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)		DH
	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(12); ASGNP2(addr,reg)
;			flag='y';
	ldaD R0,121; reg:acon
;		}
L60:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R7,R15 ;LOADU2(reg)
;	}
L54:
;	while(k>0){
	jnzU2 R7,L53; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(12) ;reg:INDIRP2(addr)
	str1I 0,R11; ASGNU1(indaddr,acon)	DH
;	return buffer;
	ld2 R15,'O',sp,(18) ;reg:INDIRP2(addr)
L50:
	release 4; release room for outgoing arguments
	popr R7
	popr R6
	popr R1
	popr R0
	release 2; release room for local variables 
	Cretn

_ltoa:		;framesize=16
	pushf R1	;opt11
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(20) ;reg:INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL6,RL10,lbdf,L65; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,1
	str1I 45,R11; ASGNU1(indaddr,acon)	DH
;		s=-s;
	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
;	}
L65:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6; LOADI4*
	st2 R1,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R1 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(20) ;reg:INDIRP2(addr)
L64:
	release 8; release room for outgoing arguments
	popr R7
	popr R6
	popr R1
	Cretn

_printint:		;framesize=14
	reserve 12
	st2 R12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(4); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(4); reg:addr
	Ccall _printstr
;}
L67:
	release 12
	Cretn

_printlint:		;framesize=20
	reserve 18
	st2 R12,'O',sp,(20)			
	inc memaddr				;opt16.1
	str2 R13,memaddr			
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(6); reg:addr
	st2 R11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L68:
	release 18
	Cretn

_printflt:		;framesize=30
	reserve 28
	st2 R12,'O',sp,(30)			
	inc memaddr				;opt16.1
	str2 R13,memaddr			
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(30);INDIRF4(addr)
	ldA2 R11,'O',sp,(8); reg:addr
	st2 R11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L69:
	release 28
	Cretn

_putxn:		;framesize=6
	reserve 4
	st2 R12,'O',sp,(6); flag1 
	ldA2 R11,'O',sp,(6); reg:addr
	ld2 R10,'O',sp,(6) ;reg:INDIRI2(addr)
	str1 R10,R11; ASGNU1(indaddr,reg)		DH
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I R11,10,lbdf,L71; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putcser
;	} else {
	lbr L72
L71:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putcser
;	}
L72:
;}
L70:
	release 4
	Cretn

_putx:		;framesize=6
	reserve 4
	st2 R12,'O',sp,(6); flag1 
	ldA2 R11,'O',sp,(6); reg:addr
	ld2 R10,'O',sp,(6) ;reg:INDIRI2(addr)
	str1 R10,R11; ASGNU1(indaddr,reg)		DH
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L73:
	release 4
	Cretn

_printf:		;framesize=18
	reserve 4; save room for local variables
	pushf R0	;opt11
	pushm R1	;opt11.1
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	reserve 4; save room for outgoing arguments
	st2 R12,'O',sp,(18)			
	inc memaddr				;opt16
	str2 R13,memaddr			
;void printf(char *pptr,...){ //limited implementation of printf
;	register char* ptr=pptr; //try to save on loads/spills
	ld2 R7,'O',sp,(18) ;reg:INDIRP2(addr)
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&pptr;
	ldA2 R1,'O',sp,(18); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L76
L75:
;    while(*ptr) {
;		c=*ptr; ptr++;
	ldn1 R6,R7;reg:  INDIRU1(indaddr)
	incm R7,1
;		if (c!='%'){
	cpy1 R11,R6
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jeqU2I R11,37,L78;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R6
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putcser
;			asm(" nop1806\n nop1806\n nop1806\n"); //17-03-13
 nop1806
 nop1806
 nop1806
;		} else{
	lbr L79
L78:
;			c=*ptr;ptr++;
	ldn1 R6,R7;reg:  INDIRU1(indaddr)
	incm R7,1
;			switch (c){
	cpy1 R11,R6
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(13); ASGNI2(addr,reg)
	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
	jcI2I R11,99,lbnf,L102  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I R11,108,lbnf,L103; GT reverse  the subtraction
	shl2I R11,1
	ld2 R11,'O',R11,(L104-198) ;reg:INDIRP2(addr)
	jumpv R11; JUMPV(reg)
L104:
	dw L86
	dw L84
	dw L81
	dw L97
	dw L81
	dw L81
	dw L84
	dw L81
	dw L81
	dw L90
L102:
	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
	jeqU2I R11,88,L89;EQI2(reg,con)
	lbr L81
L103:
	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
	ldaD R10,115; reg:acon
	jeqI2 R11,R10,L85; EQI2(reg,reg)
	jcI2 R11,R10,lbnf,L81; LT=lbnf i.e. subtract B from A and jump if borrow 
L106:
	ld2 R11,'O',sp,(13) ;reg:INDIRI2(addr)
	jeqU2I R11,120,L89;EQI2(reg,con)
	lbr L81
L84:
;					printint(*this++);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2 R12,R11	;opt9x
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L82
L85:
;					printstr((char*) *this++);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L82
L86:
;					if (*ptr=='x'){ //if there's an x
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jneU1I R11,120,L87	; DH 4
;						ptr++; //skip over the x
	incm R7,1
;						putx(((unsigned int) *this++)&255); //print 1 byte as hex
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					} else{
	lbr L88
L87:
;						putc((unsigned int) *this++);		//print as char
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putcser
;					}
L88:
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L82
L89:
;					putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	;opt9x
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L82
L90:
;					if (*ptr){ //as long as there's something there
	ldn1 R11,R7	;opt14*
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 R11,L91; EQ 0
;						xord=*ptr++;
	cpy2 R11,R7 ;LOADP2(reg) ;opt1.1
	incm R7,1
	ldA2 R10,'O',sp,(15); reg:addr
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	str1 R11,R10; ASGNU1(indaddr,reg)		DH
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 R11,L93; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L93:
;						if(xord=='d'){
	ld1 R11,'O',sp,(15)
	jneU1I R11,100,L95	; DH 4
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L96
L95:
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	;opt9x
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R1	;opt9x
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,2
	ldn2s R11,R11	;opt9xs
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L96:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L82
L91:
L97:
;					if (*ptr){ //as long as there's something there
	ldn1 R11,R7	;opt14*
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 R11,L98; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 R11,L100; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L100:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R1,4
;						argslot+=2;
	incm R0,2
;						break;
	lbr L82
L98:
L81:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putcser
	cpy1 R12,R6
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putcser
;			} //switch
L82:
;		} //%
L79:
;	} //while
L76:
;    while(*ptr) {
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 R11,L75; NEI2(CVUI2(reg),con0)
;} //prtf
L74:
	release 4; release room for outgoing arguments
	popr R7
	popr R6
	popr R1
	popr R0
	release 4; release room for local variables 
	Cretn

_exit:		;framesize=6
	reserve 4
	st2 R12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L108; reg:acon
	ld2 R13,'O',sp,(6) ;reg:INDIRI2(addr)
	Ccall _printf
L109:
;	while(1);
L110:
	lbr L109
;}
L107:
	release 4
	Cretn

_memcmp:		;framesize=10
	pushf R0	;opt11
	pushm R1	;opt11.1
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	ld2 R7,'O',sp,(14) ;reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L114
L113:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1.1
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg) ;opt1.1
	incm R0,1
	ldn1 R11,R11	;opt14*
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldn1 R10,R10	;opt14*
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R6,R11,R10,sm,smb
;    }
L114:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
	decm R7,1
	jzU2 R11,L116; EQ 0
	jzU2 R6,L113; EQ 0
L116:
;    return v;
	cpy2 R15,R6 ;LOADI2(reg)
L112:
	popr R7
	popr R6
	popr R1
	popr R0
	Cretn

_memcpy:		;framesize=8
	pushf R1	;opt11
	pushm R6	;opt11.1
	pushl R7	;opt11.1
	ld2 R7,'O',sp,(12) ;reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R1,R13 ;LOADP2(reg)
	lbr L119
L118:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 ;LOADP2(reg) ;opt1.1
	incm R6,1
	cpy2 R10,R1 ;LOADP2(reg) ;opt1.1
	incm R1,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)		DH
;        }
L119:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
	decm R7,1
	jnzU2 R11,L118; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L117:
	popr R7
	popr R6
	popr R1
	Cretn

_memset:		;framesize=6
	pushf R6	;opt11
	pushl R7	;opt11
	ld2 R7,'O',sp,(10) ;reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R6,R12 ;LOADP2(reg)
	lbr L123
L122:
;        *p++ = (unsigned char)c;
	cpy2 R11,R6 ;LOADP2(reg) ;opt1.1
	incm R6,1
	cpy2 R10,R13 ;LOADU2(reg)
	str1 R10,R11; ASGNU1(indaddr,reg)		DH
L123:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg) ;opt1.1
	decm R7,1
	jnzU2 R11,L122; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L121:
	popr R7
	popr R6
	Cretn

_nstdlibincluder:		;framesize=2
;void nstdlibincluder(){
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
	include nstdlib.inc
;}
L125:
	Cretn

L108:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L43:
	dd 0xbf800000
	align 4
L42:
	dd 0x0
L8:
	db 84
	db 104
	db 97
	db 110
	db 107
	db 115
	db 32
	db 102
	db 111
	db 114
	db 32
	db 116
	db 104
	db 101
	db 32
	db 37
	db 99
	db 120
	db 10
	db 0
L7:
	db 72
	db 101
	db 108
	db 108
	db 111
	db 32
	db 70
	db 114
	db 111
	db 109
	db 32
	db 84
	db 104
	db 101
	db 32
	db 69
	db 109
	db 109
	db 97
	db 32
	db 83
	db 105
	db 100
	db 101
	db 33
	db 10
	db 0
L3:
	db 85
	db 0
	include lcc1802epiloDH.inc
	include LCC1802FP.inc
	include IO1802.inc
