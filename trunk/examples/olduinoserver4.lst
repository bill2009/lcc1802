 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 1 - 6/21/2013 15:55:37


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Fri Jun 21 15:55:15 2013
       2/       0 : =2H                 SP:	equ	2 ;stack pointer
       3/       0 : =EH                 memAddr: equ	14
       4/       0 : =6H                 retAddr: equ	6
       5/       0 : =FH                 retVal:	equ	15
       6/       0 : =CH                 regArg1: equ	12
       7/       0 : =DH                 regArg2: equ	13
(1)  847/       0 :                     	listing	on
(1)  848/       0 : C0 1F 5E            	lbr	lcc1802Init
(1)  849/       3 :                     	
(1)  850/       3 :                     
      10/       3 :                     	listing on
      11/       3 :                     _PIN4:
      12/       3 : 00                  	db 0
      13/       4 :                     _ledmode:
      14/       4 : 00 00               	dw 0
      15/       6 :                     _cmdip:
      16/       6 : 00 00               	dw 0
      17/       8 : 00 00               	dw 0
      18/       A : 00 00               	dw 0
      19/       C : 00 B6               	dw 182
      20/       E :                     _pagehits:
      21/       E : 00 00               	dw 0
      22/      10 :                     _SPI_Write:
      23/      10 : (MACRO)             	reserve 4
      24/      14 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      25/      21 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
      26/      2E : (MACRO)             	demote	2+6	;opt3
      27/      39 :                     ;{
      28/      39 :                     ;  enablewiz();   			// Activate the CS pin
      29/      39 :                     ;  sendwizwrt(); //was shiftoutf(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
      30/      39 : 7A                  	req
      31/      3A : (MACRO)             	Ccall _sendwizwrt; CALLI2(ar)
      32/      3D :                     ;  shiftoutf(addr >>8); 		// Send Wiznet W5100 Address High Byte
      33/      3D : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      34/      49 : (MACRO)             	cpy2 R12,R11
      35/      4D : 9C                  	ghi	R12	;opt2
      36/      4E : AC                  	plo	R12
      37/      4F : F8 00               	ldi	0
      38/      51 : BC                  	phi	R12	
      39/      52 : (MACRO)             	Ccall _shiftoutf
      40/      55 :                     ;  shiftoutf(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
      41/      55 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      42/      61 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      43/      69 : (MACRO)             	Ccall _shiftoutf
      44/      6C :                     ;  shiftoutf(data);			// Send the data byte
      45/      6C : (MACRO)             	ld1 R11,'O',sp,(2+6)
      46/      76 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      47/      79 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
      48/      7D : (MACRO)             	Ccall _shiftoutf
      49/      80 :                     ;  disablewiz();				// make CS pin not active
      50/      80 : 7B                  	seq
      51/      81 :                     ;}
      52/      81 :                     L1:
      53/      81 : (MACRO)             	release 4
      54/      85 : (MACRO)             	Cretn
      55/      86 :                     _SPI_Read:
      56/      86 : (MACRO)             	reserve 6
      57/      8C : (MACRO)             	st2 r12,'O',sp,(8); flag1 
      58/      99 :                     ;{
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 2 - 6/21/2013 15:55:37


      59/      99 :                     ;  enablewiz();   		// Activate the CS pin
      60/      99 :                     ;  sendwizrd(); //shiftoutf(WIZNET_READ_OPCODE);   //Send Wiznet W5100 Write OpCode
      61/      99 : 7A                  	req
      62/      9A : (MACRO)             	Ccall _sendwizrd; CALLI2(ar)
      63/      9D :                     ;  shiftoutf(addr >>8);	// Send Wiznet W5100 Address High Byte
      64/      9D : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      65/      A9 : (MACRO)             	cpy2 R12,R11
      66/      AD : 9C                  	ghi	R12	;opt2
      67/      AE : AC                  	plo	R12
      68/      AF : F8 00               	ldi	0
      69/      B1 : BC                  	phi	R12	
      70/      B2 : (MACRO)             	Ccall _shiftoutf
      71/      B5 :                     ;  shiftoutf(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
      72/      B5 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      73/      C1 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      74/      C9 : (MACRO)             	Ccall _shiftoutf
      75/      CC :                     ;  value=shiftinf();	// Send Dummy transmission to read the data
      76/      CC : (MACRO)             	Ccall _shiftinf;CALLU2(ar)*
      77/      CF : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
      78/      D1 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
      79/      DB :                     ;  disablewiz();			// make CS pin inactive
      80/      DB :                     ;  return(value);
      81/      DB : 7B                  	seq
      82/      DC : (MACRO)             	ld1 R15,'O',sp,(-3+8)
      83/      E6 : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
      84/      E9 :                     L4:
      85/      E9 : (MACRO)             	release 6
      86/      EF : (MACRO)             	Cretn
      87/      F0 :                     L8:
      88/      F0 : DE                  	db 222
      89/      F1 : AD                  	db 173
      90/      F2 : BE                  	db 190
      91/      F3 : EF                  	db 239
      92/      F4 : FE                  	db 254
      93/      F5 : ED                  	db 237
      94/      F6 :                     L9:
      95/      F6 : C0                  	db 192
      96/      F7 : A8                  	db 168
      97/      F8 : 01                  	db 1
      98/      F9 : B8                  	db 184
      99/      FA :                     L10:
     100/      FA : FF                  	db 255
     101/      FB : FF                  	db 255
     102/      FC : FF                  	db 255
     103/      FD : 00                  	db 0
     104/      FE :                     L11:
     105/      FE : C0                  	db 192
     106/      FF : A8                  	db 168
     107/     100 : 01                  	db 1
     108/     101 : 01                  	db 1
     109/     102 :                     _W5100_Init:
     110/     102 : (MACRO)             	reserve 34
     111/     10C :                     ;void W5100_Init(void){// Ethernet Setup
     112/     10C :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     113/     10C : (MACRO)             	ldA2 R11,'O',sp,(-8+36); reg:addr
     114/     114 : (MACRO)             	ldaD R8,L8; reg:acon
     115/     11A : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     116/     12F :                     ;  unsigned char ip_addr[] = {192,168,1,184};
     117/     12F : (MACRO)             	ldA2 R11,'O',sp,(-12+36); reg:addr
     118/     137 : (MACRO)             	ldaD R8,L9; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 3 - 6/21/2013 15:55:37


     119/     13D : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     120/     152 :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     121/     152 : (MACRO)             	ldA2 R11,'O',sp,(-16+36); reg:addr
     122/     15A : (MACRO)             	ldaD R8,L10; reg:acon
     123/     160 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     124/     175 :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     125/     175 : (MACRO)             	ldA2 R11,'O',sp,(-20+36); reg:addr
     126/     17D : (MACRO)             	ldaD R8,L11; reg:acon
     127/     183 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     128/     198 :                     ;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
     129/     198 : (MACRO)             	ld2z R12
     130/     19C : (MACRO)             	ldaD R13,128; reg:acon
     131/     1A2 : (MACRO)             	Ccall _SPI_Write
     132/     1A5 :                     ;  delay(1);
     133/     1A5 : (MACRO)             	ldaD R12,1; reg:acon
     134/     1AB : (MACRO)             	Ccall _delay
     135/     1AE :                     ;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
     136/     1AE : (MACRO)             	ldaD R12,1; reg:acon
     137/     1B4 : (MACRO)             	ld1 R13,'O',sp,(-20+36)
     138/     1BE : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     139/     1C1 : (MACRO)             	Ccall _SPI_Write
     140/     1C4 : (MACRO)             	ldaD R12,2; reg:acon
     141/     1CA : (MACRO)             	ld1 R13,'O',sp,(-19+36)
     142/     1D4 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     143/     1D7 : (MACRO)             	Ccall _SPI_Write
     144/     1DA :                     ;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
     145/     1DA : (MACRO)             	ldaD R12,3; reg:acon
     146/     1E0 : (MACRO)             	ld1 R13,'O',sp,(-18+36)
     147/     1EA : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     148/     1ED : (MACRO)             	Ccall _SPI_Write
     149/     1F0 : (MACRO)             	ldaD R12,4; reg:acon
     150/     1F6 : (MACRO)             	ld1 R13,'O',sp,(-17+36)
     151/     200 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     152/     203 : (MACRO)             	Ccall _SPI_Write
     153/     206 :                     ;  delay(1);
     154/     206 : (MACRO)             	ldaD R12,1; reg:acon
     155/     20C : (MACRO)             	Ccall _delay
     156/     20F :                     ;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
     157/     20F : (MACRO)             	ldaD R12,9; reg:acon
     158/     215 : (MACRO)             	ld1 R13,'O',sp,(-8+36)
     159/     21F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     160/     222 : (MACRO)             	Ccall _SPI_Write
     161/     225 : (MACRO)             	ldaD R12,10; reg:acon
     162/     22B : (MACRO)             	ld1 R13,'O',sp,(-7+36)
     163/     235 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     164/     238 : (MACRO)             	Ccall _SPI_Write
     165/     23B :                     ;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
     166/     23B : (MACRO)             	ldaD R12,11; reg:acon
     167/     241 : (MACRO)             	ld1 R13,'O',sp,(-6+36)
     168/     24B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     169/     24E : (MACRO)             	Ccall _SPI_Write
     170/     251 : (MACRO)             	ldaD R12,12; reg:acon
     171/     257 : (MACRO)             	ld1 R13,'O',sp,(-5+36)
     172/     261 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     173/     264 : (MACRO)             	Ccall _SPI_Write
     174/     267 :                     ;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
     175/     267 : (MACRO)             	ldaD R12,13; reg:acon
     176/     26D : (MACRO)             	ld1 R13,'O',sp,(-4+36)
     177/     277 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     178/     27A : (MACRO)             	Ccall _SPI_Write
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 4 - 6/21/2013 15:55:37


     179/     27D : (MACRO)             	ldaD R12,14; reg:acon
     180/     283 : (MACRO)             	ld1 R13,'O',sp,(-3+36)
     181/     28D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     182/     290 : (MACRO)             	Ccall _SPI_Write
     183/     293 :                     ;  delay(1);
     184/     293 : (MACRO)             	ldaD R12,1; reg:acon
     185/     299 : (MACRO)             	Ccall _delay
     186/     29C :                     ;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
     187/     29C : (MACRO)             	ldaD R12,5; reg:acon
     188/     2A2 : (MACRO)             	ld1 R13,'O',sp,(-16+36)
     189/     2AC : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     190/     2AF : (MACRO)             	Ccall _SPI_Write
     191/     2B2 : (MACRO)             	ldaD R12,6; reg:acon
     192/     2B8 : (MACRO)             	ld1 R13,'O',sp,(-15+36)
     193/     2C2 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     194/     2C5 : (MACRO)             	Ccall _SPI_Write
     195/     2C8 :                     ;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
     196/     2C8 : (MACRO)             	ldaD R12,7; reg:acon
     197/     2CE : (MACRO)             	ld1 R13,'O',sp,(-14+36)
     198/     2D8 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     199/     2DB : (MACRO)             	Ccall _SPI_Write
     200/     2DE : (MACRO)             	ldaD R12,8; reg:acon
     201/     2E4 : (MACRO)             	ld1 R13,'O',sp,(-13+36)
     202/     2EE : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     203/     2F1 : (MACRO)             	Ccall _SPI_Write
     204/     2F4 :                     ;  delay(1);
     205/     2F4 : (MACRO)             	ldaD R12,1; reg:acon
     206/     2FA : (MACRO)             	Ccall _delay
     207/     2FD :                     ;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
     208/     2FD : (MACRO)             	ldaD R12,15; reg:acon
     209/     303 : (MACRO)             	ld1 R13,'O',sp,(-12+36)
     210/     30D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     211/     310 : (MACRO)             	Ccall _SPI_Write
     212/     313 : (MACRO)             	ldaD R12,16; reg:acon
     213/     319 : (MACRO)             	ld1 R13,'O',sp,(-11+36)
     214/     323 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     215/     326 : (MACRO)             	Ccall _SPI_Write
     216/     329 :                     ;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
     217/     329 : (MACRO)             	ldaD R12,17; reg:acon
     218/     32F : (MACRO)             	ld1 R13,'O',sp,(-10+36)
     219/     339 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     220/     33C : (MACRO)             	Ccall _SPI_Write
     221/     33F : (MACRO)             	ldaD R12,18; reg:acon
     222/     345 : (MACRO)             	ld1 R13,'O',sp,(-9+36)
     223/     34F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     224/     352 : (MACRO)             	Ccall _SPI_Write
     225/     355 :                     ;  delay(1);
     226/     355 : (MACRO)             	ldaD R12,1; reg:acon
     227/     35B : (MACRO)             	Ccall _delay
     228/     35E :                     ;  SPI_Write(RMSR,0x55);
     229/     35E : (MACRO)             	ldaD R12,26; reg:acon
     230/     364 : (MACRO)             	ldaD R13,85; reg:acon
     231/     36A : (MACRO)             	Ccall _SPI_Write
     232/     36D :                     ;  SPI_Write(TMSR,0x55);
     233/     36D : (MACRO)             	ldaD R12,27; reg:acon
     234/     373 : (MACRO)             	ldaD R13,85; reg:acon
     235/     379 : (MACRO)             	Ccall _SPI_Write
     236/     37C :                     ;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
     237/     37C : (MACRO)             	ldaD R12,15; reg:acon
     238/     382 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 5 - 6/21/2013 15:55:37


     239/     385 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     240/     389 : (MACRO)             	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
     241/     396 : (MACRO)             	ldaD R12,16; reg:acon
     242/     39C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     243/     39F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     244/     3A3 : (MACRO)             	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
     245/     3B0 : (MACRO)             	ldaD R12,17; reg:acon
     246/     3B6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     247/     3B9 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     248/     3BD : (MACRO)             	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
     249/     3CA : (MACRO)             	ldaD R12,18; reg:acon
     250/     3D0 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     251/     3D3 : (MACRO)             	ldaD R12,L26; reg:acon
     252/     3D9 : (MACRO)             	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
     253/     3E5 : (MACRO)             	cpy1 R13,R10
     254/     3E7 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     255/     3EA : (MACRO)             	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
     256/     3F6 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     257/     3F9 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     258/     406 : (MACRO)             	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
     259/     412 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     260/     415 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     261/     422 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     262/     426 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     263/     429 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     264/     436 : (MACRO)             	Ccall _printf
     265/     439 :                     ;}
     266/     439 :                     L7:
     267/     439 : (MACRO)             	release 34
     268/     441 : (MACRO)             	Cretn
     269/     442 :                     _socket0_init:
     270/     442 : (MACRO)             	reserve 4
     271/     446 :                     ;void socket0_init(){ //initialize socket 0 for http server
     272/     446 :                     ;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
     273/     446 : (MACRO)             	ldaD R12,1024; reg:acon
     274/     44C : (MACRO)             	ldaD R13,1; reg:acon
     275/     452 : (MACRO)             	Ccall _SPI_Write
     276/     455 :                     ;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
     277/     455 : (MACRO)             	ldaD R12,1028; reg:acon
     278/     45B : (MACRO)             	ld2z R13
     279/     45F : (MACRO)             	Ccall _SPI_Write
     280/     462 :                     ;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
     281/     462 : (MACRO)             	ldaD R12,1029; reg:acon
     282/     468 : (MACRO)             	ldaD R13,80; reg:acon
     283/     46E : (MACRO)             	Ccall _SPI_Write
     284/     471 :                     ;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     285/     471 : (MACRO)             	ldaD R12,1025; reg:acon
     286/     477 : (MACRO)             	ldaD R13,1; reg:acon
     287/     47D : (MACRO)             	Ccall _SPI_Write
     288/     480 :                     ;	delay(10);
     289/     480 : (MACRO)             	ldaD R12,10; reg:acon
     290/     486 : (MACRO)             	Ccall _delay
     291/     489 :                     ;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
     292/     489 : (MACRO)             	ldaD R12,1025; reg:acon
     293/     48F : (MACRO)             	ldaD R13,2; reg:acon
     294/     495 : (MACRO)             	Ccall _SPI_Write
     295/     498 :                     ;}
     296/     498 :                     L27:
     297/     498 : (MACRO)             	release 4
     298/     49C : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 6 - 6/21/2013 15:55:37


     299/     49D :                     _disconnect0:
     300/     49D : (MACRO)             	reserve 4
     301/     4A1 :                     ;void disconnect0(){
     302/     4A1 :                     ;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
     303/     4A1 : (MACRO)             	ldaD R12,1025; reg:acon
     304/     4A7 : (MACRO)             	ldaD R13,8; reg:acon
     305/     4AD : (MACRO)             	Ccall _SPI_Write
     306/     4B0 :                     L29:
     307/     4B0 :                     ;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
     308/     4B0 :                     L30:
     309/     4B0 : (MACRO)             	ldaD R12,1025; reg:acon
     310/     4B6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     311/     4B9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     312/     4BD : (MACRO)             	jnzU1 r11,L29; NEI2(CVUI2(reg),con0)
     313/     4C1 :                     ;}
     314/     4C1 :                     L28:
     315/     4C1 : (MACRO)             	release 4
     316/     4C5 : (MACRO)             	Cretn
     317/     4C6 :                     _close0:
     318/     4C6 : (MACRO)             	reserve 4
     319/     4CA :                     ;void close0(){
     320/     4CA :                     ;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
     321/     4CA : (MACRO)             	ldaD R12,1025; reg:acon
     322/     4D0 : (MACRO)             	ldaD R13,16; reg:acon
     323/     4D6 : (MACRO)             	Ccall _SPI_Write
     324/     4D9 :                     L33:
     325/     4D9 :                     ;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
     326/     4D9 :                     L34:
     327/     4D9 : (MACRO)             	ldaD R12,1025; reg:acon
     328/     4DF : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     329/     4E2 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     330/     4E6 : (MACRO)             	jnzU1 r11,L33; NEI2(CVUI2(reg),con0)
     331/     4EA :                     ;}
     332/     4EA :                     L32:
     333/     4EA : (MACRO)             	release 4
     334/     4EE : (MACRO)             	Cretn
     335/     4EF :                     _recv0:
     336/     4EF : (MACRO)             	reserve 2; save room for local variables
     337/     4F1 : (MACRO)             	pushr r0
     338/     4F6 : (MACRO)             	pushr r1
     339/     4FB : (MACRO)             	pushr r6
     340/     500 : (MACRO)             	pushr r7
     341/     505 : (MACRO)             	reserve 4; save room for outgoing arguments
     342/     509 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     343/     50D : (MACRO)             	cpy2 r6,r13; function(2054) 1
     344/     511 :                     ;unsigned int recv0(unsigned char *buf,unsigned int buflen){
     345/     511 :                     ;    if (buflen <= 0) return 1;
     346/     511 : (MACRO)             	jnzU2 r6,L37; NE 0
     347/     519 : (MACRO)             	ldaD R15,1; reg:acon
     348/     51F : C0 05 E7            	lbr L36
     349/     522 :                     L37:
     350/     522 :                     ;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
     351/     522 : (MACRO)             	jnU2I r6,512,lbdf,L39 ;LEU2 512 6 L39; LE is flipped test & subtraction
     352/     52B :                     ;        buflen=MAX_BUF - 2;
     353/     52B : (MACRO)             	ldaD R6,510; reg:acon
     354/     531 :                     L39:
     355/     531 :                     ;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
     356/     531 : (MACRO)             	ldaD R12,1064; reg:acon
     357/     537 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     358/     53A : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 7 - 6/21/2013 15:55:37


     359/     53E : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     360/     541 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     361/     54E :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     362/     54E : (MACRO)             	ldaD R12,1065; reg:acon
     363/     554 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     364/     557 : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
     365/     563 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     366/     56B : (MACRO)             	shl2I R10,8
     367/     59B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     368/     59F : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     369/     5A2 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     370/     5AE : C0 05 D1            	lbr L42
     371/     5B1 :                     L41:
     372/     5B1 :                     ;		while(buflen) {//receive individual bytes into the buffer
     373/     5B1 :                     ;		  buflen--;
     374/     5B1 : (MACRO)             	decm R6,1
     375/     5B2 :                     ;		  realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     376/     5B2 : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     377/     5BA : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     378/     5C2 :                     ;		  *buf = SPI_Read(realaddr);
     379/     5C2 : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     380/     5C6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     381/     5C9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     382/     5CD : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     383/     5CF :                     ;		  offaddr++;
     384/     5CF : (MACRO)             	incm R1,1
     385/     5D0 :                     ;		  buf++;
     386/     5D0 : (MACRO)             	incm R7,1
     387/     5D1 :                     ;		}
     388/     5D1 :                     L42:
     389/     5D1 :                     ;		while(buflen) {//receive individual bytes into the buffer
     390/     5D1 : (MACRO)             	jnzU2 r6,L41; NE 0
     391/     5D9 :                     ;    *buf='\0';        // terminate string
     392/     5D9 : (MACRO)             	ldaD R11,0; reg:acon
     393/     5DF : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     394/     5E1 :                     ;    return 1;
     395/     5E1 : (MACRO)             	ldaD R15,1; reg:acon
     396/     5E7 :                     L36:
     397/     5E7 : (MACRO)             	release 4; release room for outgoing arguments
     398/     5EB : (MACRO)             	popr r7
     399/     5EF : (MACRO)             	popr r6
     400/     5F3 : (MACRO)             	popr r1
     401/     5F7 : (MACRO)             	popr r0
     402/     5FB : (MACRO)             	release 2; release room for local variables 
     403/     5FD : (MACRO)             	Cretn
     404/     5FE :                     _flush:
     405/     5FE : (MACRO)             	reserve 2; save room for local variables
     406/     600 : (MACRO)             	pushr r7
     407/     605 : (MACRO)             	reserve 4; save room for outgoing arguments
     408/     609 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
     409/     616 :                     ;void flush(rsize){ //flush the receive buffer
     410/     616 :                     ;    ptr = SPI_Read(S0_RX_RD);   // Read the Rx Read Pointer
     411/     616 : (MACRO)             	ldaD R12,1064; reg:acon
     412/     61C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     413/     61F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     414/     623 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     415/     626 : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNU2(addr,reg)*
     416/     633 :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     417/     633 : (MACRO)             	ldaD R12,1065; reg:acon
     418/     639 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 8 - 6/21/2013 15:55:37


     419/     63C : (MACRO)             	ld2 R10,'O',sp,(-4+10); reg:INDIRU2(addr)
     420/     648 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     421/     650 : (MACRO)             	shl2I R10,8
     422/     680 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     423/     684 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     424/     687 : (MACRO)             	alu2 R7,R10,R11,add,adc; ADDU2(r,r)
     425/     693 :                     ;	offaddr+=rsize;				//how much to skip
     426/     693 : (MACRO)             	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
     427/     69F : (MACRO)             	alu2 R7,R7,R11,add,adc; ADDU2(r,r)
     428/     6AB :                     ;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
     429/     6AB : (MACRO)             	ldaD R12,1064; reg:acon
     430/     6B1 : (MACRO)             	cpy2 R11,R7
     431/     6B5 : 9B                  	ghi	R11	;opt2
     432/     6B6 : AB                  	plo	R11
     433/     6B7 : F8 00               	ldi	0
     434/     6B9 : BB                  	phi	R11	
     435/     6BA : (MACRO)             	cpy1 R13,R11
     436/     6BC : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     437/     6BF : (MACRO)             	Ccall _SPI_Write
     438/     6C2 :                     ;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     439/     6C2 : (MACRO)             	ldaD R12,1065; reg:acon
     440/     6C8 : (MACRO)             	alu2I R11,R7,255,ani,ani ;removed copy;BANDU2(reg,con)  
     441/     6D0 : (MACRO)             	cpy1 R13,R11
     442/     6D2 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     443/     6D5 : (MACRO)             	Ccall _SPI_Write
     444/     6D8 :                     ;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
     445/     6D8 : (MACRO)             	ldaD R12,1025; reg:acon
     446/     6DE : (MACRO)             	ldaD R13,64; reg:acon
     447/     6E4 : (MACRO)             	Ccall _SPI_Write
     448/     6E7 :                     ;    delay(5);    				// Wait for Receive Process
     449/     6E7 : (MACRO)             	ldaD R12,5; reg:acon
     450/     6ED : (MACRO)             	Ccall _delay
     451/     6F0 :                     ;}
     452/     6F0 :                     L44:
     453/     6F0 : (MACRO)             	release 4; release room for outgoing arguments
     454/     6F4 : (MACRO)             	popr r7
     455/     6F8 : (MACRO)             	release 2; release room for local variables 
     456/     6FA : (MACRO)             	Cretn
     457/     6FB :                     _recv_size:
     458/     6FB : (MACRO)             	reserve 6
     459/     701 :                     ;unsigned int recv_size(void){
     460/     701 :                     ;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     461/     701 : (MACRO)             	ldaD R12,1062; reg:acon
     462/     707 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     463/     70A : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     464/     70E : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     465/     71B : (MACRO)             	ldaD R12,1063; reg:acon
     466/     721 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     467/     724 : (MACRO)             	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
     468/     730 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     469/     733 : (MACRO)             	alu2I R10,R10,255,ani,ani
     470/     73B :                     	;removed ?	cpy2 R10,R10
     471/     73B : (MACRO)             	shl2I R10,8
     472/     76B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     473/     76F : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     474/     772 : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
     475/     77E : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     476/     782 :                     L45:
     477/     782 : (MACRO)             	release 6
     478/     788 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 9 - 6/21/2013 15:55:37


     479/     789 :                     _send0:
     480/     789 : (MACRO)             	reserve 6; save room for local variables
     481/     78F : (MACRO)             	pushr r0
     482/     794 : (MACRO)             	pushr r1
     483/     799 : (MACRO)             	pushr r6
     484/     79E : (MACRO)             	pushr r7
     485/     7A3 : (MACRO)             	reserve 4; save room for outgoing arguments
     486/     7A7 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     487/     7AB : (MACRO)             	cpy2 r6,r13; function(2054) 1
     488/     7AF :                     ;unsigned int send0(unsigned char *buf,unsigned int buflen){
     489/     7AF :                     ;    if (buflen <= 0) return 0;
     490/     7AF : (MACRO)             	jnzU2 r6,L47; NE 0
     491/     7B7 : (MACRO)             	ld2z R15
     492/     7BB : C0 0A 9E            	lbr L46
     493/     7BE :                     L47:
     494/     7BE :                     ;    txsize=SPI_Read(SO_TX_FSR);
     495/     7BE : (MACRO)             	ldaD R12,1056; reg:acon
     496/     7C4 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     497/     7C7 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     498/     7CB : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     499/     7CE : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     500/     7D2 :                     ;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     501/     7D2 : (MACRO)             	ldaD R12,1057; reg:acon
     502/     7D8 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     503/     7DB : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     504/     7E3 : (MACRO)             	shl2I R10,8
     505/     813 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     506/     817 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     507/     81A : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     508/     826 :                     ;    timeout=0;
     509/     826 : (MACRO)             	ld2z R11
     510/     82A : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
     511/     837 : C0 08 E5            	lbr L50
     512/     83A :                     L49:
     513/     83A :                     ;    while (txsize < buflen) {
     514/     83A :                     ;      delay(1);
     515/     83A : (MACRO)             	ldaD R12,1; reg:acon
     516/     840 : (MACRO)             	Ccall _delay
     517/     843 :                     ;     txsize=SPI_Read(SO_TX_FSR);
     518/     843 : (MACRO)             	ldaD R12,1056; reg:acon
     519/     849 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     520/     84C : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     521/     850 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     522/     853 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     523/     857 :                     ;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     524/     857 : (MACRO)             	ldaD R12,1057; reg:acon
     525/     85D : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     526/     860 : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     527/     868 : (MACRO)             	shl2I R10,8
     528/     898 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     529/     89C : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     530/     89F : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     531/     8AB :                     ;     if (timeout++ > 1000) {
     532/     8AB : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
     533/     8B7 : (MACRO)             	cpy2 R10,R11
     534/     8BB : (MACRO)             	incm R10,1
     535/     8BC : (MACRO)             	st2 R10,'O',sp,(-6+20); ASGNU2(addr,reg)*
     536/     8C9 : (MACRO)             	jnU2I r11,1000,lbdf,L52 ;LEU2 1000 11 L52; LE is flipped test & subtraction
     537/     8D2 :                     ;       printf("TX Free Size Error!\n");
     538/     8D2 : (MACRO)             	ldaD R12,L54; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 10 - 6/21/2013 15:55:37


     539/     8D8 : (MACRO)             	Ccall _printf
     540/     8DB :                     ;       disconnect0();
     541/     8DB : (MACRO)             	Ccall _disconnect0
     542/     8DE :                     ;       return 0;
     543/     8DE : (MACRO)             	ld2z R15
     544/     8E2 : C0 0A 9E            	lbr L46
     545/     8E5 :                     L52:
     546/     8E5 :                     ;   }
     547/     8E5 :                     L50:
     548/     8E5 :                     ;    while (txsize < buflen) {
     549/     8E5 : (MACRO)             	jcU2 r1,r6,lbnf,L49; LT=lbnf i.e. subtract B from A and jump if borrow 
     550/     8F2 :                     ;   ptr = SPI_Read(S0_TX_WR);
     551/     8F2 : (MACRO)             	ldaD R12,1060; reg:acon
     552/     8F8 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     553/     8FB : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     554/     8FF : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     555/     902 : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
     556/     90F :                     ;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     557/     90F : (MACRO)             	ldaD R12,1061; reg:acon
     558/     915 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     559/     918 : (MACRO)             	ld2 R10,'O',sp,(-8+20); reg:INDIRU2(addr)
     560/     924 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     561/     92C : (MACRO)             	shl2I R10,8
     562/     95C : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     563/     960 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     564/     963 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     565/     96F : C0 09 AE            	lbr L56
     566/     972 :                     L55:
     567/     972 :                     ;    while(buflen) {
     568/     972 :                     ;      buflen--;
     569/     972 : (MACRO)             	decm R6,1
     570/     973 :                     ;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     571/     973 : (MACRO)             	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     572/     97B : (MACRO)             	ldA2 R11,'O',R11,(16384); reg:addr
     573/     983 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
     574/     990 :                     ;      SPI_Write(realaddr,*buf);
     575/     990 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
     576/     99C : (MACRO)             	ld1 R13,'O',R7,0
     577/     9A6 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     578/     9A9 : (MACRO)             	Ccall _SPI_Write
     579/     9AC :                     ;      offaddr++;
     580/     9AC : (MACRO)             	incm R0,1
     581/     9AD :                     ;      buf++;
     582/     9AD : (MACRO)             	incm R7,1
     583/     9AE :                     ;    }
     584/     9AE :                     L56:
     585/     9AE :                     ;    while(buflen) {
     586/     9AE : (MACRO)             	jnzU2 r6,L55; NE 0
     587/     9B6 :                     ;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     588/     9B6 : (MACRO)             	ldaD R12,1060; reg:acon
     589/     9BC : (MACRO)             	cpy2 RL10,R0
     590/     9C0 : (MACRO)             	zext4 RL10; CVUI4 jan 16
     591/     9C4 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     592/     9D0 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     593/     9E6 : (MACRO)             	shrI4I RL10,8
     594/     A56 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     595/     A5A : (MACRO)             	cpy1 R13,R11
     596/     A5C : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     597/     A5F : (MACRO)             	Ccall _SPI_Write
     598/     A62 :                     ;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 11 - 6/21/2013 15:55:37


     599/     A62 : (MACRO)             	ldaD R12,1061; reg:acon
     600/     A68 : (MACRO)             	alu2I R11,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     601/     A70 : (MACRO)             	cpy1 R13,R11
     602/     A72 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     603/     A75 : (MACRO)             	Ccall _SPI_Write
     604/     A78 :                     ;    SPI_Write(S0_CR,CR_SEND);
     605/     A78 : (MACRO)             	ldaD R12,1025; reg:acon
     606/     A7E : (MACRO)             	ldaD R13,32; reg:acon
     607/     A84 : (MACRO)             	Ccall _SPI_Write
     608/     A87 :                     L58:
     609/     A87 :                     ;    while(SPI_Read(S0_CR));
     610/     A87 :                     L59:
     611/     A87 : (MACRO)             	ldaD R12,1025; reg:acon
     612/     A8D : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     613/     A90 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     614/     A94 : (MACRO)             	jnzU1 r11,L58; NEI2(CVUI2(reg),con0)
     615/     A98 :                     ;    return 1;
     616/     A98 : (MACRO)             	ldaD R15,1; reg:acon
     617/     A9E :                     L46:
     618/     A9E : (MACRO)             	release 4; release room for outgoing arguments
     619/     AA2 : (MACRO)             	popr r7
     620/     AA6 : (MACRO)             	popr r6
     621/     AAA : (MACRO)             	popr r1
     622/     AAE : (MACRO)             	popr r0
     623/     AB2 : (MACRO)             	release 6; release room for local variables 
     624/     AB8 : (MACRO)             	Cretn
     625/     AB9 :                     _sendnak:
     626/     AB9 : (MACRO)             	reserve 4
     627/     ABD :                     ;void sendnak(){
     628/     ABD :                     ;	send0s((unsigned char *)"HTTP/1.1 404 Not Found\r\n\r\n"); 	// Now Send the HTTP Response
     629/     ABD : (MACRO)             	ldaD R12,L62; reg:acon
     630/     AC3 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     631/     AC6 :                     ;}
     632/     AC6 :                     L61:
     633/     AC6 : (MACRO)             	release 4
     634/     ACA : (MACRO)             	Cretn
     635/     ACB :                     L64:
     636/     ACB : 48                  	db 72
     637/     ACC : 54                  	db 84
     638/     ACD : 54                  	db 84
     639/     ACE : 50                  	db 80
     640/     ACF : 2F                  	db 47
     641/     AD0 : 31                  	db 49
     642/     AD1 : 2E                  	db 46
     643/     AD2 : 30                  	db 48
     644/     AD3 : 20                  	db 32
     645/     AD4 : 32                  	db 50
     646/     AD5 : 30                  	db 48
     647/     AD6 : 30                  	db 48
     648/     AD7 : 20                  	db 32
     649/     AD8 : 4F                  	db 79
     650/     AD9 : 4B                  	db 75
     651/     ADA : 0D                  	db 13
     652/     ADB : 0A                  	db 10
     653/     ADC : 0D                  	db 13
     654/     ADD : 0A                  	db 10
     655/     ADE : 00                  	db 0
     656/     ADF :                     _sendack:
     657/     ADF : (MACRO)             	reserve 6
     658/     AE5 :                     ;void sendack(){
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 12 - 6/21/2013 15:55:37


     659/     AE5 :                     ;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
     660/     AE5 : (MACRO)             	ldaD R12,L64; reg:acon
     661/     AEB : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     662/     AEE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     663/     AF2 : (MACRO)             	ldaD R12,L64; reg:acon
     664/     AF8 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     665/     AFC : (MACRO)             	Ccall _send0;CALLU2(ar)*
     666/     AFF : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     667/     B03 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     668/     B10 :                     ;}
     669/     B10 :                     L63:
     670/     B10 : (MACRO)             	release 6
     671/     B16 : (MACRO)             	Cretn
     672/     B17 :                     _send0s:
     673/     B17 : (MACRO)             	reserve 4
     674/     B1B : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     675/     B28 :                     ;int send0s(char* what){
     676/     B28 :                     ;	return send0((unsigned char *)what,strlen(what));
     677/     B28 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     678/     B34 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     679/     B37 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     680/     B3B : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     681/     B47 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     682/     B4B : (MACRO)             	Ccall _send0;CALLU2(ar)*
     683/     B4E : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     684/     B52 :                     L65:
     685/     B52 : (MACRO)             	release 4
     686/     B56 : (MACRO)             	Cretn
     687/     B57 :                     _sendip:
     688/     B57 : (MACRO)             	reserve 4
     689/     B5B :                     ;void sendip(){
     690/     B5B :                     ;	send0s("Last command from: ");
     691/     B5B : (MACRO)             	ldaD R12,L67; reg:acon
     692/     B61 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     693/     B64 :                     ;	send0s(itoa(cmdip[0],strbuf));
     694/     B64 : (MACRO)             	ld2 R12,'D',(_cmdip),0 ;reg:INDIRI2(addr)
     695/     B6E : (MACRO)             	ldaD R13,_strbuf; reg:acon
     696/     B74 : (MACRO)             	Ccall _itoa
     697/     B77 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     698/     B7B : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     699/     B7F : (MACRO)             	Ccall _send0s; CALLI2(ar)
     700/     B82 :                     ;	send0s(".");
     701/     B82 : (MACRO)             	ldaD R12,L68; reg:acon
     702/     B88 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     703/     B8B :                     ;	send0s(itoa(cmdip[1],strbuf));
     704/     B8B : (MACRO)             	ld2 R12,'D',(_cmdip+2),0 ;reg:INDIRI2(addr)
     705/     B95 : (MACRO)             	ldaD R13,_strbuf; reg:acon
     706/     B9B : (MACRO)             	Ccall _itoa
     707/     B9E : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     708/     BA2 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     709/     BA6 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     710/     BA9 :                     ;	send0s(".");
     711/     BA9 : (MACRO)             	ldaD R12,L68; reg:acon
     712/     BAF : (MACRO)             	Ccall _send0s; CALLI2(ar)
     713/     BB2 :                     ;	send0s(itoa(cmdip[2],strbuf));
     714/     BB2 : (MACRO)             	ld2 R12,'D',(_cmdip+4),0 ;reg:INDIRI2(addr)
     715/     BBC : (MACRO)             	ldaD R13,_strbuf; reg:acon
     716/     BC2 : (MACRO)             	Ccall _itoa
     717/     BC5 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     718/     BC9 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 13 - 6/21/2013 15:55:37


     719/     BCD : (MACRO)             	Ccall _send0s; CALLI2(ar)
     720/     BD0 :                     ;	send0s(".");
     721/     BD0 : (MACRO)             	ldaD R12,L68; reg:acon
     722/     BD6 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     723/     BD9 :                     ;	send0s(itoa(cmdip[3],strbuf));
     724/     BD9 : (MACRO)             	ld2 R12,'D',(_cmdip+6),0 ;reg:INDIRI2(addr)
     725/     BE3 : (MACRO)             	ldaD R13,_strbuf; reg:acon
     726/     BE9 : (MACRO)             	Ccall _itoa
     727/     BEC : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     728/     BF0 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     729/     BF4 : (MACRO)             	Ccall _send0s; CALLI2(ar)
     730/     BF7 :                     ;	send0s("<p>");
     731/     BF7 : (MACRO)             	ldaD R12,L72; reg:acon
     732/     BFD : (MACRO)             	Ccall _send0s; CALLI2(ar)
     733/     C00 :                     ;}
     734/     C00 :                     L66:
     735/     C00 : (MACRO)             	release 4
     736/     C04 : (MACRO)             	Cretn
     737/     C05 :                     L74:
     738/     C05 : 48                  	db 72
     739/     C06 : 54                  	db 84
     740/     C07 : 54                  	db 84
     741/     C08 : 50                  	db 80
     742/     C09 : 2F                  	db 47
     743/     C0A : 31                  	db 49
     744/     C0B : 2E                  	db 46
     745/     C0C : 30                  	db 48
     746/     C0D : 20                  	db 32
     747/     C0E : 32                  	db 50
     748/     C0F : 30                  	db 48
     749/     C10 : 30                  	db 48
     750/     C11 : 20                  	db 32
     751/     C12 : 4F                  	db 79
     752/     C13 : 4B                  	db 75
     753/     C14 : 0D                  	db 13
     754/     C15 : 0A                  	db 10
     755/     C16 : 43                  	db 67
     756/     C17 : 6F                  	db 111
     757/     C18 : 6E                  	db 110
     758/     C19 : 74                  	db 116
     759/     C1A : 65                  	db 101
     760/     C1B : 6E                  	db 110
     761/     C1C : 74                  	db 116
     762/     C1D : 2D                  	db 45
     763/     C1E : 54                  	db 84
     764/     C1F : 79                  	db 121
     765/     C20 : 70                  	db 112
     766/     C21 : 65                  	db 101
     767/     C22 : 3A                  	db 58
     768/     C23 : 20                  	db 32
     769/     C24 : 74                  	db 116
     770/     C25 : 65                  	db 101
     771/     C26 : 78                  	db 120
     772/     C27 : 74                  	db 116
     773/     C28 : 2F                  	db 47
     774/     C29 : 68                  	db 104
     775/     C2A : 74                  	db 116
     776/     C2B : 6D                  	db 109
     777/     C2C : 6C                  	db 108
     778/     C2D : 0D                  	db 13
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 14 - 6/21/2013 15:55:37


     779/     C2E : 0A                  	db 10
     780/     C2F : 0D                  	db 13
     781/     C30 : 0A                  	db 10
     782/     C31 : 3C                  	db 60
     783/     C32 : 68                  	db 104
     784/     C33 : 74                  	db 116
     785/     C34 : 6D                  	db 109
     786/     C35 : 6C                  	db 108
     787/     C36 : 3E                  	db 62
     788/     C37 : 3C                  	db 60
     789/     C38 : 62                  	db 98
     790/     C39 : 6F                  	db 111
     791/     C3A : 64                  	db 100
     792/     C3B : 79                  	db 121
     793/     C3C : 3E                  	db 62
     794/     C3D : 3C                  	db 60
     795/     C3E : 73                  	db 115
     796/     C3F : 70                  	db 112
     797/     C40 : 61                  	db 97
     798/     C41 : 6E                  	db 110
     799/     C42 : 20                  	db 32
     800/     C43 : 73                  	db 115
     801/     C44 : 74                  	db 116
     802/     C45 : 79                  	db 121
     803/     C46 : 6C                  	db 108
     804/     C47 : 65                  	db 101
     805/     C48 : 3D                  	db 61
     806/     C49 : 22                  	db 34
     807/     C4A : 63                  	db 99
     808/     C4B : 6F                  	db 111
     809/     C4C : 6C                  	db 108
     810/     C4D : 6F                  	db 111
     811/     C4E : 72                  	db 114
     812/     C4F : 3A                  	db 58
     813/     C50 : 23                  	db 35
     814/     C51 : 30                  	db 48
     815/     C52 : 30                  	db 48
     816/     C53 : 30                  	db 48
     817/     C54 : 30                  	db 48
     818/     C55 : 41                  	db 65
     819/     C56 : 30                  	db 48
     820/     C57 : 22                  	db 34
     821/     C58 : 3E                  	db 62
     822/     C59 : 0D                  	db 13
     823/     C5A : 0A                  	db 10
     824/     C5B : 3C                  	db 60
     825/     C5C : 68                  	db 104
     826/     C5D : 31                  	db 49
     827/     C5E : 3E                  	db 62
     828/     C5F : 3C                  	db 60
     829/     C60 : 63                  	db 99
     830/     C61 : 65                  	db 101
     831/     C62 : 6E                  	db 110
     832/     C63 : 74                  	db 116
     833/     C64 : 65                  	db 101
     834/     C65 : 72                  	db 114
     835/     C66 : 3E                  	db 62
     836/     C67 : 4F                  	db 79
     837/     C68 : 6C                  	db 108
     838/     C69 : 64                  	db 100
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 15 - 6/21/2013 15:55:37


     839/     C6A : 75                  	db 117
     840/     C6B : 69                  	db 105
     841/     C6C : 6E                  	db 110
     842/     C6D : 6F                  	db 111
     843/     C6E : 20                  	db 32
     844/     C6F : 31                  	db 49
     845/     C70 : 38                  	db 56
     846/     C71 : 30                  	db 48
     847/     C72 : 32                  	db 50
     848/     C73 : 20                  	db 32
     849/     C74 : 57                  	db 87
     850/     C75 : 65                  	db 101
     851/     C76 : 62                  	db 98
     852/     C77 : 20                  	db 32
     853/     C78 : 53                  	db 83
     854/     C79 : 65                  	db 101
     855/     C7A : 72                  	db 114
     856/     C7B : 76                  	db 118
     857/     C7C : 65                  	db 101
     858/     C7D : 72                  	db 114
     859/     C7E : 20                  	db 32
     860/     C7F : 56                  	db 86
     861/     C80 : 34                  	db 52
     862/     C81 : 2E                  	db 46
     863/     C82 : 32                  	db 50
     864/     C83 : 3C                  	db 60
     865/     C84 : 2F                  	db 47
     866/     C85 : 63                  	db 99
     867/     C86 : 65                  	db 101
     868/     C87 : 6E                  	db 110
     869/     C88 : 74                  	db 116
     870/     C89 : 65                  	db 101
     871/     C8A : 72                  	db 114
     872/     C8B : 3E                  	db 62
     873/     C8C : 3C                  	db 60
     874/     C8D : 2F                  	db 47
     875/     C8E : 68                  	db 104
     876/     C8F : 31                  	db 49
     877/     C90 : 3E                  	db 62
     878/     C91 : 0D                  	db 13
     879/     C92 : 0A                  	db 10
     880/     C93 : 00                  	db 0
     881/     C94 :                     L75:
     882/     C94 : 3C                  	db 60
     883/     C95 : 70                  	db 112
     884/     C96 : 3E                  	db 62
     885/     C97 : 3C                  	db 60
     886/     C98 : 66                  	db 102
     887/     C99 : 6F                  	db 111
     888/     C9A : 72                  	db 114
     889/     C9B : 6D                  	db 109
     890/     C9C : 20                  	db 32
     891/     C9D : 6D                  	db 109
     892/     C9E : 65                  	db 101
     893/     C9F : 74                  	db 116
     894/     CA0 : 68                  	db 104
     895/     CA1 : 6F                  	db 111
     896/     CA2 : 64                  	db 100
     897/     CA3 : 3D                  	db 61
     898/     CA4 : 22                  	db 34
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 16 - 6/21/2013 15:55:37


     899/     CA5 : 50                  	db 80
     900/     CA6 : 4F                  	db 79
     901/     CA7 : 53                  	db 83
     902/     CA8 : 54                  	db 84
     903/     CA9 : 22                  	db 34
     904/     CAA : 3E                  	db 62
     905/     CAB : 0D                  	db 13
     906/     CAC : 0A                  	db 10
     907/     CAD : 3C                  	db 60
     908/     CAE : 69                  	db 105
     909/     CAF : 6E                  	db 110
     910/     CB0 : 70                  	db 112
     911/     CB1 : 75                  	db 117
     912/     CB2 : 74                  	db 116
     913/     CB3 : 20                  	db 32
     914/     CB4 : 74                  	db 116
     915/     CB5 : 79                  	db 121
     916/     CB6 : 70                  	db 112
     917/     CB7 : 65                  	db 101
     918/     CB8 : 3D                  	db 61
     919/     CB9 : 22                  	db 34
     920/     CBA : 73                  	db 115
     921/     CBB : 75                  	db 117
     922/     CBC : 62                  	db 98
     923/     CBD : 6D                  	db 109
     924/     CBE : 69                  	db 105
     925/     CBF : 74                  	db 116
     926/     CC0 : 22                  	db 34
     927/     CC1 : 20                  	db 32
     928/     CC2 : 76                  	db 118
     929/     CC3 : 61                  	db 97
     930/     CC4 : 6C                  	db 108
     931/     CC5 : 75                  	db 117
     932/     CC6 : 65                  	db 101
     933/     CC7 : 3D                  	db 61
     934/     CC8 : 22                  	db 34
     935/     CC9 : 54                  	db 84
     936/     CCA : 6F                  	db 111
     937/     CCB : 67                  	db 103
     938/     CCC : 67                  	db 103
     939/     CCD : 6C                  	db 108
     940/     CCE : 65                  	db 101
     941/     CCF : 20                  	db 32
     942/     CD0 : 4C                  	db 76
     943/     CD1 : 45                  	db 69
     944/     CD2 : 44                  	db 68
     945/     CD3 : 22                  	db 34
     946/     CD4 : 3E                  	db 62
     947/     CD5 : 0D                  	db 13
     948/     CD6 : 0A                  	db 10
     949/     CD7 : 3C                  	db 60
     950/     CD8 : 2F                  	db 47
     951/     CD9 : 66                  	db 102
     952/     CDA : 6F                  	db 111
     953/     CDB : 72                  	db 114
     954/     CDC : 6D                  	db 109
     955/     CDD : 3E                  	db 62
     956/     CDE : 00                  	db 0
     957/     CDF :                     L76:
     958/     CDF : 3C                  	db 60
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 17 - 6/21/2013 15:55:37


     959/     CE0 : 70                  	db 112
     960/     CE1 : 3E                  	db 62
     961/     CE2 : 3C                  	db 60
     962/     CE3 : 66                  	db 102
     963/     CE4 : 6F                  	db 111
     964/     CE5 : 72                  	db 114
     965/     CE6 : 6D                  	db 109
     966/     CE7 : 20                  	db 32
     967/     CE8 : 6D                  	db 109
     968/     CE9 : 65                  	db 101
     969/     CEA : 74                  	db 116
     970/     CEB : 68                  	db 104
     971/     CEC : 6F                  	db 111
     972/     CED : 64                  	db 100
     973/     CEE : 3D                  	db 61
     974/     CEF : 22                  	db 34
     975/     CF0 : 47                  	db 71
     976/     CF1 : 45                  	db 69
     977/     CF2 : 54                  	db 84
     978/     CF3 : 22                  	db 34
     979/     CF4 : 3E                  	db 62
     980/     CF5 : 0D                  	db 13
     981/     CF6 : 0A                  	db 10
     982/     CF7 : 3C                  	db 60
     983/     CF8 : 69                  	db 105
     984/     CF9 : 6E                  	db 110
     985/     CFA : 70                  	db 112
     986/     CFB : 75                  	db 117
     987/     CFC : 74                  	db 116
     988/     CFD : 20                  	db 32
     989/     CFE : 74                  	db 116
     990/     CFF : 79                  	db 121
     991/     D00 : 70                  	db 112
     992/     D01 : 65                  	db 101
     993/     D02 : 3D                  	db 61
     994/     D03 : 22                  	db 34
     995/     D04 : 73                  	db 115
     996/     D05 : 75                  	db 117
     997/     D06 : 62                  	db 98
     998/     D07 : 6D                  	db 109
     999/     D08 : 69                  	db 105
    1000/     D09 : 74                  	db 116
    1001/     D0A : 22                  	db 34
    1002/     D0B : 20                  	db 32
    1003/     D0C : 76                  	db 118
    1004/     D0D : 61                  	db 97
    1005/     D0E : 6C                  	db 108
    1006/     D0F : 75                  	db 117
    1007/     D10 : 65                  	db 101
    1008/     D11 : 3D                  	db 61
    1009/     D12 : 22                  	db 34
    1010/     D13 : 4C                  	db 76
    1011/     D14 : 45                  	db 69
    1012/     D15 : 44                  	db 68
    1013/     D16 : 20                  	db 32
    1014/     D17 : 53                  	db 83
    1015/     D18 : 74                  	db 116
    1016/     D19 : 61                  	db 97
    1017/     D1A : 74                  	db 116
    1018/     D1B : 75                  	db 117
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 18 - 6/21/2013 15:55:37


    1019/     D1C : 73                  	db 115
    1020/     D1D : 22                  	db 34
    1021/     D1E : 3E                  	db 62
    1022/     D1F : 0D                  	db 13
    1023/     D20 : 0A                  	db 10
    1024/     D21 : 3C                  	db 60
    1025/     D22 : 2F                  	db 47
    1026/     D23 : 66                  	db 102
    1027/     D24 : 6F                  	db 111
    1028/     D25 : 72                  	db 114
    1029/     D26 : 6D                  	db 109
    1030/     D27 : 3E                  	db 62
    1031/     D28 : 00                  	db 0
    1032/     D29 :                     L77:
    1033/     D29 : 3C                  	db 60
    1034/     D2A : 2F                  	db 47
    1035/     D2B : 62                  	db 98
    1036/     D2C : 6F                  	db 111
    1037/     D2D : 64                  	db 100
    1038/     D2E : 79                  	db 121
    1039/     D2F : 3E                  	db 62
    1040/     D30 : 3C                  	db 60
    1041/     D31 : 2F                  	db 47
    1042/     D32 : 68                  	db 104
    1043/     D33 : 74                  	db 116
    1044/     D34 : 6D                  	db 109
    1045/     D35 : 6C                  	db 108
    1046/     D36 : 3E                  	db 62
    1047/     D37 : 0D                  	db 13
    1048/     D38 : 0A                  	db 10
    1049/     D39 : 0D                  	db 13
    1050/     D3A : 0A                  	db 10
    1051/     D3B : 00                  	db 0
    1052/     D3C :                     _sendform:
    1053/     D3C : (MACRO)             	pushr r7
    1054/     D41 : (MACRO)             	reserve 4; save room for outgoing arguments
    1055/     D45 :                     ;void sendform(){
    1056/     D45 :                     ;	pagehits+=1;
    1057/     D45 : (MACRO)             	ld2 R11,'D',(_pagehits),0 ;reg:INDIRI2(addr)
    1058/     D4F : (MACRO)             	incm R11,1
    1059/     D50 : (MACRO)             	st2 R11,'D',(_pagehits),0; ASGNI2(addr,reg)*;
    1060/     D5B :                     ;	sendrc=send0s(hdr); 	// Now Send the HTTP Response first part
    1061/     D5B : (MACRO)             	ldaD R12,L74; reg:acon
    1062/     D61 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1063/     D64 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1064/     D68 :                     ;	send0s("Pages Served: "); send0s(itoa(pagehits,strbuf)); send0s("<p>");
    1065/     D68 : (MACRO)             	ldaD R12,L78; reg:acon
    1066/     D6E : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1067/     D71 : (MACRO)             	ld2 R12,'D',(_pagehits),0 ;reg:INDIRI2(addr)
    1068/     D7B : (MACRO)             	ldaD R13,_strbuf; reg:acon
    1069/     D81 : (MACRO)             	Ccall _itoa
    1070/     D84 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1071/     D88 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1072/     D8C : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1073/     D8F : (MACRO)             	ldaD R12,L72; reg:acon
    1074/     D95 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1075/     D98 :                     ;	if (cmdip[0]!=0)
    1076/     D98 : (MACRO)             	ld2 R11,'D',(_cmdip),0 ;reg:INDIRI2(addr)
    1077/     DA2 : (MACRO)             	jzU2 r11,L79; EQ 0
    1078/     DAA :                     ;		sendip();
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 19 - 6/21/2013 15:55:37


    1079/     DAA : (MACRO)             	Ccall _sendip
    1080/     DAD :                     L79:
    1081/     DAD :                     ;	sendrc=send0s("LED is ");
    1082/     DAD : (MACRO)             	ldaD R12,L81; reg:acon
    1083/     DB3 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1084/     DB6 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1085/     DBA :                     ;	if (ledmode==1)
    1086/     DBA : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1087/     DC4 : (MACRO)             	jneU2I r11,1,L82; NE
    1088/     DD0 :                     ;		send0s("ON\r\n");
    1089/     DD0 : (MACRO)             	ldaD R12,L84; reg:acon
    1090/     DD6 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1091/     DD9 : C0 0D E5            	lbr L83
    1092/     DDC :                     L82:
    1093/     DDC :                     ;		send0s("OFF\r\n");
    1094/     DDC : (MACRO)             	ldaD R12,L85; reg:acon
    1095/     DE2 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1096/     DE5 :                     L83:
    1097/     DE5 :                     ;	sendrc=send0s(postform); 	// Now Send the "POST" form
    1098/     DE5 : (MACRO)             	ldaD R12,L75; reg:acon
    1099/     DEB : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1100/     DEE : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1101/     DF2 :                     ;	sendrc=send0s(getform); 	// Now Send the "GET" form
    1102/     DF2 : (MACRO)             	ldaD R12,L76; reg:acon
    1103/     DF8 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1104/     DFB : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1105/     DFF :                     ;	sendrc=send0s(trlr); 	// Now Send the rest of the page
    1106/     DFF : (MACRO)             	ldaD R12,L77; reg:acon
    1107/     E05 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1108/     E08 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1109/     E0C :                     ;}
    1110/     E0C :                     L73:
    1111/     E0C : (MACRO)             	release 4; release room for outgoing arguments
    1112/     E10 : (MACRO)             	popr r7
    1113/     E14 : (MACRO)             	Cretn
    1114/     E15 :                     _strindex:
    1115/     E15 : (MACRO)             	pushr r0
    1116/     E1A : (MACRO)             	pushr r1
    1117/     E1F : (MACRO)             	pushr r6
    1118/     E24 : (MACRO)             	pushr r7
    1119/     E29 : (MACRO)             	reserve 6; save room for outgoing arguments
    1120/     E2F : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1121/     E33 : (MACRO)             	cpy2 r6,r13; function(2055) 1
    1122/     E37 :                     ;{
    1123/     E37 :                     ;  n=strlen(t);
    1124/     E37 : (MACRO)             	cpy2 R12,R6 ;LOADP2(reg)
    1125/     E3B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1126/     E3E : (MACRO)             	cpy2 R0,R15 ;LOADU2(reg)*
    1127/     E42 :                     ;  for(i=0;*(s+i); i++) {
    1128/     E42 : (MACRO)             	ld2z R1
    1129/     E46 : C0 0E 79            	lbr L90
    1130/     E49 :                     L87:
    1131/     E49 :                     ;    if (strncmp(s+i,t,n) == 0)
    1132/     E49 : (MACRO)             	alu2 R12,R1,R7,add,adc
    1133/     E55 : (MACRO)             	cpy2 R13,R6 ;LOADP2(reg)
    1134/     E59 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1135/     E66 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1136/     E69 : (MACRO)             	jnzU2 r15,L91; NE 0
    1137/     E71 :                     ;      return i;
    1138/     E71 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 20 - 6/21/2013 15:55:37


    1139/     E75 : C0 0E 91            	lbr L86
    1140/     E78 :                     L91:
    1141/     E78 :                     ;  }
    1142/     E78 :                     L88:
    1143/     E78 :                     ;  for(i=0;*(s+i); i++) {
    1144/     E78 : (MACRO)             	incm R1,1
    1145/     E79 :                     L90:
    1146/     E79 : (MACRO)             	alu2 R11,R1,R7,add,adc
    1147/     E85 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1148/     E87 : (MACRO)             	jnzU1 r11,L87; NEI2(CVUI2(reg),con0)
    1149/     E8B :                     ;  return -1;
    1150/     E8B : (MACRO)             	ldaD R15,-1; reg:acon
    1151/     E91 :                     L86:
    1152/     E91 : (MACRO)             	release 6; release room for outgoing arguments
    1153/     E97 : (MACRO)             	popr r7
    1154/     E9B : (MACRO)             	popr r6
    1155/     E9F : (MACRO)             	popr r1
    1156/     EA3 : (MACRO)             	popr r0
    1157/     EA7 : (MACRO)             	Cretn
    1158/     EA8 :                     _handlepost:
    1159/     EA8 : (MACRO)             	reserve 4
    1160/     EAC :                     ;void handlepost(){
    1161/     EAC :                     ;	if (ledmode==1){
    1162/     EAC : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1163/     EB6 : (MACRO)             	jneU2I r11,1,L94; NE
    1164/     EC2 :                     ;		ledmode=0;
    1165/     EC2 : (MACRO)             	ld2z R11
    1166/     EC6 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1167/     ED1 :                     ;		digitalWrite(0,LOW);
    1168/     ED1 : (MACRO)             	ld2z R11
    1169/     ED5 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1170/     ED9 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1171/     EDD : (MACRO)             	Ccall _digitalWrite
    1172/     EE0 :                     ;	} else {
    1173/     EE0 : C0 0F 01            	lbr L95
    1174/     EE3 :                     L94:
    1175/     EE3 :                     ;		ledmode=1;
    1176/     EE3 : (MACRO)             	ldaD R11,1; reg:acon
    1177/     EE9 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1178/     EF4 :                     ;		digitalWrite(0,HIGH);
    1179/     EF4 : (MACRO)             	ld2z R12
    1180/     EF8 : (MACRO)             	ldaD R13,1; reg:acon
    1181/     EFE : (MACRO)             	Ccall _digitalWrite
    1182/     F01 :                     ;	}
    1183/     F01 :                     L95:
    1184/     F01 :                     ;	cmdip[0]=SPI_Read(S0_DIPR + 0);cmdip[1]=SPI_Read(S0_DIPR + 1);cmdip[2]=SPI_Read(S0_DIPR + 2);cmdip[3]=SPI_Read(S0_DIPR + 3);
    1185/     F01 : (MACRO)             	ldaD R12,1036; reg:acon
    1186/     F07 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1187/     F0A : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1188/     F0E : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1189/     F11 : (MACRO)             	st2 R11,'D',(_cmdip),0; ASGNI2(addr,reg)*;
    1190/     F1C : (MACRO)             	ldaD R12,1037; reg:acon
    1191/     F22 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1192/     F25 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1193/     F29 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1194/     F2C : (MACRO)             	st2 R11,'D',(_cmdip+2),0; ASGNI2(addr,reg)*;
    1195/     F37 : (MACRO)             	ldaD R12,1038; reg:acon
    1196/     F3D : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1197/     F40 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1198/     F44 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 21 - 6/21/2013 15:55:37


    1199/     F47 : (MACRO)             	st2 R11,'D',(_cmdip+4),0; ASGNI2(addr,reg)*;
    1200/     F52 : (MACRO)             	ldaD R12,1039; reg:acon
    1201/     F58 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1202/     F5B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1203/     F5F : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1204/     F62 : (MACRO)             	st2 R11,'D',(_cmdip+6),0; ASGNI2(addr,reg)*;
    1205/     F6D :                     ;	sendform();
    1206/     F6D : (MACRO)             	Ccall _sendform
    1207/     F70 :                     ;}
    1208/     F70 :                     L93:
    1209/     F70 : (MACRO)             	release 4
    1210/     F74 : (MACRO)             	Cretn
    1211/     F75 :                     _handlesession:
    1212/     F75 : (MACRO)             	pushr r6
    1213/     F7A : (MACRO)             	pushr r7
    1214/     F7F : (MACRO)             	reserve 6; save room for outgoing arguments
    1215/     F85 :                     ;void handlesession(){	//handle a session once it's established
    1216/     F85 :                     ;	rsize=recv_size();
    1217/     F85 : (MACRO)             	Ccall _recv_size;CALLU2(ar)*
    1218/     F88 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1219/     F8C :                     ;	if (rsize>0){
    1220/     F8C : (MACRO)             	jzU2 r7,L100; EQ 0
    1221/     F94 :                     ;		if (recv0(buf,min(12,rsize))>0){
    1222/     F94 : (MACRO)             	ldaD R12,_buf; reg:acon
    1223/     F9A : (MACRO)             	ldaD R11,12; reg:acon
    1224/     FA0 : (MACRO)             	jcU2 r11,r7,lbdf,L105; GE is flipped test from LT
    1225/     FAD : (MACRO)             	ldaD R6,12; reg:acon
    1226/     FB3 : C0 0F BA            	lbr L106
    1227/     FB6 :                     L105:
    1228/     FB6 : (MACRO)             	cpy2 R6,R7 ;LOADU2(reg)*
    1229/     FBA :                     L106:
    1230/     FBA : (MACRO)             	cpy2 R13,R6 ;LOADU2(reg)*
    1231/     FBE : (MACRO)             	Ccall _recv0;CALLU2(ar)*
    1232/     FC1 : (MACRO)             	jzU2 r15,L102; EQ 0
    1233/     FC9 :                     ;  			if (strncmp((char *)buf,"POST /",6)==0)
    1234/     FC9 : (MACRO)             	ldaD R12,_buf; reg:acon
    1235/     FCF : (MACRO)             	ldaD R13,L109; reg:acon
    1236/     FD5 : (MACRO)             	ldaD R11,6; reg:acon
    1237/     FDB : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1238/     FE8 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1239/     FEB : (MACRO)             	jnzU2 r15,L107; NE 0
    1240/     FF3 :                     ;  				handlepost(); //handle a button press
    1241/     FF3 : (MACRO)             	Ccall _handlepost
    1242/     FF6 : C0 10 5F            	lbr L108
    1243/     FF9 :                     L107:
    1244/     FF9 :                     ;			else if (strncmp((char *)buf,"GET /favicon",12)==0)
    1245/     FF9 : (MACRO)             	ldaD R12,_buf; reg:acon
    1246/     FFF : (MACRO)             	ldaD R13,L112; reg:acon
    1247/    1005 : (MACRO)             	ldaD R11,12; reg:acon
    1248/    100B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1249/    1018 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1250/    101B : (MACRO)             	jnzU2 r15,L110; NE 0
    1251/    1023 :                     ;  				sendnak(); //no favicon here
    1252/    1023 : (MACRO)             	Ccall _sendnak
    1253/    1026 : C0 10 5F            	lbr L111
    1254/    1029 :                     L110:
    1255/    1029 :                     ;  			else if (strncmp((char *)buf,"GET /",5)>=0)
    1256/    1029 : (MACRO)             	ldaD R12,_buf; reg:acon
    1257/    102F : (MACRO)             	ldaD R13,L115; reg:acon
    1258/    1035 : (MACRO)             	ldaD R11,5; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 22 - 6/21/2013 15:55:37


    1259/    103B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1260/    1048 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1261/    104B : (MACRO)             	jcI2I r15,0,lbnf,L113  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1262/    105C :                     ;  				sendform(); //send the form
    1263/    105C : (MACRO)             	Ccall _sendform
    1264/    105F :                     L113:
    1265/    105F :                     L111:
    1266/    105F :                     L108:
    1267/    105F :                     ;  			flush(rsize);	//get rid of the received data
    1268/    105F : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1269/    1063 : (MACRO)             	Ccall _flush
    1270/    1066 :                     ;			disconnect0();	//in any case, we're done here
    1271/    1066 : (MACRO)             	Ccall _disconnect0
    1272/    1069 :                     ;		}
    1273/    1069 :                     L102:
    1274/    1069 :                     ;	}
    1275/    1069 :                     L100:
    1276/    1069 :                     ;}
    1277/    1069 :                     L99:
    1278/    1069 : (MACRO)             	release 6; release room for outgoing arguments
    1279/    106F : (MACRO)             	popr r7
    1280/    1073 : (MACRO)             	popr r6
    1281/    1077 : (MACRO)             	Cretn
    1282/    1078 :                     _main: ;copt is peeping you too now!
    1283/    1078 : (MACRO)             	pushr r7
    1284/    107D : (MACRO)             	reserve 4; save room for outgoing arguments
    1285/    1081 :                     ;void main(void){
    1286/    1081 :                     ;	delay(100);
    1287/    1081 : (MACRO)             	ldaD R12,100; reg:acon
    1288/    1087 : (MACRO)             	Ccall _delay
    1289/    108A :                     ;	printf("\nOlduino Web Server v4.2\n");
    1290/    108A : (MACRO)             	ldaD R12,L117; reg:acon
    1291/    1090 : (MACRO)             	Ccall _printf
    1292/    1093 :                     ;    W5100_Init(); //initialize the wiznet chip
    1293/    1093 : (MACRO)             	Ccall _W5100_Init
    1294/    1096 : C0 11 33            	lbr L119
    1295/    1099 :                     L118:
    1296/    1099 :                     ;	while(1){  // Loop forever
    1297/    1099 :                     ;		socket0status=SPI_Read(S0_SR);
    1298/    1099 : (MACRO)             	ldaD R12,1027; reg:acon
    1299/    109F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1300/    10A2 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1301/    10A6 : (MACRO)             	cpy1 R7,R11
    1302/    10A8 : (MACRO)             	zExt R7 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1303/    10AB :                     ;		switch (socket0status){
    1304/    10AB : (MACRO)             	ld2z R11
    1305/    10AF : (MACRO)             	jzU2 r7,L123; EQ 0
    1306/    10B7 : (MACRO)             	jcI2 r7,r11,lbnf,L121; LT=lbnf i.e. subtract B from A and jump if borrow 
    1307/    10CB :                     L126:
    1308/    10CB : (MACRO)             	jcI2I r7,23,lbnf,L121  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1309/    10DC : (MACRO)             	jnI2I r7,29,lbnf,L121; GT reverse  the subtraction
    1310/    10ED : (MACRO)             	cpy2 R11,R7
    1311/    10F1 : (MACRO)             	shl2I R11,1
    1312/    10F7 : (MACRO)             	ld2 R11,'O',R11,(L127-46);reg:  INDIRP2(addr)
    1313/    1103 : (MACRO)             	jumpv r11; JUMPV(reg)
    1314/    110D :                     L127:
    1315/    110D : 11 21               	dw L124
    1316/    110F : 11 27               	dw L125
    1317/    1111 : 11 2A               	dw L121
    1318/    1113 : 11 27               	dw L125
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 23 - 6/21/2013 15:55:37


    1319/    1115 : 11 27               	dw L125
    1320/    1117 : 11 27               	dw L125
    1321/    1119 : 11 27               	dw L125
    1322/    111B :                     L123:
    1323/    111B :                     ;				socket0_init();	//initialize socket 0
    1324/    111B : (MACRO)             	Ccall _socket0_init
    1325/    111E :                     ;				break;
    1326/    111E : C0 11 2A            	lbr L122
    1327/    1121 :                     L124:
    1328/    1121 :                     ;				handlesession();
    1329/    1121 : (MACRO)             	Ccall _handlesession
    1330/    1124 :                     ;				break;
    1331/    1124 : C0 11 2A            	lbr L122
    1332/    1127 :                     L125:
    1333/    1127 :                     ;				close0();
    1334/    1127 : (MACRO)             	Ccall _close0
    1335/    112A :                     ;				break;
    1336/    112A :                     L121:
    1337/    112A :                     L122:
    1338/    112A :                     ;		delay(100);
    1339/    112A : (MACRO)             	ldaD R12,100; reg:acon
    1340/    1130 : (MACRO)             	Ccall _delay
    1341/    1133 :                     ;	}
    1342/    1133 :                     L119:
    1343/    1133 :                     ;	while(1){  // Loop forever
    1344/    1133 : C0 10 99            	lbr L118
    1345/    1136 :                     ;}
    1346/    1136 :                     L116:
    1347/    1136 : (MACRO)             	release 4; release room for outgoing arguments
    1348/    113A : (MACRO)             	popr r7
    1349/    113E : (MACRO)             	Cretn
    1350/    113F :                     _delay:
    1351/    113F : (MACRO)             	pushr r6
    1352/    1144 : (MACRO)             	pushr r7
    1353/    1149 : (MACRO)             	reserve 4; save room for outgoing arguments
    1354/    114D : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1355/    1151 :                     ;void delay(unsigned int howlong){
    1356/    1151 :                     ;	for (i=1;i!=howlong;i++){
    1357/    1151 : (MACRO)             	ldaD R6,1; reg:acon
    1358/    1157 : C0 11 5E            	lbr L133
    1359/    115A :                     L130:
    1360/    115A :                     ;		oneMs();
    1361/    115A : (MACRO)             	Ccall _oneMs; CALLI2(ar)
    1362/    115D :                     ;	}
    1363/    115D :                     L131:
    1364/    115D :                     ;	for (i=1;i!=howlong;i++){
    1365/    115D : (MACRO)             	incm R6,1
    1366/    115E :                     L133:
    1367/    115E : (MACRO)             	jneU2 r6,r7,L130; NE
    1368/    1170 :                     ;}
    1369/    1170 :                     L129:
    1370/    1170 : (MACRO)             	release 4; release room for outgoing arguments
    1371/    1174 : (MACRO)             	popr r7
    1372/    1178 : (MACRO)             	popr r6
    1373/    117C : (MACRO)             	Cretn
    1374/    117D :                     _olduinoincluder:
    1375/    117D :                     ;void olduinoincluder(){
    1376/    117D :                     ;	asm("\tinclude olduino.inc\n");
    1377/    117D :                     	include olduino.inc
(1)    1/    117D :                     ;Feb 8 2013, first version of assembler routines for olduino support	
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(olduino.inc) - page 24 - 6/21/2013 15:55:37


(1)    2/    117D :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/    117D :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    117D :                     	align 64	;needed to make sure all on same page
(1)    5/    1180 :                     _digitalWrite:
(1)    6/    1180 : 8C                  	glo regArg1	;get the bit number
(1)    7/    1181 : FC 9F               	adi $$bvtable&255	;add the table offset
(1)    8/    1183 : AE                  	plo memaddr
(1)    9/    1184 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    1185 : BE                  	phi memaddr	
(1)   11/    1186 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    1187 : A8                  	plo rt1		;save it in a temp
(1)   13/    1188 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/    118E : EE                  	sex memaddr	;prepare to change it
(1)   15/    118F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    1190 : 32 97               	bz $$setbitoff
(1)   17/    1192 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    1192 : 88                  	glo rt1		;get the bit value back
(1)   19/    1193 : F1                  	or		;apply it
(1)   20/    1194 : 5E                  	str memaddr	;and save it
(1)   21/    1195 : 30 9C               	br $$outit	;go fnish up
(1)   22/    1197 :                     $$setbitoff:
(1)   23/    1197 : 88                  	glo rt1		;get the bit pattern
(1)   24/    1198 : FB FF               	xri 0xff	;reverse it
(1)   25/    119A : F2                  	and		;combine it with the existing pin value
(1)   26/    119B : 5E                  	str memaddr	;and save it
(1)   27/    119C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    119C :                     $$outit:
(1)   29/    119C : 64                  	out 4		;X was already set to memaddr
(1)   30/    119D : E2                  	sex sp		;reset X
(1)   31/    119E : (MACRO)             	cretn
(1)   32/    119F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    11A7 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    11A7 :                     	align 8	;protect jump boundary
(1)   35/    11A8 :                     _digitalRead:
(1)   36/    11A8 : F8 00               	ldi 0		;default is false
(1)   37/    11AA : AF                  	plo R15
(1)   38/    11AB : BF                  	phi R15
(1)   39/    11AC : 36 AF               	b3 +		;i have to reverse the sense of the external line
(1)   40/    11AE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    11AF : (MACRO)             +	cretn
(1)   42/    11B0 :                     
    1378/    11B0 :                     ;}
    1379/    11B0 :                     L134:
    1380/    11B0 : (MACRO)             	Cretn
    1381/    11B1 :                     _strncmp:
    1382/    11B1 : (MACRO)             	pushr r6
    1383/    11B6 : (MACRO)             	pushr r7
    1384/    11BB : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1385/    11C7 :                     ;{
    1386/    11C7 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1387/    11C7 : C0 12 4A            	lbr L140
    1388/    11CA :                     L137:
    1389/    11CA :                     ;	if (*s1 != *s2)
    1390/    11CA : (MACRO)             	ld1 R11,'O',R12,0
    1391/    11D4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1392/    11D7 : (MACRO)             	ld1 R10,'O',R13,0
    1393/    11E1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1394/    11E4 : (MACRO)             	jeqI2 r11,r10,L141; EQI2(reg,reg)
    1395/    11F6 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 25 - 6/21/2013 15:55:37


    1396/    11F6 : (MACRO)             	ld1 R11,'O',R12,0
    1397/    1200 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1398/    1203 : (MACRO)             	ld1 R10,'O',R13,0
    1399/    120D : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1400/    1210 : (MACRO)             	jcI2 r11,r10,lbdf,L144; GE is flipped test from LT
    1401/    1224 : (MACRO)             	ldaD R6,-1; reg:acon
    1402/    122A : C0 12 33            	lbr L145
    1403/    122D :                     L144:
    1404/    122D : (MACRO)             	ldaD R6,1; reg:acon
    1405/    1233 :                     L145:
    1406/    1233 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1407/    1237 : C0 12 56            	lbr L136
    1408/    123A :                     L141:
    1409/    123A :                     ;	else if (*s1 == '\0')
    1410/    123A : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1411/    123C : (MACRO)             	jnzU1 r11,L146; NEI2(CVUI2(reg),con0)
    1412/    1240 :                     ;	    return 0;
    1413/    1240 : (MACRO)             	ld2z R15
    1414/    1244 : C0 12 56            	lbr L136
    1415/    1247 :                     L146:
    1416/    1247 :                     L138:
    1417/    1247 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1418/    1247 : (MACRO)             	incm R12,1
    1419/    1248 : (MACRO)             	incm R13,1
    1420/    1249 : (MACRO)             	decm R7,1
    1421/    124A :                     L140:
    1422/    124A : (MACRO)             	jnzU2 r7,L137; NE 0
    1423/    1252 :                     ;    return 0;
    1424/    1252 : (MACRO)             	ld2z R15
    1425/    1256 :                     L136:
    1426/    1256 : (MACRO)             	popr r7
    1427/    125A : (MACRO)             	popr r6
    1428/    125E : (MACRO)             	Cretn
    1429/    125F :                     _strcpy:
    1430/    125F : (MACRO)             	reserve 2
    1431/    1261 :                     ;{
    1432/    1261 :                     ;	char *save = to;
    1433/    1261 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    1434/    126E :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    1435/    126E : C0 12 73            	lbr L152
    1436/    1271 :                     L149:
    1437/    1271 :                     L150:
    1438/    1271 : (MACRO)             	incm R13,1
    1439/    1272 : (MACRO)             	incm R12,1
    1440/    1273 :                     L152:
    1441/    1273 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    1442/    1275 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    1443/    1277 : (MACRO)             	jnzU1 r11,L149; NEI2(CVUI2(reg),con0)
    1444/    127B :                     ;	return(save);
    1445/    127B : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    1446/    1287 :                     L148:
    1447/    1287 : (MACRO)             	release 2
    1448/    1289 : (MACRO)             	Cretn
    1449/    128A :                     _strlen:
    1450/    128A : (MACRO)             	pushr r7
    1451/    128F :                     ;{
    1452/    128F :                     ;	unsigned int slen = 0 ;
    1453/    128F : (MACRO)             	ld2z R7
    1454/    1293 : C0 12 98            	lbr L155
    1455/    1296 :                     L154:
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 26 - 6/21/2013 15:55:37


    1456/    1296 :                     ;	while (*str != 0) {
    1457/    1296 :                     ;      slen++ ;
    1458/    1296 : (MACRO)             	incm R7,1
    1459/    1297 :                     ;      str++ ;
    1460/    1297 : (MACRO)             	incm R12,1
    1461/    1298 :                     ;   }
    1462/    1298 :                     L155:
    1463/    1298 :                     ;	while (*str != 0) {
    1464/    1298 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1465/    129A : (MACRO)             	jnzU1 r11,L154; NEI2(CVUI2(reg),con0)
    1466/    129E :                     ;   return slen;
    1467/    129E : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1468/    12A2 :                     L153:
    1469/    12A2 : (MACRO)             	popr r7
    1470/    12A6 : (MACRO)             	Cretn
    1471/    12A7 :                     _printstr:
    1472/    12A7 : (MACRO)             	pushr r7
    1473/    12AC : (MACRO)             	reserve 4; save room for outgoing arguments
    1474/    12B0 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1475/    12B4 :                     ;void printstr(char *ptr){
    1476/    12B4 : C0 12 D2            	lbr L159
    1477/    12B7 :                     L158:
    1478/    12B7 :                     ;    while(*ptr) out(5,*ptr++);
    1479/    12B7 : (MACRO)             	ldaD R12,5; reg:acon
    1480/    12BD : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) ;opt1
    1481/    12C1 : (MACRO)             	incm R7,1
    1482/    12C2 : (MACRO)             	ld1 R13,'O',R11,0
    1483/    12CC : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1484/    12CF : (MACRO)             	Ccall _out; CALLI2(ar)
    1485/    12D2 :                     L159:
    1486/    12D2 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1487/    12D4 : (MACRO)             	jnzU1 r11,L158; NEI2(CVUI2(reg),con0)
    1488/    12D8 :                     ;}
    1489/    12D8 :                     L157:
    1490/    12D8 : (MACRO)             	release 4; release room for outgoing arguments
    1491/    12DC : (MACRO)             	popr r7
    1492/    12E0 : (MACRO)             	Cretn
    1493/    12E1 :                     _itoa:
    1494/    12E1 : (MACRO)             	reserve 2; save room for local variables
    1495/    12E3 : (MACRO)             	pushr r0
    1496/    12E8 : (MACRO)             	pushr r1
    1497/    12ED : (MACRO)             	pushr r6
    1498/    12F2 : (MACRO)             	pushr r7
    1499/    12F7 : (MACRO)             	reserve 4; save room for outgoing arguments
    1500/    12FB : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1501/    1308 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    1502/    1315 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1503/    1315 :                     ;	unsigned int flag=0;
    1504/    1315 : (MACRO)             	ld2z R0
    1505/    1319 :                     ;	char * bptr; bptr=buffer;
    1506/    1319 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1507/    1325 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1508/    1332 :                     ;	if (s<0){
    1509/    1332 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1510/    133E : (MACRO)             	jcI2I r11,0,lbdf,L162; GE is flipped test from LT
    1511/    134F :                     ;		*bptr='-';bptr++;
    1512/    134F : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1513/    135B : (MACRO)             	ldaD R10,45; reg:acon
    1514/    1361 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1515/    1363 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 27 - 6/21/2013 15:55:37


    1516/    136F : (MACRO)             	incm R11,1
    1517/    1370 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1518/    137D :                     ;		n=-s;
    1519/    137D : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1520/    1389 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1521/    1392 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1522/    1396 :                     ;	} else{
    1523/    1396 : C0 13 A9            	lbr L163
    1524/    1399 :                     L162:
    1525/    1399 :                     ;		n=s;
    1526/    1399 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1527/    13A5 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1528/    13A9 :                     ;	}
    1529/    13A9 :                     L163:
    1530/    13A9 :                     ;	k=10000;
    1531/    13A9 : (MACRO)             	ldaD R7,10000; reg:acon
    1532/    13AF : C0 14 36            	lbr L165
    1533/    13B2 :                     L164:
    1534/    13B2 :                     ;	while(k>0){
    1535/    13B2 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1536/    13B2 : (MACRO)             	ld2z R1
    1537/    13B6 : C0 13 C6            	lbr L170
    1538/    13B9 :                     L167:
    1539/    13B9 :                     L168:
    1540/    13B9 : (MACRO)             	incm R1,1
    1541/    13BA : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1542/    13C6 :                     L170:
    1543/    13C6 : (MACRO)             	jcU2 r6,r7,lbdf,L167 ;LE is flipped test & operands
    1544/    13D3 :                     ;		if (flag || r>0||k==1){
    1545/    13D3 : (MACRO)             	jnzU2 r0,L174; NE 0
    1546/    13DB : (MACRO)             	jnzU2 r1,L174; NE 0
    1547/    13E3 : (MACRO)             	jneU2I r7,1,L171; NE
    1548/    13EF :                     L174:
    1549/    13EF :                     ;			*bptr=('0'+r);bptr++;
    1550/    13EF : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1551/    13FB : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    1552/    1403 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1553/    1405 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1554/    1411 : (MACRO)             	incm R11,1
    1555/    1412 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1556/    141F :                     ;			flag='y';
    1557/    141F : (MACRO)             	ldaD R0,121; reg:acon
    1558/    1425 :                     ;		}
    1559/    1425 :                     L171:
    1560/    1425 :                     ;		k=k/10;
    1561/    1425 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1562/    1429 : (MACRO)             	ldaD R13,10; reg:acon
    1563/    142F : (MACRO)             	Ccall _divu2
    1564/    1432 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1565/    1436 :                     ;	}
    1566/    1436 :                     L165:
    1567/    1436 :                     ;	while(k>0){
    1568/    1436 : (MACRO)             	jnzU2 r7,L164; NE 0
    1569/    143E :                     ;	*bptr='\0';
    1570/    143E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1571/    144A : (MACRO)             	ldaD R10,0; reg:acon
    1572/    1450 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1573/    1452 :                     ;	return buffer;
    1574/    1452 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1575/    145E :                     L161:
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 28 - 6/21/2013 15:55:37


    1576/    145E : (MACRO)             	release 4; release room for outgoing arguments
    1577/    1462 : (MACRO)             	popr r7
    1578/    1466 : (MACRO)             	popr r6
    1579/    146A : (MACRO)             	popr r1
    1580/    146E : (MACRO)             	popr r0
    1581/    1472 : (MACRO)             	release 2; release room for local variables 
    1582/    1474 : (MACRO)             	Cretn
    1583/    1475 :                     _ltoa:
    1584/    1475 : (MACRO)             	pushr r1
    1585/    147A : (MACRO)             	pushr r6
    1586/    147F : (MACRO)             	pushr r7
    1587/    1484 : (MACRO)             	reserve 8; save room for outgoing arguments
    1588/    148C : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1589/    1494 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1590/    1494 :                     ;	char* bptr=buffer;
    1591/    1494 : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
    1592/    14A0 :                     ;	if (s<0){
    1593/    14A0 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1594/    14AC : (MACRO)             	jcI4 RL6,RL10,lbdf,L176; GE is flipped test from LT
    1595/    14C8 :                     ;		*bptr++='-';
    1596/    14C8 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1
    1597/    14CC : (MACRO)             	incm R1,1
    1598/    14CD : (MACRO)             	ldaD R10,45; reg:acon
    1599/    14D3 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1600/    14D5 :                     ;		s=-s;
    1601/    14D5 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1602/    14F5 :                     ;	}
    1603/    14F5 :                     L176:
    1604/    14F5 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1605/    14F5 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
    1606/    14FD : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1607/    150A : (MACRO)             	ldaD R11,1; reg:acon
    1608/    1510 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1609/    151D : (MACRO)             	Ccall _dubdabx
    1610/    1520 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1611/    1524 : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
    1612/    1528 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1613/    152C : (MACRO)             	Ccall _strcpy
    1614/    152F :                     ;	return buffer;
    1615/    152F : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    1616/    153B :                     L175:
    1617/    153B : (MACRO)             	release 8; release room for outgoing arguments
    1618/    1543 : (MACRO)             	popr r7
    1619/    1547 : (MACRO)             	popr r6
    1620/    154B : (MACRO)             	popr r1
    1621/    154F : (MACRO)             	Cretn
    1622/    1550 :                     _printint:
    1623/    1550 : (MACRO)             	reserve 12
    1624/    155A : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1625/    1567 :                     ;void printint(int s){ //print an integer
    1626/    1567 :                     ;	itoa(s,buffer);
    1627/    1567 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1628/    1573 : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1629/    157B : (MACRO)             	Ccall _itoa
    1630/    157E :                     ;	printstr(buffer);
    1631/    157E : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1632/    1586 : (MACRO)             	Ccall _printstr
    1633/    1589 :                     ;}
    1634/    1589 :                     L178:
    1635/    1589 : (MACRO)             	release 12
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 29 - 6/21/2013 15:55:37


    1636/    1591 : (MACRO)             	Cretn
    1637/    1592 :                     _printlint:
    1638/    1592 : (MACRO)             	reserve 18
    1639/    159C : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1640/    15A9 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1641/    15B6 :                     ;void printlint(long s){ //print a long integer
    1642/    15B6 :                     ;	printstr(ltoa(s,buffer));
    1643/    15B6 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    1644/    15C6 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1645/    15CE : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1646/    15DB : (MACRO)             	Ccall _ltoa
    1647/    15DE : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1648/    15E2 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1649/    15E6 : (MACRO)             	Ccall _printstr
    1650/    15E9 :                     ;}
    1651/    15E9 :                     L179:
    1652/    15E9 : (MACRO)             	release 18
    1653/    15F1 : (MACRO)             	Cretn
    1654/    15F2 :                     _putxn:
    1655/    15F2 : (MACRO)             	reserve 4
    1656/    15F6 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1657/    1603 : (MACRO)             	demote	0+6	;opt3
    1658/    160E :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1659/    160E :                     ;	if (x<10){
    1660/    160E : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1661/    1618 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1662/    161B : (MACRO)             	jcI2I r11,10,lbdf,L181; GE is flipped test from LT
    1663/    162C :                     ;		putc(x+'0');
    1664/    162C : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1665/    1636 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1666/    1639 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1667/    1641 : (MACRO)             	cpy1 R12,R11
    1668/    1643 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1669/    1646 : (MACRO)             	Ccall _putc
    1670/    1649 :                     ;	} else {
    1671/    1649 : C0 16 71            	lbr L182
    1672/    164C :                     L181:
    1673/    164C :                     ;		putc(x+'A'-10);
    1674/    164C : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1675/    1656 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1676/    1659 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1677/    1661 : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1678/    1669 : (MACRO)             	cpy1 R12,R11
    1679/    166B : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1680/    166E : (MACRO)             	Ccall _putc
    1681/    1671 :                     ;	}
    1682/    1671 :                     L182:
    1683/    1671 :                     ;}
    1684/    1671 :                     L180:
    1685/    1671 : (MACRO)             	release 4
    1686/    1675 : (MACRO)             	Cretn
    1687/    1676 :                     _putx:
    1688/    1676 : (MACRO)             	reserve 4
    1689/    167A : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1690/    1687 : (MACRO)             	demote	0+6	;opt3
    1691/    1692 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1692/    1692 :                     ;	putxn(x>>4);
    1693/    1692 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1694/    169C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1695/    169F : (MACRO)             	shrI2I R11,4
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 30 - 6/21/2013 15:55:37


    1696/    16BF : (MACRO)             	cpy1 R12,R11
    1697/    16C1 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1698/    16C4 : (MACRO)             	Ccall _putxn
    1699/    16C7 :                     ;	putxn(x & 0x0F);
    1700/    16C7 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1701/    16D1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1702/    16D4 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1703/    16DC :                     	;removed ?	cpy2 R11,R11
    1704/    16DC : (MACRO)             	cpy1 R12,R11
    1705/    16DE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1706/    16E1 : (MACRO)             	Ccall _putxn
    1707/    16E4 :                     ;}
    1708/    16E4 :                     L183:
    1709/    16E4 : (MACRO)             	release 4
    1710/    16E8 : (MACRO)             	Cretn
    1711/    16E9 :                     _printf:
    1712/    16E9 : (MACRO)             	reserve 2; save room for local variables
    1713/    16EB : (MACRO)             	pushr r0
    1714/    16F0 : (MACRO)             	pushr r1
    1715/    16F5 : (MACRO)             	pushr r6
    1716/    16FA : (MACRO)             	pushr r7
    1717/    16FF : (MACRO)             	reserve 4; save room for outgoing arguments
    1718/    1703 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1719/    1710 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    1720/    171D :                     ;void printf(char *ptr,...){ //limited implementation of printf
    1721/    171D :                     ;	int argslot=0;	//used to align longs
    1722/    171D : (MACRO)             	ld2z R1
    1723/    1721 :                     ;	int * this=(int *)&ptr;
    1724/    1721 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
    1725/    1729 :                     ;	this++; argslot++; //advance argument pointer and slot #
    1726/    1729 : (MACRO)             	incm R6,2
    1727/    172B : (MACRO)             	incm R1,1
    1728/    172C : C0 19 FA            	lbr L186
    1729/    172F :                     L185:
    1730/    172F :                     ;    while(*ptr) {
    1731/    172F :                     ;		c=*ptr++;
    1732/    172F : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1733/    173B : (MACRO)             	cpy2 R10,R11
    1734/    173F : (MACRO)             	incm R10,1
    1735/    1740 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1736/    174D : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1737/    174F :                     ;		if (c!='%'){
    1738/    174F : (MACRO)             	cpy1 R11,R7
    1739/    1751 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1740/    1754 : (MACRO)             	jeqU2I r11,37,L188;EQI2(reg,con)
    1741/    1760 :                     ;			putc(c);
    1742/    1760 : (MACRO)             	cpy1 R12,R7
    1743/    1762 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1744/    1765 : (MACRO)             	Ccall _putc
    1745/    1768 :                     ;		} else{
    1746/    1768 : C0 19 FA            	lbr L189
    1747/    176B :                     L188:
    1748/    176B :                     ;			c=*ptr++;
    1749/    176B : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1750/    1777 : (MACRO)             	cpy2 R10,R11
    1751/    177B : (MACRO)             	incm R10,1
    1752/    177C : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1753/    1789 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1754/    178B :                     ;			switch (c){
    1755/    178B : (MACRO)             	cpy1 R0,R7
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 31 - 6/21/2013 15:55:37


    1756/    178D : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1757/    1790 : (MACRO)             	jeqU2I r0,105,L193;EQI2(reg,con)
    1758/    179C : (MACRO)             	ldaD R11,108; reg:acon
    1759/    17A2 : (MACRO)             	jeqI2 r0,r11,L197; EQI2(reg,reg)
    1760/    17B4 : (MACRO)             	jcI2 r11,r0,lbnf,L205 ;GT is reversed operands from LT
    1761/    17C8 :                     L204:
    1762/    17C8 : (MACRO)             	ldaD R11,88; reg:acon
    1763/    17CE : (MACRO)             	jeqI2 r0,r11,L196; EQI2(reg,reg)
    1764/    17E0 : (MACRO)             	jcI2 r0,r11,lbnf,L190; LT=lbnf i.e. subtract B from A and jump if borrow 
    1765/    17F4 :                     L206:
    1766/    17F4 : (MACRO)             	jeqU2I r0,99,L195;EQI2(reg,con)
    1767/    1800 : (MACRO)             	jeqU2I r0,100,L193;EQI2(reg,con)
    1768/    180C : C0 19 E9            	lbr L190
    1769/    180F :                     L205:
    1770/    180F : (MACRO)             	ldaD R11,115; reg:acon
    1771/    1815 : (MACRO)             	jeqI2 r0,r11,L194; EQI2(reg,reg)
    1772/    1827 : (MACRO)             	jcI2 r0,r11,lbnf,L190; LT=lbnf i.e. subtract B from A and jump if borrow 
    1773/    183B :                     L207:
    1774/    183B : (MACRO)             	jeqU2I r0,120,L196;EQI2(reg,con)
    1775/    1847 : C0 19 E9            	lbr L190
    1776/    184A :                     L193:
    1777/    184A :                     ;					printint(*this++);
    1778/    184A : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1779/    184E : (MACRO)             	incm R6,2
    1780/    1850 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    1781/    185C : (MACRO)             	Ccall _printint
    1782/    185F :                     ;					argslot+=1; //next argument slot
    1783/    185F : (MACRO)             	incm R1,1
    1784/    1860 :                     ;					break;
    1785/    1860 : C0 19 FA            	lbr L191
    1786/    1863 :                     L194:
    1787/    1863 :                     ;					printstr((char*) *this++);
    1788/    1863 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1789/    1867 : (MACRO)             	incm R6,2
    1790/    1869 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1791/    1875 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1792/    1879 : (MACRO)             	Ccall _printstr
    1793/    187C :                     ;					argslot+=1; //next argument slot
    1794/    187C : (MACRO)             	incm R1,1
    1795/    187D :                     ;					break;
    1796/    187D : C0 19 FA            	lbr L191
    1797/    1880 :                     L195:
    1798/    1880 :                     ;					putc((unsigned int) *this++);
    1799/    1880 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1800/    1884 : (MACRO)             	incm R6,2
    1801/    1886 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1802/    1892 : (MACRO)             	cpy1 R12,R11
    1803/    1894 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1804/    1897 : (MACRO)             	Ccall _putc
    1805/    189A :                     ;					argslot+=1; //next argument slot
    1806/    189A : (MACRO)             	incm R1,1
    1807/    189B :                     ;					break;
    1808/    189B : C0 19 FA            	lbr L191
    1809/    189E :                     L196:
    1810/    189E :                     ;					putx(((unsigned int) *this)>>8);
    1811/    189E : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1812/    18AA : 9B                  	ghi	R11	;opt2
    1813/    18AB : AB                  	plo	R11
    1814/    18AC : F8 00               	ldi	0
    1815/    18AE : BB                  	phi	R11	
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 32 - 6/21/2013 15:55:37


    1816/    18AF : (MACRO)             	cpy1 R12,R11
    1817/    18B1 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1818/    18B4 : (MACRO)             	Ccall _putx
    1819/    18B7 :                     ;					putx(((unsigned int) *this++)&255);
    1820/    18B7 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1821/    18BB : (MACRO)             	incm R6,2
    1822/    18BD : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1823/    18C9 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1824/    18D1 : (MACRO)             	cpy1 R12,R11
    1825/    18D3 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1826/    18D6 : (MACRO)             	Ccall _putx
    1827/    18D9 :                     ;					argslot+=1; //next argument slot
    1828/    18D9 : (MACRO)             	incm R1,1
    1829/    18DA :                     ;					break;
    1830/    18DA : C0 19 FA            	lbr L191
    1831/    18DD :                     L197:
    1832/    18DD :                     ;					if (*ptr){ //as long as there's something there
    1833/    18DD : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1834/    18E9 : (MACRO)             	ld1 R11,'O',R11,0
    1835/    18F3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1836/    18F6 : (MACRO)             	jzU2 r11,L198; EQ 0
    1837/    18FE :                     ;						xord=*ptr++;
    1838/    18FE : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1839/    190A : (MACRO)             	cpy2 R10,R11
    1840/    190E : (MACRO)             	incm R10,1
    1841/    190F : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1842/    191C : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1843/    191E : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    1844/    1928 :                     ;						if (argslot&1) {
    1845/    1928 : (MACRO)             	alu2I R11,R1,1,ani,ani
    1846/    1930 :                     	;removed ?	cpy2 R11,R1
    1847/    1930 : (MACRO)             	jzU2 r11,L200; EQ 0
    1848/    1938 :                     ;							this++;
    1849/    1938 : (MACRO)             	incm R6,2
    1850/    193A :                     ;							argslot++;
    1851/    193A : (MACRO)             	incm R1,1
    1852/    193B :                     ;						}
    1853/    193B :                     L200:
    1854/    193B :                     ;						if(xord=='d'){
    1855/    193B : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    1856/    1945 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1857/    1948 : (MACRO)             	jneU2I r11,100,L202; NE
    1858/    1954 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1859/    1954 : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
    1860/    1964 : (MACRO)             	Ccall _printlint
    1861/    1967 :                     ;							this+=2;				// and advances it 4 bytes
    1862/    1967 : (MACRO)             	incm R6,4
    1863/    196B :                     ;						} else{
    1864/    196B : C0 19 E4            	lbr L203
    1865/    196E :                     L202:
    1866/    196E :                     ;							putx(((unsigned int) *this)>>8);
    1867/    196E : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1868/    197A : 9B                  	ghi	R11	;opt2
    1869/    197B : AB                  	plo	R11
    1870/    197C : F8 00               	ldi	0
    1871/    197E : BB                  	phi	R11	
    1872/    197F : (MACRO)             	cpy1 R12,R11
    1873/    1981 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1874/    1984 : (MACRO)             	Ccall _putx
    1875/    1987 :                     ;							putx(((unsigned int) *this++)&255);
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 33 - 6/21/2013 15:55:37


    1876/    1987 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1877/    198B : (MACRO)             	incm R6,2
    1878/    198D : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1879/    1999 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1880/    19A1 : (MACRO)             	cpy1 R12,R11
    1881/    19A3 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1882/    19A6 : (MACRO)             	Ccall _putx
    1883/    19A9 :                     ;							putx(((unsigned int) *this)>>8);
    1884/    19A9 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1885/    19B5 : 9B                  	ghi	R11	;opt2
    1886/    19B6 : AB                  	plo	R11
    1887/    19B7 : F8 00               	ldi	0
    1888/    19B9 : BB                  	phi	R11	
    1889/    19BA : (MACRO)             	cpy1 R12,R11
    1890/    19BC : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1891/    19BF : (MACRO)             	Ccall _putx
    1892/    19C2 :                     ;							putx(((unsigned int) *this++)&255);
    1893/    19C2 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    1894/    19C6 : (MACRO)             	incm R6,2
    1895/    19C8 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1896/    19D4 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1897/    19DC : (MACRO)             	cpy1 R12,R11
    1898/    19DE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1899/    19E1 : (MACRO)             	Ccall _putx
    1900/    19E4 :                     ;						}
    1901/    19E4 :                     L203:
    1902/    19E4 :                     ;						argslot+=2;
    1903/    19E4 : (MACRO)             	incm R1,2
    1904/    19E6 :                     ;						break;
    1905/    19E6 : C0 19 FA            	lbr L191
    1906/    19E9 :                     L198:
    1907/    19E9 :                     L190:
    1908/    19E9 :                     ;					putc('%');putc(c);
    1909/    19E9 : (MACRO)             	ldaD R12,37; reg:acon
    1910/    19EF : (MACRO)             	Ccall _putc
    1911/    19F2 : (MACRO)             	cpy1 R12,R7
    1912/    19F4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1913/    19F7 : (MACRO)             	Ccall _putc
    1914/    19FA :                     ;			} //switch
    1915/    19FA :                     L191:
    1916/    19FA :                     ;		} //%
    1917/    19FA :                     L189:
    1918/    19FA :                     ;	} //while
    1919/    19FA :                     L186:
    1920/    19FA :                     ;    while(*ptr) {
    1921/    19FA : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1922/    1A06 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1923/    1A08 : (MACRO)             	jnzU1 r11,L185; NEI2(CVUI2(reg),con0)
    1924/    1A0C :                     ;} //prtf
    1925/    1A0C :                     L184:
    1926/    1A0C : (MACRO)             	release 4; release room for outgoing arguments
    1927/    1A10 : (MACRO)             	popr r7
    1928/    1A14 : (MACRO)             	popr r6
    1929/    1A18 : (MACRO)             	popr r1
    1930/    1A1C : (MACRO)             	popr r0
    1931/    1A20 : (MACRO)             	release 2; release room for local variables 
    1932/    1A22 : (MACRO)             	Cretn
    1933/    1A23 :                     _exit:
    1934/    1A23 : (MACRO)             	reserve 4
    1935/    1A27 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 34 - 6/21/2013 15:55:37


    1936/    1A34 :                     ;void exit(int code){
    1937/    1A34 :                     ;	printf("exit %d\n",code);
    1938/    1A34 : (MACRO)             	ldaD R12,L209; reg:acon
    1939/    1A3A : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1940/    1A46 : (MACRO)             	Ccall _printf
    1941/    1A49 :                     L210:
    1942/    1A49 :                     ;	while(1);
    1943/    1A49 :                     L211:
    1944/    1A49 : C0 1A 49            	lbr L210
    1945/    1A4C :                     ;}
    1946/    1A4C :                     L208:
    1947/    1A4C : (MACRO)             	release 4
    1948/    1A50 : (MACRO)             	Cretn
    1949/    1A51 :                     _memcmp:
    1950/    1A51 : (MACRO)             	pushr r0
    1951/    1A56 : (MACRO)             	pushr r1
    1952/    1A5B : (MACRO)             	pushr r6
    1953/    1A60 : (MACRO)             	pushr r7
    1954/    1A65 : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    1955/    1A71 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1956/    1A71 :                     ;    int v = 0;
    1957/    1A71 : (MACRO)             	ld2z R6
    1958/    1A75 :                     ;    p1 = (unsigned char *)Ptr1;
    1959/    1A75 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1960/    1A79 :                     ;    p2 = (unsigned char *)Ptr2;
    1961/    1A79 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    1962/    1A7D : C0 1A B0            	lbr L215
    1963/    1A80 :                     L214:
    1964/    1A80 :                     ;    while(Count-- > 0 && v == 0) {
    1965/    1A80 :                     ;        v = *(p1++) - *(p2++);
    1966/    1A80 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) ;opt1
    1967/    1A84 : (MACRO)             	incm R1,1
    1968/    1A85 : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) ;opt1
    1969/    1A89 : (MACRO)             	incm R0,1
    1970/    1A8A : (MACRO)             	ld1 R11,'O',R11,0
    1971/    1A94 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1972/    1A97 : (MACRO)             	ld1 R10,'O',R10,0
    1973/    1AA1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1974/    1AA4 : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1975/    1AB0 :                     ;    }
    1976/    1AB0 :                     L215:
    1977/    1AB0 :                     ;    while(Count-- > 0 && v == 0) {
    1978/    1AB0 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1979/    1AB4 : (MACRO)             	cpy2 R7,R11
    1980/    1AB8 : (MACRO)             	decm R7,1
    1981/    1AB9 : (MACRO)             	jzU2 r11,L217; EQ 0
    1982/    1AC1 : (MACRO)             	jzU2 r6,L214; EQ 0
    1983/    1AC9 :                     L217:
    1984/    1AC9 :                     ;    return v;
    1985/    1AC9 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1986/    1ACD :                     L213:
    1987/    1ACD : (MACRO)             	popr r7
    1988/    1AD1 : (MACRO)             	popr r6
    1989/    1AD5 : (MACRO)             	popr r1
    1990/    1AD9 : (MACRO)             	popr r0
    1991/    1ADD : (MACRO)             	Cretn
    1992/    1ADE :                     _memcpy:
    1993/    1ADE : (MACRO)             	pushr r1
    1994/    1AE3 : (MACRO)             	pushr r6
    1995/    1AE8 : (MACRO)             	pushr r7
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 35 - 6/21/2013 15:55:37


    1996/    1AED : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    1997/    1AF9 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1998/    1AF9 :                     ;        char* dst8 = (char*)dest;
    1999/    1AF9 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2000/    1AFD :                     ;        char* src8 = (char*)src;
    2001/    1AFD : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
    2002/    1B01 : C0 1B 12            	lbr L220
    2003/    1B04 :                     L219:
    2004/    1B04 :                     ;        while (count--) {
    2005/    1B04 :                     ;            *dst8++ = *src8++;
    2006/    1B04 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    2007/    1B08 : (MACRO)             	incm R6,1
    2008/    1B09 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) ;opt1
    2009/    1B0D : (MACRO)             	incm R1,1
    2010/    1B0E : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    2011/    1B10 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2012/    1B12 :                     ;        }
    2013/    1B12 :                     L220:
    2014/    1B12 :                     ;        while (count--) {
    2015/    1B12 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2016/    1B16 : (MACRO)             	cpy2 R7,R11
    2017/    1B1A : (MACRO)             	decm R7,1
    2018/    1B1B : (MACRO)             	jnzU2 r11,L219; NE 0
    2019/    1B23 :                     ;        return dest;
    2020/    1B23 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2021/    1B27 :                     L218:
    2022/    1B27 : (MACRO)             	popr r7
    2023/    1B2B : (MACRO)             	popr r6
    2024/    1B2F : (MACRO)             	popr r1
    2025/    1B33 : (MACRO)             	Cretn
    2026/    1B34 :                     _memset:
    2027/    1B34 : (MACRO)             	pushr r6
    2028/    1B39 : (MACRO)             	pushr r7
    2029/    1B3E : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    2030/    1B4A :                     ;{
    2031/    1B4A :                     ;    unsigned char* p=s;
    2032/    1B4A : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2033/    1B4E : C0 1B 5C            	lbr L224
    2034/    1B51 :                     L223:
    2035/    1B51 :                     ;        *p++ = (unsigned char)c;
    2036/    1B51 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) ;opt1
    2037/    1B55 : (MACRO)             	incm R6,1
    2038/    1B56 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    2039/    1B5A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2040/    1B5C :                     L224:
    2041/    1B5C :                     ;    while(n--)
    2042/    1B5C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2043/    1B60 : (MACRO)             	cpy2 R7,R11
    2044/    1B64 : (MACRO)             	decm R7,1
    2045/    1B65 : (MACRO)             	jnzU2 r11,L223; NE 0
    2046/    1B6D :                     ;    return s;
    2047/    1B6D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2048/    1B71 :                     L222:
    2049/    1B71 : (MACRO)             	popr r7
    2050/    1B75 : (MACRO)             	popr r6
    2051/    1B79 : (MACRO)             	Cretn
    2052/    1B7A :                     _spincluder:
    2053/    1B7A :                     ;void spincluder(){
    2054/    1B7A :                     ;	asm("\tinclude fastspi.inc\n");
    2055/    1B7A :                     	include fastspi.inc
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(fastspi.inc) - page 36 - 6/21/2013 15:55:37


(1)    1/    1B7A :                     ;unsigned char xferspi(unsigned char value){
(1)    2/    1B7A :                     ;  int i;
(1)    3/    1B7A :                     ;  for(i=0;i<8;i++){
(1)    4/    1B7A :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
(1)    5/    1B7A :                     ;    value=(value<<1)|digitalRead(miso);;
(1)    6/    1B7A :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
(1)    7/    1B7A :                     ;    digitalWrite(sck,LOW);
(1)    8/    1B7A :                     ;  }
(1)    9/    1B7A :                     ;  return value;
(1)   10/    1B7A :                     ;}
(1)   11/    1B7A :                     	align	64
(1)   12/    1B80 : =5H                 spisck:	equ	5
(1)   13/    1B80 : =2H                 clkport: equ	2
(1)   14/    1B80 : =7H                 spimosi: equ	7
(1)   15/    1B80 :                     _xferspif:	;spi transfer routine - uses bit 7 of port 4 for mosi, bit 4 for clock
(1)   16/    1B80 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   17/    1B86 : EE                  	sex	memaddr
(1)   18/    1B87 : F8 08               	ldi	8		;bit count
(1)   19/    1B89 : A8                  	plo	r8		;for loop exit test
(1)   20/    1B8A :                     $$loop:
(1)   21/    1B8A : 0E                  	ldn	memaddr		;pick it up
(1)   22/    1B8B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   23/    1B8D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   24/    1B8E :                     ;
(1)   25/    1B8E : 8C                  	glo	r12		;first parameter
(1)   26/    1B8F : FA 80               	ani	0x80		;data bit
(1)   27/    1B91 : F1                  	or			;combine with PIN4 value
(1)   28/    1B92 : 5E                  	str	memaddr		;prepare to send out
(1)   29/    1B93 : 64                  	out	4		;put out data bit with clock 0
(1)   30/    1B94 : 2E                  	dec	memaddr		;back up the X register
(1)   31/    1B95 :                     ;now we have to read the incoming data on ef3
(1)   32/    1B95 : 8C                  	glo	r12		;get the data byte
(1)   33/    1B96 : FE                  	shl			;advance to the next bit
(1)   34/    1B97 : 36 9B               	b3	$$zeroin	;check the external line
(1)   35/    1B99 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   36/    1B9B :                     $$zeroin:			
(1)   37/    1B9B : AC                  	plo	r12		;put it back
(1)   38/    1B9C :                     ;now we clock out our outbound bit
(1)   39/    1B9C : 0E                  	ldn	memaddr
(1)   40/    1B9D : F9 20               	ori	(1<<spisck)		;raise the clock bit
(1)   41/    1B9F : 5E                  	str	memaddr
(1)   42/    1BA0 : 64                  	out	4		;send it out
(1)   43/    1BA1 : 2E                  	dec	memaddr
(1)   44/    1BA2 : FA DF               	ani	0xff-(1<<spisck)	;clear the clock bit
(1)   45/    1BA4 : 5E                  	str	memaddr
(1)   46/    1BA5 : 64                  	out	4		;send out the falling clock edge
(1)   47/    1BA6 : 2E                  	dec	memaddr		
(1)   48/    1BA7 :                     ;now we check the bit count to do the rest of the byte
(1)   49/    1BA7 : 28                  	dec	r8		;bit count-1
(1)   50/    1BA8 : 88                  	glo	r8		;see if we're done
(1)   51/    1BA9 : 3A 8A               	bnz	$$loop		;go back for more if not
(1)   52/    1BAB :                     ;clean up and return the incoming data
(1)   53/    1BAB : 8C                  	glo	r12
(1)   54/    1BAC : AF                  	plo	retval		;put return value in correct register
(1)   55/    1BAD : (MACRO)             	zext	retval
(1)   56/    1BB0 : E2                  	sex	sp		;re-establish sp as X
(1)   57/    1BB1 : (MACRO)             	cretn
(1)   58/    1BB2 :                     	align	64
(1)   59/    1BC0 :                     _xferspif2:	;spi transfer routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   60/    1BC0 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(fastspi.inc) - page 37 - 6/21/2013 15:55:37


(1)   61/    1BC6 : EE                  	sex	memaddr
(1)   62/    1BC7 : F8 08               	ldi	8		;bit count
(1)   63/    1BC9 : A8                  	plo	r8		;for loop exit test
(1)   64/    1BCA :                     $$loop:
(1)   65/    1BCA : 0E                  	ldn	memaddr		;pick it up
(1)   66/    1BCB : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   67/    1BCD : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   68/    1BCE :                     ;
(1)   69/    1BCE : 8C                  	glo	r12		;first parameter
(1)   70/    1BCF : FA 80               	ani	0x80		;data bit
(1)   71/    1BD1 : F1                  	or			;combine with PIN4 value
(1)   72/    1BD2 : 5E                  	str	memaddr		;prepare to send out
(1)   73/    1BD3 : 64                  	out	4		;put out data bit with clock 0
(1)   74/    1BD4 : 2E                  	dec	memaddr		;back up the X register
(1)   75/    1BD5 :                     ;now we have to read the incoming data on ef3
(1)   76/    1BD5 : 8C                  	glo	r12		;get the data byte
(1)   77/    1BD6 : FE                  	shl			;advance to the next bit
(1)   78/    1BD7 : 36 DB               	b3	$$zeroin	;check the external line
(1)   79/    1BD9 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   80/    1BDB :                     $$zeroin:			
(1)   81/    1BDB : AC                  	plo	r12		;put it back
(1)   82/    1BDC :                     ;now we clock out our outbound bit
(1)   83/    1BDC : 62                  	out	clkport		;send out the clock pulse
(1)   84/    1BDD : 2E                  	dec	memaddr
(1)   85/    1BDE :                     ;now we check the bit count to do the rest of the byte
(1)   86/    1BDE : 28                  	dec	r8		;bit count-1
(1)   87/    1BDF : 88                  	glo	r8		;see if we're done
(1)   88/    1BE0 : 3A CA               	bnz	$$loop		;go back for more if not(19 instructions/bit)
(1)   89/    1BE2 :                     ;clean up and return the incoming data
(1)   90/    1BE2 : 8C                  	glo	r12
(1)   91/    1BE3 : AF                  	plo	retval		;put return value in correct register
(1)   92/    1BE4 : (MACRO)             	zext	retval
(1)   93/    1BE7 : E2                  	sex	sp		;re-establish sp as X
(1)   94/    1BE8 : (MACRO)             	cretn
(1)   95/    1BE9 :                     	align 64
(1)   96/    1C00 :                     _shiftoutf:	;spi shift out routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   97/    1C00 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   98/    1C06 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)   99/    1C07 : FA 7F               	ani	0x7f		;make sure mosi is off
(1)  100/    1C09 : 22                  	dec	sp		;make a work area
(1)  101/    1C0A : 52                  	str	sp		;save pin4 value
(1)  102/    1C0B : F8 08               	ldi	8		;bit count
(1)  103/    1C0D : A8                  	plo	r8		;for loop exit test
(1)  104/    1C0E :                     $$loop:
(1)  105/    1C0E : 8C                  	glo	regarg1		;get the value
(1)  106/    1C0F : FE                  	shl			;shift left for next bit
(1)  107/    1C10 : AC                  	plo	regarg1		;save it
(1)  108/    1C11 : 76                  	shrc			;get the top bit back
(1)  109/    1C12 : FA 80               	ani	0x80		;isolate it
(1)  110/    1C14 : F1                  	or			;combine with PIN4 value
(1)  111/    1C15 : 22                  	dec 	sp		;make a work area
(1)  112/    1C16 : 52                  	str	sp		;place value to be output
(1)  113/    1C17 : 64                  	out 	4		;put it in the latch
(1)  114/    1C18 : 22                  	dec	sp		;prep for clock
(1)  115/    1C19 : 62                  	out	clkport		;send clock signal
(1)  116/    1C1A : 28                  	dec	r8		;bit count
(1)  117/    1C1B : 88                  	glo	r8
(1)  118/    1C1C : 3A 0E               	bnz	$$loop		;back for more (13 instructions per byte)
(1)  119/    1C1E : 12                  	inc	sp		;release work area
(1)  120/    1C1F : (MACRO)             	cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(fastspi.inc) - page 38 - 6/21/2013 15:55:37


(1)  121/    1C20 :                     _sendwizrd:	;spi shift out 0F routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)  122/    1C20 : =3H                 subpc:	equ	3		;i'll need to chnge this
(1)  123/    1C20 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)  124/    1C26 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)  125/    1C27 : FA 7F               	ani	0x7f		;make sure mosi is on for 0 part of 0F
(1)  126/    1C29 : 30 34               	br	sendbdy		;go send 8 bits
(1)  127/    1C2B :                     _sendwizwrt:	;spi shift out F0 routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)  128/    1C2B : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)  129/    1C31 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)  130/    1C32 : F9 80               	ori	0x80		;make sure mosi is on for F part of F0
(1)  131/    1C34 :                     sendbdy:
(1)  132/    1C34 : 5E                  	str	memaddr		;save pin4 value
(1)  133/    1C35 : EE                  	sex	memaddr
(1)  134/    1C36 : 64                  	out	4		;send it out
(1)  135/    1C37 : 2E                  	dec	memaddr		;point back to PIN4
(1)  136/    1C38 : FB 80               	xri	0x80		;prep to ttoggle mosi
(1)  137/    1C3A : 5E                  	str	memaddr		;save it
(1)  138/    1C3B : E3                  	sex	subpc		;set up to toggle N1 *************
(1)  139/    1C3C : 62                  	out	clkport		;toggle out bit 7
(1)  140/    1C3D : 07                  	db	7		;dummy
(1)  141/    1C3E : 62                  	out	clkport		;toggle out bit 6
(1)  142/    1C3F : 06                  	db	6		;dummy
(1)  143/    1C40 : 62                  	out	clkport		;toggle out bit 5
(1)  144/    1C41 : 05                  	db	5		;dummy
(1)  145/    1C42 : 62                  	out	clkport		;toggle out bit 4
(1)  146/    1C43 : 04                  	db	4		;dummy
(1)  147/    1C44 : EE                  	sex	memaddr		;point back to pin4 with mosi off
(1)  148/    1C45 : 64                  	out	4		;send it out
(1)  149/    1C46 : E3                  	sex	subpc		;make pc
(1)  150/    1C47 : 62                  	out	clkport		;toggle out bit 3
(1)  151/    1C48 : 03                  	db	3		;dummy
(1)  152/    1C49 : 62                  	out	clkport		;toggle out bit 2
(1)  153/    1C4A : 02                  	db	2		;dummy
(1)  154/    1C4B : 62                  	out	clkport		;toggle out bit 1
(1)  155/    1C4C : 01                  	db	1		;dummy
(1)  156/    1C4D : 62                  	out	clkport		;toggle out bit 0
(1)  157/    1C4E : 00                  	db	0		;dummy
(1)  158/    1C4F : E2                  	sex	sp		;put things back to normal
(1)  159/    1C50 : (MACRO)             	cretn
(1)  160/    1C51 :                     _xferspif3:	;fast spi using send	
(1)  161/    1C51 :                     _shiftinf:	;spi input routine - uses ef3 for miso, N1 for clock
(1)  162/    1C51 : F8 00               	ldi	0		;initial value
(1)  163/    1C53 : AF                  	plo	retval		;prepare to return as an int
(1)  164/    1C54 : BF                  	phi	retval
(1)  165/    1C55 : F8 08               	ldi	8		;bit count		
(1)  166/    1C57 : A8                  	plo	r8		;for read loop
(1)  167/    1C58 :                     $$loop:
(1)  168/    1C58 :                     ;now we have to read the incoming data on ef3
(1)  169/    1C58 : 8F                  	glo	retval		;get the data byte
(1)  170/    1C59 : FE                  	shl			;advance to the next bit
(1)  171/    1C5A : 36 5E               	b3	$$zeroin	;check the external line
(1)  172/    1C5C : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)  173/    1C5E :                     $$zeroin:			
(1)  174/    1C5E : AF                  	plo	retval		;put it back
(1)  175/    1C5F :                     ;now we cycle the clock for our next inbound bit
(1)  176/    1C5F : 22                  	dec	sp		;make a work area
(1)  177/    1C60 : 62                  	out	clkport		;clock the next bit
(1)  178/    1C61 :                     	
(1)  179/    1C61 :                     ;now we check the bit count to do the rest of the byte
(1)  180/    1C61 : 28                  	dec	r8		;bit count-1
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(fastspi.inc) - page 39 - 6/21/2013 15:55:37


(1)  181/    1C62 : 88                  	glo	r8		;see if we're done
(1)  182/    1C63 : 3A 58               	bnz	$$loop		;go back for more if not(10 instructions per bit)
(1)  183/    1C65 :                     
(1)  184/    1C65 : E2                  	sex	sp		;re-establish sp as X
(1)  185/    1C66 : (MACRO)             	cretn
(1)  186/    1C67 :                     	
(1)  187/    1C67 :                     
    2056/    1C67 :                     ;}
    2057/    1C67 :                     L226:
    2058/    1C67 : (MACRO)             	Cretn
    2059/    1C68 :                     _strbuf:
    2060/    1C68 : 00 00 00 00 00 00   	db 16 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 
    2061/    1C78 :                     _buf:
    2062/    1C78 : 00 00 00 00 00 00   	db 512 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 40 - 6/21/2013 15:55:37


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
    2063/    1E78 :                     L209:
    2064/    1E78 : 65                  	db 101
    2065/    1E79 : 78                  	db 120
    2066/    1E7A : 69                  	db 105
    2067/    1E7B : 74                  	db 116
    2068/    1E7C : 20                  	db 32
    2069/    1E7D : 25                  	db 37
    2070/    1E7E : 64                  	db 100
    2071/    1E7F : 0A                  	db 10
    2072/    1E80 : 00                  	db 0
    2073/    1E81 :                     L117:
    2074/    1E81 : 0A                  	db 10
    2075/    1E82 : 4F                  	db 79
    2076/    1E83 : 6C                  	db 108
    2077/    1E84 : 64                  	db 100
    2078/    1E85 : 75                  	db 117
    2079/    1E86 : 69                  	db 105
    2080/    1E87 : 6E                  	db 110
    2081/    1E88 : 6F                  	db 111
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 41 - 6/21/2013 15:55:37


    2082/    1E89 : 20                  	db 32
    2083/    1E8A : 57                  	db 87
    2084/    1E8B : 65                  	db 101
    2085/    1E8C : 62                  	db 98
    2086/    1E8D : 20                  	db 32
    2087/    1E8E : 53                  	db 83
    2088/    1E8F : 65                  	db 101
    2089/    1E90 : 72                  	db 114
    2090/    1E91 : 76                  	db 118
    2091/    1E92 : 65                  	db 101
    2092/    1E93 : 72                  	db 114
    2093/    1E94 : 20                  	db 32
    2094/    1E95 : 76                  	db 118
    2095/    1E96 : 34                  	db 52
    2096/    1E97 : 2E                  	db 46
    2097/    1E98 : 32                  	db 50
    2098/    1E99 : 0A                  	db 10
    2099/    1E9A : 00                  	db 0
    2100/    1E9B :                     L115:
    2101/    1E9B : 47                  	db 71
    2102/    1E9C : 45                  	db 69
    2103/    1E9D : 54                  	db 84
    2104/    1E9E : 20                  	db 32
    2105/    1E9F : 2F                  	db 47
    2106/    1EA0 : 00                  	db 0
    2107/    1EA1 :                     L112:
    2108/    1EA1 : 47                  	db 71
    2109/    1EA2 : 45                  	db 69
    2110/    1EA3 : 54                  	db 84
    2111/    1EA4 : 20                  	db 32
    2112/    1EA5 : 2F                  	db 47
    2113/    1EA6 : 66                  	db 102
    2114/    1EA7 : 61                  	db 97
    2115/    1EA8 : 76                  	db 118
    2116/    1EA9 : 69                  	db 105
    2117/    1EAA : 63                  	db 99
    2118/    1EAB : 6F                  	db 111
    2119/    1EAC : 6E                  	db 110
    2120/    1EAD : 00                  	db 0
    2121/    1EAE :                     L109:
    2122/    1EAE : 50                  	db 80
    2123/    1EAF : 4F                  	db 79
    2124/    1EB0 : 53                  	db 83
    2125/    1EB1 : 54                  	db 84
    2126/    1EB2 : 20                  	db 32
    2127/    1EB3 : 2F                  	db 47
    2128/    1EB4 : 00                  	db 0
    2129/    1EB5 :                     L85:
    2130/    1EB5 : 4F                  	db 79
    2131/    1EB6 : 46                  	db 70
    2132/    1EB7 : 46                  	db 70
    2133/    1EB8 : 0D                  	db 13
    2134/    1EB9 : 0A                  	db 10
    2135/    1EBA : 00                  	db 0
    2136/    1EBB :                     L84:
    2137/    1EBB : 4F                  	db 79
    2138/    1EBC : 4E                  	db 78
    2139/    1EBD : 0D                  	db 13
    2140/    1EBE : 0A                  	db 10
    2141/    1EBF : 00                  	db 0
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 42 - 6/21/2013 15:55:37


    2142/    1EC0 :                     L81:
    2143/    1EC0 : 4C                  	db 76
    2144/    1EC1 : 45                  	db 69
    2145/    1EC2 : 44                  	db 68
    2146/    1EC3 : 20                  	db 32
    2147/    1EC4 : 69                  	db 105
    2148/    1EC5 : 73                  	db 115
    2149/    1EC6 : 20                  	db 32
    2150/    1EC7 : 00                  	db 0
    2151/    1EC8 :                     L78:
    2152/    1EC8 : 50                  	db 80
    2153/    1EC9 : 61                  	db 97
    2154/    1ECA : 67                  	db 103
    2155/    1ECB : 65                  	db 101
    2156/    1ECC : 73                  	db 115
    2157/    1ECD : 20                  	db 32
    2158/    1ECE : 53                  	db 83
    2159/    1ECF : 65                  	db 101
    2160/    1ED0 : 72                  	db 114
    2161/    1ED1 : 76                  	db 118
    2162/    1ED2 : 65                  	db 101
    2163/    1ED3 : 64                  	db 100
    2164/    1ED4 : 3A                  	db 58
    2165/    1ED5 : 20                  	db 32
    2166/    1ED6 : 00                  	db 0
    2167/    1ED7 :                     L72:
    2168/    1ED7 : 3C                  	db 60
    2169/    1ED8 : 70                  	db 112
    2170/    1ED9 : 3E                  	db 62
    2171/    1EDA : 00                  	db 0
    2172/    1EDB :                     L68:
    2173/    1EDB : 2E                  	db 46
    2174/    1EDC : 00                  	db 0
    2175/    1EDD :                     L67:
    2176/    1EDD : 4C                  	db 76
    2177/    1EDE : 61                  	db 97
    2178/    1EDF : 73                  	db 115
    2179/    1EE0 : 74                  	db 116
    2180/    1EE1 : 20                  	db 32
    2181/    1EE2 : 63                  	db 99
    2182/    1EE3 : 6F                  	db 111
    2183/    1EE4 : 6D                  	db 109
    2184/    1EE5 : 6D                  	db 109
    2185/    1EE6 : 61                  	db 97
    2186/    1EE7 : 6E                  	db 110
    2187/    1EE8 : 64                  	db 100
    2188/    1EE9 : 20                  	db 32
    2189/    1EEA : 66                  	db 102
    2190/    1EEB : 72                  	db 114
    2191/    1EEC : 6F                  	db 111
    2192/    1EED : 6D                  	db 109
    2193/    1EEE : 3A                  	db 58
    2194/    1EEF : 20                  	db 32
    2195/    1EF0 : 00                  	db 0
    2196/    1EF1 :                     L62:
    2197/    1EF1 : 48                  	db 72
    2198/    1EF2 : 54                  	db 84
    2199/    1EF3 : 54                  	db 84
    2200/    1EF4 : 50                  	db 80
    2201/    1EF5 : 2F                  	db 47
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 43 - 6/21/2013 15:55:37


    2202/    1EF6 : 31                  	db 49
    2203/    1EF7 : 2E                  	db 46
    2204/    1EF8 : 31                  	db 49
    2205/    1EF9 : 20                  	db 32
    2206/    1EFA : 34                  	db 52
    2207/    1EFB : 30                  	db 48
    2208/    1EFC : 34                  	db 52
    2209/    1EFD : 20                  	db 32
    2210/    1EFE : 4E                  	db 78
    2211/    1EFF : 6F                  	db 111
    2212/    1F00 : 74                  	db 116
    2213/    1F01 : 20                  	db 32
    2214/    1F02 : 46                  	db 70
    2215/    1F03 : 6F                  	db 111
    2216/    1F04 : 75                  	db 117
    2217/    1F05 : 6E                  	db 110
    2218/    1F06 : 64                  	db 100
    2219/    1F07 : 0D                  	db 13
    2220/    1F08 : 0A                  	db 10
    2221/    1F09 : 0D                  	db 13
    2222/    1F0A : 0A                  	db 10
    2223/    1F0B : 00                  	db 0
    2224/    1F0C :                     L54:
    2225/    1F0C : 54                  	db 84
    2226/    1F0D : 58                  	db 88
    2227/    1F0E : 20                  	db 32
    2228/    1F0F : 46                  	db 70
    2229/    1F10 : 72                  	db 114
    2230/    1F11 : 65                  	db 101
    2231/    1F12 : 65                  	db 101
    2232/    1F13 : 20                  	db 32
    2233/    1F14 : 53                  	db 83
    2234/    1F15 : 69                  	db 105
    2235/    1F16 : 7A                  	db 122
    2236/    1F17 : 65                  	db 101
    2237/    1F18 : 20                  	db 32
    2238/    1F19 : 45                  	db 69
    2239/    1F1A : 72                  	db 114
    2240/    1F1B : 72                  	db 114
    2241/    1F1C : 6F                  	db 111
    2242/    1F1D : 72                  	db 114
    2243/    1F1E : 21                  	db 33
    2244/    1F1F : 0A                  	db 10
    2245/    1F20 : 00                  	db 0
    2246/    1F21 :                     L26:
    2247/    1F21 : 44                  	db 68
    2248/    1F22 : 6F                  	db 111
    2249/    1F23 : 6E                  	db 110
    2250/    1F24 : 65                  	db 101
    2251/    1F25 : 20                  	db 32
    2252/    1F26 : 57                  	db 87
    2253/    1F27 : 69                  	db 105
    2254/    1F28 : 7A                  	db 122
    2255/    1F29 : 6E                  	db 110
    2256/    1F2A : 65                  	db 101
    2257/    1F2B : 74                  	db 116
    2258/    1F2C : 20                  	db 32
    2259/    1F2D : 57                  	db 87
    2260/    1F2E : 35                  	db 53
    2261/    1F2F : 31                  	db 49
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 44 - 6/21/2013 15:55:37


    2262/    1F30 : 30                  	db 48
    2263/    1F31 : 30                  	db 48
    2264/    1F32 : 20                  	db 32
    2265/    1F33 : 49                  	db 73
    2266/    1F34 : 6E                  	db 110
    2267/    1F35 : 69                  	db 105
    2268/    1F36 : 74                  	db 116
    2269/    1F37 : 69                  	db 105
    2270/    1F38 : 61                  	db 97
    2271/    1F39 : 6C                  	db 108
    2272/    1F3A : 69                  	db 105
    2273/    1F3B : 7A                  	db 122
    2274/    1F3C : 61                  	db 97
    2275/    1F3D : 74                  	db 116
    2276/    1F3E : 69                  	db 105
    2277/    1F3F : 6F                  	db 111
    2278/    1F40 : 6E                  	db 110
    2279/    1F41 : 20                  	db 32
    2280/    1F42 : 6F                  	db 111
    2281/    1F43 : 6E                  	db 110
    2282/    1F44 : 20                  	db 32
    2283/    1F45 : 49                  	db 73
    2284/    1F46 : 50                  	db 80
    2285/    1F47 : 20                  	db 32
    2286/    1F48 : 61                  	db 97
    2287/    1F49 : 64                  	db 100
    2288/    1F4A : 64                  	db 100
    2289/    1F4B : 72                  	db 114
    2290/    1F4C : 65                  	db 101
    2291/    1F4D : 73                  	db 115
    2292/    1F4E : 73                  	db 115
    2293/    1F4F : 20                  	db 32
    2294/    1F50 : 25                  	db 37
    2295/    1F51 : 64                  	db 100
    2296/    1F52 : 2E                  	db 46
    2297/    1F53 : 25                  	db 37
    2298/    1F54 : 64                  	db 100
    2299/    1F55 : 2E                  	db 46
    2300/    1F56 : 25                  	db 37
    2301/    1F57 : 64                  	db 100
    2302/    1F58 : 2E                  	db 46
    2303/    1F59 : 25                  	db 37
    2304/    1F5A : 64                  	db 100
    2305/    1F5B : 0A                  	db 10
    2306/    1F5C : 0A                  	db 10
    2307/    1F5D : 00                  	db 0
    2308/    1F5E :                     	include lcc1802Epilofl.inc
(1)    1/    1F5E :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    1F5E :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    1F5E :                     ;this is the version published with the lcc1802121229 release
(1)    4/    1F5E :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    1F5E :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    1F5E :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    1F5E :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    1F5E :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    1F5E :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    1F5E :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    1F5E :                     ;feb 27 changed stack to start at 7fff
(1)   12/    1F5E :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    1F5E :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 45 - 6/21/2013 15:55:37


(1)   14/    1F5E :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    1F5E :                     
(1)   16/    1F5E : =EH                 rwork	equ	memAddr	;work register
(1)   17/    1F5E :                     lcc1802init:	
(1)   18/    1F5E : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    1F64 : (MACRO)             	ldiReg	RRET,_return
(1)   20/    1F6A : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    1F70 : E2                  	sex	SP
(1)   22/    1F71 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    1F77 : D3                  	sep	RPC
(1)   24/    1F78 :                     $$_00000:
(1)   25/    1F78 : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    1F7B : C0 1F 7B            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    1F7E : DE AD               	db	0xde,0xad
(1)   28/    1F80 :                     
(1)   29/    1F80 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    1F80 :                     _setqOn:
(1)   31/    1F80 : 7B                  	seq
(1)   32/    1F81 : (MACRO)             	Cretn
(1)   33/    1F82 :                     _setqOff:
(1)   34/    1F82 : 7A                  	req
(1)   35/    1F83 : (MACRO)             	Cretn
(1)   36/    1F84 :                     
(1)   37/    1F84 :                     _modU2:	;16 bit unsigned remainder
(1)   38/    1F84 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    1F84 : (MACRO)                 Ccall _divU2
(1)   40/    1F87 : 8D                      glo regArg2
(1)   41/    1F88 : AF                      plo retVal
(1)   42/    1F89 : 9D                      ghi regArg2
(1)   43/    1F8A : BF                      phi retVal
(1)   44/    1F8B : (MACRO)                 Cretn
(1)   45/    1F8C :                         
(1)   46/    1F8C :                     _modI2:	;16 bit signed remainder
(1)   47/    1F8C :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    1F8C : (MACRO)                 Ccall _divI2
(1)   49/    1F8F : 8D                      glo regArg2
(1)   50/    1F90 : AF                      plo retVal
(1)   51/    1F91 : 9D                      ghi regArg2
(1)   52/    1F92 : BF                      phi retVal
(1)   53/    1F93 : (MACRO)                 Cretn
(1)   54/    1F94 :                     
(1)   55/    1F94 :                     _out4:	
(1)   56/    1F94 : 8C                  	glo	regArg1
(1)   57/    1F95 : 22                  	dec	sp
(1)   58/    1F96 : 52                  	str	sp
(1)   59/    1F97 : 64                  	out	4
(1)   60/    1F98 : (MACRO)             	Cretn
(1)   61/    1F99 :                     
(1)   62/    1F99 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    1F99 :                     	align 256
(1)   64/    2000 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    2000 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    2000 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    2000 : D3                  	sep     R3 ;go to subroutine
(1)   68/    2001 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    2002 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    2003 : 22                  	dec	sp
(1)   71/    2004 : 73                  	stxd
(1)   72/    2005 : 96                  	ghi	retAddr
(1)   73/    2006 : 52                  	str	sp	
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 46 - 6/21/2013 15:55:37


(1)   74/    2007 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    2008 : A6                  	plo	retAddr
(1)   76/    2009 : 93                  	ghi	RPC
(1)   77/    200A : B6                  	phi	retAddr
(1)   78/    200B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    200C : B3                  	phi	RPC
(1)   80/    200D : 46                  	lda	retAddr
(1)   81/    200E : A3                  	plo	RPC
(1)   82/    200F : 30 00               	br	_call-1
(1)   83/    2011 :                     
(1)   84/    2011 :                     ;Standard subroutine return 
(1)   85/    2011 : D3                  	sep	RPC	;return to the original program
(1)   86/    2012 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    2013 : A3                  	plo	RPC
(1)   88/    2014 : 96                  	ghi	retAddr
(1)   89/    2015 : B3                  	phi	RPC
(1)   90/    2016 : 42                  	lda	SP	;pick up old return address
(1)   91/    2017 : B6                  	phi	retAddr
(1)   92/    2018 : 42                  	lda	SP
(1)   93/    2019 : A6                  	plo	retAddr
(1)   94/    201A : 30 11               	br	_return-1
(1)   95/    201C :                     
(1)   96/    201C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    201C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    201E : FF 01               $$mslp:	smi	1
(1)   99/    2020 : 3A 1E               	bnz	$$mslp
(1)  100/    2022 : (MACRO)             	Cretn
(1)  101/    2023 :                     
(1)  102/    2023 :                     
(1)  103/    2023 :                     	
(1)  104/    2023 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    2023 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    2023 :                     _mulu2:		
(1)  107/    2023 : 22                      dec sp
(1)  108/    2024 : F8 10                   ldi 16
(1)  109/    2026 : AE                      plo	rwork	;bit count
(1)  110/    2027 : F8 00                   ldi 0
(1)  111/    2029 : BF                      phi	retVal	;quotient
(1)  112/    202A : AF                      plo retVal
(1)  113/    202B :                     $$MultLoop16_16:
(1)  114/    202B : 9C                      ghi regArg1
(1)  115/    202C : F6                      shr
(1)  116/    202D : BC                      phi regArg1
(1)  117/    202E : 8C                      glo regArg1
(1)  118/    202F : 76                      shrc
(1)  119/    2030 : AC                      plo regArg1
(1)  120/    2031 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    2033 : 8D                      glo regArg2
(1)  122/    2034 : 52                      str sp
(1)  123/    2035 : 8F                      glo retVal
(1)  124/    2036 : F4                      add 
(1)  125/    2037 : AF                      plo retVal
(1)  126/    2038 : 9D                      ghi regArg2
(1)  127/    2039 : 52                      str sp
(1)  128/    203A : 9F                      ghi retVal
(1)  129/    203B : 74                      adc
(1)  130/    203C : BF                      phi retVal
(1)  131/    203D :                     $$MultSkip16_16:
(1)  132/    203D : 8D                      glo regArg2
(1)  133/    203E : FE                      shl
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 47 - 6/21/2013 15:55:37


(1)  134/    203F : AD                      plo regArg2
(1)  135/    2040 : 9D                      ghi regArg2
(1)  136/    2041 : 7E                      shlc
(1)  137/    2042 : BD                      phi regArg2
(1)  138/    2043 : 2E                      dec rwork
(1)  139/    2044 : 8E                      glo rwork
(1)  140/    2045 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    2047 : 12                      inc sp
(1)  142/    2048 : D5                      sep 5
(1)  143/    2049 :                     
(1)  144/    2049 :                     
(1)  145/    2049 :                     _divU2:
(1)  146/    2049 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    2049 :                     	; This is really an unsigned 23 bit divide
(1)  148/    2049 :                     	;thanks to Ted Rossin
(1)  149/    2049 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    2049 : 22                      dec sp
(1)  151/    204A : F8 10                   ldi 16
(1)  152/    204C : AE                      plo rwork
(1)  153/    204D : F8 00                   ldi 0
(1)  154/    204F : BF                      phi retVal
(1)  155/    2050 : AF                      plo retVal
(1)  156/    2051 : BE                      phi rwork
(1)  157/    2052 :                     $$DivLoop16_16:
(1)  158/    2052 : 8C                      glo regArg1
(1)  159/    2053 : FE                      shl
(1)  160/    2054 : AC                      plo regArg1
(1)  161/    2055 : 9C                      ghi regArg1
(1)  162/    2056 : 7E                      shlc
(1)  163/    2057 : BC                      phi regArg1
(1)  164/    2058 : 8F                      glo retVal
(1)  165/    2059 : 7E                      shlc
(1)  166/    205A : AF                      plo retVal
(1)  167/    205B : 9F                      ghi retVal
(1)  168/    205C : 7E                      shlc
(1)  169/    205D : BF                      phi retVal
(1)  170/    205E : 9E                      ghi rwork
(1)  171/    205F : 7E                      shlc
(1)  172/    2060 : BE                      phi rwork
(1)  173/    2061 : 3B 73                   bnf $$DivSub16_16
(1)  174/    2063 : 8D                      glo regArg2
(1)  175/    2064 : 52                      str sp
(1)  176/    2065 : 8F                      glo retVal
(1)  177/    2066 : F4                      add 
(1)  178/    2067 : AF                      plo retVal
(1)  179/    2068 : 9D                      ghi regArg2
(1)  180/    2069 : 52                      str sp
(1)  181/    206A : 9F                      ghi retVal
(1)  182/    206B : 74                      adc 
(1)  183/    206C : BF                      phi retVal
(1)  184/    206D : 9E                      ghi rwork
(1)  185/    206E : 7C 00                   adci 0
(1)  186/    2070 : BE                      phi rwork
(1)  187/    2071 : 30 81                   br $$DivSkip16_16
(1)  188/    2073 :                     $$DivSub16_16:
(1)  189/    2073 : 8D                      glo regArg2
(1)  190/    2074 : 52                      str sp
(1)  191/    2075 : 8F                      glo retVal
(1)  192/    2076 : F7                      sm
(1)  193/    2077 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 48 - 6/21/2013 15:55:37


(1)  194/    2078 : 9D                      ghi regArg2
(1)  195/    2079 : 52                      str sp
(1)  196/    207A : 9F                      ghi retVal
(1)  197/    207B : 77                      smb 
(1)  198/    207C : BF                      phi retVal
(1)  199/    207D : 9E                      ghi rwork
(1)  200/    207E : 7F 00                   smbi 0
(1)  201/    2080 : BE                      phi rwork 
(1)  202/    2081 :                     $$DivSkip16_16:
(1)  203/    2081 : FE                      shl
(1)  204/    2082 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    2084 :                     $$DivSetBit16_16:
(1)  206/    2084 : 8C                      glo regArg1
(1)  207/    2085 : F9 01                   ori  0x01
(1)  208/    2087 : AC                      plo regArg1
(1)  209/    2088 :                     $$DivSkipClear16_16:
(1)  210/    2088 : 2E                      dec rwork
(1)  211/    2089 : 8E                      glo rwork
(1)  212/    208A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    208C : 9E                      ghi rwork
(1)  214/    208D : FE                      shl
(1)  215/    208E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    2090 : 8D                      glo regArg2
(1)  217/    2091 : 52                      str sp
(1)  218/    2092 : 8F                      glo retVal
(1)  219/    2093 : F4                      add
(1)  220/    2094 : AF                      plo retVal
(1)  221/    2095 : 9D                      ghi regArg2
(1)  222/    2096 : 52                      str sp
(1)  223/    2097 : 9F                      ghi retVal
(1)  224/    2098 : 74                      adc
(1)  225/    2099 : BF                      phi retVal
(1)  226/    209A :                     $$DivSkipFinalAdd16_16:
(1)  227/    209A : 12                      inc sp
(1)  228/    209B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    209B : 8F                      glo retVal
(1)  230/    209C : AD                      plo regArg2
(1)  231/    209D : 9F                      ghi retVal
(1)  232/    209E : BD                      phi regArg2
(1)  233/    209F : 8C                      glo regArg1
(1)  234/    20A0 : AF                      plo retVal
(1)  235/    20A1 : 9C                      ghi regArg1
(1)  236/    20A2 : BF                      phi retVal
(1)  237/    20A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    20A3 : D5                      sep 5
(1)  239/    20A4 :                     
(1)  240/    20A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    20A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    20A4 :                     _divI2:
(1)  243/    20A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    20A4 : 22                      dec	sp	;leave a work area available
(1)  245/    20A5 : 9C                      ghi regArg1
(1)  246/    20A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    20A7 : FE                      shl
(1)  248/    20A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    20AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    20B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    20B3 : 9D                      ghi regArg2
(1)  252/    20B4 : F3                      xor	
(1)  253/    20B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 49 - 6/21/2013 15:55:37


(1)  254/    20B6 : 9D                      ghi regArg2
(1)  255/    20B7 : FE                      shl
(1)  256/    20B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    20BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    20C3 :                     $$pos2: ; both args now +v
(1)  259/    20C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    20C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    20C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    20C7 : FE                      shl
(1)  263/    20C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    20CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    20D3 :                     $$done:
(1)  266/    20D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    20D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    20D4 :                     
(1)  269/    20D4 :                     
(1)  270/    20D4 :                     	align 256    ;32 bit operations follow
(1)  271/    2100 :                     _divu4:
(1)  272/    2100 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    2100 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    2100 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    2100 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    2100 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    2100 :                     
(1)  278/    2100 : F8 20               	ldi 32		;set loop count
(1)  279/    2102 : AE                  	plo memaddr	;in temp register
(1)  280/    2103 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    210F :                     $$loop:
(1)  282/    210F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    211B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    2127 :                     
(1)  285/    2127 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    213D :                     
(1)  287/    213D : FA 80               	ani 0x80	;check the top bit
(1)  288/    213F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    2141 : 89                  		glo RL8
(1)  290/    2142 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    2144 : A9                  		plo RL8
(1)  292/    2145 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    215B : 30 61               	br $$endlp 	;else
(1)  294/    215D :                     $$norestore:
(1)  295/    215D : 89                  		glo RL8
(1)  296/    215E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    2160 : A9                  		plo RL8
(1)  298/    2161 :                     	;end if
(1)  299/    2161 :                     $$endlp:
(1)  300/    2161 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    2162 : 8E                  	glo memaddr
(1)  302/    2163 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    2165 :                     	
(1)  304/    2165 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    2166 :                     		
(1)  306/    2166 :                     
(1)  307/    2166 :                     _mulu4:
(1)  308/    2166 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    2166 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    2166 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    2166 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    2166 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    2166 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 50 - 6/21/2013 15:55:37


(1)  314/    2166 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    2166 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    2166 :                     	;for 10 we subtract and shift
(1)  317/    2166 :                     	;for 00 and 11 we just shift
(1)  318/    2166 :                     
(1)  319/    2166 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    2172 : F8 20                   ldi 32
(1)  321/    2174 : AE                      plo memaddr		;cycle count
(1)  322/    2175 : FC 00                   adi 0		;clear df
(1)  323/    2177 :                     $$mloop:
(1)  324/    2177 : 89                      glo RL8
(1)  325/    2178 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    217A : 3B 96                   bnf	$$check_sub	;
(1)  327/    217C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    217E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    217E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    2194 : 30 AE                   br $$shift
(1)  331/    2196 :                     $$check_sub:
(1)  332/    2196 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    2198 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    2198 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    21AE :                     $$shift:
(1)  336/    21AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    21BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    21C8 :                     
(1)  339/    21C8 : 2E                      dec memaddr		;cycle count
(1)  340/    21C9 : 8E                      glo memaddr
(1)  341/    21CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    21CC :                         
(1)  343/    21CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    21CD :                     
(1)  345/    21CD :                     	align 256
(1)  346/    2200 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    2200 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    2200 :                     _divI4:
(1)  349/    2200 : 22                      dec	sp	;leave a work area available
(1)  350/    2201 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    2202 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    2203 : FE                      shl
(1)  353/    2204 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    2206 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    2226 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    2226 : 9A                      ghi RL10-1
(1)  357/    2227 : F3                      xor	
(1)  358/    2228 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    2229 : 9A                      ghi RL10-1
(1)  360/    222A : FE                      shl
(1)  361/    222B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    222D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    224D :                     $$pos2: ; both args now +v
(1)  364/    224D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    2250 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    2250 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    2251 : FE                      shl
(1)  368/    2252 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    2254 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    2274 :                     $$done:
(1)  371/    2274 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    2275 :                     
(1)  373/    2275 :                     _dubdabx:	
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 51 - 6/21/2013 15:55:37


(1)  374/    2275 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    2275 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    2275 :                     ;long interger is passed in rp1p2
(1)  377/    2275 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    2275 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    2275 :                     ;r8-11 are used as temps
(1)  380/    2275 :                     ;r8 is the working pointer
(1)  381/    2275 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    2275 :                     ;r9.0 is digit count
(1)  383/    2275 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    2275 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    2281 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    228D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    2291 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    2293 : A9                  	plo r9
(1)  389/    2294 :                     $$clrlp:	;clear the passed buffer
(1)  390/    2294 : F8 00               	ldi 0	
(1)  391/    2296 : 58                  	str r8	;clear a byte
(1)  392/    2297 : 18                  	inc r8
(1)  393/    2298 : 29                  	dec r9
(1)  394/    2299 : 89                  	glo r9	;check the count
(1)  395/    229A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    229C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    22A0 :                     
(1)  398/    22A0 : F8 20               	ldi 32	;bit count
(1)  399/    22A2 : AF                  	plo r15
(1)  400/    22A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    22A3 :                     $$cktop:
(1)  402/    22A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    22A4 : FE                  	shl		;check for a 1
(1)  404/    22A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    22A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    22B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    22B4 : 8F                  	glo r15
(1)  408/    22B5 : 3A A3               	bnz $$cktop	;
(1)  409/    22B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    22B8 :                     $$bitloop:
(1)  411/    22B8 : F8 0A               	ldi 10	;digit count
(1)  412/    22BA : A9                  	plo r9
(1)  413/    22BB :                     $$dcklp:
(1)  414/    22BB : 08                  	ldn r8 	;pick up a digit
(1)  415/    22BC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    22BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    22C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    22C2 : 58                  	str r8	;put it back
(1)  419/    22C3 :                     $$dnoadd:
(1)  420/    22C3 : 18                  	inc r8
(1)  421/    22C4 : 29                  	dec r9	;decrement digit count
(1)  422/    22C5 : 89                  	glo r9
(1)  423/    22C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    22C8 :                     	
(1)  425/    22C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    22D4 :                     	
(1)  427/    22D4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    22D6 : A9                  	plo r9
(1)  429/    22D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    22D7 :                     $$dshlp:
(1)  431/    22D7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    22D8 : 08                  	ldn r8	;get the digit back
(1)  433/    22D9 : 7E                  	shlc	;continue the shift
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(lcc1802Epilofl.inc) - page 52 - 6/21/2013 15:55:37


(1)  434/    22DA : BF                  	phi r15 ;save it for the carry test
(1)  435/    22DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    22DD : 58                  	str r8	;put the digit back
(1)  437/    22DE : 9F                  	ghi r15	;now test for carry
(1)  438/    22DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    22E1 : 29                  	dec r9	;decrement the digit count
(1)  440/    22E2 : 89                  	glo r9
(1)  441/    22E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    22E5 :                     	
(1)  443/    22E5 : 2F                  	dec r15
(1)  444/    22E6 : 8F                  	glo r15
(1)  445/    22E7 : 3A B8               	bnz $$bitloop
(1)  446/    22E9 :                     	
(1)  447/    22E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    22ED : F8 0A               	ldi 10		;digit count again
(1)  449/    22EF : A9                  	plo r9
(1)  450/    22F0 :                     $$upnxt:
(1)  451/    22F0 : 08                  	ldn r8		;get digit
(1)  452/    22F1 : F9 30               	ori 0x30	;make ascii
(1)  453/    22F3 : 58                  	str r8		;put it back
(1)  454/    22F4 : 18                  	inc r8		;next digit
(1)  455/    22F5 : 29                  	dec r9		;counter
(1)  456/    22F6 : 89                  	glo r9
(1)  457/    22F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    22F9 :                     	
(1)  459/    22F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    2301 : EE                  	sex memaddr	;set up
(1)  461/    2302 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    2304 : F7                  	sm		;desired number of digits to skip
(1)  463/    2305 : E2                  	sex sp		;reset index register
(1)  464/    2306 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    2307 :                     $$cknext:
(1)  466/    2307 : 0F                  	ldn r15		;check digit
(1)  467/    2308 : FF 30               	smi 0x30	;for '0'
(1)  468/    230A : 3A 11               	bnz $$done
(1)  469/    230C : 1F                  	inc r15		;next digit
(1)  470/    230D : 29                  	dec r9		;reduce count
(1)  471/    230E : 89                  	glo r9
(1)  472/    230F : 3A 07               	bnz $$cknext
(1)  473/    2311 :                     $$done:
(1)  474/    2311 : (MACRO)             	cretn
(1)  475/    2312 :                     	
(1)  476/    2312 :                     	
(1)  477/    2312 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    2312 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    2312 : (MACRO)                 Ccall _divU4
(1)  480/    2315 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    231D : (MACRO)                 Cretn
(1)  482/    231E :                         
(1)  483/    231E :                     _modI4:	;32 bit signed remainder
(1)  484/    231E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    231E : (MACRO)                 Ccall _divI4
(1)  486/    2321 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    2329 : (MACRO)                 Cretn
(1)  488/    232A :                         
(1)  489/    232A :                     	
(1)  490/    232A :                      
    2309/    232A :                     	include IO1802.inc
(1)    1/    232A :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    232A :                     ;The port is in regArg1, the output byte is in regArg2
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm(IO1802.inc) - page 53 - 6/21/2013 15:55:37


(1)    3/    232A :                     	align 64
(1)    4/    2340 :                     _putc:
(1)    5/    2340 :                     _out5:	
(1)    6/    2340 : 8C                  	glo	regArg1
(1)    7/    2341 : 22                  	dec	sp
(1)    8/    2342 : 52                  	str	sp
(1)    9/    2343 : 65                  	out	5
(1)   10/    2344 : (MACRO)             	Cretn
(1)   11/    2345 :                     _inp:		;raw port input
(1)   12/    2345 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    2345 : 22                  	dec	sp	;work backwards
(1)   14/    2346 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    2348 : 73                  	stxd		
(1)   16/    2349 : 8C                  	glo	regarg1	;get the port number
(1)   17/    234A : FA 07               	ani	0x07	;clean it
(1)   18/    234C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    234E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    2350 : 73                  	stxd		;store it for execution
(1)   21/    2351 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    2355 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    2356 : D8                  	sep	rt1	;execute it
(1)   24/    2357 :                     ;we will come back to here with the input byte in D
(1)   25/    2357 : 12                  	inc	sp	;step over the work area
(1)   26/    2358 : AF                  	plo	retVal	;save it to return
(1)   27/    2359 : F8 00               	ldi	0
(1)   28/    235B : BF                  	phi	retval	;clear top byte
(1)   29/    235C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    235D : 12                  	inc	sp	;and the D3
(1)   31/    235E : (MACRO)             	Cretn		;and we're done
(1)   32/    235F :                     	
(1)   33/    235F :                     _out:		;raw port output
(1)   34/    235F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    235F :                     		;this could be bolder:
(1)   36/    235F :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/    235F :                     		;then SEP sp
(1)   38/    235F :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    235F :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    235F : 22                  	dec	sp	;work backwards
(1)   41/    2360 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    2362 : 73                  	stxd		
(1)   43/    2363 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/    2367 : 8C                  	glo	regarg1	;get the port number
(1)   45/    2368 : FA 07               	ani	0x07	;clean it
(1)   46/    236A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    236C : 73                  	stxd		;store it for execution
(1)   48/    236D : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    236E : 52                  	str	sp	;store it where sp points
(1)   50/    236F : D8                  	sep	rt1	;execute it
(1)   51/    2370 :                     ;we will come back to here with sp stepped up by one
(1)   52/    2370 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    2371 : 12                  	inc	sp	;and the D3
(1)   54/    2372 : (MACRO)             	Cretn		;and we're done
(1)   55/    2373 :                     	
(1)   56/    2373 :                     	
    2310/    2373 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 54 - 6/21/2013 15:55:37


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP283 :                  22B8 C | *BRANCHEXT :                      0 - |
 BVTABLE144 :                  119F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB281 :                2196 C |  CKNEXT283 :                   2307 C |
 CKTOP283 :                    22A3 C |  CLKPORT :                        2 - |
 CLRLP283 :                    2294 C | *CONSTPI :        3.141592653589793 - |
*DATE :                   6/21/2013 - |  DCKLP283 :                    22BB C |
 DIVLOOP16_16278 :             2052 C | *DIVSETBIT16_16278 :           2084 C |
 DIVSKIP16_16278 :             2081 C |  DIVSKIPCLEAR16_16278 :        2088 C |
 DIVSKIPFINALADD16_16278 :     209A C |  DIVSUB16_16278 :              2073 C |
 DNOADD283 :                   22C3 C |  DONE279 :                     20D3 C |
 DONE282 :                     2274 C |  DONE283 :                     2311 C |
 DSHLP283 :                    22D7 C |  ENDLP280 :                    2161 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            81 C |
 L10 :                           FA C |  L100 :                        1069 C |
 L102 :                        1069 C |  L105 :                         FB6 C |
 L106 :                         FBA C |  L107 :                         FF9 C |
 L108 :                        105F C |  L109 :                        1EAE C |
 L11 :                           FE C |  L110 :                        1029 C |
 L111 :                        105F C |  L112 :                        1EA1 C |
 L113 :                        105F C |  L115 :                        1E9B C |
*L116 :                        1136 C |  L117 :                        1E81 C |
 L118 :                        1099 C |  L119 :                        1133 C |
 L121 :                        112A C |  L122 :                        112A C |
 L123 :                        111B C |  L124 :                        1121 C |
 L125 :                        1127 C | *L126 :                        10CB C |
 L127 :                        110D C | *L129 :                        1170 C |
 L130 :                        115A C | *L131 :                        115D C |
 L133 :                        115E C | *L134 :                        11B0 C |
 L136 :                        1256 C |  L137 :                        11CA C |
*L138 :                        1247 C |  L140 :                        124A C |
 L141 :                        123A C |  L144 :                        122D C |
 L145 :                        1233 C |  L146 :                        1247 C |
*L148 :                        1287 C |  L149 :                        1271 C |
*L150 :                        1271 C |  L152 :                        1273 C |
*L153 :                        12A2 C |  L154 :                        1296 C |
 L155 :                        1298 C | *L157 :                        12D8 C |
 L158 :                        12B7 C |  L159 :                        12D2 C |
*L161 :                        145E C |  L162 :                        1399 C |
 L163 :                        13A9 C |  L164 :                        13B2 C |
 L165 :                        1436 C |  L167 :                        13B9 C |
*L168 :                        13B9 C |  L170 :                        13C6 C |
 L171 :                        1425 C |  L174 :                        13EF C |
*L175 :                        153B C |  L176 :                        14F5 C |
*L178 :                        1589 C | *L179 :                        15E9 C |
*L180 :                        1671 C |  L181 :                        164C C |
 L182 :                        1671 C | *L183 :                        16E4 C |
*L184 :                        1A0C C |  L185 :                        172F C |
 L186 :                        19FA C |  L188 :                        176B C |
 L189 :                        19FA C |  L190 :                        19E9 C |
 L191 :                        19FA C |  L193 :                        184A C |
 L194 :                        1863 C |  L195 :                        1880 C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 55 - 6/21/2013 15:55:37


 L196 :                        189E C |  L197 :                        18DD C |
 L198 :                        19E9 C |  L200 :                        193B C |
 L202 :                        196E C |  L203 :                        19E4 C |
*L204 :                        17C8 C |  L205 :                        180F C |
*L206 :                        17F4 C | *L207 :                        183B C |
*L208 :                        1A4C C |  L209 :                        1E78 C |
 L210 :                        1A49 C | *L211 :                        1A49 C |
*L213 :                        1ACD C |  L214 :                        1A80 C |
 L215 :                        1AB0 C |  L217 :                        1AC9 C |
*L218 :                        1B27 C |  L219 :                        1B04 C |
 L220 :                        1B12 C | *L222 :                        1B71 C |
 L223 :                        1B51 C |  L224 :                        1B5C C |
*L226 :                        1C67 C |  L26 :                         1F21 C |
*L27 :                          498 C | *L28 :                          4C1 C |
 L29 :                          4B0 C | *L30 :                          4B0 C |
*L32 :                          4EA C |  L33 :                          4D9 C |
*L34 :                          4D9 C |  L36 :                          5E7 C |
 L37 :                          522 C |  L39 :                          531 C |
*L4 :                            E9 C |  L41 :                          5B1 C |
 L42 :                          5D1 C | *L44 :                          6F0 C |
*L45 :                          782 C |  L46 :                          A9E C |
 L47 :                          7BE C |  L49 :                          83A C |
 L50 :                          8E5 C |  L52 :                          8E5 C |
 L54 :                         1F0C C |  L55 :                          972 C |
 L56 :                          9AE C |  L58 :                          A87 C |
*L59 :                          A87 C | *L61 :                          AC6 C |
 L62 :                         1EF1 C | *L63 :                          B10 C |
 L64 :                          ACB C | *L65 :                          B52 C |
*L66 :                          C00 C |  L67 :                         1EDD C |
 L68 :                         1EDB C | *L7 :                           439 C |
 L72 :                         1ED7 C | *L73 :                          E0C C |
 L74 :                          C05 C |  L75 :                          C94 C |
 L76 :                          CDF C |  L77 :                          D29 C |
 L78 :                         1EC8 C |  L79 :                          DAD C |
 L8 :                            F0 C |  L81 :                         1EC0 C |
 L82 :                          DDC C |  L83 :                          DE5 C |
 L84 :                         1EBB C |  L85 :                         1EB5 C |
 L86 :                          E91 C |  L87 :                          E49 C |
*L88 :                          E78 C |  L9 :                            F6 C |
 L90 :                          E79 C |  L91 :                          E78 C |
*L93 :                          F70 C |  L94 :                          EE3 C |
 L95 :                          F01 C | *L99 :                         1069 C |
 LCC1802INIT :                 1F5E C | *LISTON :                         1 - |
 LOOP240 :                     1B8A C |  LOOP241 :                     1BCA C |
 LOOP242 :                     1C0E C |  LOOP248 :                     1C58 C |
 LOOP280 :                     210F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP281 :                    2177 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP276 :                     201E C |  MULTLOOP16_16277 :            202B C |
 MULTSKIP16_16277 :            203D C | *NESTMAX :                      100 - |
 NORESTORE280 :                215D C |  OUTIT144 :                    119C C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS1279 :                     20B3 C |  POS1282 :                     2226 C |
 POS2279 :                     20C3 C |  POS2282 :                     224D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 56 - 6/21/2013 15:55:37


 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SENDBDY :                     1C34 C |
 SETBITOFF144 :                1197 C |  SHIFT281 :                    21AE C |
 SP :                             2 - | *SPIMOSI :                        7 - |
 SPISCK :                         5 - |  SUBPC :                          3 - |
*TIME :                    15:55:37 - | *TRUE :                           1 - |
 UPNXT283 :                    22F0 C | *VERSION :                     142F - |
 ZEROIN240 :                   1B9B C |  ZEROIN241 :                   1BDB C |
 ZEROIN248 :                   1C5E C |  _00000268 :                   1F78 C |
 _BUF :                        1C78 C |  _CALL :                       2001 C |
 _CLOSE0 :                      4C6 C |  _CMDIP :                         6 C |
 _DELAY :                      113F C |  _DIE268 :                     1F7B C |
*_DIGITALREAD :                11A8 C |  _DIGITALWRITE :               1180 C |
 _DISCONNECT0 :                 49D C |  _DIVI2 :                      20A4 C |
 _DIVI4 :                      2200 C |  _DIVU2 :                      2049 C |
 _DIVU4 :                      2100 C |  _DUBDABX :                    2275 C |
*_EXIT :                       1A23 C |  _FLUSH :                       5FE C |
 _HANDLEPOST :                  EA8 C |  _HANDLESESSION :               F75 C |
*_INP :                        2345 C |  _ITOA :                       12E1 C |
 _LEDMODE :                       4 C |  _LTOA :                       1475 C |
 _MAIN :                       1078 C | *_MEMCMP :                     1A51 C |
*_MEMCPY :                     1ADE C | *_MEMSET :                     1B34 C |
*_MODI2 :                      1F8C C | *_MODI4 :                      231E C |
*_MODU2 :                      1F84 C | *_MODU4 :                      2312 C |
*_MULU2 :                      2023 C | *_MULU4 :                      2166 C |
*_OLDUINOINCLUDER :            117D C |  _ONEMS :                      201C C |
 _OUT :                        235F C | *_OUT4 :                       1F94 C |
*_OUT5 :                       2340 C |  _PAGEHITS :                      E C |
 _PIN4 :                          3 C |  _PRINTF :                     16E9 C |
 _PRINTINT :                   1550 C |  _PRINTLINT :                  1592 C |
 _PRINTSTR :                   12A7 C |  _PUTC :                       2340 C |
 _PUTX :                       1676 C |  _PUTXN :                      15F2 C |
 _RECV0 :                       4EF C |  _RECV_SIZE :                   6FB C |
 _RETURN :                     2012 C |  _SEND0 :                       789 C |
 _SEND0S :                      B17 C | *_SENDACK :                     ADF C |
 _SENDFORM :                    D3C C |  _SENDIP :                      B57 C |
 _SENDNAK :                     AB9 C |  _SENDWIZRD :                  1C20 C |
 _SENDWIZWRT :                 1C2B C | *_SETQOFF :                    1F82 C |
*_SETQON :                     1F80 C |  _SHIFTINF :                   1C51 C |
 _SHIFTOUTF :                  1C00 C |  _SOCKET0_INIT :                442 C |
*_SPINCLUDER :                 1B7A C |  _SPI_READ :                     86 C |
 _SPI_WRITE :                    10 C |  _STRBUF :                     1C68 C |
 _STRCPY :                     125F C | *_STRINDEX :                    E15 C |
 _STRLEN :                     128A C |  _STRNCMP :                    11B1 C |
 _W5100_INIT :                  102 C | *_XFERSPIF :                   1B80 C |
*_XFERSPIF2 :                  1BC0 C | *_XFERSPIF3 :                  1C51 C |
*__FORW10 :                    2370 C |  __FORW4 :                     11AF C |
 __FORW9 :                     235C C |

    347 symbols
    106 unused symbols
 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 57 - 6/21/2013 15:55:37



 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 58 - 6/21/2013 15:55:37


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | DEMOTE                               
INC4                                  | INCM                                 
JCF4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU1                                
JNZU2                                 | JUMPV                                
JZU1                                  | JZU2                                 
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | LDN1                                 
NEGI2                                 | NEGI4                                
POPR                                  | PUSHR                                
RELEASE                               | RELEASEL                             
RELEASES                              | RESERVE                              
RESERVEL                              | RESERVES                             
RLDMI                                 | SAVMI                                
SEXT                                  | SEXT4                                
SHL2                                  | SHL2I                                
SHL2R                                 | SHL4                                 
SHL4I                                 | SHL4R                                
SHLC4                                 | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST4                                   | STR1                                 
ZEXT                                  | ZEXT4                                

     84 macros

 AS V1.42 Beta [Bld 87] - source file olduinoserver4.asm - page 59 - 6/21/2013 15:55:37


  codepages:
  ----------

STANDARD (0 changed characters)


0.09 seconds assembly time

   3935 lines source file
  11244 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
