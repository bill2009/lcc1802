 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 1 - 6/2/2013 16:37:30


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Sun Jun 02 16:37:00 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  840/       0 :                     	listing	on
(1)  841/       0 : C0 28 B4            	lbr	lcc1802Init
(1)  842/       3 :                     	
(1)  843/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _enablechip:
      15/       4 : (MACRO)             	reserve 4
      16/       8 :                     ;void enablechip () { //pull cs low
      17/       8 :                     ;  setqoff();//digitalWrite(wizss,LOW);
      18/       8 : (MACRO)             	Ccall _setqoff; CALLI2(ar)
      19/       B :                     ;}
      20/       B :                     L1:
      21/       B : (MACRO)             	release 4
      22/       F : (MACRO)             	Cretn
      23/      10 :                     
      24/      10 :                     _disablechip:
      25/      10 : (MACRO)             	reserve 4
      26/      14 :                     ; void disablechip () {
      27/      14 :                     ;  setqon();//digitalWrite(wizss,HIGH);
      28/      14 : (MACRO)             	Ccall _setqon; CALLI2(ar)
      29/      17 :                     ;}
      30/      17 :                     L2:
      31/      17 : (MACRO)             	release 4
      32/      1B : (MACRO)             	Cretn
      33/      1C :                     
      34/      1C :                     _xferspi:
      35/      1C : (MACRO)             	pushr r6
      36/      21 : (MACRO)             	pushr r7
      37/      26 : (MACRO)             	reserve 4; save room for outgoing arguments
      38/      2A : (MACRO)             	cpy2 r7,r12; function(1030) 1
      39/      2E :                     ;unsigned char xferspi(unsigned char value){
      40/      2E :                     ;  for(i=0;i<8;i++){
      41/      2E : (MACRO)             	ld2z R6
      42/      32 :                     L4:
      43/      32 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
      44/      32 : (MACRO)             	ldaD R12,7; reg:acon
      45/      38 : (MACRO)             	cpy1 R11,R7
      46/      3A : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      47/      3D : (MACRO)             	alu2I R11,R11,128,ani,ani
      48/      45 :                     	;removed ?	cpy2 R11,R11
      49/      45 : (MACRO)             	cpy1 R13,R11
      50/      47 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      51/      4A : (MACRO)             	Ccall _digitalWrite
      52/      4D :                     ;    value=(value<<1)|digitalRead(miso);;
      53/      4D : (MACRO)             	ldaD R12,15; reg:acon
      54/      53 : (MACRO)             	Ccall _digitalRead; CALLI2(ar)
      55/      56 : (MACRO)             	cpy1 R10,R7
      56/      58 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      57/      5B : (MACRO)             	shl2I R10,1
      58/      61 : (MACRO)             	alu2 R11,R10,R15,or,or
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 2 - 6/2/2013 16:37:30


      59/      6D : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
      60/      6F :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
      61/      6F : (MACRO)             	ldaD R12,5; reg:acon
      62/      75 : (MACRO)             	ldaD R13,1; reg:acon
      63/      7B : (MACRO)             	Ccall _digitalWrite
      64/      7E :                     ;    digitalWrite(sck,LOW);
      65/      7E : (MACRO)             	ldaD R12,5; reg:acon
      66/      84 : (MACRO)             	ld2z R13
      67/      88 : (MACRO)             	Ccall _digitalWrite
      68/      8B :                     ;  }
      69/      8B :                     L5:
      70/      8B :                     ;  for(i=0;i<8;i++){
      71/      8B : (MACRO)             	incm R6,1
      72/      8C : (MACRO)             	jcI2I r6,8,lbnf,L4  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
      73/      9D :                     ;  return value;
      74/      9D : (MACRO)             	cpy1 R15,R7
      75/      9F : (MACRO)             	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      76/      A2 :                     L3:
      77/      A2 : (MACRO)             	release 4; release room for outgoing arguments
      78/      A6 : (MACRO)             	popr r7
      79/      AA : (MACRO)             	popr r6
      80/      AE : (MACRO)             	Cretn
      81/      AF :                     
      82/      AF :                     _xferspi2:
      83/      AF : (MACRO)             	pushr r6
      84/      B4 : (MACRO)             	pushr r7
      85/      B9 : (MACRO)             	reserve 4; save room for outgoing arguments
      86/      BD : (MACRO)             	cpy2 r7,r12; function(2054) 1
      87/      C1 :                     ;unsigned char xferspi2(unsigned int value){
      88/      C1 :                     ;  for(i=0;i<8;i++){
      89/      C1 : (MACRO)             	ld2z R6
      90/      C5 :                     L9:
      91/      C5 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
      92/      C5 : (MACRO)             	ldaD R12,7; reg:acon
      93/      CB : (MACRO)             	alu2I R11,R7,128,ani,ani ;removed copy;BANDU2(reg,con)  
      94/      D3 : (MACRO)             	cpy1 R13,R11
      95/      D5 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
      96/      D8 : (MACRO)             	Ccall _digitalWrite
      97/      DB :                     ;    value=(value<<1)|digitalRead(miso);;
      98/      DB : (MACRO)             	ldaD R12,15; reg:acon
      99/      E1 : (MACRO)             	Ccall _digitalRead; CALLI2(ar)
     100/      E4 : (MACRO)             	cpy2 R10,R7
     101/      E8 : (MACRO)             	shl2I R10,1
     102/      EE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     103/      F2 : (MACRO)             	alu2 R7,R10,R11,or,or
     104/      FE :                     ;    out(1,PIN4);              //then pulsing the clock
     105/      FE : (MACRO)             	ldaD R12,1; reg:acon
     106/     104 : (MACRO)             	ld1 R13,'D',(_PIN4),0
     107/     10C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     108/     10F : (MACRO)             	Ccall _out; CALLI2(ar)
     109/     112 :                     ;  }
     110/     112 :                     L10:
     111/     112 :                     ;  for(i=0;i<8;i++){
     112/     112 : (MACRO)             	incm R6,1
     113/     113 : (MACRO)             	jcI2I r6,8,lbnf,L9  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     114/     124 :                     ;  return value;
     115/     124 : (MACRO)             	cpy1 R11,R7;LOADU1(reg)
     116/     126 : (MACRO)             	cpy1 R15,R11
     117/     128 : (MACRO)             	zExt R15 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     118/     12B :                     L8:
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 3 - 6/2/2013 16:37:30


     119/     12B : (MACRO)             	release 4; release room for outgoing arguments
     120/     12F : (MACRO)             	popr r7
     121/     133 : (MACRO)             	popr r6
     122/     137 : (MACRO)             	Cretn
     123/     138 :                     
     124/     138 :                     _SPI_Write:
     125/     138 : (MACRO)             	reserve 6
     126/     13E : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     127/     14B : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     128/     158 : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     129/     164 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     130/     16E :                     ;{
     131/     16E :                     ;  enableroutine();   	// Activate the CS pin
     132/     16E :                     ;  spiroutine1(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
     133/     16E : 7A                  	req
     134/     16F : (MACRO)             	ldaD R12,240; reg:acon
     135/     175 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     136/     178 :                     ;  spiroutine1(addr >>8);// was((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
     137/     178 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     138/     184 : (MACRO)             	cpy2 R12,R11
     139/     188 : 9C                  	ghi	R12	;opt2
     140/     189 : AC                  	plo	R12
     141/     18A : F8 00               	ldi	0
     142/     18C : BC                  	phi	R12
     143/     18D : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     144/     190 :                     ;  spiroutine1(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
     145/     190 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     146/     19C : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     147/     1A4 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     148/     1A7 :                     ;  spiroutine2(data);			// Send the data byte
     149/     1A7 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     150/     1B1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     151/     1B4 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
     152/     1B8 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     153/     1BB :                     ;  disableroutine();	// make CS pin not active
     154/     1BB : 7B                  	seq
     155/     1BC :                     ;}
     156/     1BC :                     L13:
     157/     1BC : (MACRO)             	release 6
     158/     1C2 : (MACRO)             	Cretn
     159/     1C3 :                     
     160/     1C3 :                     _SPI_Read:
     161/     1C3 : (MACRO)             	reserve 6
     162/     1C9 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     163/     1D6 :                     ;{
     164/     1D6 :                     ;  unsigned char data=0; //dummy
     165/     1D6 : (MACRO)             	ldaD R11,0; reg:acon
     166/     1DC : (MACRO)             	st1 R11,'O',sp,(-4+8); ASGNU1
     167/     1E6 :                     ;  enableroutine();   	// Activate the CS pin
     168/     1E6 :                     ;  spiroutine1(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
     169/     1E6 : 7A                  	req
     170/     1E7 : (MACRO)             	ldaD R12,15; reg:acon
     171/     1ED : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     172/     1F0 :                     ;  spiroutine1(addr >>8);// ((addr & 0xFF00)>>8);  // Send Wiznet W5100 Address High Byte
     173/     1F0 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     174/     1FC : (MACRO)             	cpy2 R12,R11
     175/     200 : 9C                  	ghi	R12	;opt2
     176/     201 : AC                  	plo	R12
     177/     202 : F8 00               	ldi	0
     178/     204 : BC                  	phi	R12
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 4 - 6/2/2013 16:37:30


     179/     205 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     180/     208 :                     ;  spiroutine1(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
     181/     208 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     182/     214 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     183/     21C : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     184/     21F :                     ;  value=spiroutine2(0x00);	// Send Dummy transmission to read the data
     185/     21F : (MACRO)             	ld2z R12
     186/     223 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
     187/     226 : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
     188/     228 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     189/     232 :                     ;  disableroutine();	// make CS pin not active
     190/     232 :                     ;  return(value);
     191/     232 : 7B                  	seq
     192/     233 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
     193/     23D : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
     194/     240 :                     L16:
     195/     240 : (MACRO)             	release 6
     196/     246 : (MACRO)             	Cretn
     197/     247 :                     
     198/     247 :                     L20:
     199/     247 : DE                  	db 222
     200/     248 : AD                  	db 173
     201/     249 : BE                  	db 190
     202/     24A : EF                  	db 239
     203/     24B : FE                  	db 254
     204/     24C : ED                  	db 237
     205/     24D :                     L21:
     206/     24D : C0                  	db 192
     207/     24E : A8                  	db 168
     208/     24F : 01                  	db 1
     209/     250 : B6                  	db 182
     210/     251 :                     L22:
     211/     251 : FF                  	db 255
     212/     252 : FF                  	db 255
     213/     253 : FF                  	db 255
     214/     254 : 00                  	db 0
     215/     255 :                     L23:
     216/     255 : C0                  	db 192
     217/     256 : A8                  	db 168
     218/     257 : 01                  	db 1
     219/     258 : 01                  	db 1
     220/     259 :                     _W5100_Init:
     221/     259 : (MACRO)             	reserve 50
     222/     263 :                     ;{
     223/     263 :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     224/     263 : (MACRO)             	ldA2 R11,'O',sp,(-8+52); reg:addr
     225/     26B : (MACRO)             	ldaD R8,L20; reg:acon
     226/     271 : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     227/     286 :                     ;  unsigned char ip_addr[] = {192,168,1,182};
     228/     286 : (MACRO)             	ldA2 R11,'O',sp,(-12+52); reg:addr
     229/     28E : (MACRO)             	ldaD R8,L21; reg:acon
     230/     294 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     231/     2A9 :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     232/     2A9 : (MACRO)             	ldA2 R11,'O',sp,(-16+52); reg:addr
     233/     2B1 : (MACRO)             	ldaD R8,L22; reg:acon
     234/     2B7 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     235/     2CC :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     236/     2CC : (MACRO)             	ldA2 R11,'O',sp,(-20+52); reg:addr
     237/     2D4 : (MACRO)             	ldaD R8,L23; reg:acon
     238/     2DA : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 5 - 6/2/2013 16:37:30


     239/     2EF :                     ;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
     240/     2EF : (MACRO)             	ld2z R12
     241/     2F3 : (MACRO)             	ldaD R13,128; reg:acon
     242/     2F9 : (MACRO)             	Ccall _SPI_Write
     243/     2FC :                     ;  printf("MR=%x\n",SPI_Read(MR));
     244/     2FC : (MACRO)             	ld2z R12
     245/     300 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     246/     303 : (MACRO)             	ldaD R12,L24; reg:acon
     247/     309 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     248/     30D : (MACRO)             	cpy1 R13,R11
     249/     30F : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     250/     312 : (MACRO)             	Ccall _printf
     251/     315 :                     ;  delay(1);
     252/     315 : (MACRO)             	ldaD R12,1; reg:acon
     253/     31B : (MACRO)             	Ccall _delay
     254/     31E :                     ;  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],
     255/     31E : (MACRO)             	ldaD R12,L25; reg:acon
     256/     324 : (MACRO)             	ld1 R13,'O',sp,(-20+52)
     257/     32E : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     258/     331 : (MACRO)             	ld1 R11,'O',sp,(-19+52)
     259/     33B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     260/     33E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     261/     34B : (MACRO)             	ld1 R11,'O',sp,(-18+52)
     262/     355 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     263/     358 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     264/     365 : (MACRO)             	ld1 R11,'O',sp,(-17+52)
     265/     36F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     266/     372 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     267/     37F : (MACRO)             	Ccall _printf
     268/     382 :                     ;  SPI_Write(GAR + 0,gtw_addr[0]);
     269/     382 : (MACRO)             	ldaD R12,1; reg:acon
     270/     388 : (MACRO)             	ld1 R13,'O',sp,(-20+52)
     271/     392 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     272/     395 : (MACRO)             	Ccall _SPI_Write
     273/     398 :                     ;  SPI_Write(GAR + 1,gtw_addr[1]);
     274/     398 : (MACRO)             	ldaD R12,2; reg:acon
     275/     39E : (MACRO)             	ld1 R13,'O',sp,(-19+52)
     276/     3A8 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     277/     3AB : (MACRO)             	Ccall _SPI_Write
     278/     3AE :                     ;  SPI_Write(GAR + 2,gtw_addr[2]);
     279/     3AE : (MACRO)             	ldaD R12,3; reg:acon
     280/     3B4 : (MACRO)             	ld1 R13,'O',sp,(-18+52)
     281/     3BE : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     282/     3C1 : (MACRO)             	Ccall _SPI_Write
     283/     3C4 :                     ;  SPI_Write(GAR + 3,gtw_addr[3]);
     284/     3C4 : (MACRO)             	ldaD R12,4; reg:acon
     285/     3CA : (MACRO)             	ld1 R13,'O',sp,(-17+52)
     286/     3D4 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     287/     3D7 : (MACRO)             	Ccall _SPI_Write
     288/     3DA :                     ;  delay(1);
     289/     3DA : (MACRO)             	ldaD R12,1; reg:acon
     290/     3E0 : (MACRO)             	Ccall _delay
     291/     3E3 :                     ;  printf("Setting Source Address %x:%x:%x:%x:%x:%x\n",mac_addr[0],mac_addr[1],
     292/     3E3 : (MACRO)             	ldaD R12,L32; reg:acon
     293/     3E9 : (MACRO)             	ld1 R13,'O',sp,(-8+52)
     294/     3F3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     295/     3F6 : (MACRO)             	ld1 R11,'O',sp,(-7+52)
     296/     400 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     297/     403 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     298/     410 : (MACRO)             	ld1 R11,'O',sp,(-6+52)
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 6 - 6/2/2013 16:37:30


     299/     41A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     300/     41D : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     301/     42A : (MACRO)             	ld1 R11,'O',sp,(-5+52)
     302/     434 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     303/     437 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     304/     444 : (MACRO)             	ld1 R11,'O',sp,(-4+52)
     305/     44E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     306/     451 : (MACRO)             	st2 r11,'O',sp,(10); arg+f**
     307/     45E : (MACRO)             	ld1 R11,'O',sp,(-3+52)
     308/     468 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     309/     46B : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     310/     478 : (MACRO)             	Ccall _printf
     311/     47B :                     ;  SPI_Write(SAR + 0,mac_addr[0]);
     312/     47B : (MACRO)             	ldaD R12,9; reg:acon
     313/     481 : (MACRO)             	ld1 R13,'O',sp,(-8+52)
     314/     48B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     315/     48E : (MACRO)             	Ccall _SPI_Write
     316/     491 :                     ;  SPI_Write(SAR + 1,mac_addr[1]);
     317/     491 : (MACRO)             	ldaD R12,10; reg:acon
     318/     497 : (MACRO)             	ld1 R13,'O',sp,(-7+52)
     319/     4A1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     320/     4A4 : (MACRO)             	Ccall _SPI_Write
     321/     4A7 :                     ;  SPI_Write(SAR + 2,mac_addr[2]);
     322/     4A7 : (MACRO)             	ldaD R12,11; reg:acon
     323/     4AD : (MACRO)             	ld1 R13,'O',sp,(-6+52)
     324/     4B7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     325/     4BA : (MACRO)             	Ccall _SPI_Write
     326/     4BD :                     ;  SPI_Write(SAR + 3,mac_addr[3]);
     327/     4BD : (MACRO)             	ldaD R12,12; reg:acon
     328/     4C3 : (MACRO)             	ld1 R13,'O',sp,(-5+52)
     329/     4CD : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     330/     4D0 : (MACRO)             	Ccall _SPI_Write
     331/     4D3 :                     ;  SPI_Write(SAR + 4,mac_addr[4]);
     332/     4D3 : (MACRO)             	ldaD R12,13; reg:acon
     333/     4D9 : (MACRO)             	ld1 R13,'O',sp,(-4+52)
     334/     4E3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     335/     4E6 : (MACRO)             	Ccall _SPI_Write
     336/     4E9 :                     ;  SPI_Write(SAR + 5,mac_addr[5]);
     337/     4E9 : (MACRO)             	ldaD R12,14; reg:acon
     338/     4EF : (MACRO)             	ld1 R13,'O',sp,(-3+52)
     339/     4F9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     340/     4FC : (MACRO)             	Ccall _SPI_Write
     341/     4FF :                     ;  delay(1);
     342/     4FF : (MACRO)             	ldaD R12,1; reg:acon
     343/     505 : (MACRO)             	Ccall _delay
     344/     508 :                     ;  printf("Setting Subnet Mask  %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],sub_mask[2],sub_mask[3]);
     345/     508 : (MACRO)             	ldaD R12,L43; reg:acon
     346/     50E : (MACRO)             	ld1 R13,'O',sp,(-16+52)
     347/     518 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     348/     51B : (MACRO)             	ld1 R11,'O',sp,(-15+52)
     349/     525 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     350/     528 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     351/     535 : (MACRO)             	ld1 R11,'O',sp,(-14+52)
     352/     53F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     353/     542 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     354/     54F : (MACRO)             	ld1 R11,'O',sp,(-13+52)
     355/     559 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     356/     55C : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     357/     569 : (MACRO)             	Ccall _printf
     358/     56C :                     ;  SPI_Write(SUBR + 0,sub_mask[0]);
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 7 - 6/2/2013 16:37:30


     359/     56C : (MACRO)             	ldaD R12,5; reg:acon
     360/     572 : (MACRO)             	ld1 R13,'O',sp,(-16+52)
     361/     57C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     362/     57F : (MACRO)             	Ccall _SPI_Write
     363/     582 :                     ;  SPI_Write(SUBR + 1,sub_mask[1]);
     364/     582 : (MACRO)             	ldaD R12,6; reg:acon
     365/     588 : (MACRO)             	ld1 R13,'O',sp,(-15+52)
     366/     592 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     367/     595 : (MACRO)             	Ccall _SPI_Write
     368/     598 :                     ;  SPI_Write(SUBR + 2,sub_mask[2]);
     369/     598 : (MACRO)             	ldaD R12,7; reg:acon
     370/     59E : (MACRO)             	ld1 R13,'O',sp,(-14+52)
     371/     5A8 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     372/     5AB : (MACRO)             	Ccall _SPI_Write
     373/     5AE :                     ;  SPI_Write(SUBR + 3,sub_mask[3]);
     374/     5AE : (MACRO)             	ldaD R12,8; reg:acon
     375/     5B4 : (MACRO)             	ld1 R13,'O',sp,(-13+52)
     376/     5BE : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     377/     5C1 : (MACRO)             	Ccall _SPI_Write
     378/     5C4 :                     ;  delay(1);
     379/     5C4 : (MACRO)             	ldaD R12,1; reg:acon
     380/     5CA : (MACRO)             	Ccall _delay
     381/     5CD :                     ;  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],ip_addr[2],ip_addr[3]);
     382/     5CD : (MACRO)             	ldaD R12,L50; reg:acon
     383/     5D3 : (MACRO)             	ld1 R13,'O',sp,(-12+52)
     384/     5DD : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     385/     5E0 : (MACRO)             	ld1 R11,'O',sp,(-11+52)
     386/     5EA : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     387/     5ED : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     388/     5FA : (MACRO)             	ld1 R11,'O',sp,(-10+52)
     389/     604 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     390/     607 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     391/     614 : (MACRO)             	ld1 R11,'O',sp,(-9+52)
     392/     61E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     393/     621 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     394/     62E : (MACRO)             	Ccall _printf
     395/     631 :                     ;  SPI_Write(SIPR + 0,ip_addr[0]);
     396/     631 : (MACRO)             	ldaD R12,15; reg:acon
     397/     637 : (MACRO)             	ld1 R13,'O',sp,(-12+52)
     398/     641 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     399/     644 : (MACRO)             	Ccall _SPI_Write
     400/     647 :                     ;  SPI_Write(SIPR + 1,ip_addr[1]);
     401/     647 : (MACRO)             	ldaD R12,16; reg:acon
     402/     64D : (MACRO)             	ld1 R13,'O',sp,(-11+52)
     403/     657 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     404/     65A : (MACRO)             	Ccall _SPI_Write
     405/     65D :                     ;  SPI_Write(SIPR + 2,ip_addr[2]);
     406/     65D : (MACRO)             	ldaD R12,17; reg:acon
     407/     663 : (MACRO)             	ld1 R13,'O',sp,(-10+52)
     408/     66D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     409/     670 : (MACRO)             	Ccall _SPI_Write
     410/     673 :                     ;  SPI_Write(SIPR + 3,ip_addr[3]);
     411/     673 : (MACRO)             	ldaD R12,18; reg:acon
     412/     679 : (MACRO)             	ld1 R13,'O',sp,(-9+52)
     413/     683 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     414/     686 : (MACRO)             	Ccall _SPI_Write
     415/     689 :                     ;  delay(1);
     416/     689 : (MACRO)             	ldaD R12,1; reg:acon
     417/     68F : (MACRO)             	Ccall _delay
     418/     692 :                     ;  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 8 - 6/2/2013 16:37:30


     419/     692 : (MACRO)             	ldaD R12,15; reg:acon
     420/     698 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     421/     69B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     422/     69F : (MACRO)             	st2 R11,'O',sp,(-22+52); ASGNI2(addr,reg)*;
     423/     6AC : (MACRO)             	ldaD R12,16; reg:acon
     424/     6B2 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     425/     6B5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     426/     6B9 : (MACRO)             	st2 R11,'O',sp,(-24+52); ASGNI2(addr,reg)*;
     427/     6C6 : (MACRO)             	ldaD R12,17; reg:acon
     428/     6CC : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     429/     6CF : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     430/     6D3 : (MACRO)             	st2 R11,'O',sp,(-26+52); ASGNI2(addr,reg)*;
     431/     6E0 : (MACRO)             	ldaD R12,18; reg:acon
     432/     6E6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     433/     6E9 : (MACRO)             	ldaD R12,L57; reg:acon
     434/     6EF : (MACRO)             	ld2 R10,'O',sp,(-22+52) ;reg:INDIRI2(addr)
     435/     6FB : (MACRO)             	cpy1 R13,R10
     436/     6FD : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     437/     700 : (MACRO)             	ld2 R10,'O',sp,(-24+52) ;reg:INDIRI2(addr)
     438/     70C : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     439/     70F : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     440/     71C : (MACRO)             	ld2 R10,'O',sp,(-26+52) ;reg:INDIRI2(addr)
     441/     728 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     442/     72B : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     443/     738 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     444/     73C : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     445/     73F : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     446/     74C : (MACRO)             	Ccall _printf
     447/     74F :                     ;  printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
     448/     74F : (MACRO)             	ldaD R12,5; reg:acon
     449/     755 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     450/     758 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     451/     75C : (MACRO)             	st2 R11,'O',sp,(-28+52); ASGNI2(addr,reg)*;
     452/     769 : (MACRO)             	ldaD R12,6; reg:acon
     453/     76F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     454/     772 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     455/     776 : (MACRO)             	st2 R11,'O',sp,(-30+52); ASGNI2(addr,reg)*;
     456/     783 : (MACRO)             	ldaD R12,7; reg:acon
     457/     789 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     458/     78C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     459/     790 : (MACRO)             	st2 R11,'O',sp,(-32+52); ASGNI2(addr,reg)*;
     460/     79D : (MACRO)             	ldaD R12,8; reg:acon
     461/     7A3 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     462/     7A6 : (MACRO)             	ldaD R12,L58; reg:acon
     463/     7AC : (MACRO)             	ld2 R10,'O',sp,(-28+52) ;reg:INDIRI2(addr)
     464/     7B8 : (MACRO)             	cpy1 R13,R10
     465/     7BA : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     466/     7BD : (MACRO)             	ld2 R10,'O',sp,(-30+52) ;reg:INDIRI2(addr)
     467/     7C9 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     468/     7CC : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     469/     7D9 : (MACRO)             	ld2 R10,'O',sp,(-32+52) ;reg:INDIRI2(addr)
     470/     7E5 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     471/     7E8 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     472/     7F5 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     473/     7F9 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     474/     7FC : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     475/     809 : (MACRO)             	Ccall _printf
     476/     80C :                     ;  printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),SPI_Read(GAR + 2),SPI_Read(GAR + 3));
     477/     80C : (MACRO)             	ldaD R12,1; reg:acon
     478/     812 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 9 - 6/2/2013 16:37:30


     479/     815 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     480/     819 : (MACRO)             	st2 R11,'O',sp,(-34+52); ASGNI2(addr,reg)*;
     481/     826 : (MACRO)             	ldaD R12,2; reg:acon
     482/     82C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     483/     82F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     484/     833 : (MACRO)             	st2 R11,'O',sp,(-36+52); ASGNI2(addr,reg)*;
     485/     840 : (MACRO)             	ldaD R12,3; reg:acon
     486/     846 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     487/     849 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     488/     84D : (MACRO)             	st2 R11,'O',sp,(-38+52); ASGNI2(addr,reg)*;
     489/     85A : (MACRO)             	ldaD R12,4; reg:acon
     490/     860 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     491/     863 : (MACRO)             	ldaD R12,L59; reg:acon
     492/     869 : (MACRO)             	ld2 R10,'O',sp,(-34+52) ;reg:INDIRI2(addr)
     493/     875 : (MACRO)             	cpy1 R13,R10
     494/     877 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     495/     87A : (MACRO)             	ld2 R10,'O',sp,(-36+52) ;reg:INDIRI2(addr)
     496/     886 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     497/     889 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     498/     896 : (MACRO)             	ld2 R10,'O',sp,(-38+52) ;reg:INDIRI2(addr)
     499/     8A2 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     500/     8A5 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     501/     8B2 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     502/     8B6 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     503/     8B9 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     504/     8C6 : (MACRO)             	Ccall _printf
     505/     8C9 :                     ;  printf("Setting Wiznet RMSR and TMSR\n\n");
     506/     8C9 : (MACRO)             	ldaD R12,L60; reg:acon
     507/     8CF : (MACRO)             	Ccall _printf
     508/     8D2 :                     ;  SPI_Write(RMSR,0x55);
     509/     8D2 : (MACRO)             	ldaD R12,26; reg:acon
     510/     8D8 : (MACRO)             	ldaD R13,85; reg:acon
     511/     8DE : (MACRO)             	Ccall _SPI_Write
     512/     8E1 :                     ;  SPI_Write(TMSR,0x55);
     513/     8E1 : (MACRO)             	ldaD R12,27; reg:acon
     514/     8E7 : (MACRO)             	ldaD R13,85; reg:acon
     515/     8ED : (MACRO)             	Ccall _SPI_Write
     516/     8F0 :                     ;  printf("Done Wiznet W5100 Initialization!\n");
     517/     8F0 : (MACRO)             	ldaD R12,L61; reg:acon
     518/     8F6 : (MACRO)             	Ccall _printf
     519/     8F9 :                     ;}
     520/     8F9 :                     L19:
     521/     8F9 : (MACRO)             	release 50
     522/     901 : (MACRO)             	Cretn
     523/     902 :                     
     524/     902 :                     _disconnect:
     525/     902 : (MACRO)             	reserve 4
     526/     906 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     527/     913 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     528/     91F : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     529/     929 :                     ;{
     530/     929 :                     ;   if (sock != 0) return; // Send Disconnect Command
     531/     929 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     532/     933 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     533/     936 : (MACRO)             	jzU2 r11,L63; EQ 0
     534/     93E : C0 09 61            	lbr L62
     535/     941 :                     L63:
     536/     941 :                     ;   SPI_Write(S0_CR,CR_DISCON); // Wait for Disconecting Process
     537/     941 : (MACRO)             	ldaD R12,1025; reg:acon
     538/     947 : (MACRO)             	ldaD R13,8; reg:acon
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 10 - 6/2/2013 16:37:30


     539/     94D : (MACRO)             	Ccall _SPI_Write
     540/     950 :                     L65:
     541/     950 :                     ;   while(SPI_Read(S0_CR));
     542/     950 :                     L66:
     543/     950 : (MACRO)             	ldaD R12,1025; reg:acon
     544/     956 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     545/     959 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     546/     95D : (MACRO)             	jnzU1 r11,L65; NEI2(CVUI2(reg),con0)
     547/     961 :                     ;}
     548/     961 :                     L62:
     549/     961 : (MACRO)             	release 4
     550/     965 : (MACRO)             	Cretn
     551/     966 :                     
     552/     966 :                     _recv:
     553/     966 : (MACRO)             	reserve 2; save room for local variables
     554/     968 : (MACRO)             	pushr r0
     555/     96D : (MACRO)             	pushr r1
     556/     972 : (MACRO)             	pushr r6
     557/     977 : (MACRO)             	pushr r7
     558/     97C : (MACRO)             	reserve 4; save room for outgoing arguments
     559/     980 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     560/     98D : (MACRO)             	cpy2 r7,r13; function(2055) 1
     561/     991 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     562/     99D : (MACRO)             	st1 R11,'O',sp,(0+16); ASGNU1
     563/     9A7 : (MACRO)             	ld2 R6,'O',sp,(4+16); reg:INDIRU2(addr)
     564/     9B3 :                     ;{
     565/     9B3 :                     ;    if (buflen <= 0 || sock != 0) return 1;
     566/     9B3 : (MACRO)             	jzU2 r6,L71; EQ 0
     567/     9BB : (MACRO)             	ld1 R11,'O',sp,(0+16)
     568/     9C5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     569/     9C8 : (MACRO)             	jzU2 r11,L69; EQ 0
     570/     9D0 :                     L71:
     571/     9D0 : (MACRO)             	ldaD R15,1; reg:acon
     572/     9D6 : C0 0B 85            	lbr L68
     573/     9D9 :                     L69:
     574/     9D9 :                     ;    if (buflen > MAX_BUF)
     575/     9D9 : (MACRO)             	jnU2I r6,512,lbdf,L72 ;LEU2 512 6 L72; LE is flipped test & subtraction
     576/     9E2 :                     ;      buflen=MAX_BUF - 2;
     577/     9E2 : (MACRO)             	ldaD R6,510; reg:acon
     578/     9E8 :                     L72:
     579/     9E8 :                     ;    ptr = SPI_Read(S0_RX_RD);
     580/     9E8 : (MACRO)             	ldaD R12,1064; reg:acon
     581/     9EE : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     582/     9F1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     583/     9F5 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     584/     9F8 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     585/     A05 :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     586/     A05 : (MACRO)             	ldaD R12,1065; reg:acon
     587/     A0B : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     588/     A0E : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
     589/     A1A : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     590/     A22 : (MACRO)             	shl2I R10,8
     591/     A52 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     592/     A56 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     593/     A59 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     594/     A65 :                     ;    printf("RX Buffer: %x\n",offaddr);
     595/     A65 : (MACRO)             	ldaD R12,L74; reg:acon
     596/     A6B : (MACRO)             	cpy2 R13,R1 ;LOADU2(reg)*
     597/     A6F : (MACRO)             	Ccall _printf
     598/     A72 : C0 0A 95            	lbr L76
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 11 - 6/2/2013 16:37:30


     599/     A75 :                     L75:
     600/     A75 :                     ;    while(buflen) {
     601/     A75 :                     ;      buflen--;
     602/     A75 : (MACRO)             	decm R6,1
     603/     A76 :                     ;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     604/     A76 : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     605/     A7E : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     606/     A86 :                     ;      *buf = SPI_Read(realaddr);
     607/     A86 : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     608/     A8A : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     609/     A8D : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     610/     A91 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     611/     A93 :                     ;      offaddr++;
     612/     A93 : (MACRO)             	incm R1,1
     613/     A94 :                     ;      buf++;
     614/     A94 : (MACRO)             	incm R7,1
     615/     A95 :                     ;    }
     616/     A95 :                     L76:
     617/     A95 :                     ;    while(buflen) {
     618/     A95 : (MACRO)             	jnzU2 r6,L75; NE 0
     619/     A9D :                     ;    *buf='\0';        // String terminated character
     620/     A9D : (MACRO)             	ldaD R11,0; reg:acon
     621/     AA3 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     622/     AA5 :                     ;    SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     623/     AA5 : (MACRO)             	ldaD R12,1064; reg:acon
     624/     AAB : (MACRO)             	cpy2 RL10,R1
     625/     AAF : (MACRO)             	zext4 RL10; CVUI4 jan 16
     626/     AB3 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     627/     ABF : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     628/     AD5 : (MACRO)             	shrI4I RL10,8
     629/     B45 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     630/     B49 : (MACRO)             	cpy1 R13,R11
     631/     B4B : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     632/     B4E : (MACRO)             	Ccall _SPI_Write
     633/     B51 :                     ;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     634/     B51 : (MACRO)             	ldaD R12,1065; reg:acon
     635/     B57 : (MACRO)             	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     636/     B5F : (MACRO)             	cpy1 R13,R11
     637/     B61 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     638/     B64 : (MACRO)             	Ccall _SPI_Write
     639/     B67 :                     ;    SPI_Write(S0_CR,CR_RECV);
     640/     B67 : (MACRO)             	ldaD R12,1025; reg:acon
     641/     B6D : (MACRO)             	ldaD R13,64; reg:acon
     642/     B73 : (MACRO)             	Ccall _SPI_Write
     643/     B76 :                     ;    delay(5);    // Wait for Receive Process
     644/     B76 : (MACRO)             	ldaD R12,5; reg:acon
     645/     B7C : (MACRO)             	Ccall _delay
     646/     B7F :                     ;    return 1;
     647/     B7F : (MACRO)             	ldaD R15,1; reg:acon
     648/     B85 :                     L68:
     649/     B85 : (MACRO)             	release 4; release room for outgoing arguments
     650/     B89 : (MACRO)             	popr r7
     651/     B8D : (MACRO)             	popr r6
     652/     B91 : (MACRO)             	popr r1
     653/     B95 : (MACRO)             	popr r0
     654/     B99 : (MACRO)             	release 2; release room for local variables 
     655/     B9B : (MACRO)             	Cretn
     656/     B9C :                     
     657/     B9C :                     _recv_size:
     658/     B9C : (MACRO)             	reserve 6
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 12 - 6/2/2013 16:37:30


     659/     BA2 :                     ;{
     660/     BA2 :                     ;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     661/     BA2 : (MACRO)             	ldaD R12,1062; reg:acon
     662/     BA8 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     663/     BAB : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     664/     BAF : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     665/     BBC : (MACRO)             	ldaD R12,1063; reg:acon
     666/     BC2 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     667/     BC5 : (MACRO)             	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
     668/     BD1 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     669/     BD4 : (MACRO)             	alu2I R10,R10,255,ani,ani
     670/     BDC :                     	;removed ?	cpy2 R10,R10
     671/     BDC : (MACRO)             	shl2I R10,8
     672/     C0C : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     673/     C10 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     674/     C13 : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
     675/     C1F : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     676/     C23 :                     L78:
     677/     C23 : (MACRO)             	release 6
     678/     C29 : (MACRO)             	Cretn
     679/     C2A :                     
     680/     C2A :                     _send:
     681/     C2A : (MACRO)             	reserve 8; save room for local variables
     682/     C32 : (MACRO)             	pushr r0
     683/     C37 : (MACRO)             	pushr r1
     684/     C3C : (MACRO)             	pushr r6
     685/     C41 : (MACRO)             	pushr r7
     686/     C46 : (MACRO)             	reserve 4; save room for outgoing arguments
     687/     C4A : (MACRO)             	cpy2 r7,r12; function(1030) 1
     688/     C4E : (MACRO)             	cpy2 r6,r13; function(2055) 1
     689/     C52 : (MACRO)             	ld2 R1,'O',sp,(4+22); reg:INDIRU2(addr)
     690/     C5E :                     ;{
     691/     C5E :                     ;    if (buflen <= 0 || sock != 0) return 0;
     692/     C5E : (MACRO)             	jzU2 r1,L82; EQ 0
     693/     C66 : (MACRO)             	cpy1 R11,R7
     694/     C68 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     695/     C6B : (MACRO)             	jzU2 r11,L80; EQ 0
     696/     C73 :                     L82:
     697/     C73 : (MACRO)             	ld2z R15
     698/     C77 : C0 0F A9            	lbr L79
     699/     C7A :                     L80:
     700/     C7A :                     ;    printf("Send Size: %d\n",buflen);
     701/     C7A : (MACRO)             	ldaD R12,L83; reg:acon
     702/     C80 : (MACRO)             	cpy2 R13,R1 ;LOADU2(reg)*
     703/     C84 : (MACRO)             	Ccall _printf
     704/     C87 :                     ;    txsize=SPI_Read(SO_TX_FSR);
     705/     C87 : (MACRO)             	ldaD R12,1056; reg:acon
     706/     C8D : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     707/     C90 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     708/     C94 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     709/     C97 : (MACRO)             	cpy2 R0,R11 ;LOADU2(reg)*
     710/     C9B :                     ;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     711/     C9B : (MACRO)             	ldaD R12,1057; reg:acon
     712/     CA1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     713/     CA4 : (MACRO)             	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     714/     CAC : (MACRO)             	shl2I R10,8
     715/     CDC : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     716/     CE0 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     717/     CE3 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     718/     CEF :                     ;    timeout=0;
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 13 - 6/2/2013 16:37:30


     719/     CEF : (MACRO)             	ld2z R11
     720/     CF3 : (MACRO)             	st2 R11,'O',sp,(-8+22); ASGNU2(addr,reg)*
     721/     D00 : C0 0D AA            	lbr L85
     722/     D03 :                     L84:
     723/     D03 :                     ;    while (txsize < buflen) {
     724/     D03 :                     ;      delay(1);
     725/     D03 : (MACRO)             	ldaD R12,1; reg:acon
     726/     D09 : (MACRO)             	Ccall _delay
     727/     D0C :                     ;     txsize=SPI_Read(SO_TX_FSR);
     728/     D0C : (MACRO)             	ldaD R12,1056; reg:acon
     729/     D12 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     730/     D15 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     731/     D19 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     732/     D1C : (MACRO)             	cpy2 R0,R11 ;LOADU2(reg)*
     733/     D20 :                     ;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     734/     D20 : (MACRO)             	ldaD R12,1057; reg:acon
     735/     D26 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     736/     D29 : (MACRO)             	alu2I R10,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     737/     D31 : (MACRO)             	shl2I R10,8
     738/     D61 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     739/     D65 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     740/     D68 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     741/     D74 :                     ;     if (timeout++ > 1000) {
     742/     D74 : (MACRO)             	ld2 R11,'O',sp,(-8+22); reg:INDIRU2(addr)
     743/     D80 : (MACRO)             	cpy2 R10,R11
     744/     D84 : (MACRO)             	incm R10,1
     745/     D85 : (MACRO)             	st2 R10,'O',sp,(-8+22); ASGNU2(addr,reg)*
     746/     D92 : (MACRO)             	jnU2I r11,1000,lbdf,L87 ;LEU2 1000 11 L87; LE is flipped test & subtraction
     747/     D9B :                     ;       disconnect(sock);
     748/     D9B : (MACRO)             	cpy1 R12,R7
     749/     D9D : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     750/     DA0 : (MACRO)             	Ccall _disconnect
     751/     DA3 :                     ;       return 0;
     752/     DA3 : (MACRO)             	ld2z R15
     753/     DA7 : C0 0F A9            	lbr L79
     754/     DAA :                     L87:
     755/     DAA :                     ;   }
     756/     DAA :                     L85:
     757/     DAA :                     ;    while (txsize < buflen) {
     758/     DAA : (MACRO)             	jcU2 r0,r1,lbnf,L84; LT=lbnf i.e. subtract B from A and jump if borrow 
     759/     DB7 :                     ;   ptr = SPI_Read(S0_TX_WR);
     760/     DB7 : (MACRO)             	ldaD R12,1060; reg:acon
     761/     DBD : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     762/     DC0 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     763/     DC4 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     764/     DC7 : (MACRO)             	st2 R11,'O',sp,(-10+22); ASGNU2(addr,reg)*
     765/     DD4 :                     ;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     766/     DD4 : (MACRO)             	ldaD R12,1061; reg:acon
     767/     DDA : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     768/     DDD : (MACRO)             	ld2 R10,'O',sp,(-10+22); reg:INDIRU2(addr)
     769/     DE9 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     770/     DF1 : (MACRO)             	shl2I R10,8
     771/     E21 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     772/     E25 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     773/     E28 : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDU2(r,r)
     774/     E34 : (MACRO)             	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
     775/     E41 : C0 0E A5            	lbr L90
     776/     E44 :                     L89:
     777/     E44 :                     ;    while(buflen) {
     778/     E44 :                     ;      buflen--;
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 14 - 6/2/2013 16:37:30


     779/     E44 : (MACRO)             	decm R1,1
     780/     E45 :                     ;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     781/     E45 : (MACRO)             	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
     782/     E51 : (MACRO)             	alu2I R11,R11,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     783/     E59 : (MACRO)             	ldA2 R11,'O',R11,(16384); reg:addr
     784/     E61 : (MACRO)             	st2 R11,'O',sp,(-6+22); ASGNU2(addr,reg)*
     785/     E6E :                     ;      SPI_Write(realaddr,*buf);
     786/     E6E : (MACRO)             	ld2 R12,'O',sp,(-6+22); reg:INDIRU2(addr)
     787/     E7A : (MACRO)             	ld1 R13,'O',R6,0
     788/     E84 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     789/     E87 : (MACRO)             	Ccall _SPI_Write
     790/     E8A :                     ;      offaddr++;
     791/     E8A : (MACRO)             	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
     792/     E96 : (MACRO)             	incm R11,1
     793/     E97 : (MACRO)             	st2 R11,'O',sp,(-4+22); ASGNU2(addr,reg)*
     794/     EA4 :                     ;      buf++;
     795/     EA4 : (MACRO)             	incm R6,1
     796/     EA5 :                     ;    }
     797/     EA5 :                     L90:
     798/     EA5 :                     ;    while(buflen) {
     799/     EA5 : (MACRO)             	jnzU2 r1,L89; NE 0
     800/     EAD :                     ;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     801/     EAD : (MACRO)             	ldaD R12,1060; reg:acon
     802/     EB3 : (MACRO)             	ld2 RL10,'O',sp,(-4+22)
     803/     EBF : (MACRO)             	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
     804/     EC3 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     805/     ECF : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     806/     EE5 : (MACRO)             	shrI4I RL10,8
     807/     F55 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     808/     F59 : (MACRO)             	cpy1 R13,R11
     809/     F5B : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     810/     F5E : (MACRO)             	Ccall _SPI_Write
     811/     F61 :                     ;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     812/     F61 : (MACRO)             	ldaD R12,1061; reg:acon
     813/     F67 : (MACRO)             	ld2 R11,'O',sp,(-4+22); reg:INDIRU2(addr)
     814/     F73 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     815/     F7B : (MACRO)             	cpy1 R13,R11
     816/     F7D : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     817/     F80 : (MACRO)             	Ccall _SPI_Write
     818/     F83 :                     ;    SPI_Write(S0_CR,CR_SEND);
     819/     F83 : (MACRO)             	ldaD R12,1025; reg:acon
     820/     F89 : (MACRO)             	ldaD R13,32; reg:acon
     821/     F8F : (MACRO)             	Ccall _SPI_Write
     822/     F92 :                     L92:
     823/     F92 :                     ;    while(SPI_Read(S0_CR));
     824/     F92 :                     L93:
     825/     F92 : (MACRO)             	ldaD R12,1025; reg:acon
     826/     F98 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     827/     F9B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     828/     F9F : (MACRO)             	jnzU1 r11,L92; NEI2(CVUI2(reg),con0)
     829/     FA3 :                     ;    return 1;
     830/     FA3 : (MACRO)             	ldaD R15,1; reg:acon
     831/     FA9 :                     L79:
     832/     FA9 : (MACRO)             	release 4; release room for outgoing arguments
     833/     FAD : (MACRO)             	popr r7
     834/     FB1 : (MACRO)             	popr r6
     835/     FB5 : (MACRO)             	popr r1
     836/     FB9 : (MACRO)             	popr r0
     837/     FBD : (MACRO)             	release 8; release room for local variables 
     838/     FC5 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 15 - 6/2/2013 16:37:30


     839/     FC6 :                     
     840/     FC6 :                     _report:
     841/     FC6 : (MACRO)             	reserve 22
     842/     FD0 : (MACRO)             	st2 r12,'O',sp,(24); flag1 
     843/     FDD :                     ;void report(char * where){
     844/     FDD :                     ;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
     845/     FDD : (MACRO)             	ld2z R12
     846/     FE1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     847/     FE4 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     848/     FE8 : (MACRO)             	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
     849/     FF5 : (MACRO)             	ldaD R12,1027; reg:acon
     850/     FFB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     851/     FFE : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     852/    1002 : (MACRO)             	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
     853/    100F : (MACRO)             	ldaD R12,1024; reg:acon
     854/    1015 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     855/    1018 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     856/    101C : (MACRO)             	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
     857/    1029 : (MACRO)             	ldaD R12,1028; reg:acon
     858/    102F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     859/    1032 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     860/    1036 : (MACRO)             	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
     861/    1043 : (MACRO)             	ldaD R12,1029; reg:acon
     862/    1049 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     863/    104C : (MACRO)             	ldaD R12,L96; reg:acon
     864/    1052 : (MACRO)             	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
     865/    105E : (MACRO)             	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
     866/    106A : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     867/    106D : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     868/    107A : (MACRO)             	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
     869/    1086 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     870/    1089 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     871/    1096 : (MACRO)             	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
     872/    10A2 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     873/    10A5 : (MACRO)             	st2 r10,'O',sp,(8); arg+f**
     874/    10B2 : (MACRO)             	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
     875/    10BE : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     876/    10C1 : (MACRO)             	st2 r10,'O',sp,(10); arg+f**
     877/    10CE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     878/    10D2 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     879/    10D5 : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     880/    10E2 : (MACRO)             	Ccall _printf
     881/    10E5 :                     ;}
     882/    10E5 :                     L95:
     883/    10E5 : (MACRO)             	release 22
     884/    10ED : (MACRO)             	Cretn
     885/    10EE :                     
     886/    10EE :                     _dump:
     887/    10EE : (MACRO)             	pushr r6
     888/    10F3 : (MACRO)             	pushr r7
     889/    10F8 : (MACRO)             	reserve 4; save room for outgoing arguments
     890/    10FC : (MACRO)             	cpy2 r7,r12; function(2053) 1
     891/    1100 :                     ;void dump(int addr){
     892/    1100 :                     ;	printf("%x=", addr);
     893/    1100 : (MACRO)             	ldaD R12,L98; reg:acon
     894/    1106 : (MACRO)             	cpy2 R13,R7 ;LOADI2(reg)*
     895/    110A : (MACRO)             	Ccall _printf
     896/    110D :                     ;	for (i=addr;i<addr+32;i++){
     897/    110D : (MACRO)             	cpy2 R6,R7 ;LOADI2(reg)*
     898/    1111 : C0 11 72            	lbr L102
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 16 - 6/2/2013 16:37:30


     899/    1114 :                     L99:
     900/    1114 :                     ;		if ((i%8)==0) printf("%x=",i);
     901/    1114 : (MACRO)             	cpy2 R12,R6 ;LOADI2(reg)*
     902/    1118 : (MACRO)             	ldaD R13,8; reg:acon
     903/    111E : (MACRO)             	Ccall _modi2
     904/    1121 : (MACRO)             	jnzU2 r15,L103; NE 0
     905/    1129 : (MACRO)             	ldaD R12,L98; reg:acon
     906/    112F : (MACRO)             	cpy2 R13,R6 ;LOADI2(reg)*
     907/    1133 : (MACRO)             	Ccall _printf
     908/    1136 :                     L103:
     909/    1136 :                     ;		printf("%x ",SPI_Read(addr));
     910/    1136 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
     911/    113A : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     912/    113D : (MACRO)             	ldaD R12,L105; reg:acon
     913/    1143 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     914/    1147 : (MACRO)             	cpy1 R13,R11
     915/    1149 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     916/    114C : (MACRO)             	Ccall _printf
     917/    114F :                     ;		if ((i%8)==7) printf("\n");
     918/    114F : (MACRO)             	cpy2 R12,R6 ;LOADI2(reg)*
     919/    1153 : (MACRO)             	ldaD R13,8; reg:acon
     920/    1159 : (MACRO)             	Ccall _modi2
     921/    115C : (MACRO)             	jneU2I r15,7,L106; NE
     922/    1168 : (MACRO)             	ldaD R12,L108; reg:acon
     923/    116E : (MACRO)             	Ccall _printf
     924/    1171 :                     L106:
     925/    1171 :                     ;	}
     926/    1171 :                     L100:
     927/    1171 :                     ;	for (i=addr;i<addr+32;i++){
     928/    1171 : (MACRO)             	incm R6,1
     929/    1172 :                     L102:
     930/    1172 : (MACRO)             	ldA2 R11,'O',R7,(32); reg:addr
     931/    117A : (MACRO)             	jcI2 r6,r11,lbnf,L99; LT=lbnf i.e. subtract B from A and jump if borrow 
     932/    118E :                     ;}
     933/    118E :                     L97:
     934/    118E : (MACRO)             	release 4; release room for outgoing arguments
     935/    1192 : (MACRO)             	popr r7
     936/    1196 : (MACRO)             	popr r6
     937/    119A : (MACRO)             	Cretn
     938/    119B :                     
     939/    119B :                     _sendstuff:
     940/    119B : (MACRO)             	reserve 8
     941/    11A3 :                     ;void sendstuff(){
     942/    11A3 :                     ;	strcpy((char *)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"
     943/    11A3 : (MACRO)             	ldaD R12,_buf; reg:acon
     944/    11A9 : (MACRO)             	ldaD R13,L110; reg:acon
     945/    11AF : (MACRO)             	Ccall _strcpy
     946/    11B2 :                     ;	sendrc=send(sockreg,buf,strlen((char *)buf)); 	// Now Send the HTTP Response
     947/    11B2 : (MACRO)             	ldaD R12,_buf; reg:acon
     948/    11B8 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     949/    11BB : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     950/    11BF : (MACRO)             	ld1 R12,'D',(_sockreg),0
     951/    11C7 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     952/    11CA : (MACRO)             	ldaD R13,_buf; reg:acon
     953/    11D0 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     954/    11DD : (MACRO)             	Ccall _send;CALLU2(ar)*
     955/    11E0 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     956/    11E4 : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
     957/    11F1 :                     ;	strcpy((char *)buf,"<strong>Temp: <input type=\"text\" size=2 value=\""
     958/    11F1 : (MACRO)             	ldaD R12,_buf; reg:acon
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 17 - 6/2/2013 16:37:30


     959/    11F7 : (MACRO)             	ldaD R13,L111; reg:acon
     960/    11FD : (MACRO)             	Ccall _strcpy
     961/    1200 :                     ;	sendrc=send(sockreg,buf,strlen((char *)buf)); // Now Send the HTTP Remaining Response
     962/    1200 : (MACRO)             	ldaD R12,_buf; reg:acon
     963/    1206 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     964/    1209 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     965/    120D : (MACRO)             	ld1 R12,'D',(_sockreg),0
     966/    1215 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     967/    1218 : (MACRO)             	ldaD R13,_buf; reg:acon
     968/    121E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     969/    122B : (MACRO)             	Ccall _send;CALLU2(ar)*
     970/    122E : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     971/    1232 : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
     972/    123F :                     ;}
     973/    123F :                     L109:
     974/    123F : (MACRO)             	release 8
     975/    1247 : (MACRO)             	Cretn
     976/    1248 :                     
     977/    1248 :                     _main: ;copt is peeping you now!
     978/    1248 : (MACRO)             	reserve 2; save room for local variables
     979/    124A : (MACRO)             	pushr r1
     980/    124F : (MACRO)             	pushr r6
     981/    1254 : (MACRO)             	pushr r7
     982/    1259 : (MACRO)             	reserve 6; save room for outgoing arguments
     983/    125F :                     ;void main(void){
     984/    125F :                     ;	delay(1000);
     985/    125F : (MACRO)             	ldaD R12,1000; reg:acon
     986/    1265 : (MACRO)             	Ccall _delay
     987/    1268 :                     ;	digitalWrite(6,HIGH); //take wiznet out of hard reset
     988/    1268 : (MACRO)             	ldaD R12,6; reg:acon
     989/    126E : (MACRO)             	ldaD R13,1; reg:acon
     990/    1274 : (MACRO)             	Ccall _digitalWrite
     991/    1277 :                     ;	report("begin");
     992/    1277 : (MACRO)             	ldaD R12,L113; reg:acon
     993/    127D : (MACRO)             	Ccall _report
     994/    1280 :                     ;	SPI_WRITE(MR,0x80);//11110000 00000000 00000000 10000000 00001111 00000000 00000000 00000000
     995/    1280 : (MACRO)             	ld2z R12
     996/    1284 : (MACRO)             	ldaD R13,128; reg:acon
     997/    128A : (MACRO)             	Ccall _SPI_WRITE; CALLI2(ar)
     998/    128D :                     ;	report("post reset");
     999/    128D : (MACRO)             	ldaD R12,L114; reg:acon
    1000/    1293 : (MACRO)             	Ccall _report
    1001/    1296 :                     ;    W5100_Init(); //initialize the wiznet chip
    1002/    1296 : (MACRO)             	Ccall _W5100_Init
    1003/    1299 :                     ;	report("after init");
    1004/    1299 : (MACRO)             	ldaD R12,L115; reg:acon
    1005/    129F : (MACRO)             	Ccall _report
    1006/    12A2 :                     ;	SPI_Write(S0_MR,MR_TCP);
    1007/    12A2 : (MACRO)             	ldaD R12,1024; reg:acon
    1008/    12A8 : (MACRO)             	ldaD R13,1; reg:acon
    1009/    12AE : (MACRO)             	Ccall _SPI_Write
    1010/    12B1 :                     ;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));
    1011/    12B1 : (MACRO)             	ldaD R12,1028; reg:acon
    1012/    12B7 : (MACRO)             	ld2z R13
    1013/    12BB : (MACRO)             	Ccall _SPI_Write
    1014/    12BE :                     ;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
    1015/    12BE : (MACRO)             	ldaD R12,1029; reg:acon
    1016/    12C4 : (MACRO)             	ldaD R13,80; reg:acon
    1017/    12CA : (MACRO)             	Ccall _SPI_Write
    1018/    12CD :                     ;	report("after socket init");
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 18 - 6/2/2013 16:37:30


    1019/    12CD : (MACRO)             	ldaD R12,L116; reg:acon
    1020/    12D3 : (MACRO)             	Ccall _report
    1021/    12D6 :                     ;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
    1022/    12D6 : (MACRO)             	ldaD R12,1025; reg:acon
    1023/    12DC : (MACRO)             	ldaD R13,1; reg:acon
    1024/    12E2 : (MACRO)             	Ccall _SPI_Write
    1025/    12E5 :                     ;	report("after socket open");
    1026/    12E5 : (MACRO)             	ldaD R12,L117; reg:acon
    1027/    12EB : (MACRO)             	Ccall _report
    1028/    12EE :                     ;    SPI_Write(S0_CR,CR_LISTEN);
    1029/    12EE : (MACRO)             	ldaD R12,1025; reg:acon
    1030/    12F4 : (MACRO)             	ldaD R13,2; reg:acon
    1031/    12FA : (MACRO)             	Ccall _SPI_Write
    1032/    12FD :                     ;	report("after listen");
    1033/    12FD : (MACRO)             	ldaD R12,L118; reg:acon
    1034/    1303 : (MACRO)             	Ccall _report
    1035/    1306 :                     ;	printf("loop..");
    1036/    1306 : (MACRO)             	ldaD R12,L119; reg:acon
    1037/    130C : (MACRO)             	Ccall _printf
    1038/    130F :                     ;  for(;;){
    1039/    130F :                     L120:
    1040/    130F :                     ;	  report("loop");
    1041/    130F : (MACRO)             	ldaD R12,L124; reg:acon
    1042/    1315 : (MACRO)             	Ccall _report
    1043/    1318 :                     ;	  s0sr=SPI_Read(S0_SR);
    1044/    1318 : (MACRO)             	ldaD R12,1027; reg:acon
    1045/    131E : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1046/    1321 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1047/    1325 : (MACRO)             	cpy1 R7,R11
    1048/    1327 : (MACRO)             	zExt R7 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1049/    132A :                     ;	  if (s0sr=SOCK_ESTABLISHED){
    1050/    132A : (MACRO)             	ldaD R11,23; reg:acon
    1051/    1330 : (MACRO)             	cpy2 R7,R11 ;LOADI2(reg)*
    1052/    1334 : (MACRO)             	jzU2 r11,L125; EQ 0
    1053/    133C :                     ;	  	rsize=recv_size();
    1054/    133C : (MACRO)             	Ccall _recv_size;CALLU2(ar)*
    1055/    133F : (MACRO)             	cpy2 R6,R15 ;LOADI2(reg)*
    1056/    1343 :                     ;	  	if (rsize>0){
    1057/    1343 : (MACRO)             	jnI2I r6,0,lbdf,L127 ;LEI2 0 6 L127; LE is flipped test & subtraction
    1058/    1354 :                     ;			recvrc=recv(sockreg,buf,rsize);
    1059/    1354 : (MACRO)             	ld1 R12,'D',(_sockreg),0
    1060/    135C : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1061/    135F : (MACRO)             	ldaD R13,_buf; reg:acon
    1062/    1365 : (MACRO)             	cpy2 R11,R6 ;LOADU2(reg)*
    1063/    1369 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1064/    1376 : (MACRO)             	Ccall _recv;CALLU2(ar)*
    1065/    1379 : (MACRO)             	cpy2 R1,R15 ;LOADI2(reg)*
    1066/    137D :                     ;			printf("rsize=%d, recv=%d\n", rsize, recvrc);
    1067/    137D : (MACRO)             	ldaD R12,L129; reg:acon
    1068/    1383 : (MACRO)             	cpy2 R13,R6 ;LOADI2(reg)*
    1069/    1387 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1070/    1394 : (MACRO)             	Ccall _printf
    1071/    1397 :                     ;			if (recvrc>0){
    1072/    1397 : (MACRO)             	jnI2I r1,0,lbdf,L130 ;LEI2 0 1 L130; LE is flipped test & subtraction
    1073/    13A8 :                     ;				printf("Content:\n%s\n",buf);
    1074/    13A8 : (MACRO)             	ldaD R12,L132; reg:acon
    1075/    13AE : (MACRO)             	ldaD R13,_buf; reg:acon
    1076/    13B4 : (MACRO)             	Ccall _printf
    1077/    13B7 :                     ;				sendstuff();
    1078/    13B7 : (MACRO)             	Ccall _sendstuff
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 19 - 6/2/2013 16:37:30


    1079/    13BA :                     ;				disconnect(sockreg); // Disconnect the socket
    1080/    13BA : (MACRO)             	ld1 R12,'D',(_sockreg),0
    1081/    13C2 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1082/    13C5 : (MACRO)             	Ccall _disconnect
    1083/    13C8 :                     ;			}
    1084/    13C8 :                     L130:
    1085/    13C8 :                     ;		}
    1086/    13C8 :                     L127:
    1087/    13C8 :                     ;	}
    1088/    13C8 :                     L125:
    1089/    13C8 :                     ;	delay(1000);
    1090/    13C8 : (MACRO)             	ldaD R12,1000; reg:acon
    1091/    13CE : (MACRO)             	Ccall _delay
    1092/    13D1 :                     ;  }
    1093/    13D1 :                     ;  for(;;){
    1094/    13D1 : C0 13 0F            	lbr L120
    1095/    13D4 :                     L112:
    1096/    13D4 : (MACRO)             	release 6; release room for outgoing arguments
    1097/    13DA : (MACRO)             	popr r7
    1098/    13DE : (MACRO)             	popr r6
    1099/    13E2 : (MACRO)             	popr r1
    1100/    13E6 : (MACRO)             	release 2; release room for local variables 
    1101/    13E8 : (MACRO)             	Cretn
    1102/    13E9 :                     
    1103/    13E9 :                     _delay:
    1104/    13E9 : (MACRO)             	pushr r6
    1105/    13EE : (MACRO)             	pushr r7
    1106/    13F3 : (MACRO)             	reserve 4; save room for outgoing arguments
    1107/    13F7 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1108/    13FB :                     ;void delay(unsigned int howlong){
    1109/    13FB :                     ;	for (i=1;i!=howlong;i++){
    1110/    13FB : (MACRO)             	ldaD R6,1; reg:acon
    1111/    1401 : C0 14 08            	lbr L137
    1112/    1404 :                     L134:
    1113/    1404 :                     ;		oneMs();
    1114/    1404 : (MACRO)             	Ccall _oneMs; CALLI2(ar)
    1115/    1407 :                     ;	}
    1116/    1407 :                     L135:
    1117/    1407 :                     ;	for (i=1;i!=howlong;i++){
    1118/    1407 : (MACRO)             	incm R6,1
    1119/    1408 :                     L137:
    1120/    1408 : (MACRO)             	jneU2 r6,r7,L134; NE
    1121/    141A :                     ;}
    1122/    141A :                     L133:
    1123/    141A : (MACRO)             	release 4; release room for outgoing arguments
    1124/    141E : (MACRO)             	popr r7
    1125/    1422 : (MACRO)             	popr r6
    1126/    1426 : (MACRO)             	Cretn
    1127/    1427 :                     
    1128/    1427 :                     _olduinoincluder:
    1129/    1427 :                     ;void olduinoincluder(){
    1130/    1427 :                     ;	asm("\tinclude olduino.inc\n");
    1131/    1427 :                     	include olduino.inc
(1)    1/    1427 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    1427 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/    1427 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    1427 :                     	align 64	;needed to make sure all on same page
(1)    5/    1440 :                     _digitalWrite:
(1)    6/    1440 : 8C                  	glo regArg1	;get the bit number
(1)    7/    1441 : FC 5F               	adi $$bvtable&255	;add the table offset
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(olduino.inc) - page 20 - 6/2/2013 16:37:30


(1)    8/    1443 : AE                  	plo memaddr
(1)    9/    1444 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    1445 : BE                  	phi memaddr	
(1)   11/    1446 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    1447 : A8                  	plo rt1		;save it in a temp
(1)   13/    1448 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/    144E : EE                  	sex memaddr	;prepare to change it
(1)   15/    144F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    1450 : 32 57               	bz $$setbitoff
(1)   17/    1452 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    1452 : 88                  	glo rt1		;get the bit value back
(1)   19/    1453 : F1                  	or		;apply it
(1)   20/    1454 : 5E                  	str memaddr	;and save it
(1)   21/    1455 : 30 5C               	br $$outit	;go fnish up
(1)   22/    1457 :                     $$setbitoff:
(1)   23/    1457 : 88                  	glo rt1		;get the bit pattern
(1)   24/    1458 : FB FF               	xri 0xff	;reverse it
(1)   25/    145A : F2                  	and		;combine it with the existing pin value
(1)   26/    145B : 5E                  	str memaddr	;and save it
(1)   27/    145C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    145C :                     $$outit:
(1)   29/    145C : 64                  	out 4		;X was already set to memaddr
(1)   30/    145D : E2                  	sex sp		;reset X
(1)   31/    145E : (MACRO)             	cretn
(1)   32/    145F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    1467 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    1467 :                     	align 8	;protect jump boundary
(1)   35/    1468 :                     _digitalRead:
(1)   36/    1468 : F8 00               	ldi 0		;default is false
(1)   37/    146A : AF                  	plo R15
(1)   38/    146B : BF                  	phi R15
(1)   39/    146C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    146E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    146F : (MACRO)             +	cretn
(1)   42/    1470 :                     
    1132/    1470 :                     ;}
    1133/    1470 :                     L138:
    1134/    1470 : (MACRO)             	Cretn
    1135/    1471 :                     
    1136/    1471 :                     _strncmp:
    1137/    1471 : (MACRO)             	pushr r6
    1138/    1476 : (MACRO)             	pushr r7
    1139/    147B : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1140/    1487 :                     ;{
    1141/    1487 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1142/    1487 : C0 15 0A            	lbr L144
    1143/    148A :                     L141:
    1144/    148A :                     ;	if (*s1 != *s2)
    1145/    148A : (MACRO)             	ld1 R11,'O',R12,0
    1146/    1494 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1147/    1497 : (MACRO)             	ld1 R10,'O',R13,0
    1148/    14A1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1149/    14A4 : (MACRO)             	jeqI2 r11,r10,L145; EQI2(reg,reg)
    1150/    14B6 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1151/    14B6 : (MACRO)             	ld1 R11,'O',R12,0
    1152/    14C0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1153/    14C3 : (MACRO)             	ld1 R10,'O',R13,0
    1154/    14CD : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1155/    14D0 : (MACRO)             	jcI2 r11,r10,lbdf,L148; GE is flipped test from LT
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 21 - 6/2/2013 16:37:30


    1156/    14E4 : (MACRO)             	ldaD R6,-1; reg:acon
    1157/    14EA : C0 14 F3            	lbr L149
    1158/    14ED :                     L148:
    1159/    14ED : (MACRO)             	ldaD R6,1; reg:acon
    1160/    14F3 :                     L149:
    1161/    14F3 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1162/    14F7 : C0 15 16            	lbr L140
    1163/    14FA :                     L145:
    1164/    14FA :                     ;	else if (*s1 == '\0')
    1165/    14FA : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1166/    14FC : (MACRO)             	jnzU1 r11,L150; NEI2(CVUI2(reg),con0)
    1167/    1500 :                     ;	    return 0;
    1168/    1500 : (MACRO)             	ld2z R15
    1169/    1504 : C0 15 16            	lbr L140
    1170/    1507 :                     L150:
    1171/    1507 :                     L142:
    1172/    1507 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1173/    1507 : (MACRO)             	incm R12,1
    1174/    1508 : (MACRO)             	incm R13,1
    1175/    1509 : (MACRO)             	decm R7,1
    1176/    150A :                     L144:
    1177/    150A : (MACRO)             	jnzU2 r7,L141; NE 0
    1178/    1512 :                     ;    return 0;
    1179/    1512 : (MACRO)             	ld2z R15
    1180/    1516 :                     L140:
    1181/    1516 : (MACRO)             	popr r7
    1182/    151A : (MACRO)             	popr r6
    1183/    151E : (MACRO)             	Cretn
    1184/    151F :                     
    1185/    151F :                     _strcpy:
    1186/    151F : (MACRO)             	reserve 2
    1187/    1521 :                     ;{
    1188/    1521 :                     ;	char *save = to;
    1189/    1521 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    1190/    152E :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    1191/    152E : C0 15 33            	lbr L156
    1192/    1531 :                     L153:
    1193/    1531 :                     L154:
    1194/    1531 : (MACRO)             	incm R13,1
    1195/    1532 : (MACRO)             	incm R12,1
    1196/    1533 :                     L156:
    1197/    1533 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    1198/    1535 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    1199/    1537 : (MACRO)             	jnzU1 r11,L153; NEI2(CVUI2(reg),con0)
    1200/    153B :                     ;	return(save);
    1201/    153B : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    1202/    1547 :                     L152:
    1203/    1547 : (MACRO)             	release 2
    1204/    1549 : (MACRO)             	Cretn
    1205/    154A :                     
    1206/    154A :                     _strlen:
    1207/    154A : (MACRO)             	pushr r7
    1208/    154F :                     ;{
    1209/    154F :                     ;	unsigned int slen = 0 ;
    1210/    154F : (MACRO)             	ld2z R7
    1211/    1553 : C0 15 58            	lbr L159
    1212/    1556 :                     L158:
    1213/    1556 :                     ;	while (*str != 0) {
    1214/    1556 :                     ;      slen++ ;
    1215/    1556 : (MACRO)             	incm R7,1
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 22 - 6/2/2013 16:37:30


    1216/    1557 :                     ;      str++ ;
    1217/    1557 : (MACRO)             	incm R12,1
    1218/    1558 :                     ;   }
    1219/    1558 :                     L159:
    1220/    1558 :                     ;	while (*str != 0) {
    1221/    1558 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1222/    155A : (MACRO)             	jnzU1 r11,L158; NEI2(CVUI2(reg),con0)
    1223/    155E :                     ;   return slen;
    1224/    155E : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1225/    1562 :                     L157:
    1226/    1562 : (MACRO)             	popr r7
    1227/    1566 : (MACRO)             	Cretn
    1228/    1567 :                     
    1229/    1567 :                     _printstr:
    1230/    1567 : (MACRO)             	pushr r7
    1231/    156C : (MACRO)             	reserve 4; save room for outgoing arguments
    1232/    1570 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1233/    1574 :                     ;void printstr(char *ptr){
    1234/    1574 : C0 15 92            	lbr L163
    1235/    1577 :                     L162:
    1236/    1577 :                     ;    while(*ptr) out(5,*ptr++);
    1237/    1577 : (MACRO)             	ldaD R12,5; reg:acon
    1238/    157D : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) opt1
    1239/    1581 : (MACRO)             	incm R7,1
    1240/    1582 : (MACRO)             	ld1 R13,'O',R11,0
    1241/    158C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1242/    158F : (MACRO)             	Ccall _out; CALLI2(ar)
    1243/    1592 :                     L163:
    1244/    1592 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1245/    1594 : (MACRO)             	jnzU1 r11,L162; NEI2(CVUI2(reg),con0)
    1246/    1598 :                     ;}
    1247/    1598 :                     L161:
    1248/    1598 : (MACRO)             	release 4; release room for outgoing arguments
    1249/    159C : (MACRO)             	popr r7
    1250/    15A0 : (MACRO)             	Cretn
    1251/    15A1 :                     
    1252/    15A1 :                     	align 4
    1253/    15A4 :                     _round_nums:
    1254/    15A4 : 3F 00 00 00         	dd 0x3f000000
    1255/    15A8 : 3D 4C CC CD         	dd 0x3d4ccccd
    1256/    15AC : 3B A3 D7 0A         	dd 0x3ba3d70a
    1257/    15B0 : 3A 03 12 6F         	dd 0x3a03126f
    1258/    15B4 : 38 51 B7 17         	dd 0x3851b717
    1259/    15B8 : 36 A7 C5 AC         	dd 0x36a7c5ac
    1260/    15BC : 35 06 37 BD         	dd 0x350637bd
    1261/    15C0 : 33 56 BF 95         	dd 0x3356bf95
    1262/    15C4 :                     	align 4
    1263/    15C4 :                     _mult_nums:
    1264/    15C4 : 3F 80 00 00         	dd 0x3f800000
    1265/    15C8 : 41 20 00 00         	dd 0x41200000
    1266/    15CC : 42 C8 00 00         	dd 0x42c80000
    1267/    15D0 : 44 7A 00 00         	dd 0x447a0000
    1268/    15D4 : 46 1C 40 00         	dd 0x461c4000
    1269/    15D8 : 47 C3 50 00         	dd 0x47c35000
    1270/    15DC : 49 74 24 00         	dd 0x49742400
    1271/    15E0 : 4B 18 96 80         	dd 0x4b189680
    1272/    15E4 :                     _ftoa:
    1273/    15E4 : (MACRO)             	reserve 62; save room for local variables
    1274/    15EE : (MACRO)             	pushr r0
    1275/    15F3 : (MACRO)             	pushr r1
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 23 - 6/2/2013 16:37:30


    1276/    15F8 : (MACRO)             	pushr r6
    1277/    15FD : (MACRO)             	pushr r7
    1278/    1602 : (MACRO)             	reserve 8; save room for outgoing arguments
    1279/    160A : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
    1280/    1612 : (MACRO)             	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
    1281/    161E :                     ;{
    1282/    161E :                     ;   char *output = outbfr ;
    1283/    161E : (MACRO)             	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
    1284/    162A :                     ;   if (flt < 0.0) {
    1285/    162A : (MACRO)             	ld4 RL10,'D',(L168),0;INDIRF4(addr)
    1286/    1638 : (MACRO)             	jcF4 RL6,RL10,lbdf,L166;GEF4(reg,reg) - reverse test
    1287/    167D :                     ;      *output++ = '-' ;
    1288/    167D : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1289/    1681 : (MACRO)             	incm R0,1
    1290/    1682 : (MACRO)             	ldaD R10,45; reg:acon
    1291/    1688 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1292/    168A :                     ;      flt *= -1.0 ;
    1293/    168A : (MACRO)             	ld4 RL8,'D',(L169),0;INDIRF4(addr)
    1294/    1698 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
    1295/    16A0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1296/    16A3 : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1297/    16AB :                     ;   } else {
    1298/    16AB : C0 16 BE            	lbr L167
    1299/    16AE :                     L166:
    1300/    16AE :                     ;      if (use_leading_plus) {
    1301/    16AE : C0 16 BE            	lbr L170
    1302/    16B1 :                     ;         *output++ = '+' ;
    1303/    16B1 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1304/    16B5 : (MACRO)             	incm R0,1
    1305/    16B6 : (MACRO)             	ldaD R10,43; reg:acon
    1306/    16BC : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1307/    16BE :                     ;      }
    1308/    16BE :                     L170:
    1309/    16BE :                     ;   }
    1310/    16BE :                     L167:
    1311/    16BE :                     ;   if (dec_digits < 8) {
    1312/    16BE : (MACRO)             	jcI2I r1,8,lbdf,L172; GE is flipped test from LT
    1313/    16CF :                     ;      flt += round_nums[dec_digits] ;
    1314/    16CF : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1315/    16D7 : (MACRO)             	cpy2 R11,R1
    1316/    16DB : (MACRO)             	shl2I R11,2
    1317/    16E7 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
    1318/    16F7 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
    1319/    16FA : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1320/    1702 :                     ;   }
    1321/    1702 :                     L172:
    1322/    1702 :                     ;	mult=mult_nums[dec_digits];
    1323/    1702 : (MACRO)             	cpy2 R11,R1
    1324/    1706 : (MACRO)             	shl2I R11,2
    1325/    1712 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
    1326/    1722 : (MACRO)             	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
    1327/    1735 :                     ;   wholeNum = flt;
    1328/    1735 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1329/    173D : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1330/    1740 : (MACRO)             	st4 RL8,'O',sp,(-8+80)
    1331/    1753 :                     ;   decimalNum = ((flt - wholeNum) * mult);
    1332/    1753 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1333/    175B : (MACRO)             	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
    1334/    176E : (MACRO)             	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1335/    177E : (MACRO)             	Ccall cvif4; emit2
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 24 - 6/2/2013 16:37:30


    1336/    1781 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1337/    1789 : (MACRO)             	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
    1338/    1799 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
    1339/    179C : (MACRO)             	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
    1340/    17AC : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1341/    17AF : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1342/    17B2 : (MACRO)             	st4 RL8,'O',sp,(-16+80)
    1343/    17C5 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
    1344/    17C5 : (MACRO)             	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1345/    17D5 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1346/    17E2 : (MACRO)             	ldaD R11,1; reg:acon
    1347/    17E8 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1348/    17F5 : (MACRO)             	Ccall _dubdabx
    1349/    17F8 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1350/    17FC : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1351/    1800 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1352/    1804 : (MACRO)             	Ccall _strcpy
    1353/    1807 :                     ;   output+=strlen(output);
    1354/    1807 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1355/    180B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1356/    180E : (MACRO)             	alu2 R0,R15,R0,add,adc
    1357/    181A :                     ;   if (dec_digits > 0) {
    1358/    181A : (MACRO)             	jzU2 r1,L174; EQ 0
    1359/    1822 :                     ;		*output++ = '.' ;
    1360/    1822 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1361/    1826 : (MACRO)             	incm R0,1
    1362/    1827 : (MACRO)             	ldaD R10,46; reg:acon
    1363/    182D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1364/    182F :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
    1365/    182F : (MACRO)             	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
    1366/    183F : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1367/    184C : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)*
    1368/    1850 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1369/    185D : (MACRO)             	Ccall _dubdabx
    1370/    1860 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1371/    1864 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1372/    1868 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1373/    186C : (MACRO)             	Ccall _strcpy
    1374/    186F :                     ;	}
    1375/    186F :                     L174:
    1376/    186F :                     ;   return outbfr;
    1377/    186F : (MACRO)             	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
    1378/    187B :                     L165:
    1379/    187B : (MACRO)             	release 8; release room for outgoing arguments
    1380/    1883 : (MACRO)             	popr r7
    1381/    1887 : (MACRO)             	popr r6
    1382/    188B : (MACRO)             	popr r1
    1383/    188F : (MACRO)             	popr r0
    1384/    1893 : (MACRO)             	release 62; release room for local variables 
    1385/    189B : (MACRO)             	Cretn
    1386/    189C :                     
    1387/    189C :                     _itoa:
    1388/    189C : (MACRO)             	reserve 2; save room for local variables
    1389/    189E : (MACRO)             	pushr r0
    1390/    18A3 : (MACRO)             	pushr r1
    1391/    18A8 : (MACRO)             	pushr r6
    1392/    18AD : (MACRO)             	pushr r7
    1393/    18B2 : (MACRO)             	reserve 4; save room for outgoing arguments
    1394/    18B6 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1395/    18C3 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 25 - 6/2/2013 16:37:30


    1396/    18D0 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1397/    18D0 :                     ;	unsigned int flag=0;
    1398/    18D0 : (MACRO)             	ld2z R0
    1399/    18D4 :                     ;	char * bptr; bptr=buffer;
    1400/    18D4 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1401/    18E0 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1402/    18ED :                     ;	if (s<0){
    1403/    18ED : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1404/    18F9 : (MACRO)             	jcI2I r11,0,lbdf,L177; GE is flipped test from LT
    1405/    190A :                     ;		*bptr='-';bptr++;
    1406/    190A : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1407/    1916 : (MACRO)             	ldaD R10,45; reg:acon
    1408/    191C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1409/    191E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1410/    192A : (MACRO)             	incm R11,1
    1411/    192B : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1412/    1938 :                     ;		n=-s;
    1413/    1938 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1414/    1944 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1415/    194D : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1416/    1951 :                     ;	} else{
    1417/    1951 : C0 19 64            	lbr L178
    1418/    1954 :                     L177:
    1419/    1954 :                     ;		n=s;
    1420/    1954 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1421/    1960 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1422/    1964 :                     ;	}
    1423/    1964 :                     L178:
    1424/    1964 :                     ;	k=10000;
    1425/    1964 : (MACRO)             	ldaD R7,10000; reg:acon
    1426/    196A : C0 19 F1            	lbr L180
    1427/    196D :                     L179:
    1428/    196D :                     ;	while(k>0){
    1429/    196D :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1430/    196D : (MACRO)             	ld2z R1
    1431/    1971 : C0 19 81            	lbr L185
    1432/    1974 :                     L182:
    1433/    1974 :                     L183:
    1434/    1974 : (MACRO)             	incm R1,1
    1435/    1975 : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1436/    1981 :                     L185:
    1437/    1981 : (MACRO)             	jcU2 r6,r7,lbdf,L182 ;LE is flipped test & operands
    1438/    198E :                     ;		if (flag || r>0||k==1){
    1439/    198E : (MACRO)             	jnzU2 r0,L189; NE 0
    1440/    1996 : (MACRO)             	jnzU2 r1,L189; NE 0
    1441/    199E : (MACRO)             	jneU2I r7,1,L186; NE
    1442/    19AA :                     L189:
    1443/    19AA :                     ;			*bptr=('0'+r);bptr++;
    1444/    19AA : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1445/    19B6 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    1446/    19BE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1447/    19C0 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1448/    19CC : (MACRO)             	incm R11,1
    1449/    19CD : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1450/    19DA :                     ;			flag='y';
    1451/    19DA : (MACRO)             	ldaD R0,121; reg:acon
    1452/    19E0 :                     ;		}
    1453/    19E0 :                     L186:
    1454/    19E0 :                     ;		k=k/10;
    1455/    19E0 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 26 - 6/2/2013 16:37:30


    1456/    19E4 : (MACRO)             	ldaD R13,10; reg:acon
    1457/    19EA : (MACRO)             	Ccall _divu2
    1458/    19ED : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1459/    19F1 :                     ;	}
    1460/    19F1 :                     L180:
    1461/    19F1 :                     ;	while(k>0){
    1462/    19F1 : (MACRO)             	jnzU2 r7,L179; NE 0
    1463/    19F9 :                     ;	*bptr='\0';
    1464/    19F9 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1465/    1A05 : (MACRO)             	ldaD R10,0; reg:acon
    1466/    1A0B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1467/    1A0D :                     ;	return buffer;
    1468/    1A0D : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1469/    1A19 :                     L176:
    1470/    1A19 : (MACRO)             	release 4; release room for outgoing arguments
    1471/    1A1D : (MACRO)             	popr r7
    1472/    1A21 : (MACRO)             	popr r6
    1473/    1A25 : (MACRO)             	popr r1
    1474/    1A29 : (MACRO)             	popr r0
    1475/    1A2D : (MACRO)             	release 2; release room for local variables 
    1476/    1A2F : (MACRO)             	Cretn
    1477/    1A30 :                     
    1478/    1A30 :                     _ltoa:
    1479/    1A30 : (MACRO)             	pushr r1
    1480/    1A35 : (MACRO)             	pushr r6
    1481/    1A3A : (MACRO)             	pushr r7
    1482/    1A3F : (MACRO)             	reserve 8; save room for outgoing arguments
    1483/    1A47 : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1484/    1A4F :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1485/    1A4F :                     ;	char* bptr=buffer;
    1486/    1A4F : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
    1487/    1A5B :                     ;	if (s<0){
    1488/    1A5B : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1489/    1A67 : (MACRO)             	jcI4 RL6,RL10,lbdf,L191; GE is flipped test from LT
    1490/    1A83 :                     ;		*bptr++='-';
    1491/    1A83 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1492/    1A87 : (MACRO)             	incm R1,1
    1493/    1A88 : (MACRO)             	ldaD R10,45; reg:acon
    1494/    1A8E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1495/    1A90 :                     ;		s=-s;
    1496/    1A90 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1497/    1AB0 :                     ;	}
    1498/    1AB0 :                     L191:
    1499/    1AB0 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1500/    1AB0 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
    1501/    1AB8 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1502/    1AC5 : (MACRO)             	ldaD R11,1; reg:acon
    1503/    1ACB : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1504/    1AD8 : (MACRO)             	Ccall _dubdabx
    1505/    1ADB : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1506/    1ADF : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
    1507/    1AE3 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1508/    1AE7 : (MACRO)             	Ccall _strcpy
    1509/    1AEA :                     ;	return buffer;
    1510/    1AEA : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    1511/    1AF6 :                     L190:
    1512/    1AF6 : (MACRO)             	release 8; release room for outgoing arguments
    1513/    1AFE : (MACRO)             	popr r7
    1514/    1B02 : (MACRO)             	popr r6
    1515/    1B06 : (MACRO)             	popr r1
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 27 - 6/2/2013 16:37:30


    1516/    1B0A : (MACRO)             	Cretn
    1517/    1B0B :                     
    1518/    1B0B :                     _printint:
    1519/    1B0B : (MACRO)             	reserve 12
    1520/    1B15 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1521/    1B22 :                     ;void printint(int s){ //print an integer
    1522/    1B22 :                     ;	itoa(s,buffer);
    1523/    1B22 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1524/    1B2E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1525/    1B36 : (MACRO)             	Ccall _itoa
    1526/    1B39 :                     ;	printstr(buffer);
    1527/    1B39 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1528/    1B41 : (MACRO)             	Ccall _printstr
    1529/    1B44 :                     ;}
    1530/    1B44 :                     L193:
    1531/    1B44 : (MACRO)             	release 12
    1532/    1B4C : (MACRO)             	Cretn
    1533/    1B4D :                     
    1534/    1B4D :                     _printlint:
    1535/    1B4D : (MACRO)             	reserve 18
    1536/    1B57 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1537/    1B64 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1538/    1B71 :                     ;void printlint(long s){ //print a long integer
    1539/    1B71 :                     ;	printstr(ltoa(s,buffer));
    1540/    1B71 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    1541/    1B81 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1542/    1B89 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1543/    1B96 : (MACRO)             	Ccall _ltoa
    1544/    1B99 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1545/    1B9D : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1546/    1BA1 : (MACRO)             	Ccall _printstr
    1547/    1BA4 :                     ;}
    1548/    1BA4 :                     L194:
    1549/    1BA4 : (MACRO)             	release 18
    1550/    1BAC : (MACRO)             	Cretn
    1551/    1BAD :                     
    1552/    1BAD :                     _printflt:
    1553/    1BAD : (MACRO)             	reserve 28
    1554/    1BB7 : (MACRO)             	st2 r12,'O',sp,(30); flag1 
    1555/    1BC4 : (MACRO)             	st2 r13,'O',sp,(32); flag1 
    1556/    1BD1 :                     ;void printflt(float s){ //print a float
    1557/    1BD1 :                     ;	printstr(ftoa(s,buffer,3));
    1558/    1BD1 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
    1559/    1BE1 : (MACRO)             	ldA2 R11,'O',sp,(-22+30); reg:addr
    1560/    1BE9 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1561/    1BF6 : (MACRO)             	ldaD R11,3; reg:acon
    1562/    1BFC : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1563/    1C09 : (MACRO)             	Ccall _ftoa
    1564/    1C0C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1565/    1C10 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1566/    1C14 : (MACRO)             	Ccall _printstr
    1567/    1C17 :                     ;}
    1568/    1C17 :                     L195:
    1569/    1C17 : (MACRO)             	release 28
    1570/    1C1F : (MACRO)             	Cretn
    1571/    1C20 :                     
    1572/    1C20 :                     _putxn:
    1573/    1C20 : (MACRO)             	reserve 4
    1574/    1C24 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1575/    1C31 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 28 - 6/2/2013 16:37:30


    1576/    1C3D : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1577/    1C47 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1578/    1C47 :                     ;	if (x<10){
    1579/    1C47 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1580/    1C51 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1581/    1C54 : (MACRO)             	jcI2I r11,10,lbdf,L197; GE is flipped test from LT
    1582/    1C65 :                     ;		putc(x+'0');
    1583/    1C65 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1584/    1C6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1585/    1C72 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1586/    1C7A : (MACRO)             	cpy1 R12,R11
    1587/    1C7C : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1588/    1C7F : (MACRO)             	Ccall _putc
    1589/    1C82 :                     ;	} else {
    1590/    1C82 : C0 1C AA            	lbr L198
    1591/    1C85 :                     L197:
    1592/    1C85 :                     ;		putc(x+'A'-10);
    1593/    1C85 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1594/    1C8F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1595/    1C92 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1596/    1C9A : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1597/    1CA2 : (MACRO)             	cpy1 R12,R11
    1598/    1CA4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1599/    1CA7 : (MACRO)             	Ccall _putc
    1600/    1CAA :                     ;	}
    1601/    1CAA :                     L198:
    1602/    1CAA :                     ;}
    1603/    1CAA :                     L196:
    1604/    1CAA : (MACRO)             	release 4
    1605/    1CAE : (MACRO)             	Cretn
    1606/    1CAF :                     
    1607/    1CAF :                     _putx:
    1608/    1CAF : (MACRO)             	reserve 4
    1609/    1CB3 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1610/    1CC0 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1611/    1CCC : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1612/    1CD6 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1613/    1CD6 :                     ;	putxn(x>>4);
    1614/    1CD6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1615/    1CE0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1616/    1CE3 : (MACRO)             	shrI2I R11,4
    1617/    1D03 : (MACRO)             	cpy1 R12,R11
    1618/    1D05 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1619/    1D08 : (MACRO)             	Ccall _putxn
    1620/    1D0B :                     ;	putxn(x & 0x0F);
    1621/    1D0B : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1622/    1D15 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1623/    1D18 : (MACRO)             	alu2I R11,R11,15,ani,ani
    1624/    1D20 :                     	;removed ?	cpy2 R11,R11
    1625/    1D20 : (MACRO)             	cpy1 R12,R11
    1626/    1D22 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1627/    1D25 : (MACRO)             	Ccall _putxn
    1628/    1D28 :                     ;}
    1629/    1D28 :                     L199:
    1630/    1D28 : (MACRO)             	release 4
    1631/    1D2C : (MACRO)             	Cretn
    1632/    1D2D :                     
    1633/    1D2D :                     _printf:
    1634/    1D2D : (MACRO)             	reserve 2; save room for local variables
    1635/    1D2F : (MACRO)             	pushr r0
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 29 - 6/2/2013 16:37:30


    1636/    1D34 : (MACRO)             	pushr r1
    1637/    1D39 : (MACRO)             	pushr r6
    1638/    1D3E : (MACRO)             	pushr r7
    1639/    1D43 : (MACRO)             	reserve 4; save room for outgoing arguments
    1640/    1D47 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1641/    1D54 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    1642/    1D61 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    1643/    1D61 :                     ;	int argslot=0;	//used to align longs
    1644/    1D61 : (MACRO)             	ld2z R1
    1645/    1D65 :                     ;	int * this=(int *)&ptr;
    1646/    1D65 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
    1647/    1D6D :                     ;	this++; argslot++; //advance argument pointer and slot #
    1648/    1D6D : (MACRO)             	incm R6,2
    1649/    1D6F : (MACRO)             	incm R1,1
    1650/    1D70 : C0 20 74            	lbr L202
    1651/    1D73 :                     L201:
    1652/    1D73 :                     ;    while(*ptr) {
    1653/    1D73 :                     ;		c=*ptr++;
    1654/    1D73 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1655/    1D7F : (MACRO)             	cpy2 R10,R11
    1656/    1D83 : (MACRO)             	incm R10,1
    1657/    1D84 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1658/    1D91 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1659/    1D93 :                     ;		if (c!='%'){
    1660/    1D93 : (MACRO)             	cpy1 R11,R7
    1661/    1D95 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1662/    1D98 : (MACRO)             	jeqU2I r11,37,L204;EQI2(reg,con)
    1663/    1DA4 :                     ;			putc(c);
    1664/    1DA4 : (MACRO)             	cpy1 R12,R7
    1665/    1DA6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1666/    1DA9 : (MACRO)             	Ccall _putc
    1667/    1DAC :                     ;		} else{
    1668/    1DAC : C0 20 74            	lbr L205
    1669/    1DAF :                     L204:
    1670/    1DAF :                     ;			c=*ptr++;
    1671/    1DAF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1672/    1DBB : (MACRO)             	cpy2 R10,R11
    1673/    1DBF : (MACRO)             	incm R10,1
    1674/    1DC0 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1675/    1DCD : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1676/    1DCF :                     ;			switch (c){
    1677/    1DCF : (MACRO)             	cpy1 R0,R7
    1678/    1DD1 : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1679/    1DD4 : (MACRO)             	jcI2I r0,99,lbnf,L225  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1680/    1DE5 : (MACRO)             	jnI2I r0,108,lbnf,L226; GT reverse  the subtraction
    1681/    1DF6 : (MACRO)             	cpy2 R11,R0
    1682/    1DFA : (MACRO)             	shl2I R11,1
    1683/    1E00 : (MACRO)             	ld2 R11,'O',R11,(L227-198);reg:  INDIRP2(addr)
    1684/    1E0C : (MACRO)             	jumpv r11; JUMPV(reg)
    1685/    1E16 :                     L227:
    1686/    1E16 : 1E AA               	dw L211
    1687/    1E18 : 1E 74               	dw L209
    1688/    1E1A : 20 63               	dw L206
    1689/    1E1C : 20 13               	dw L220
    1690/    1E1E : 20 63               	dw L206
    1691/    1E20 : 20 63               	dw L206
    1692/    1E22 : 1E 74               	dw L209
    1693/    1E24 : 20 63               	dw L206
    1694/    1E26 : 20 63               	dw L206
    1695/    1E28 : 1F 07               	dw L213
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 30 - 6/2/2013 16:37:30


    1696/    1E2A :                     L225:
    1697/    1E2A : (MACRO)             	jeqU2I r0,88,L212;EQI2(reg,con)
    1698/    1E36 : C0 20 63            	lbr L206
    1699/    1E39 :                     L226:
    1700/    1E39 : (MACRO)             	ldaD R11,115; reg:acon
    1701/    1E3F : (MACRO)             	jeqI2 r0,r11,L210; EQI2(reg,reg)
    1702/    1E51 : (MACRO)             	jcI2 r0,r11,lbnf,L206; LT=lbnf i.e. subtract B from A and jump if borrow 
    1703/    1E65 :                     L229:
    1704/    1E65 : (MACRO)             	jeqU2I r0,120,L212;EQI2(reg,con)
    1705/    1E71 : C0 20 63            	lbr L206
    1706/    1E74 :                     L209:
    1707/    1E74 :                     ;					printint(*this++);
    1708/    1E74 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1709/    1E78 : (MACRO)             	incm R6,2
    1710/    1E7A : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    1711/    1E86 : (MACRO)             	Ccall _printint
    1712/    1E89 :                     ;					argslot+=1; //next argument slot
    1713/    1E89 : (MACRO)             	incm R1,1
    1714/    1E8A :                     ;					break;
    1715/    1E8A : C0 20 74            	lbr L207
    1716/    1E8D :                     L210:
    1717/    1E8D :                     ;					printstr((char*) *this++);
    1718/    1E8D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1719/    1E91 : (MACRO)             	incm R6,2
    1720/    1E93 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1721/    1E9F : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1722/    1EA3 : (MACRO)             	Ccall _printstr
    1723/    1EA6 :                     ;					argslot+=1; //next argument slot
    1724/    1EA6 : (MACRO)             	incm R1,1
    1725/    1EA7 :                     ;					break;
    1726/    1EA7 : C0 20 74            	lbr L207
    1727/    1EAA :                     L211:
    1728/    1EAA :                     ;					putc((unsigned int) *this++);
    1729/    1EAA : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1730/    1EAE : (MACRO)             	incm R6,2
    1731/    1EB0 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1732/    1EBC : (MACRO)             	cpy1 R12,R11
    1733/    1EBE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1734/    1EC1 : (MACRO)             	Ccall _putc
    1735/    1EC4 :                     ;					argslot+=1; //next argument slot
    1736/    1EC4 : (MACRO)             	incm R1,1
    1737/    1EC5 :                     ;					break;
    1738/    1EC5 : C0 20 74            	lbr L207
    1739/    1EC8 :                     L212:
    1740/    1EC8 :                     ;					putx(((unsigned int) *this)>>8);
    1741/    1EC8 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1742/    1ED4 : 9B                  	ghi	R11	;opt2
    1743/    1ED5 : AB                  	plo	R11
    1744/    1ED6 : F8 00               	ldi	0
    1745/    1ED8 : BB                  	phi	R11
    1746/    1ED9 : (MACRO)             	cpy1 R12,R11
    1747/    1EDB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1748/    1EDE : (MACRO)             	Ccall _putx
    1749/    1EE1 :                     ;					putx(((unsigned int) *this++)&255);
    1750/    1EE1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1751/    1EE5 : (MACRO)             	incm R6,2
    1752/    1EE7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1753/    1EF3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1754/    1EFB : (MACRO)             	cpy1 R12,R11
    1755/    1EFD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 31 - 6/2/2013 16:37:30


    1756/    1F00 : (MACRO)             	Ccall _putx
    1757/    1F03 :                     ;					argslot+=1; //next argument slot
    1758/    1F03 : (MACRO)             	incm R1,1
    1759/    1F04 :                     ;					break;
    1760/    1F04 : C0 20 74            	lbr L207
    1761/    1F07 :                     L213:
    1762/    1F07 :                     ;					if (*ptr){ //as long as there's something there
    1763/    1F07 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1764/    1F13 : (MACRO)             	ld1 R11,'O',R11,0
    1765/    1F1D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1766/    1F20 : (MACRO)             	jzU2 r11,L214; EQ 0
    1767/    1F28 :                     ;						xord=*ptr++;
    1768/    1F28 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1769/    1F34 : (MACRO)             	cpy2 R10,R11
    1770/    1F38 : (MACRO)             	incm R10,1
    1771/    1F39 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1772/    1F46 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1773/    1F48 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    1774/    1F52 :                     ;						if (argslot&1) {
    1775/    1F52 : (MACRO)             	alu2I R11,R1,1,ani,ani
    1776/    1F5A :                     	;removed ?	cpy2 R11,R1
    1777/    1F5A : (MACRO)             	jzU2 r11,L216; EQ 0
    1778/    1F62 :                     ;							this++;
    1779/    1F62 : (MACRO)             	incm R6,2
    1780/    1F64 :                     ;							argslot++;
    1781/    1F64 : (MACRO)             	incm R1,1
    1782/    1F65 :                     ;						}
    1783/    1F65 :                     L216:
    1784/    1F65 :                     ;						if(xord=='d'){
    1785/    1F65 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    1786/    1F6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1787/    1F72 : (MACRO)             	jneU2I r11,100,L218; NE
    1788/    1F7E :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1789/    1F7E : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
    1790/    1F8E : (MACRO)             	Ccall _printlint
    1791/    1F91 :                     ;							this+=2;				// and advances it 4 bytes
    1792/    1F91 : (MACRO)             	incm R6,4
    1793/    1F95 :                     ;						} else{
    1794/    1F95 : C0 20 0E            	lbr L219
    1795/    1F98 :                     L218:
    1796/    1F98 :                     ;							putx(((unsigned int) *this)>>8);
    1797/    1F98 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1798/    1FA4 : 9B                  	ghi	R11	;opt2
    1799/    1FA5 : AB                  	plo	R11
    1800/    1FA6 : F8 00               	ldi	0
    1801/    1FA8 : BB                  	phi	R11
    1802/    1FA9 : (MACRO)             	cpy1 R12,R11
    1803/    1FAB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1804/    1FAE : (MACRO)             	Ccall _putx
    1805/    1FB1 :                     ;							putx(((unsigned int) *this++)&255);
    1806/    1FB1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1807/    1FB5 : (MACRO)             	incm R6,2
    1808/    1FB7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1809/    1FC3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1810/    1FCB : (MACRO)             	cpy1 R12,R11
    1811/    1FCD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1812/    1FD0 : (MACRO)             	Ccall _putx
    1813/    1FD3 :                     ;							putx(((unsigned int) *this)>>8);
    1814/    1FD3 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    1815/    1FDF : 9B                  	ghi	R11	;opt2
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 32 - 6/2/2013 16:37:30


    1816/    1FE0 : AB                  	plo	R11
    1817/    1FE1 : F8 00               	ldi	0
    1818/    1FE3 : BB                  	phi	R11
    1819/    1FE4 : (MACRO)             	cpy1 R12,R11
    1820/    1FE6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1821/    1FE9 : (MACRO)             	Ccall _putx
    1822/    1FEC :                     ;							putx(((unsigned int) *this++)&255);
    1823/    1FEC : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1824/    1FF0 : (MACRO)             	incm R6,2
    1825/    1FF2 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1826/    1FFE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1827/    2006 : (MACRO)             	cpy1 R12,R11
    1828/    2008 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1829/    200B : (MACRO)             	Ccall _putx
    1830/    200E :                     ;						}
    1831/    200E :                     L219:
    1832/    200E :                     ;						argslot+=2;
    1833/    200E : (MACRO)             	incm R1,2
    1834/    2010 :                     ;						break;
    1835/    2010 : C0 20 74            	lbr L207
    1836/    2013 :                     L214:
    1837/    2013 :                     L220:
    1838/    2013 :                     ;					if (*ptr){ //as long as there's something there
    1839/    2013 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1840/    201F : (MACRO)             	ld1 R11,'O',R11,0
    1841/    2029 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1842/    202C : (MACRO)             	jzU2 r11,L221; EQ 0
    1843/    2034 :                     ;						if (argslot&1) { //adjust alignment
    1844/    2034 : (MACRO)             	alu2I R11,R1,1,ani,ani
    1845/    203C :                     	;removed ?	cpy2 R11,R1
    1846/    203C : (MACRO)             	jzU2 r11,L223; EQ 0
    1847/    2044 :                     ;							this++;
    1848/    2044 : (MACRO)             	incm R6,2
    1849/    2046 :                     ;							argslot++;
    1850/    2046 : (MACRO)             	incm R1,1
    1851/    2047 :                     ;						}
    1852/    2047 :                     L223:
    1853/    2047 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    1854/    2047 : (MACRO)             	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
    1855/    2057 : (MACRO)             	Ccall _printflt
    1856/    205A :                     ;						this+=2;				// and advances it 4 bytes
    1857/    205A : (MACRO)             	incm R6,4
    1858/    205E :                     ;						argslot+=2;
    1859/    205E : (MACRO)             	incm R1,2
    1860/    2060 :                     ;						break;
    1861/    2060 : C0 20 74            	lbr L207
    1862/    2063 :                     L221:
    1863/    2063 :                     L206:
    1864/    2063 :                     ;					putc('%');putc(c);
    1865/    2063 : (MACRO)             	ldaD R12,37; reg:acon
    1866/    2069 : (MACRO)             	Ccall _putc
    1867/    206C : (MACRO)             	cpy1 R12,R7
    1868/    206E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1869/    2071 : (MACRO)             	Ccall _putc
    1870/    2074 :                     ;			} //switch
    1871/    2074 :                     L207:
    1872/    2074 :                     ;		} //%
    1873/    2074 :                     L205:
    1874/    2074 :                     ;	} //while
    1875/    2074 :                     L202:
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 33 - 6/2/2013 16:37:30


    1876/    2074 :                     ;    while(*ptr) {
    1877/    2074 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1878/    2080 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1879/    2082 : (MACRO)             	jnzU1 r11,L201; NEI2(CVUI2(reg),con0)
    1880/    2086 :                     ;} //prtf
    1881/    2086 :                     L200:
    1882/    2086 : (MACRO)             	release 4; release room for outgoing arguments
    1883/    208A : (MACRO)             	popr r7
    1884/    208E : (MACRO)             	popr r6
    1885/    2092 : (MACRO)             	popr r1
    1886/    2096 : (MACRO)             	popr r0
    1887/    209A : (MACRO)             	release 2; release room for local variables 
    1888/    209C : (MACRO)             	Cretn
    1889/    209D :                     
    1890/    209D :                     _exit:
    1891/    209D : (MACRO)             	reserve 4
    1892/    20A1 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1893/    20AE :                     ;void exit(int code){
    1894/    20AE :                     ;	printf("exit %d\n",code);
    1895/    20AE : (MACRO)             	ldaD R12,L231; reg:acon
    1896/    20B4 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1897/    20C0 : (MACRO)             	Ccall _printf
    1898/    20C3 :                     L232:
    1899/    20C3 :                     ;	while(1);
    1900/    20C3 :                     L233:
    1901/    20C3 : C0 20 C3            	lbr L232
    1902/    20C6 :                     ;}
    1903/    20C6 :                     L230:
    1904/    20C6 : (MACRO)             	release 4
    1905/    20CA : (MACRO)             	Cretn
    1906/    20CB :                     
    1907/    20CB :                     _memcmp:
    1908/    20CB : (MACRO)             	pushr r0
    1909/    20D0 : (MACRO)             	pushr r1
    1910/    20D5 : (MACRO)             	pushr r6
    1911/    20DA : (MACRO)             	pushr r7
    1912/    20DF : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    1913/    20EB :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1914/    20EB :                     ;    int v = 0;
    1915/    20EB : (MACRO)             	ld2z R6
    1916/    20EF :                     ;    p1 = (unsigned char *)Ptr1;
    1917/    20EF : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1918/    20F3 :                     ;    p2 = (unsigned char *)Ptr2;
    1919/    20F3 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    1920/    20F7 : C0 21 2A            	lbr L237
    1921/    20FA :                     L236:
    1922/    20FA :                     ;    while(Count-- > 0 && v == 0) {
    1923/    20FA :                     ;        v = *(p1++) - *(p2++);
    1924/    20FA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1925/    20FE : (MACRO)             	incm R1,1
    1926/    20FF : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) opt1
    1927/    2103 : (MACRO)             	incm R0,1
    1928/    2104 : (MACRO)             	ld1 R11,'O',R11,0
    1929/    210E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1930/    2111 : (MACRO)             	ld1 R10,'O',R10,0
    1931/    211B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1932/    211E : (MACRO)             	alu2 R6,R11,R10,sm,smb
    1933/    212A :                     ;    }
    1934/    212A :                     L237:
    1935/    212A :                     ;    while(Count-- > 0 && v == 0) {
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 34 - 6/2/2013 16:37:30


    1936/    212A : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1937/    212E : (MACRO)             	cpy2 R7,R11
    1938/    2132 : (MACRO)             	decm R7,1
    1939/    2133 : (MACRO)             	jzU2 r11,L239; EQ 0
    1940/    213B : (MACRO)             	jzU2 r6,L236; EQ 0
    1941/    2143 :                     L239:
    1942/    2143 :                     ;    return v;
    1943/    2143 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1944/    2147 :                     L235:
    1945/    2147 : (MACRO)             	popr r7
    1946/    214B : (MACRO)             	popr r6
    1947/    214F : (MACRO)             	popr r1
    1948/    2153 : (MACRO)             	popr r0
    1949/    2157 : (MACRO)             	Cretn
    1950/    2158 :                     
    1951/    2158 :                     _memcpy:
    1952/    2158 : (MACRO)             	pushr r1
    1953/    215D : (MACRO)             	pushr r6
    1954/    2162 : (MACRO)             	pushr r7
    1955/    2167 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    1956/    2173 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1957/    2173 :                     ;        char* dst8 = (char*)dest;
    1958/    2173 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    1959/    2177 :                     ;        char* src8 = (char*)src;
    1960/    2177 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
    1961/    217B : C0 21 8C            	lbr L242
    1962/    217E :                     L241:
    1963/    217E :                     ;        while (count--) {
    1964/    217E :                     ;            *dst8++ = *src8++;
    1965/    217E : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1966/    2182 : (MACRO)             	incm R6,1
    1967/    2183 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) opt1
    1968/    2187 : (MACRO)             	incm R1,1
    1969/    2188 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    1970/    218A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1971/    218C :                     ;        }
    1972/    218C :                     L242:
    1973/    218C :                     ;        while (count--) {
    1974/    218C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1975/    2190 : (MACRO)             	cpy2 R7,R11
    1976/    2194 : (MACRO)             	decm R7,1
    1977/    2195 : (MACRO)             	jnzU2 r11,L241; NE 0
    1978/    219D :                     ;        return dest;
    1979/    219D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1980/    21A1 :                     L240:
    1981/    21A1 : (MACRO)             	popr r7
    1982/    21A5 : (MACRO)             	popr r6
    1983/    21A9 : (MACRO)             	popr r1
    1984/    21AD : (MACRO)             	Cretn
    1985/    21AE :                     
    1986/    21AE :                     _memset:
    1987/    21AE : (MACRO)             	pushr r6
    1988/    21B3 : (MACRO)             	pushr r7
    1989/    21B8 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1990/    21C4 :                     ;{
    1991/    21C4 :                     ;    unsigned char* p=s;
    1992/    21C4 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    1993/    21C8 : C0 21 D6            	lbr L246
    1994/    21CB :                     L245:
    1995/    21CB :                     ;        *p++ = (unsigned char)c;
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 35 - 6/2/2013 16:37:30


    1996/    21CB : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    1997/    21CF : (MACRO)             	incm R6,1
    1998/    21D0 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    1999/    21D4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2000/    21D6 :                     L246:
    2001/    21D6 :                     ;    while(n--)
    2002/    21D6 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2003/    21DA : (MACRO)             	cpy2 R7,R11
    2004/    21DE : (MACRO)             	decm R7,1
    2005/    21DF : (MACRO)             	jnzU2 r11,L245; NE 0
    2006/    21E7 :                     ;    return s;
    2007/    21E7 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2008/    21EB :                     L244:
    2009/    21EB : (MACRO)             	popr r7
    2010/    21EF : (MACRO)             	popr r6
    2011/    21F3 : (MACRO)             	Cretn
    2012/    21F4 :                     
    2013/    21F4 :                     _spincluder:
    2014/    21F4 :                     ;void spincluder(){
    2015/    21F4 :                     ;	asm("\tinclude fastspi.inc\n");
    2016/    21F4 :                     	include fastspi.inc
(1)    1/    21F4 :                     ;unsigned char xferspi(unsigned char value){
(1)    2/    21F4 :                     ;  int i;
(1)    3/    21F4 :                     ;  for(i=0;i<8;i++){
(1)    4/    21F4 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
(1)    5/    21F4 :                     ;    value=(value<<1)|digitalRead(miso);;
(1)    6/    21F4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
(1)    7/    21F4 :                     ;    digitalWrite(sck,LOW);
(1)    8/    21F4 :                     ;  }
(1)    9/    21F4 :                     ;  return value;
(1)   10/    21F4 :                     ;}
(1)   11/    21F4 :                     	align	64
(1)   12/    2200 : =5H                 spisck:	equ	5
(1)   13/    2200 : =2H                 clkport: equ	2
(1)   14/    2200 : =7H                 spimosi: equ	7
(1)   15/    2200 :                     _xferspif:	;spi transfer routine - uses bit 7 of port 4 for mosi, bit 4 for clock
(1)   16/    2200 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   17/    2206 : EE                  	sex	memaddr
(1)   18/    2207 : F8 08               	ldi	8		;bit count
(1)   19/    2209 : A8                  	plo	r8		;for loop exit test
(1)   20/    220A :                     $$loop:
(1)   21/    220A : 0E                  	ldn	memaddr		;pick it up
(1)   22/    220B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   23/    220D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   24/    220E :                     ;
(1)   25/    220E : 8C                  	glo	r12		;first parameter
(1)   26/    220F : FA 80               	ani	0x80		;data bit
(1)   27/    2211 : F1                  	or			;combine with PIN4 value
(1)   28/    2212 : 5E                  	str	memaddr		;prepare to send out
(1)   29/    2213 : 64                  	out	4		;put out data bit with clock 0
(1)   30/    2214 : 2E                  	dec	memaddr		;back up the X register
(1)   31/    2215 :                     ;now we have to read the incoming data on ef3
(1)   32/    2215 : 8C                  	glo	r12		;get the data byte
(1)   33/    2216 : FE                  	shl			;advance to the next bit
(1)   34/    2217 : 36 1B               	b3	$$zeroin	;check the external line
(1)   35/    2219 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   36/    221B :                     $$zeroin:			
(1)   37/    221B : AC                  	plo	r12		;put it back
(1)   38/    221C :                     ;now we clock out our outbound bit
(1)   39/    221C : 0E                  	ldn	memaddr
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(fastspi.inc) - page 36 - 6/2/2013 16:37:30


(1)   40/    221D : F9 20               	ori	(1<<spisck)		;raise the clock bit
(1)   41/    221F : 5E                  	str	memaddr
(1)   42/    2220 : 64                  	out	4		;send it out
(1)   43/    2221 : 2E                  	dec	memaddr
(1)   44/    2222 : FA DF               	ani	0xff-(1<<spisck)	;clear the clock bit
(1)   45/    2224 : 5E                  	str	memaddr
(1)   46/    2225 : 64                  	out	4		;send out the falling clock edge
(1)   47/    2226 : 2E                  	dec	memaddr		
(1)   48/    2227 :                     ;now we check the bit count to do the rest of the byte
(1)   49/    2227 : 28                  	dec	r8		;bit count-1
(1)   50/    2228 : 88                  	glo	r8		;see if we're done
(1)   51/    2229 : 3A 0A               	bnz	$$loop		;go back for more if not
(1)   52/    222B :                     ;clean up and return the incoming data
(1)   53/    222B : 8C                  	glo	r12
(1)   54/    222C : AF                  	plo	retval		;put return value in correct register
(1)   55/    222D : (MACRO)             	zext	retval
(1)   56/    2230 : E2                  	sex	sp		;re-establish sp as X
(1)   57/    2231 : (MACRO)             	cretn
(1)   58/    2232 :                     	align	64
(1)   59/    2240 :                     _xferspif2:	;spi transfer routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   60/    2240 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   61/    2246 : EE                  	sex	memaddr
(1)   62/    2247 : F8 08               	ldi	8		;bit count
(1)   63/    2249 : A8                  	plo	r8		;for loop exit test
(1)   64/    224A :                     $$loop:
(1)   65/    224A : 0E                  	ldn	memaddr		;pick it up
(1)   66/    224B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   67/    224D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   68/    224E :                     ;
(1)   69/    224E : 8C                  	glo	r12		;first parameter
(1)   70/    224F : FA 80               	ani	0x80		;data bit
(1)   71/    2251 : F1                  	or			;combine with PIN4 value
(1)   72/    2252 : 5E                  	str	memaddr		;prepare to send out
(1)   73/    2253 : 64                  	out	4		;put out data bit with clock 0
(1)   74/    2254 : 2E                  	dec	memaddr		;back up the X register
(1)   75/    2255 :                     ;now we have to read the incoming data on ef3
(1)   76/    2255 : 8C                  	glo	r12		;get the data byte
(1)   77/    2256 : FE                  	shl			;advance to the next bit
(1)   78/    2257 : 36 5B               	b3	$$zeroin	;check the external line
(1)   79/    2259 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   80/    225B :                     $$zeroin:			
(1)   81/    225B : AC                  	plo	r12		;put it back
(1)   82/    225C :                     ;now we clock out our outbound bit
(1)   83/    225C : 62                  	out	clkport		;send out the clock pulse
(1)   84/    225D : 2E                  	dec	memaddr
(1)   85/    225E :                     ;now we check the bit count to do the rest of the byte
(1)   86/    225E : 28                  	dec	r8		;bit count-1
(1)   87/    225F : 88                  	glo	r8		;see if we're done
(1)   88/    2260 : 3A 4A               	bnz	$$loop		;go back for more if not(19 instructions/bit)
(1)   89/    2262 :                     ;clean up and return the incoming data
(1)   90/    2262 : 8C                  	glo	r12
(1)   91/    2263 : AF                  	plo	retval		;put return value in correct register
(1)   92/    2264 : (MACRO)             	zext	retval
(1)   93/    2267 : E2                  	sex	sp		;re-establish sp as X
(1)   94/    2268 : (MACRO)             	cretn
(1)   95/    2269 :                     	align 64
(1)   96/    2280 :                     _shiftoutf:	;spi shift out routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   97/    2280 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   98/    2286 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)   99/    2287 : FA 7F               	ani	0x7f		;make sure mosi is off
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(fastspi.inc) - page 37 - 6/2/2013 16:37:30


(1)  100/    2289 : 22                  	dec	sp		;make a work area
(1)  101/    228A : 52                  	str	sp		;save pin4 value
(1)  102/    228B : F8 08               	ldi	8		;bit count
(1)  103/    228D : A8                  	plo	r8		;for loop exit test
(1)  104/    228E :                     $$loop:
(1)  105/    228E : 8C                  	glo	regarg1		;get the value
(1)  106/    228F : FE                  	shl			;shift left for next bit
(1)  107/    2290 : AC                  	plo	regarg1		;save it
(1)  108/    2291 : 76                  	shrc			;get the top bit back
(1)  109/    2292 : FA 80               	ani	0x80		;isolate it
(1)  110/    2294 : F1                  	or			;combine with PIN4 value
(1)  111/    2295 : 22                  	dec 	sp		;make a work area
(1)  112/    2296 : 52                  	str	sp		;place value to be output
(1)  113/    2297 : 64                  	out 	4		;put it in the latch
(1)  114/    2298 : 22                  	dec	sp		;prep for clock
(1)  115/    2299 : 62                  	out	clkport		;send clock signal
(1)  116/    229A : 28                  	dec	r8		;bit count
(1)  117/    229B : 88                  	glo	r8
(1)  118/    229C : 3A 8E               	bnz	$$loop		;back for more (13 instructions per byte)
(1)  119/    229E : 12                  	inc	sp		;release work area
(1)  120/    229F : (MACRO)             	cretn
(1)  121/    22A0 :                     	
(1)  122/    22A0 :                     _shiftinf:	;spi input routine - uses ef3 for miso, N1 for clock
(1)  123/    22A0 : F8 00               	ldi	0		;initial value
(1)  124/    22A2 : AF                  	plo	retval		;prepare to return as an int
(1)  125/    22A3 : BF                  	phi	retval
(1)  126/    22A4 : F8 08               	ldi	8		;bit count		
(1)  127/    22A6 : A8                  	plo	r8		;for read loop
(1)  128/    22A7 :                     $$loop:
(1)  129/    22A7 :                     ;now we have to read the incoming data on ef3
(1)  130/    22A7 : 8F                  	glo	retval		;get the data byte
(1)  131/    22A8 : FE                  	shl			;advance to the next bit
(1)  132/    22A9 : 36 AD               	b3	$$zeroin	;check the external line
(1)  133/    22AB : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)  134/    22AD :                     $$zeroin:			
(1)  135/    22AD : AF                  	plo	retval		;put it back
(1)  136/    22AE :                     ;now we cycle the clock for our next inbound bit
(1)  137/    22AE : 22                  	dec	sp		;make a work area
(1)  138/    22AF : 62                  	out	clkport		;clock the next bit
(1)  139/    22B0 :                     	
(1)  140/    22B0 :                     ;now we check the bit count to do the rest of the byte
(1)  141/    22B0 : 28                  	dec	r8		;bit count-1
(1)  142/    22B1 : 88                  	glo	r8		;see if we're done
(1)  143/    22B2 : 3A A7               	bnz	$$loop		;go back for more if not(10 instructions per bit)
(1)  144/    22B4 :                     
(1)  145/    22B4 : E2                  	sex	sp		;re-establish sp as X
(1)  146/    22B5 : (MACRO)             	cretn
(1)  147/    22B6 :                     	
(1)  148/    22B6 :                     
    2017/    22B6 :                     ;}
    2018/    22B6 :                     L248:
    2019/    22B6 : (MACRO)             	Cretn
    2020/    22B7 :                     
    2021/    22B7 :                     _buf:
    2022/    22B7 : 00 00 00 00 00 00   	db 512 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 38 - 6/2/2013 16:37:30


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 39 - 6/2/2013 16:37:30


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
    2023/    24B7 :                     _sockreg:
    2024/    24B7 : 00                  	db 1 dup (0); zerofill global
    2025/    24B8 :                     L231:
    2026/    24B8 : 65                  	db 101
    2027/    24B9 : 78                  	db 120
    2028/    24BA : 69                  	db 105
    2029/    24BB : 74                  	db 116
    2030/    24BC : 20                  	db 32
    2031/    24BD : 25                  	db 37
    2032/    24BE : 64                  	db 100
    2033/    24BF : 0A                  	db 10
    2034/    24C0 : 00                  	db 0
    2035/    24C1 :                     	align 4
    2036/    24C4 :                     L169:
    2037/    24C4 : BF 80 00 00         	dd 0xbf800000
    2038/    24C8 :                     	align 4
    2039/    24C8 :                     L168:
    2040/    24C8 : 00 00 00 00         	dd 0x0
    2041/    24CC :                     L132:
    2042/    24CC : 43                  	db 67
    2043/    24CD : 6F                  	db 111
    2044/    24CE : 6E                  	db 110
    2045/    24CF : 74                  	db 116
    2046/    24D0 : 65                  	db 101
    2047/    24D1 : 6E                  	db 110
    2048/    24D2 : 74                  	db 116
    2049/    24D3 : 3A                  	db 58
    2050/    24D4 : 0A                  	db 10
    2051/    24D5 : 25                  	db 37
    2052/    24D6 : 73                  	db 115
    2053/    24D7 : 0A                  	db 10
    2054/    24D8 : 00                  	db 0
    2055/    24D9 :                     L129:
    2056/    24D9 : 72                  	db 114
    2057/    24DA : 73                  	db 115
    2058/    24DB : 69                  	db 105
    2059/    24DC : 7A                  	db 122
    2060/    24DD : 65                  	db 101
    2061/    24DE : 3D                  	db 61
    2062/    24DF : 25                  	db 37
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 40 - 6/2/2013 16:37:30


    2063/    24E0 : 64                  	db 100
    2064/    24E1 : 2C                  	db 44
    2065/    24E2 : 20                  	db 32
    2066/    24E3 : 72                  	db 114
    2067/    24E4 : 65                  	db 101
    2068/    24E5 : 63                  	db 99
    2069/    24E6 : 76                  	db 118
    2070/    24E7 : 3D                  	db 61
    2071/    24E8 : 25                  	db 37
    2072/    24E9 : 64                  	db 100
    2073/    24EA : 0A                  	db 10
    2074/    24EB : 00                  	db 0
    2075/    24EC :                     L124:
    2076/    24EC : 6C                  	db 108
    2077/    24ED : 6F                  	db 111
    2078/    24EE : 6F                  	db 111
    2079/    24EF : 70                  	db 112
    2080/    24F0 : 00                  	db 0
    2081/    24F1 :                     L119:
    2082/    24F1 : 6C                  	db 108
    2083/    24F2 : 6F                  	db 111
    2084/    24F3 : 6F                  	db 111
    2085/    24F4 : 70                  	db 112
    2086/    24F5 : 2E                  	db 46
    2087/    24F6 : 2E                  	db 46
    2088/    24F7 : 00                  	db 0
    2089/    24F8 :                     L118:
    2090/    24F8 : 61                  	db 97
    2091/    24F9 : 66                  	db 102
    2092/    24FA : 74                  	db 116
    2093/    24FB : 65                  	db 101
    2094/    24FC : 72                  	db 114
    2095/    24FD : 20                  	db 32
    2096/    24FE : 6C                  	db 108
    2097/    24FF : 69                  	db 105
    2098/    2500 : 73                  	db 115
    2099/    2501 : 74                  	db 116
    2100/    2502 : 65                  	db 101
    2101/    2503 : 6E                  	db 110
    2102/    2504 : 00                  	db 0
    2103/    2505 :                     L117:
    2104/    2505 : 61                  	db 97
    2105/    2506 : 66                  	db 102
    2106/    2507 : 74                  	db 116
    2107/    2508 : 65                  	db 101
    2108/    2509 : 72                  	db 114
    2109/    250A : 20                  	db 32
    2110/    250B : 73                  	db 115
    2111/    250C : 6F                  	db 111
    2112/    250D : 63                  	db 99
    2113/    250E : 6B                  	db 107
    2114/    250F : 65                  	db 101
    2115/    2510 : 74                  	db 116
    2116/    2511 : 20                  	db 32
    2117/    2512 : 6F                  	db 111
    2118/    2513 : 70                  	db 112
    2119/    2514 : 65                  	db 101
    2120/    2515 : 6E                  	db 110
    2121/    2516 : 00                  	db 0
    2122/    2517 :                     L116:
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 41 - 6/2/2013 16:37:30


    2123/    2517 : 61                  	db 97
    2124/    2518 : 66                  	db 102
    2125/    2519 : 74                  	db 116
    2126/    251A : 65                  	db 101
    2127/    251B : 72                  	db 114
    2128/    251C : 20                  	db 32
    2129/    251D : 73                  	db 115
    2130/    251E : 6F                  	db 111
    2131/    251F : 63                  	db 99
    2132/    2520 : 6B                  	db 107
    2133/    2521 : 65                  	db 101
    2134/    2522 : 74                  	db 116
    2135/    2523 : 20                  	db 32
    2136/    2524 : 69                  	db 105
    2137/    2525 : 6E                  	db 110
    2138/    2526 : 69                  	db 105
    2139/    2527 : 74                  	db 116
    2140/    2528 : 00                  	db 0
    2141/    2529 :                     L115:
    2142/    2529 : 61                  	db 97
    2143/    252A : 66                  	db 102
    2144/    252B : 74                  	db 116
    2145/    252C : 65                  	db 101
    2146/    252D : 72                  	db 114
    2147/    252E : 20                  	db 32
    2148/    252F : 69                  	db 105
    2149/    2530 : 6E                  	db 110
    2150/    2531 : 69                  	db 105
    2151/    2532 : 74                  	db 116
    2152/    2533 : 00                  	db 0
    2153/    2534 :                     L114:
    2154/    2534 : 70                  	db 112
    2155/    2535 : 6F                  	db 111
    2156/    2536 : 73                  	db 115
    2157/    2537 : 74                  	db 116
    2158/    2538 : 20                  	db 32
    2159/    2539 : 72                  	db 114
    2160/    253A : 65                  	db 101
    2161/    253B : 73                  	db 115
    2162/    253C : 65                  	db 101
    2163/    253D : 74                  	db 116
    2164/    253E : 00                  	db 0
    2165/    253F :                     L113:
    2166/    253F : 62                  	db 98
    2167/    2540 : 65                  	db 101
    2168/    2541 : 67                  	db 103
    2169/    2542 : 69                  	db 105
    2170/    2543 : 6E                  	db 110
    2171/    2544 : 00                  	db 0
    2172/    2545 :                     L111:
    2173/    2545 : 3C                  	db 60
    2174/    2546 : 73                  	db 115
    2175/    2547 : 74                  	db 116
    2176/    2548 : 72                  	db 114
    2177/    2549 : 6F                  	db 111
    2178/    254A : 6E                  	db 110
    2179/    254B : 67                  	db 103
    2180/    254C : 3E                  	db 62
    2181/    254D : 54                  	db 84
    2182/    254E : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 42 - 6/2/2013 16:37:30


    2183/    254F : 6D                  	db 109
    2184/    2550 : 70                  	db 112
    2185/    2551 : 3A                  	db 58
    2186/    2552 : 20                  	db 32
    2187/    2553 : 3C                  	db 60
    2188/    2554 : 69                  	db 105
    2189/    2555 : 6E                  	db 110
    2190/    2556 : 70                  	db 112
    2191/    2557 : 75                  	db 117
    2192/    2558 : 74                  	db 116
    2193/    2559 : 20                  	db 32
    2194/    255A : 74                  	db 116
    2195/    255B : 79                  	db 121
    2196/    255C : 70                  	db 112
    2197/    255D : 65                  	db 101
    2198/    255E : 3D                  	db 61
    2199/    255F : 22                  	db 34
    2200/    2560 : 74                  	db 116
    2201/    2561 : 65                  	db 101
    2202/    2562 : 78                  	db 120
    2203/    2563 : 74                  	db 116
    2204/    2564 : 22                  	db 34
    2205/    2565 : 20                  	db 32
    2206/    2566 : 73                  	db 115
    2207/    2567 : 69                  	db 105
    2208/    2568 : 7A                  	db 122
    2209/    2569 : 65                  	db 101
    2210/    256A : 3D                  	db 61
    2211/    256B : 32                  	db 50
    2212/    256C : 20                  	db 32
    2213/    256D : 76                  	db 118
    2214/    256E : 61                  	db 97
    2215/    256F : 6C                  	db 108
    2216/    2570 : 75                  	db 117
    2217/    2571 : 65                  	db 101
    2218/    2572 : 3D                  	db 61
    2219/    2573 : 22                  	db 34
    2220/    2574 : 31                  	db 49
    2221/    2575 : 38                  	db 56
    2222/    2576 : 30                  	db 48
    2223/    2577 : 32                  	db 50
    2224/    2578 : 21                  	db 33
    2225/    2579 : 20                  	db 32
    2226/    257A : 22                  	db 34
    2227/    257B : 3E                  	db 62
    2228/    257C : 20                  	db 32
    2229/    257D : 3C                  	db 60
    2230/    257E : 73                  	db 115
    2231/    257F : 75                  	db 117
    2232/    2580 : 70                  	db 112
    2233/    2581 : 3E                  	db 62
    2234/    2582 : 4F                  	db 79
    2235/    2583 : 3C                  	db 60
    2236/    2584 : 2F                  	db 47
    2237/    2585 : 73                  	db 115
    2238/    2586 : 75                  	db 117
    2239/    2587 : 70                  	db 112
    2240/    2588 : 3E                  	db 62
    2241/    2589 : 43                  	db 67
    2242/    258A : 0D                  	db 13
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 43 - 6/2/2013 16:37:30


    2243/    258B : 0A                  	db 10
    2244/    258C : 3C                  	db 60
    2245/    258D : 70                  	db 112
    2246/    258E : 3E                  	db 62
    2247/    258F : 3C                  	db 60
    2248/    2590 : 69                  	db 105
    2249/    2591 : 6E                  	db 110
    2250/    2592 : 70                  	db 112
    2251/    2593 : 75                  	db 117
    2252/    2594 : 74                  	db 116
    2253/    2595 : 20                  	db 32
    2254/    2596 : 74                  	db 116
    2255/    2597 : 79                  	db 121
    2256/    2598 : 70                  	db 112
    2257/    2599 : 65                  	db 101
    2258/    259A : 3D                  	db 61
    2259/    259B : 22                  	db 34
    2260/    259C : 72                  	db 114
    2261/    259D : 61                  	db 97
    2262/    259E : 64                  	db 100
    2263/    259F : 69                  	db 105
    2264/    25A0 : 6F                  	db 111
    2265/    25A1 : 22                  	db 34
    2266/    25A2 : 20                  	db 32
    2267/    25A3 : 6E                  	db 110
    2268/    25A4 : 61                  	db 97
    2269/    25A5 : 6D                  	db 109
    2270/    25A6 : 65                  	db 101
    2271/    25A7 : 3D                  	db 61
    2272/    25A8 : 22                  	db 34
    2273/    25A9 : 72                  	db 114
    2274/    25AA : 61                  	db 97
    2275/    25AB : 64                  	db 100
    2276/    25AC : 69                  	db 105
    2277/    25AD : 6F                  	db 111
    2278/    25AE : 22                  	db 34
    2279/    25AF : 20                  	db 32
    2280/    25B0 : 76                  	db 118
    2281/    25B1 : 61                  	db 97
    2282/    25B2 : 6C                  	db 108
    2283/    25B3 : 75                  	db 117
    2284/    25B4 : 65                  	db 101
    2285/    25B5 : 3D                  	db 61
    2286/    25B6 : 22                  	db 34
    2287/    25B7 : 30                  	db 48
    2288/    25B8 : 22                  	db 34
    2289/    25B9 : 20                  	db 32
    2290/    25BA : 72                  	db 114
    2291/    25BB : 61                  	db 97
    2292/    25BC : 64                  	db 100
    2293/    25BD : 69                  	db 105
    2294/    25BE : 6F                  	db 111
    2295/    25BF : 73                  	db 115
    2296/    25C0 : 74                  	db 116
    2297/    25C1 : 61                  	db 97
    2298/    25C2 : 74                  	db 116
    2299/    25C3 : 30                  	db 48
    2300/    25C4 : 3E                  	db 62
    2301/    25C5 : 51                  	db 81
    2302/    25C6 : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 44 - 6/2/2013 16:37:30


    2303/    25C7 : 4C                  	db 76
    2304/    25C8 : 45                  	db 69
    2305/    25C9 : 44                  	db 68
    2306/    25CA : 20                  	db 32
    2307/    25CB : 4F                  	db 79
    2308/    25CC : 4E                  	db 78
    2309/    25CD : 0D                  	db 13
    2310/    25CE : 0A                  	db 10
    2311/    25CF : 3C                  	db 60
    2312/    25D0 : 62                  	db 98
    2313/    25D1 : 72                  	db 114
    2314/    25D2 : 3E                  	db 62
    2315/    25D3 : 3C                  	db 60
    2316/    25D4 : 69                  	db 105
    2317/    25D5 : 6E                  	db 110
    2318/    25D6 : 70                  	db 112
    2319/    25D7 : 75                  	db 117
    2320/    25D8 : 74                  	db 116
    2321/    25D9 : 20                  	db 32
    2322/    25DA : 74                  	db 116
    2323/    25DB : 79                  	db 121
    2324/    25DC : 70                  	db 112
    2325/    25DD : 65                  	db 101
    2326/    25DE : 3D                  	db 61
    2327/    25DF : 22                  	db 34
    2328/    25E0 : 72                  	db 114
    2329/    25E1 : 61                  	db 97
    2330/    25E2 : 64                  	db 100
    2331/    25E3 : 69                  	db 105
    2332/    25E4 : 6F                  	db 111
    2333/    25E5 : 22                  	db 34
    2334/    25E6 : 20                  	db 32
    2335/    25E7 : 6E                  	db 110
    2336/    25E8 : 61                  	db 97
    2337/    25E9 : 6D                  	db 109
    2338/    25EA : 65                  	db 101
    2339/    25EB : 3D                  	db 61
    2340/    25EC : 22                  	db 34
    2341/    25ED : 72                  	db 114
    2342/    25EE : 61                  	db 97
    2343/    25EF : 64                  	db 100
    2344/    25F0 : 69                  	db 105
    2345/    25F1 : 6F                  	db 111
    2346/    25F2 : 22                  	db 34
    2347/    25F3 : 20                  	db 32
    2348/    25F4 : 76                  	db 118
    2349/    25F5 : 61                  	db 97
    2350/    25F6 : 6C                  	db 108
    2351/    25F7 : 75                  	db 117
    2352/    25F8 : 65                  	db 101
    2353/    25F9 : 3D                  	db 61
    2354/    25FA : 22                  	db 34
    2355/    25FB : 31                  	db 49
    2356/    25FC : 22                  	db 34
    2357/    25FD : 20                  	db 32
    2358/    25FE : 72                  	db 114
    2359/    25FF : 61                  	db 97
    2360/    2600 : 64                  	db 100
    2361/    2601 : 69                  	db 105
    2362/    2602 : 6F                  	db 111
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 45 - 6/2/2013 16:37:30


    2363/    2603 : 73                  	db 115
    2364/    2604 : 74                  	db 116
    2365/    2605 : 61                  	db 97
    2366/    2606 : 74                  	db 116
    2367/    2607 : 31                  	db 49
    2368/    2608 : 3E                  	db 62
    2369/    2609 : 51                  	db 81
    2370/    260A : 20                  	db 32
    2371/    260B : 4C                  	db 76
    2372/    260C : 45                  	db 69
    2373/    260D : 44                  	db 68
    2374/    260E : 20                  	db 32
    2375/    260F : 4F                  	db 79
    2376/    2610 : 46                  	db 70
    2377/    2611 : 46                  	db 70
    2378/    2612 : 0D                  	db 13
    2379/    2613 : 0A                  	db 10
    2380/    2614 : 3C                  	db 60
    2381/    2615 : 2F                  	db 47
    2382/    2616 : 73                  	db 115
    2383/    2617 : 74                  	db 116
    2384/    2618 : 72                  	db 114
    2385/    2619 : 6F                  	db 111
    2386/    261A : 6E                  	db 110
    2387/    261B : 67                  	db 103
    2388/    261C : 3E                  	db 62
    2389/    261D : 3C                  	db 60
    2390/    261E : 70                  	db 112
    2391/    261F : 3E                  	db 62
    2392/    2620 : 0D                  	db 13
    2393/    2621 : 0A                  	db 10
    2394/    2622 : 3C                  	db 60
    2395/    2623 : 69                  	db 105
    2396/    2624 : 6E                  	db 110
    2397/    2625 : 70                  	db 112
    2398/    2626 : 75                  	db 117
    2399/    2627 : 74                  	db 116
    2400/    2628 : 20                  	db 32
    2401/    2629 : 74                  	db 116
    2402/    262A : 79                  	db 121
    2403/    262B : 70                  	db 112
    2404/    262C : 65                  	db 101
    2405/    262D : 3D                  	db 61
    2406/    262E : 22                  	db 34
    2407/    262F : 73                  	db 115
    2408/    2630 : 75                  	db 117
    2409/    2631 : 62                  	db 98
    2410/    2632 : 6D                  	db 109
    2411/    2633 : 69                  	db 105
    2412/    2634 : 74                  	db 116
    2413/    2635 : 22                  	db 34
    2414/    2636 : 3E                  	db 62
    2415/    2637 : 0D                  	db 13
    2416/    2638 : 0A                  	db 10
    2417/    2639 : 3C                  	db 60
    2418/    263A : 2F                  	db 47
    2419/    263B : 66                  	db 102
    2420/    263C : 6F                  	db 111
    2421/    263D : 72                  	db 114
    2422/    263E : 6D                  	db 109
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 46 - 6/2/2013 16:37:30


    2423/    263F : 3E                  	db 62
    2424/    2640 : 3C                  	db 60
    2425/    2641 : 2F                  	db 47
    2426/    2642 : 73                  	db 115
    2427/    2643 : 70                  	db 112
    2428/    2644 : 61                  	db 97
    2429/    2645 : 6E                  	db 110
    2430/    2646 : 3E                  	db 62
    2431/    2647 : 3C                  	db 60
    2432/    2648 : 2F                  	db 47
    2433/    2649 : 62                  	db 98
    2434/    264A : 6F                  	db 111
    2435/    264B : 64                  	db 100
    2436/    264C : 79                  	db 121
    2437/    264D : 3E                  	db 62
    2438/    264E : 3C                  	db 60
    2439/    264F : 2F                  	db 47
    2440/    2650 : 68                  	db 104
    2441/    2651 : 74                  	db 116
    2442/    2652 : 6D                  	db 109
    2443/    2653 : 6C                  	db 108
    2444/    2654 : 3E                  	db 62
    2445/    2655 : 0D                  	db 13
    2446/    2656 : 0A                  	db 10
    2447/    2657 : 00                  	db 0
    2448/    2658 :                     L110:
    2449/    2658 : 48                  	db 72
    2450/    2659 : 54                  	db 84
    2451/    265A : 54                  	db 84
    2452/    265B : 50                  	db 80
    2453/    265C : 2F                  	db 47
    2454/    265D : 31                  	db 49
    2455/    265E : 2E                  	db 46
    2456/    265F : 30                  	db 48
    2457/    2660 : 20                  	db 32
    2458/    2661 : 32                  	db 50
    2459/    2662 : 30                  	db 48
    2460/    2663 : 30                  	db 48
    2461/    2664 : 20                  	db 32
    2462/    2665 : 4F                  	db 79
    2463/    2666 : 4B                  	db 75
    2464/    2667 : 0D                  	db 13
    2465/    2668 : 0A                  	db 10
    2466/    2669 : 43                  	db 67
    2467/    266A : 6F                  	db 111
    2468/    266B : 6E                  	db 110
    2469/    266C : 74                  	db 116
    2470/    266D : 65                  	db 101
    2471/    266E : 6E                  	db 110
    2472/    266F : 74                  	db 116
    2473/    2670 : 2D                  	db 45
    2474/    2671 : 54                  	db 84
    2475/    2672 : 79                  	db 121
    2476/    2673 : 70                  	db 112
    2477/    2674 : 65                  	db 101
    2478/    2675 : 3A                  	db 58
    2479/    2676 : 20                  	db 32
    2480/    2677 : 74                  	db 116
    2481/    2678 : 65                  	db 101
    2482/    2679 : 78                  	db 120
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 47 - 6/2/2013 16:37:30


    2483/    267A : 74                  	db 116
    2484/    267B : 2F                  	db 47
    2485/    267C : 68                  	db 104
    2486/    267D : 74                  	db 116
    2487/    267E : 6D                  	db 109
    2488/    267F : 6C                  	db 108
    2489/    2680 : 0D                  	db 13
    2490/    2681 : 0A                  	db 10
    2491/    2682 : 0D                  	db 13
    2492/    2683 : 0A                  	db 10
    2493/    2684 : 3C                  	db 60
    2494/    2685 : 68                  	db 104
    2495/    2686 : 74                  	db 116
    2496/    2687 : 6D                  	db 109
    2497/    2688 : 6C                  	db 108
    2498/    2689 : 3E                  	db 62
    2499/    268A : 3C                  	db 60
    2500/    268B : 62                  	db 98
    2501/    268C : 6F                  	db 111
    2502/    268D : 64                  	db 100
    2503/    268E : 79                  	db 121
    2504/    268F : 3E                  	db 62
    2505/    2690 : 3C                  	db 60
    2506/    2691 : 73                  	db 115
    2507/    2692 : 70                  	db 112
    2508/    2693 : 61                  	db 97
    2509/    2694 : 6E                  	db 110
    2510/    2695 : 20                  	db 32
    2511/    2696 : 73                  	db 115
    2512/    2697 : 74                  	db 116
    2513/    2698 : 79                  	db 121
    2514/    2699 : 6C                  	db 108
    2515/    269A : 65                  	db 101
    2516/    269B : 3D                  	db 61
    2517/    269C : 22                  	db 34
    2518/    269D : 63                  	db 99
    2519/    269E : 6F                  	db 111
    2520/    269F : 6C                  	db 108
    2521/    26A0 : 6F                  	db 111
    2522/    26A1 : 72                  	db 114
    2523/    26A2 : 3A                  	db 58
    2524/    26A3 : 23                  	db 35
    2525/    26A4 : 30                  	db 48
    2526/    26A5 : 30                  	db 48
    2527/    26A6 : 30                  	db 48
    2528/    26A7 : 30                  	db 48
    2529/    26A8 : 41                  	db 65
    2530/    26A9 : 30                  	db 48
    2531/    26AA : 22                  	db 34
    2532/    26AB : 3E                  	db 62
    2533/    26AC : 0D                  	db 13
    2534/    26AD : 0A                  	db 10
    2535/    26AE : 3C                  	db 60
    2536/    26AF : 68                  	db 104
    2537/    26B0 : 31                  	db 49
    2538/    26B1 : 3E                  	db 62
    2539/    26B2 : 3C                  	db 60
    2540/    26B3 : 63                  	db 99
    2541/    26B4 : 65                  	db 101
    2542/    26B5 : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 48 - 6/2/2013 16:37:30


    2543/    26B6 : 74                  	db 116
    2544/    26B7 : 65                  	db 101
    2545/    26B8 : 72                  	db 114
    2546/    26B9 : 3E                  	db 62
    2547/    26BA : 4F                  	db 79
    2548/    26BB : 6C                  	db 108
    2549/    26BC : 64                  	db 100
    2550/    26BD : 75                  	db 117
    2551/    26BE : 69                  	db 105
    2552/    26BF : 6E                  	db 110
    2553/    26C0 : 6F                  	db 111
    2554/    26C1 : 20                  	db 32
    2555/    26C2 : 57                  	db 87
    2556/    26C3 : 65                  	db 101
    2557/    26C4 : 62                  	db 98
    2558/    26C5 : 20                  	db 32
    2559/    26C6 : 53                  	db 83
    2560/    26C7 : 65                  	db 101
    2561/    26C8 : 72                  	db 114
    2562/    26C9 : 76                  	db 118
    2563/    26CA : 65                  	db 101
    2564/    26CB : 72                  	db 114
    2565/    26CC : 3C                  	db 60
    2566/    26CD : 2F                  	db 47
    2567/    26CE : 63                  	db 99
    2568/    26CF : 65                  	db 101
    2569/    26D0 : 6E                  	db 110
    2570/    26D1 : 74                  	db 116
    2571/    26D2 : 65                  	db 101
    2572/    26D3 : 72                  	db 114
    2573/    26D4 : 3E                  	db 62
    2574/    26D5 : 3C                  	db 60
    2575/    26D6 : 2F                  	db 47
    2576/    26D7 : 68                  	db 104
    2577/    26D8 : 31                  	db 49
    2578/    26D9 : 3E                  	db 62
    2579/    26DA : 0D                  	db 13
    2580/    26DB : 0A                  	db 10
    2581/    26DC : 3C                  	db 60
    2582/    26DD : 68                  	db 104
    2583/    26DE : 33                  	db 51
    2584/    26DF : 3E                  	db 62
    2585/    26E0 : 31                  	db 49
    2586/    26E1 : 38                  	db 56
    2587/    26E2 : 30                  	db 48
    2588/    26E3 : 32                  	db 50
    2589/    26E4 : 20                  	db 32
    2590/    26E5 : 4D                  	db 77
    2591/    26E6 : 65                  	db 101
    2592/    26E7 : 6D                  	db 109
    2593/    26E8 : 62                  	db 98
    2594/    26E9 : 65                  	db 101
    2595/    26EA : 72                  	db 114
    2596/    26EB : 73                  	db 115
    2597/    26EC : 68                  	db 104
    2598/    26ED : 69                  	db 105
    2599/    26EE : 70                  	db 112
    2600/    26EF : 20                  	db 32
    2601/    26F0 : 43                  	db 67
    2602/    26F1 : 61                  	db 97
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 49 - 6/2/2013 16:37:30


    2603/    26F2 : 72                  	db 114
    2604/    26F3 : 64                  	db 100
    2605/    26F4 : 20                  	db 32
    2606/    26F5 : 61                  	db 97
    2607/    26F6 : 6E                  	db 110
    2608/    26F7 : 64                  	db 100
    2609/    26F8 : 20                  	db 32
    2610/    26F9 : 57                  	db 87
    2611/    26FA : 69                  	db 105
    2612/    26FB : 7A                  	db 122
    2613/    26FC : 6E                  	db 110
    2614/    26FD : 65                  	db 101
    2615/    26FE : 74                  	db 116
    2616/    26FF : 20                  	db 32
    2617/    2700 : 77                  	db 119
    2618/    2701 : 35                  	db 53
    2619/    2702 : 31                  	db 49
    2620/    2703 : 30                  	db 48
    2621/    2704 : 30                  	db 48
    2622/    2705 : 3C                  	db 60
    2623/    2706 : 2F                  	db 47
    2624/    2707 : 68                  	db 104
    2625/    2708 : 33                  	db 51
    2626/    2709 : 3E                  	db 62
    2627/    270A : 0D                  	db 13
    2628/    270B : 0A                  	db 10
    2629/    270C : 3C                  	db 60
    2630/    270D : 70                  	db 112
    2631/    270E : 3E                  	db 62
    2632/    270F : 3C                  	db 60
    2633/    2710 : 66                  	db 102
    2634/    2711 : 6F                  	db 111
    2635/    2712 : 72                  	db 114
    2636/    2713 : 6D                  	db 109
    2637/    2714 : 20                  	db 32
    2638/    2715 : 6D                  	db 109
    2639/    2716 : 65                  	db 101
    2640/    2717 : 74                  	db 116
    2641/    2718 : 68                  	db 104
    2642/    2719 : 6F                  	db 111
    2643/    271A : 64                  	db 100
    2644/    271B : 3D                  	db 61
    2645/    271C : 22                  	db 34
    2646/    271D : 50                  	db 80
    2647/    271E : 4F                  	db 79
    2648/    271F : 53                  	db 83
    2649/    2720 : 54                  	db 84
    2650/    2721 : 22                  	db 34
    2651/    2722 : 3E                  	db 62
    2652/    2723 : 0D                  	db 13
    2653/    2724 : 0A                  	db 10
    2654/    2725 : 00                  	db 0
    2655/    2726 :                     L108:
    2656/    2726 : 0A                  	db 10
    2657/    2727 : 00                  	db 0
    2658/    2728 :                     L105:
    2659/    2728 : 25                  	db 37
    2660/    2729 : 78                  	db 120
    2661/    272A : 20                  	db 32
    2662/    272B : 00                  	db 0
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 50 - 6/2/2013 16:37:30


    2663/    272C :                     L98:
    2664/    272C : 25                  	db 37
    2665/    272D : 78                  	db 120
    2666/    272E : 3D                  	db 61
    2667/    272F : 00                  	db 0
    2668/    2730 :                     L96:
    2669/    2730 : 20                  	db 32
    2670/    2731 : 61                  	db 97
    2671/    2732 : 74                  	db 116
    2672/    2733 : 20                  	db 32
    2673/    2734 : 25                  	db 37
    2674/    2735 : 73                  	db 115
    2675/    2736 : 3A                  	db 58
    2676/    2737 : 20                  	db 32
    2677/    2738 : 77                  	db 119
    2678/    2739 : 69                  	db 105
    2679/    273A : 7A                  	db 122
    2680/    273B : 6E                  	db 110
    2681/    273C : 65                  	db 101
    2682/    273D : 74                  	db 116
    2683/    273E : 20                  	db 32
    2684/    273F : 4D                  	db 77
    2685/    2740 : 52                  	db 82
    2686/    2741 : 3D                  	db 61
    2687/    2742 : 25                  	db 37
    2688/    2743 : 78                  	db 120
    2689/    2744 : 2C                  	db 44
    2690/    2745 : 20                  	db 32
    2691/    2746 : 53                  	db 83
    2692/    2747 : 30                  	db 48
    2693/    2748 : 5F                  	db 95
    2694/    2749 : 53                  	db 83
    2695/    274A : 52                  	db 82
    2696/    274B : 3D                  	db 61
    2697/    274C : 25                  	db 37
    2698/    274D : 78                  	db 120
    2699/    274E : 2C                  	db 44
    2700/    274F : 20                  	db 32
    2701/    2750 : 53                  	db 83
    2702/    2751 : 30                  	db 48
    2703/    2752 : 5F                  	db 95
    2704/    2753 : 4D                  	db 77
    2705/    2754 : 52                  	db 82
    2706/    2755 : 3D                  	db 61
    2707/    2756 : 25                  	db 37
    2708/    2757 : 78                  	db 120
    2709/    2758 : 2C                  	db 44
    2710/    2759 : 20                  	db 32
    2711/    275A : 53                  	db 83
    2712/    275B : 30                  	db 48
    2713/    275C : 5F                  	db 95
    2714/    275D : 50                  	db 80
    2715/    275E : 4F                  	db 79
    2716/    275F : 52                  	db 82
    2717/    2760 : 54                  	db 84
    2718/    2761 : 3D                  	db 61
    2719/    2762 : 25                  	db 37
    2720/    2763 : 78                  	db 120
    2721/    2764 : 20                  	db 32
    2722/    2765 : 25                  	db 37
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 51 - 6/2/2013 16:37:30


    2723/    2766 : 78                  	db 120
    2724/    2767 : 0A                  	db 10
    2725/    2768 : 00                  	db 0
    2726/    2769 :                     L83:
    2727/    2769 : 53                  	db 83
    2728/    276A : 65                  	db 101
    2729/    276B : 6E                  	db 110
    2730/    276C : 64                  	db 100
    2731/    276D : 20                  	db 32
    2732/    276E : 53                  	db 83
    2733/    276F : 69                  	db 105
    2734/    2770 : 7A                  	db 122
    2735/    2771 : 65                  	db 101
    2736/    2772 : 3A                  	db 58
    2737/    2773 : 20                  	db 32
    2738/    2774 : 25                  	db 37
    2739/    2775 : 64                  	db 100
    2740/    2776 : 0A                  	db 10
    2741/    2777 : 00                  	db 0
    2742/    2778 :                     L74:
    2743/    2778 : 52                  	db 82
    2744/    2779 : 58                  	db 88
    2745/    277A : 20                  	db 32
    2746/    277B : 42                  	db 66
    2747/    277C : 75                  	db 117
    2748/    277D : 66                  	db 102
    2749/    277E : 66                  	db 102
    2750/    277F : 65                  	db 101
    2751/    2780 : 72                  	db 114
    2752/    2781 : 3A                  	db 58
    2753/    2782 : 20                  	db 32
    2754/    2783 : 25                  	db 37
    2755/    2784 : 78                  	db 120
    2756/    2785 : 0A                  	db 10
    2757/    2786 : 00                  	db 0
    2758/    2787 :                     L61:
    2759/    2787 : 44                  	db 68
    2760/    2788 : 6F                  	db 111
    2761/    2789 : 6E                  	db 110
    2762/    278A : 65                  	db 101
    2763/    278B : 20                  	db 32
    2764/    278C : 57                  	db 87
    2765/    278D : 69                  	db 105
    2766/    278E : 7A                  	db 122
    2767/    278F : 6E                  	db 110
    2768/    2790 : 65                  	db 101
    2769/    2791 : 74                  	db 116
    2770/    2792 : 20                  	db 32
    2771/    2793 : 57                  	db 87
    2772/    2794 : 35                  	db 53
    2773/    2795 : 31                  	db 49
    2774/    2796 : 30                  	db 48
    2775/    2797 : 30                  	db 48
    2776/    2798 : 20                  	db 32
    2777/    2799 : 49                  	db 73
    2778/    279A : 6E                  	db 110
    2779/    279B : 69                  	db 105
    2780/    279C : 74                  	db 116
    2781/    279D : 69                  	db 105
    2782/    279E : 61                  	db 97
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 52 - 6/2/2013 16:37:30


    2783/    279F : 6C                  	db 108
    2784/    27A0 : 69                  	db 105
    2785/    27A1 : 7A                  	db 122
    2786/    27A2 : 61                  	db 97
    2787/    27A3 : 74                  	db 116
    2788/    27A4 : 69                  	db 105
    2789/    27A5 : 6F                  	db 111
    2790/    27A6 : 6E                  	db 110
    2791/    27A7 : 21                  	db 33
    2792/    27A8 : 0A                  	db 10
    2793/    27A9 : 00                  	db 0
    2794/    27AA :                     L60:
    2795/    27AA : 53                  	db 83
    2796/    27AB : 65                  	db 101
    2797/    27AC : 74                  	db 116
    2798/    27AD : 74                  	db 116
    2799/    27AE : 69                  	db 105
    2800/    27AF : 6E                  	db 110
    2801/    27B0 : 67                  	db 103
    2802/    27B1 : 20                  	db 32
    2803/    27B2 : 57                  	db 87
    2804/    27B3 : 69                  	db 105
    2805/    27B4 : 7A                  	db 122
    2806/    27B5 : 6E                  	db 110
    2807/    27B6 : 65                  	db 101
    2808/    27B7 : 74                  	db 116
    2809/    27B8 : 20                  	db 32
    2810/    27B9 : 52                  	db 82
    2811/    27BA : 4D                  	db 77
    2812/    27BB : 53                  	db 83
    2813/    27BC : 52                  	db 82
    2814/    27BD : 20                  	db 32
    2815/    27BE : 61                  	db 97
    2816/    27BF : 6E                  	db 110
    2817/    27C0 : 64                  	db 100
    2818/    27C1 : 20                  	db 32
    2819/    27C2 : 54                  	db 84
    2820/    27C3 : 4D                  	db 77
    2821/    27C4 : 53                  	db 83
    2822/    27C5 : 52                  	db 82
    2823/    27C6 : 0A                  	db 10
    2824/    27C7 : 0A                  	db 10
    2825/    27C8 : 00                  	db 0
    2826/    27C9 :                     L59:
    2827/    27C9 : 52                  	db 82
    2828/    27CA : 65                  	db 101
    2829/    27CB : 61                  	db 97
    2830/    27CC : 64                  	db 100
    2831/    27CD : 69                  	db 105
    2832/    27CE : 6E                  	db 110
    2833/    27CF : 67                  	db 103
    2834/    27D0 : 20                  	db 32
    2835/    27D1 : 47                  	db 71
    2836/    27D2 : 41                  	db 65
    2837/    27D3 : 52                  	db 82
    2838/    27D4 : 3A                  	db 58
    2839/    27D5 : 20                  	db 32
    2840/    27D6 : 25                  	db 37
    2841/    27D7 : 64                  	db 100
    2842/    27D8 : 2E                  	db 46
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 53 - 6/2/2013 16:37:30


    2843/    27D9 : 25                  	db 37
    2844/    27DA : 64                  	db 100
    2845/    27DB : 2E                  	db 46
    2846/    27DC : 25                  	db 37
    2847/    27DD : 64                  	db 100
    2848/    27DE : 2E                  	db 46
    2849/    27DF : 25                  	db 37
    2850/    27E0 : 64                  	db 100
    2851/    27E1 : 0A                  	db 10
    2852/    27E2 : 0A                  	db 10
    2853/    27E3 : 00                  	db 0
    2854/    27E4 :                     L58:
    2855/    27E4 : 52                  	db 82
    2856/    27E5 : 65                  	db 101
    2857/    27E6 : 61                  	db 97
    2858/    27E7 : 64                  	db 100
    2859/    27E8 : 69                  	db 105
    2860/    27E9 : 6E                  	db 110
    2861/    27EA : 67                  	db 103
    2862/    27EB : 20                  	db 32
    2863/    27EC : 53                  	db 83
    2864/    27ED : 55                  	db 85
    2865/    27EE : 42                  	db 66
    2866/    27EF : 52                  	db 82
    2867/    27F0 : 3A                  	db 58
    2868/    27F1 : 20                  	db 32
    2869/    27F2 : 25                  	db 37
    2870/    27F3 : 64                  	db 100
    2871/    27F4 : 2E                  	db 46
    2872/    27F5 : 25                  	db 37
    2873/    27F6 : 64                  	db 100
    2874/    27F7 : 2E                  	db 46
    2875/    27F8 : 25                  	db 37
    2876/    27F9 : 64                  	db 100
    2877/    27FA : 2E                  	db 46
    2878/    27FB : 25                  	db 37
    2879/    27FC : 64                  	db 100
    2880/    27FD : 0A                  	db 10
    2881/    27FE : 0A                  	db 10
    2882/    27FF : 00                  	db 0
    2883/    2800 :                     L57:
    2884/    2800 : 52                  	db 82
    2885/    2801 : 65                  	db 101
    2886/    2802 : 61                  	db 97
    2887/    2803 : 64                  	db 100
    2888/    2804 : 69                  	db 105
    2889/    2805 : 6E                  	db 110
    2890/    2806 : 67                  	db 103
    2891/    2807 : 20                  	db 32
    2892/    2808 : 53                  	db 83
    2893/    2809 : 49                  	db 73
    2894/    280A : 50                  	db 80
    2895/    280B : 52                  	db 82
    2896/    280C : 3A                  	db 58
    2897/    280D : 20                  	db 32
    2898/    280E : 25                  	db 37
    2899/    280F : 64                  	db 100
    2900/    2810 : 2E                  	db 46
    2901/    2811 : 25                  	db 37
    2902/    2812 : 64                  	db 100
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 54 - 6/2/2013 16:37:30


    2903/    2813 : 2E                  	db 46
    2904/    2814 : 25                  	db 37
    2905/    2815 : 64                  	db 100
    2906/    2816 : 2E                  	db 46
    2907/    2817 : 25                  	db 37
    2908/    2818 : 64                  	db 100
    2909/    2819 : 0A                  	db 10
    2910/    281A : 0A                  	db 10
    2911/    281B : 00                  	db 0
    2912/    281C :                     L50:
    2913/    281C : 53                  	db 83
    2914/    281D : 65                  	db 101
    2915/    281E : 74                  	db 116
    2916/    281F : 74                  	db 116
    2917/    2820 : 69                  	db 105
    2918/    2821 : 6E                  	db 110
    2919/    2822 : 67                  	db 103
    2920/    2823 : 20                  	db 32
    2921/    2824 : 49                  	db 73
    2922/    2825 : 50                  	db 80
    2923/    2826 : 20                  	db 32
    2924/    2827 : 41                  	db 65
    2925/    2828 : 64                  	db 100
    2926/    2829 : 64                  	db 100
    2927/    282A : 72                  	db 114
    2928/    282B : 65                  	db 101
    2929/    282C : 73                  	db 115
    2930/    282D : 73                  	db 115
    2931/    282E : 20                  	db 32
    2932/    282F : 25                  	db 37
    2933/    2830 : 64                  	db 100
    2934/    2831 : 2E                  	db 46
    2935/    2832 : 25                  	db 37
    2936/    2833 : 64                  	db 100
    2937/    2834 : 2E                  	db 46
    2938/    2835 : 25                  	db 37
    2939/    2836 : 64                  	db 100
    2940/    2837 : 2E                  	db 46
    2941/    2838 : 25                  	db 37
    2942/    2839 : 64                  	db 100
    2943/    283A : 0A                  	db 10
    2944/    283B : 00                  	db 0
    2945/    283C :                     L43:
    2946/    283C : 53                  	db 83
    2947/    283D : 65                  	db 101
    2948/    283E : 74                  	db 116
    2949/    283F : 74                  	db 116
    2950/    2840 : 69                  	db 105
    2951/    2841 : 6E                  	db 110
    2952/    2842 : 67                  	db 103
    2953/    2843 : 20                  	db 32
    2954/    2844 : 53                  	db 83
    2955/    2845 : 75                  	db 117
    2956/    2846 : 62                  	db 98
    2957/    2847 : 6E                  	db 110
    2958/    2848 : 65                  	db 101
    2959/    2849 : 74                  	db 116
    2960/    284A : 20                  	db 32
    2961/    284B : 4D                  	db 77
    2962/    284C : 61                  	db 97
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 55 - 6/2/2013 16:37:30


    2963/    284D : 73                  	db 115
    2964/    284E : 6B                  	db 107
    2965/    284F : 20                  	db 32
    2966/    2850 : 20                  	db 32
    2967/    2851 : 25                  	db 37
    2968/    2852 : 64                  	db 100
    2969/    2853 : 2E                  	db 46
    2970/    2854 : 25                  	db 37
    2971/    2855 : 64                  	db 100
    2972/    2856 : 2E                  	db 46
    2973/    2857 : 25                  	db 37
    2974/    2858 : 64                  	db 100
    2975/    2859 : 2E                  	db 46
    2976/    285A : 25                  	db 37
    2977/    285B : 64                  	db 100
    2978/    285C : 0A                  	db 10
    2979/    285D : 00                  	db 0
    2980/    285E :                     L32:
    2981/    285E : 53                  	db 83
    2982/    285F : 65                  	db 101
    2983/    2860 : 74                  	db 116
    2984/    2861 : 74                  	db 116
    2985/    2862 : 69                  	db 105
    2986/    2863 : 6E                  	db 110
    2987/    2864 : 67                  	db 103
    2988/    2865 : 20                  	db 32
    2989/    2866 : 53                  	db 83
    2990/    2867 : 6F                  	db 111
    2991/    2868 : 75                  	db 117
    2992/    2869 : 72                  	db 114
    2993/    286A : 63                  	db 99
    2994/    286B : 65                  	db 101
    2995/    286C : 20                  	db 32
    2996/    286D : 41                  	db 65
    2997/    286E : 64                  	db 100
    2998/    286F : 64                  	db 100
    2999/    2870 : 72                  	db 114
    3000/    2871 : 65                  	db 101
    3001/    2872 : 73                  	db 115
    3002/    2873 : 73                  	db 115
    3003/    2874 : 20                  	db 32
    3004/    2875 : 25                  	db 37
    3005/    2876 : 78                  	db 120
    3006/    2877 : 3A                  	db 58
    3007/    2878 : 25                  	db 37
    3008/    2879 : 78                  	db 120
    3009/    287A : 3A                  	db 58
    3010/    287B : 25                  	db 37
    3011/    287C : 78                  	db 120
    3012/    287D : 3A                  	db 58
    3013/    287E : 25                  	db 37
    3014/    287F : 78                  	db 120
    3015/    2880 : 3A                  	db 58
    3016/    2881 : 25                  	db 37
    3017/    2882 : 78                  	db 120
    3018/    2883 : 3A                  	db 58
    3019/    2884 : 25                  	db 37
    3020/    2885 : 78                  	db 120
    3021/    2886 : 0A                  	db 10
    3022/    2887 : 00                  	db 0
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 56 - 6/2/2013 16:37:30


    3023/    2888 :                     L25:
    3024/    2888 : 53                  	db 83
    3025/    2889 : 65                  	db 101
    3026/    288A : 74                  	db 116
    3027/    288B : 74                  	db 116
    3028/    288C : 69                  	db 105
    3029/    288D : 6E                  	db 110
    3030/    288E : 67                  	db 103
    3031/    288F : 20                  	db 32
    3032/    2890 : 47                  	db 71
    3033/    2891 : 61                  	db 97
    3034/    2892 : 74                  	db 116
    3035/    2893 : 65                  	db 101
    3036/    2894 : 77                  	db 119
    3037/    2895 : 61                  	db 97
    3038/    2896 : 79                  	db 121
    3039/    2897 : 20                  	db 32
    3040/    2898 : 41                  	db 65
    3041/    2899 : 64                  	db 100
    3042/    289A : 64                  	db 100
    3043/    289B : 72                  	db 114
    3044/    289C : 65                  	db 101
    3045/    289D : 73                  	db 115
    3046/    289E : 73                  	db 115
    3047/    289F : 20                  	db 32
    3048/    28A0 : 25                  	db 37
    3049/    28A1 : 64                  	db 100
    3050/    28A2 : 2E                  	db 46
    3051/    28A3 : 25                  	db 37
    3052/    28A4 : 64                  	db 100
    3053/    28A5 : 2E                  	db 46
    3054/    28A6 : 25                  	db 37
    3055/    28A7 : 64                  	db 100
    3056/    28A8 : 2E                  	db 46
    3057/    28A9 : 25                  	db 37
    3058/    28AA : 64                  	db 100
    3059/    28AB : 0A                  	db 10
    3060/    28AC : 00                  	db 0
    3061/    28AD :                     L24:
    3062/    28AD : 4D                  	db 77
    3063/    28AE : 52                  	db 82
    3064/    28AF : 3D                  	db 61
    3065/    28B0 : 25                  	db 37
    3066/    28B1 : 78                  	db 120
    3067/    28B2 : 0A                  	db 10
    3068/    28B3 : 00                  	db 0
    3069/    28B4 :                     	include lcc1802Epilofl.inc
(1)    1/    28B4 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    28B4 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    28B4 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    28B4 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    28B4 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    28B4 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    28B4 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    28B4 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    28B4 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    28B4 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    28B4 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    28B4 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    28B4 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 57 - 6/2/2013 16:37:30


(1)   14/    28B4 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    28B4 :                     
(1)   16/    28B4 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    28B4 :                     lcc1802init:	
(1)   18/    28B4 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    28BA : (MACRO)             	ldiReg	RRET,_return
(1)   20/    28C0 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    28C6 : E2                  	sex	SP
(1)   22/    28C7 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    28CD : D3                  	sep	RPC
(1)   24/    28CE :                     $$_00000:
(1)   25/    28CE : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    28D1 : C0 28 D1            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    28D4 : DE AD               	db	0xde,0xad
(1)   28/    28D6 :                     
(1)   29/    28D6 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    28D6 :                     _setqOn:
(1)   31/    28D6 : 7B                  	seq
(1)   32/    28D7 : (MACRO)             	Cretn
(1)   33/    28D8 :                     _setqOff:
(1)   34/    28D8 : 7A                  	req
(1)   35/    28D9 : (MACRO)             	Cretn
(1)   36/    28DA :                     
(1)   37/    28DA :                     _modU2:	;16 bit unsigned remainder
(1)   38/    28DA :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    28DA : (MACRO)                 Ccall _divU2
(1)   40/    28DD : 8D                      glo regArg2
(1)   41/    28DE : AF                      plo retVal
(1)   42/    28DF : 9D                      ghi regArg2
(1)   43/    28E0 : BF                      phi retVal
(1)   44/    28E1 : (MACRO)                 Cretn
(1)   45/    28E2 :                         
(1)   46/    28E2 :                     _modI2:	;16 bit signed remainder
(1)   47/    28E2 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    28E2 : (MACRO)                 Ccall _divI2
(1)   49/    28E5 : 8D                      glo regArg2
(1)   50/    28E6 : AF                      plo retVal
(1)   51/    28E7 : 9D                      ghi regArg2
(1)   52/    28E8 : BF                      phi retVal
(1)   53/    28E9 : (MACRO)                 Cretn
(1)   54/    28EA :                     
(1)   55/    28EA :                     _out4:	
(1)   56/    28EA : 8C                  	glo	regArg1
(1)   57/    28EB : 22                  	dec	sp
(1)   58/    28EC : 52                  	str	sp
(1)   59/    28ED : 64                  	out	4
(1)   60/    28EE : (MACRO)             	Cretn
(1)   61/    28EF :                     
(1)   62/    28EF :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    28EF :                     	align 256
(1)   64/    2900 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    2900 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    2900 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    2900 : D3                  	sep     R3 ;go to subroutine
(1)   68/    2901 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    2902 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    2903 : 22                  	dec	sp
(1)   71/    2904 : 73                  	stxd
(1)   72/    2905 : 96                  	ghi	retAddr
(1)   73/    2906 : 52                  	str	sp	
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 58 - 6/2/2013 16:37:30


(1)   74/    2907 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    2908 : A6                  	plo	retAddr
(1)   76/    2909 : 93                  	ghi	RPC
(1)   77/    290A : B6                  	phi	retAddr
(1)   78/    290B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    290C : B3                  	phi	RPC
(1)   80/    290D : 46                  	lda	retAddr
(1)   81/    290E : A3                  	plo	RPC
(1)   82/    290F : 30 00               	br	_call-1
(1)   83/    2911 :                     
(1)   84/    2911 :                     ;Standard subroutine return 
(1)   85/    2911 : D3                  	sep	RPC	;return to the original program
(1)   86/    2912 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    2913 : A3                  	plo	RPC
(1)   88/    2914 : 96                  	ghi	retAddr
(1)   89/    2915 : B3                  	phi	RPC
(1)   90/    2916 : 42                  	lda	SP	;pick up old return address
(1)   91/    2917 : B6                  	phi	retAddr
(1)   92/    2918 : 42                  	lda	SP
(1)   93/    2919 : A6                  	plo	retAddr
(1)   94/    291A : 30 11               	br	_return-1
(1)   95/    291C :                     
(1)   96/    291C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    291C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    291E : FF 01               $$mslp:	smi	1
(1)   99/    2920 : 3A 1E               	bnz	$$mslp
(1)  100/    2922 : (MACRO)             	Cretn
(1)  101/    2923 :                     
(1)  102/    2923 :                     
(1)  103/    2923 :                     	
(1)  104/    2923 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    2923 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    2923 :                     _mulu2:		
(1)  107/    2923 : 22                      dec sp
(1)  108/    2924 : F8 10                   ldi 16
(1)  109/    2926 : AE                      plo	rwork	;bit count
(1)  110/    2927 : F8 00                   ldi 0
(1)  111/    2929 : BF                      phi	retVal	;quotient
(1)  112/    292A : AF                      plo retVal
(1)  113/    292B :                     $$MultLoop16_16:
(1)  114/    292B : 9C                      ghi regArg1
(1)  115/    292C : F6                      shr
(1)  116/    292D : BC                      phi regArg1
(1)  117/    292E : 8C                      glo regArg1
(1)  118/    292F : 76                      shrc
(1)  119/    2930 : AC                      plo regArg1
(1)  120/    2931 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    2933 : 8D                      glo regArg2
(1)  122/    2934 : 52                      str sp
(1)  123/    2935 : 8F                      glo retVal
(1)  124/    2936 : F4                      add 
(1)  125/    2937 : AF                      plo retVal
(1)  126/    2938 : 9D                      ghi regArg2
(1)  127/    2939 : 52                      str sp
(1)  128/    293A : 9F                      ghi retVal
(1)  129/    293B : 74                      adc
(1)  130/    293C : BF                      phi retVal
(1)  131/    293D :                     $$MultSkip16_16:
(1)  132/    293D : 8D                      glo regArg2
(1)  133/    293E : FE                      shl
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 59 - 6/2/2013 16:37:30


(1)  134/    293F : AD                      plo regArg2
(1)  135/    2940 : 9D                      ghi regArg2
(1)  136/    2941 : 7E                      shlc
(1)  137/    2942 : BD                      phi regArg2
(1)  138/    2943 : 2E                      dec rwork
(1)  139/    2944 : 8E                      glo rwork
(1)  140/    2945 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    2947 : 12                      inc sp
(1)  142/    2948 : D5                      sep 5
(1)  143/    2949 :                     
(1)  144/    2949 :                     
(1)  145/    2949 :                     _divU2:
(1)  146/    2949 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    2949 :                     	; This is really an unsigned 23 bit divide
(1)  148/    2949 :                     	;thanks to Ted Rossin
(1)  149/    2949 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    2949 : 22                      dec sp
(1)  151/    294A : F8 10                   ldi 16
(1)  152/    294C : AE                      plo rwork
(1)  153/    294D : F8 00                   ldi 0
(1)  154/    294F : BF                      phi retVal
(1)  155/    2950 : AF                      plo retVal
(1)  156/    2951 : BE                      phi rwork
(1)  157/    2952 :                     $$DivLoop16_16:
(1)  158/    2952 : 8C                      glo regArg1
(1)  159/    2953 : FE                      shl
(1)  160/    2954 : AC                      plo regArg1
(1)  161/    2955 : 9C                      ghi regArg1
(1)  162/    2956 : 7E                      shlc
(1)  163/    2957 : BC                      phi regArg1
(1)  164/    2958 : 8F                      glo retVal
(1)  165/    2959 : 7E                      shlc
(1)  166/    295A : AF                      plo retVal
(1)  167/    295B : 9F                      ghi retVal
(1)  168/    295C : 7E                      shlc
(1)  169/    295D : BF                      phi retVal
(1)  170/    295E : 9E                      ghi rwork
(1)  171/    295F : 7E                      shlc
(1)  172/    2960 : BE                      phi rwork
(1)  173/    2961 : 3B 73                   bnf $$DivSub16_16
(1)  174/    2963 : 8D                      glo regArg2
(1)  175/    2964 : 52                      str sp
(1)  176/    2965 : 8F                      glo retVal
(1)  177/    2966 : F4                      add 
(1)  178/    2967 : AF                      plo retVal
(1)  179/    2968 : 9D                      ghi regArg2
(1)  180/    2969 : 52                      str sp
(1)  181/    296A : 9F                      ghi retVal
(1)  182/    296B : 74                      adc 
(1)  183/    296C : BF                      phi retVal
(1)  184/    296D : 9E                      ghi rwork
(1)  185/    296E : 7C 00                   adci 0
(1)  186/    2970 : BE                      phi rwork
(1)  187/    2971 : 30 81                   br $$DivSkip16_16
(1)  188/    2973 :                     $$DivSub16_16:
(1)  189/    2973 : 8D                      glo regArg2
(1)  190/    2974 : 52                      str sp
(1)  191/    2975 : 8F                      glo retVal
(1)  192/    2976 : F7                      sm
(1)  193/    2977 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 60 - 6/2/2013 16:37:30


(1)  194/    2978 : 9D                      ghi regArg2
(1)  195/    2979 : 52                      str sp
(1)  196/    297A : 9F                      ghi retVal
(1)  197/    297B : 77                      smb 
(1)  198/    297C : BF                      phi retVal
(1)  199/    297D : 9E                      ghi rwork
(1)  200/    297E : 7F 00                   smbi 0
(1)  201/    2980 : BE                      phi rwork 
(1)  202/    2981 :                     $$DivSkip16_16:
(1)  203/    2981 : FE                      shl
(1)  204/    2982 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    2984 :                     $$DivSetBit16_16:
(1)  206/    2984 : 8C                      glo regArg1
(1)  207/    2985 : F9 01                   ori  0x01
(1)  208/    2987 : AC                      plo regArg1
(1)  209/    2988 :                     $$DivSkipClear16_16:
(1)  210/    2988 : 2E                      dec rwork
(1)  211/    2989 : 8E                      glo rwork
(1)  212/    298A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    298C : 9E                      ghi rwork
(1)  214/    298D : FE                      shl
(1)  215/    298E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    2990 : 8D                      glo regArg2
(1)  217/    2991 : 52                      str sp
(1)  218/    2992 : 8F                      glo retVal
(1)  219/    2993 : F4                      add
(1)  220/    2994 : AF                      plo retVal
(1)  221/    2995 : 9D                      ghi regArg2
(1)  222/    2996 : 52                      str sp
(1)  223/    2997 : 9F                      ghi retVal
(1)  224/    2998 : 74                      adc
(1)  225/    2999 : BF                      phi retVal
(1)  226/    299A :                     $$DivSkipFinalAdd16_16:
(1)  227/    299A : 12                      inc sp
(1)  228/    299B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    299B : 8F                      glo retVal
(1)  230/    299C : AD                      plo regArg2
(1)  231/    299D : 9F                      ghi retVal
(1)  232/    299E : BD                      phi regArg2
(1)  233/    299F : 8C                      glo regArg1
(1)  234/    29A0 : AF                      plo retVal
(1)  235/    29A1 : 9C                      ghi regArg1
(1)  236/    29A2 : BF                      phi retVal
(1)  237/    29A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    29A3 : D5                      sep 5
(1)  239/    29A4 :                     
(1)  240/    29A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    29A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    29A4 :                     _divI2:
(1)  243/    29A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    29A4 : 22                      dec	sp	;leave a work area available
(1)  245/    29A5 : 9C                      ghi regArg1
(1)  246/    29A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    29A7 : FE                      shl
(1)  248/    29A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    29AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    29B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    29B3 : 9D                      ghi regArg2
(1)  252/    29B4 : F3                      xor	
(1)  253/    29B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 61 - 6/2/2013 16:37:30


(1)  254/    29B6 : 9D                      ghi regArg2
(1)  255/    29B7 : FE                      shl
(1)  256/    29B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    29BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    29C3 :                     $$pos2: ; both args now +v
(1)  259/    29C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    29C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    29C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    29C7 : FE                      shl
(1)  263/    29C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    29CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    29D3 :                     $$done:
(1)  266/    29D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    29D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    29D4 :                     
(1)  269/    29D4 :                     
(1)  270/    29D4 :                     	align 256    ;32 bit operations follow
(1)  271/    2A00 :                     _divu4:
(1)  272/    2A00 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    2A00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    2A00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    2A00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    2A00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    2A00 :                     
(1)  278/    2A00 : F8 20               	ldi 32		;set loop count
(1)  279/    2A02 : AE                  	plo memaddr	;in temp register
(1)  280/    2A03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    2A0F :                     $$loop:
(1)  282/    2A0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    2A1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    2A27 :                     
(1)  285/    2A27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    2A3D :                     
(1)  287/    2A3D : FA 80               	ani 0x80	;check the top bit
(1)  288/    2A3F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    2A41 : 89                  		glo RL8
(1)  290/    2A42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    2A44 : A9                  		plo RL8
(1)  292/    2A45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    2A5B : 30 61               	br $$endlp 	;else
(1)  294/    2A5D :                     $$norestore:
(1)  295/    2A5D : 89                  		glo RL8
(1)  296/    2A5E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    2A60 : A9                  		plo RL8
(1)  298/    2A61 :                     	;end if
(1)  299/    2A61 :                     $$endlp:
(1)  300/    2A61 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    2A62 : 8E                  	glo memaddr
(1)  302/    2A63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    2A65 :                     	
(1)  304/    2A65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    2A66 :                     		
(1)  306/    2A66 :                     
(1)  307/    2A66 :                     _mulu4:
(1)  308/    2A66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    2A66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    2A66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    2A66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    2A66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    2A66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 62 - 6/2/2013 16:37:30


(1)  314/    2A66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    2A66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    2A66 :                     	;for 10 we subtract and shift
(1)  317/    2A66 :                     	;for 00 and 11 we just shift
(1)  318/    2A66 :                     
(1)  319/    2A66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    2A72 : F8 20                   ldi 32
(1)  321/    2A74 : AE                      plo memaddr		;cycle count
(1)  322/    2A75 : FC 00                   adi 0		;clear df
(1)  323/    2A77 :                     $$mloop:
(1)  324/    2A77 : 89                      glo RL8
(1)  325/    2A78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    2A7A : 3B 96                   bnf	$$check_sub	;
(1)  327/    2A7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    2A7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    2A7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    2A94 : 30 AE                   br $$shift
(1)  331/    2A96 :                     $$check_sub:
(1)  332/    2A96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    2A98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    2A98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    2AAE :                     $$shift:
(1)  336/    2AAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    2ABC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    2AC8 :                     
(1)  339/    2AC8 : 2E                      dec memaddr		;cycle count
(1)  340/    2AC9 : 8E                      glo memaddr
(1)  341/    2ACA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    2ACC :                         
(1)  343/    2ACC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    2ACD :                     
(1)  345/    2ACD :                     	align 256
(1)  346/    2B00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    2B00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    2B00 :                     _divI4:
(1)  349/    2B00 : 22                      dec	sp	;leave a work area available
(1)  350/    2B01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    2B02 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    2B03 : FE                      shl
(1)  353/    2B04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    2B06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    2B26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    2B26 : 9A                      ghi RL10-1
(1)  357/    2B27 : F3                      xor	
(1)  358/    2B28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    2B29 : 9A                      ghi RL10-1
(1)  360/    2B2A : FE                      shl
(1)  361/    2B2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    2B2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    2B4D :                     $$pos2: ; both args now +v
(1)  364/    2B4D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    2B50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    2B50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    2B51 : FE                      shl
(1)  368/    2B52 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    2B54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    2B74 :                     $$done:
(1)  371/    2B74 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    2B75 :                     
(1)  373/    2B75 :                     _dubdabx:	
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 63 - 6/2/2013 16:37:30


(1)  374/    2B75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    2B75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    2B75 :                     ;long interger is passed in rp1p2
(1)  377/    2B75 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    2B75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    2B75 :                     ;r8-11 are used as temps
(1)  380/    2B75 :                     ;r8 is the working pointer
(1)  381/    2B75 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    2B75 :                     ;r9.0 is digit count
(1)  383/    2B75 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    2B75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    2B81 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    2B8D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    2B91 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    2B93 : A9                  	plo r9
(1)  389/    2B94 :                     $$clrlp:	;clear the passed buffer
(1)  390/    2B94 : F8 00               	ldi 0	
(1)  391/    2B96 : 58                  	str r8	;clear a byte
(1)  392/    2B97 : 18                  	inc r8
(1)  393/    2B98 : 29                  	dec r9
(1)  394/    2B99 : 89                  	glo r9	;check the count
(1)  395/    2B9A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    2B9C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    2BA0 :                     
(1)  398/    2BA0 : F8 20               	ldi 32	;bit count
(1)  399/    2BA2 : AF                  	plo r15
(1)  400/    2BA3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    2BA3 :                     $$cktop:
(1)  402/    2BA3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    2BA4 : FE                  	shl		;check for a 1
(1)  404/    2BA5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    2BA7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    2BB3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    2BB4 : 8F                  	glo r15
(1)  408/    2BB5 : 3A A3               	bnz $$cktop	;
(1)  409/    2BB7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    2BB8 :                     $$bitloop:
(1)  411/    2BB8 : F8 0A               	ldi 10	;digit count
(1)  412/    2BBA : A9                  	plo r9
(1)  413/    2BBB :                     $$dcklp:
(1)  414/    2BBB : 08                  	ldn r8 	;pick up a digit
(1)  415/    2BBC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    2BBE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    2BC0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    2BC2 : 58                  	str r8	;put it back
(1)  419/    2BC3 :                     $$dnoadd:
(1)  420/    2BC3 : 18                  	inc r8
(1)  421/    2BC4 : 29                  	dec r9	;decrement digit count
(1)  422/    2BC5 : 89                  	glo r9
(1)  423/    2BC6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    2BC8 :                     	
(1)  425/    2BC8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    2BD4 :                     	
(1)  427/    2BD4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    2BD6 : A9                  	plo r9
(1)  429/    2BD7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    2BD7 :                     $$dshlp:
(1)  431/    2BD7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    2BD8 : 08                  	ldn r8	;get the digit back
(1)  433/    2BD9 : 7E                  	shlc	;continue the shift
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(lcc1802Epilofl.inc) - page 64 - 6/2/2013 16:37:30


(1)  434/    2BDA : BF                  	phi r15 ;save it for the carry test
(1)  435/    2BDB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    2BDD : 58                  	str r8	;put the digit back
(1)  437/    2BDE : 9F                  	ghi r15	;now test for carry
(1)  438/    2BDF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    2BE1 : 29                  	dec r9	;decrement the digit count
(1)  440/    2BE2 : 89                  	glo r9
(1)  441/    2BE3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    2BE5 :                     	
(1)  443/    2BE5 : 2F                  	dec r15
(1)  444/    2BE6 : 8F                  	glo r15
(1)  445/    2BE7 : 3A B8               	bnz $$bitloop
(1)  446/    2BE9 :                     	
(1)  447/    2BE9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    2BED : F8 0A               	ldi 10		;digit count again
(1)  449/    2BEF : A9                  	plo r9
(1)  450/    2BF0 :                     $$upnxt:
(1)  451/    2BF0 : 08                  	ldn r8		;get digit
(1)  452/    2BF1 : F9 30               	ori 0x30	;make ascii
(1)  453/    2BF3 : 58                  	str r8		;put it back
(1)  454/    2BF4 : 18                  	inc r8		;next digit
(1)  455/    2BF5 : 29                  	dec r9		;counter
(1)  456/    2BF6 : 89                  	glo r9
(1)  457/    2BF7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    2BF9 :                     	
(1)  459/    2BF9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    2C01 : EE                  	sex memaddr	;set up
(1)  461/    2C02 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    2C04 : F7                  	sm		;desired number of digits to skip
(1)  463/    2C05 : E2                  	sex sp		;reset index register
(1)  464/    2C06 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    2C07 :                     $$cknext:
(1)  466/    2C07 : 0F                  	ldn r15		;check digit
(1)  467/    2C08 : FF 30               	smi 0x30	;for '0'
(1)  468/    2C0A : 3A 11               	bnz $$done
(1)  469/    2C0C : 1F                  	inc r15		;next digit
(1)  470/    2C0D : 29                  	dec r9		;reduce count
(1)  471/    2C0E : 89                  	glo r9
(1)  472/    2C0F : 3A 07               	bnz $$cknext
(1)  473/    2C11 :                     $$done:
(1)  474/    2C11 : (MACRO)             	cretn
(1)  475/    2C12 :                     	
(1)  476/    2C12 :                     	
(1)  477/    2C12 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    2C12 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    2C12 : (MACRO)                 Ccall _divU4
(1)  480/    2C15 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    2C1D : (MACRO)                 Cretn
(1)  482/    2C1E :                         
(1)  483/    2C1E :                     _modI4:	;32 bit signed remainder
(1)  484/    2C1E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    2C1E : (MACRO)                 Ccall _divI4
(1)  486/    2C21 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    2C29 : (MACRO)                 Cretn
(1)  488/    2C2A :                         
(1)  489/    2C2A :                     	
(1)  490/    2C2A :                      
    3070/    2C2A :                     	include LCC1802fp.inc
(1)    1/    2C2A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    2C2A :                     ;maybe originally from RCA
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 65 - 6/2/2013 16:37:30


(1)    3/    2C2A :                     ;these routines use ALL the registers from 6-15!
(1)    4/    2C2A :                     ;8-15 were more or less available to start with
(1)    5/    2C2A :                     ;it saves 6 when it uses it
(1)    6/    2C2A :                     ;I save 7 on entry and restore on exit
(1)    7/    2C2A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    2C2A : =BH                 FB	equ	11	;was R9
(1)    9/    2C2A : =9H                 F9	equ	9	;was R7
(1)   10/    2C2A : =7H                 F7	equ	7	;was RB
(1)   11/    2C2A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    2C2A :                     ; *** Convert signed long to float
(1)   13/    2C2A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    2C2A :                     ; *** result in same register
(1)   15/    2C2A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    2C2A :                     	align 256
(1)   17/    2D00 : F8 00               cvif4:	ldi	0
(1)   18/    2D02 : BE                  	phi	memaddr	;sign
(1)   19/    2D03 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    2D05 : AE                  	plo	memaddr	;
(1)   21/    2D06 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    2D07 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    2D09 : FE                  	shl		;sign bit to df
(1)   24/    2D0A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    2D0C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    2D0D : BE                  	phi	memaddr	;save it
(1)   27/    2D0E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    2D2E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    2D30 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    2D31 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    2D33 : 99                  	ghi	RL8	;next byte
(1)   32/    2D34 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    2D36 : 89                  	glo	RL8	;last byte
(1)   34/    2D37 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    2D39 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    2D3A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    2D3C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    2D3D : (MACRO)             	shru4	RL8
(1)   39/    2D49 : 30 39               	br	$$sgnpos
(1)   40/    2D4B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    2D4C : FA 80               	ani	0x80	;isolate it
(1)   42/    2D4E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    2D50 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    2D51 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    2D5D : 30 4B               	br	$$shl
(1)   46/    2D5F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    2D60 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    2D61 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    2D62 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    2D64 : 88                  	glo	RL8-1	;get the byte
(1)   51/    2D65 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    2D67 : A8                  	plo	RL8-1	;put it back
(1)   53/    2D68 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    2D69 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    2D6B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    2D6C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    2D6E : B8                  	phi	RL8-1	;place it
(1)   58/    2D6F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    2D70 :                     	
(1)   60/    2D70 :                     
(1)   61/    2D70 :                     
(1)   62/    2D70 :                     ; *** Convert float to signed long
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 66 - 6/2/2013 16:37:30


(1)   63/    2D70 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    2D70 :                     ; *** result in same register
(1)   65/    2D70 :                     	align 256
(1)   66/    2E00 :                     cvfi4:
(1)   67/    2E00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2E01 : BE                  	phi	memaddr ;save for later
(1)   69/    2E02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2E03 : FE                  	shl		;shift to df
(1)   71/    2E04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2E05 : 7E                  	shlc		;combine with 0
(1)   73/    2E06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2E06 : 22                  	dec	sp
(1)   75/    2E07 : 52                  	str	sp
(1)   76/    2E08 : F8 96               	ldi	150
(1)   77/    2E0A : F7                  	sm		;calculate shift count needed
(1)   78/    2E0B :                     ;*******note - the df flag set here is tested later
(1)   79/    2E0B : AE                  	plo	memaddr
(1)   80/    2E0C : 12                  	inc	sp	;release work area
(1)   81/    2E0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    2E0D : F8 00               	ldi	0
(1)   83/    2E0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2E10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2E11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2E13 : A8                  	plo	RL8-1	;put it back
(1)   87/    2E14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2E15 : 32 3B               	bz	$$sign
(1)   89/    2E17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2E17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2E19 :                     
(1)   92/    2E19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2E25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2E26 : 8E                  	glo	memaddr
(1)   95/    2E27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    2E29 : 30 3B               	br	$$sign
(1)   97/    2E2B :                     
(1)   98/    2E2B :                     ;handle negative shift as best I can - gigo
(1)   99/    2E2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    2E37 : 1E                  	inc	memaddr
(1)  101/    2E38 : 8E                  	glo	memaddr
(1)  102/    2E39 : 3A 2B               	bnz	$$lsh	
(1)  103/    2E3B :                     	
(1)  104/    2E3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    2E3C : FE                  	shl		;shift sign bit into df
(1)  106/    2E3D : 3B 61               	bnf	$$done
(1)  107/    2E3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    2E5F : 30 61               	br	$$done	; and return
(1)  109/    2E61 :                     
(1)  110/    2E61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2E62 :                     
(1)  112/    2E62 :                     ; *** Check if character is numeric
(1)  113/    2E62 :                     ; *** D - char to check
(1)  114/    2E62 :                     ; *** Returns DF=1 if numeric
(1)  115/    2E62 :                     ; ***         DF=0 if not
(1)  116/    2E62 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    2E63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2E65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2E67 : FF 0A                          smi     10                  ; see if above
(1)  120/    2E69 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    2E6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    2E6D : C8                             lskp
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 67 - 6/2/2013 16:37:30


(1)  123/    2E6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2E70 : 8E                             glo     r14                 ; recover character
(1)  125/    2E71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2E72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2E72 :                     ; *******************************
(1)  128/    2E72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2E73 : F6                             shr
(1)  130/    2E74 : B8                             phi   r8
(1)  131/    2E75 : 88                             glo   r8
(1)  132/    2E76 : 76                             shrc
(1)  133/    2E77 : A8                             plo   r8
(1)  134/    2E78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2E79 : 76                             shrc
(1)  136/    2E7A : B9                             phi   F9
(1)  137/    2E7B : 89                             glo   F9
(1)  138/    2E7C : 76                             shrc
(1)  139/    2E7D : A9                             plo   F9
(1)  140/    2E7E : (MACRO)                        Cretn
(1)  141/    2E7F :                     
(1)  142/    2E7F :                     ; ******************************
(1)  143/    2E7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    2E7F :                     ; ******************************
(1)  145/    2E7F : 89                  fp_shl_1:  glo   F9
(1)  146/    2E80 : FE                             shl
(1)  147/    2E81 : A9                             plo   F9
(1)  148/    2E82 : 99                             ghi   F9
(1)  149/    2E83 : 7E                             shlc
(1)  150/    2E84 : B9                             phi   F9
(1)  151/    2E85 : 88                             glo   r8
(1)  152/    2E86 : 7E                             shlc
(1)  153/    2E87 : A8                             plo   r8
(1)  154/    2E88 : 98                             ghi   r8
(1)  155/    2E89 : 7E                             shlc
(1)  156/    2E8A : B8                             phi   r8
(1)  157/    2E8B : D5                             sep   RRET
(1)  158/    2E8C :                     
(1)  159/    2E8C :                     ; **********************
(1)  160/    2E8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    2E8C :                     ; **********************
(1)  162/    2E8C : 8B                  fp_add_12: glo   FB
(1)  163/    2E8D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    2E8E : 52                             str   r2
(1)  165/    2E8F : 89                             glo   F9
(1)  166/    2E90 : F4                             add
(1)  167/    2E91 : A9                             plo   F9
(1)  168/    2E92 : 9B                             ghi   FB
(1)  169/    2E93 : 52                             str   r2
(1)  170/    2E94 : 99                             ghi   F9
(1)  171/    2E95 : 74                             adc
(1)  172/    2E96 : B9                             phi   F9
(1)  173/    2E97 : 8A                             glo   R10
(1)  174/    2E98 : 52                             str   r2
(1)  175/    2E99 : 88                             glo   r8
(1)  176/    2E9A : 74                             adc
(1)  177/    2E9B : A8                             plo   r8
(1)  178/    2E9C : 9A                             ghi   R10
(1)  179/    2E9D : 52                             str   r2
(1)  180/    2E9E : 98                             ghi   r8
(1)  181/    2E9F : 74                             adc
(1)  182/    2EA0 : B8                             phi   r8
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 68 - 6/2/2013 16:37:30


(1)  183/    2EA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    2EA2 : (MACRO)                        Cretn
(1)  185/    2EA3 :                     
(1)  186/    2EA3 :                     ; *******************************
(1)  187/    2EA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    2EA3 :                     ; *******************************
(1)  189/    2EA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    2EA4 : F6                             shr
(1)  191/    2EA5 : BF                             phi   R15
(1)  192/    2EA6 : 8F                             glo   R15
(1)  193/    2EA7 : 76                             shrc
(1)  194/    2EA8 : AF                             plo   R15
(1)  195/    2EA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    2EAA : 76                             shrc
(1)  197/    2EAB : BD                             phi   R13
(1)  198/    2EAC : 8D                             glo   R13
(1)  199/    2EAD : 76                             shrc
(1)  200/    2EAE : AD                             plo   R13
(1)  201/    2EAF : (MACRO)                        Cretn
(1)  202/    2EB0 :                     
(1)  203/    2EB0 :                     ; *************************************
(1)  204/    2EB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    2EB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    2EB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    2EB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    2EB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    2EB0 :                     ; *************************************
(1)  210/    2EB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    2EB1 : FA 80                          ani   080h                  ; check it
(1)  212/    2EB3 : CA 2E C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    2EB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    2EB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    2EBA : FF 01                          smi   1                     ; minus 1
(1)  216/    2EBC : BF                             phi   R15                    ; and put it back
(1)  217/    2EBD : C0 2E B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    2EC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    2EC1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    2EC2 : A8                             plo   r8                    ; set aside
(1)  221/    2EC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    2EC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    2EC5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    2EC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    2EC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    2EC8 : A8                             plo   r8                    ; and put it back
(1)  227/    2EC9 : 87                             glo   F7                   ; get signs
(1)  228/    2ECA : F6                             shr                         ; get sign 1
(1)  229/    2ECB : 98                             ghi   r8                    ; recover exponent
(1)  230/    2ECC : 76                             shrc                        ; shift in sign
(1)  231/    2ECD : B8                             phi   r8                    ; put it back
(1)  232/    2ECE : 12                             inc	r2	;wjr release work area
(1)  233/    2ECF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    2ED3 : (MACRO)             	   popr R12	;wjr
(1)  235/    2ED7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    2EDB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    2EDC :                     
(1)  238/    2EDC :                     ; ************************************
(1)  239/    2EDC :                     ; *** Get exponenst from arguments ***
(1)  240/    2EDC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    2EDC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    2EDC :                     ; *** Returns: RF.1 - exp1         ***
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 69 - 6/2/2013 16:37:30


(1)  243/    2EDC :                     ; ***          RF.0 - exp2         ***
(1)  244/    2EDC :                     ; ************************************
(1)  245/    2EDC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    2EDD : FE                             shl                         ; shift it into DF
(1)  247/    2EDE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    2EDF : 7E                             shlc                        ; shift in first bit
(1)  249/    2EE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    2EE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    2EE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    2EE2 : FE                             shl                         ; shift it into DF
(1)  253/    2EE3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    2EE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    2EE5 : AF                             plo   R15                    ; put into RF
(1)  256/    2EE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    2EE7 :                     
(1)  258/    2EE7 :                     ; ************************************
(1)  259/    2EE7 :                     ; *** Get signs from arguments     ***
(1)  260/    2EE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    2EE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    2EE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    2EE7 :                     ; ************************************
(1)  264/    2EE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    2EE8 : FE                             shl                         ; shift into DF
(1)  266/    2EE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    2EEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    2EEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    2EEC : A7                             plo   F7                    ; save them
(1)  270/    2EED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    2EEE :                     
(1)  272/    2EEE :                     ; ***************************************
(1)  273/    2EEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    2EEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    2EEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    2EEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    2EEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    2EEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    2EEE :                     ; ***        F7.0 - signs        ***
(1)  280/    2EEE :                     ; ***************************************
(1)  281/    2EEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    2EEF : CA 2F 07                       lbnz  add_a1nz
(1)  283/    2EF2 : 88                             glo   r8
(1)  284/    2EF3 : CA 2F 07                       lbnz  add_a1nz
(1)  285/    2EF6 : 99                             ghi   F9
(1)  286/    2EF7 : CA 2F 07                       lbnz  add_a1nz
(1)  287/    2EFA : 89                             glo   F9
(1)  288/    2EFB : CA 2F 07                       lbnz  add_a1nz
(1)  289/    2EFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    2EFF : B8                             phi   r8
(1)  291/    2F00 : 8A                             glo   R10
(1)  292/    2F01 : A8                             plo   r8
(1)  293/    2F02 : 9B                             ghi   FB
(1)  294/    2F03 : B9                             phi   F9
(1)  295/    2F04 : 8B                             glo   FB
(1)  296/    2F05 : A9                             plo   F9
(1)  297/    2F06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2F07 :                     
(1)  299/    2F07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2F08 : CA 2F 18                       lbnz  add_a2nz
(1)  301/    2F0B : 8A                             glo   R10
(1)  302/    2F0C : CA 2F 18                       lbnz  add_a2nz
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 70 - 6/2/2013 16:37:30


(1)  303/    2F0F : 9B                             ghi   FB
(1)  304/    2F10 : CA 2F 18                       lbnz  add_a2nz
(1)  305/    2F13 : 8B                             glo   FB
(1)  306/    2F14 : CA 2F 18                       lbnz  add_a2nz
(1)  307/    2F17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2F18 :                                
(1)  309/    2F18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    2F1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2F22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2F27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2F28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    2F2B : 9F                             ghi   R15
(1)  315/    2F2C : 52                             str   r2
(1)  316/    2F2D : 8F                             glo   R15
(1)  317/    2F2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    2F2F : CB 2F 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2F32 :                     
(1)  320/    2F32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2F33 : AE                             plo   R14
(1)  322/    2F34 : 9A                             ghi   R10
(1)  323/    2F35 : B8                             phi   r8
(1)  324/    2F36 : 8E                             glo   R14
(1)  325/    2F37 : BA                             phi   R10
(1)  326/    2F38 : 88                             glo   r8
(1)  327/    2F39 : AE                             plo   R14
(1)  328/    2F3A : 8A                             glo   R10
(1)  329/    2F3B : A8                             plo   r8
(1)  330/    2F3C : 8E                             glo   R14
(1)  331/    2F3D : AA                             plo   R10
(1)  332/    2F3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    2F3F : AE                             plo   R14
(1)  334/    2F40 : 9B                             ghi   FB
(1)  335/    2F41 : B9                             phi   F9
(1)  336/    2F42 : 8E                             glo   R14
(1)  337/    2F43 : BB                             phi   FB
(1)  338/    2F44 : 89                             glo   F9
(1)  339/    2F45 : AE                             plo   R14
(1)  340/    2F46 : 8B                             glo   FB
(1)  341/    2F47 : A9                             plo   F9
(1)  342/    2F48 : 8E                             glo   R14
(1)  343/    2F49 : AB                             plo   FB
(1)  344/    2F4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    2F4B : AE                             plo   R14
(1)  346/    2F4C : 8F                             glo   R15
(1)  347/    2F4D : BF                             phi   R15
(1)  348/    2F4E : 8E                             glo   R14
(1)  349/    2F4F : AF                             plo   R15
(1)  350/    2F50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2F53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2F55 : B8                             phi   r8
(1)  353/    2F56 : BA                             phi   R10
(1)  354/    2F57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2F59 : 52                             str   r2
(1)  356/    2F5A : 88                             glo   r8
(1)  357/    2F5B : F1                             or
(1)  358/    2F5C : A8                             plo   r8
(1)  359/    2F5D : 8A                             glo   R10
(1)  360/    2F5E : F1                             or
(1)  361/    2F5F : AA                             plo   R10
(1)  362/    2F60 : 9F                             ghi   R15                    ; get exp1
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 71 - 6/2/2013 16:37:30


(1)  363/    2F61 : 52                             str   r2                    ; place into memory
(1)  364/    2F62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2F63 : F7                             sm                          ; see if match to exp1
(1)  366/    2F64 : C2 2F 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2F67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2F68 : FC 01                          adi   1
(1)  369/    2F6A : AF                             plo   R15
(1)  370/    2F6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    2F6C : F6                             shr
(1)  372/    2F6D : AA                             plo   R10
(1)  373/    2F6E : 9B                             ghi   FB
(1)  374/    2F6F : 76                             shrc
(1)  375/    2F70 : BB                             phi   FB
(1)  376/    2F71 : 8B                             glo   FB
(1)  377/    2F72 : 76                             shrc
(1)  378/    2F73 : AB                             plo   FB
(1)  379/    2F74 : C0 2F 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2F77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2F78 : 52                             str   r2
(1)  382/    2F79 : F6                             shr
(1)  383/    2F7A : F3                             xor
(1)  384/    2F7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    2F7D : CA 2F 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2F80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2F83 : C0 2F BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2F86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2F87 : 52                             str   r2
(1)  390/    2F88 : 89                             glo   F9
(1)  391/    2F89 : F7                             sm
(1)  392/    2F8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    2F8B : 9B                             ghi   FB
(1)  394/    2F8C : 52                             str   r2
(1)  395/    2F8D : 99                             ghi   F9
(1)  396/    2F8E : 77                             smb
(1)  397/    2F8F : BC                             phi   R12
(1)  398/    2F90 : 8A                             glo   R10
(1)  399/    2F91 : 52                             str   r2
(1)  400/    2F92 : 88                             glo   r8
(1)  401/    2F93 : 77                             smb
(1)  402/    2F94 : AD                             plo   R13
(1)  403/    2F95 : 9A                             ghi   R10
(1)  404/    2F96 : 52                             str   r2
(1)  405/    2F97 : 98                             ghi   r8
(1)  406/    2F98 : 77                             smb
(1)  407/    2F99 : BD                             phi   R13
(1)  408/    2F9A : CB 2F A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    2F9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    2F9E : B8                             phi   r8
(1)  411/    2F9F : 8D                             glo   R13
(1)  412/    2FA0 : A8                             plo   r8
(1)  413/    2FA1 : 9C                             ghi   R12
(1)  414/    2FA2 : B9                             phi   F9
(1)  415/    2FA3 : 8C                             glo   R12
(1)  416/    2FA4 : A9                             plo   F9
(1)  417/    2FA5 : C0 2F BF                       lbr   add_fnl               ; finalize
(1)  418/    2FA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    2FA9 : 52                             str   r2
(1)  420/    2FAA : 8B                             glo   FB
(1)  421/    2FAB : F7                             sm
(1)  422/    2FAC : A9                             plo   F9
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 72 - 6/2/2013 16:37:30


(1)  423/    2FAD : 99                             ghi   F9
(1)  424/    2FAE : 52                             str   r2
(1)  425/    2FAF : 9B                             ghi   FB
(1)  426/    2FB0 : 77                             smb
(1)  427/    2FB1 : B9                             phi   F9
(1)  428/    2FB2 : 88                             glo   r8
(1)  429/    2FB3 : 52                             str   r2
(1)  430/    2FB4 : 8A                             glo   R10
(1)  431/    2FB5 : 77                             smb
(1)  432/    2FB6 : A8                             plo   r8
(1)  433/    2FB7 : 98                             ghi   r8
(1)  434/    2FB8 : 52                             str   r2
(1)  435/    2FB9 : 9A                             ghi   R10
(1)  436/    2FBA : 77                             smb
(1)  437/    2FBB : B8                             phi   r8
(1)  438/    2FBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    2FBD : FE                             shl
(1)  440/    2FBE : A7                             plo   F7
(1)  441/    2FBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    2FC0 : CA 2F DD                       lbnz  add_nz                ; jump if not
(1)  443/    2FC3 : 88                             glo   r8
(1)  444/    2FC4 : CA 2F DD                       lbnz  add_nz
(1)  445/    2FC7 : 99                             ghi   F9
(1)  446/    2FC8 : CA 2F DD                       lbnz  add_nz
(1)  447/    2FCB : 89                             glo   F9
(1)  448/    2FCC : CA 2F DD                       lbnz  add_nz
(1)  449/    2FCF : 12                             inc	r2	;wjr release work area
(1)  450/    2FD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    2FD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    2FD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    2FDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    2FDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    2FDE : C2 2F EB                       lbz   add_nx                ; jump if not
(1)  456/    2FE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    2FE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    2FE5 : FC 01                          adi   1                     ; increment it
(1)  459/    2FE7 : BF                             phi   R15                    ; and put it back
(1)  460/    2FE8 : C0 2F DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    2FEB :                     
(1)  462/    2FEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    2FEC : F6                             shr
(1)  464/    2FED : A7                             plo   F7
(1)  465/    2FEE : C0 2E B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    2FF1 :                     
(1)  467/    2FF1 :                     ; ***************************************
(1)  468/    2FF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    2FF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    2FF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    2FF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    2FF1 :                     ; ***************************************
(1)  473/    2FF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    2FF2 : FB 80                          xri   080h
(1)  475/    2FF4 : BA                             phi   R10                    ; and put it back
(1)  476/    2FF5 : C0 2E EE                       lbr   fp_add                ; now just add
(1)  477/    2FF8 :                     
(1)  478/    2FF8 :                     ; ***************************************
(1)  479/    2FF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    2FF8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    2FF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    2FF8 :                     ; *** Returns: R8:F9 - Answer         ***
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 73 - 6/2/2013 16:37:30


(1)  483/    2FF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    2FF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    2FF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    2FF8 :                     ; ***************************************
(1)  487/    2FF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    2FF9 : CA 30 09                       lbnz  div_a1nz
(1)  489/    2FFC : 88                             glo   r8
(1)  490/    2FFD : CA 30 09                       lbnz  div_a1nz
(1)  491/    3000 : 99                             ghi   F9
(1)  492/    3001 : CA 30 09                       lbnz  div_a1nz
(1)  493/    3004 : 89                             glo   F9
(1)  494/    3005 : CA 30 09                       lbnz  div_a1nz
(1)  495/    3008 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    3009 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    300A : CA 30 27                       lbnz  div_a2nz
(1)  498/    300D : 8A                             glo   R10
(1)  499/    300E : CA 30 27                       lbnz  div_a2nz
(1)  500/    3011 : 9B                             ghi   FB
(1)  501/    3012 : CA 30 27                       lbnz  div_a2nz
(1)  502/    3015 : 8B                             glo   FB
(1)  503/    3016 : CA 30 27                       lbnz  div_a2nz
(1)  504/    3019 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    301A : FA 80                          ani   080h                  ; want only sign
(1)  506/    301C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    301E : B8                             phi   r8                    ; put into answer
(1)  508/    301F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    3021 : A8                             plo   r8 
(1)  510/    3022 : F8 00                          ldi   0
(1)  511/    3024 : B9                             phi   F9
(1)  512/    3025 : A9                             plo   F9
(1)  513/    3026 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    3027 :                     
(1)  515/    3027 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    302C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    3031 : (MACRO)             	   pushr R13	;wjr
(1)  518/    3036 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    3037 :                     
(1)  520/    3037 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    303A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    303D : 8F                             glo   R15                    ; get exp2
(1)  523/    303E : FF 7F                          smi   127                   ; remove bias
(1)  524/    3040 : 52                             str   r2                    ; place into memory
(1)  525/    3041 : 9F                             ghi   R15                    ; get exp1
(1)  526/    3042 : FF 7F                          smi   127                   ; remove bias
(1)  527/    3044 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    3045 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    3047 : 73                             stxd                        ; save onto stack
(1)  530/    3048 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    3049 : 52                             str   r2
(1)  532/    304A : F6                             shr
(1)  533/    304B : F3                             xor
(1)  534/    304C : 73                             stxd                        ; place onto stack
(1)  535/    304D : F8 00                          ldi   0                     ; setup man
(1)  536/    304F : BA                             phi   R10
(1)  537/    3050 : 8A                             glo   R10
(1)  538/    3051 : F9 80                          ori   080h
(1)  539/    3053 : AA                             plo   R10
(1)  540/    3054 : F8 00                          ldi   0                     ; setup div
(1)  541/    3056 : B8                             phi   r8
(1)  542/    3057 : 88                             glo   r8
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 74 - 6/2/2013 16:37:30


(1)  543/    3058 : F9 80                          ori   080h
(1)  544/    305A : A8                             plo   r8
(1)  545/    305B : F8 00                          ldi   0                     ; setup result
(1)  546/    305D : BC                             phi   R12
(1)  547/    305E : AC                             plo   R12
(1)  548/    305F : B7                             phi   F7
(1)  549/    3060 : A7                             plo   F7
(1)  550/    3061 : AF                             plo   R15                    ; setup quotient
(1)  551/    3062 : BF                             phi   R15
(1)  552/    3063 : BD                             phi   R13
(1)  553/    3064 : AD                             plo   R13
(1)  554/    3065 : F8 80                          ldi   080h
(1)  555/    3067 : AF                             plo   R15
(1)  556/    3068 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    3069 : CA 30 7B                       lbnz  div_go1
(1)  558/    306C : 88                             glo   r8
(1)  559/    306D : CA 30 7B                       lbnz  div_go1
(1)  560/    3070 : 99                             ghi   F9
(1)  561/    3071 : CA 30 7B                       lbnz  div_go1
(1)  562/    3074 : 89                             glo   F9
(1)  563/    3075 : CA 30 7B                       lbnz  div_go1
(1)  564/    3078 : C0 30 DB                       lbr   div_z
(1)  565/    307B : 9A                  div_go1:   ghi   R10
(1)  566/    307C : CA 30 8E                       lbnz  div_go
(1)  567/    307F : 8A                             glo   R10
(1)  568/    3080 : CA 30 8E                       lbnz  div_go
(1)  569/    3083 : 9B                             ghi   FB
(1)  570/    3084 : CA 30 8E                       lbnz  div_go
(1)  571/    3087 : 8B                             glo   FB
(1)  572/    3088 : CA 30 8E                       lbnz  div_go
(1)  573/    308B : C0 30 DB                       lbr   div_z                 ; nothing more to do
(1)  574/    308E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    308F : 52                             str   r2
(1)  576/    3090 : 89                             glo   F9
(1)  577/    3091 : F7                             sm
(1)  578/    3092 : 9B                             ghi   FB
(1)  579/    3093 : 52                             str   r2
(1)  580/    3094 : 99                             ghi   F9
(1)  581/    3095 : 77                             smb
(1)  582/    3096 : 8A                             glo   R10
(1)  583/    3097 : 52                             str   r2
(1)  584/    3098 : 88                             glo   r8
(1)  585/    3099 : 77                             smb
(1)  586/    309A : 9A                             ghi   R10
(1)  587/    309B : 52                             str   r2
(1)  588/    309C : 98                             ghi   r8
(1)  589/    309D : 77                             smb
(1)  590/    309E : CB 30 C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    30A1 : 8B                             glo   FB                    ; div -= man
(1)  592/    30A2 : 52                             str   r2
(1)  593/    30A3 : 89                             glo   F9
(1)  594/    30A4 : F7                             sm
(1)  595/    30A5 : A9                             plo   F9
(1)  596/    30A6 : 9B                             ghi   FB
(1)  597/    30A7 : 52                             str   r2
(1)  598/    30A8 : 99                             ghi   F9
(1)  599/    30A9 : 77                             smb
(1)  600/    30AA : B9                             phi   F9
(1)  601/    30AB : 8A                             glo   R10
(1)  602/    30AC : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 75 - 6/2/2013 16:37:30


(1)  603/    30AD : 88                             glo   r8
(1)  604/    30AE : 77                             smb
(1)  605/    30AF : A8                             plo   r8
(1)  606/    30B0 : 9A                             ghi   R10
(1)  607/    30B1 : 52                             str   r2
(1)  608/    30B2 : 98                             ghi   r8
(1)  609/    30B3 : 77                             smb
(1)  610/    30B4 : B8                             phi   r8
(1)  611/    30B5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    30B6 : 52                             str   r2
(1)  613/    30B7 : 9C                             ghi   R12
(1)  614/    30B8 : F1                             or
(1)  615/    30B9 : BC                             phi   R12
(1)  616/    30BA : 8F                             glo   R15
(1)  617/    30BB : 52                             str   r2
(1)  618/    30BC : 8C                             glo   R12
(1)  619/    30BD : F1                             or
(1)  620/    30BE : AC                             plo   R12
(1)  621/    30BF : 9D                             ghi   R13
(1)  622/    30C0 : 52                             str   r2
(1)  623/    30C1 : 97                             ghi   F7
(1)  624/    30C2 : F1                             or
(1)  625/    30C3 : B7                             phi   F7
(1)  626/    30C4 : 8D                             glo   R13
(1)  627/    30C5 : 52                             str   r2
(1)  628/    30C6 : 87                             glo   F7
(1)  629/    30C7 : F1                             or
(1)  630/    30C8 : A7                             plo   F7
(1)  631/    30C9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    30CA : 2E A3                          dw    fp_shr_fd
(1)  633/    30CC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    30CD : F6                             shr
(1)  635/    30CE : BA                             phi   R10
(1)  636/    30CF : 8A                             glo   R10
(1)  637/    30D0 : 76                             shrc
(1)  638/    30D1 : AA                             plo   R10
(1)  639/    30D2 : 9B                             ghi   FB
(1)  640/    30D3 : 76                             shrc
(1)  641/    30D4 : BB                             phi   FB
(1)  642/    30D5 : 8B                             glo   FB
(1)  643/    30D6 : 76                             shrc
(1)  644/    30D7 : AB                             plo   FB
(1)  645/    30D8 : C0 30 68                       lbr   div_lp                ; loop back until done
(1)  646/    30DB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    30DC : B8                             phi   r8
(1)  648/    30DD : 8C                             glo   R12
(1)  649/    30DE : A8                             plo   r8
(1)  650/    30DF : 97                             ghi   F7
(1)  651/    30E0 : B9                             phi   F9
(1)  652/    30E1 : 87                             glo   F7
(1)  653/    30E2 : A9                             plo   F9
(1)  654/    30E3 : 60                             irx                         ; recover sign
(1)  655/    30E4 : 72                             ldxa
(1)  656/    30E5 : A7                             plo   F7
(1)  657/    30E6 : F0                             ldx                         ; recover answer exponent
(1)  658/    30E7 : BF                             phi   R15
(1)  659/    30E8 : C0 2E B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    30EB :                     
(1)  661/    30EB :                     ; ***************************************
(1)  662/    30EB :                     ; *** Mul 2 SP floating point numbers ***
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 76 - 6/2/2013 16:37:30


(1)  663/    30EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    30EB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    30EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    30EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    30EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    30EB :                     ; ***        F7.0 - signs             ***
(1)  669/    30EB :                     ; ***************************************
(1)  670/    30EB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    30F0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    30F5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    30FA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    30FB :                     
(1)  675/    30FB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    30FE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    3101 : 8F                             glo   R15                    ; get exp2
(1)  678/    3102 : FF 7F                          smi   127                   ; remove bias
(1)  679/    3104 : 52                             str   r2                    ; place into memory
(1)  680/    3105 : 9F                             ghi   R15                    ; get exp1
(1)  681/    3106 : FF 7F                          smi   127                   ; remove bias
(1)  682/    3108 : F4                             add                         ; add in exponent 2
(1)  683/    3109 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    310B : 73                             stxd                        ; place onto stack
(1)  685/    310C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    310D : 52                             str   r2
(1)  687/    310E : F6                             shr
(1)  688/    310F : F3                             xor
(1)  689/    3110 : 73                             stxd                        ; place onto stack
(1)  690/    3111 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    3112 : 73                             stxd                        ; save on stack
(1)  692/    3113 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    3114 : 73                             stxd
(1)  694/    3115 : 86                             glo   r6
(1)  695/    3116 : 73                             stxd
(1)  696/    3117 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    3119 : 73                             stxd
(1)  698/    311A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    311B : AE                             plo   R14
(1)  700/    311C : B6                             phi   r6
(1)  701/    311D : A6                             plo   r6
(1)  702/    311E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    311F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    3120 : F9 80                          ori   080h
(1)  705/    3122 : A8                             plo   r8
(1)  706/    3123 : F8 00                          ldi   0
(1)  707/    3125 : BC                             phi   R12                    ; set result to 0
(1)  708/    3126 : AC                             plo   R12
(1)  709/    3127 : B7                             phi   F7
(1)  710/    3128 : A7                             plo   F7
(1)  711/    3129 : BF                             phi   R15
(1)  712/    312A : AF                             plo   R15
(1)  713/    312B : BD                             phi   R13
(1)  714/    312C : AD                             plo   R13
(1)  715/    312D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    312E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    312F : F9 80                          ori   080h
(1)  718/    3131 : AA                             plo   R10
(1)  719/    3132 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    3133 : CA 31 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    3136 : 9B                             ghi   FB
(1)  722/    3137 : CA 31 42                       lbnz  mul_go1
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 77 - 6/2/2013 16:37:30


(1)  723/    313A : 8A                             glo   R10
(1)  724/    313B : CA 31 42                       lbnz  mul_go1
(1)  725/    313E : 9A                             ghi   R10
(1)  726/    313F : C2 31 BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    3142 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    3143 : F6                             shr
(1)  729/    3144 : BA                             phi   R10
(1)  730/    3145 : 8A                             glo   R10
(1)  731/    3146 : 76                             shrc
(1)  732/    3147 : AA                             plo   R10
(1)  733/    3148 : 9B                             ghi   FB
(1)  734/    3149 : 76                             shrc
(1)  735/    314A : BB                             phi   FB
(1)  736/    314B : 8B                             glo   FB
(1)  737/    314C : 76                             shrc
(1)  738/    314D : AB                             plo   FB
(1)  739/    314E : CB 31 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    3151 : 89                             glo   F9                    ; res += mul
(1)  741/    3152 : 52                             str   r2
(1)  742/    3153 : 87                             glo   F7
(1)  743/    3154 : F4                             add
(1)  744/    3155 : A7                             plo   F7
(1)  745/    3156 : 99                             ghi   F9
(1)  746/    3157 : 52                             str   r2
(1)  747/    3158 : 97                             ghi   F7
(1)  748/    3159 : 74                             adc
(1)  749/    315A : B7                             phi   F7
(1)  750/    315B : 88                             glo   r8
(1)  751/    315C : 52                             str   r2
(1)  752/    315D : 8C                             glo   R12
(1)  753/    315E : 74                             adc
(1)  754/    315F : AC                             plo   R12
(1)  755/    3160 : 98                             ghi   r8
(1)  756/    3161 : 52                             str   r2
(1)  757/    3162 : 9C                             ghi   R12
(1)  758/    3163 : 74                             adc
(1)  759/    3164 : BC                             phi   R12
(1)  760/    3165 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    3166 : 52                             str   r2
(1)  762/    3167 : 8D                             glo   R13
(1)  763/    3168 : F4                             add
(1)  764/    3169 : AD                             plo   R13
(1)  765/    316A : 96                             ghi   r6
(1)  766/    316B : 52                             str   r2
(1)  767/    316C : 96                             ghi   r6
(1)  768/    316D : 52                             str   r2
(1)  769/    316E : 9D                             ghi   R13
(1)  770/    316F : 74                             adc
(1)  771/    3170 : BD                             phi   R13
(1)  772/    3171 : 8E                             glo   R14
(1)  773/    3172 : 52                             str   r2
(1)  774/    3173 : 8F                             glo   R15
(1)  775/    3174 : 74                             adc
(1)  776/    3175 : AF                             plo   R15
(1)  777/    3176 : 9E                             ghi   R14
(1)  778/    3177 : 52                             str   r2
(1)  779/    3178 : 9F                             ghi   R15
(1)  780/    3179 : 74                             adc
(1)  781/    317A : BF                             phi   R15
(1)  782/    317B : 9C                             ghi   R12                    ; see if need carry from low to high
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 78 - 6/2/2013 16:37:30


(1)  783/    317C : C2 31 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    317F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    3180 : FC 01                          adi   1
(1)  786/    3182 : AD                             plo   R13
(1)  787/    3183 : 9D                             ghi   R13
(1)  788/    3184 : 7C 00                          adci  0
(1)  789/    3186 : BD                             phi   R13
(1)  790/    3187 : 8F                             glo   R15
(1)  791/    3188 : 7C 00                          adci  0
(1)  792/    318A : AF                             plo   R15
(1)  793/    318B : 9F                             ghi   R15
(1)  794/    318C : 7C 00                          adci  0
(1)  795/    318E : BF                             phi   R15
(1)  796/    318F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    3190 : F0                             ldx
(1)  798/    3191 : FC 01                          adi   1                     ; increment by 1
(1)  799/    3193 : 73                             stxd                        ; and put it back
(1)  800/    3194 : 89                             glo   F9                    ; shift mulL left
(1)  801/    3195 : FE                             shl
(1)  802/    3196 : A9                             plo   F9
(1)  803/    3197 : 99                             ghi   F9
(1)  804/    3198 : 7E                             shlc
(1)  805/    3199 : B9                             phi   F9
(1)  806/    319A : 88                             glo   r8
(1)  807/    319B : 7E                             shlc
(1)  808/    319C : A8                             plo   r8
(1)  809/    319D : 98                             ghi   r8
(1)  810/    319E : 7E                             shlc
(1)  811/    319F : B8                             phi   r8
(1)  812/    31A0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    31A1 : FE                             shl
(1)  814/    31A2 : A6                             plo   r6
(1)  815/    31A3 : 96                             ghi   r6
(1)  816/    31A4 : 7E                             shlc
(1)  817/    31A5 : B6                             phi   r6
(1)  818/    31A6 : 8E                             glo   R14
(1)  819/    31A7 : 7E                             shlc
(1)  820/    31A8 : AE                             plo   R14
(1)  821/    31A9 : 9E                             ghi   R14
(1)  822/    31AA : 7E                             shlc
(1)  823/    31AB : BE                             phi   R14
(1)  824/    31AC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    31AD : C2 31 32                       lbz   mul_lp1               ; jump if not
(1)  826/    31B0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    31B2 : B8                             phi   r8
(1)  828/    31B3 : 86                             glo   r6                    ; add in the carry
(1)  829/    31B4 : F9 01                          ori   1
(1)  830/    31B6 : A6                             plo   r6
(1)  831/    31B7 : C0 31 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    31BA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    31BB : 72                             ldxa
(1)  834/    31BC : AE                             plo   R14                    ; set aside
(1)  835/    31BD : 72                             ldxa
(1)  836/    31BE : A6                             plo   r6
(1)  837/    31BF : 72                             ldxa
(1)  838/    31C0 : B6                             phi   r6
(1)  839/    31C1 : F0                             ldx
(1)  840/    31C2 : BE                             phi   R14
(1)  841/    31C3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    31C4 : B8                             phi   r8
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 79 - 6/2/2013 16:37:30


(1)  843/    31C5 : 8C                             glo   R12
(1)  844/    31C6 : A8                             plo   r8
(1)  845/    31C7 : 97                             ghi   F7
(1)  846/    31C8 : B9                             phi   F9
(1)  847/    31C9 : 87                             glo   F7
(1)  848/    31CA : A9                             plo   F9
(1)  849/    31CB : 8E                             glo   R14
(1)  850/    31CC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    31CD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    31CE : FF 02                          smi   2                     ; see if <2
(1)  853/    31D0 : CB 31 E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    31D3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    31D4 : 2E 72                          dw    fp_shr_1
(1)  856/    31D6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    31D7 : 2E A3                          dw    fp_shr_fd
(1)  858/    31D9 : CB 31 E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    31DC : 88                             glo   r8                    ; set high bit
(1)  860/    31DD : F9 80                          ori   080h
(1)  861/    31DF : A8                             plo   r8
(1)  862/    31E0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    31E1 : C0 31 CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    31E4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    31E5 : 72                             ldxa
(1)  866/    31E6 : A7                             plo   F7
(1)  867/    31E7 : F0                             ldx                         ; recover answer exponent
(1)  868/    31E8 : AC                             plo   R12
(1)  869/    31E9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    31EA : CA 31 FC                       lbnz  mul_lp3a
(1)  871/    31ED : 8F                             glo   R15
(1)  872/    31EE : CA 31 FC                       lbnz  mul_lp3a
(1)  873/    31F1 : 9D                             ghi   R13
(1)  874/    31F2 : CA 31 FC                       lbnz  mul_lp3a
(1)  875/    31F5 : 8D                             glo   R13
(1)  876/    31F6 : CA 31 FC                       lbnz  mul_lp3a
(1)  877/    31F9 : C0 32 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    31FC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    31FD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    3200 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    3203 : CB 31 E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    3206 : 88                             glo   r8                    ; set high bit
(1)  883/    3207 : F9 80                          ori   080h
(1)  884/    3209 : A8                             plo   r8
(1)  885/    320A : C0 31 E9                       lbr   mul_lp3
(1)  886/    320D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    320E : BF                             phi   R15                    ; to high R15
(1)  888/    320F : C0 2E B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    3212 :                     
(1)  890/    3212 :                     ; ***************************************
(1)  891/    3212 :                     ; *** Convert ascii to floating point ***
(1)  892/    3212 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    3212 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    3212 :                     ; ***************************************
(1)  895/    3212 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    3213 : FF 20                          smi   ' '                   ; check for space
(1)  897/    3215 : C2 32 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    3218 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    3219 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    321A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    321C : CA 32 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    321F : F8 80                          ldi   080h                  ; high bit set for minus
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 80 - 6/2/2013 16:37:30


(1)  903/    3221 : 73                             stxd                        ; place onto stack
(1)  904/    3222 : 1F                             inc   R15                    ; move past sign
(1)  905/    3223 : C0 32 30                       lbr   atof_go1              ; and continue
(1)  906/    3226 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    3228 : 73                             stxd                        ; place onto stack
(1)  908/    3229 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    322A : FF 2B                          smi   '+'
(1)  910/    322C : CA 32 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    322F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    3230 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    3232 : B8                             phi   r8
(1)  914/    3233 : A8                             plo   r8
(1)  915/    3234 : B9                             phi   F9
(1)  916/    3235 : A9                             plo   F9
(1)  917/    3236 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    3237 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    323A : CB 32 67                       lbnf  atof_no1              ; jump if not
(1)  920/    323D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    323E : BA                             phi   R10
(1)  922/    323F : 88                             glo   r8
(1)  923/    3240 : AA                             plo   R10
(1)  924/    3241 : 99                             ghi   F9
(1)  925/    3242 : BB                             phi   FB
(1)  926/    3243 : 89                             glo   F9
(1)  927/    3244 : AB                             plo   FB
(1)  928/    3245 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    3248 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    324B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    324E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    3251 : 4F                             lda   R15                    ; get number
(1)  933/    3252 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    3254 : 52                             str   r2                    ; setup for add
(1)  935/    3255 : 89                             glo   F9                    ; add in next digit
(1)  936/    3256 : F4                             add
(1)  937/    3257 : A9                             plo   F9
(1)  938/    3258 : 99                             ghi   F9                    ; propagate carry
(1)  939/    3259 : 7C 00                          adci  0
(1)  940/    325B : B9                             phi   F9
(1)  941/    325C : 88                             glo   r8
(1)  942/    325D : 7C 00                          adci  0
(1)  943/    325F : A8                             plo   r8
(1)  944/    3260 : 98                             ghi   r8
(1)  945/    3261 : 7C 00                          adci  0
(1)  946/    3263 : B8                             phi   r8
(1)  947/    3264 : C0 32 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    3267 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    3268 : FF 2E                          smi   '.'
(1)  950/    326A : CA 32 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    326D : 1F                             inc   R15                    ; move past decimal
(1)  952/    326E : F8 33               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    3270 : BA                             phi   R10
(1)  954/    3271 : F8 A3                          ldi   scratch&255
(1)  955/    3273 : AA                             plo   R10
(1)  956/    3274 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    3276 : AC                             plo   R12
(1)  958/    3277 : F8 00               atof_lpx:  ldi   0
(1)  959/    3279 : 5A                             str   R10
(1)  960/    327A : 1A                             inc   R10
(1)  961/    327B : 2C                             dec   R12
(1)  962/    327C : 8C                             glo   R12
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 81 - 6/2/2013 16:37:30


(1)  963/    327D : CA 32 77                       lbnz  atof_lpx
(1)  964/    3280 : F8 33                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    3282 : BA                             phi   R10
(1)  966/    3283 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    3285 : AA                             plo   R10
(1)  968/    3286 : F8 01                          ldi   1                     ; setup count
(1)  969/    3288 : AC                             plo   R12
(1)  970/    3289 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    328B : BC                             phi   R12
(1)  972/    328C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    328D : FF 11                          smi   17
(1)  974/    328F : C2 32 A8                       lbz   atof_dn3              ; jump if so
(1)  975/    3292 : 0F                             ldn   R15                    ; get character
(1)  976/    3293 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    3294 : 2E 62                          dw    f_isnum
(1)  978/    3296 : CB 32 A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    3299 : 4F                             lda   R15                    ; get character
(1)  980/    329A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    329C : 5A                             str   R10                    ; write into bcd area
(1)  982/    329D : 1A                             inc   R10
(1)  983/    329E : 1C                             inc   R12                    ; increment count
(1)  984/    329F : CA 32 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    32A2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    32A4 : BC                             phi   R12
(1)  987/    32A5 : C0 32 8C                       lbr   atof_lp2
(1)  988/    32A8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    32A9 : CA 32 C2                       lbnz  atof_nz
(1)  990/    32AC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    32AD : CA 32 C2                       lbnz  atof_nz
(1)  992/    32B0 : 88                             glo   r8
(1)  993/    32B1 : CA 32 C2                       lbnz  atof_nz
(1)  994/    32B4 : 99                             ghi   F9
(1)  995/    32B5 : CA 32 C2                       lbnz  atof_nz
(1)  996/    32B8 : 89                             glo   F9
(1)  997/    32B9 : CA 32 C2                       lbnz  atof_nz
(1)  998/    32BC : 60                             irx                         ; recover sign
(1)  999/    32BD : F0                             ldx
(1) 1000/    32BE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    32BF : C0 33 95                       lbr	atof_end               ; and return
(1) 1002/    32C2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    32C4 : BC                             phi   R12
(1) 1004/    32C5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    32C6 : FA 80                          ani   080h
(1) 1006/    32C8 : CA 33 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    32CB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    32CE : F8 33                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    32D0 : BA                             phi   R10
(1) 1010/    32D1 : F8 A3                          ldi   255&scratch
(1) 1011/    32D3 : AA                             plo   R10
(1) 1012/    32D4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    32D6 : 5A                             str   R10
(1) 1014/    32D7 : F8 33                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    32D9 : BA                             phi   R10
(1) 1016/    32DA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    32DC : AA                             plo   R10
(1) 1018/    32DD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    32DF : AE                             plo   R14
(1) 1020/    32E0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    32E2 : AC                             plo   R12
(1) 1022/    32E3 : 8E                  atof_lp4:  glo   R14                    ; get carry
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 82 - 6/2/2013 16:37:30


(1) 1023/    32E4 : 52                             str   r2                    ; in memory for add
(1) 1024/    32E5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    32E6 : F4                             add                         ; add in carry
(1) 1026/    32E7 : 52                             str   r2                    ; place into memory
(1) 1027/    32E8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    32E9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    32EA : 5A                             str   R10                    ; put it back
(1) 1030/    32EB : FF 0A                          smi   10
(1) 1031/    32ED : CB 32 F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    32F0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    32F1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    32F3 : C8                             lskp                        ; skip next instruction
(1) 1035/    32F4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    32F6 : AE                             plo   R14
(1) 1037/    32F7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    32F8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    32F9 : 8C                             glo   R12                    ; see if done
(1) 1040/    32FA : CA 32 E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    32FD : F8 33                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    32FF : BA                             phi   R10
(1) 1043/    3300 : F8 A3                          ldi   255&scratch
(1) 1044/    3302 : AA                             plo   R10
(1) 1045/    3303 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    3304 : C2 33 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    3307 : 89                             glo   F9                    ; add in the carry
(1) 1048/    3308 : F9 01                          ori   1
(1) 1049/    330A : A9                             plo   F9
(1) 1050/    330B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    330C : FC 01                          adi   1
(1) 1052/    330E : BC                             phi   R12
(1) 1053/    330F : C0 32 C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    3312 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    3313 : 52                             str   r2                    ; into memory
(1) 1056/    3314 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    3316 : F7                             sm
(1) 1058/    3317 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    3319 : BD                             phi   R13                    ; set aside
(1) 1060/    331A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    331B : A9                             plo   F9
(1) 1062/    331C : 88                             glo   r8
(1) 1063/    331D : B9                             phi   F9
(1) 1064/    331E : 98                             ghi   r8
(1) 1065/    331F : FE                             shl                         ; shift out high bit
(1) 1066/    3320 : A8                             plo   r8
(1) 1067/    3321 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    3322 : F6                             shr
(1) 1069/    3323 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    3324 : 88                             glo   r8                    ; get mantissa
(1) 1071/    3325 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    3326 : A8                             plo   r8                    ; and write it
(1) 1073/    3327 : 60                             irx                         ; point to sign
(1) 1074/    3328 : 98                             ghi   r8                    ; high byte
(1) 1075/    3329 : F1                             or                          ; set sign
(1) 1076/    332A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    332B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    332C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    332E : C2 33 37                       lbz   atof_exp
(1) 1080/    3331 : 0F                             ldn   R15
(1) 1081/    3332 : FF 45                          smi   'E'
(1) 1082/    3334 : CA 33 95                       lbnz  atof_end
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 83 - 6/2/2013 16:37:30


(1) 1083/    3337 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    3338 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    3339 : FF 2D                          smi   '-'
(1) 1086/    333B : C2 33 48                       lbz   atof_n
(1) 1087/    333E : 0F                             ldn   R15
(1) 1088/    333F : FF 2B                          smi   '+'
(1) 1089/    3341 : C2 33 45                       lbz   atof_p
(1) 1090/    3344 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    3345 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    3347 : C8                             lskp
(1) 1093/    3348 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    334A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    334B : 1F                             inc   R15                    ; move past sign
(1) 1096/    334C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    334E : AC                             plo   R12
(1) 1098/    334F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    3350 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    3353 : CB 33 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    3356 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    3357 : 52                             str   r2
(1) 1103/    3358 : F6                             shr                         ; multiply by 2
(1) 1104/    3359 : F6                             shr                         ; by 4
(1) 1105/    335A : F4                             add                         ; by 5
(1) 1106/    335B : F6                             shr                         ; by 10
(1) 1107/    335C : 52                             str   r2                    ; put here for add
(1) 1108/    335D : 4F                             lda   R15                    ; recover number
(1) 1109/    335E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    3360 : F4                             add                         ; add with total
(1) 1111/    3361 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    3362 : C0 33 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    3365 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    3366 : C2 33 95                       lbz   atof_end              ; jump if so
(1) 1115/    3369 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    336A : 8C                             glo   R12                    ; save count
(1) 1117/    336B : 73                             stxd
(1) 1118/    336C : 9C                             ghi   R12                    ; save sign
(1) 1119/    336D : 73                             stxd
(1) 1120/    336E : 8F                             glo   R15
(1) 1121/    336F : 73                             stxd
(1) 1122/    3370 : 9F                             ghi   R15
(1) 1123/    3371 : 73                             stxd
(1) 1124/    3372 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    3374 : BA                             phi   R10
(1) 1126/    3375 : F8 20                          ldi   020h
(1) 1127/    3377 : AA                             plo   R10
(1) 1128/    3378 : F8 00                          ldi   0
(1) 1129/    337A : BB                             phi   FB
(1) 1130/    337B : AB                             plo   FB
(1) 1131/    337C : 9C                             ghi   R12
(1) 1132/    337D : C2 33 86                       lbz   atof_div              ; jump if negative
(1) 1133/    3380 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    3383 : C0 33 89                       lbr   atof_go5              ; clean up call
(1) 1135/    3386 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    3389 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    338A : 72                             ldxa
(1) 1138/    338B : BF                             phi   R15
(1) 1139/    338C : 72                             ldxa
(1) 1140/    338D : AF                             plo   R15
(1) 1141/    338E : 72                             ldxa
(1) 1142/    338F : BC                             phi   R12
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(LCC1802fp.inc) - page 84 - 6/2/2013 16:37:30


(1) 1143/    3390 : F0                             ldx
(1) 1144/    3391 : AC                             plo   R12
(1) 1145/    3392 : C0 33 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    3395 :                     atof_end:
(1) 1147/    3395 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    3396 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    339A : (MACRO)             	   popr R12	;wjr
(1) 1150/    339E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    33A2 : (MACRO)             	   Cretn
(1) 1152/    33A3 : 00 00               scratch:   db	00,00
    3071/    33A5 :                     	include IO1802.inc
(1)    1/    33A5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    33A5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    33A5 :                     	align 64
(1)    4/    33C0 :                     _putc:
(1)    5/    33C0 :                     _out5:	
(1)    6/    33C0 : 8C                  	glo	regArg1
(1)    7/    33C1 : 22                  	dec	sp
(1)    8/    33C2 : 52                  	str	sp
(1)    9/    33C3 : 65                  	out	5
(1)   10/    33C4 : (MACRO)             	Cretn
(1)   11/    33C5 :                     _inp:		;raw port input
(1)   12/    33C5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    33C5 : 22                  	dec	sp	;work backwards
(1)   14/    33C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    33C8 : 73                  	stxd		
(1)   16/    33C9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    33CA : FA 07               	ani	0x07	;clean it
(1)   18/    33CC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    33CE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    33D0 : 73                  	stxd		;store it for execution
(1)   21/    33D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    33D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    33D6 : D8                  	sep	rt1	;execute it
(1)   24/    33D7 :                     ;we will come back to here with the input byte in D
(1)   25/    33D7 : 12                  	inc	sp	;step over the work area
(1)   26/    33D8 : AF                  	plo	retVal	;save it to return
(1)   27/    33D9 : F8 00               	ldi	0
(1)   28/    33DB : BF                  	phi	retval	;clear top byte
(1)   29/    33DC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    33DD : 12                  	inc	sp	;and the D3
(1)   31/    33DE : (MACRO)             	Cretn		;and we're done
(1)   32/    33DF :                     	
(1)   33/    33DF :                     _out:		;raw port output
(1)   34/    33DF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    33DF :                     		;this could be bolder:
(1)   36/    33DF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/    33DF :                     		;then SEP sp
(1)   38/    33DF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    33DF :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    33DF : 22                  	dec	sp	;work backwards
(1)   41/    33E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    33E2 : 73                  	stxd		
(1)   43/    33E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/    33E7 : 8C                  	glo	regarg1	;get the port number
(1)   45/    33E8 : FA 07               	ani	0x07	;clean it
(1)   46/    33EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    33EC : 73                  	stxd		;store it for execution
(1)   48/    33ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    33EE : 52                  	str	sp	;store it where sp points
 AS V1.42 Beta [Bld 87] - source file simpweb.asm(IO1802.inc) - page 85 - 6/2/2013 16:37:30


(1)   50/    33EF : D8                  	sep	rt1	;execute it
(1)   51/    33F0 :                     ;we will come back to here with sp stepped up by one
(1)   52/    33F0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    33F1 : 12                  	inc	sp	;and the D3
(1)   54/    33F2 : (MACRO)             	Cretn		;and we're done
(1)   55/    33F3 :                     	
(1)   56/    33F3 :                     	
    3072/    33F3 :                     
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 86 - 6/2/2013 16:37:30


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2F07 C |  ADD_A2NZ :                    2F18 C |
 ADD_FNL :                     2FBF C |  ADD_LP1 :                     2F62 C |
 ADD_LP1DN :                   2F77 C |  ADD_NM :                      2F86 C |
 ADD_NO :                      2FA8 C |  ADD_NS :                      2F50 C |
 ADD_NX :                      2FEB C |  ADD_NZ :                      2FDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    3386 C |
 ATOF_DN3 :                    32A8 C |  ATOF_DN4 :                    3312 C |
 ATOF_DN5 :                    3365 C |  ATOF_END :                    3395 C |
 ATOF_EXP :                    3337 C |  ATOF_GO1 :                    3230 C |
 ATOF_GO5 :                    3389 C |  ATOF_LP1 :                    3236 C |
 ATOF_LP2 :                    328C C |  ATOF_LP3 :                    32C5 C |
 ATOF_LP4 :                    32E3 C |  ATOF_LP5 :                    334F C |
 ATOF_LPX :                    3277 C |  ATOF_N :                      3348 C |
 ATOF_NC4 :                    330B C |  ATOF_NDP :                    326E C |
 ATOF_NM :                     3226 C |  ATOF_NO1 :                    3267 C |
 ATOF_NO4 :                    32F4 C |  ATOF_NZ :                     32C2 C |
 ATOF_P :                      3345 C | *BIGENDIAN :                      0 - |
 BITLOOP284 :                  2BB8 C | *BRANCHEXT :                      0 - |
 BVTABLE117 :                  145F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB282 :                2A96 C |  CKNEXT284 :                   2C07 C |
 CKTOP284 :                    2BA3 C |  CLKPORT :                        2 - |
 CLRLP284 :                    2B94 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       2E00 C |  CVIF4 :                       2D00 C |
*DATE :                    6/2/2013 - |  DCKLP284 :                    2BBB C |
 DIVLOOP16_16279 :             2952 C | *DIVSETBIT16_16279 :           2984 C |
 DIVSKIP16_16279 :             2981 C |  DIVSKIPCLEAR16_16279 :        2988 C |
 DIVSKIPFINALADD16_16279 :     299A C |  DIVSUB16_16279 :              2973 C |
 DIV_A1NZ :                    3009 C |  DIV_A2NZ :                    3027 C |
 DIV_GO :                      308E C |  DIV_GO1 :                     307B C |
 DIV_LP :                      3068 C |  DIV_NOPE :                    30C9 C |
 DIV_Z :                       30DB C |  DNOADD284 :                   2BC3 C |
 DONE280 :                     29D3 C |  DONE283 :                     2B74 C |
 DONE284 :                     2C11 C |  DONE290 :                     2D6F C |
 DONE291 :                     2E61 C |  DSHLP284 :                    2BD7 C |
 ENDLP281 :                    2A61 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       2E6E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      2EEE C |  FP_ADD_12 :                   2E8C C |
 FP_ATOF :                     3212 C |  FP_DIV :                      2FF8 C |
 FP_GETEXP :                   2EDC C |  FP_GETSGN :                   2EE7 C |
 FP_MUL :                      30EB C |  FP_SC_CLN :                   2EC0 C |
 FP_SC_UP :                    2EB0 C |  FP_SHL_1 :                    2E7F C |
 FP_SHR_1 :                    2E72 C |  FP_SHR_FD :                   2EA3 C |
 FP_SUB :                      2FF1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     2E62 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                             B C | *L10 :                          112 C |
*L100 :                        1171 C |  L102 :                        1172 C |
 L103 :                        1136 C |  L105 :                        2728 C |
 L106 :                        1171 C |  L108 :                        2726 C |
*L109 :                        123F C |  L110 :                        2658 C |
 L111 :                        2545 C | *L112 :                        13D4 C |
 L113 :                        253F C |  L114 :                        2534 C |
 L115 :                        2529 C |  L116 :                        2517 C |
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 87 - 6/2/2013 16:37:30


 L117 :                        2505 C |  L118 :                        24F8 C |
 L119 :                        24F1 C |  L120 :                        130F C |
 L124 :                        24EC C |  L125 :                        13C8 C |
 L127 :                        13C8 C |  L129 :                        24D9 C |
*L13 :                          1BC C |  L130 :                        13C8 C |
 L132 :                        24CC C | *L133 :                        141A C |
 L134 :                        1404 C | *L135 :                        1407 C |
 L137 :                        1408 C | *L138 :                        1470 C |
 L140 :                        1516 C |  L141 :                        148A C |
*L142 :                        1507 C |  L144 :                        150A C |
 L145 :                        14FA C |  L148 :                        14ED C |
 L149 :                        14F3 C |  L150 :                        1507 C |
*L152 :                        1547 C |  L153 :                        1531 C |
*L154 :                        1531 C |  L156 :                        1533 C |
*L157 :                        1562 C |  L158 :                        1556 C |
 L159 :                        1558 C | *L16 :                          240 C |
*L161 :                        1598 C |  L162 :                        1577 C |
 L163 :                        1592 C | *L165 :                        187B C |
 L166 :                        16AE C |  L167 :                        16BE C |
 L168 :                        24C8 C |  L169 :                        24C4 C |
 L170 :                        16BE C |  L172 :                        1702 C |
 L174 :                        186F C | *L176 :                        1A19 C |
 L177 :                        1954 C |  L178 :                        1964 C |
 L179 :                        196D C |  L180 :                        19F1 C |
 L182 :                        1974 C | *L183 :                        1974 C |
 L185 :                        1981 C |  L186 :                        19E0 C |
 L189 :                        19AA C | *L19 :                          8F9 C |
*L190 :                        1AF6 C |  L191 :                        1AB0 C |
*L193 :                        1B44 C | *L194 :                        1BA4 C |
*L195 :                        1C17 C | *L196 :                        1CAA C |
 L197 :                        1C85 C |  L198 :                        1CAA C |
*L199 :                        1D28 C | *L2 :                            17 C |
 L20 :                          247 C | *L200 :                        2086 C |
 L201 :                        1D73 C |  L202 :                        2074 C |
 L204 :                        1DAF C |  L205 :                        2074 C |
 L206 :                        2063 C |  L207 :                        2074 C |
 L209 :                        1E74 C |  L21 :                          24D C |
 L210 :                        1E8D C |  L211 :                        1EAA C |
 L212 :                        1EC8 C |  L213 :                        1F07 C |
 L214 :                        2013 C |  L216 :                        1F65 C |
 L218 :                        1F98 C |  L219 :                        200E C |
 L22 :                          251 C |  L220 :                        2013 C |
 L221 :                        2063 C |  L223 :                        2047 C |
 L225 :                        1E2A C |  L226 :                        1E39 C |
 L227 :                        1E16 C | *L229 :                        1E65 C |
 L23 :                          255 C | *L230 :                        20C6 C |
 L231 :                        24B8 C |  L232 :                        20C3 C |
*L233 :                        20C3 C | *L235 :                        2147 C |
 L236 :                        20FA C |  L237 :                        212A C |
 L239 :                        2143 C |  L24 :                         28AD C |
*L240 :                        21A1 C |  L241 :                        217E C |
 L242 :                        218C C | *L244 :                        21EB C |
 L245 :                        21CB C |  L246 :                        21D6 C |
*L248 :                        22B6 C |  L25 :                         2888 C |
*L3 :                            A2 C |  L32 :                         285E C |
 L4 :                            32 C |  L43 :                         283C C |
*L5 :                            8B C |  L50 :                         281C C |
 L57 :                         2800 C |  L58 :                         27E4 C |
 L59 :                         27C9 C |  L60 :                         27AA C |
 L61 :                         2787 C |  L62 :                          961 C |
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 88 - 6/2/2013 16:37:30


 L63 :                          941 C |  L65 :                          950 C |
*L66 :                          950 C |  L68 :                          B85 C |
 L69 :                          9D9 C |  L71 :                          9D0 C |
 L72 :                          9E8 C |  L74 :                         2778 C |
 L75 :                          A75 C |  L76 :                          A95 C |
*L78 :                          C23 C |  L79 :                          FA9 C |
*L8 :                           12B C |  L80 :                          C7A C |
 L82 :                          C73 C |  L83 :                         2769 C |
 L84 :                          D03 C |  L85 :                          DAA C |
 L87 :                          DAA C |  L89 :                          E44 C |
 L9 :                            C5 C |  L90 :                          EA5 C |
 L92 :                          F92 C | *L93 :                          F92 C |
*L95 :                         10E5 C |  L96 :                         2730 C |
*L97 :                         118E C |  L98 :                         272C C |
 L99 :                         1114 C |  LCC1802INIT :                 28B4 C |
*LISTON :                         1 - |  LOOP230 :                     220A C |
 LOOP231 :                     224A C |  LOOP232 :                     228E C |
 LOOP233 :                     22A7 C |  LOOP281 :                     2A0F C |
 LSH291 :                      2E2B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP282 :                    2A77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP277 :                     291E C |  MULTLOOP16_16278 :            292B C |
 MULTSKIP16_16278 :            293D C |  MUL_DN :                      31BA C |
 MUL_GO1 :                     3142 C |  MUL_LP1 :                     3132 C |
 MUL_LP2 :                     31CD C |  MUL_LP2A :                    31E0 C |
 MUL_LP3 :                     31E9 C |  MUL_LP3A :                    31FC C |
 MUL_LP4 :                     320D C |  MUL_NO :                      318F C |
 MUL_NXT1 :                    31E4 C | *NESTMAX :                      100 - |
 NORESTORE281 :                2A5D C |  NXT290 :                      2D30 C |
 OUTIT117 :                    145C C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      2E6B C |
 POS1280 :                     29B3 C |  POS1283 :                     2B26 C |
 POS2280 :                     29C3 C |  POS2283 :                     2B4D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     33A3 C |
 SETBITOFF117 :                1457 C |  SETSGN290 :                   2D68 C |
 SGNPOS290 :                   2D39 C |  SHDN290 :                     2D5F C |
 SHIFT282 :                    2AAE C |  SHL290 :                      2D4B C |
 SHR291 :                      2E19 C |  SIGN291 :                     2E3B C |
 SP :                             2 - | *SPIMOSI :                        7 - |
 SPISCK :                         5 - | *TIME :                    16:37:30 - |
*TRUE :                           1 - |  UPNXT284 :                    2BF0 C |
*VERSION :                     142F - |  ZEROIN230 :                   221B C |
 ZEROIN231 :                   225B C |  ZEROIN233 :                   22AD C |
 _00000269 :                   28CE C |  _BUF :                        22B7 C |
 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 89 - 6/2/2013 16:37:30


 _CALL :                       2901 C |  _DELAY :                      13E9 C |
 _DIE269 :                     28D1 C |  _DIGITALREAD :                1468 C |
 _DIGITALWRITE :               1440 C | *_DISABLECHIP :                  10 C |
 _DISCONNECT :                  902 C |  _DIVI2 :                      29A4 C |
 _DIVI4 :                      2B00 C |  _DIVU2 :                      2949 C |
 _DIVU4 :                      2A00 C |  _DUBDABX :                    2B75 C |
*_DUMP :                       10EE C | *_ENABLECHIP :                    4 C |
*_EXIT :                       209D C |  _FTOA :                       15E4 C |
*_INP :                        33C5 C |  _ITOA :                       189C C |
 _LTOA :                       1A30 C |  _MAIN :                       1248 C |
*_MEMCMP :                     20CB C | *_MEMCPY :                     2158 C |
*_MEMSET :                     21AE C |  _MODI2 :                      28E2 C |
*_MODI4 :                      2C1E C | *_MODU2 :                      28DA C |
*_MODU4 :                      2C12 C |  _MULT_NUMS :                  15C4 C |
*_MULU2 :                      2923 C | *_MULU4 :                      2A66 C |
*_OLDUINOINCLUDER :            1427 C |  _ONEMS :                      291C C |
 _OUT :                        33DF C | *_OUT4 :                       28EA C |
*_OUT5 :                       33C0 C |  _PIN4 :                          3 C |
 _PRINTF :                     1D2D C |  _PRINTFLT :                   1BAD C |
 _PRINTINT :                   1B0B C |  _PRINTLINT :                  1B4D C |
 _PRINTSTR :                   1567 C |  _PUTC :                       33C0 C |
 _PUTX :                       1CAF C |  _PUTXN :                      1C20 C |
 _RECV :                        966 C |  _RECV_SIZE :                   B9C C |
 _REPORT :                      FC6 C |  _RETURN :                     2912 C |
 _ROUND_NUMS :                 15A4 C |  _SEND :                        C2A C |
 _SENDSTUFF :                  119B C |  _SETQOFF :                    28D8 C |
 _SETQON :                     28D6 C | *_SHIFTINF :                   22A0 C |
*_SHIFTOUTF :                  2280 C |  _SOCKREG :                    24B7 C |
*_SPINCLUDER :                 21F4 C |  _SPI_READ :                    1C3 C |
 _SPI_WRITE :                   138 C |  _STRCPY :                     151F C |
 _STRLEN :                     154A C | *_STRNCMP :                    1471 C |
 _W5100_INIT :                  259 C | *_XFERSPI :                      1C C |
*_XFERSPI2 :                     AF C | *_XFERSPIF :                   2200 C |
 _XFERSPIF2 :                  2240 C |  __FORW14 :                    33DC C |
*__FORW15 :                    33F0 C |  __FORW6 :                     146F C |

    424 symbols
    101 unused symbols

 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 90 - 6/2/2013 16:37:30


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     83 macros

 AS V1.42 Beta [Bld 87] - source file simpweb.asm - page 91 - 6/2/2013 16:37:30


  codepages:
  ----------

STANDARD (0 changed characters)


0.14 seconds assembly time

   5803 lines source file
  15486 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
