 AS V1.42 Beta [Bld 87] - source file fp.asm - page 1 - 3/18/2013 17:34:10


       1/       0 : =2H                 SP:	equ	2 ;stack pointer
       2/       0 : =EH                 memAddr: equ	14
       3/       0 : =6H                 retAddr: equ	6
       4/       0 : =FH                 retVal:	equ	15
       5/       0 : =CH                 regArg1: equ	12
       6/       0 : =DH                 regArg2: equ	13
       7/       0 :                     	include lcc1802ProloNO.inc
(1)    1/       0 :                     	RELAXED ON
(1)    2/       0 :                     ;definitions and prolog functions needed for smc1802 programs (Hi Bill)
(1)    3/       0 :                     ;dec 21 packaged version for the christmas compiler (Ho Ho Ho)
(1)    4/       0 :                     ;Dec 24 fixed shift macros to use memaddr as a work register and not corrupt the shift count
(1)    5/       0 :                     ;jan 6 fixed shift left macro as above
(1)    6/       0 :                     ;jan 11 saving as lcc1802epiloNG.inc for the NG compiler
(1)    7/       0 :                     ;jan 12 minor correction to rldmi
(1)    8/       0 :                     ;jan 14 minor correction to ldi4
(1)    9/       0 :                     ;jan 16 adding shri4I
(1)   10/       0 :                     ;jan20 correct error in shl2r
(1)   11/       0 :                     ;jan21 moved 4 byte macros to bottom and added shrc4
(1)   12/       0 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)   13/       0 :                     ;Feb 7 adding nointerrupts/interrupts to control interruptability
(1)   14/       0 :                     ;Feb 13 changing address mode macros
(1)   15/       0 :                     ;Feb 14 removing nointerrupts, adding reserve/release for stack frame, ld2z macro
(1)   16/       0 :                     ;Mar 3 changing reserve/release to use inc/dec for 8 or less bytes
(1)   17/       0 :                     ;Mar 4 adding incm macro for multiple increments
(1)   18/       0 :                     ;mar 5 adding jzi2 macro to speed up if processing
(1)   19/       0 :                     ;mar 6 adding ldn1, str1 for register indirect addressing
(1)   20/       0 :                     ;mar 17 adding decm macro
(1)   21/       0 : =0H                 R0:	equ	0
(1)   22/       0 : =1H                 R1:	equ	1
(1)   23/       0 : =2H                 R2:	equ	2
(1)   24/       0 : =3H                 R3:	equ	3
(1)   25/       0 : =4H                 R4:	equ	4
(1)   26/       0 : =5H                 R5:	equ	5
(1)   27/       0 : =6H                 R6:	equ	6
(1)   28/       0 : =7H                 R7:	equ	7
(1)   29/       0 : =8H                 R8:	equ	8
(1)   30/       0 : =9H                 R9:	equ	9
(1)   31/       0 : =AH                 R10:	equ	10
(1)   32/       0 : =BH                 R11:	equ	11
(1)   33/       0 : =CH                 R12:	equ	12
(1)   34/       0 : =DH                 R13:	equ	13
(1)   35/       0 : =EH                 R14:	equ	14
(1)   36/       0 : =FH                 R15:	equ	15
(1)   37/       0 : =1H                 RL0:	equ	1 ;long register pairs are identified by their odd numbered register
(1)   38/       0 : =9H                 RL8:	equ	9 ;temp 1
(1)   39/       0 : =BH                 RL10:	equ	11;temp 2
(1)   40/       0 : =DH                 RL12:	equ	13 ;return value register for longs
(1)   41/       0 : =DH                 Rp1p2:	equ	13 ;argument register for longs
(1)   42/       0 : =8H                 Rt1:	equ	8  ;1st temp register
(1)   43/       0 : =9H                 Rt2:	equ	9  ;2nd temp register
(1)   44/       0 : =4H                 RCALL:	equ 	4 ;standard call routine
(1)   45/       0 : =5H                 RRET:	equ 	5 ;standard return register
(1)   46/       0 : =3H                 RPC:	equ 	3 ; standard program counter
(1)   47/       0 :                     
(1)  812/       0 :                     	listing	on
(1)  813/       0 : C0 00 03            	lbr	lcc1802Init
(1)  814/       3 :                     
       8/       3 : 30 03               lcc1802Init: br lcc1802Init
       9/       5 :                     ; *** Check if character is numeric
      10/       5 :                     ; *** D - char to check
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 2 - 3/18/2013 17:34:10


      11/       5 :                     ; *** Returns DF=1 if numeric
      12/       5 :                     ; ***         DF=0 if not
      13/       5 : AE                  f_isnum:   plo     r14                 ; save a copy
      14/       6 : FF 30                          smi     '0'                 ; check for below zero
      15/       8 : 3B 11                          bnf     fails               ; jump if below
      16/       A : FF 0A                          smi     10                  ; see if above
      17/       C : 33 11                          bdf     fails               ; fails if so
      18/       E : FF 00               passes:    smi     0                   ; signal success
      19/      10 : C8                             lskp
      20/      11 : FC 00               fails:     adi     0                   ; signal failure
      21/      13 : 8E                             glo     r14                 ; recover character
      22/      14 : D5                             sep     RRET                ; and return; *******************************
      23/      15 :                     ; *** Shift R8:R7 right 1 bit ***
      24/      15 :                     ; *******************************
      25/      15 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
      26/      16 : F6                             shr
      27/      17 : B8                             phi   r8
      28/      18 : 88                             glo   r8
      29/      19 : 76                             shrc
      30/      1A : A8                             plo   r8
      31/      1B : 97                             ghi   r7                    ; shift low word right
      32/      1C : 76                             shrc
      33/      1D : B7                             phi   r7
      34/      1E : 87                             glo   r7
      35/      1F : 76                             shrc
      36/      20 : A7                             plo   r7
      37/      21 : D5                             sep   RRET
      38/      22 :                     
      39/      22 :                     ; ******************************
      40/      22 :                     ; *** Shift R8:R7 left 1 bit ***
      41/      22 :                     ; ******************************
      42/      22 : 87                  fp_shl_1:  glo   r7
      43/      23 : FE                             shl
      44/      24 : A7                             plo   r7
      45/      25 : 97                             ghi   r7
      46/      26 : 7E                             shlc
      47/      27 : B7                             phi   r7
      48/      28 : 88                             glo   r8
      49/      29 : 7E                             shlc
      50/      2A : A8                             plo   r8
      51/      2B : 98                             ghi   r8
      52/      2C : 7E                             shlc
      53/      2D : B8                             phi   r8
      54/      2E : D5                             sep   RRET
      55/      2F :                     
      56/      2F :                     ; **********************
      57/      2F :                     ; *** R8:R7 += RA:R9 ***
      58/      2F :                     ; **********************
      59/      2F : 89                  fp_add_12: glo   r9
      60/      30 : 52                             str   r2
      61/      31 : 87                             glo   r7
      62/      32 : F4                             add
      63/      33 : A7                             plo   r7
      64/      34 : 99                             ghi   r9
      65/      35 : 52                             str   r2
      66/      36 : 97                             ghi   r7
      67/      37 : 74                             adc
      68/      38 : B7                             phi   r7
      69/      39 : 8A                             glo   R10
      70/      3A : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 3 - 3/18/2013 17:34:10


      71/      3B : 88                             glo   r8
      72/      3C : 74                             adc
      73/      3D : A8                             plo   r8
      74/      3E : 9A                             ghi   R10
      75/      3F : 52                             str   r2
      76/      40 : 98                             ghi   r8
      77/      41 : 74                             adc
      78/      42 : B8                             phi   r8
      79/      43 : D5                             sep   RRET
      80/      44 :                     
      81/      44 :                     ; *******************************
      82/      44 :                     ; *** Shift RF:RD right 1 bit ***
      83/      44 :                     ; *******************************
      84/      44 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
      85/      45 : F6                             shr
      86/      46 : BF                             phi   R15
      87/      47 : 8F                             glo   R15
      88/      48 : 76                             shrc
      89/      49 : AF                             plo   R15
      90/      4A : 9D                             ghi   R13                    ; shift low word right
      91/      4B : 76                             shrc
      92/      4C : BD                             phi   R13
      93/      4D : 8D                             glo   R13
      94/      4E : 76                             shrc
      95/      4F : AD                             plo   R13
      96/      50 : D5                             sep   RRET
      97/      51 :                     
      98/      51 :                     ; *************************************
      99/      51 :                     ; *** Scale number to high bit is 1 ***
     100/      51 :                     ; *** R8:R7 - Number to scale       ***
     101/      51 :                     ; *** RF.1  - Exponent for number   ***
     102/      51 :                     ; *** RB.0  - Sign bit (bit 0)      ***
     103/      51 :                     ; *** Returns: R8:R7 - final sp num ***
     104/      51 :                     ; *************************************
     105/      51 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
     106/      52 : FA 80                          ani   080h                  ; check it
     107/      54 : CA 00 61                       lbnz  fp_sc_cln             ; jump if good
     108/      57 : D4                             sep   RCALL                 ; shift answer left
     109/      58 : 00 22                          dw    fp_shl_1
     110/      5A : 9F                             ghi   R15                    ; get exp1
     111/      5B : FF 01                          smi   1                     ; minus 1
     112/      5D : BF                             phi   R15                    ; and put it back
     113/      5E : C0 00 51                       lbr   fp_sc_up              ; loop back intil msbit is 1
     114/      61 : 88                  fp_sc_cln: glo   r8                    ; get high byte
     115/      62 : FE                             shl                         ; shift out high 1 bit
     116/      63 : A8                             plo   r8                    ; set aside
     117/      64 : 9F                             ghi   R15                    ; get exponent byte
     118/      65 : B8                             phi   r8                    ; write other 7 bits to r8.1
     119/      66 : F6                             shr                         ; shift bit 0 into DF
     120/      67 : 88                             glo   r8                    ; get high byte of mantissa
     121/      68 : 76                             shrc                        ; shift bit 0 of expnent in
     122/      69 : A8                             plo   r8                    ; and put it back
     123/      6A : 8B                             glo   R11                    ; get signs
     124/      6B : F6                             shr                         ; get sign 1
     125/      6C : 98                             ghi   r8                    ; recover exponent
     126/      6D : 76                             shrc                        ; shift in sign
     127/      6E : B8                             phi   r8                    ; put it back
     128/      6F : D5                             sep   RRET                  ; return to caller
     129/      70 :                     
     130/      70 :                     ; ************************************
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 4 - 3/18/2013 17:34:10


     131/      70 :                     ; *** Get exponenst from arguments ***
     132/      70 :                     ; *** R8:R7 - Arg 1                ***
     133/      70 :                     ; *** RA:R9 - Arg 2                ***
     134/      70 :                     ; *** Returns: RF.1 - exp1         ***
     135/      70 :                     ; ***          RF.0 - exp2         ***
     136/      70 :                     ; ************************************
     137/      70 : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
     138/      71 : FE                             shl                         ; shift it into DF
     139/      72 : 98                             ghi   r8                    ; get top 7 bits
     140/      73 : 7E                             shlc                        ; shift in first bit
     141/      74 : BF                             phi   R15                    ; put exp1 into RF.1
     142/      75 : 52                             str   r2                    ; place into memory as well
     143/      76 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
     144/      77 : FE                             shl                         ; shift it into DF
     145/      78 : 9A                             ghi   R10                    ; get top 7 bits
     146/      79 : 7E                             shlc                        ; shift in first bit
     147/      7A : AF                             plo   R15                    ; put into RF
     148/      7B : D5                             sep   RRET                  ; return to caller
     149/      7C :                     
     150/      7C :                     ; ************************************
     151/      7C :                     ; *** Get signs from arguments     ***
     152/      7C :                     ; *** R8:R7 - Arg 1                ***
     153/      7C :                     ; *** RA:R9 - Arg 2                ***
     154/      7C :                     ; *** Returns: RB.0 - signs        ***
     155/      7C :                     ; ************************************
     156/      7C : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
     157/      7D : FE                             shl                         ; shift into DF
     158/      7E : 9A                             ghi   R10                    ; get sign of arg2
     159/      7F : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
     160/      80 : 7E                             shlc                        ; now shift in sign of arg2
     161/      81 : AB                             plo   R11                    ; save them
     162/      82 : D5                             sep   RRET                  ; return to caller
     163/      83 :                     
     164/      83 :                     ; ***************************************
     165/      83 :                     ; *** Add 2 SP floating point numbers ***
     166/      83 :                     ; *** R8:R7 - Arg 1                   ***
     167/      83 :                     ; *** RA:R9 - Arg 2                   ***
     168/      83 :                     ; *** Returns: R8:R7 - Answer         ***
     169/      83 :                     ; *** Usage: RF.0 - exponent of arg1  ***
     170/      83 :                     ; ***        RF.1 - exponent of arg2  ***
     171/      83 :                     ; ***        RB.0 - signs             ***
     172/      83 :                     ; ***************************************
     173/      83 : 98                  fp_add:    ghi   r8                    ; check arg1 for zero
     174/      84 : CA 00 9C                       lbnz  add_a1nz
     175/      87 : 88                             glo   r8
     176/      88 : CA 00 9C                       lbnz  add_a1nz
     177/      8B : 97                             ghi   r7
     178/      8C : CA 00 9C                       lbnz  add_a1nz
     179/      8F : 87                             glo   r7
     180/      90 : CA 00 9C                       lbnz  add_a1nz
     181/      93 : 9A                             ghi   R10                    ; transfer arg2 to answer
     182/      94 : B8                             phi   r8
     183/      95 : 8A                             glo   R10
     184/      96 : A8                             plo   r8
     185/      97 : 99                             ghi   r9
     186/      98 : B7                             phi   r7
     187/      99 : 89                             glo   r9
     188/      9A : A7                             plo   r7
     189/      9B : D5                             sep   RRET                  ; return to caller
     190/      9C : 9A                  add_a1nz:  ghi   R10                    ; check arg1 for zero
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 5 - 3/18/2013 17:34:10


     191/      9D : CA 00 AD                       lbnz  add_a2nz
     192/      A0 : 8A                             glo   R10
     193/      A1 : CA 00 AD                       lbnz  add_a2nz
     194/      A4 : 99                             ghi   r9
     195/      A5 : CA 00 AD                       lbnz  add_a2nz
     196/      A8 : 89                             glo   r9
     197/      A9 : CA 00 AD                       lbnz  add_a2nz
     198/      AC : D5                             sep   RRET                  ; return arg1 as answer
     199/      AD : D4                  add_a2nz:  sep   RCALL                 ; get exponents
     200/      AE : 00 70                          dw    fp_getexp
     201/      B0 : 9F                             ghi   R15
     202/      B1 : 52                             str   r2
     203/      B2 : 8F                             glo   R15
     204/      B3 : F7                             sm                          ; perfrom exp2 - exp1
     205/      B4 : CB 00 D5                       lbnf  add_ns                ; jump if no swap needed
     206/      B7 :                     
     207/      B7 : 98                             ghi   r8                    ; swap arg1 with arg2
     208/      B8 : AE                             plo   R14
     209/      B9 : 9A                             ghi   R10
     210/      BA : B8                             phi   r8
     211/      BB : 8E                             glo   R14
     212/      BC : BA                             phi   R10
     213/      BD : 88                             glo   r8
     214/      BE : AE                             plo   R14
     215/      BF : 8A                             glo   R10
     216/      C0 : A8                             plo   r8
     217/      C1 : 8E                             glo   R14
     218/      C2 : AA                             plo   R10
     219/      C3 : 97                             ghi   r7                    ; swap arg1 with arg2
     220/      C4 : AE                             plo   R14
     221/      C5 : 99                             ghi   r9
     222/      C6 : B7                             phi   r7
     223/      C7 : 8E                             glo   R14
     224/      C8 : B9                             phi   r9
     225/      C9 : 87                             glo   r7
     226/      CA : AE                             plo   R14
     227/      CB : 89                             glo   r9
     228/      CC : A7                             plo   r7
     229/      CD : 8E                             glo   R14
     230/      CE : A9                             plo   r9
     231/      CF : 9F                             ghi   R15                    ; swap exponents
     232/      D0 : AE                             plo   R14
     233/      D1 : 8F                             glo   R15
     234/      D2 : BF                             phi   R15
     235/      D3 : 8E                             glo   R14
     236/      D4 : AF                             plo   R15
     237/      D5 : D4                  add_ns:    sep   RCALL                 ; get signs of arguments
     238/      D6 : 00 7C                          dw    fp_getsgn
     239/      D8 : F8 00                          ldi   0                     ; setup mantissas
     240/      DA : B8                             phi   r8
     241/      DB : BA                             phi   R10
     242/      DC : F8 80                          ldi   128                   ; need to set high bit in mantissa
     243/      DE : 52                             str   r2
     244/      DF : 88                             glo   r8
     245/      E0 : F1                             or
     246/      E1 : A8                             plo   r8
     247/      E2 : 8A                             glo   R10
     248/      E3 : F1                             or
     249/      E4 : AA                             plo   R10
     250/      E5 : 9F                             ghi   R15                    ; get exp1
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 6 - 3/18/2013 17:34:10


     251/      E6 : 52                             str   r2                    ; place into memory
     252/      E7 : 8F                  add_lp1:   glo   R15                    ; get exp2
     253/      E8 : F7                             sm                          ; see if match to exp1
     254/      E9 : C2 00 FC                       lbz   add_lp1dn             ; jump if match
     255/      EC : 8F                             glo   R15                    ; need to increase it
     256/      ED : FC 01                          adi   1
     257/      EF : AF                             plo   R15
     258/      F0 : 8A                             glo   R10                    ; now shift arg2 over 1 bit
     259/      F1 : F6                             shr
     260/      F2 : AA                             plo   R10
     261/      F3 : 99                             ghi   r9
     262/      F4 : 76                             shrc
     263/      F5 : B9                             phi   r9
     264/      F6 : 89                             glo   r9
     265/      F7 : 76                             shrc
     266/      F8 : A9                             plo   r9
     267/      F9 : C0 00 E7                       lbr   add_lp1               ; keep shifting until exponents match
     268/      FC : 8B                  add_lp1dn: glo   R11                    ; see if signs match
     269/      FD : 52                             str   r2
     270/      FE : F6                             shr
     271/      FF : F3                             xor
     272/     100 : FA 01                          ani   1                     ; keep only bottom bit
     273/     102 : CA 01 0B                       lbnz  add_nm                ; jump if signs do not match
     274/     105 : D4                             sep   RCALL                 ; perform arg1 += arg2
     275/     106 : 00 2F                          dw    fp_add_12
     276/     108 : C0 01 44                       lbr   add_fnl               ; jump to clean up
     277/     10B : 89                  add_nm:    glo   r9                    ; perform arg1 - arg2
     278/     10C : 52                             str   r2
     279/     10D : 87                             glo   r7
     280/     10E : F7                             sm
     281/     10F : AC                             plo   R12                    ; place into RD:RC
     282/     110 : 99                             ghi   r9
     283/     111 : 52                             str   r2
     284/     112 : 97                             ghi   r7
     285/     113 : 77                             smb
     286/     114 : BC                             phi   R12
     287/     115 : 8A                             glo   R10
     288/     116 : 52                             str   r2
     289/     117 : 88                             glo   r8
     290/     118 : 77                             smb
     291/     119 : AD                             plo   R13
     292/     11A : 9A                             ghi   R10
     293/     11B : 52                             str   r2
     294/     11C : 98                             ghi   r8
     295/     11D : 77                             smb
     296/     11E : BD                             phi   R13
     297/     11F : CB 01 2D                       lbnf  add_no                ; jump if arg2 was larger than arg1
     298/     122 : 9D                             ghi   R13                    ; transfer result to arg1
     299/     123 : B8                             phi   r8
     300/     124 : 8D                             glo   R13
     301/     125 : A8                             plo   r8
     302/     126 : 9C                             ghi   R12
     303/     127 : B7                             phi   r7
     304/     128 : 8C                             glo   R12
     305/     129 : A7                             plo   r7
     306/     12A : C0 01 44                       lbr   add_fnl               ; finalize
     307/     12D : 87                  add_no:    glo   r7                    ; perform arg1 = arg2 - arg1
     308/     12E : 52                             str   r2
     309/     12F : 89                             glo   r9
     310/     130 : F7                             sm
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 7 - 3/18/2013 17:34:10


     311/     131 : A7                             plo   r7
     312/     132 : 97                             ghi   r7
     313/     133 : 52                             str   r2
     314/     134 : 99                             ghi   r9
     315/     135 : 77                             smb
     316/     136 : B7                             phi   r7
     317/     137 : 88                             glo   r8
     318/     138 : 52                             str   r2
     319/     139 : 8A                             glo   R10
     320/     13A : 77                             smb
     321/     13B : A8                             plo   r8
     322/     13C : 98                             ghi   r8
     323/     13D : 52                             str   r2
     324/     13E : 9A                             ghi   R10
     325/     13F : 77                             smb
     326/     140 : B8                             phi   r8
     327/     141 : 8B                             glo   R11                    ; move sign 2 to sign1
     328/     142 : FE                             shl
     329/     143 : AB                             plo   R11
     330/     144 : 98                  add_fnl:   ghi   r8                    ; check for zero result
     331/     145 : CA 01 55                       lbnz  add_nz                ; jump if not
     332/     148 : 88                             glo   r8
     333/     149 : CA 01 55                       lbnz  add_nz
     334/     14C : 97                             ghi   r7
     335/     14D : CA 01 55                       lbnz  add_nz
     336/     150 : 87                             glo   r7
     337/     151 : CA 01 55                       lbnz  add_nz
     338/     154 : D5                             sep   RRET                  ; return the zero
     339/     155 : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
     340/     156 : C2 01 63                       lbz   add_nx                ; jump if not
     341/     159 : D4                             sep   RCALL                 ; shift answer to the right
     342/     15A : 00 15                          dw    fp_shr_1
     343/     15C : 9F                             ghi   R15                    ; get exp1
     344/     15D : FC 01                          adi   1                     ; increment it
     345/     15F : BF                             phi   R15                    ; and put it back
     346/     160 : C0 01 55                       lbr   add_nz                ; keep going until not > 24 bits
     347/     163 :                     
     348/     163 : 8B                  add_nx:    glo   R11                    ; move sign 1 to low bit
     349/     164 : F6                             shr
     350/     165 : AB                             plo   R11
     351/     166 : C0 00 51                       lbr   fp_sc_up              ; scale number and build answer
     352/     169 :                     
     353/     169 :                     ; ***************************************
     354/     169 :                     ; *** sub 2 SP floating point numbers ***
     355/     169 :                     ; *** R8:R7 - Arg 1                   ***
     356/     169 :                     ; *** RA:R9 - Arg 2                   ***
     357/     169 :                     ; *** Returns: R8:R7 - Answer         ***
     358/     169 :                     ; ***************************************
     359/     169 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
     360/     16A : FB 80                          xri   080h
     361/     16C : BA                             phi   R10                    ; and put it back
     362/     16D : C0 00 83                       lbr   fp_add                ; now just add
     363/     170 :                     
     364/     170 :                     ; ***************************************
     365/     170 :                     ; *** Div 2 SP floating point numbers ***
     366/     170 :                     ; *** R8:R7 - Arg 1                   ***
     367/     170 :                     ; *** RA:R9 - Arg 2                   ***
     368/     170 :                     ; *** Returns: R8:R7 - Answer         ***
     369/     170 :                     ; *** Usage: RF.0 - exponent of arg1  ***
     370/     170 :                     ; ***        RF.1 - exponent of arg2  ***
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 8 - 3/18/2013 17:34:10


     371/     170 :                     ; ***        RB.0 - signs             ***
     372/     170 :                     ; ***************************************
     373/     170 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
     374/     171 : CA 01 81                       lbnz  div_a1nz
     375/     174 : 88                             glo   r8
     376/     175 : CA 01 81                       lbnz  div_a1nz
     377/     178 : 97                             ghi   r7
     378/     179 : CA 01 81                       lbnz  div_a1nz
     379/     17C : 87                             glo   r7
     380/     17D : CA 01 81                       lbnz  div_a1nz
     381/     180 : D5                             sep   RRET                  ; just return the zero
     382/     181 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
     383/     182 : CA 01 9F                       lbnz  div_a2nz
     384/     185 : 8A                             glo   R10
     385/     186 : CA 01 9F                       lbnz  div_a2nz
     386/     189 : 99                             ghi   r9
     387/     18A : CA 01 9F                       lbnz  div_a2nz
     388/     18D : 89                             glo   r9
     389/     18E : CA 01 9F                       lbnz  div_a2nz
     390/     191 : 98                             ghi   r8                    ; need sign of arg1
     391/     192 : FA 80                          ani   080h                  ; want only sign
     392/     194 : F9 7F                          ori   07fh                  ; exponent will be all ones
     393/     196 : B8                             phi   r8                    ; put into answer
     394/     197 : F8 80                          ldi   080h                  ; build rest of answer
     395/     199 : A8                             plo   r8 
     396/     19A : F8 00                          ldi   0
     397/     19C : B7                             phi   r7
     398/     19D : A7                             plo   r7
     399/     19E : D5                             sep   RRET                  ; and return to caller
     400/     19F :                     
     401/     19F : D4                  div_a2nz:  sep   RCALL                 ; get exponents
     402/     1A0 : 00 70                          dw    fp_getexp
     403/     1A2 : D4                             sep   RCALL                 ; get signs
     404/     1A3 : 00 7C                          dw    fp_getsgn
     405/     1A5 : 8F                             glo   R15                    ; get exp2
     406/     1A6 : FF 7F                          smi   127                   ; remove bias
     407/     1A8 : 52                             str   r2                    ; place into memory
     408/     1A9 : 9F                             ghi   R15                    ; get exp1
     409/     1AA : FF 7F                          smi   127                   ; remove bias
     410/     1AC : F7                             sm                          ; perform exp1 - exp2
     411/     1AD : FC 7F                          adi   127                   ; put bias back in
     412/     1AF : 73                             stxd                        ; save onto stack
     413/     1B0 : 8B                             glo   R11                    ; determine sign for answer
     414/     1B1 : 52                             str   r2
     415/     1B2 : F6                             shr
     416/     1B3 : F3                             xor
     417/     1B4 : 73                             stxd                        ; place onto stack
     418/     1B5 : F8 00                          ldi   0                     ; setup man
     419/     1B7 : BA                             phi   R10
     420/     1B8 : 8A                             glo   R10
     421/     1B9 : F9 80                          ori   080h
     422/     1BB : AA                             plo   R10
     423/     1BC : F8 00                          ldi   0                     ; setup div
     424/     1BE : B8                             phi   r8
     425/     1BF : 88                             glo   r8
     426/     1C0 : F9 80                          ori   080h
     427/     1C2 : A8                             plo   r8
     428/     1C3 : F8 00                          ldi   0                     ; setup result
     429/     1C5 : BC                             phi   R12
     430/     1C6 : AC                             plo   R12
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 9 - 3/18/2013 17:34:10


     431/     1C7 : BB                             phi   R11
     432/     1C8 : AB                             plo   R11
     433/     1C9 : AF                             plo   R15                    ; setup quotient
     434/     1CA : BF                             phi   R15
     435/     1CB : BD                             phi   R13
     436/     1CC : AD                             plo   R13
     437/     1CD : F8 80                          ldi   080h
     438/     1CF : AF                             plo   R15
     439/     1D0 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
     440/     1D1 : CA 01 E3                       lbnz  div_go1
     441/     1D4 : 88                             glo   r8
     442/     1D5 : CA 01 E3                       lbnz  div_go1
     443/     1D8 : 97                             ghi   r7
     444/     1D9 : CA 01 E3                       lbnz  div_go1
     445/     1DC : 87                             glo   r7
     446/     1DD : CA 01 E3                       lbnz  div_go1
     447/     1E0 : C0 02 43                       lbr   div_z
     448/     1E3 : 9A                  div_go1:   ghi   R10
     449/     1E4 : CA 01 F6                       lbnz  div_go
     450/     1E7 : 8A                             glo   R10
     451/     1E8 : CA 01 F6                       lbnz  div_go
     452/     1EB : 99                             ghi   r9
     453/     1EC : CA 01 F6                       lbnz  div_go
     454/     1EF : 89                             glo   r9
     455/     1F0 : CA 01 F6                       lbnz  div_go
     456/     1F3 : C0 02 43                       lbr   div_z                 ; nothing more to do
     457/     1F6 : 89                  div_go:    glo   r9                    ; see if div > man
     458/     1F7 : 52                             str   r2
     459/     1F8 : 87                             glo   r7
     460/     1F9 : F7                             sm
     461/     1FA : 99                             ghi   r9
     462/     1FB : 52                             str   r2
     463/     1FC : 97                             ghi   r7
     464/     1FD : 77                             smb
     465/     1FE : 8A                             glo   R10
     466/     1FF : 52                             str   r2
     467/     200 : 88                             glo   r8
     468/     201 : 77                             smb
     469/     202 : 9A                             ghi   R10
     470/     203 : 52                             str   r2
     471/     204 : 98                             ghi   r8
     472/     205 : 77                             smb
     473/     206 : CB 02 31                       lbnf  div_nope              ; jump if div was smaller
     474/     209 : 89                             glo   r9                    ; div -= man
     475/     20A : 52                             str   r2
     476/     20B : 87                             glo   r7
     477/     20C : F7                             sm
     478/     20D : A7                             plo   r7
     479/     20E : 99                             ghi   r9
     480/     20F : 52                             str   r2
     481/     210 : 97                             ghi   r7
     482/     211 : 77                             smb
     483/     212 : B7                             phi   r7
     484/     213 : 8A                             glo   R10
     485/     214 : 52                             str   r2
     486/     215 : 88                             glo   r8
     487/     216 : 77                             smb
     488/     217 : A8                             plo   r8
     489/     218 : 9A                             ghi   R10
     490/     219 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 10 - 3/18/2013 17:34:10


     491/     21A : 98                             ghi   r8
     492/     21B : 77                             smb
     493/     21C : B8                             phi   r8
     494/     21D : 9F                             ghi   R15                    ; merge quotient into result
     495/     21E : 52                             str   r2
     496/     21F : 9C                             ghi   R12
     497/     220 : F1                             or
     498/     221 : BC                             phi   R12
     499/     222 : 8F                             glo   R15
     500/     223 : 52                             str   r2
     501/     224 : 8C                             glo   R12
     502/     225 : F1                             or
     503/     226 : AC                             plo   R12
     504/     227 : 9D                             ghi   R13
     505/     228 : 52                             str   r2
     506/     229 : 9B                             ghi   R11
     507/     22A : F1                             or
     508/     22B : BB                             phi   R11
     509/     22C : 8D                             glo   R13
     510/     22D : 52                             str   r2
     511/     22E : 8B                             glo   R11
     512/     22F : F1                             or
     513/     230 : AB                             plo   R11
     514/     231 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
     515/     232 : 00 44                          dw    fp_shr_fd
     516/     234 : 9A                             ghi   R10                    ; shift divisor right
     517/     235 : F6                             shr
     518/     236 : BA                             phi   R10
     519/     237 : 8A                             glo   R10
     520/     238 : 76                             shrc
     521/     239 : AA                             plo   R10
     522/     23A : 99                             ghi   r9
     523/     23B : 76                             shrc
     524/     23C : B9                             phi   r9
     525/     23D : 89                             glo   r9
     526/     23E : 76                             shrc
     527/     23F : A9                             plo   r9
     528/     240 : C0 01 D0                       lbr   div_lp                ; loop back until done
     529/     243 : 9C                  div_z:     ghi   R12                    ; move result to arg1
     530/     244 : B8                             phi   r8
     531/     245 : 8C                             glo   R12
     532/     246 : A8                             plo   r8
     533/     247 : 9B                             ghi   R11
     534/     248 : B7                             phi   r7
     535/     249 : 8B                             glo   R11
     536/     24A : A7                             plo   r7
     537/     24B : 60                             irx                         ; recover sign
     538/     24C : 72                             ldxa
     539/     24D : AB                             plo   R11
     540/     24E : F0                             ldx                         ; recover answer exponent
     541/     24F : BF                             phi   R15
     542/     250 : C0 00 51                       lbr   fp_sc_up              ; scale number and build answer
     543/     253 :                     
     544/     253 :                     ; ***************************************
     545/     253 :                     ; *** Mul 2 SP floating point numbers ***
     546/     253 :                     ; *** R8:R7 - Arg 1                   ***
     547/     253 :                     ; *** RA:R9 - Arg 2                   ***
     548/     253 :                     ; *** Returns: R8:R7 - Answer         ***
     549/     253 :                     ; *** Usage: RF.0 - exponent of arg1  ***
     550/     253 :                     ; ***        RF.1 - exponent of arg2  ***
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 11 - 3/18/2013 17:34:10


     551/     253 :                     ; ***        RB.0 - signs             ***
     552/     253 :                     ; ***************************************
     553/     253 : D4                  fp_mul:    sep   RCALL                 ; get exponents
     554/     254 : 00 70                          dw    fp_getexp
     555/     256 : D4                             sep   RCALL                 ; get signs
     556/     257 : 00 7C                          dw    fp_getsgn
     557/     259 : 8F                             glo   R15                    ; get exp2
     558/     25A : FF 7F                          smi   127                   ; remove bias
     559/     25C : 52                             str   r2                    ; place into memory
     560/     25D : 9F                             ghi   R15                    ; get exp1
     561/     25E : FF 7F                          smi   127                   ; remove bias
     562/     260 : F4                             add                         ; add in exponent 2
     563/     261 : FC 7F                          adi   127                   ; put bias back in
     564/     263 : 73                             stxd                        ; place onto stack
     565/     264 : 8B                             glo   R11                    ; determine sign for answer
     566/     265 : 52                             str   r2
     567/     266 : F6                             shr
     568/     267 : F3                             xor
     569/     268 : 73                             stxd                        ; place onto stack
     570/     269 : 9E                             ghi   R14                    ; get baud constant
     571/     26A : 73                             stxd                        ; save on stack
     572/     26B : 96                             ghi   r6                    ; save return position on stack
     573/     26C : 73                             stxd
     574/     26D : 86                             glo   r6
     575/     26E : 73                             stxd
     576/     26F : F8 00                          ldi   0                     ; initial value of ct
     577/     271 : 73                             stxd
     578/     272 : BE                             phi   R14                    ; set mulH to 0
     579/     273 : AE                             plo   R14
     580/     274 : B6                             phi   r6
     581/     275 : A6                             plo   r6
     582/     276 : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
     583/     277 : 88                             glo   r8                    ; be sure high bit is set
     584/     278 : F9 80                          ori   080h
     585/     27A : A8                             plo   r8
     586/     27B : F8 00                          ldi   0
     587/     27D : BC                             phi   R12                    ; set result to 0
     588/     27E : AC                             plo   R12
     589/     27F : BB                             phi   R11
     590/     280 : AB                             plo   R11
     591/     281 : BF                             phi   R15
     592/     282 : AF                             plo   R15
     593/     283 : BD                             phi   R13
     594/     284 : AD                             plo   R13
     595/     285 : BA                             phi   R10                    ; arg2 &= 0ffffff
     596/     286 : 8A                             glo   R10                    ; be sure high bit is set
     597/     287 : F9 80                          ori   080h
     598/     289 : AA                             plo   R10
     599/     28A : 89                  mul_lp1:   glo   r9                    ; check for zero multiplier
     600/     28B : CA 02 9A                       lbnz  mul_go1               ; jump if not zero
     601/     28E : 99                             ghi   r9
     602/     28F : CA 02 9A                       lbnz  mul_go1
     603/     292 : 8A                             glo   R10
     604/     293 : CA 02 9A                       lbnz  mul_go1
     605/     296 : 9A                             ghi   R10
     606/     297 : C2 03 12                       lbz   mul_dn                ; jump if muliplier is zero
     607/     29A : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
     608/     29B : F6                             shr
     609/     29C : BA                             phi   R10
     610/     29D : 8A                             glo   R10
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 12 - 3/18/2013 17:34:10


     611/     29E : 76                             shrc
     612/     29F : AA                             plo   R10
     613/     2A0 : 99                             ghi   r9
     614/     2A1 : 76                             shrc
     615/     2A2 : B9                             phi   r9
     616/     2A3 : 89                             glo   r9
     617/     2A4 : 76                             shrc
     618/     2A5 : A9                             plo   r9
     619/     2A6 : CB 02 E7                       lbnf  mul_no                ; jump if low bit was zero
     620/     2A9 : 87                             glo   r7                    ; res += mul
     621/     2AA : 52                             str   r2
     622/     2AB : 8B                             glo   R11
     623/     2AC : F4                             add
     624/     2AD : AB                             plo   R11
     625/     2AE : 97                             ghi   r7
     626/     2AF : 52                             str   r2
     627/     2B0 : 9B                             ghi   R11
     628/     2B1 : 74                             adc
     629/     2B2 : BB                             phi   R11
     630/     2B3 : 88                             glo   r8
     631/     2B4 : 52                             str   r2
     632/     2B5 : 8C                             glo   R12
     633/     2B6 : 74                             adc
     634/     2B7 : AC                             plo   R12
     635/     2B8 : 98                             ghi   r8
     636/     2B9 : 52                             str   r2
     637/     2BA : 9C                             ghi   R12
     638/     2BB : 74                             adc
     639/     2BC : BC                             phi   R12
     640/     2BD : 86                             glo   r6                    ; now high 32 bits
     641/     2BE : 52                             str   r2
     642/     2BF : 8D                             glo   R13
     643/     2C0 : F4                             add
     644/     2C1 : AD                             plo   R13
     645/     2C2 : 96                             ghi   r6
     646/     2C3 : 52                             str   r2
     647/     2C4 : 96                             ghi   r6
     648/     2C5 : 52                             str   r2
     649/     2C6 : 9D                             ghi   R13
     650/     2C7 : 74                             adc
     651/     2C8 : BD                             phi   R13
     652/     2C9 : 8E                             glo   R14
     653/     2CA : 52                             str   r2
     654/     2CB : 8F                             glo   R15
     655/     2CC : 74                             adc
     656/     2CD : AF                             plo   R15
     657/     2CE : 9E                             ghi   R14
     658/     2CF : 52                             str   r2
     659/     2D0 : 9F                             ghi   R15
     660/     2D1 : 74                             adc
     661/     2D2 : BF                             phi   R15
     662/     2D3 : 9C                             ghi   R12                    ; see if need carry from low to high
     663/     2D4 : C2 02 E7                       lbz   mul_no                ; jump if no carry is needed
     664/     2D7 : 8D                             glo   R13                    ; move the carry on over
     665/     2D8 : FC 01                          adi   1
     666/     2DA : AD                             plo   R13
     667/     2DB : 9D                             ghi   R13
     668/     2DC : 7C 00                          adci  0
     669/     2DE : BD                             phi   R13
     670/     2DF : 8F                             glo   R15
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 13 - 3/18/2013 17:34:10


     671/     2E0 : 7C 00                          adci  0
     672/     2E2 : AF                             plo   R15
     673/     2E3 : 9F                             ghi   R15
     674/     2E4 : 7C 00                          adci  0
     675/     2E6 : BF                             phi   R15
     676/     2E7 : 60                  mul_no:    irx                         ; recover ct
     677/     2E8 : F0                             ldx
     678/     2E9 : FC 01                          adi   1                     ; increment by 1
     679/     2EB : 73                             stxd                        ; and put it back
     680/     2EC : 87                             glo   r7                    ; shift mulL left
     681/     2ED : FE                             shl
     682/     2EE : A7                             plo   r7
     683/     2EF : 97                             ghi   r7
     684/     2F0 : 7E                             shlc
     685/     2F1 : B7                             phi   r7
     686/     2F2 : 88                             glo   r8
     687/     2F3 : 7E                             shlc
     688/     2F4 : A8                             plo   r8
     689/     2F5 : 98                             ghi   r8
     690/     2F6 : 7E                             shlc
     691/     2F7 : B8                             phi   r8
     692/     2F8 : 86                             glo   r6                    ; shift mulH left
     693/     2F9 : FE                             shl
     694/     2FA : A6                             plo   r6
     695/     2FB : 96                             ghi   r6
     696/     2FC : 7E                             shlc
     697/     2FD : B6                             phi   r6
     698/     2FE : 8E                             glo   R14
     699/     2FF : 7E                             shlc
     700/     300 : AE                             plo   R14
     701/     301 : 9E                             ghi   R14
     702/     302 : 7E                             shlc
     703/     303 : BE                             phi   R14
     704/     304 : 98                             ghi   r8                    ; see if a carry is needed
     705/     305 : C2 02 8A                       lbz   mul_lp1               ; jump if not
     706/     308 : F8 00                          ldi   0                     ; zero the high byte
     707/     30A : B8                             phi   r8
     708/     30B : 86                             glo   r6                    ; add in the carry
     709/     30C : F9 01                          ori   1
     710/     30E : A6                             plo   r6
     711/     30F : C0 02 8A                       lbr   mul_lp1               ; loop back for more
     712/     312 : 60                  mul_dn:    irx                         ; recover ct
     713/     313 : 72                             ldxa
     714/     314 : AE                             plo   R14                    ; set aside
     715/     315 : 72                             ldxa
     716/     316 : A6                             plo   r6
     717/     317 : 72                             ldxa
     718/     318 : B6                             phi   r6
     719/     319 : F0                             ldx
     720/     31A : BE                             phi   R14
     721/     31B : 9C                             ghi   R12                    ; transfer resL to arg1
     722/     31C : B8                             phi   r8
     723/     31D : 8C                             glo   R12
     724/     31E : A8                             plo   r8
     725/     31F : 9B                             ghi   R11
     726/     320 : B7                             phi   r7
     727/     321 : 8B                             glo   R11
     728/     322 : A7                             plo   r7
     729/     323 : 8E                             glo   R14
     730/     324 : AC                             plo   R12                    ; put ct into RC.0
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 14 - 3/18/2013 17:34:10


     731/     325 : 8C                  mul_lp2:   glo   R12                    ; get ct
     732/     326 : FF 02                          smi   2                     ; see if <2
     733/     328 : CB 03 3C                       lbnf  mul_nxt1              ; jump if so
     734/     32B : D4                             sep   RCALL                 ; shift answer to the right
     735/     32C : 00 15                          dw    fp_shr_1
     736/     32E : D4                             sep   RCALL                 ; shift resH right
     737/     32F : 00 44                          dw    fp_shr_fd
     738/     331 : CB 03 38                       lbnf  mul_lp2a              ; jump if no carry into low word
     739/     334 : 88                             glo   r8                    ; set high bit
     740/     335 : F9 80                          ori   080h
     741/     337 : A8                             plo   r8
     742/     338 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
     743/     339 : C0 03 25                       lbr   mul_lp2               ; loop back to keep checking
     744/     33C : 60                  mul_nxt1:  irx                         ; recover sign
     745/     33D : 72                             ldxa
     746/     33E : AB                             plo   R11
     747/     33F : F0                             ldx                         ; recover answer exponent
     748/     340 : AC                             plo   R12
     749/     341 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
     750/     342 : CA 03 54                       lbnz  mul_lp3a
     751/     345 : 8F                             glo   R15
     752/     346 : CA 03 54                       lbnz  mul_lp3a
     753/     349 : 9D                             ghi   R13
     754/     34A : CA 03 54                       lbnz  mul_lp3a
     755/     34D : 8D                             glo   R13
     756/     34E : CA 03 54                       lbnz  mul_lp3a
     757/     351 : C0 03 65                       lbr   mul_lp4               ; jump if no bits set in resH
     758/     354 : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
     759/     355 : D4                             sep   RCALL                 ; shift answer to the right
     760/     356 : 00 15                          dw    fp_shr_1
     761/     358 : D4                             sep   RCALL                 ; shift resH right
     762/     359 : 00 44                          dw    fp_shr_fd
     763/     35B : CB 03 41                       lbnf  mul_lp3               ; jump if no carry into low word
     764/     35E : 88                             glo   r8                    ; set high bit
     765/     35F : F9 80                          ori   080h
     766/     361 : A8                             plo   r8
     767/     362 : C0 03 41                       lbr   mul_lp3
     768/     365 : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
     769/     366 : BF                             phi   R15                    ; to high R15
     770/     367 : C0 00 51                       lbr   fp_sc_up              ; scale number and build answer
     771/     36A :                     
     772/     36A :                     ; ***************************************
     773/     36A :                     ; *** Convert ascii to floating point ***
     774/     36A :                     ; *** RF - buffer to ascii text       ***
     775/     36A :                     ; *** Returns: R8:R7 - number         ***
     776/     36A :                     ; ***************************************
     777/     36A : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
     778/     36B : FF 20                          smi   ' '                   ; check for space
     779/     36D : C2 03 6A                       lbz   fp_atof               ; move past any spaces
     780/     370 : 2F                             dec   R15                    ; point back to nonspace chara
     781/     371 : 0F                             ldn   R15                    ; check for possible sign
     782/     372 : FF 2D                          smi   '-'                   ; first check for minus
     783/     374 : CA 03 7E                       lbnz   atof_nm              ; jump if not minus
     784/     377 : F8 80                          ldi   080h                  ; high bit set for minus
     785/     379 : 73                             stxd                        ; place onto stack
     786/     37A : 1F                             inc   R15                    ; move past sign
     787/     37B : C0 03 88                       lbr   atof_go1              ; and continue
     788/     37E : F8 00               atof_nm:   ldi   0                     ; indicate positive number
     789/     380 : 73                             stxd                        ; place onto stack
     790/     381 : 0F                             ldn   R15                    ; now check for + sign
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 15 - 3/18/2013 17:34:10


     791/     382 : FF 2B                          smi   '+'
     792/     384 : CA 03 88                       lbnz  atof_go1              ; jump if not plus
     793/     387 : 1F                             inc   R15                    ; move past plus sign
     794/     388 : F8 00               atof_go1:  ldi   0                     ; setup result
     795/     38A : B8                             phi   r8
     796/     38B : A8                             plo   r8
     797/     38C : B7                             phi   r7
     798/     38D : A7                             plo   r7
     799/     38E : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
     800/     38F : D4                             sep   RCALL                 ; is it numeric
     801/     390 : 00 05                          dw    f_isnum
     802/     392 : CB 03 BF                       lbnf  atof_no1              ; jump if not
     803/     395 : 98                             ghi   r8                    ; copy arg1 to arg2
     804/     396 : BA                             phi   R10
     805/     397 : 88                             glo   r8
     806/     398 : AA                             plo   R10
     807/     399 : 97                             ghi   r7
     808/     39A : B9                             phi   r9
     809/     39B : 87                             glo   r7
     810/     39C : A9                             plo   r9
     811/     39D : D4                             sep   RCALL                 ; multiply arg1 by 2
     812/     39E : 00 22                          dw    fp_shl_1
     813/     3A0 : D4                             sep   RCALL                 ; multiply arg1 by 4
     814/     3A1 : 00 22                          dw    fp_shl_1
     815/     3A3 : D4                             sep   RCALL                 ; multiply arg1 by 5
     816/     3A4 : 00 2F                          dw    fp_add_12 
     817/     3A6 : D4                             sep   RCALL                 ; multiply arg1 by 10
     818/     3A7 : 00 22                          dw    fp_shl_1
     819/     3A9 : 4F                             lda   R15                    ; get number
     820/     3AA : FF 30                          smi   '0'                   ; convert to binary
     821/     3AC : 52                             str   r2                    ; setup for add
     822/     3AD : 87                             glo   r7                    ; add in next digit
     823/     3AE : F4                             add
     824/     3AF : A7                             plo   r7
     825/     3B0 : 97                             ghi   r7                    ; propagate carry
     826/     3B1 : 7C 00                          adci  0
     827/     3B3 : B7                             phi   r7
     828/     3B4 : 88                             glo   r8
     829/     3B5 : 7C 00                          adci  0
     830/     3B7 : A8                             plo   r8
     831/     3B8 : 98                             ghi   r8
     832/     3B9 : 7C 00                          adci  0
     833/     3BB : B8                             phi   r8
     834/     3BC : C0 03 8E                       lbr   atof_lp1              ; loop until no more digits
     835/     3BF : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
     836/     3C0 : FF 2E                          smi   '.'
     837/     3C2 : CA 03 C6                       lbnz  atof_ndp              ; jump if none
     838/     3C5 : 1F                             inc   R15                    ; move past decimal
     839/     3C6 : F8 04               atof_ndp:  ldi   scratch>>8          ; point to scratch area
     840/     3C8 : BA                             phi   R10
     841/     3C9 : F8 EC                          ldi   scratch&255
     842/     3CB : AA                             plo   R10
     843/     3CC : F8 10                          ldi   16                    ; 16 bytes to clear
     844/     3CE : AC                             plo   R12
     845/     3CF : F8 00               atof_lpx:  ldi   0
     846/     3D1 : 5A                             str   R10
     847/     3D2 : 1A                             inc   R10
     848/     3D3 : 2C                             dec   R12
     849/     3D4 : 8C                             glo   R12
     850/     3D5 : CA 03 CF                       lbnz  atof_lpx
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 16 - 3/18/2013 17:34:10


     851/     3D8 : F8 04                          ldi   (scratch+1)>>8      ; point to scratch area
     852/     3DA : BA                             phi   R10
     853/     3DB : F8 ED                          ldi   (scratch+1)&255
     854/     3DD : AA                             plo   R10
     855/     3DE : F8 01                          ldi   1                     ; setup count
     856/     3E0 : AC                             plo   R12
     857/     3E1 : F8 00                          ldi   0                     ; setup exp flag
     858/     3E3 : BC                             phi   R12
     859/     3E4 : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
     860/     3E5 : FF 11                          smi   17
     861/     3E7 : C2 04 00                       lbz   atof_dn3              ; jump if so
     862/     3EA : 0F                             ldn   R15                    ; get character
     863/     3EB : D4                             sep   RCALL                 ; is it numeric
     864/     3EC : 00 05                          dw    f_isnum
     865/     3EE : CB 04 00                       lbnf  atof_dn3              ; jump if not
     866/     3F1 : 4F                             lda   R15                    ; get character
     867/     3F2 : FF 30                          smi   '0'                   ; converto to binary
     868/     3F4 : 5A                             str   R10                    ; write into bcd area
     869/     3F5 : 1A                             inc   R10
     870/     3F6 : 1C                             inc   R12                    ; increment count
     871/     3F7 : CA 03 E4                       lbnz  atof_lp2              ; loop back until done
     872/     3FA : F8 01                          ldi   1                     ; set non zero flag
     873/     3FC : BC                             phi   R12
     874/     3FD : C0 03 E4                       lbr   atof_lp2
     875/     400 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
     876/     401 : CA 04 18                       lbnz  atof_nz
     877/     404 : 98                             ghi   r8                    ; check for non-zero integer
     878/     405 : CA 04 18                       lbnz  atof_nz
     879/     408 : 88                             glo   r8
     880/     409 : CA 04 18                       lbnz  atof_nz
     881/     40C : 97                             ghi   r7
     882/     40D : CA 04 18                       lbnz  atof_nz
     883/     410 : 87                             glo   r7
     884/     411 : CA 04 18                       lbnz  atof_nz
     885/     414 : 60                             irx                         ; recover sign
     886/     415 : F0                             ldx
     887/     416 : B8                             phi   r8                    ; put in high of zero
     888/     417 : D5                             sep   RRET                  ; and return
     889/     418 : F8 00               atof_nz:   ldi   0                     ; setup dp
     890/     41A : BC                             phi   R12
     891/     41B : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
     892/     41C : FA 80                          ani   080h
     893/     41E : CA 04 68                       lbnz  atof_dn4              ; jump if so
     894/     421 : D4                             sep   RCALL                 ; shift answer left
     895/     422 : 00 22                          dw    fp_shl_1
     896/     424 : F8 04                          ldi   scratch>>8          ; point to bcd number
     897/     426 : BA                             phi   R10
     898/     427 : F8 EC                          ldi   255&scratch
     899/     429 : AA                             plo   R10
     900/     42A : F8 00                          ldi   0                     ; set high byte to zero
     901/     42C : 5A                             str   R10
     902/     42D : F8 04                          ldi   (scratch+15)>>8     ; point to last cell
     903/     42F : BA                             phi   R10
     904/     430 : F8 FB                          ldi   255&(scratch+15)
     905/     432 : AA                             plo   R10
     906/     433 : F8 00                          ldi   0                     ; set carry forward
     907/     435 : AE                             plo   R14
     908/     436 : F8 10                          ldi   16                    ; setup count
     909/     438 : AC                             plo   R12
     910/     439 : 8E                  atof_lp4:  glo   R14                    ; get carry
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 17 - 3/18/2013 17:34:10


     911/     43A : 52                             str   r2                    ; in memory for add
     912/     43B : 0A                             ldn   R10                    ; get bcd digit
     913/     43C : F4                             add                         ; add in carry
     914/     43D : 52                             str   r2                    ; place into memory
     915/     43E : 0A                             ldn   R10                    ; recover bcd digit
     916/     43F : F4                             add                         ; digit now doubled with carry
     917/     440 : 5A                             str   R10                    ; put it back
     918/     441 : FF 0A                          smi   10
     919/     443 : CB 04 4A                       lbnf  atof_no4              ; jump if below 10
     920/     446 : 5A                             str   R10                    ; store value - 10
     921/     447 : F8 01                          ldi   1                     ; carry set to 1
     922/     449 : C8                             lskp                        ; skip next instruction
     923/     44A : F8 00               atof_no4:  ldi   0                     ; reset carry
     924/     44C : AE                             plo   R14
     925/     44D : 2A                             dec   R10                    ; move to previous digit
     926/     44E : 2C                             dec   R12                    ; decrement digit count
     927/     44F : 8C                             glo   R12                    ; see if done
     928/     450 : CA 04 39                       lbnz  atof_lp4              ; jump if not
     929/     453 : F8 04                          ldi   scratch>>8	       ; point to first digit
     930/     455 : BA                             phi   R10
     931/     456 : F8 EC                          ldi   255&scratch
     932/     458 : AA                             plo   R10
     933/     459 : 0A                             ldn   R10                    ; retrieve it
     934/     45A : C2 04 61                       lbz   atof_nc4              ; jump if no carry
     935/     45D : 87                             glo   r7                    ; add in the carry
     936/     45E : F9 01                          ori   1
     937/     460 : A7                             plo   r7
     938/     461 : 9C                  atof_nc4:  ghi   R12                    ; increment dp
     939/     462 : FC 01                          adi   1
     940/     464 : BC                             phi   R12
     941/     465 : C0 04 1B                       lbr   atof_lp3              ; loop until full
     942/     468 : 9C                  atof_dn4:  ghi   R12                    ; get dp
     943/     469 : 52                             str   r2                    ; into memory
     944/     46A : F8 1F                          ldi   31                    ; need to subtract from 31
     945/     46C : F7                             sm
     946/     46D : FC 7F                          adi   127                   ; add in bias
     947/     46F : BD                             phi   R13                    ; set aside
     948/     470 : 97                             ghi   r7                    ; shift result down 8 bits
     949/     471 : A7                             plo   r7
     950/     472 : 88                             glo   r8
     951/     473 : B7                             phi   r7
     952/     474 : 98                             ghi   r8
     953/     475 : FE                             shl                         ; shift out high bit
     954/     476 : A8                             plo   r8
     955/     477 : 9D                             ghi   R13                    ; get bit 0 of exponent
     956/     478 : F6                             shr
     957/     479 : B8                             phi   r8                    ; bits 1-7 into high byte
     958/     47A : 88                             glo   r8                    ; get mantissa
     959/     47B : 76                             shrc                        ; shift in bit 0 of exponent
     960/     47C : A8                             plo   r8                    ; and write it
     961/     47D : 60                             irx                         ; point to sign
     962/     47E : 98                             ghi   r8                    ; high byte
     963/     47F : F1                             or                          ; set sign
     964/     480 : B8                             phi   r8                    ; done with base conversion
     965/     481 : 0F                             ldn   R15                    ; get next byte
     966/     482 : FF 65                          smi   'e'                   ; check for exponents
     967/     484 : C2 04 8D                       lbz   atof_exp
     968/     487 : 0F                             ldn   R15
     969/     488 : FF 45                          smi   'E'
     970/     48A : CA 04 EB                       lbnz  atof_end
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 18 - 3/18/2013 17:34:10


     971/     48D : 1F                  atof_exp:  inc   R15                    ; move past E
     972/     48E : 0F                             ldn   R15                    ; check for sign
     973/     48F : FF 2D                          smi   '-'
     974/     491 : C2 04 9E                       lbz   atof_n
     975/     494 : 0F                             ldn   R15
     976/     495 : FF 2B                          smi   '+'
     977/     497 : C2 04 9B                       lbz   atof_p
     978/     49A : 2F                             dec   R15                    ; positive if no sign
     979/     49B : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
     980/     49D : C8                             lskp
     981/     49E : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
     982/     4A0 : BC                             phi   R12                    ; place into sign variable
     983/     4A1 : 1F                             inc   R15                    ; move past sign
     984/     4A2 : F8 00                          ldi   0                     ; setup intial count
     985/     4A4 : AC                             plo   R12
     986/     4A5 : 0F                  atof_lp5:  ldn   R15                    ; get next byte
     987/     4A6 : D4                             sep   RCALL                 ; see if numeric
     988/     4A7 : 00 05                          dw    f_isnum
     989/     4A9 : CB 04 BB                       lbnf  atof_dn5              ; jump if not
     990/     4AC : 8C                             glo   R12                    ; make copy of exponent
     991/     4AD : 52                             str   r2
     992/     4AE : F6                             shr                         ; multiply by 2
     993/     4AF : F6                             shr                         ; by 4
     994/     4B0 : F4                             add                         ; by 5
     995/     4B1 : F6                             shr                         ; by 10
     996/     4B2 : 52                             str   r2                    ; put here for add
     997/     4B3 : 4F                             lda   R15                    ; recover number
     998/     4B4 : FF 30                          smi   '0'                   ; convert to binary
     999/     4B6 : F4                             add                         ; add with total
    1000/     4B7 : AC                             plo   R12                    ; copy back to R12
    1001/     4B8 : C0 04 A5                       lbr   atof_lp5              ; loop back until done reading exponent
    1002/     4BB : 8C                  atof_dn5:  glo   R12                    ; see if done
    1003/     4BC : C2 04 EB                       lbz   atof_end              ; jump if so
    1004/     4BF : 2C                             dec   R12                    ; otherwise decrement count
    1005/     4C0 : 8C                             glo   R12                    ; save count
    1006/     4C1 : 73                             stxd
    1007/     4C2 : 9C                             ghi   R12                    ; save sign
    1008/     4C3 : 73                             stxd
    1009/     4C4 : 8F                             glo   R15
    1010/     4C5 : 73                             stxd
    1011/     4C6 : 9F                             ghi   R15
    1012/     4C7 : 73                             stxd
    1013/     4C8 : F8 41                          ldi   041h                  ; setup 10.0
    1014/     4CA : BA                             phi   R10
    1015/     4CB : F8 20                          ldi   020h
    1016/     4CD : AA                             plo   R10
    1017/     4CE : F8 00                          ldi   0
    1018/     4D0 : B9                             phi   r9
    1019/     4D1 : A9                             plo   r9
    1020/     4D2 : 9C                             ghi   R12
    1021/     4D3 : C2 04 DC                       lbz   atof_div              ; jump if negative
    1022/     4D6 : D4                             sep   RCALL                 ; multiply by 10
    1023/     4D7 : 02 53                          dw    fp_mul
    1024/     4D9 : C0 04 DF                       lbr   atof_go5              ; clean up call
    1025/     4DC : D4                  atof_div:  sep   RCALL                 ; divice by 10
    1026/     4DD : 01 70                          dw    fp_div
    1027/     4DF : 60                  atof_go5:  irx                         ; recover variables
    1028/     4E0 : 72                             ldxa
    1029/     4E1 : BF                             phi   R15
    1030/     4E2 : 72                             ldxa
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 19 - 3/18/2013 17:34:10


    1031/     4E3 : AF                             plo   R15
    1032/     4E4 : 72                             ldxa
    1033/     4E5 : BC                             phi   R12
    1034/     4E6 : F0                             ldx
    1035/     4E7 : AC                             plo   R12
    1036/     4E8 : C0 04 BB                       lbr   atof_dn5              ; loop until exponent is zero
    1037/     4EB : D5                  atof_end:  sep   RRET
    1038/     4EC : 00 00               scratch:   db	00,00
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 20 - 3/18/2013 17:34:10


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                      9C C |  ADD_A2NZ :                      AD C |
 ADD_FNL :                      144 C |  ADD_LP1 :                       E7 C |
 ADD_LP1DN :                     FC C |  ADD_NM :                       10B C |
 ADD_NO :                       12D C |  ADD_NS :                        D5 C |
 ADD_NX :                       163 C |  ADD_NZ :                       155 C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                     4DC C |
 ATOF_DN3 :                     400 C |  ATOF_DN4 :                     468 C |
 ATOF_DN5 :                     4BB C |  ATOF_END :                     4EB C |
 ATOF_EXP :                     48D C |  ATOF_GO1 :                     388 C |
 ATOF_GO5 :                     4DF C |  ATOF_LP1 :                     38E C |
 ATOF_LP2 :                     3E4 C |  ATOF_LP3 :                     41B C |
 ATOF_LP4 :                     439 C |  ATOF_LP5 :                     4A5 C |
 ATOF_LPX :                     3CF C |  ATOF_N :                       49E C |
 ATOF_NC4 :                     461 C |  ATOF_NDP :                     3C6 C |
 ATOF_NM :                      37E C |  ATOF_NO1 :                     3BF C |
 ATOF_NO4 :                     44A C |  ATOF_NZ :                      418 C |
 ATOF_P :                       49B C | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                   3/18/2013 - |
 DIV_A1NZ :                     181 C |  DIV_A2NZ :                     19F C |
 DIV_GO :                       1F6 C |  DIV_GO1 :                      1E3 C |
 DIV_LP :                       1D0 C |  DIV_NOPE :                     231 C |
 DIV_Z :                        243 C |  FAILS :                         11 C |
*FALSE :                          0 - |  FP_ADD :                        83 C |
 FP_ADD_12 :                     2F C |  FP_ATOF :                      36A C |
 FP_DIV :                       170 C |  FP_GETEXP :                     70 C |
 FP_GETSGN :                     7C C |  FP_MUL :                       253 C |
 FP_SC_CLN :                     61 C |  FP_SC_UP :                      51 C |
 FP_SHL_1 :                      22 C |  FP_SHR_1 :                      15 C |
 FP_SHR_FD :                     44 C | *FP_SUB :                       169 C |
*FULLPMMU :                       1 - |  F_ISNUM :                        5 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  LCC1802INIT :                    3 C |
*LISTON :                         1 - | *MACEXP :                         0 - |
*MEMADDR :                        E - | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MUL_DN :                       312 C |
 MUL_GO1 :                      29A C |  MUL_LP1 :                      28A C |
 MUL_LP2 :                      325 C |  MUL_LP2A :                     338 C |
 MUL_LP3 :                      341 C |  MUL_LP3A :                     354 C |
 MUL_LP4 :                      365 C |  MUL_NO :                       2E7 C |
 MUL_NXT1 :                     33C C | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
*PASSES :                         E C | *R0 :                             0 - |
*R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - |  R14 :                            E - |
 R15 :                            F - |  R2 :                             2 - |
*R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
*REGARG1 :                        C - | *REGARG2 :                        D - |
*RELAXED :                        1 - | *RETADDR :                        6 - |
*RETVAL :                         F - | *RL0 :                            1 - |
 AS V1.42 Beta [Bld 87] - source file fp.asm - page 21 - 3/18/2013 17:34:10


*RL10 :                           B - | *RL12 :                           D - |
*RL8 :                            9 - | *RP1P2 :                          D - |
*RPC :                            3 - |  RRET :                           5 - |
*RT1 :                            8 - | *RT2 :                            9 - |
 SCRATCH :                      4EC C | *SP :                             2 - |
*TIME :                    17:34:10 - | *TRUE :                           1 - |
*VERSION :                     142F - |

    127 symbols
     49 unused symbols

 AS V1.42 Beta [Bld 87] - source file fp.asm - page 22 - 3/18/2013 17:34:10


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     79 macros

 AS V1.42 Beta [Bld 87] - source file fp.asm - page 23 - 3/18/2013 17:34:10


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1852 lines source file
      2 passes
      0 errors
      0 warnings
