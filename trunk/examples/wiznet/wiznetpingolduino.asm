; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Thu May 23 16:51:58 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_PIN4:
	db 0
_enablechip:
	reserve 4
;void enablechip () { //pull cs low
;  digitalWrite(oldss,LOW);
	ldaD R12,4; reg:acon
	ld2z R13
	Ccall _digitalWrite
;}
L1:
	release 4
	Cretn

_disablechip:
	reserve 4
; void disablechip () {
;  digitalWrite(oldss,HIGH);
	ldaD R12,4; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;}
L2:
	release 4
	Cretn

_xferspi:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
;unsigned char xferspi(unsigned char value){
;  for(i=0;i<8;i++){
	ld2z R1
L4:
;    digitalWrite(oldmosi,(value&0x80));      //by setting mosi for each bit
	ldaD R12,7; reg:acon
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _digitalWrite
;    value=(value<<1)|digitalRead(oldmiso);;
	ldaD R12,15; reg:acon
	Ccall _digitalRead
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R10,R7
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	shl2I R10,1
	alu2 R11,R10,R11,or,or
	cpy1 R7,R11;LOADU1(reg)
;    digitalWrite(oldsck,HIGH);              //then pulsing the clock
	ldaD R12,5; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;    digitalWrite(oldsck,LOW);
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;  }
L5:
;  for(i=0;i<8;i++){
	incm R1,1
	jcI2I r1,8,lbnf,L4  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  return value;
	cpy1 R15,R7
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
L3:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_SPI_Write:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+8); ASGNU1
;{
;  enablechip();
	Ccall _enablechip
;  value=xferspi(WIZNET_WRITE_OPCODE);
	ldaD R12,240; reg:acon
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi((addr & 0xFF00)>>8);
	ld2 RL10,'O',sp,(0+8)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(addr & 0x00FF);
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(data);
	ld1 R12,'O',sp,(2+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  disablechip();
	Ccall _disablechip
;}
L8:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_SPI_Read:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(8); flag1 
;{
;  enablechip();
	Ccall _enablechip
;  value=xferspi(WIZNET_READ_OPCODE);
	ldaD R12,15; reg:acon
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi((addr & 0xFF00)>>8);
	ld2 RL10,'O',sp,(0+8)
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(addr & 0x00FF);
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  value=xferspi(0x00);
	ld2z R12
	Ccall _xferspi
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R7,R11;LOADU1(reg)
;  disablechip();
	Ccall _disablechip
;  return(value);
	cpy1 R15,R7
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
L9:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

L11:
	db 222
	db 173
	db 190
	db 239
	db 254
	db 237
L12:
	db 192
	db 168
	db 1
	db 179
L13:
	db 255
	db 255
	db 255
	db 0
L14:
	db 192
	db 168
	db 1
	db 1
_W5100_Init:
	reserve 62
;{
;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
	ldA2 R11,'O',sp,(-8+64); reg:addr
	ldaD R8,L11; reg:acon
	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
;  unsigned char ip_addr[] = {192,168,1,179};
	ldA2 R11,'O',sp,(-12+64); reg:addr
	ldaD R8,L12; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char sub_mask[] = {255,255,255,0};
	ldA2 R11,'O',sp,(-16+64); reg:addr
	ldaD R8,L13; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char gtw_addr[] = {192,168,1,1};
	ldA2 R11,'O',sp,(-20+64); reg:addr
	ldaD R8,L14; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  SPI_Write(MR,0x80);            // MR = 0b10000000;
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading MR: %d\n",SPI_Read(MR));
	ld2z R12
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L15; reg:acon
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _printf
;  printf("Reading RTR: %d\n",(SPI_Read(RTR)<<8)+SPI_Read(RTR+1));
	ldaD R12,23; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-22+64)
	ldaD R12,24; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L16; reg:acon
	ld2 R10,'O',sp,(-22+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	shl2I R10,8
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	alu2 R13,R10,R11,add,adc; ADDI2(r,r)
	Ccall _printf
;  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],
	ldaD R12,L17; reg:acon
	ld1 R13,'O',sp,(-20+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-19+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-18+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-17+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(GAR + 0,gtw_addr[0]);
	ldaD R12,1; reg:acon
	ld1 R13,'O',sp,(-20+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 1,gtw_addr[1]);
	ldaD R12,2; reg:acon
	ld1 R13,'O',sp,(-19+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 2,gtw_addr[2]);
	ldaD R12,3; reg:acon
	ld1 R13,'O',sp,(-18+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 3,gtw_addr[3]);
	ldaD R12,4; reg:acon
	ld1 R13,'O',sp,(-17+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),
	ldaD R12,1; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-24+64)
	ldaD R12,2; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-26+64)
	ldaD R12,3; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-28+64)
	ldaD R12,4; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L24; reg:acon
	ld2 R10,'O',sp,(-24+64) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-26+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-28+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Setting Source Address %x:%x:%x:%x:%x:%x\n",mac_addr[0],mac_addr[1],
	ldaD R12,L25; reg:acon
	ld1 R13,'O',sp,(-8+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-7+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-6+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-5+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	ld1 R11,'O',sp,(-4+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(10); arg+f**
	ld1 R11,'O',sp,(-3+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;  SPI_Write(SAR + 0,mac_addr[0]);
	ldaD R12,9; reg:acon
	ld1 R13,'O',sp,(-8+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 1,mac_addr[1]);
	ldaD R12,10; reg:acon
	ld1 R13,'O',sp,(-7+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 2,mac_addr[2]);
	ldaD R12,11; reg:acon
	ld1 R13,'O',sp,(-6+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 3,mac_addr[3]);
	ldaD R12,12; reg:acon
	ld1 R13,'O',sp,(-5+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 4,mac_addr[4]);
	ldaD R12,13; reg:acon
	ld1 R13,'O',sp,(-4+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 5,mac_addr[5]);
	ldaD R12,14; reg:acon
	ld1 R13,'O',sp,(-3+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading SAR: %x:%x:%x:%x:%x:%x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),
	ldaD R12,9; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-30+64)
	ldaD R12,10; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-32+64)
	ldaD R12,11; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-34+64)
	ldaD R12,12; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-36+64)
	ldaD R12,13; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-38+64)
	ldaD R12,14; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L36; reg:acon
	ld2 R10,'O',sp,(-30+64) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-32+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-34+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	ld2 R10,'O',sp,(-36+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(8); arg+f**
	ld2 R10,'O',sp,(-38+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(10); arg+f**
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;  printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],
	ldaD R12,L37; reg:acon
	ld1 R13,'O',sp,(-16+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-15+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-14+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-13+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SUBR + 0,sub_mask[0]);
	ldaD R12,5; reg:acon
	ld1 R13,'O',sp,(-16+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 1,sub_mask[1]);
	ldaD R12,6; reg:acon
	ld1 R13,'O',sp,(-15+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 2,sub_mask[2]);
	ldaD R12,7; reg:acon
	ld1 R13,'O',sp,(-14+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 3,sub_mask[3]);
	ldaD R12,8; reg:acon
	ld1 R13,'O',sp,(-13+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),
	ldaD R12,5; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-40+64)
	ldaD R12,6; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-42+64)
	ldaD R12,7; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-44+64)
	ldaD R12,8; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L44; reg:acon
	ld2 R10,'O',sp,(-40+64) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-42+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-44+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],
	ldaD R12,L45; reg:acon
	ld1 R13,'O',sp,(-12+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(-11+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	ld1 R11,'O',sp,(-10+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(6); arg+f**
	ld1 R11,'O',sp,(-9+64)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  SPI_Write(SIPR + 0,ip_addr[0]);
	ldaD R12,15; reg:acon
	ld1 R13,'O',sp,(-12+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 1,ip_addr[1]);
	ldaD R12,16; reg:acon
	ld1 R13,'O',sp,(-11+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 2,ip_addr[2]);
	ldaD R12,17; reg:acon
	ld1 R13,'O',sp,(-10+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 3,ip_addr[3]);
	ldaD R12,18; reg:acon
	ld1 R13,'O',sp,(-9+64)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),
	ldaD R12,15; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-46+64)
	ldaD R12,16; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-48+64)
	ldaD R12,17; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-50+64)
	ldaD R12,18; reg:acon
	Ccall _SPI_Read
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L52; reg:acon
	ld2 R10,'O',sp,(-46+64) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-48+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-50+64) ;reg:INDIRI2(addr)
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;  printf("Setting Wiznet RMSR and TMSR\n\n");
	ldaD R12,L53; reg:acon
	Ccall _printf
;  SPI_Write(RMSR,0x55);
	ldaD R12,26; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  SPI_Write(TMSR,0x55);
	ldaD R12,27; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  printf("Done Wiznet W5100 Initialization!\n");
	ldaD R12,L54; reg:acon
	Ccall _printf
;}
L10:
	release 62
	Cretn

_setup:
	reserve 4
;void setup(){
;  printf("Wiznet 5100 pingmastery begins here!\n");
	ldaD R12,L56; reg:acon
	Ccall _printf
;  printf("Wiznet 5100 initialization\n");
	ldaD R12,L57; reg:acon
	Ccall _printf
;        W5100_Init();
	Ccall _W5100_Init
;}
L55:
	release 4
	Cretn

_loop:
;void loop(){
;}
L58:
	Cretn

_main:
	reserve 4
;void main(void){
;	printf("miso is %d\n",digitalRead(oldmiso));
	ldaD R12,15; reg:acon
	Ccall _digitalRead
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L60; reg:acon
	cpy2 R13,R11 ;LOADI2(reg)
	Ccall _printf
;	setup();
	Ccall _setup
;	printf("loop..");
	ldaD R12,L61; reg:acon
	Ccall _printf
;	delay(1000);
	ldaD R12,1000; reg:acon
	Ccall _delay
;  for(;;){
L62:
;	  loop();
	Ccall _loop
;  }
;  for(;;){
	lbr L62
L59:
	release 4
	Cretn

_delay:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R1,1; reg:acon
	lbr L70
L67:
;		oneMs();
	Ccall _oneMs
;	}
L68:
;	for (i=1;i!=howlong;i++){
	incm R1,1
L70:
	jneU2 r1,r7,L67; NE
;}
L66:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L71:
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L77
L74:
L75:
	incm R13,1
	incm R12,1
L77:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L74; NE 0
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L73:
	release 2
	Cretn

_printstr:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L80
L79:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L80:
	ld1 R11,'O',R7,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L79; NE 0
;}
L78:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_ftoa:
	reserve 130; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked&floaty
	ld2 R7,'O',sp,(6+142); reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R11,'O',sp,(4+142);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-54+142); ASGNP2
;   if (flt < 0.0) {
	ld4 RL10,'D',(L85),0;INDIRF4(addr)
	jcF4 RL0,RL10,lbdf,L83;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      flt *= -1.0 ;
	ld4 RL8,'D',(L86),0;INDIRF4(addr)
	cpy4 RL10,RL0; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL0,RL8; LOADU4(reg)
;   } else {
	lbr L84
L83:
;      if (use_leading_plus) {
	lbr L87
;         *output++ = '+' ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L87:
;   }
L84:
;   if (dec_digits < 8) {
	jcI2I r7,8,lbdf,L89; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL0; LOADU4(reg)
	cpy2 R11,R7
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL0,RL8; LOADU4(reg)
;   }
L89:
;	mult=mult_nums[dec_digits];
	cpy2 R11,R7
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(-72+142); ASGNF4(addr,reg)
	ld4 RL8,'D',(L94),0;INDIRF4(addr)
	st4 RL8,'O',sp,(-68+142); ASGNF4(addr,reg)
	jcF4 RL10,RL8,lbnf,L92;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
	cpy4 RL8,RL10; LOADU4(reg)
	ld4 RL10,'O',sp,(-68+142);INDIRF4(addr)
	cpy4 RL10,RL10; LOADU4(reg)
	Ccall fp_sub ;SUBF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	ldI4 RL8,0x80000000 ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,add,adc
	st4 RL10,'O',sp,(-64+142); ASGNU4
	lbr L93
L92:
	ld4 RL10,'O',sp,(-72+142);INDIRF4(addr)
	cpy4 RL8,RL10; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-64+142); ASGNU4
L93:
	ld4 RL10,'O',sp,(-64+142);reg:  INDIRU4(addr)
	st4 RL10,'O',sp,(-60+142); ASGNU4
;   wholeNum = (unsigned long) flt;
	ld4 RL10,'D',(L94),0;INDIRF4(addr)
	jcF4 RL0,RL10,lbnf,L96;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
	cpy4 RL8,RL0; LOADU4(reg)
	cpy4 RL10,RL10; LOADU4(reg)
	Ccall fp_sub ;SUBF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	ldI4 RL8,0x80000000 ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,add,adc
	st4 RL10,'O',sp,(-76+142); ASGNU4
	lbr L97
L96:
	cpy4 RL8,RL0; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-76+142); ASGNU4
L97:
	ld4 RL10,'O',sp,(-76+142);reg:  INDIRU4(addr)
	st4 RL10,'O',sp,(-8+142); ASGNU4
;   decimalNum = (unsigned long) ((flt - wholeNum) * mult);
	ld4 RL10,'D',(L101),0;INDIRF4(addr)
	st4 RL10,'O',sp,(-84+142); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
	st4 RL8,'O',sp,(-92+142); ASGNU4
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(-86+142); ASGNU2(addr,reg)*
	ld4 RL10,'O',sp,(-60+142);reg:  INDIRU4(addr)
	st4 RL10,'O',sp,(-96+142); ASGNU4
	cpy4 RL8,RL0; LOADU4(reg)
	st4 RL8,'O',sp,(-100+142); ASGNF4(addr,reg)
	ld4 RL10,'O',sp,(-84+142);INDIRF4(addr)
	cpy4 RL8,RL10; LOADU4(reg)
	st4 RL8,'O',sp,(-104+142); ASGNF4(addr,reg)
	ld4 RL10,'O',sp,(-92+142);reg:  INDIRU4(addr)
	shrU4I RL10,1
	cpy4 RL8,RL10; LOADI4*
	ccall cvif4; CVIF4(reg) convert long to float
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-104+142);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	st4 RL8,'O',sp,(-108+142); ASGNF4(addr,reg)
	ld2 R11,'O',sp,(-86+142); reg:INDIRU2(addr)
	ld4 RL8,'O',sp,(-92+142);reg:  INDIRU4(addr)
	alu4 RL10,RL8,R11,and,and
	cpy4 RL8,RL10; LOADI4*
	ccall cvif4; CVIF4(reg) convert long to float
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-108+142);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-100+142);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	st4 RL8,'O',sp,(-112+142); ASGNF4(addr,reg)
	ld4 RL10,'O',sp,(-84+142);INDIRF4(addr)
	cpy4 RL8,RL10; LOADU4(reg)
	st4 RL8,'O',sp,(-116+142); ASGNF4(addr,reg)
	ld4 RL10,'O',sp,(-96+142);reg:  INDIRU4(addr)
	shrU4I RL10,1
	cpy4 RL8,RL10; LOADI4*
	ccall cvif4; CVIF4(reg) convert long to float
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-116+142);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	st4 RL8,'O',sp,(-120+142); ASGNF4(addr,reg)
	ld2 R11,'O',sp,(-86+142); reg:INDIRU2(addr)
	ld4 RL8,'O',sp,(-96+142);reg:  INDIRU4(addr)
	alu4 RL10,RL8,R11,and,and
	cpy4 RL8,RL10; LOADI4*
	ccall cvif4; CVIF4(reg) convert long to float
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-120+142);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-112+142);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-128+142); ASGNF4(addr,reg)
	ld4 RL8,'D',(L94),0;INDIRF4(addr)
	st4 RL8,'O',sp,(-124+142); ASGNF4(addr,reg)
	jcF4 RL10,RL8,lbnf,L99;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
	cpy4 RL8,RL10; LOADU4(reg)
	ld4 RL10,'O',sp,(-124+142);INDIRF4(addr)
	cpy4 RL10,RL10; LOADU4(reg)
	Ccall fp_sub ;SUBF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	ldI4 RL8,0x80000000 ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,add,adc
	st4 RL10,'O',sp,(-80+142); ASGNU4
	lbr L100
L99:
	ld4 RL10,'O',sp,(-128+142);INDIRF4(addr)
	cpy4 RL8,RL10; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-80+142); ASGNU4
L100:
	ld4 RL10,'O',sp,(-80+142);reg:  INDIRU4(addr)
	st4 RL10,'O',sp,(-52+142); ASGNU4
;   idx = 0 ;
	ld2z R11
	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
	lbr L103
L102:
;   while (wholeNum != 0) {
;      tbfr[idx++] = '0' + (wholeNum % 10) ;
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	st2 R11,'O',sp,(-130+142); ASGNU2(addr,reg)*
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
	ldI4 RL10,10 ;loading a long unsigned constant
	Ccall _modu4
	cpy4 RL10,RL8; LOADU4(reg)
	ldA2 R9,'O',sp,(-48+142); reg:addr
	ld2 R8,'O',sp,(-130+142); reg:INDIRU2(addr)
	alu2 R9,R8,R9,add,adc
	st2 R9,'O',sp,(-132+142); ASGNP2
	ldI4 RL8,48 ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,add,adc
	cpy1 R11,RL10;LOADU1(reg)
	ld2 R10,'O',sp,(-132+142);reg:  INDIRP2(addr)
	str1 R11,R10; ASGNU1(indaddr,reg)
;      wholeNum /= 10 ;
	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
	ldI4 RL10,10 ;loading a long unsigned constant
	Ccall _divu4
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-8+142); ASGNU4
;   }
L103:
;   while (wholeNum != 0) {
	ld4 RL10,'O',sp,(-8+142);reg:  INDIRU4(addr)
	ldI4 RL8,0 ;loading a long unsigned constant
	jneU4 rL10,rL8,L102; NE
;   if (idx == 0) {
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	jnzU2 r11,L108; NE 0
;      *output++ = '0' ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ldaD R10,48; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;   } else {
	lbr L106
L107:
;      while (idx > 0) {
;         *output++ = tbfr[idx-1] ;  //lint !e771
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ld2 R10,'O',sp,(-4+142); reg:INDIRU2(addr)
	decm R10,1
	ldA2 R9,'O',sp,(-48+142); reg:addr
	alu2 R10,R10,R9,add,adc
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;         idx-- ;
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	decm R11,1
	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
;      }
L108:
;      while (idx > 0) {
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	jnzU2 r11,L107; NE 0
;   }
L106:
;   if (dec_digits > 0) {
	jeqU2I r7,0,L110;EQU2(reg,con)
;      *output++ = '.' ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      idx = 0 ;
	ld2z R11
	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
	lbr L113
L112:
;      while (decimalNum != 0) {
;         tbfr[idx++] = '0' + (decimalNum % 10) ;
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	st2 R11,'O',sp,(-130+142); ASGNU2(addr,reg)*
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
	ld4 RL8,'O',sp,(-52+142);reg:  INDIRU4(addr)
	ldI4 RL10,10 ;loading a long unsigned constant
	Ccall _modu4
	cpy4 RL10,RL8; LOADU4(reg)
	ldA2 R9,'O',sp,(-48+142); reg:addr
	ld2 R8,'O',sp,(-130+142); reg:INDIRU2(addr)
	alu2 R9,R8,R9,add,adc
	st2 R9,'O',sp,(-132+142); ASGNP2
	ldI4 RL8,48 ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,add,adc
	cpy1 R11,RL10;LOADU1(reg)
	ld2 R10,'O',sp,(-132+142);reg:  INDIRP2(addr)
	str1 R11,R10; ASGNU1(indaddr,reg)
;         decimalNum /= 10 ;
	ld4 RL8,'O',sp,(-52+142);reg:  INDIRU4(addr)
	ldI4 RL10,10 ;loading a long unsigned constant
	Ccall _divu4
	cpy4 RL10,RL8; LOADU4(reg)
	st4 RL10,'O',sp,(-52+142); ASGNU4
;      }
L113:
;      while (decimalNum != 0) {
	ld4 RL10,'O',sp,(-52+142);reg:  INDIRU4(addr)
	ldI4 RL8,0 ;loading a long unsigned constant
	jneU4 rL10,rL8,L112; NE
	lbr L116
L115:
;      while (idx < dec_digits) {
;         tbfr[idx++] = '0' ;
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
	ldA2 R10,'O',sp,(-48+142); reg:addr
	alu2 R11,R11,R10,add,adc
	ldaD R10,48; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L116:
;      while (idx < dec_digits) {
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	jcU2 r11,r7,lbnf,L115; LT=lbnf i.e. subtract B from A and jump if borrow 
;      if (idx == 0) {
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	jnzU2 r11,L121; NE 0
;         *output++ = '0' ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ldaD R10,48; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      } else {
	lbr L119
L120:
;         while (idx > 0) {
;            *output++ = tbfr[idx-1] ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-54+142); ASGNP2
	ld2 R10,'O',sp,(-4+142); reg:INDIRU2(addr)
	decm R10,1
	ldA2 R9,'O',sp,(-48+142); reg:addr
	alu2 R10,R10,R9,add,adc
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;            idx-- ;
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	decm R11,1
	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
;         }
L121:
;         while (idx > 0) {
	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
	jnzU2 r11,L120; NE 0
;      }
L119:
;   }
L110:
;   *output = 0 ;
	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;   return outbfr;
	ld2 R15,'O',sp,(4+142);reg:  INDIRP2(addr)
L82:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 130; release room for local variables 
	Cretn

_itoa:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L124; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11 ;LOADU2(reg)*
;	} else{
	lbr L125
L124:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R1,R11 ;LOADU2(reg)*
;	}
L125:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L127
L126:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R0
	lbr L132
L129:
L130:
	incm R0,1
	alu2 R1,R1,R7,sm,smb
L132:
	jcU2 r1,r7,lbdf,L129 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
	jnzU2 r11,L136; NE 0
	jnzU2 r0,L136; NE 0
	jneU2I r7,1,L133; NE
L136:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R0,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldaD R11,121; reg:acon
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;		}
L133:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R7,R11 ;LOADU2(reg)*
;	}
L127:
;	while(k>0){
	jnzU2 r7,L126; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L123:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_ltoa:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L138; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L138:
;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R7 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
L137:
	release 6; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L140:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L141:
	release 18
	Cretn

_printflt:
	reserve 24
	st2 r12,'O',sp,(26); flag1 
	st2 r13,'O',sp,(28); flag1 
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,6));
	ld4 Rp1p2,'O',sp,(0+26);INDIRF4(addr)
	ldA2 R11,'O',sp,(-18+26); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,6; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L142:
	release 24
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L144; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L145
L144:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L145:
;}
L143:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L146:
	release 4
	Cretn

_printf:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L149
L148:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L151;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L152
L151:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-5+16)
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jcI2I r11,99,lbnf,L172  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r11,108,lbnf,L173; GT reverse  the subtraction
	shl2I R11,1
	ld2 R11,'O',R11,(L174-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L174:
	dw L158
	dw L156
	dw L153
	dw L167
	dw L153
	dw L153
	dw L156
	dw L153
	dw L153
	dw L160
L172:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,88,L159;EQI2(reg,con)
	lbr L153
L173:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,115; reg:acon
	jeqI2 r11,r10,L157; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L153; LT=lbnf i.e. subtract B from A and jump if borrow 
L176:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,120,L159;EQI2(reg,con)
	lbr L153
L156:
;					printint(*this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L154
L157:
;					printstr((char*) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L154
L158:
;					putc((unsigned int) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L154
L159:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L154
L160:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L161; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L163; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L163:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L165; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L166
L165:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L166:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L154
L161:
L167:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L168; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L170; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L170:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R1,4
;						argslot+=2;
	incm R0,2
;						break;
	lbr L154
L168:
L153:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L154:
;		} //%
L152:
;	} //while
L149:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L148; NE 0
;} //prtf
L147:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L178; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L179:
;	while(1);
L180:
	lbr L179
;}
L177:
	release 4
	Cretn

_memcmp:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R1
;    p1 = (unsigned char *)Ptr1;
	cpy2 R0,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	st2 R13,'O',sp,(-4+10); ASGNP2
	lbr L184
L183:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
	cpy2 R9,R10
	incm R9,1
	st2 R9,'O',sp,(-4+10); ASGNP2
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R1,R11,R10,sm,smb
;    }
L184:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jeqU2I r11,0,L186;EQU2(reg,con)
	jzU2 r1,L183; EQ 0
L186:
;    return v;
	cpy2 R15,R1 ;LOADI2(reg)
L182:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_memcpy:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R1,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L189
L188:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	incm R0,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L189:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L188; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L187:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_memset:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R1,R12 ;LOADP2(reg)
	lbr L193
L192:
;        *p++ = (unsigned char)c;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L193:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L192; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L191:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

L178:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L101:
	dd 0x40000000
	align 4
L94:
	dd 0x4f000000
	align 4
L86:
	dd 0xbf800000
	align 4
L85:
	dd 0x0
L61:
	db 108
	db 111
	db 111
	db 112
	db 46
	db 46
	db 0
L60:
	db 109
	db 105
	db 115
	db 111
	db 32
	db 105
	db 115
	db 32
	db 37
	db 100
	db 10
	db 0
L57:
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 53
	db 49
	db 48
	db 48
	db 32
	db 105
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 10
	db 0
L56:
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 53
	db 49
	db 48
	db 48
	db 32
	db 112
	db 105
	db 110
	db 103
	db 109
	db 97
	db 115
	db 116
	db 101
	db 114
	db 121
	db 32
	db 98
	db 101
	db 103
	db 105
	db 110
	db 115
	db 32
	db 104
	db 101
	db 114
	db 101
	db 33
	db 10
	db 0
L54:
	db 68
	db 111
	db 110
	db 101
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 87
	db 53
	db 49
	db 48
	db 48
	db 32
	db 73
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 33
	db 10
	db 0
L53:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 82
	db 77
	db 83
	db 82
	db 32
	db 97
	db 110
	db 100
	db 32
	db 84
	db 77
	db 83
	db 82
	db 10
	db 10
	db 0
L52:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 73
	db 80
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L45:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 73
	db 80
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L44:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 85
	db 66
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L37:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 117
	db 98
	db 32
	db 77
	db 97
	db 115
	db 107
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L36:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 83
	db 65
	db 82
	db 58
	db 32
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 10
	db 10
	db 0
L25:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 83
	db 111
	db 117
	db 114
	db 99
	db 101
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 58
	db 37
	db 120
	db 10
	db 0
L24:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 71
	db 65
	db 82
	db 58
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L17:
	db 83
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 71
	db 97
	db 116
	db 101
	db 119
	db 97
	db 121
	db 32
	db 65
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 0
L16:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 82
	db 84
	db 82
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
L15:
	db 82
	db 101
	db 97
	db 100
	db 105
	db 110
	db 103
	db 32
	db 77
	db 82
	db 58
	db 32
	db 37
	db 100
	db 10
	db 0
	include lcc1802Epilofl.inc
	include LCC1802fp.inc
	include IO1802.inc
