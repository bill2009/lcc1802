 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 1 - 6/18/2013 11:03:18


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Tue Jun 18 11:03:02 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  840/       0 :                     	listing	on
(1)  841/       0 : C0 25 65            	lbr	lcc1802Init
(1)  842/       3 :                     	
(1)  843/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _ledmode:
      15/       4 : 00 03               	dw 3
      16/       6 :                     _reqtype:
      17/       6 : 00 03               	dw 3
      18/       8 :                     _cmdip:
      19/       8 : 00 B6               	dw 182
      20/       A :                     _SPI_Write:
      21/       A : (MACRO)             	reserve 4
      22/       E : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      23/      1B : (MACRO)             	st2 r13,'O',sp,(8); flag1 
      24/      28 : (MACRO)             	ld2 R11,'O',sp,(2+6) ;reg:INDIRI2(addr)
      25/      34 : (MACRO)             	st1 R11,'O',sp,(2+6); ASGNU1
      26/      3E :                     ;{
      27/      3E :                     ;  enablewiz();   			// Activate the CS pin
      28/      3E :                     ;  xferspif2(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
      29/      3E : 7A                  	req
      30/      3F : (MACRO)             	ldaD R12,240; reg:acon
      31/      45 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      32/      48 :                     ;  xferspif2(addr >>8); 		// Send Wiznet W5100 Address High Byte
      33/      48 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      34/      54 : (MACRO)             	cpy2 R12,R11
      35/      58 : 9C                  	ghi	R12	;opt2
      36/      59 : AC                  	plo	R12
      37/      5A : F8 00               	ldi	0
      38/      5C : BC                  	phi	R12
      39/      5D : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      40/      60 :                     ;  xferspif2(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
      41/      60 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
      42/      6C : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      43/      74 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      44/      77 :                     ;  xferspif2(data);			// Send the data byte
      45/      77 : (MACRO)             	ld1 R11,'O',sp,(2+6)
      46/      81 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      47/      84 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
      48/      88 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      49/      8B :                     ;  disablewiz();				// make CS pin not active
      50/      8B : 7B                  	seq
      51/      8C :                     ;}
      52/      8C :                     L1:
      53/      8C : (MACRO)             	release 4
      54/      90 : (MACRO)             	Cretn
      55/      91 :                     
      56/      91 :                     _SPI_Read:
      57/      91 : (MACRO)             	reserve 6
      58/      97 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 2 - 6/18/2013 11:03:18


      59/      A4 :                     ;{
      60/      A4 :                     ;  enablewiz();   		// Activate the CS pin
      61/      A4 :                     ;  xferspif2(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
      62/      A4 : 7A                  	req
      63/      A5 : (MACRO)             	ldaD R12,15; reg:acon
      64/      AB : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      65/      AE :                     ;  xferspif2(addr >>8);	// Send Wiznet W5100 Address High Byte
      66/      AE : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      67/      BA : (MACRO)             	cpy2 R12,R11
      68/      BE : 9C                  	ghi	R12	;opt2
      69/      BF : AC                  	plo	R12
      70/      C0 : F8 00               	ldi	0
      71/      C2 : BC                  	phi	R12
      72/      C3 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      73/      C6 :                     ;  xferspif2(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
      74/      C6 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
      75/      D2 : (MACRO)             	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
      76/      DA : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      77/      DD :                     ;  value=xferspif2(0x00);	// Send Dummy transmission to read the data
      78/      DD : (MACRO)             	ld2z R12
      79/      E1 : (MACRO)             	Ccall _xferspif2;CALLU2(ar)*
      80/      E4 : (MACRO)             	cpy1 R11,R15;LOADU1(reg)
      81/      E6 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
      82/      F0 :                     ;  disablewiz();			// make CS pin inactive
      83/      F0 :                     ;  return(value);
      84/      F0 : 7B                  	seq
      85/      F1 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
      86/      FB : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
      87/      FE :                     L4:
      88/      FE : (MACRO)             	release 6
      89/     104 : (MACRO)             	Cretn
      90/     105 :                     
      91/     105 :                     L8:
      92/     105 : DE                  	db 222
      93/     106 : AD                  	db 173
      94/     107 : BE                  	db 190
      95/     108 : EF                  	db 239
      96/     109 : FE                  	db 254
      97/     10A : ED                  	db 237
      98/     10B :                     L9:
      99/     10B : C0                  	db 192
     100/     10C : A8                  	db 168
     101/     10D : 01                  	db 1
     102/     10E : B6                  	db 182
     103/     10F :                     L10:
     104/     10F : FF                  	db 255
     105/     110 : FF                  	db 255
     106/     111 : FF                  	db 255
     107/     112 : 00                  	db 0
     108/     113 :                     L11:
     109/     113 : C0                  	db 192
     110/     114 : A8                  	db 168
     111/     115 : 01                  	db 1
     112/     116 : 01                  	db 1
     113/     117 :                     _W5100_Init:
     114/     117 : (MACRO)             	reserve 34
     115/     121 :                     ;void W5100_Init(void){// Ethernet Setup
     116/     121 :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     117/     121 : (MACRO)             	ldA2 R11,'O',sp,(-8+36); reg:addr
     118/     129 : (MACRO)             	ldaD R8,L8; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 3 - 6/18/2013 11:03:18


     119/     12F : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     120/     144 :                     ;  unsigned char ip_addr[] = {192,168,1,182};
     121/     144 : (MACRO)             	ldA2 R11,'O',sp,(-12+36); reg:addr
     122/     14C : (MACRO)             	ldaD R8,L9; reg:acon
     123/     152 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     124/     167 :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     125/     167 : (MACRO)             	ldA2 R11,'O',sp,(-16+36); reg:addr
     126/     16F : (MACRO)             	ldaD R8,L10; reg:acon
     127/     175 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     128/     18A :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     129/     18A : (MACRO)             	ldA2 R11,'O',sp,(-20+36); reg:addr
     130/     192 : (MACRO)             	ldaD R8,L11; reg:acon
     131/     198 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     132/     1AD :                     ;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
     133/     1AD : (MACRO)             	ld2z R12
     134/     1B1 : (MACRO)             	ldaD R13,128; reg:acon
     135/     1B7 : (MACRO)             	Ccall _SPI_Write
     136/     1BA :                     ;  delay(1);
     137/     1BA : (MACRO)             	ldaD R12,1; reg:acon
     138/     1C0 : (MACRO)             	Ccall _delay
     139/     1C3 :                     ;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
     140/     1C3 : (MACRO)             	ldaD R12,1; reg:acon
     141/     1C9 : (MACRO)             	ld1 R13,'O',sp,(-20+36)
     142/     1D3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     143/     1D6 : (MACRO)             	Ccall _SPI_Write
     144/     1D9 : (MACRO)             	ldaD R12,2; reg:acon
     145/     1DF : (MACRO)             	ld1 R13,'O',sp,(-19+36)
     146/     1E9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     147/     1EC : (MACRO)             	Ccall _SPI_Write
     148/     1EF :                     ;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
     149/     1EF : (MACRO)             	ldaD R12,3; reg:acon
     150/     1F5 : (MACRO)             	ld1 R13,'O',sp,(-18+36)
     151/     1FF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     152/     202 : (MACRO)             	Ccall _SPI_Write
     153/     205 : (MACRO)             	ldaD R12,4; reg:acon
     154/     20B : (MACRO)             	ld1 R13,'O',sp,(-17+36)
     155/     215 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     156/     218 : (MACRO)             	Ccall _SPI_Write
     157/     21B :                     ;  delay(1);
     158/     21B : (MACRO)             	ldaD R12,1; reg:acon
     159/     221 : (MACRO)             	Ccall _delay
     160/     224 :                     ;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
     161/     224 : (MACRO)             	ldaD R12,9; reg:acon
     162/     22A : (MACRO)             	ld1 R13,'O',sp,(-8+36)
     163/     234 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     164/     237 : (MACRO)             	Ccall _SPI_Write
     165/     23A : (MACRO)             	ldaD R12,10; reg:acon
     166/     240 : (MACRO)             	ld1 R13,'O',sp,(-7+36)
     167/     24A : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     168/     24D : (MACRO)             	Ccall _SPI_Write
     169/     250 :                     ;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
     170/     250 : (MACRO)             	ldaD R12,11; reg:acon
     171/     256 : (MACRO)             	ld1 R13,'O',sp,(-6+36)
     172/     260 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     173/     263 : (MACRO)             	Ccall _SPI_Write
     174/     266 : (MACRO)             	ldaD R12,12; reg:acon
     175/     26C : (MACRO)             	ld1 R13,'O',sp,(-5+36)
     176/     276 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     177/     279 : (MACRO)             	Ccall _SPI_Write
     178/     27C :                     ;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 4 - 6/18/2013 11:03:18


     179/     27C : (MACRO)             	ldaD R12,13; reg:acon
     180/     282 : (MACRO)             	ld1 R13,'O',sp,(-4+36)
     181/     28C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     182/     28F : (MACRO)             	Ccall _SPI_Write
     183/     292 : (MACRO)             	ldaD R12,14; reg:acon
     184/     298 : (MACRO)             	ld1 R13,'O',sp,(-3+36)
     185/     2A2 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     186/     2A5 : (MACRO)             	Ccall _SPI_Write
     187/     2A8 :                     ;  delay(1);
     188/     2A8 : (MACRO)             	ldaD R12,1; reg:acon
     189/     2AE : (MACRO)             	Ccall _delay
     190/     2B1 :                     ;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
     191/     2B1 : (MACRO)             	ldaD R12,5; reg:acon
     192/     2B7 : (MACRO)             	ld1 R13,'O',sp,(-16+36)
     193/     2C1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     194/     2C4 : (MACRO)             	Ccall _SPI_Write
     195/     2C7 : (MACRO)             	ldaD R12,6; reg:acon
     196/     2CD : (MACRO)             	ld1 R13,'O',sp,(-15+36)
     197/     2D7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     198/     2DA : (MACRO)             	Ccall _SPI_Write
     199/     2DD :                     ;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
     200/     2DD : (MACRO)             	ldaD R12,7; reg:acon
     201/     2E3 : (MACRO)             	ld1 R13,'O',sp,(-14+36)
     202/     2ED : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     203/     2F0 : (MACRO)             	Ccall _SPI_Write
     204/     2F3 : (MACRO)             	ldaD R12,8; reg:acon
     205/     2F9 : (MACRO)             	ld1 R13,'O',sp,(-13+36)
     206/     303 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     207/     306 : (MACRO)             	Ccall _SPI_Write
     208/     309 :                     ;  delay(1);
     209/     309 : (MACRO)             	ldaD R12,1; reg:acon
     210/     30F : (MACRO)             	Ccall _delay
     211/     312 :                     ;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
     212/     312 : (MACRO)             	ldaD R12,15; reg:acon
     213/     318 : (MACRO)             	ld1 R13,'O',sp,(-12+36)
     214/     322 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     215/     325 : (MACRO)             	Ccall _SPI_Write
     216/     328 : (MACRO)             	ldaD R12,16; reg:acon
     217/     32E : (MACRO)             	ld1 R13,'O',sp,(-11+36)
     218/     338 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     219/     33B : (MACRO)             	Ccall _SPI_Write
     220/     33E :                     ;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
     221/     33E : (MACRO)             	ldaD R12,17; reg:acon
     222/     344 : (MACRO)             	ld1 R13,'O',sp,(-10+36)
     223/     34E : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     224/     351 : (MACRO)             	Ccall _SPI_Write
     225/     354 : (MACRO)             	ldaD R12,18; reg:acon
     226/     35A : (MACRO)             	ld1 R13,'O',sp,(-9+36)
     227/     364 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     228/     367 : (MACRO)             	Ccall _SPI_Write
     229/     36A :                     ;  delay(1);
     230/     36A : (MACRO)             	ldaD R12,1; reg:acon
     231/     370 : (MACRO)             	Ccall _delay
     232/     373 :                     ;  SPI_Write(RMSR,0x55);
     233/     373 : (MACRO)             	ldaD R12,26; reg:acon
     234/     379 : (MACRO)             	ldaD R13,85; reg:acon
     235/     37F : (MACRO)             	Ccall _SPI_Write
     236/     382 :                     ;  SPI_Write(TMSR,0x55);
     237/     382 : (MACRO)             	ldaD R12,27; reg:acon
     238/     388 : (MACRO)             	ldaD R13,85; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 5 - 6/18/2013 11:03:18


     239/     38E : (MACRO)             	Ccall _SPI_Write
     240/     391 :                     ;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
     241/     391 : (MACRO)             	ldaD R12,15; reg:acon
     242/     397 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     243/     39A : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     244/     39E : (MACRO)             	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
     245/     3AB : (MACRO)             	ldaD R12,16; reg:acon
     246/     3B1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     247/     3B4 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     248/     3B8 : (MACRO)             	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
     249/     3C5 : (MACRO)             	ldaD R12,17; reg:acon
     250/     3CB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     251/     3CE : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     252/     3D2 : (MACRO)             	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
     253/     3DF : (MACRO)             	ldaD R12,18; reg:acon
     254/     3E5 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     255/     3E8 : (MACRO)             	ldaD R12,L26; reg:acon
     256/     3EE : (MACRO)             	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
     257/     3FA : (MACRO)             	cpy1 R13,R10
     258/     3FC : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     259/     3FF : (MACRO)             	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
     260/     40B : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     261/     40E : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     262/     41B : (MACRO)             	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
     263/     427 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     264/     42A : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     265/     437 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     266/     43B : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     267/     43E : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     268/     44B : (MACRO)             	Ccall _printf
     269/     44E :                     ;}
     270/     44E :                     L7:
     271/     44E : (MACRO)             	release 34
     272/     456 : (MACRO)             	Cretn
     273/     457 :                     
     274/     457 :                     _socket0_init:
     275/     457 : (MACRO)             	reserve 4
     276/     45B :                     ;void socket0_init(){ //initialize socket 0 for http server
     277/     45B :                     ;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
     278/     45B : (MACRO)             	ldaD R12,1024; reg:acon
     279/     461 : (MACRO)             	ldaD R13,1; reg:acon
     280/     467 : (MACRO)             	Ccall _SPI_Write
     281/     46A :                     ;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
     282/     46A : (MACRO)             	ldaD R12,1028; reg:acon
     283/     470 : (MACRO)             	ld2z R13
     284/     474 : (MACRO)             	Ccall _SPI_Write
     285/     477 :                     ;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
     286/     477 : (MACRO)             	ldaD R12,1029; reg:acon
     287/     47D : (MACRO)             	ldaD R13,80; reg:acon
     288/     483 : (MACRO)             	Ccall _SPI_Write
     289/     486 :                     ;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     290/     486 : (MACRO)             	ldaD R12,1025; reg:acon
     291/     48C : (MACRO)             	ldaD R13,1; reg:acon
     292/     492 : (MACRO)             	Ccall _SPI_Write
     293/     495 :                     ;	delay(10);
     294/     495 : (MACRO)             	ldaD R12,10; reg:acon
     295/     49B : (MACRO)             	Ccall _delay
     296/     49E :                     ;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
     297/     49E : (MACRO)             	ldaD R12,1025; reg:acon
     298/     4A4 : (MACRO)             	ldaD R13,2; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 6 - 6/18/2013 11:03:18


     299/     4AA : (MACRO)             	Ccall _SPI_Write
     300/     4AD :                     ;}
     301/     4AD :                     L27:
     302/     4AD : (MACRO)             	release 4
     303/     4B1 : (MACRO)             	Cretn
     304/     4B2 :                     
     305/     4B2 :                     _disconnect0:
     306/     4B2 : (MACRO)             	reserve 4
     307/     4B6 :                     ;void disconnect0(){
     308/     4B6 :                     ;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
     309/     4B6 : (MACRO)             	ldaD R12,1025; reg:acon
     310/     4BC : (MACRO)             	ldaD R13,8; reg:acon
     311/     4C2 : (MACRO)             	Ccall _SPI_Write
     312/     4C5 :                     L29:
     313/     4C5 :                     ;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
     314/     4C5 :                     L30:
     315/     4C5 : (MACRO)             	ldaD R12,1025; reg:acon
     316/     4CB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     317/     4CE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     318/     4D2 : (MACRO)             	jnzU1 r11,L29; NEI2(CVUI2(reg),con0)
     319/     4D6 :                     ;}
     320/     4D6 :                     L28:
     321/     4D6 : (MACRO)             	release 4
     322/     4DA : (MACRO)             	Cretn
     323/     4DB :                     
     324/     4DB :                     _close0:
     325/     4DB : (MACRO)             	reserve 4
     326/     4DF :                     ;void close0(){
     327/     4DF :                     ;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
     328/     4DF : (MACRO)             	ldaD R12,1025; reg:acon
     329/     4E5 : (MACRO)             	ldaD R13,16; reg:acon
     330/     4EB : (MACRO)             	Ccall _SPI_Write
     331/     4EE :                     L33:
     332/     4EE :                     ;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
     333/     4EE :                     L34:
     334/     4EE : (MACRO)             	ldaD R12,1025; reg:acon
     335/     4F4 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     336/     4F7 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     337/     4FB : (MACRO)             	jnzU1 r11,L33; NEI2(CVUI2(reg),con0)
     338/     4FF :                     ;}
     339/     4FF :                     L32:
     340/     4FF : (MACRO)             	release 4
     341/     503 : (MACRO)             	Cretn
     342/     504 :                     
     343/     504 :                     _recv0:
     344/     504 : (MACRO)             	reserve 2; save room for local variables
     345/     506 : (MACRO)             	pushr r0
     346/     50B : (MACRO)             	pushr r1
     347/     510 : (MACRO)             	pushr r6
     348/     515 : (MACRO)             	pushr r7
     349/     51A : (MACRO)             	reserve 4; save room for outgoing arguments
     350/     51E : (MACRO)             	cpy2 r7,r12; function(2055) 1
     351/     522 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     352/     526 :                     ;unsigned int recv0(unsigned char *buf,unsigned int buflen){
     353/     526 :                     ;    if (buflen <= 0) return 1;
     354/     526 : (MACRO)             	jnzU2 r6,L37; NE 0
     355/     52E : (MACRO)             	ldaD R15,1; reg:acon
     356/     534 : C0 06 41            	lbr L36
     357/     537 :                     L37:
     358/     537 :                     ;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 7 - 6/18/2013 11:03:18


     359/     537 : (MACRO)             	jnU2I r6,512,lbdf,L39 ;LEU2 512 6 L39; LE is flipped test & subtraction
     360/     540 :                     ;        buflen=MAX_BUF - 2;
     361/     540 : (MACRO)             	ldaD R6,510; reg:acon
     362/     546 :                     L39:
     363/     546 :                     ;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
     364/     546 : (MACRO)             	ldaD R12,1064; reg:acon
     365/     54C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     366/     54F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     367/     553 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     368/     556 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     369/     563 :                     ;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     370/     563 : (MACRO)             	ldaD R12,1065; reg:acon
     371/     569 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     372/     56C : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
     373/     578 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     374/     580 : (MACRO)             	shl2I R10,8
     375/     5B0 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     376/     5B4 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     377/     5B7 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     378/     5C3 : C0 05 E6            	lbr L42
     379/     5C6 :                     L41:
     380/     5C6 :                     ;    while(buflen) {//receive individual bytes into the buffer
     381/     5C6 :                     ;      buflen--;
     382/     5C6 : (MACRO)             	decm R6,1
     383/     5C7 :                     ;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     384/     5C7 : (MACRO)             	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     385/     5CF : (MACRO)             	ldA2 R0,'O',R11,(24576); reg:addr
     386/     5D7 :                     ;      *buf = SPI_Read(realaddr);
     387/     5D7 : (MACRO)             	cpy2 R12,R0 ;LOADU2(reg)*
     388/     5DB : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     389/     5DE : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     390/     5E2 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     391/     5E4 :                     ;      offaddr++;
     392/     5E4 : (MACRO)             	incm R1,1
     393/     5E5 :                     ;      buf++;
     394/     5E5 : (MACRO)             	incm R7,1
     395/     5E6 :                     ;    }
     396/     5E6 :                     L42:
     397/     5E6 :                     ;    while(buflen) {//receive individual bytes into the buffer
     398/     5E6 : (MACRO)             	jnzU2 r6,L41; NE 0
     399/     5EE :                     ;    *buf='\0';        // terminate string
     400/     5EE : (MACRO)             	ldaD R11,0; reg:acon
     401/     5F4 : (MACRO)             	str1 R11,R7; ASGNU1(indaddr,reg)
     402/     5F6 :                     ;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
     403/     5F6 : (MACRO)             	ldaD R12,1064; reg:acon
     404/     5FC : (MACRO)             	cpy2 R11,R1
     405/     600 : 9B                  	ghi	R11	;opt2
     406/     601 : AB                  	plo	R11
     407/     602 : F8 00               	ldi	0
     408/     604 : BB                  	phi	R11
     409/     605 : (MACRO)             	cpy1 R13,R11
     410/     607 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     411/     60A : (MACRO)             	Ccall _SPI_Write
     412/     60D :                     ;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     413/     60D : (MACRO)             	ldaD R12,1065; reg:acon
     414/     613 : (MACRO)             	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     415/     61B : (MACRO)             	cpy1 R13,R11
     416/     61D : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     417/     620 : (MACRO)             	Ccall _SPI_Write
     418/     623 :                     ;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 8 - 6/18/2013 11:03:18


     419/     623 : (MACRO)             	ldaD R12,1025; reg:acon
     420/     629 : (MACRO)             	ldaD R13,64; reg:acon
     421/     62F : (MACRO)             	Ccall _SPI_Write
     422/     632 :                     ;    delay(5);    				// Wait for Receive Process
     423/     632 : (MACRO)             	ldaD R12,5; reg:acon
     424/     638 : (MACRO)             	Ccall _delay
     425/     63B :                     ;    return 1;
     426/     63B : (MACRO)             	ldaD R15,1; reg:acon
     427/     641 :                     L36:
     428/     641 : (MACRO)             	release 4; release room for outgoing arguments
     429/     645 : (MACRO)             	popr r7
     430/     649 : (MACRO)             	popr r6
     431/     64D : (MACRO)             	popr r1
     432/     651 : (MACRO)             	popr r0
     433/     655 : (MACRO)             	release 2; release room for local variables 
     434/     657 : (MACRO)             	Cretn
     435/     658 :                     
     436/     658 :                     _recv_size:
     437/     658 : (MACRO)             	reserve 6
     438/     65E :                     ;unsigned int recv_size(void){
     439/     65E :                     ;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     440/     65E : (MACRO)             	ldaD R12,1062; reg:acon
     441/     664 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     442/     667 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     443/     66B : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     444/     678 : (MACRO)             	ldaD R12,1063; reg:acon
     445/     67E : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     446/     681 : (MACRO)             	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
     447/     68D : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     448/     690 : (MACRO)             	alu2I R10,R10,255,ani,ani
     449/     698 :                     	;removed ?	cpy2 R10,R10
     450/     698 : (MACRO)             	shl2I R10,8
     451/     6C8 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     452/     6CC : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     453/     6CF : (MACRO)             	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
     454/     6DB : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     455/     6DF :                     L44:
     456/     6DF : (MACRO)             	release 6
     457/     6E5 : (MACRO)             	Cretn
     458/     6E6 :                     
     459/     6E6 :                     _send0:
     460/     6E6 : (MACRO)             	reserve 6; save room for local variables
     461/     6EC : (MACRO)             	pushr r0
     462/     6F1 : (MACRO)             	pushr r1
     463/     6F6 : (MACRO)             	pushr r6
     464/     6FB : (MACRO)             	pushr r7
     465/     700 : (MACRO)             	reserve 4; save room for outgoing arguments
     466/     704 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     467/     708 : (MACRO)             	cpy2 r6,r13; function(2054) 1
     468/     70C :                     ;unsigned int send0(unsigned char *buf,unsigned int buflen){
     469/     70C :                     ;    if (buflen <= 0) return 0;
     470/     70C : (MACRO)             	jnzU2 r6,L46; NE 0
     471/     714 : (MACRO)             	ld2z R15
     472/     718 : C0 09 F2            	lbr L45
     473/     71B :                     L46:
     474/     71B :                     ;    txsize=SPI_Read(SO_TX_FSR);
     475/     71B : (MACRO)             	ldaD R12,1056; reg:acon
     476/     721 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     477/     724 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     478/     728 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 9 - 6/18/2013 11:03:18


     479/     72B : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     480/     72F :                     ;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     481/     72F : (MACRO)             	ldaD R12,1057; reg:acon
     482/     735 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     483/     738 : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     484/     740 : (MACRO)             	shl2I R10,8
     485/     770 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     486/     774 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     487/     777 : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     488/     783 :                     ;    timeout=0;
     489/     783 : (MACRO)             	ld2z R11
     490/     787 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
     491/     794 : C0 08 39            	lbr L49
     492/     797 :                     L48:
     493/     797 :                     ;    while (txsize < buflen) {
     494/     797 :                     ;      delay(1);
     495/     797 : (MACRO)             	ldaD R12,1; reg:acon
     496/     79D : (MACRO)             	Ccall _delay
     497/     7A0 :                     ;     txsize=SPI_Read(SO_TX_FSR);
     498/     7A0 : (MACRO)             	ldaD R12,1056; reg:acon
     499/     7A6 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     500/     7A9 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     501/     7AD : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     502/     7B0 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     503/     7B4 :                     ;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     504/     7B4 : (MACRO)             	ldaD R12,1057; reg:acon
     505/     7BA : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     506/     7BD : (MACRO)             	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
     507/     7C5 : (MACRO)             	shl2I R10,8
     508/     7F5 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     509/     7F9 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     510/     7FC : (MACRO)             	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
     511/     808 :                     ;     if (timeout++ > 1000) {
     512/     808 : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
     513/     814 : (MACRO)             	cpy2 R10,R11
     514/     818 : (MACRO)             	incm R10,1
     515/     819 : (MACRO)             	st2 R10,'O',sp,(-6+20); ASGNU2(addr,reg)*
     516/     826 : (MACRO)             	jnU2I r11,1000,lbdf,L51 ;LEU2 1000 11 L51; LE is flipped test & subtraction
     517/     82F :                     ;       disconnect0();
     518/     82F : (MACRO)             	Ccall _disconnect0
     519/     832 :                     ;       return 0;
     520/     832 : (MACRO)             	ld2z R15
     521/     836 : C0 09 F2            	lbr L45
     522/     839 :                     L51:
     523/     839 :                     ;   }
     524/     839 :                     L49:
     525/     839 :                     ;    while (txsize < buflen) {
     526/     839 : (MACRO)             	jcU2 r1,r6,lbnf,L48; LT=lbnf i.e. subtract B from A and jump if borrow 
     527/     846 :                     ;   ptr = SPI_Read(S0_TX_WR);
     528/     846 : (MACRO)             	ldaD R12,1060; reg:acon
     529/     84C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     530/     84F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     531/     853 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     532/     856 : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
     533/     863 :                     ;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     534/     863 : (MACRO)             	ldaD R12,1061; reg:acon
     535/     869 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     536/     86C : (MACRO)             	ld2 R10,'O',sp,(-8+20); reg:INDIRU2(addr)
     537/     878 : (MACRO)             	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
     538/     880 : (MACRO)             	shl2I R10,8
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 10 - 6/18/2013 11:03:18


     539/     8B0 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     540/     8B4 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     541/     8B7 : (MACRO)             	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
     542/     8C3 : C0 09 02            	lbr L54
     543/     8C6 :                     L53:
     544/     8C6 :                     ;    while(buflen) {
     545/     8C6 :                     ;      buflen--;
     546/     8C6 : (MACRO)             	decm R6,1
     547/     8C7 :                     ;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     548/     8C7 : (MACRO)             	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
     549/     8CF : (MACRO)             	ldA2 R11,'O',R11,(16384); reg:addr
     550/     8D7 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
     551/     8E4 :                     ;      SPI_Write(realaddr,*buf);
     552/     8E4 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
     553/     8F0 : (MACRO)             	ld1 R13,'O',R7,0
     554/     8FA : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     555/     8FD : (MACRO)             	Ccall _SPI_Write
     556/     900 :                     ;      offaddr++;
     557/     900 : (MACRO)             	incm R0,1
     558/     901 :                     ;      buf++;
     559/     901 : (MACRO)             	incm R7,1
     560/     902 :                     ;    }
     561/     902 :                     L54:
     562/     902 :                     ;    while(buflen) {
     563/     902 : (MACRO)             	jnzU2 r6,L53; NE 0
     564/     90A :                     ;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     565/     90A : (MACRO)             	ldaD R12,1060; reg:acon
     566/     910 : (MACRO)             	cpy2 RL10,R0
     567/     914 : (MACRO)             	zext4 RL10; CVUI4 jan 16
     568/     918 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     569/     924 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     570/     93A : (MACRO)             	shrI4I RL10,8
     571/     9AA : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     572/     9AE : (MACRO)             	cpy1 R13,R11
     573/     9B0 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     574/     9B3 : (MACRO)             	Ccall _SPI_Write
     575/     9B6 :                     ;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     576/     9B6 : (MACRO)             	ldaD R12,1061; reg:acon
     577/     9BC : (MACRO)             	alu2I R11,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
     578/     9C4 : (MACRO)             	cpy1 R13,R11
     579/     9C6 : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     580/     9C9 : (MACRO)             	Ccall _SPI_Write
     581/     9CC :                     ;    SPI_Write(S0_CR,CR_SEND);
     582/     9CC : (MACRO)             	ldaD R12,1025; reg:acon
     583/     9D2 : (MACRO)             	ldaD R13,32; reg:acon
     584/     9D8 : (MACRO)             	Ccall _SPI_Write
     585/     9DB :                     L56:
     586/     9DB :                     ;    while(SPI_Read(S0_CR));
     587/     9DB :                     L57:
     588/     9DB : (MACRO)             	ldaD R12,1025; reg:acon
     589/     9E1 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     590/     9E4 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     591/     9E8 : (MACRO)             	jnzU1 r11,L56; NEI2(CVUI2(reg),con0)
     592/     9EC :                     ;    return 1;
     593/     9EC : (MACRO)             	ldaD R15,1; reg:acon
     594/     9F2 :                     L45:
     595/     9F2 : (MACRO)             	release 4; release room for outgoing arguments
     596/     9F6 : (MACRO)             	popr r7
     597/     9FA : (MACRO)             	popr r6
     598/     9FE : (MACRO)             	popr r1
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 11 - 6/18/2013 11:03:18


     599/     A02 : (MACRO)             	popr r0
     600/     A06 : (MACRO)             	release 6; release room for local variables 
     601/     A0C : (MACRO)             	Cretn
     602/     A0D :                     
     603/     A0D :                     _report:
     604/     A0D : (MACRO)             	reserve 22
     605/     A17 : (MACRO)             	st2 r12,'O',sp,(24); flag1 
     606/     A24 :                     ;void report(char * where){
     607/     A24 :                     ;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
     608/     A24 : (MACRO)             	ld2z R12
     609/     A28 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     610/     A2B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     611/     A2F : (MACRO)             	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
     612/     A3C : (MACRO)             	ldaD R12,1027; reg:acon
     613/     A42 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     614/     A45 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     615/     A49 : (MACRO)             	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
     616/     A56 : (MACRO)             	ldaD R12,1024; reg:acon
     617/     A5C : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     618/     A5F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     619/     A63 : (MACRO)             	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
     620/     A70 : (MACRO)             	ldaD R12,1028; reg:acon
     621/     A76 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     622/     A79 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     623/     A7D : (MACRO)             	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
     624/     A8A : (MACRO)             	ldaD R12,1029; reg:acon
     625/     A90 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
     626/     A93 : (MACRO)             	ldaD R12,L60; reg:acon
     627/     A99 : (MACRO)             	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
     628/     AA5 : (MACRO)             	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
     629/     AB1 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     630/     AB4 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     631/     AC1 : (MACRO)             	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
     632/     ACD : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     633/     AD0 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     634/     ADD : (MACRO)             	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
     635/     AE9 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     636/     AEC : (MACRO)             	st2 r10,'O',sp,(8); arg+f**
     637/     AF9 : (MACRO)             	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
     638/     B05 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     639/     B08 : (MACRO)             	st2 r10,'O',sp,(10); arg+f**
     640/     B15 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     641/     B19 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     642/     B1C : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     643/     B29 : (MACRO)             	Ccall _printf
     644/     B2C :                     ;}
     645/     B2C :                     L59:
     646/     B2C : (MACRO)             	release 22
     647/     B34 : (MACRO)             	Cretn
     648/     B35 :                     
     649/     B35 :                     L62:
     650/     B35 : 48                  	db 72
     651/     B36 : 54                  	db 84
     652/     B37 : 54                  	db 84
     653/     B38 : 50                  	db 80
     654/     B39 : 2F                  	db 47
     655/     B3A : 31                  	db 49
     656/     B3B : 2E                  	db 46
     657/     B3C : 30                  	db 48
     658/     B3D : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 12 - 6/18/2013 11:03:18


     659/     B3E : 32                  	db 50
     660/     B3F : 30                  	db 48
     661/     B40 : 30                  	db 48
     662/     B41 : 20                  	db 32
     663/     B42 : 4F                  	db 79
     664/     B43 : 4B                  	db 75
     665/     B44 : 0D                  	db 13
     666/     B45 : 0A                  	db 10
     667/     B46 : 0D                  	db 13
     668/     B47 : 0A                  	db 10
     669/     B48 : 00                  	db 0
     670/     B49 :                     _sendack:
     671/     B49 : (MACRO)             	reserve 6
     672/     B4F :                     ;void sendack(){
     673/     B4F :                     ;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
     674/     B4F : (MACRO)             	ldaD R12,L62; reg:acon
     675/     B55 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     676/     B58 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     677/     B5C : (MACRO)             	ldaD R12,L62; reg:acon
     678/     B62 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     679/     B66 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     680/     B69 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     681/     B6D : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
     682/     B7A :                     ;}
     683/     B7A :                     L61:
     684/     B7A : (MACRO)             	release 6
     685/     B80 : (MACRO)             	Cretn
     686/     B81 :                     
     687/     B81 :                     _send0s:
     688/     B81 : (MACRO)             	reserve 4
     689/     B85 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     690/     B92 :                     ;int send0s(unsigned char* what){
     691/     B92 :                     ;	return send0(what,strlen((char *)what));
     692/     B92 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     693/     B9E : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     694/     BA1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     695/     BA5 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
     696/     BB1 : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     697/     BB5 : (MACRO)             	Ccall _send0;CALLU2(ar)*
     698/     BB8 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     699/     BBC :                     L63:
     700/     BBC : (MACRO)             	release 4
     701/     BC0 : (MACRO)             	Cretn
     702/     BC1 :                     
     703/     BC1 :                     L65:
     704/     BC1 : 48                  	db 72
     705/     BC2 : 54                  	db 84
     706/     BC3 : 54                  	db 84
     707/     BC4 : 50                  	db 80
     708/     BC5 : 2F                  	db 47
     709/     BC6 : 31                  	db 49
     710/     BC7 : 2E                  	db 46
     711/     BC8 : 30                  	db 48
     712/     BC9 : 20                  	db 32
     713/     BCA : 32                  	db 50
     714/     BCB : 30                  	db 48
     715/     BCC : 30                  	db 48
     716/     BCD : 20                  	db 32
     717/     BCE : 4F                  	db 79
     718/     BCF : 4B                  	db 75
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 13 - 6/18/2013 11:03:18


     719/     BD0 : 0D                  	db 13
     720/     BD1 : 0A                  	db 10
     721/     BD2 : 43                  	db 67
     722/     BD3 : 6F                  	db 111
     723/     BD4 : 6E                  	db 110
     724/     BD5 : 74                  	db 116
     725/     BD6 : 65                  	db 101
     726/     BD7 : 6E                  	db 110
     727/     BD8 : 74                  	db 116
     728/     BD9 : 2D                  	db 45
     729/     BDA : 54                  	db 84
     730/     BDB : 79                  	db 121
     731/     BDC : 70                  	db 112
     732/     BDD : 65                  	db 101
     733/     BDE : 3A                  	db 58
     734/     BDF : 20                  	db 32
     735/     BE0 : 74                  	db 116
     736/     BE1 : 65                  	db 101
     737/     BE2 : 78                  	db 120
     738/     BE3 : 74                  	db 116
     739/     BE4 : 2F                  	db 47
     740/     BE5 : 68                  	db 104
     741/     BE6 : 74                  	db 116
     742/     BE7 : 6D                  	db 109
     743/     BE8 : 6C                  	db 108
     744/     BE9 : 0D                  	db 13
     745/     BEA : 0A                  	db 10
     746/     BEB : 0D                  	db 13
     747/     BEC : 0A                  	db 10
     748/     BED : 3C                  	db 60
     749/     BEE : 68                  	db 104
     750/     BEF : 74                  	db 116
     751/     BF0 : 6D                  	db 109
     752/     BF1 : 6C                  	db 108
     753/     BF2 : 3E                  	db 62
     754/     BF3 : 3C                  	db 60
     755/     BF4 : 62                  	db 98
     756/     BF5 : 6F                  	db 111
     757/     BF6 : 64                  	db 100
     758/     BF7 : 79                  	db 121
     759/     BF8 : 3E                  	db 62
     760/     BF9 : 3C                  	db 60
     761/     BFA : 73                  	db 115
     762/     BFB : 70                  	db 112
     763/     BFC : 61                  	db 97
     764/     BFD : 6E                  	db 110
     765/     BFE : 20                  	db 32
     766/     BFF : 73                  	db 115
     767/     C00 : 74                  	db 116
     768/     C01 : 79                  	db 121
     769/     C02 : 6C                  	db 108
     770/     C03 : 65                  	db 101
     771/     C04 : 3D                  	db 61
     772/     C05 : 22                  	db 34
     773/     C06 : 63                  	db 99
     774/     C07 : 6F                  	db 111
     775/     C08 : 6C                  	db 108
     776/     C09 : 6F                  	db 111
     777/     C0A : 72                  	db 114
     778/     C0B : 3A                  	db 58
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 14 - 6/18/2013 11:03:18


     779/     C0C : 23                  	db 35
     780/     C0D : 30                  	db 48
     781/     C0E : 30                  	db 48
     782/     C0F : 30                  	db 48
     783/     C10 : 30                  	db 48
     784/     C11 : 41                  	db 65
     785/     C12 : 30                  	db 48
     786/     C13 : 22                  	db 34
     787/     C14 : 3E                  	db 62
     788/     C15 : 0D                  	db 13
     789/     C16 : 0A                  	db 10
     790/     C17 : 3C                  	db 60
     791/     C18 : 68                  	db 104
     792/     C19 : 31                  	db 49
     793/     C1A : 3E                  	db 62
     794/     C1B : 3C                  	db 60
     795/     C1C : 63                  	db 99
     796/     C1D : 65                  	db 101
     797/     C1E : 6E                  	db 110
     798/     C1F : 74                  	db 116
     799/     C20 : 65                  	db 101
     800/     C21 : 72                  	db 114
     801/     C22 : 3E                  	db 62
     802/     C23 : 4F                  	db 79
     803/     C24 : 6C                  	db 108
     804/     C25 : 64                  	db 100
     805/     C26 : 75                  	db 117
     806/     C27 : 69                  	db 105
     807/     C28 : 6E                  	db 110
     808/     C29 : 6F                  	db 111
     809/     C2A : 20                  	db 32
     810/     C2B : 31                  	db 49
     811/     C2C : 38                  	db 56
     812/     C2D : 30                  	db 48
     813/     C2E : 32                  	db 50
     814/     C2F : 20                  	db 32
     815/     C30 : 57                  	db 87
     816/     C31 : 65                  	db 101
     817/     C32 : 62                  	db 98
     818/     C33 : 20                  	db 32
     819/     C34 : 53                  	db 83
     820/     C35 : 65                  	db 101
     821/     C36 : 72                  	db 114
     822/     C37 : 76                  	db 118
     823/     C38 : 65                  	db 101
     824/     C39 : 72                  	db 114
     825/     C3A : 3C                  	db 60
     826/     C3B : 2F                  	db 47
     827/     C3C : 63                  	db 99
     828/     C3D : 65                  	db 101
     829/     C3E : 6E                  	db 110
     830/     C3F : 74                  	db 116
     831/     C40 : 65                  	db 101
     832/     C41 : 72                  	db 114
     833/     C42 : 3E                  	db 62
     834/     C43 : 3C                  	db 60
     835/     C44 : 2F                  	db 47
     836/     C45 : 68                  	db 104
     837/     C46 : 31                  	db 49
     838/     C47 : 3E                  	db 62
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 15 - 6/18/2013 11:03:18


     839/     C48 : 0D                  	db 13
     840/     C49 : 0A                  	db 10
     841/     C4A : 3C                  	db 60
     842/     C4B : 70                  	db 112
     843/     C4C : 3E                  	db 62
     844/     C4D : 3C                  	db 60
     845/     C4E : 66                  	db 102
     846/     C4F : 6F                  	db 111
     847/     C50 : 72                  	db 114
     848/     C51 : 6D                  	db 109
     849/     C52 : 20                  	db 32
     850/     C53 : 6D                  	db 109
     851/     C54 : 65                  	db 101
     852/     C55 : 74                  	db 116
     853/     C56 : 68                  	db 104
     854/     C57 : 6F                  	db 111
     855/     C58 : 64                  	db 100
     856/     C59 : 3D                  	db 61
     857/     C5A : 22                  	db 34
     858/     C5B : 50                  	db 80
     859/     C5C : 4F                  	db 79
     860/     C5D : 53                  	db 83
     861/     C5E : 54                  	db 84
     862/     C5F : 22                  	db 34
     863/     C60 : 3E                  	db 62
     864/     C61 : 0D                  	db 13
     865/     C62 : 0A                  	db 10
     866/     C63 : 00                  	db 0
     867/     C64 :                     L66:
     868/     C64 : 3C                  	db 60
     869/     C65 : 70                  	db 112
     870/     C66 : 3E                  	db 62
     871/     C67 : 3C                  	db 60
     872/     C68 : 73                  	db 115
     873/     C69 : 74                  	db 116
     874/     C6A : 72                  	db 114
     875/     C6B : 6F                  	db 111
     876/     C6C : 6E                  	db 110
     877/     C6D : 67                  	db 103
     878/     C6E : 3E                  	db 62
     879/     C6F : 3C                  	db 60
     880/     C70 : 69                  	db 105
     881/     C71 : 6E                  	db 110
     882/     C72 : 70                  	db 112
     883/     C73 : 75                  	db 117
     884/     C74 : 74                  	db 116
     885/     C75 : 20                  	db 32
     886/     C76 : 74                  	db 116
     887/     C77 : 79                  	db 121
     888/     C78 : 70                  	db 112
     889/     C79 : 65                  	db 101
     890/     C7A : 3D                  	db 61
     891/     C7B : 22                  	db 34
     892/     C7C : 72                  	db 114
     893/     C7D : 61                  	db 97
     894/     C7E : 64                  	db 100
     895/     C7F : 69                  	db 105
     896/     C80 : 6F                  	db 111
     897/     C81 : 22                  	db 34
     898/     C82 : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 16 - 6/18/2013 11:03:18


     899/     C83 : 6E                  	db 110
     900/     C84 : 61                  	db 97
     901/     C85 : 6D                  	db 109
     902/     C86 : 65                  	db 101
     903/     C87 : 3D                  	db 61
     904/     C88 : 22                  	db 34
     905/     C89 : 72                  	db 114
     906/     C8A : 64                  	db 100
     907/     C8B : 22                  	db 34
     908/     C8C : 20                  	db 32
     909/     C8D : 76                  	db 118
     910/     C8E : 61                  	db 97
     911/     C8F : 6C                  	db 108
     912/     C90 : 75                  	db 117
     913/     C91 : 65                  	db 101
     914/     C92 : 3D                  	db 61
     915/     C93 : 22                  	db 34
     916/     C94 : 30                  	db 48
     917/     C95 : 22                  	db 34
     918/     C96 : 20                  	db 32
     919/     C97 : 00                  	db 0
     920/     C98 :                     L67:
     921/     C98 : 3E                  	db 62
     922/     C99 : 4C                  	db 76
     923/     C9A : 45                  	db 69
     924/     C9B : 44                  	db 68
     925/     C9C : 20                  	db 32
     926/     C9D : 4F                  	db 79
     927/     C9E : 46                  	db 70
     928/     C9F : 46                  	db 70
     929/     CA0 : 0D                  	db 13
     930/     CA1 : 0A                  	db 10
     931/     CA2 : 3C                  	db 60
     932/     CA3 : 62                  	db 98
     933/     CA4 : 72                  	db 114
     934/     CA5 : 3E                  	db 62
     935/     CA6 : 3C                  	db 60
     936/     CA7 : 69                  	db 105
     937/     CA8 : 6E                  	db 110
     938/     CA9 : 70                  	db 112
     939/     CAA : 75                  	db 117
     940/     CAB : 74                  	db 116
     941/     CAC : 20                  	db 32
     942/     CAD : 74                  	db 116
     943/     CAE : 79                  	db 121
     944/     CAF : 70                  	db 112
     945/     CB0 : 65                  	db 101
     946/     CB1 : 3D                  	db 61
     947/     CB2 : 22                  	db 34
     948/     CB3 : 72                  	db 114
     949/     CB4 : 61                  	db 97
     950/     CB5 : 64                  	db 100
     951/     CB6 : 69                  	db 105
     952/     CB7 : 6F                  	db 111
     953/     CB8 : 22                  	db 34
     954/     CB9 : 20                  	db 32
     955/     CBA : 6E                  	db 110
     956/     CBB : 61                  	db 97
     957/     CBC : 6D                  	db 109
     958/     CBD : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 17 - 6/18/2013 11:03:18


     959/     CBE : 3D                  	db 61
     960/     CBF : 22                  	db 34
     961/     CC0 : 72                  	db 114
     962/     CC1 : 64                  	db 100
     963/     CC2 : 22                  	db 34
     964/     CC3 : 20                  	db 32
     965/     CC4 : 76                  	db 118
     966/     CC5 : 61                  	db 97
     967/     CC6 : 6C                  	db 108
     968/     CC7 : 75                  	db 117
     969/     CC8 : 65                  	db 101
     970/     CC9 : 3D                  	db 61
     971/     CCA : 22                  	db 34
     972/     CCB : 31                  	db 49
     973/     CCC : 22                  	db 34
     974/     CCD : 20                  	db 32
     975/     CCE : 00                  	db 0
     976/     CCF :                     L68:
     977/     CCF : 3E                  	db 62
     978/     CD0 : 4C                  	db 76
     979/     CD1 : 45                  	db 69
     980/     CD2 : 44                  	db 68
     981/     CD3 : 20                  	db 32
     982/     CD4 : 4F                  	db 79
     983/     CD5 : 4E                  	db 78
     984/     CD6 : 0D                  	db 13
     985/     CD7 : 0A                  	db 10
     986/     CD8 : 3C                  	db 60
     987/     CD9 : 2F                  	db 47
     988/     CDA : 73                  	db 115
     989/     CDB : 74                  	db 116
     990/     CDC : 72                  	db 114
     991/     CDD : 6F                  	db 111
     992/     CDE : 6E                  	db 110
     993/     CDF : 67                  	db 103
     994/     CE0 : 3E                  	db 62
     995/     CE1 : 3C                  	db 60
     996/     CE2 : 70                  	db 112
     997/     CE3 : 3E                  	db 62
     998/     CE4 : 0D                  	db 13
     999/     CE5 : 0A                  	db 10
    1000/     CE6 : 3C                  	db 60
    1001/     CE7 : 69                  	db 105
    1002/     CE8 : 6E                  	db 110
    1003/     CE9 : 70                  	db 112
    1004/     CEA : 75                  	db 117
    1005/     CEB : 74                  	db 116
    1006/     CEC : 20                  	db 32
    1007/     CED : 74                  	db 116
    1008/     CEE : 79                  	db 121
    1009/     CEF : 70                  	db 112
    1010/     CF0 : 65                  	db 101
    1011/     CF1 : 3D                  	db 61
    1012/     CF2 : 22                  	db 34
    1013/     CF3 : 73                  	db 115
    1014/     CF4 : 75                  	db 117
    1015/     CF5 : 62                  	db 98
    1016/     CF6 : 6D                  	db 109
    1017/     CF7 : 69                  	db 105
    1018/     CF8 : 74                  	db 116
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 18 - 6/18/2013 11:03:18


    1019/     CF9 : 22                  	db 34
    1020/     CFA : 3E                  	db 62
    1021/     CFB : 0D                  	db 13
    1022/     CFC : 0A                  	db 10
    1023/     CFD : 3C                  	db 60
    1024/     CFE : 2F                  	db 47
    1025/     CFF : 66                  	db 102
    1026/     D00 : 6F                  	db 111
    1027/     D01 : 72                  	db 114
    1028/     D02 : 6D                  	db 109
    1029/     D03 : 3E                  	db 62
    1030/     D04 : 3C                  	db 60
    1031/     D05 : 2F                  	db 47
    1032/     D06 : 73                  	db 115
    1033/     D07 : 70                  	db 112
    1034/     D08 : 61                  	db 97
    1035/     D09 : 6E                  	db 110
    1036/     D0A : 3E                  	db 62
    1037/     D0B : 3C                  	db 60
    1038/     D0C : 2F                  	db 47
    1039/     D0D : 62                  	db 98
    1040/     D0E : 6F                  	db 111
    1041/     D0F : 64                  	db 100
    1042/     D10 : 79                  	db 121
    1043/     D11 : 3E                  	db 62
    1044/     D12 : 3C                  	db 60
    1045/     D13 : 2F                  	db 47
    1046/     D14 : 68                  	db 104
    1047/     D15 : 74                  	db 116
    1048/     D16 : 6D                  	db 109
    1049/     D17 : 6C                  	db 108
    1050/     D18 : 3E                  	db 62
    1051/     D19 : 0D                  	db 13
    1052/     D1A : 0A                  	db 10
    1053/     D1B : 00                  	db 0
    1054/     D1C :                     L69:
    1055/     D1C : 63                  	db 99
    1056/     D1D : 68                  	db 104
    1057/     D1E : 65                  	db 101
    1058/     D1F : 63                  	db 99
    1059/     D20 : 6B                  	db 107
    1060/     D21 : 65                  	db 101
    1061/     D22 : 64                  	db 100
    1062/     D23 : 00                  	db 0
    1063/     D24 :                     L70:
    1064/     D24 : 20                  	db 32
    1065/     D25 : 00                  	db 0
    1066/     D26 :                     _sendstuff:
    1067/     D26 : (MACRO)             	pushr r7
    1068/     D2B : (MACRO)             	reserve 4; save room for outgoing arguments
    1069/     D2F :                     ;void sendstuff(){
    1070/     D2F :                     ;	printf("sendstuff sees ledmode=%d\n",ledmode);
    1071/     D2F : (MACRO)             	ldaD R12,L71; reg:acon
    1072/     D35 : (MACRO)             	ld2 R13,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1073/     D3F : (MACRO)             	Ccall _printf
    1074/     D42 :                     ;	sendrc=send0s(hdr); 	// Now Send the HTTP Response first part
    1075/     D42 : (MACRO)             	ldaD R12,L65; reg:acon
    1076/     D48 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1077/     D4B : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1078/     D4F :                     ;	sendrc=send0s(rpart1); 	// Now Send the radio button 1st part
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 19 - 6/18/2013 11:03:18


    1079/     D4F : (MACRO)             	ldaD R12,L66; reg:acon
    1080/     D55 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1081/     D58 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1082/     D5C :                     ;	if (ledmode==0) send0s(checked); else send0s(unchecked);
    1083/     D5C : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1084/     D66 : (MACRO)             	jnzU2 r11,L72; NE 0
    1085/     D6E : (MACRO)             	ldaD R12,L69; reg:acon
    1086/     D74 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1087/     D77 : C0 0D 83            	lbr L73
    1088/     D7A :                     L72:
    1089/     D7A : (MACRO)             	ldaD R12,L70; reg:acon
    1090/     D80 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1091/     D83 :                     L73:
    1092/     D83 :                     ;	sendrc=send0s(rpart2); 	// Now Send the radio button 2nd part
    1093/     D83 : (MACRO)             	ldaD R12,L67; reg:acon
    1094/     D89 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1095/     D8C : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1096/     D90 :                     ;	if (ledmode==1) send0s(checked); else send0s(unchecked);
    1097/     D90 : (MACRO)             	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
    1098/     D9A : (MACRO)             	jneU2I r11,1,L74; NE
    1099/     DA6 : (MACRO)             	ldaD R12,L69; reg:acon
    1100/     DAC : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1101/     DAF : C0 0D BB            	lbr L75
    1102/     DB2 :                     L74:
    1103/     DB2 : (MACRO)             	ldaD R12,L70; reg:acon
    1104/     DB8 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1105/     DBB :                     L75:
    1106/     DBB :                     ;	sendrc=send0s(trlr); 	// Now Send the rest of the page
    1107/     DBB : (MACRO)             	ldaD R12,L68; reg:acon
    1108/     DC1 : (MACRO)             	Ccall _send0s; CALLI2(ar)
    1109/     DC4 : (MACRO)             	cpy2 R7,R15 ;LOADI2(reg)*
    1110/     DC8 :                     ;}
    1111/     DC8 :                     L64:
    1112/     DC8 : (MACRO)             	release 4; release room for outgoing arguments
    1113/     DCC : (MACRO)             	popr r7
    1114/     DD0 : (MACRO)             	Cretn
    1115/     DD1 :                     
    1116/     DD1 :                     _strindex:
    1117/     DD1 : (MACRO)             	pushr r0
    1118/     DD6 : (MACRO)             	pushr r1
    1119/     DDB : (MACRO)             	pushr r6
    1120/     DE0 : (MACRO)             	pushr r7
    1121/     DE5 : (MACRO)             	reserve 6; save room for outgoing arguments
    1122/     DEB : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1123/     DEF : (MACRO)             	cpy2 r6,r13; function(2055) 1
    1124/     DF3 :                     ;{
    1125/     DF3 :                     ;  n=strlen(t);
    1126/     DF3 : (MACRO)             	cpy2 R12,R6 ;LOADP2(reg)
    1127/     DF7 : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1128/     DFA : (MACRO)             	cpy2 R0,R15 ;LOADU2(reg)*
    1129/     DFE :                     ;  for(i=0;*(s+i); i++) {
    1130/     DFE : (MACRO)             	ld2z R1
    1131/     E02 : C0 0E 35            	lbr L80
    1132/     E05 :                     L77:
    1133/     E05 :                     ;    if (strncmp(s+i,t,n) == 0)
    1134/     E05 : (MACRO)             	alu2 R12,R1,R7,add,adc
    1135/     E11 : (MACRO)             	cpy2 R13,R6 ;LOADP2(reg)
    1136/     E15 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1137/     E22 : (MACRO)             	Ccall _strncmp; CALLI2(ar)
    1138/     E25 : (MACRO)             	jnzU2 r15,L81; NE 0
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 20 - 6/18/2013 11:03:18


    1139/     E2D :                     ;      return i;
    1140/     E2D : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)*
    1141/     E31 : C0 0E 4D            	lbr L76
    1142/     E34 :                     L81:
    1143/     E34 :                     ;  }
    1144/     E34 :                     L78:
    1145/     E34 :                     ;  for(i=0;*(s+i); i++) {
    1146/     E34 : (MACRO)             	incm R1,1
    1147/     E35 :                     L80:
    1148/     E35 : (MACRO)             	alu2 R11,R1,R7,add,adc
    1149/     E41 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1150/     E43 : (MACRO)             	jnzU1 r11,L77; NEI2(CVUI2(reg),con0)
    1151/     E47 :                     ;  return -1;
    1152/     E47 : (MACRO)             	ldaD R15,-1; reg:acon
    1153/     E4D :                     L76:
    1154/     E4D : (MACRO)             	release 6; release room for outgoing arguments
    1155/     E53 : (MACRO)             	popr r7
    1156/     E57 : (MACRO)             	popr r6
    1157/     E5B : (MACRO)             	popr r1
    1158/     E5F : (MACRO)             	popr r0
    1159/     E63 : (MACRO)             	Cretn
    1160/     E64 :                     
    1161/     E64 :                     _analyzeinput:
    1162/     E64 : (MACRO)             	reserve 6; save room for local variables
    1163/     E6A : (MACRO)             	pushr r7
    1164/     E6F : (MACRO)             	reserve 10; save room for outgoing arguments
    1165/     E79 :                     ;void analyzeinput(){
    1166/     E79 :                     ;	int reqmode=3; //mode request zero=off, 1=on, else =no request
    1167/     E79 : (MACRO)             	ldaD R7,3; reg:acon
    1168/     E7F :                     ;	printf("input from %d.%d.%d.%d\n\n",SPI_Read(S0_DIPR + 0),SPI_Read(S0_DIPR + 1),SPI_Read(S0_DIPR + 2),SPI_Read(S0_DIPR + 3));
    1169/     E7F : (MACRO)             	ldaD R12,1036; reg:acon
    1170/     E85 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1171/     E88 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1172/     E8C : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNI2(addr,reg)*;
    1173/     E99 : (MACRO)             	ldaD R12,1037; reg:acon
    1174/     E9F : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1175/     EA2 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1176/     EA6 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNI2(addr,reg)*;
    1177/     EB3 : (MACRO)             	ldaD R12,1038; reg:acon
    1178/     EB9 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1179/     EBC : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1180/     EC0 : (MACRO)             	st2 R11,'O',sp,(-8+20); ASGNI2(addr,reg)*;
    1181/     ECD : (MACRO)             	ldaD R12,1039; reg:acon
    1182/     ED3 : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1183/     ED6 : (MACRO)             	ldaD R12,L84; reg:acon
    1184/     EDC : (MACRO)             	ld2 R10,'O',sp,(-4+20) ;reg:INDIRI2(addr)
    1185/     EE8 : (MACRO)             	cpy1 R13,R10
    1186/     EEA : (MACRO)             	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1187/     EED : (MACRO)             	ld2 R10,'O',sp,(-6+20) ;reg:INDIRI2(addr)
    1188/     EF9 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1189/     EFC : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
    1190/     F09 : (MACRO)             	ld2 R10,'O',sp,(-8+20) ;reg:INDIRI2(addr)
    1191/     F15 : (MACRO)             	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1192/     F18 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
    1193/     F25 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1194/     F29 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1195/     F2C : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
    1196/     F39 : (MACRO)             	Ccall _printf
    1197/     F3C :                     ;	printf("analyzing:\n%s\n",buf);
    1198/     F3C : (MACRO)             	ldaD R12,L85; reg:acon
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 21 - 6/18/2013 11:03:18


    1199/     F42 : (MACRO)             	ldaD R13,_buf; reg:acon
    1200/     F48 : (MACRO)             	Ccall _printf
    1201/     F4B :                     ;  	if (strindex((char *)buf,"POST /")>=0) reqtype=post;
    1202/     F4B : (MACRO)             	ldaD R12,_buf; reg:acon
    1203/     F51 : (MACRO)             	ldaD R13,L88; reg:acon
    1204/     F57 : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1205/     F5A : (MACRO)             	jcI2I r15,0,lbnf,L86  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1206/     F6B : (MACRO)             	ldaD R11,1; reg:acon
    1207/     F71 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1208/     F7C :                     L86:
    1209/     F7C :                     ;	if (strindex((char *)buf,"GET /")>=0) reqtype=get;
    1210/     F7C : (MACRO)             	ldaD R12,_buf; reg:acon
    1211/     F82 : (MACRO)             	ldaD R13,L91; reg:acon
    1212/     F88 : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1213/     F8B : (MACRO)             	jcI2I r15,0,lbnf,L89  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1214/     F9C : (MACRO)             	ld2z R11
    1215/     FA0 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1216/     FAB :                     L89:
    1217/     FAB :                     ;	if (strindex((char *)buf,"GET /favicon")>=0) reqtype=favicon;
    1218/     FAB : (MACRO)             	ldaD R12,_buf; reg:acon
    1219/     FB1 : (MACRO)             	ldaD R13,L94; reg:acon
    1220/     FB7 : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1221/     FBA : (MACRO)             	jcI2I r15,0,lbnf,L92  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1222/     FCB : (MACRO)             	ldaD R11,2; reg:acon
    1223/     FD1 : (MACRO)             	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
    1224/     FDC :                     L92:
    1225/     FDC :                     ;	if (reqtype==post){
    1226/     FDC : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1227/     FE6 : (MACRO)             	jneU2I r11,1,L95; NE
    1228/     FF2 :                     ;	    printf("POST received\n");
    1229/     FF2 : (MACRO)             	ldaD R12,L97; reg:acon
    1230/     FF8 : (MACRO)             	Ccall _printf
    1231/     FFB :                     ;	  if (strindex((char *)buf,"rd=0") > 0)
    1232/     FFB : (MACRO)             	ldaD R12,_buf; reg:acon
    1233/    1001 : (MACRO)             	ldaD R13,L100; reg:acon
    1234/    1007 : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1235/    100A : (MACRO)             	jnI2I r15,0,lbdf,L98 ;LEI2 0 15 L98; LE is flipped test & subtraction
    1236/    101B :                     ;		reqmode=0;
    1237/    101B : (MACRO)             	ld2z R7
    1238/    101F :                     L98:
    1239/    101F :                     ;	  if (strindex((char *)buf,"rd=1") > 0)
    1240/    101F : (MACRO)             	ldaD R12,_buf; reg:acon
    1241/    1025 : (MACRO)             	ldaD R13,L103; reg:acon
    1242/    102B : (MACRO)             	Ccall _strindex; CALLI2(ar)
    1243/    102E : (MACRO)             	jnI2I r15,0,lbdf,L96 ;LEI2 0 15 L96; LE is flipped test & subtraction
    1244/    103F :                     ;		reqmode=1;
    1245/    103F : (MACRO)             	ldaD R7,1; reg:acon
    1246/    1045 :                     ;	}
    1247/    1045 : C0 10 91            	lbr L96
    1248/    1048 :                     L95:
    1249/    1048 :                     ;	else if (reqtype==get)
    1250/    1048 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1251/    1052 : (MACRO)             	jnzU2 r11,L104; NE 0
    1252/    105A :                     ;		printf("GET received.\n");
    1253/    105A : (MACRO)             	ldaD R12,L106; reg:acon
    1254/    1060 : (MACRO)             	Ccall _printf
    1255/    1063 : C0 10 91            	lbr L105
    1256/    1066 :                     L104:
    1257/    1066 :                     ;	else if (reqtype==favicon)
    1258/    1066 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 22 - 6/18/2013 11:03:18


    1259/    1070 : (MACRO)             	jneU2I r11,2,L107; NE
    1260/    107C :                     ;		printf("favicon ignored\n");
    1261/    107C : (MACRO)             	ldaD R12,L109; reg:acon
    1262/    1082 : (MACRO)             	Ccall _printf
    1263/    1085 : C0 10 91            	lbr L108
    1264/    1088 :                     L107:
    1265/    1088 :                     ;		printf("unknown input\n");
    1266/    1088 : (MACRO)             	ldaD R12,L110; reg:acon
    1267/    108E : (MACRO)             	Ccall _printf
    1268/    1091 :                     L108:
    1269/    1091 :                     L105:
    1270/    1091 :                     L96:
    1271/    1091 :                     ;	if (reqmode==0){
    1272/    1091 : (MACRO)             	jnzU2 r7,L111; NE 0
    1273/    1099 :                     ;		printf("setting led off\n");
    1274/    1099 : (MACRO)             	ldaD R12,L113; reg:acon
    1275/    109F : (MACRO)             	Ccall _printf
    1276/    10A2 :                     ;		ledmode=0;
    1277/    10A2 : (MACRO)             	ld2z R11
    1278/    10A6 : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1279/    10B1 :                     ;		digitalWrite(0,LOW);
    1280/    10B1 : (MACRO)             	ld2z R11
    1281/    10B5 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1282/    10B9 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1283/    10BD : (MACRO)             	Ccall _digitalWrite
    1284/    10C0 :                     ;	} else{
    1285/    10C0 : C0 11 02            	lbr L112
    1286/    10C3 :                     L111:
    1287/    10C3 :                     ;		if (reqmode==1){
    1288/    10C3 : (MACRO)             	jneU2I r7,1,L114; NE
    1289/    10CF :                     ;			printf("setting led ON\n");
    1290/    10CF : (MACRO)             	ldaD R12,L116; reg:acon
    1291/    10D5 : (MACRO)             	Ccall _printf
    1292/    10D8 :                     ;			ledmode=1;
    1293/    10D8 : (MACRO)             	ldaD R11,1; reg:acon
    1294/    10DE : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1295/    10E9 :                     ;			digitalWrite(0,HIGH);
    1296/    10E9 : (MACRO)             	ld2z R12
    1297/    10ED : (MACRO)             	ldaD R13,1; reg:acon
    1298/    10F3 : (MACRO)             	Ccall _digitalWrite
    1299/    10F6 :                     ;		}else{
    1300/    10F6 : C0 11 02            	lbr L115
    1301/    10F9 :                     L114:
    1302/    10F9 :                     ;			printf("No led action request\n");
    1303/    10F9 : (MACRO)             	ldaD R12,L117; reg:acon
    1304/    10FF : (MACRO)             	Ccall _printf
    1305/    1102 :                     ;		}
    1306/    1102 :                     L115:
    1307/    1102 :                     ;	}
    1308/    1102 :                     L112:
    1309/    1102 :                     ;}
    1310/    1102 :                     L83:
    1311/    1102 : (MACRO)             	release 10; release room for outgoing arguments
    1312/    110A : (MACRO)             	popr r7
    1313/    110E : (MACRO)             	release 6; release room for local variables 
    1314/    1114 : (MACRO)             	Cretn
    1315/    1115 :                     
    1316/    1115 :                     _sendresponse:
    1317/    1115 : (MACRO)             	reserve 4
    1318/    1119 :                     ;void sendresponse(){
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 23 - 6/18/2013 11:03:18


    1319/    1119 :                     ;	switch (reqtype){
    1320/    1119 : (MACRO)             	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
    1321/    1123 : (MACRO)             	jzU2 r11,L121; EQ 0
    1322/    112B : (MACRO)             	jeqU2I r11,1,L121;EQI2(reg,con)
    1323/    1137 : (MACRO)             	jeqU2I r11,2,L123;EQI2(reg,con)
    1324/    1143 : C0 11 61            	lbr L119
    1325/    1146 :                     L121:
    1326/    1146 :                     ;			printf("sending form \n");
    1327/    1146 : (MACRO)             	ldaD R12,L122; reg:acon
    1328/    114C : (MACRO)             	Ccall _printf
    1329/    114F :                     ;			sendstuff();
    1330/    114F : (MACRO)             	Ccall _sendstuff
    1331/    1152 :                     ;			break;
    1332/    1152 : C0 11 61            	lbr L120
    1333/    1155 :                     L123:
    1334/    1155 :                     ;			printf("sending ack\n");
    1335/    1155 : (MACRO)             	ldaD R12,L124; reg:acon
    1336/    115B : (MACRO)             	Ccall _printf
    1337/    115E :                     ;			sendack();
    1338/    115E : (MACRO)             	Ccall _sendack
    1339/    1161 :                     ;			break;
    1340/    1161 :                     L119:
    1341/    1161 :                     L120:
    1342/    1161 :                     ;}
    1343/    1161 :                     L118:
    1344/    1161 : (MACRO)             	release 4
    1345/    1165 : (MACRO)             	Cretn
    1346/    1166 :                     
    1347/    1166 :                     _handlesession:
    1348/    1166 : (MACRO)             	pushr r7
    1349/    116B : (MACRO)             	reserve 4; save room for outgoing arguments
    1350/    116F :                     ;void handlesession(){	//handle a session once it's established
    1351/    116F :                     ;	rsize=recv_size();
    1352/    116F : (MACRO)             	Ccall _recv_size;CALLU2(ar)*
    1353/    1172 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1354/    1176 :                     ;	printf("rsz=%d\n",rsize);
    1355/    1176 : (MACRO)             	ldaD R12,L126; reg:acon
    1356/    117C : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1357/    1180 : (MACRO)             	Ccall _printf
    1358/    1183 :                     ;	if (rsize>0){
    1359/    1183 : (MACRO)             	jzU2 r7,L127; EQ 0
    1360/    118B :                     ;		if (recv0(buf,rsize)>0){
    1361/    118B : (MACRO)             	ldaD R12,_buf; reg:acon
    1362/    1191 : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    1363/    1195 : (MACRO)             	Ccall _recv0;CALLU2(ar)*
    1364/    1198 : (MACRO)             	jzU2 r15,L129; EQ 0
    1365/    11A0 :                     ;			analyzeinput();
    1366/    11A0 : (MACRO)             	Ccall _analyzeinput
    1367/    11A3 :                     ;			sendresponse();
    1368/    11A3 : (MACRO)             	Ccall _sendresponse
    1369/    11A6 :                     ;			disconnect0();
    1370/    11A6 : (MACRO)             	Ccall _disconnect0
    1371/    11A9 :                     ;		}
    1372/    11A9 :                     L129:
    1373/    11A9 :                     ;	}
    1374/    11A9 :                     L127:
    1375/    11A9 :                     ;}
    1376/    11A9 :                     L125:
    1377/    11A9 : (MACRO)             	release 4; release room for outgoing arguments
    1378/    11AD : (MACRO)             	popr r7
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 24 - 6/18/2013 11:03:18


    1379/    11B1 : (MACRO)             	Cretn
    1380/    11B2 :                     
    1381/    11B2 :                     _server_loop:
    1382/    11B2 : (MACRO)             	reserve 6
    1383/    11B8 :                     ;void server_loop(){
    1384/    11B8 :                     ;  	socketstatus=SPI_Read(S0_SR);
    1385/    11B8 : (MACRO)             	ldaD R12,1027; reg:acon
    1386/    11BE : (MACRO)             	Ccall _SPI_Read; CALLI2(ar)
    1387/    11C1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1388/    11C5 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1389/    11C8 : (MACRO)             	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
    1390/    11D5 :                     ;  	switch (socketstatus){
    1391/    11D5 : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1392/    11E1 : (MACRO)             	ld2z R10
    1393/    11E5 : (MACRO)             	jzU2 r11,L134; EQ 0
    1394/    11ED : (MACRO)             	jcI2 r11,r10,lbnf,L132; LT=lbnf i.e. subtract B from A and jump if borrow 
    1395/    1201 :                     L140:
    1396/    1201 : (MACRO)             	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
    1397/    120D : (MACRO)             	jcI2I r11,23,lbnf,L132  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1398/    121E : (MACRO)             	jnI2I r11,29,lbnf,L132; GT reverse  the subtraction
    1399/    122F : (MACRO)             	shl2I R11,1
    1400/    1235 : (MACRO)             	ld2 R11,'O',R11,(L141-46);reg:  INDIRP2(addr)
    1401/    1241 : (MACRO)             	jumpv r11; JUMPV(reg)
    1402/    124B :                     L141:
    1403/    124B : 12 68               	dw L136
    1404/    124D : 12 77               	dw L138
    1405/    124F : 12 83               	dw L132
    1406/    1251 : 12 77               	dw L138
    1407/    1253 : 12 77               	dw L138
    1408/    1255 : 12 77               	dw L138
    1409/    1257 : 12 77               	dw L138
    1410/    1259 :                     L134:
    1411/    1259 :                     ;	  	printf("SC\n");
    1412/    1259 : (MACRO)             	ldaD R12,L135; reg:acon
    1413/    125F : (MACRO)             	Ccall _printf
    1414/    1262 :                     ;			socket0_init();	//initialize socket 0
    1415/    1262 : (MACRO)             	Ccall _socket0_init
    1416/    1265 :                     ;	  		break;
    1417/    1265 : C0 12 83            	lbr L133
    1418/    1268 :                     L136:
    1419/    1268 :                     ;	  	printf("SX\n");
    1420/    1268 : (MACRO)             	ldaD R12,L137; reg:acon
    1421/    126E : (MACRO)             	Ccall _printf
    1422/    1271 :                     ;	  		handlesession();
    1423/    1271 : (MACRO)             	Ccall _handlesession
    1424/    1274 :                     ;	  		break;
    1425/    1274 : C0 12 83            	lbr L133
    1426/    1277 :                     L138:
    1427/    1277 :                     ;		  	printf("CS\n");
    1428/    1277 : (MACRO)             	ldaD R12,L139; reg:acon
    1429/    127D : (MACRO)             	Ccall _printf
    1430/    1280 :                     ;      		close0();
    1431/    1280 : (MACRO)             	Ccall _close0
    1432/    1283 :                     ;      		break;
    1433/    1283 :                     L132:
    1434/    1283 :                     L133:
    1435/    1283 :                     ;}
    1436/    1283 :                     L131:
    1437/    1283 : (MACRO)             	release 6
    1438/    1289 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 25 - 6/18/2013 11:03:18


    1439/    128A :                     
    1440/    128A :                     _main: ;copt is peeping you now!
    1441/    128A : (MACRO)             	reserve 12
    1442/    1294 :                     ;void main(void){
    1443/    1294 :                     ;	ledmode=1;
    1444/    1294 : (MACRO)             	ldaD R11,1; reg:acon
    1445/    129A : (MACRO)             	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
    1446/    12A5 :                     ;	digitalWrite(0,HIGH);
    1447/    12A5 : (MACRO)             	ld2z R12
    1448/    12A9 : (MACRO)             	ldaD R13,1; reg:acon
    1449/    12AF : (MACRO)             	Ccall _digitalWrite
    1450/    12B2 :                     ;	delay(1000);
    1451/    12B2 : (MACRO)             	ldaD R12,1000; reg:acon
    1452/    12B8 : (MACRO)             	Ccall _delay
    1453/    12BB :                     ;	printf("\nOlduino Web Server v2.1\n");
    1454/    12BB : (MACRO)             	ldaD R12,L144; reg:acon
    1455/    12C1 : (MACRO)             	Ccall _printf
    1456/    12C4 :                     ;    W5100_Init(); //initialize the wiznet chip
    1457/    12C4 : (MACRO)             	Ccall _W5100_Init
    1458/    12C7 : C0 12 D6            	lbr L146
    1459/    12CA :                     L145:
    1460/    12CA :                     ;	while(1){  // Loop forever
    1461/    12CA :                     ;		server_loop();
    1462/    12CA : (MACRO)             	Ccall _server_loop
    1463/    12CD :                     ;		delay(100);
    1464/    12CD : (MACRO)             	ldaD R12,100; reg:acon
    1465/    12D3 : (MACRO)             	Ccall _delay
    1466/    12D6 :                     ;	}
    1467/    12D6 :                     L146:
    1468/    12D6 :                     ;	while(1){  // Loop forever
    1469/    12D6 : C0 12 CA            	lbr L145
    1470/    12D9 :                     ;}
    1471/    12D9 :                     L143:
    1472/    12D9 : (MACRO)             	release 12
    1473/    12E1 : (MACRO)             	Cretn
    1474/    12E2 :                     
    1475/    12E2 :                     _delay:
    1476/    12E2 : (MACRO)             	pushr r6
    1477/    12E7 : (MACRO)             	pushr r7
    1478/    12EC : (MACRO)             	reserve 4; save room for outgoing arguments
    1479/    12F0 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1480/    12F4 :                     ;void delay(unsigned int howlong){
    1481/    12F4 :                     ;	for (i=1;i!=howlong;i++){
    1482/    12F4 : (MACRO)             	ldaD R6,1; reg:acon
    1483/    12FA : C0 13 01            	lbr L152
    1484/    12FD :                     L149:
    1485/    12FD :                     ;		oneMs();
    1486/    12FD : (MACRO)             	Ccall _oneMs; CALLI2(ar)
    1487/    1300 :                     ;	}
    1488/    1300 :                     L150:
    1489/    1300 :                     ;	for (i=1;i!=howlong;i++){
    1490/    1300 : (MACRO)             	incm R6,1
    1491/    1301 :                     L152:
    1492/    1301 : (MACRO)             	jneU2 r6,r7,L149; NE
    1493/    1313 :                     ;}
    1494/    1313 :                     L148:
    1495/    1313 : (MACRO)             	release 4; release room for outgoing arguments
    1496/    1317 : (MACRO)             	popr r7
    1497/    131B : (MACRO)             	popr r6
    1498/    131F : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 26 - 6/18/2013 11:03:18


    1499/    1320 :                     
    1500/    1320 :                     _olduinoincluder:
    1501/    1320 :                     ;void olduinoincluder(){
    1502/    1320 :                     ;	asm("\tinclude olduino.inc\n");
    1503/    1320 :                     	include olduino.inc
(1)    1/    1320 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    1320 :                     ;may 31 - incredibly, there's an error in digitalWrite.  lda2 changed to ldAD
(1)    3/    1320 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    1320 :                     	align 64	;needed to make sure all on same page
(1)    5/    1340 :                     _digitalWrite:
(1)    6/    1340 : 8C                  	glo regArg1	;get the bit number
(1)    7/    1341 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/    1343 : AE                  	plo memaddr
(1)    9/    1344 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    1345 : BE                  	phi memaddr	
(1)   11/    1346 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    1347 : A8                  	plo rt1		;save it in a temp
(1)   13/    1348 : (MACRO)             	ldAD memaddr,_PIN4 ;address the current port value
(1)   14/    134E : EE                  	sex memaddr	;prepare to change it
(1)   15/    134F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    1350 : 32 57               	bz $$setbitoff
(1)   17/    1352 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    1352 : 88                  	glo rt1		;get the bit value back
(1)   19/    1353 : F1                  	or		;apply it
(1)   20/    1354 : 5E                  	str memaddr	;and save it
(1)   21/    1355 : 30 5C               	br $$outit	;go fnish up
(1)   22/    1357 :                     $$setbitoff:
(1)   23/    1357 : 88                  	glo rt1		;get the bit pattern
(1)   24/    1358 : FB FF               	xri 0xff	;reverse it
(1)   25/    135A : F2                  	and		;combine it with the existing pin value
(1)   26/    135B : 5E                  	str memaddr	;and save it
(1)   27/    135C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    135C :                     $$outit:
(1)   29/    135C : 64                  	out 4		;X was already set to memaddr
(1)   30/    135D : E2                  	sex sp		;reset X
(1)   31/    135E : (MACRO)             	cretn
(1)   32/    135F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    1367 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    1367 :                     	align 8	;protect jump boundary
(1)   35/    1368 :                     _digitalRead:
(1)   36/    1368 : F8 00               	ldi 0		;default is false
(1)   37/    136A : AF                  	plo R15
(1)   38/    136B : BF                  	phi R15
(1)   39/    136C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    136E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    136F : (MACRO)             +	cretn
(1)   42/    1370 :                     
    1504/    1370 :                     ;}
    1505/    1370 :                     L153:
    1506/    1370 : (MACRO)             	Cretn
    1507/    1371 :                     
    1508/    1371 :                     _strncmp:
    1509/    1371 : (MACRO)             	pushr r6
    1510/    1376 : (MACRO)             	pushr r7
    1511/    137B : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1512/    1387 :                     ;{
    1513/    1387 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1514/    1387 : C0 14 0A            	lbr L159
    1515/    138A :                     L156:
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 27 - 6/18/2013 11:03:18


    1516/    138A :                     ;	if (*s1 != *s2)
    1517/    138A : (MACRO)             	ld1 R11,'O',R12,0
    1518/    1394 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1519/    1397 : (MACRO)             	ld1 R10,'O',R13,0
    1520/    13A1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1521/    13A4 : (MACRO)             	jeqI2 r11,r10,L160; EQI2(reg,reg)
    1522/    13B6 :                     ;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    1523/    13B6 : (MACRO)             	ld1 R11,'O',R12,0
    1524/    13C0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1525/    13C3 : (MACRO)             	ld1 R10,'O',R13,0
    1526/    13CD : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1527/    13D0 : (MACRO)             	jcI2 r11,r10,lbdf,L163; GE is flipped test from LT
    1528/    13E4 : (MACRO)             	ldaD R6,-1; reg:acon
    1529/    13EA : C0 13 F3            	lbr L164
    1530/    13ED :                     L163:
    1531/    13ED : (MACRO)             	ldaD R6,1; reg:acon
    1532/    13F3 :                     L164:
    1533/    13F3 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    1534/    13F7 : C0 14 16            	lbr L155
    1535/    13FA :                     L160:
    1536/    13FA :                     ;	else if (*s1 == '\0')
    1537/    13FA : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1538/    13FC : (MACRO)             	jnzU1 r11,L165; NEI2(CVUI2(reg),con0)
    1539/    1400 :                     ;	    return 0;
    1540/    1400 : (MACRO)             	ld2z R15
    1541/    1404 : C0 14 16            	lbr L155
    1542/    1407 :                     L165:
    1543/    1407 :                     L157:
    1544/    1407 :                     ;    for ( ; n > 0; s1++, s2++, --n)
    1545/    1407 : (MACRO)             	incm R12,1
    1546/    1408 : (MACRO)             	incm R13,1
    1547/    1409 : (MACRO)             	decm R7,1
    1548/    140A :                     L159:
    1549/    140A : (MACRO)             	jnzU2 r7,L156; NE 0
    1550/    1412 :                     ;    return 0;
    1551/    1412 : (MACRO)             	ld2z R15
    1552/    1416 :                     L155:
    1553/    1416 : (MACRO)             	popr r7
    1554/    141A : (MACRO)             	popr r6
    1555/    141E : (MACRO)             	Cretn
    1556/    141F :                     
    1557/    141F :                     _strcpy:
    1558/    141F : (MACRO)             	reserve 2
    1559/    1421 :                     ;{
    1560/    1421 :                     ;	char *save = to;
    1561/    1421 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    1562/    142E :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    1563/    142E : C0 14 33            	lbr L171
    1564/    1431 :                     L168:
    1565/    1431 :                     L169:
    1566/    1431 : (MACRO)             	incm R13,1
    1567/    1432 : (MACRO)             	incm R12,1
    1568/    1433 :                     L171:
    1569/    1433 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    1570/    1435 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    1571/    1437 : (MACRO)             	jnzU1 r11,L168; NEI2(CVUI2(reg),con0)
    1572/    143B :                     ;	return(save);
    1573/    143B : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    1574/    1447 :                     L167:
    1575/    1447 : (MACRO)             	release 2
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 28 - 6/18/2013 11:03:18


    1576/    1449 : (MACRO)             	Cretn
    1577/    144A :                     
    1578/    144A :                     _strlen:
    1579/    144A : (MACRO)             	pushr r7
    1580/    144F :                     ;{
    1581/    144F :                     ;	unsigned int slen = 0 ;
    1582/    144F : (MACRO)             	ld2z R7
    1583/    1453 : C0 14 58            	lbr L174
    1584/    1456 :                     L173:
    1585/    1456 :                     ;	while (*str != 0) {
    1586/    1456 :                     ;      slen++ ;
    1587/    1456 : (MACRO)             	incm R7,1
    1588/    1457 :                     ;      str++ ;
    1589/    1457 : (MACRO)             	incm R12,1
    1590/    1458 :                     ;   }
    1591/    1458 :                     L174:
    1592/    1458 :                     ;	while (*str != 0) {
    1593/    1458 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
    1594/    145A : (MACRO)             	jnzU1 r11,L173; NEI2(CVUI2(reg),con0)
    1595/    145E :                     ;   return slen;
    1596/    145E : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1597/    1462 :                     L172:
    1598/    1462 : (MACRO)             	popr r7
    1599/    1466 : (MACRO)             	Cretn
    1600/    1467 :                     
    1601/    1467 :                     _printstr:
    1602/    1467 : (MACRO)             	pushr r7
    1603/    146C : (MACRO)             	reserve 4; save room for outgoing arguments
    1604/    1470 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    1605/    1474 :                     ;void printstr(char *ptr){
    1606/    1474 : C0 14 92            	lbr L178
    1607/    1477 :                     L177:
    1608/    1477 :                     ;    while(*ptr) out(5,*ptr++);
    1609/    1477 : (MACRO)             	ldaD R12,5; reg:acon
    1610/    147D : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) opt1
    1611/    1481 : (MACRO)             	incm R7,1
    1612/    1482 : (MACRO)             	ld1 R13,'O',R11,0
    1613/    148C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1614/    148F : (MACRO)             	Ccall _out; CALLI2(ar)
    1615/    1492 :                     L178:
    1616/    1492 : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
    1617/    1494 : (MACRO)             	jnzU1 r11,L177; NEI2(CVUI2(reg),con0)
    1618/    1498 :                     ;}
    1619/    1498 :                     L176:
    1620/    1498 : (MACRO)             	release 4; release room for outgoing arguments
    1621/    149C : (MACRO)             	popr r7
    1622/    14A0 : (MACRO)             	Cretn
    1623/    14A1 :                     
    1624/    14A1 :                     	align 4
    1625/    14A4 :                     _round_nums:
    1626/    14A4 : 3F 00 00 00         	dd 0x3f000000
    1627/    14A8 : 3D 4C CC CD         	dd 0x3d4ccccd
    1628/    14AC : 3B A3 D7 0A         	dd 0x3ba3d70a
    1629/    14B0 : 3A 03 12 6F         	dd 0x3a03126f
    1630/    14B4 : 38 51 B7 17         	dd 0x3851b717
    1631/    14B8 : 36 A7 C5 AC         	dd 0x36a7c5ac
    1632/    14BC : 35 06 37 BD         	dd 0x350637bd
    1633/    14C0 : 33 56 BF 95         	dd 0x3356bf95
    1634/    14C4 :                     	align 4
    1635/    14C4 :                     _mult_nums:
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 29 - 6/18/2013 11:03:18


    1636/    14C4 : 3F 80 00 00         	dd 0x3f800000
    1637/    14C8 : 41 20 00 00         	dd 0x41200000
    1638/    14CC : 42 C8 00 00         	dd 0x42c80000
    1639/    14D0 : 44 7A 00 00         	dd 0x447a0000
    1640/    14D4 : 46 1C 40 00         	dd 0x461c4000
    1641/    14D8 : 47 C3 50 00         	dd 0x47c35000
    1642/    14DC : 49 74 24 00         	dd 0x49742400
    1643/    14E0 : 4B 18 96 80         	dd 0x4b189680
    1644/    14E4 :                     _ftoa:
    1645/    14E4 : (MACRO)             	reserve 62; save room for local variables
    1646/    14EE : (MACRO)             	pushr r0
    1647/    14F3 : (MACRO)             	pushr r1
    1648/    14F8 : (MACRO)             	pushr r6
    1649/    14FD : (MACRO)             	pushr r7
    1650/    1502 : (MACRO)             	reserve 8; save room for outgoing arguments
    1651/    150A : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
    1652/    1512 : (MACRO)             	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
    1653/    151E :                     ;{
    1654/    151E :                     ;   char *output = outbfr ;
    1655/    151E : (MACRO)             	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
    1656/    152A :                     ;   if (flt < 0.0) {
    1657/    152A : (MACRO)             	ld4 RL10,'D',(L183),0;INDIRF4(addr)
    1658/    1538 : (MACRO)             	jcF4 RL6,RL10,lbdf,L181;GEF4(reg,reg) - reverse test
    1659/    157D :                     ;      *output++ = '-' ;
    1660/    157D : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1661/    1581 : (MACRO)             	incm R0,1
    1662/    1582 : (MACRO)             	ldaD R10,45; reg:acon
    1663/    1588 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1664/    158A :                     ;      flt *= -1.0 ;
    1665/    158A : (MACRO)             	ld4 RL8,'D',(L184),0;INDIRF4(addr)
    1666/    1598 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
    1667/    15A0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1668/    15A3 : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1669/    15AB :                     ;   } else {
    1670/    15AB : C0 15 BE            	lbr L182
    1671/    15AE :                     L181:
    1672/    15AE :                     ;      if (use_leading_plus) {
    1673/    15AE : C0 15 BE            	lbr L185
    1674/    15B1 :                     ;         *output++ = '+' ;
    1675/    15B1 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1676/    15B5 : (MACRO)             	incm R0,1
    1677/    15B6 : (MACRO)             	ldaD R10,43; reg:acon
    1678/    15BC : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1679/    15BE :                     ;      }
    1680/    15BE :                     L185:
    1681/    15BE :                     ;   }
    1682/    15BE :                     L182:
    1683/    15BE :                     ;   if (dec_digits < 8) {
    1684/    15BE : (MACRO)             	jcI2I r1,8,lbdf,L187; GE is flipped test from LT
    1685/    15CF :                     ;      flt += round_nums[dec_digits] ;
    1686/    15CF : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1687/    15D7 : (MACRO)             	cpy2 R11,R1
    1688/    15DB : (MACRO)             	shl2I R11,2
    1689/    15E7 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
    1690/    15F7 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
    1691/    15FA : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
    1692/    1602 :                     ;   }
    1693/    1602 :                     L187:
    1694/    1602 :                     ;	mult=mult_nums[dec_digits];
    1695/    1602 : (MACRO)             	cpy2 R11,R1
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 30 - 6/18/2013 11:03:18


    1696/    1606 : (MACRO)             	shl2I R11,2
    1697/    1612 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
    1698/    1622 : (MACRO)             	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
    1699/    1635 :                     ;   wholeNum = flt;
    1700/    1635 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1701/    163D : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1702/    1640 : (MACRO)             	st4 RL8,'O',sp,(-8+80)
    1703/    1653 :                     ;   decimalNum = ((flt - wholeNum) * mult);
    1704/    1653 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
    1705/    165B : (MACRO)             	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
    1706/    166E : (MACRO)             	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1707/    167E : (MACRO)             	Ccall cvif4; emit2
    1708/    1681 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1709/    1689 : (MACRO)             	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
    1710/    1699 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
    1711/    169C : (MACRO)             	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
    1712/    16AC : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
    1713/    16AF : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
    1714/    16B2 : (MACRO)             	st4 RL8,'O',sp,(-16+80)
    1715/    16C5 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
    1716/    16C5 : (MACRO)             	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
    1717/    16D5 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1718/    16E2 : (MACRO)             	ldaD R11,1; reg:acon
    1719/    16E8 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1720/    16F5 : (MACRO)             	Ccall _dubdabx
    1721/    16F8 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1722/    16FC : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1723/    1700 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1724/    1704 : (MACRO)             	Ccall _strcpy
    1725/    1707 :                     ;   output+=strlen(output);
    1726/    1707 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1727/    170B : (MACRO)             	Ccall _strlen;CALLU2(ar)*
    1728/    170E : (MACRO)             	alu2 R0,R15,R0,add,adc
    1729/    171A :                     ;   if (dec_digits > 0) {
    1730/    171A : (MACRO)             	jzU2 r1,L189; EQ 0
    1731/    1722 :                     ;		*output++ = '.' ;
    1732/    1722 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg) opt1
    1733/    1726 : (MACRO)             	incm R0,1
    1734/    1727 : (MACRO)             	ldaD R10,46; reg:acon
    1735/    172D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1736/    172F :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
    1737/    172F : (MACRO)             	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
    1738/    173F : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
    1739/    174C : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)*
    1740/    1750 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1741/    175D : (MACRO)             	Ccall _dubdabx
    1742/    1760 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1743/    1764 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
    1744/    1768 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1745/    176C : (MACRO)             	Ccall _strcpy
    1746/    176F :                     ;	}
    1747/    176F :                     L189:
    1748/    176F :                     ;   return outbfr;
    1749/    176F : (MACRO)             	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
    1750/    177B :                     L180:
    1751/    177B : (MACRO)             	release 8; release room for outgoing arguments
    1752/    1783 : (MACRO)             	popr r7
    1753/    1787 : (MACRO)             	popr r6
    1754/    178B : (MACRO)             	popr r1
    1755/    178F : (MACRO)             	popr r0
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 31 - 6/18/2013 11:03:18


    1756/    1793 : (MACRO)             	release 62; release room for local variables 
    1757/    179B : (MACRO)             	Cretn
    1758/    179C :                     
    1759/    179C :                     _itoa:
    1760/    179C : (MACRO)             	reserve 2; save room for local variables
    1761/    179E : (MACRO)             	pushr r0
    1762/    17A3 : (MACRO)             	pushr r1
    1763/    17A8 : (MACRO)             	pushr r6
    1764/    17AD : (MACRO)             	pushr r7
    1765/    17B2 : (MACRO)             	reserve 4; save room for outgoing arguments
    1766/    17B6 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1767/    17C3 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    1768/    17D0 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1769/    17D0 :                     ;	unsigned int flag=0;
    1770/    17D0 : (MACRO)             	ld2z R0
    1771/    17D4 :                     ;	char * bptr; bptr=buffer;
    1772/    17D4 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1773/    17E0 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1774/    17ED :                     ;	if (s<0){
    1775/    17ED : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1776/    17F9 : (MACRO)             	jcI2I r11,0,lbdf,L192; GE is flipped test from LT
    1777/    180A :                     ;		*bptr='-';bptr++;
    1778/    180A : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1779/    1816 : (MACRO)             	ldaD R10,45; reg:acon
    1780/    181C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1781/    181E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1782/    182A : (MACRO)             	incm R11,1
    1783/    182B : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1784/    1838 :                     ;		n=-s;
    1785/    1838 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1786/    1844 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1787/    184D : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1788/    1851 :                     ;	} else{
    1789/    1851 : C0 18 64            	lbr L193
    1790/    1854 :                     L192:
    1791/    1854 :                     ;		n=s;
    1792/    1854 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1793/    1860 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
    1794/    1864 :                     ;	}
    1795/    1864 :                     L193:
    1796/    1864 :                     ;	k=10000;
    1797/    1864 : (MACRO)             	ldaD R7,10000; reg:acon
    1798/    186A : C0 18 F1            	lbr L195
    1799/    186D :                     L194:
    1800/    186D :                     ;	while(k>0){
    1801/    186D :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1802/    186D : (MACRO)             	ld2z R1
    1803/    1871 : C0 18 81            	lbr L200
    1804/    1874 :                     L197:
    1805/    1874 :                     L198:
    1806/    1874 : (MACRO)             	incm R1,1
    1807/    1875 : (MACRO)             	alu2 R6,R6,R7,sm,smb
    1808/    1881 :                     L200:
    1809/    1881 : (MACRO)             	jcU2 r6,r7,lbdf,L197 ;LE is flipped test & operands
    1810/    188E :                     ;		if (flag || r>0||k==1){
    1811/    188E : (MACRO)             	jnzU2 r0,L204; NE 0
    1812/    1896 : (MACRO)             	jnzU2 r1,L204; NE 0
    1813/    189E : (MACRO)             	jneU2I r7,1,L201; NE
    1814/    18AA :                     L204:
    1815/    18AA :                     ;			*bptr=('0'+r);bptr++;
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 32 - 6/18/2013 11:03:18


    1816/    18AA : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1817/    18B6 : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    1818/    18BE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1819/    18C0 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1820/    18CC : (MACRO)             	incm R11,1
    1821/    18CD : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1822/    18DA :                     ;			flag='y';
    1823/    18DA : (MACRO)             	ldaD R0,121; reg:acon
    1824/    18E0 :                     ;		}
    1825/    18E0 :                     L201:
    1826/    18E0 :                     ;		k=k/10;
    1827/    18E0 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1828/    18E4 : (MACRO)             	ldaD R13,10; reg:acon
    1829/    18EA : (MACRO)             	Ccall _divu2
    1830/    18ED : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
    1831/    18F1 :                     ;	}
    1832/    18F1 :                     L195:
    1833/    18F1 :                     ;	while(k>0){
    1834/    18F1 : (MACRO)             	jnzU2 r7,L194; NE 0
    1835/    18F9 :                     ;	*bptr='\0';
    1836/    18F9 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    1837/    1905 : (MACRO)             	ldaD R10,0; reg:acon
    1838/    190B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1839/    190D :                     ;	return buffer;
    1840/    190D : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1841/    1919 :                     L191:
    1842/    1919 : (MACRO)             	release 4; release room for outgoing arguments
    1843/    191D : (MACRO)             	popr r7
    1844/    1921 : (MACRO)             	popr r6
    1845/    1925 : (MACRO)             	popr r1
    1846/    1929 : (MACRO)             	popr r0
    1847/    192D : (MACRO)             	release 2; release room for local variables 
    1848/    192F : (MACRO)             	Cretn
    1849/    1930 :                     
    1850/    1930 :                     _ltoa:
    1851/    1930 : (MACRO)             	pushr r1
    1852/    1935 : (MACRO)             	pushr r6
    1853/    193A : (MACRO)             	pushr r7
    1854/    193F : (MACRO)             	reserve 8; save room for outgoing arguments
    1855/    1947 : (MACRO)             	cpy4 RL6,RL12; halfbaked
    1856/    194F :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1857/    194F :                     ;	char* bptr=buffer;
    1858/    194F : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
    1859/    195B :                     ;	if (s<0){
    1860/    195B : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1861/    1967 : (MACRO)             	jcI4 RL6,RL10,lbdf,L206; GE is flipped test from LT
    1862/    1983 :                     ;		*bptr++='-';
    1863/    1983 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    1864/    1987 : (MACRO)             	incm R1,1
    1865/    1988 : (MACRO)             	ldaD R10,45; reg:acon
    1866/    198E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1867/    1990 :                     ;		s=-s;
    1868/    1990 : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
    1869/    19B0 :                     ;	}
    1870/    19B0 :                     L206:
    1871/    19B0 :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    1872/    19B0 : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
    1873/    19B8 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
    1874/    19C5 : (MACRO)             	ldaD R11,1; reg:acon
    1875/    19CB : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 33 - 6/18/2013 11:03:18


    1876/    19D8 : (MACRO)             	Ccall _dubdabx
    1877/    19DB : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1878/    19DF : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
    1879/    19E3 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1880/    19E7 : (MACRO)             	Ccall _strcpy
    1881/    19EA :                     ;	return buffer;
    1882/    19EA : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    1883/    19F6 :                     L205:
    1884/    19F6 : (MACRO)             	release 8; release room for outgoing arguments
    1885/    19FE : (MACRO)             	popr r7
    1886/    1A02 : (MACRO)             	popr r6
    1887/    1A06 : (MACRO)             	popr r1
    1888/    1A0A : (MACRO)             	Cretn
    1889/    1A0B :                     
    1890/    1A0B :                     _printint:
    1891/    1A0B : (MACRO)             	reserve 12
    1892/    1A15 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1893/    1A22 :                     ;void printint(int s){ //print an integer
    1894/    1A22 :                     ;	itoa(s,buffer);
    1895/    1A22 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1896/    1A2E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1897/    1A36 : (MACRO)             	Ccall _itoa
    1898/    1A39 :                     ;	printstr(buffer);
    1899/    1A39 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1900/    1A41 : (MACRO)             	Ccall _printstr
    1901/    1A44 :                     ;}
    1902/    1A44 :                     L208:
    1903/    1A44 : (MACRO)             	release 12
    1904/    1A4C : (MACRO)             	Cretn
    1905/    1A4D :                     
    1906/    1A4D :                     _printlint:
    1907/    1A4D : (MACRO)             	reserve 18
    1908/    1A57 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1909/    1A64 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1910/    1A71 :                     ;void printlint(long s){ //print a long integer
    1911/    1A71 :                     ;	printstr(ltoa(s,buffer));
    1912/    1A71 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    1913/    1A81 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1914/    1A89 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1915/    1A96 : (MACRO)             	Ccall _ltoa
    1916/    1A99 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1917/    1A9D : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1918/    1AA1 : (MACRO)             	Ccall _printstr
    1919/    1AA4 :                     ;}
    1920/    1AA4 :                     L209:
    1921/    1AA4 : (MACRO)             	release 18
    1922/    1AAC : (MACRO)             	Cretn
    1923/    1AAD :                     
    1924/    1AAD :                     _printflt:
    1925/    1AAD : (MACRO)             	reserve 28
    1926/    1AB7 : (MACRO)             	st2 r12,'O',sp,(30); flag1 
    1927/    1AC4 : (MACRO)             	st2 r13,'O',sp,(32); flag1 
    1928/    1AD1 :                     ;void printflt(float s){ //print a float
    1929/    1AD1 :                     ;	printstr(ftoa(s,buffer,3));
    1930/    1AD1 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
    1931/    1AE1 : (MACRO)             	ldA2 R11,'O',sp,(-22+30); reg:addr
    1932/    1AE9 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1933/    1AF6 : (MACRO)             	ldaD R11,3; reg:acon
    1934/    1AFC : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1935/    1B09 : (MACRO)             	Ccall _ftoa
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 34 - 6/18/2013 11:03:18


    1936/    1B0C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1937/    1B10 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1938/    1B14 : (MACRO)             	Ccall _printstr
    1939/    1B17 :                     ;}
    1940/    1B17 :                     L210:
    1941/    1B17 : (MACRO)             	release 28
    1942/    1B1F : (MACRO)             	Cretn
    1943/    1B20 :                     
    1944/    1B20 :                     _putxn:
    1945/    1B20 : (MACRO)             	reserve 4
    1946/    1B24 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1947/    1B31 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1948/    1B3D : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1949/    1B47 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1950/    1B47 :                     ;	if (x<10){
    1951/    1B47 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1952/    1B51 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1953/    1B54 : (MACRO)             	jcI2I r11,10,lbdf,L212; GE is flipped test from LT
    1954/    1B65 :                     ;		putc(x+'0');
    1955/    1B65 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1956/    1B6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1957/    1B72 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1958/    1B7A : (MACRO)             	cpy1 R12,R11
    1959/    1B7C : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1960/    1B7F : (MACRO)             	Ccall _putc
    1961/    1B82 :                     ;	} else {
    1962/    1B82 : C0 1B AA            	lbr L213
    1963/    1B85 :                     L212:
    1964/    1B85 :                     ;		putc(x+'A'-10);
    1965/    1B85 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1966/    1B8F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1967/    1B92 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1968/    1B9A : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1969/    1BA2 : (MACRO)             	cpy1 R12,R11
    1970/    1BA4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1971/    1BA7 : (MACRO)             	Ccall _putc
    1972/    1BAA :                     ;	}
    1973/    1BAA :                     L213:
    1974/    1BAA :                     ;}
    1975/    1BAA :                     L211:
    1976/    1BAA : (MACRO)             	release 4
    1977/    1BAE : (MACRO)             	Cretn
    1978/    1BAF :                     
    1979/    1BAF :                     _putx:
    1980/    1BAF : (MACRO)             	reserve 4
    1981/    1BB3 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1982/    1BC0 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1983/    1BCC : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1984/    1BD6 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1985/    1BD6 :                     ;	putxn(x>>4);
    1986/    1BD6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1987/    1BE0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1988/    1BE3 : (MACRO)             	shrI2I R11,4
    1989/    1C03 : (MACRO)             	cpy1 R12,R11
    1990/    1C05 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1991/    1C08 : (MACRO)             	Ccall _putxn
    1992/    1C0B :                     ;	putxn(x & 0x0F);
    1993/    1C0B : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1994/    1C15 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1995/    1C18 : (MACRO)             	alu2I R11,R11,15,ani,ani
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 35 - 6/18/2013 11:03:18


    1996/    1C20 :                     	;removed ?	cpy2 R11,R11
    1997/    1C20 : (MACRO)             	cpy1 R12,R11
    1998/    1C22 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    1999/    1C25 : (MACRO)             	Ccall _putxn
    2000/    1C28 :                     ;}
    2001/    1C28 :                     L214:
    2002/    1C28 : (MACRO)             	release 4
    2003/    1C2C : (MACRO)             	Cretn
    2004/    1C2D :                     
    2005/    1C2D :                     _printf:
    2006/    1C2D : (MACRO)             	reserve 2; save room for local variables
    2007/    1C2F : (MACRO)             	pushr r0
    2008/    1C34 : (MACRO)             	pushr r1
    2009/    1C39 : (MACRO)             	pushr r6
    2010/    1C3E : (MACRO)             	pushr r7
    2011/    1C43 : (MACRO)             	reserve 4; save room for outgoing arguments
    2012/    1C47 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2013/    1C54 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    2014/    1C61 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    2015/    1C61 :                     ;	int argslot=0;	//used to align longs
    2016/    1C61 : (MACRO)             	ld2z R1
    2017/    1C65 :                     ;	int * this=(int *)&ptr;
    2018/    1C65 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
    2019/    1C6D :                     ;	this++; argslot++; //advance argument pointer and slot #
    2020/    1C6D : (MACRO)             	incm R6,2
    2021/    1C6F : (MACRO)             	incm R1,1
    2022/    1C70 : C0 1F 74            	lbr L217
    2023/    1C73 :                     L216:
    2024/    1C73 :                     ;    while(*ptr) {
    2025/    1C73 :                     ;		c=*ptr++;
    2026/    1C73 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2027/    1C7F : (MACRO)             	cpy2 R10,R11
    2028/    1C83 : (MACRO)             	incm R10,1
    2029/    1C84 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2030/    1C91 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2031/    1C93 :                     ;		if (c!='%'){
    2032/    1C93 : (MACRO)             	cpy1 R11,R7
    2033/    1C95 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2034/    1C98 : (MACRO)             	jeqU2I r11,37,L219;EQI2(reg,con)
    2035/    1CA4 :                     ;			putc(c);
    2036/    1CA4 : (MACRO)             	cpy1 R12,R7
    2037/    1CA6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2038/    1CA9 : (MACRO)             	Ccall _putc
    2039/    1CAC :                     ;		} else{
    2040/    1CAC : C0 1F 74            	lbr L220
    2041/    1CAF :                     L219:
    2042/    1CAF :                     ;			c=*ptr++;
    2043/    1CAF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2044/    1CBB : (MACRO)             	cpy2 R10,R11
    2045/    1CBF : (MACRO)             	incm R10,1
    2046/    1CC0 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2047/    1CCD : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2048/    1CCF :                     ;			switch (c){
    2049/    1CCF : (MACRO)             	cpy1 R0,R7
    2050/    1CD1 : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2051/    1CD4 : (MACRO)             	jcI2I r0,99,lbnf,L240  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    2052/    1CE5 : (MACRO)             	jnI2I r0,108,lbnf,L241; GT reverse  the subtraction
    2053/    1CF6 : (MACRO)             	cpy2 R11,R0
    2054/    1CFA : (MACRO)             	shl2I R11,1
    2055/    1D00 : (MACRO)             	ld2 R11,'O',R11,(L242-198);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 36 - 6/18/2013 11:03:18


    2056/    1D0C : (MACRO)             	jumpv r11; JUMPV(reg)
    2057/    1D16 :                     L242:
    2058/    1D16 : 1D AA               	dw L226
    2059/    1D18 : 1D 74               	dw L224
    2060/    1D1A : 1F 63               	dw L221
    2061/    1D1C : 1F 13               	dw L235
    2062/    1D1E : 1F 63               	dw L221
    2063/    1D20 : 1F 63               	dw L221
    2064/    1D22 : 1D 74               	dw L224
    2065/    1D24 : 1F 63               	dw L221
    2066/    1D26 : 1F 63               	dw L221
    2067/    1D28 : 1E 07               	dw L228
    2068/    1D2A :                     L240:
    2069/    1D2A : (MACRO)             	jeqU2I r0,88,L227;EQI2(reg,con)
    2070/    1D36 : C0 1F 63            	lbr L221
    2071/    1D39 :                     L241:
    2072/    1D39 : (MACRO)             	ldaD R11,115; reg:acon
    2073/    1D3F : (MACRO)             	jeqI2 r0,r11,L225; EQI2(reg,reg)
    2074/    1D51 : (MACRO)             	jcI2 r0,r11,lbnf,L221; LT=lbnf i.e. subtract B from A and jump if borrow 
    2075/    1D65 :                     L244:
    2076/    1D65 : (MACRO)             	jeqU2I r0,120,L227;EQI2(reg,con)
    2077/    1D71 : C0 1F 63            	lbr L221
    2078/    1D74 :                     L224:
    2079/    1D74 :                     ;					printint(*this++);
    2080/    1D74 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2081/    1D78 : (MACRO)             	incm R6,2
    2082/    1D7A : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    2083/    1D86 : (MACRO)             	Ccall _printint
    2084/    1D89 :                     ;					argslot+=1; //next argument slot
    2085/    1D89 : (MACRO)             	incm R1,1
    2086/    1D8A :                     ;					break;
    2087/    1D8A : C0 1F 74            	lbr L222
    2088/    1D8D :                     L225:
    2089/    1D8D :                     ;					printstr((char*) *this++);
    2090/    1D8D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2091/    1D91 : (MACRO)             	incm R6,2
    2092/    1D93 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2093/    1D9F : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2094/    1DA3 : (MACRO)             	Ccall _printstr
    2095/    1DA6 :                     ;					argslot+=1; //next argument slot
    2096/    1DA6 : (MACRO)             	incm R1,1
    2097/    1DA7 :                     ;					break;
    2098/    1DA7 : C0 1F 74            	lbr L222
    2099/    1DAA :                     L226:
    2100/    1DAA :                     ;					putc((unsigned int) *this++);
    2101/    1DAA : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2102/    1DAE : (MACRO)             	incm R6,2
    2103/    1DB0 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2104/    1DBC : (MACRO)             	cpy1 R12,R11
    2105/    1DBE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2106/    1DC1 : (MACRO)             	Ccall _putc
    2107/    1DC4 :                     ;					argslot+=1; //next argument slot
    2108/    1DC4 : (MACRO)             	incm R1,1
    2109/    1DC5 :                     ;					break;
    2110/    1DC5 : C0 1F 74            	lbr L222
    2111/    1DC8 :                     L227:
    2112/    1DC8 :                     ;					putx(((unsigned int) *this)>>8);
    2113/    1DC8 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2114/    1DD4 : 9B                  	ghi	R11	;opt2
    2115/    1DD5 : AB                  	plo	R11
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 37 - 6/18/2013 11:03:18


    2116/    1DD6 : F8 00               	ldi	0
    2117/    1DD8 : BB                  	phi	R11
    2118/    1DD9 : (MACRO)             	cpy1 R12,R11
    2119/    1DDB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2120/    1DDE : (MACRO)             	Ccall _putx
    2121/    1DE1 :                     ;					putx(((unsigned int) *this++)&255);
    2122/    1DE1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2123/    1DE5 : (MACRO)             	incm R6,2
    2124/    1DE7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2125/    1DF3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2126/    1DFB : (MACRO)             	cpy1 R12,R11
    2127/    1DFD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2128/    1E00 : (MACRO)             	Ccall _putx
    2129/    1E03 :                     ;					argslot+=1; //next argument slot
    2130/    1E03 : (MACRO)             	incm R1,1
    2131/    1E04 :                     ;					break;
    2132/    1E04 : C0 1F 74            	lbr L222
    2133/    1E07 :                     L228:
    2134/    1E07 :                     ;					if (*ptr){ //as long as there's something there
    2135/    1E07 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2136/    1E13 : (MACRO)             	ld1 R11,'O',R11,0
    2137/    1E1D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2138/    1E20 : (MACRO)             	jzU2 r11,L229; EQ 0
    2139/    1E28 :                     ;						xord=*ptr++;
    2140/    1E28 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2141/    1E34 : (MACRO)             	cpy2 R10,R11
    2142/    1E38 : (MACRO)             	incm R10,1
    2143/    1E39 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2144/    1E46 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2145/    1E48 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    2146/    1E52 :                     ;						if (argslot&1) {
    2147/    1E52 : (MACRO)             	alu2I R11,R1,1,ani,ani
    2148/    1E5A :                     	;removed ?	cpy2 R11,R1
    2149/    1E5A : (MACRO)             	jzU2 r11,L231; EQ 0
    2150/    1E62 :                     ;							this++;
    2151/    1E62 : (MACRO)             	incm R6,2
    2152/    1E64 :                     ;							argslot++;
    2153/    1E64 : (MACRO)             	incm R1,1
    2154/    1E65 :                     ;						}
    2155/    1E65 :                     L231:
    2156/    1E65 :                     ;						if(xord=='d'){
    2157/    1E65 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    2158/    1E6F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2159/    1E72 : (MACRO)             	jneU2I r11,100,L233; NE
    2160/    1E7E :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    2161/    1E7E : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
    2162/    1E8E : (MACRO)             	Ccall _printlint
    2163/    1E91 :                     ;							this+=2;				// and advances it 4 bytes
    2164/    1E91 : (MACRO)             	incm R6,4
    2165/    1E95 :                     ;						} else{
    2166/    1E95 : C0 1F 0E            	lbr L234
    2167/    1E98 :                     L233:
    2168/    1E98 :                     ;							putx(((unsigned int) *this)>>8);
    2169/    1E98 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2170/    1EA4 : 9B                  	ghi	R11	;opt2
    2171/    1EA5 : AB                  	plo	R11
    2172/    1EA6 : F8 00               	ldi	0
    2173/    1EA8 : BB                  	phi	R11
    2174/    1EA9 : (MACRO)             	cpy1 R12,R11
    2175/    1EAB : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 38 - 6/18/2013 11:03:18


    2176/    1EAE : (MACRO)             	Ccall _putx
    2177/    1EB1 :                     ;							putx(((unsigned int) *this++)&255);
    2178/    1EB1 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2179/    1EB5 : (MACRO)             	incm R6,2
    2180/    1EB7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2181/    1EC3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2182/    1ECB : (MACRO)             	cpy1 R12,R11
    2183/    1ECD : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2184/    1ED0 : (MACRO)             	Ccall _putx
    2185/    1ED3 :                     ;							putx(((unsigned int) *this)>>8);
    2186/    1ED3 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
    2187/    1EDF : 9B                  	ghi	R11	;opt2
    2188/    1EE0 : AB                  	plo	R11
    2189/    1EE1 : F8 00               	ldi	0
    2190/    1EE3 : BB                  	phi	R11
    2191/    1EE4 : (MACRO)             	cpy1 R12,R11
    2192/    1EE6 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2193/    1EE9 : (MACRO)             	Ccall _putx
    2194/    1EEC :                     ;							putx(((unsigned int) *this++)&255);
    2195/    1EEC : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2196/    1EF0 : (MACRO)             	incm R6,2
    2197/    1EF2 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2198/    1EFE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2199/    1F06 : (MACRO)             	cpy1 R12,R11
    2200/    1F08 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2201/    1F0B : (MACRO)             	Ccall _putx
    2202/    1F0E :                     ;						}
    2203/    1F0E :                     L234:
    2204/    1F0E :                     ;						argslot+=2;
    2205/    1F0E : (MACRO)             	incm R1,2
    2206/    1F10 :                     ;						break;
    2207/    1F10 : C0 1F 74            	lbr L222
    2208/    1F13 :                     L229:
    2209/    1F13 :                     L235:
    2210/    1F13 :                     ;					if (*ptr){ //as long as there's something there
    2211/    1F13 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2212/    1F1F : (MACRO)             	ld1 R11,'O',R11,0
    2213/    1F29 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2214/    1F2C : (MACRO)             	jzU2 r11,L236; EQ 0
    2215/    1F34 :                     ;						if (argslot&1) { //adjust alignment
    2216/    1F34 : (MACRO)             	alu2I R11,R1,1,ani,ani
    2217/    1F3C :                     	;removed ?	cpy2 R11,R1
    2218/    1F3C : (MACRO)             	jzU2 r11,L238; EQ 0
    2219/    1F44 :                     ;							this++;
    2220/    1F44 : (MACRO)             	incm R6,2
    2221/    1F46 :                     ;							argslot++;
    2222/    1F46 : (MACRO)             	incm R1,1
    2223/    1F47 :                     ;						}
    2224/    1F47 :                     L238:
    2225/    1F47 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    2226/    1F47 : (MACRO)             	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
    2227/    1F57 : (MACRO)             	Ccall _printflt
    2228/    1F5A :                     ;						this+=2;				// and advances it 4 bytes
    2229/    1F5A : (MACRO)             	incm R6,4
    2230/    1F5E :                     ;						argslot+=2;
    2231/    1F5E : (MACRO)             	incm R1,2
    2232/    1F60 :                     ;						break;
    2233/    1F60 : C0 1F 74            	lbr L222
    2234/    1F63 :                     L236:
    2235/    1F63 :                     L221:
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 39 - 6/18/2013 11:03:18


    2236/    1F63 :                     ;					putc('%');putc(c);
    2237/    1F63 : (MACRO)             	ldaD R12,37; reg:acon
    2238/    1F69 : (MACRO)             	Ccall _putc
    2239/    1F6C : (MACRO)             	cpy1 R12,R7
    2240/    1F6E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
    2241/    1F71 : (MACRO)             	Ccall _putc
    2242/    1F74 :                     ;			} //switch
    2243/    1F74 :                     L222:
    2244/    1F74 :                     ;		} //%
    2245/    1F74 :                     L220:
    2246/    1F74 :                     ;	} //while
    2247/    1F74 :                     L217:
    2248/    1F74 :                     ;    while(*ptr) {
    2249/    1F74 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2250/    1F80 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2251/    1F82 : (MACRO)             	jnzU1 r11,L216; NEI2(CVUI2(reg),con0)
    2252/    1F86 :                     ;} //prtf
    2253/    1F86 :                     L215:
    2254/    1F86 : (MACRO)             	release 4; release room for outgoing arguments
    2255/    1F8A : (MACRO)             	popr r7
    2256/    1F8E : (MACRO)             	popr r6
    2257/    1F92 : (MACRO)             	popr r1
    2258/    1F96 : (MACRO)             	popr r0
    2259/    1F9A : (MACRO)             	release 2; release room for local variables 
    2260/    1F9C : (MACRO)             	Cretn
    2261/    1F9D :                     
    2262/    1F9D :                     _exit:
    2263/    1F9D : (MACRO)             	reserve 4
    2264/    1FA1 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2265/    1FAE :                     ;void exit(int code){
    2266/    1FAE :                     ;	printf("exit %d\n",code);
    2267/    1FAE : (MACRO)             	ldaD R12,L246; reg:acon
    2268/    1FB4 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2269/    1FC0 : (MACRO)             	Ccall _printf
    2270/    1FC3 :                     L247:
    2271/    1FC3 :                     ;	while(1);
    2272/    1FC3 :                     L248:
    2273/    1FC3 : C0 1F C3            	lbr L247
    2274/    1FC6 :                     ;}
    2275/    1FC6 :                     L245:
    2276/    1FC6 : (MACRO)             	release 4
    2277/    1FCA : (MACRO)             	Cretn
    2278/    1FCB :                     
    2279/    1FCB :                     _memcmp:
    2280/    1FCB : (MACRO)             	pushr r0
    2281/    1FD0 : (MACRO)             	pushr r1
    2282/    1FD5 : (MACRO)             	pushr r6
    2283/    1FDA : (MACRO)             	pushr r7
    2284/    1FDF : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    2285/    1FEB :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    2286/    1FEB :                     ;    int v = 0;
    2287/    1FEB : (MACRO)             	ld2z R6
    2288/    1FEF :                     ;    p1 = (unsigned char *)Ptr1;
    2289/    1FEF : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    2290/    1FF3 :                     ;    p2 = (unsigned char *)Ptr2;
    2291/    1FF3 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    2292/    1FF7 : C0 20 2A            	lbr L252
    2293/    1FFA :                     L251:
    2294/    1FFA :                     ;    while(Count-- > 0 && v == 0) {
    2295/    1FFA :                     ;        v = *(p1++) - *(p2++);
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 40 - 6/18/2013 11:03:18


    2296/    1FFA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg) opt1
    2297/    1FFE : (MACRO)             	incm R1,1
    2298/    1FFF : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg) opt1
    2299/    2003 : (MACRO)             	incm R0,1
    2300/    2004 : (MACRO)             	ld1 R11,'O',R11,0
    2301/    200E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2302/    2011 : (MACRO)             	ld1 R10,'O',R10,0
    2303/    201B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2304/    201E : (MACRO)             	alu2 R6,R11,R10,sm,smb
    2305/    202A :                     ;    }
    2306/    202A :                     L252:
    2307/    202A :                     ;    while(Count-- > 0 && v == 0) {
    2308/    202A : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2309/    202E : (MACRO)             	cpy2 R7,R11
    2310/    2032 : (MACRO)             	decm R7,1
    2311/    2033 : (MACRO)             	jzU2 r11,L254; EQ 0
    2312/    203B : (MACRO)             	jzU2 r6,L251; EQ 0
    2313/    2043 :                     L254:
    2314/    2043 :                     ;    return v;
    2315/    2043 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
    2316/    2047 :                     L250:
    2317/    2047 : (MACRO)             	popr r7
    2318/    204B : (MACRO)             	popr r6
    2319/    204F : (MACRO)             	popr r1
    2320/    2053 : (MACRO)             	popr r0
    2321/    2057 : (MACRO)             	Cretn
    2322/    2058 :                     
    2323/    2058 :                     _memcpy:
    2324/    2058 : (MACRO)             	pushr r1
    2325/    205D : (MACRO)             	pushr r6
    2326/    2062 : (MACRO)             	pushr r7
    2327/    2067 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    2328/    2073 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    2329/    2073 :                     ;        char* dst8 = (char*)dest;
    2330/    2073 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2331/    2077 :                     ;        char* src8 = (char*)src;
    2332/    2077 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
    2333/    207B : C0 20 8C            	lbr L257
    2334/    207E :                     L256:
    2335/    207E :                     ;        while (count--) {
    2336/    207E :                     ;            *dst8++ = *src8++;
    2337/    207E : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2338/    2082 : (MACRO)             	incm R6,1
    2339/    2083 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg) opt1
    2340/    2087 : (MACRO)             	incm R1,1
    2341/    2088 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    2342/    208A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2343/    208C :                     ;        }
    2344/    208C :                     L257:
    2345/    208C :                     ;        while (count--) {
    2346/    208C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2347/    2090 : (MACRO)             	cpy2 R7,R11
    2348/    2094 : (MACRO)             	decm R7,1
    2349/    2095 : (MACRO)             	jnzU2 r11,L256; NE 0
    2350/    209D :                     ;        return dest;
    2351/    209D : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2352/    20A1 :                     L255:
    2353/    20A1 : (MACRO)             	popr r7
    2354/    20A5 : (MACRO)             	popr r6
    2355/    20A9 : (MACRO)             	popr r1
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 41 - 6/18/2013 11:03:18


    2356/    20AD : (MACRO)             	Cretn
    2357/    20AE :                     
    2358/    20AE :                     _memset:
    2359/    20AE : (MACRO)             	pushr r6
    2360/    20B3 : (MACRO)             	pushr r7
    2361/    20B8 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    2362/    20C4 :                     ;{
    2363/    20C4 :                     ;    unsigned char* p=s;
    2364/    20C4 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
    2365/    20C8 : C0 20 D6            	lbr L261
    2366/    20CB :                     L260:
    2367/    20CB :                     ;        *p++ = (unsigned char)c;
    2368/    20CB : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg) opt1
    2369/    20CF : (MACRO)             	incm R6,1
    2370/    20D0 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    2371/    20D4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2372/    20D6 :                     L261:
    2373/    20D6 :                     ;    while(n--)
    2374/    20D6 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    2375/    20DA : (MACRO)             	cpy2 R7,R11
    2376/    20DE : (MACRO)             	decm R7,1
    2377/    20DF : (MACRO)             	jnzU2 r11,L260; NE 0
    2378/    20E7 :                     ;    return s;
    2379/    20E7 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    2380/    20EB :                     L259:
    2381/    20EB : (MACRO)             	popr r7
    2382/    20EF : (MACRO)             	popr r6
    2383/    20F3 : (MACRO)             	Cretn
    2384/    20F4 :                     
    2385/    20F4 :                     _spincluder:
    2386/    20F4 :                     ;void spincluder(){
    2387/    20F4 :                     ;	asm("\tinclude fastspi.inc\n");
    2388/    20F4 :                     	include fastspi.inc
(1)    1/    20F4 :                     ;unsigned char xferspi(unsigned char value){
(1)    2/    20F4 :                     ;  int i;
(1)    3/    20F4 :                     ;  for(i=0;i<8;i++){
(1)    4/    20F4 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
(1)    5/    20F4 :                     ;    value=(value<<1)|digitalRead(miso);;
(1)    6/    20F4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
(1)    7/    20F4 :                     ;    digitalWrite(sck,LOW);
(1)    8/    20F4 :                     ;  }
(1)    9/    20F4 :                     ;  return value;
(1)   10/    20F4 :                     ;}
(1)   11/    20F4 :                     	align	64
(1)   12/    2100 : =5H                 spisck:	equ	5
(1)   13/    2100 : =2H                 clkport: equ	2
(1)   14/    2100 : =7H                 spimosi: equ	7
(1)   15/    2100 :                     _xferspif:	;spi transfer routine - uses bit 7 of port 4 for mosi, bit 4 for clock
(1)   16/    2100 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   17/    2106 : EE                  	sex	memaddr
(1)   18/    2107 : F8 08               	ldi	8		;bit count
(1)   19/    2109 : A8                  	plo	r8		;for loop exit test
(1)   20/    210A :                     $$loop:
(1)   21/    210A : 0E                  	ldn	memaddr		;pick it up
(1)   22/    210B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   23/    210D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   24/    210E :                     ;
(1)   25/    210E : 8C                  	glo	r12		;first parameter
(1)   26/    210F : FA 80               	ani	0x80		;data bit
(1)   27/    2111 : F1                  	or			;combine with PIN4 value
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(fastspi.inc) - page 42 - 6/18/2013 11:03:18


(1)   28/    2112 : 5E                  	str	memaddr		;prepare to send out
(1)   29/    2113 : 64                  	out	4		;put out data bit with clock 0
(1)   30/    2114 : 2E                  	dec	memaddr		;back up the X register
(1)   31/    2115 :                     ;now we have to read the incoming data on ef3
(1)   32/    2115 : 8C                  	glo	r12		;get the data byte
(1)   33/    2116 : FE                  	shl			;advance to the next bit
(1)   34/    2117 : 36 1B               	b3	$$zeroin	;check the external line
(1)   35/    2119 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   36/    211B :                     $$zeroin:			
(1)   37/    211B : AC                  	plo	r12		;put it back
(1)   38/    211C :                     ;now we clock out our outbound bit
(1)   39/    211C : 0E                  	ldn	memaddr
(1)   40/    211D : F9 20               	ori	(1<<spisck)		;raise the clock bit
(1)   41/    211F : 5E                  	str	memaddr
(1)   42/    2120 : 64                  	out	4		;send it out
(1)   43/    2121 : 2E                  	dec	memaddr
(1)   44/    2122 : FA DF               	ani	0xff-(1<<spisck)	;clear the clock bit
(1)   45/    2124 : 5E                  	str	memaddr
(1)   46/    2125 : 64                  	out	4		;send out the falling clock edge
(1)   47/    2126 : 2E                  	dec	memaddr		
(1)   48/    2127 :                     ;now we check the bit count to do the rest of the byte
(1)   49/    2127 : 28                  	dec	r8		;bit count-1
(1)   50/    2128 : 88                  	glo	r8		;see if we're done
(1)   51/    2129 : 3A 0A               	bnz	$$loop		;go back for more if not
(1)   52/    212B :                     ;clean up and return the incoming data
(1)   53/    212B : 8C                  	glo	r12
(1)   54/    212C : AF                  	plo	retval		;put return value in correct register
(1)   55/    212D : (MACRO)             	zext	retval
(1)   56/    2130 : E2                  	sex	sp		;re-establish sp as X
(1)   57/    2131 : (MACRO)             	cretn
(1)   58/    2132 :                     	align	64
(1)   59/    2140 :                     _xferspif2:	;spi transfer routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   60/    2140 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   61/    2146 : EE                  	sex	memaddr
(1)   62/    2147 : F8 08               	ldi	8		;bit count
(1)   63/    2149 : A8                  	plo	r8		;for loop exit test
(1)   64/    214A :                     $$loop:
(1)   65/    214A : 0E                  	ldn	memaddr		;pick it up
(1)   66/    214B : FA 5F               	ani	0xff-0x80-(1<<spisck)	;clear clock and data bits
(1)   67/    214D : 5E                  	str	memaddr		;now ready to combine with incoming data from R12
(1)   68/    214E :                     ;
(1)   69/    214E : 8C                  	glo	r12		;first parameter
(1)   70/    214F : FA 80               	ani	0x80		;data bit
(1)   71/    2151 : F1                  	or			;combine with PIN4 value
(1)   72/    2152 : 5E                  	str	memaddr		;prepare to send out
(1)   73/    2153 : 64                  	out	4		;put out data bit with clock 0
(1)   74/    2154 : 2E                  	dec	memaddr		;back up the X register
(1)   75/    2155 :                     ;now we have to read the incoming data on ef3
(1)   76/    2155 : 8C                  	glo	r12		;get the data byte
(1)   77/    2156 : FE                  	shl			;advance to the next bit
(1)   78/    2157 : 36 5B               	b3	$$zeroin	;check the external line
(1)   79/    2159 : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)   80/    215B :                     $$zeroin:			
(1)   81/    215B : AC                  	plo	r12		;put it back
(1)   82/    215C :                     ;now we clock out our outbound bit
(1)   83/    215C : 62                  	out	clkport		;send out the clock pulse
(1)   84/    215D : 2E                  	dec	memaddr
(1)   85/    215E :                     ;now we check the bit count to do the rest of the byte
(1)   86/    215E : 28                  	dec	r8		;bit count-1
(1)   87/    215F : 88                  	glo	r8		;see if we're done
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(fastspi.inc) - page 43 - 6/18/2013 11:03:18


(1)   88/    2160 : 3A 4A               	bnz	$$loop		;go back for more if not(19 instructions/bit)
(1)   89/    2162 :                     ;clean up and return the incoming data
(1)   90/    2162 : 8C                  	glo	r12
(1)   91/    2163 : AF                  	plo	retval		;put return value in correct register
(1)   92/    2164 : (MACRO)             	zext	retval
(1)   93/    2167 : E2                  	sex	sp		;re-establish sp as X
(1)   94/    2168 : (MACRO)             	cretn
(1)   95/    2169 :                     	align 64
(1)   96/    2180 :                     _shiftoutf:	;spi shift out routine - uses bit 7 of port 4 for mosi, N1 for clock
(1)   97/    2180 : (MACRO)             	ldAD	memaddr,_PIN4	;point at the current value of the output port
(1)   98/    2186 : 0E                  	ldn	memaddr		;pick up PIN4 value
(1)   99/    2187 : FA 7F               	ani	0x7f		;make sure mosi is off
(1)  100/    2189 : 22                  	dec	sp		;make a work area
(1)  101/    218A : 52                  	str	sp		;save pin4 value
(1)  102/    218B : F8 08               	ldi	8		;bit count
(1)  103/    218D : A8                  	plo	r8		;for loop exit test
(1)  104/    218E :                     $$loop:
(1)  105/    218E : 8C                  	glo	regarg1		;get the value
(1)  106/    218F : FE                  	shl			;shift left for next bit
(1)  107/    2190 : AC                  	plo	regarg1		;save it
(1)  108/    2191 : 76                  	shrc			;get the top bit back
(1)  109/    2192 : FA 80               	ani	0x80		;isolate it
(1)  110/    2194 : F1                  	or			;combine with PIN4 value
(1)  111/    2195 : 22                  	dec 	sp		;make a work area
(1)  112/    2196 : 52                  	str	sp		;place value to be output
(1)  113/    2197 : 64                  	out 	4		;put it in the latch
(1)  114/    2198 : 22                  	dec	sp		;prep for clock
(1)  115/    2199 : 62                  	out	clkport		;send clock signal
(1)  116/    219A : 28                  	dec	r8		;bit count
(1)  117/    219B : 88                  	glo	r8
(1)  118/    219C : 3A 8E               	bnz	$$loop		;back for more (13 instructions per byte)
(1)  119/    219E : 12                  	inc	sp		;release work area
(1)  120/    219F : (MACRO)             	cretn
(1)  121/    21A0 :                     	
(1)  122/    21A0 :                     _shiftinf:	;spi input routine - uses ef3 for miso, N1 for clock
(1)  123/    21A0 : F8 00               	ldi	0		;initial value
(1)  124/    21A2 : AF                  	plo	retval		;prepare to return as an int
(1)  125/    21A3 : BF                  	phi	retval
(1)  126/    21A4 : F8 08               	ldi	8		;bit count		
(1)  127/    21A6 : A8                  	plo	r8		;for read loop
(1)  128/    21A7 :                     $$loop:
(1)  129/    21A7 :                     ;now we have to read the incoming data on ef3
(1)  130/    21A7 : 8F                  	glo	retval		;get the data byte
(1)  131/    21A8 : FE                  	shl			;advance to the next bit
(1)  132/    21A9 : 36 AD               	b3	$$zeroin	;check the external line
(1)  133/    21AB : F9 01               	ori	1		;if ef3 is high, put a 1 in bit 0
(1)  134/    21AD :                     $$zeroin:			
(1)  135/    21AD : AF                  	plo	retval		;put it back
(1)  136/    21AE :                     ;now we cycle the clock for our next inbound bit
(1)  137/    21AE : 22                  	dec	sp		;make a work area
(1)  138/    21AF : 62                  	out	clkport		;clock the next bit
(1)  139/    21B0 :                     	
(1)  140/    21B0 :                     ;now we check the bit count to do the rest of the byte
(1)  141/    21B0 : 28                  	dec	r8		;bit count-1
(1)  142/    21B1 : 88                  	glo	r8		;see if we're done
(1)  143/    21B2 : 3A A7               	bnz	$$loop		;go back for more if not(10 instructions per bit)
(1)  144/    21B4 :                     
(1)  145/    21B4 : E2                  	sex	sp		;re-establish sp as X
(1)  146/    21B5 : (MACRO)             	cretn
(1)  147/    21B6 :                     	
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(fastspi.inc) - page 44 - 6/18/2013 11:03:18


(1)  148/    21B6 :                     
    2389/    21B6 :                     ;}
    2390/    21B6 :                     L263:
    2391/    21B6 : (MACRO)             	Cretn
    2392/    21B7 :                     
    2393/    21B7 :                     _buf:
    2394/    21B7 : 00 00 00 00 00 00   	db 512 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 45 - 6/18/2013 11:03:18


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
    2395/    23B7 :                     L246:
    2396/    23B7 : 65                  	db 101
    2397/    23B8 : 78                  	db 120
    2398/    23B9 : 69                  	db 105
    2399/    23BA : 74                  	db 116
    2400/    23BB : 20                  	db 32
    2401/    23BC : 25                  	db 37
    2402/    23BD : 64                  	db 100
    2403/    23BE : 0A                  	db 10
    2404/    23BF : 00                  	db 0
    2405/    23C0 :                     	align 4
    2406/    23C0 :                     L184:
    2407/    23C0 : BF 80 00 00         	dd 0xbf800000
    2408/    23C4 :                     	align 4
    2409/    23C4 :                     L183:
    2410/    23C4 : 00 00 00 00         	dd 0x0
    2411/    23C8 :                     L144:
    2412/    23C8 : 0A                  	db 10
    2413/    23C9 : 4F                  	db 79
    2414/    23CA : 6C                  	db 108
    2415/    23CB : 64                  	db 100
    2416/    23CC : 75                  	db 117
    2417/    23CD : 69                  	db 105
    2418/    23CE : 6E                  	db 110
    2419/    23CF : 6F                  	db 111
    2420/    23D0 : 20                  	db 32
    2421/    23D1 : 57                  	db 87
    2422/    23D2 : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 46 - 6/18/2013 11:03:18


    2423/    23D3 : 62                  	db 98
    2424/    23D4 : 20                  	db 32
    2425/    23D5 : 53                  	db 83
    2426/    23D6 : 65                  	db 101
    2427/    23D7 : 72                  	db 114
    2428/    23D8 : 76                  	db 118
    2429/    23D9 : 65                  	db 101
    2430/    23DA : 72                  	db 114
    2431/    23DB : 20                  	db 32
    2432/    23DC : 76                  	db 118
    2433/    23DD : 32                  	db 50
    2434/    23DE : 2E                  	db 46
    2435/    23DF : 31                  	db 49
    2436/    23E0 : 0A                  	db 10
    2437/    23E1 : 00                  	db 0
    2438/    23E2 :                     L139:
    2439/    23E2 : 43                  	db 67
    2440/    23E3 : 53                  	db 83
    2441/    23E4 : 0A                  	db 10
    2442/    23E5 : 00                  	db 0
    2443/    23E6 :                     L137:
    2444/    23E6 : 53                  	db 83
    2445/    23E7 : 58                  	db 88
    2446/    23E8 : 0A                  	db 10
    2447/    23E9 : 00                  	db 0
    2448/    23EA :                     L135:
    2449/    23EA : 53                  	db 83
    2450/    23EB : 43                  	db 67
    2451/    23EC : 0A                  	db 10
    2452/    23ED : 00                  	db 0
    2453/    23EE :                     L126:
    2454/    23EE : 72                  	db 114
    2455/    23EF : 73                  	db 115
    2456/    23F0 : 7A                  	db 122
    2457/    23F1 : 3D                  	db 61
    2458/    23F2 : 25                  	db 37
    2459/    23F3 : 64                  	db 100
    2460/    23F4 : 0A                  	db 10
    2461/    23F5 : 00                  	db 0
    2462/    23F6 :                     L124:
    2463/    23F6 : 73                  	db 115
    2464/    23F7 : 65                  	db 101
    2465/    23F8 : 6E                  	db 110
    2466/    23F9 : 64                  	db 100
    2467/    23FA : 69                  	db 105
    2468/    23FB : 6E                  	db 110
    2469/    23FC : 67                  	db 103
    2470/    23FD : 20                  	db 32
    2471/    23FE : 61                  	db 97
    2472/    23FF : 63                  	db 99
    2473/    2400 : 6B                  	db 107
    2474/    2401 : 0A                  	db 10
    2475/    2402 : 00                  	db 0
    2476/    2403 :                     L122:
    2477/    2403 : 73                  	db 115
    2478/    2404 : 65                  	db 101
    2479/    2405 : 6E                  	db 110
    2480/    2406 : 64                  	db 100
    2481/    2407 : 69                  	db 105
    2482/    2408 : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 47 - 6/18/2013 11:03:18


    2483/    2409 : 67                  	db 103
    2484/    240A : 20                  	db 32
    2485/    240B : 66                  	db 102
    2486/    240C : 6F                  	db 111
    2487/    240D : 72                  	db 114
    2488/    240E : 6D                  	db 109
    2489/    240F : 20                  	db 32
    2490/    2410 : 0A                  	db 10
    2491/    2411 : 00                  	db 0
    2492/    2412 :                     L117:
    2493/    2412 : 4E                  	db 78
    2494/    2413 : 6F                  	db 111
    2495/    2414 : 20                  	db 32
    2496/    2415 : 6C                  	db 108
    2497/    2416 : 65                  	db 101
    2498/    2417 : 64                  	db 100
    2499/    2418 : 20                  	db 32
    2500/    2419 : 61                  	db 97
    2501/    241A : 63                  	db 99
    2502/    241B : 74                  	db 116
    2503/    241C : 69                  	db 105
    2504/    241D : 6F                  	db 111
    2505/    241E : 6E                  	db 110
    2506/    241F : 20                  	db 32
    2507/    2420 : 72                  	db 114
    2508/    2421 : 65                  	db 101
    2509/    2422 : 71                  	db 113
    2510/    2423 : 75                  	db 117
    2511/    2424 : 65                  	db 101
    2512/    2425 : 73                  	db 115
    2513/    2426 : 74                  	db 116
    2514/    2427 : 0A                  	db 10
    2515/    2428 : 00                  	db 0
    2516/    2429 :                     L116:
    2517/    2429 : 73                  	db 115
    2518/    242A : 65                  	db 101
    2519/    242B : 74                  	db 116
    2520/    242C : 74                  	db 116
    2521/    242D : 69                  	db 105
    2522/    242E : 6E                  	db 110
    2523/    242F : 67                  	db 103
    2524/    2430 : 20                  	db 32
    2525/    2431 : 6C                  	db 108
    2526/    2432 : 65                  	db 101
    2527/    2433 : 64                  	db 100
    2528/    2434 : 20                  	db 32
    2529/    2435 : 4F                  	db 79
    2530/    2436 : 4E                  	db 78
    2531/    2437 : 0A                  	db 10
    2532/    2438 : 00                  	db 0
    2533/    2439 :                     L113:
    2534/    2439 : 73                  	db 115
    2535/    243A : 65                  	db 101
    2536/    243B : 74                  	db 116
    2537/    243C : 74                  	db 116
    2538/    243D : 69                  	db 105
    2539/    243E : 6E                  	db 110
    2540/    243F : 67                  	db 103
    2541/    2440 : 20                  	db 32
    2542/    2441 : 6C                  	db 108
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 48 - 6/18/2013 11:03:18


    2543/    2442 : 65                  	db 101
    2544/    2443 : 64                  	db 100
    2545/    2444 : 20                  	db 32
    2546/    2445 : 6F                  	db 111
    2547/    2446 : 66                  	db 102
    2548/    2447 : 66                  	db 102
    2549/    2448 : 0A                  	db 10
    2550/    2449 : 00                  	db 0
    2551/    244A :                     L110:
    2552/    244A : 75                  	db 117
    2553/    244B : 6E                  	db 110
    2554/    244C : 6B                  	db 107
    2555/    244D : 6E                  	db 110
    2556/    244E : 6F                  	db 111
    2557/    244F : 77                  	db 119
    2558/    2450 : 6E                  	db 110
    2559/    2451 : 20                  	db 32
    2560/    2452 : 69                  	db 105
    2561/    2453 : 6E                  	db 110
    2562/    2454 : 70                  	db 112
    2563/    2455 : 75                  	db 117
    2564/    2456 : 74                  	db 116
    2565/    2457 : 0A                  	db 10
    2566/    2458 : 00                  	db 0
    2567/    2459 :                     L109:
    2568/    2459 : 66                  	db 102
    2569/    245A : 61                  	db 97
    2570/    245B : 76                  	db 118
    2571/    245C : 69                  	db 105
    2572/    245D : 63                  	db 99
    2573/    245E : 6F                  	db 111
    2574/    245F : 6E                  	db 110
    2575/    2460 : 20                  	db 32
    2576/    2461 : 69                  	db 105
    2577/    2462 : 67                  	db 103
    2578/    2463 : 6E                  	db 110
    2579/    2464 : 6F                  	db 111
    2580/    2465 : 72                  	db 114
    2581/    2466 : 65                  	db 101
    2582/    2467 : 64                  	db 100
    2583/    2468 : 0A                  	db 10
    2584/    2469 : 00                  	db 0
    2585/    246A :                     L106:
    2586/    246A : 47                  	db 71
    2587/    246B : 45                  	db 69
    2588/    246C : 54                  	db 84
    2589/    246D : 20                  	db 32
    2590/    246E : 72                  	db 114
    2591/    246F : 65                  	db 101
    2592/    2470 : 63                  	db 99
    2593/    2471 : 65                  	db 101
    2594/    2472 : 69                  	db 105
    2595/    2473 : 76                  	db 118
    2596/    2474 : 65                  	db 101
    2597/    2475 : 64                  	db 100
    2598/    2476 : 2E                  	db 46
    2599/    2477 : 0A                  	db 10
    2600/    2478 : 00                  	db 0
    2601/    2479 :                     L103:
    2602/    2479 : 72                  	db 114
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 49 - 6/18/2013 11:03:18


    2603/    247A : 64                  	db 100
    2604/    247B : 3D                  	db 61
    2605/    247C : 31                  	db 49
    2606/    247D : 00                  	db 0
    2607/    247E :                     L100:
    2608/    247E : 72                  	db 114
    2609/    247F : 64                  	db 100
    2610/    2480 : 3D                  	db 61
    2611/    2481 : 30                  	db 48
    2612/    2482 : 00                  	db 0
    2613/    2483 :                     L97:
    2614/    2483 : 50                  	db 80
    2615/    2484 : 4F                  	db 79
    2616/    2485 : 53                  	db 83
    2617/    2486 : 54                  	db 84
    2618/    2487 : 20                  	db 32
    2619/    2488 : 72                  	db 114
    2620/    2489 : 65                  	db 101
    2621/    248A : 63                  	db 99
    2622/    248B : 65                  	db 101
    2623/    248C : 69                  	db 105
    2624/    248D : 76                  	db 118
    2625/    248E : 65                  	db 101
    2626/    248F : 64                  	db 100
    2627/    2490 : 0A                  	db 10
    2628/    2491 : 00                  	db 0
    2629/    2492 :                     L94:
    2630/    2492 : 47                  	db 71
    2631/    2493 : 45                  	db 69
    2632/    2494 : 54                  	db 84
    2633/    2495 : 20                  	db 32
    2634/    2496 : 2F                  	db 47
    2635/    2497 : 66                  	db 102
    2636/    2498 : 61                  	db 97
    2637/    2499 : 76                  	db 118
    2638/    249A : 69                  	db 105
    2639/    249B : 63                  	db 99
    2640/    249C : 6F                  	db 111
    2641/    249D : 6E                  	db 110
    2642/    249E : 00                  	db 0
    2643/    249F :                     L91:
    2644/    249F : 47                  	db 71
    2645/    24A0 : 45                  	db 69
    2646/    24A1 : 54                  	db 84
    2647/    24A2 : 20                  	db 32
    2648/    24A3 : 2F                  	db 47
    2649/    24A4 : 00                  	db 0
    2650/    24A5 :                     L88:
    2651/    24A5 : 50                  	db 80
    2652/    24A6 : 4F                  	db 79
    2653/    24A7 : 53                  	db 83
    2654/    24A8 : 54                  	db 84
    2655/    24A9 : 20                  	db 32
    2656/    24AA : 2F                  	db 47
    2657/    24AB : 00                  	db 0
    2658/    24AC :                     L85:
    2659/    24AC : 61                  	db 97
    2660/    24AD : 6E                  	db 110
    2661/    24AE : 61                  	db 97
    2662/    24AF : 6C                  	db 108
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 50 - 6/18/2013 11:03:18


    2663/    24B0 : 79                  	db 121
    2664/    24B1 : 7A                  	db 122
    2665/    24B2 : 69                  	db 105
    2666/    24B3 : 6E                  	db 110
    2667/    24B4 : 67                  	db 103
    2668/    24B5 : 3A                  	db 58
    2669/    24B6 : 0A                  	db 10
    2670/    24B7 : 25                  	db 37
    2671/    24B8 : 73                  	db 115
    2672/    24B9 : 0A                  	db 10
    2673/    24BA : 00                  	db 0
    2674/    24BB :                     L84:
    2675/    24BB : 69                  	db 105
    2676/    24BC : 6E                  	db 110
    2677/    24BD : 70                  	db 112
    2678/    24BE : 75                  	db 117
    2679/    24BF : 74                  	db 116
    2680/    24C0 : 20                  	db 32
    2681/    24C1 : 66                  	db 102
    2682/    24C2 : 72                  	db 114
    2683/    24C3 : 6F                  	db 111
    2684/    24C4 : 6D                  	db 109
    2685/    24C5 : 20                  	db 32
    2686/    24C6 : 25                  	db 37
    2687/    24C7 : 64                  	db 100
    2688/    24C8 : 2E                  	db 46
    2689/    24C9 : 25                  	db 37
    2690/    24CA : 64                  	db 100
    2691/    24CB : 2E                  	db 46
    2692/    24CC : 25                  	db 37
    2693/    24CD : 64                  	db 100
    2694/    24CE : 2E                  	db 46
    2695/    24CF : 25                  	db 37
    2696/    24D0 : 64                  	db 100
    2697/    24D1 : 0A                  	db 10
    2698/    24D2 : 0A                  	db 10
    2699/    24D3 : 00                  	db 0
    2700/    24D4 :                     L71:
    2701/    24D4 : 73                  	db 115
    2702/    24D5 : 65                  	db 101
    2703/    24D6 : 6E                  	db 110
    2704/    24D7 : 64                  	db 100
    2705/    24D8 : 73                  	db 115
    2706/    24D9 : 74                  	db 116
    2707/    24DA : 75                  	db 117
    2708/    24DB : 66                  	db 102
    2709/    24DC : 66                  	db 102
    2710/    24DD : 20                  	db 32
    2711/    24DE : 73                  	db 115
    2712/    24DF : 65                  	db 101
    2713/    24E0 : 65                  	db 101
    2714/    24E1 : 73                  	db 115
    2715/    24E2 : 20                  	db 32
    2716/    24E3 : 6C                  	db 108
    2717/    24E4 : 65                  	db 101
    2718/    24E5 : 64                  	db 100
    2719/    24E6 : 6D                  	db 109
    2720/    24E7 : 6F                  	db 111
    2721/    24E8 : 64                  	db 100
    2722/    24E9 : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 51 - 6/18/2013 11:03:18


    2723/    24EA : 3D                  	db 61
    2724/    24EB : 25                  	db 37
    2725/    24EC : 64                  	db 100
    2726/    24ED : 0A                  	db 10
    2727/    24EE : 00                  	db 0
    2728/    24EF :                     L60:
    2729/    24EF : 20                  	db 32
    2730/    24F0 : 61                  	db 97
    2731/    24F1 : 74                  	db 116
    2732/    24F2 : 20                  	db 32
    2733/    24F3 : 25                  	db 37
    2734/    24F4 : 73                  	db 115
    2735/    24F5 : 3A                  	db 58
    2736/    24F6 : 20                  	db 32
    2737/    24F7 : 77                  	db 119
    2738/    24F8 : 69                  	db 105
    2739/    24F9 : 7A                  	db 122
    2740/    24FA : 6E                  	db 110
    2741/    24FB : 65                  	db 101
    2742/    24FC : 74                  	db 116
    2743/    24FD : 20                  	db 32
    2744/    24FE : 4D                  	db 77
    2745/    24FF : 52                  	db 82
    2746/    2500 : 3D                  	db 61
    2747/    2501 : 25                  	db 37
    2748/    2502 : 78                  	db 120
    2749/    2503 : 2C                  	db 44
    2750/    2504 : 20                  	db 32
    2751/    2505 : 53                  	db 83
    2752/    2506 : 30                  	db 48
    2753/    2507 : 5F                  	db 95
    2754/    2508 : 53                  	db 83
    2755/    2509 : 52                  	db 82
    2756/    250A : 3D                  	db 61
    2757/    250B : 25                  	db 37
    2758/    250C : 78                  	db 120
    2759/    250D : 2C                  	db 44
    2760/    250E : 20                  	db 32
    2761/    250F : 53                  	db 83
    2762/    2510 : 30                  	db 48
    2763/    2511 : 5F                  	db 95
    2764/    2512 : 4D                  	db 77
    2765/    2513 : 52                  	db 82
    2766/    2514 : 3D                  	db 61
    2767/    2515 : 25                  	db 37
    2768/    2516 : 78                  	db 120
    2769/    2517 : 2C                  	db 44
    2770/    2518 : 20                  	db 32
    2771/    2519 : 53                  	db 83
    2772/    251A : 30                  	db 48
    2773/    251B : 5F                  	db 95
    2774/    251C : 50                  	db 80
    2775/    251D : 4F                  	db 79
    2776/    251E : 52                  	db 82
    2777/    251F : 54                  	db 84
    2778/    2520 : 3D                  	db 61
    2779/    2521 : 25                  	db 37
    2780/    2522 : 78                  	db 120
    2781/    2523 : 20                  	db 32
    2782/    2524 : 25                  	db 37
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 52 - 6/18/2013 11:03:18


    2783/    2525 : 78                  	db 120
    2784/    2526 : 0A                  	db 10
    2785/    2527 : 00                  	db 0
    2786/    2528 :                     L26:
    2787/    2528 : 44                  	db 68
    2788/    2529 : 6F                  	db 111
    2789/    252A : 6E                  	db 110
    2790/    252B : 65                  	db 101
    2791/    252C : 20                  	db 32
    2792/    252D : 57                  	db 87
    2793/    252E : 69                  	db 105
    2794/    252F : 7A                  	db 122
    2795/    2530 : 6E                  	db 110
    2796/    2531 : 65                  	db 101
    2797/    2532 : 74                  	db 116
    2798/    2533 : 20                  	db 32
    2799/    2534 : 57                  	db 87
    2800/    2535 : 35                  	db 53
    2801/    2536 : 31                  	db 49
    2802/    2537 : 30                  	db 48
    2803/    2538 : 30                  	db 48
    2804/    2539 : 20                  	db 32
    2805/    253A : 49                  	db 73
    2806/    253B : 6E                  	db 110
    2807/    253C : 69                  	db 105
    2808/    253D : 74                  	db 116
    2809/    253E : 69                  	db 105
    2810/    253F : 61                  	db 97
    2811/    2540 : 6C                  	db 108
    2812/    2541 : 69                  	db 105
    2813/    2542 : 7A                  	db 122
    2814/    2543 : 61                  	db 97
    2815/    2544 : 74                  	db 116
    2816/    2545 : 69                  	db 105
    2817/    2546 : 6F                  	db 111
    2818/    2547 : 6E                  	db 110
    2819/    2548 : 20                  	db 32
    2820/    2549 : 6F                  	db 111
    2821/    254A : 6E                  	db 110
    2822/    254B : 20                  	db 32
    2823/    254C : 49                  	db 73
    2824/    254D : 50                  	db 80
    2825/    254E : 20                  	db 32
    2826/    254F : 61                  	db 97
    2827/    2550 : 64                  	db 100
    2828/    2551 : 64                  	db 100
    2829/    2552 : 72                  	db 114
    2830/    2553 : 65                  	db 101
    2831/    2554 : 73                  	db 115
    2832/    2555 : 73                  	db 115
    2833/    2556 : 20                  	db 32
    2834/    2557 : 25                  	db 37
    2835/    2558 : 64                  	db 100
    2836/    2559 : 2E                  	db 46
    2837/    255A : 25                  	db 37
    2838/    255B : 64                  	db 100
    2839/    255C : 2E                  	db 46
    2840/    255D : 25                  	db 37
    2841/    255E : 64                  	db 100
    2842/    255F : 2E                  	db 46
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 53 - 6/18/2013 11:03:18


    2843/    2560 : 25                  	db 37
    2844/    2561 : 64                  	db 100
    2845/    2562 : 0A                  	db 10
    2846/    2563 : 0A                  	db 10
    2847/    2564 : 00                  	db 0
    2848/    2565 :                     	include lcc1802Epilofl.inc
(1)    1/    2565 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    2565 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    2565 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    2565 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    2565 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    2565 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    2565 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    2565 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    2565 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    2565 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    2565 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    2565 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    2565 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    2565 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    2565 :                     
(1)   16/    2565 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    2565 :                     lcc1802init:	
(1)   18/    2565 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    256B : (MACRO)             	ldiReg	RRET,_return
(1)   20/    2571 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    2577 : E2                  	sex	SP
(1)   22/    2578 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    257E : D3                  	sep	RPC
(1)   24/    257F :                     $$_00000:
(1)   25/    257F : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    2582 : C0 25 82            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    2585 : DE AD               	db	0xde,0xad
(1)   28/    2587 :                     
(1)   29/    2587 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    2587 :                     _setqOn:
(1)   31/    2587 : 7B                  	seq
(1)   32/    2588 : (MACRO)             	Cretn
(1)   33/    2589 :                     _setqOff:
(1)   34/    2589 : 7A                  	req
(1)   35/    258A : (MACRO)             	Cretn
(1)   36/    258B :                     
(1)   37/    258B :                     _modU2:	;16 bit unsigned remainder
(1)   38/    258B :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    258B : (MACRO)                 Ccall _divU2
(1)   40/    258E : 8D                      glo regArg2
(1)   41/    258F : AF                      plo retVal
(1)   42/    2590 : 9D                      ghi regArg2
(1)   43/    2591 : BF                      phi retVal
(1)   44/    2592 : (MACRO)                 Cretn
(1)   45/    2593 :                         
(1)   46/    2593 :                     _modI2:	;16 bit signed remainder
(1)   47/    2593 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    2593 : (MACRO)                 Ccall _divI2
(1)   49/    2596 : 8D                      glo regArg2
(1)   50/    2597 : AF                      plo retVal
(1)   51/    2598 : 9D                      ghi regArg2
(1)   52/    2599 : BF                      phi retVal
(1)   53/    259A : (MACRO)                 Cretn
(1)   54/    259B :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 54 - 6/18/2013 11:03:18


(1)   55/    259B :                     _out4:	
(1)   56/    259B : 8C                  	glo	regArg1
(1)   57/    259C : 22                  	dec	sp
(1)   58/    259D : 52                  	str	sp
(1)   59/    259E : 64                  	out	4
(1)   60/    259F : (MACRO)             	Cretn
(1)   61/    25A0 :                     
(1)   62/    25A0 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    25A0 :                     	align 256
(1)   64/    2600 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    2600 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    2600 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    2600 : D3                  	sep     R3 ;go to subroutine
(1)   68/    2601 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    2602 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    2603 : 22                  	dec	sp
(1)   71/    2604 : 73                  	stxd
(1)   72/    2605 : 96                  	ghi	retAddr
(1)   73/    2606 : 52                  	str	sp	
(1)   74/    2607 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    2608 : A6                  	plo	retAddr
(1)   76/    2609 : 93                  	ghi	RPC
(1)   77/    260A : B6                  	phi	retAddr
(1)   78/    260B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    260C : B3                  	phi	RPC
(1)   80/    260D : 46                  	lda	retAddr
(1)   81/    260E : A3                  	plo	RPC
(1)   82/    260F : 30 00               	br	_call-1
(1)   83/    2611 :                     
(1)   84/    2611 :                     ;Standard subroutine return 
(1)   85/    2611 : D3                  	sep	RPC	;return to the original program
(1)   86/    2612 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    2613 : A3                  	plo	RPC
(1)   88/    2614 : 96                  	ghi	retAddr
(1)   89/    2615 : B3                  	phi	RPC
(1)   90/    2616 : 42                  	lda	SP	;pick up old return address
(1)   91/    2617 : B6                  	phi	retAddr
(1)   92/    2618 : 42                  	lda	SP
(1)   93/    2619 : A6                  	plo	retAddr
(1)   94/    261A : 30 11               	br	_return-1
(1)   95/    261C :                     
(1)   96/    261C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    261C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    261E : FF 01               $$mslp:	smi	1
(1)   99/    2620 : 3A 1E               	bnz	$$mslp
(1)  100/    2622 : (MACRO)             	Cretn
(1)  101/    2623 :                     
(1)  102/    2623 :                     
(1)  103/    2623 :                     	
(1)  104/    2623 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    2623 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    2623 :                     _mulu2:		
(1)  107/    2623 : 22                      dec sp
(1)  108/    2624 : F8 10                   ldi 16
(1)  109/    2626 : AE                      plo	rwork	;bit count
(1)  110/    2627 : F8 00                   ldi 0
(1)  111/    2629 : BF                      phi	retVal	;quotient
(1)  112/    262A : AF                      plo retVal
(1)  113/    262B :                     $$MultLoop16_16:
(1)  114/    262B : 9C                      ghi regArg1
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 55 - 6/18/2013 11:03:18


(1)  115/    262C : F6                      shr
(1)  116/    262D : BC                      phi regArg1
(1)  117/    262E : 8C                      glo regArg1
(1)  118/    262F : 76                      shrc
(1)  119/    2630 : AC                      plo regArg1
(1)  120/    2631 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    2633 : 8D                      glo regArg2
(1)  122/    2634 : 52                      str sp
(1)  123/    2635 : 8F                      glo retVal
(1)  124/    2636 : F4                      add 
(1)  125/    2637 : AF                      plo retVal
(1)  126/    2638 : 9D                      ghi regArg2
(1)  127/    2639 : 52                      str sp
(1)  128/    263A : 9F                      ghi retVal
(1)  129/    263B : 74                      adc
(1)  130/    263C : BF                      phi retVal
(1)  131/    263D :                     $$MultSkip16_16:
(1)  132/    263D : 8D                      glo regArg2
(1)  133/    263E : FE                      shl
(1)  134/    263F : AD                      plo regArg2
(1)  135/    2640 : 9D                      ghi regArg2
(1)  136/    2641 : 7E                      shlc
(1)  137/    2642 : BD                      phi regArg2
(1)  138/    2643 : 2E                      dec rwork
(1)  139/    2644 : 8E                      glo rwork
(1)  140/    2645 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    2647 : 12                      inc sp
(1)  142/    2648 : D5                      sep 5
(1)  143/    2649 :                     
(1)  144/    2649 :                     
(1)  145/    2649 :                     _divU2:
(1)  146/    2649 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    2649 :                     	; This is really an unsigned 23 bit divide
(1)  148/    2649 :                     	;thanks to Ted Rossin
(1)  149/    2649 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    2649 : 22                      dec sp
(1)  151/    264A : F8 10                   ldi 16
(1)  152/    264C : AE                      plo rwork
(1)  153/    264D : F8 00                   ldi 0
(1)  154/    264F : BF                      phi retVal
(1)  155/    2650 : AF                      plo retVal
(1)  156/    2651 : BE                      phi rwork
(1)  157/    2652 :                     $$DivLoop16_16:
(1)  158/    2652 : 8C                      glo regArg1
(1)  159/    2653 : FE                      shl
(1)  160/    2654 : AC                      plo regArg1
(1)  161/    2655 : 9C                      ghi regArg1
(1)  162/    2656 : 7E                      shlc
(1)  163/    2657 : BC                      phi regArg1
(1)  164/    2658 : 8F                      glo retVal
(1)  165/    2659 : 7E                      shlc
(1)  166/    265A : AF                      plo retVal
(1)  167/    265B : 9F                      ghi retVal
(1)  168/    265C : 7E                      shlc
(1)  169/    265D : BF                      phi retVal
(1)  170/    265E : 9E                      ghi rwork
(1)  171/    265F : 7E                      shlc
(1)  172/    2660 : BE                      phi rwork
(1)  173/    2661 : 3B 73                   bnf $$DivSub16_16
(1)  174/    2663 : 8D                      glo regArg2
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 56 - 6/18/2013 11:03:18


(1)  175/    2664 : 52                      str sp
(1)  176/    2665 : 8F                      glo retVal
(1)  177/    2666 : F4                      add 
(1)  178/    2667 : AF                      plo retVal
(1)  179/    2668 : 9D                      ghi regArg2
(1)  180/    2669 : 52                      str sp
(1)  181/    266A : 9F                      ghi retVal
(1)  182/    266B : 74                      adc 
(1)  183/    266C : BF                      phi retVal
(1)  184/    266D : 9E                      ghi rwork
(1)  185/    266E : 7C 00                   adci 0
(1)  186/    2670 : BE                      phi rwork
(1)  187/    2671 : 30 81                   br $$DivSkip16_16
(1)  188/    2673 :                     $$DivSub16_16:
(1)  189/    2673 : 8D                      glo regArg2
(1)  190/    2674 : 52                      str sp
(1)  191/    2675 : 8F                      glo retVal
(1)  192/    2676 : F7                      sm
(1)  193/    2677 : AF                      plo retVal
(1)  194/    2678 : 9D                      ghi regArg2
(1)  195/    2679 : 52                      str sp
(1)  196/    267A : 9F                      ghi retVal
(1)  197/    267B : 77                      smb 
(1)  198/    267C : BF                      phi retVal
(1)  199/    267D : 9E                      ghi rwork
(1)  200/    267E : 7F 00                   smbi 0
(1)  201/    2680 : BE                      phi rwork 
(1)  202/    2681 :                     $$DivSkip16_16:
(1)  203/    2681 : FE                      shl
(1)  204/    2682 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    2684 :                     $$DivSetBit16_16:
(1)  206/    2684 : 8C                      glo regArg1
(1)  207/    2685 : F9 01                   ori  0x01
(1)  208/    2687 : AC                      plo regArg1
(1)  209/    2688 :                     $$DivSkipClear16_16:
(1)  210/    2688 : 2E                      dec rwork
(1)  211/    2689 : 8E                      glo rwork
(1)  212/    268A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    268C : 9E                      ghi rwork
(1)  214/    268D : FE                      shl
(1)  215/    268E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    2690 : 8D                      glo regArg2
(1)  217/    2691 : 52                      str sp
(1)  218/    2692 : 8F                      glo retVal
(1)  219/    2693 : F4                      add
(1)  220/    2694 : AF                      plo retVal
(1)  221/    2695 : 9D                      ghi regArg2
(1)  222/    2696 : 52                      str sp
(1)  223/    2697 : 9F                      ghi retVal
(1)  224/    2698 : 74                      adc
(1)  225/    2699 : BF                      phi retVal
(1)  226/    269A :                     $$DivSkipFinalAdd16_16:
(1)  227/    269A : 12                      inc sp
(1)  228/    269B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    269B : 8F                      glo retVal
(1)  230/    269C : AD                      plo regArg2
(1)  231/    269D : 9F                      ghi retVal
(1)  232/    269E : BD                      phi regArg2
(1)  233/    269F : 8C                      glo regArg1
(1)  234/    26A0 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 57 - 6/18/2013 11:03:18


(1)  235/    26A1 : 9C                      ghi regArg1
(1)  236/    26A2 : BF                      phi retVal
(1)  237/    26A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    26A3 : D5                      sep 5
(1)  239/    26A4 :                     
(1)  240/    26A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    26A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    26A4 :                     _divI2:
(1)  243/    26A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    26A4 : 22                      dec	sp	;leave a work area available
(1)  245/    26A5 : 9C                      ghi regArg1
(1)  246/    26A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    26A7 : FE                      shl
(1)  248/    26A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    26AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    26B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    26B3 : 9D                      ghi regArg2
(1)  252/    26B4 : F3                      xor	
(1)  253/    26B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    26B6 : 9D                      ghi regArg2
(1)  255/    26B7 : FE                      shl
(1)  256/    26B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    26BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    26C3 :                     $$pos2: ; both args now +v
(1)  259/    26C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    26C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    26C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    26C7 : FE                      shl
(1)  263/    26C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    26CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    26D3 :                     $$done:
(1)  266/    26D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    26D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    26D4 :                     
(1)  269/    26D4 :                     
(1)  270/    26D4 :                     	align 256    ;32 bit operations follow
(1)  271/    2700 :                     _divu4:
(1)  272/    2700 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    2700 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    2700 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    2700 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    2700 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    2700 :                     
(1)  278/    2700 : F8 20               	ldi 32		;set loop count
(1)  279/    2702 : AE                  	plo memaddr	;in temp register
(1)  280/    2703 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    270F :                     $$loop:
(1)  282/    270F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    271B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    2727 :                     
(1)  285/    2727 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    273D :                     
(1)  287/    273D : FA 80               	ani 0x80	;check the top bit
(1)  288/    273F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    2741 : 89                  		glo RL8
(1)  290/    2742 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    2744 : A9                  		plo RL8
(1)  292/    2745 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    275B : 30 61               	br $$endlp 	;else
(1)  294/    275D :                     $$norestore:
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 58 - 6/18/2013 11:03:18


(1)  295/    275D : 89                  		glo RL8
(1)  296/    275E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    2760 : A9                  		plo RL8
(1)  298/    2761 :                     	;end if
(1)  299/    2761 :                     $$endlp:
(1)  300/    2761 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    2762 : 8E                  	glo memaddr
(1)  302/    2763 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    2765 :                     	
(1)  304/    2765 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    2766 :                     		
(1)  306/    2766 :                     
(1)  307/    2766 :                     _mulu4:
(1)  308/    2766 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    2766 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    2766 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    2766 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    2766 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    2766 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    2766 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    2766 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    2766 :                     	;for 10 we subtract and shift
(1)  317/    2766 :                     	;for 00 and 11 we just shift
(1)  318/    2766 :                     
(1)  319/    2766 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    2772 : F8 20                   ldi 32
(1)  321/    2774 : AE                      plo memaddr		;cycle count
(1)  322/    2775 : FC 00                   adi 0		;clear df
(1)  323/    2777 :                     $$mloop:
(1)  324/    2777 : 89                      glo RL8
(1)  325/    2778 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    277A : 3B 96                   bnf	$$check_sub	;
(1)  327/    277C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    277E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    277E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    2794 : 30 AE                   br $$shift
(1)  331/    2796 :                     $$check_sub:
(1)  332/    2796 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    2798 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    2798 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    27AE :                     $$shift:
(1)  336/    27AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    27BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    27C8 :                     
(1)  339/    27C8 : 2E                      dec memaddr		;cycle count
(1)  340/    27C9 : 8E                      glo memaddr
(1)  341/    27CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    27CC :                         
(1)  343/    27CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    27CD :                     
(1)  345/    27CD :                     	align 256
(1)  346/    2800 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    2800 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    2800 :                     _divI4:
(1)  349/    2800 : 22                      dec	sp	;leave a work area available
(1)  350/    2801 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    2802 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    2803 : FE                      shl
(1)  353/    2804 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    2806 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 59 - 6/18/2013 11:03:18


(1)  355/    2826 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    2826 : 9A                      ghi RL10-1
(1)  357/    2827 : F3                      xor	
(1)  358/    2828 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    2829 : 9A                      ghi RL10-1
(1)  360/    282A : FE                      shl
(1)  361/    282B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    282D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    284D :                     $$pos2: ; both args now +v
(1)  364/    284D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    2850 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    2850 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    2851 : FE                      shl
(1)  368/    2852 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    2854 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    2874 :                     $$done:
(1)  371/    2874 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    2875 :                     
(1)  373/    2875 :                     _dubdabx:	
(1)  374/    2875 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    2875 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    2875 :                     ;long interger is passed in rp1p2
(1)  377/    2875 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    2875 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    2875 :                     ;r8-11 are used as temps
(1)  380/    2875 :                     ;r8 is the working pointer
(1)  381/    2875 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    2875 :                     ;r9.0 is digit count
(1)  383/    2875 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    2875 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    2881 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    288D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    2891 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    2893 : A9                  	plo r9
(1)  389/    2894 :                     $$clrlp:	;clear the passed buffer
(1)  390/    2894 : F8 00               	ldi 0	
(1)  391/    2896 : 58                  	str r8	;clear a byte
(1)  392/    2897 : 18                  	inc r8
(1)  393/    2898 : 29                  	dec r9
(1)  394/    2899 : 89                  	glo r9	;check the count
(1)  395/    289A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    289C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    28A0 :                     
(1)  398/    28A0 : F8 20               	ldi 32	;bit count
(1)  399/    28A2 : AF                  	plo r15
(1)  400/    28A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    28A3 :                     $$cktop:
(1)  402/    28A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    28A4 : FE                  	shl		;check for a 1
(1)  404/    28A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    28A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    28B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    28B4 : 8F                  	glo r15
(1)  408/    28B5 : 3A A3               	bnz $$cktop	;
(1)  409/    28B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    28B8 :                     $$bitloop:
(1)  411/    28B8 : F8 0A               	ldi 10	;digit count
(1)  412/    28BA : A9                  	plo r9
(1)  413/    28BB :                     $$dcklp:
(1)  414/    28BB : 08                  	ldn r8 	;pick up a digit
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 60 - 6/18/2013 11:03:18


(1)  415/    28BC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    28BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    28C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    28C2 : 58                  	str r8	;put it back
(1)  419/    28C3 :                     $$dnoadd:
(1)  420/    28C3 : 18                  	inc r8
(1)  421/    28C4 : 29                  	dec r9	;decrement digit count
(1)  422/    28C5 : 89                  	glo r9
(1)  423/    28C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    28C8 :                     	
(1)  425/    28C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    28D4 :                     	
(1)  427/    28D4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    28D6 : A9                  	plo r9
(1)  429/    28D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    28D7 :                     $$dshlp:
(1)  431/    28D7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    28D8 : 08                  	ldn r8	;get the digit back
(1)  433/    28D9 : 7E                  	shlc	;continue the shift
(1)  434/    28DA : BF                  	phi r15 ;save it for the carry test
(1)  435/    28DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    28DD : 58                  	str r8	;put the digit back
(1)  437/    28DE : 9F                  	ghi r15	;now test for carry
(1)  438/    28DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    28E1 : 29                  	dec r9	;decrement the digit count
(1)  440/    28E2 : 89                  	glo r9
(1)  441/    28E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    28E5 :                     	
(1)  443/    28E5 : 2F                  	dec r15
(1)  444/    28E6 : 8F                  	glo r15
(1)  445/    28E7 : 3A B8               	bnz $$bitloop
(1)  446/    28E9 :                     	
(1)  447/    28E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    28ED : F8 0A               	ldi 10		;digit count again
(1)  449/    28EF : A9                  	plo r9
(1)  450/    28F0 :                     $$upnxt:
(1)  451/    28F0 : 08                  	ldn r8		;get digit
(1)  452/    28F1 : F9 30               	ori 0x30	;make ascii
(1)  453/    28F3 : 58                  	str r8		;put it back
(1)  454/    28F4 : 18                  	inc r8		;next digit
(1)  455/    28F5 : 29                  	dec r9		;counter
(1)  456/    28F6 : 89                  	glo r9
(1)  457/    28F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    28F9 :                     	
(1)  459/    28F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    2901 : EE                  	sex memaddr	;set up
(1)  461/    2902 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    2904 : F7                  	sm		;desired number of digits to skip
(1)  463/    2905 : E2                  	sex sp		;reset index register
(1)  464/    2906 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    2907 :                     $$cknext:
(1)  466/    2907 : 0F                  	ldn r15		;check digit
(1)  467/    2908 : FF 30               	smi 0x30	;for '0'
(1)  468/    290A : 3A 11               	bnz $$done
(1)  469/    290C : 1F                  	inc r15		;next digit
(1)  470/    290D : 29                  	dec r9		;reduce count
(1)  471/    290E : 89                  	glo r9
(1)  472/    290F : 3A 07               	bnz $$cknext
(1)  473/    2911 :                     $$done:
(1)  474/    2911 : (MACRO)             	cretn
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(lcc1802Epilofl.inc) - page 61 - 6/18/2013 11:03:18


(1)  475/    2912 :                     	
(1)  476/    2912 :                     	
(1)  477/    2912 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    2912 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    2912 : (MACRO)                 Ccall _divU4
(1)  480/    2915 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    291D : (MACRO)                 Cretn
(1)  482/    291E :                         
(1)  483/    291E :                     _modI4:	;32 bit signed remainder
(1)  484/    291E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    291E : (MACRO)                 Ccall _divI4
(1)  486/    2921 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    2929 : (MACRO)                 Cretn
(1)  488/    292A :                         
(1)  489/    292A :                     	
(1)  490/    292A :                      
    2849/    292A :                     	include LCC1802fp.inc
(1)    1/    292A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    292A :                     ;maybe originally from RCA
(1)    3/    292A :                     ;these routines use ALL the registers from 6-15!
(1)    4/    292A :                     ;8-15 were more or less available to start with
(1)    5/    292A :                     ;it saves 6 when it uses it
(1)    6/    292A :                     ;I save 7 on entry and restore on exit
(1)    7/    292A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    292A : =BH                 FB	equ	11	;was R9
(1)    9/    292A : =9H                 F9	equ	9	;was R7
(1)   10/    292A : =7H                 F7	equ	7	;was RB
(1)   11/    292A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    292A :                     ; *** Convert signed long to float
(1)   13/    292A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    292A :                     ; *** result in same register
(1)   15/    292A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    292A :                     	align 256
(1)   17/    2A00 : F8 00               cvif4:	ldi	0
(1)   18/    2A02 : BE                  	phi	memaddr	;sign
(1)   19/    2A03 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    2A05 : AE                  	plo	memaddr	;
(1)   21/    2A06 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    2A07 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    2A09 : FE                  	shl		;sign bit to df
(1)   24/    2A0A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    2A0C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    2A0D : BE                  	phi	memaddr	;save it
(1)   27/    2A0E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    2A2E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    2A30 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    2A31 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    2A33 : 99                  	ghi	RL8	;next byte
(1)   32/    2A34 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    2A36 : 89                  	glo	RL8	;last byte
(1)   34/    2A37 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    2A39 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    2A3A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    2A3C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    2A3D : (MACRO)             	shru4	RL8
(1)   39/    2A49 : 30 39               	br	$$sgnpos
(1)   40/    2A4B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    2A4C : FA 80               	ani	0x80	;isolate it
(1)   42/    2A4E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    2A50 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 62 - 6/18/2013 11:03:18


(1)   44/    2A51 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    2A5D : 30 4B               	br	$$shl
(1)   46/    2A5F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    2A60 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    2A61 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    2A62 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    2A64 : 88                  	glo	RL8-1	;get the byte
(1)   51/    2A65 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    2A67 : A8                  	plo	RL8-1	;put it back
(1)   53/    2A68 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    2A69 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    2A6B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    2A6C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    2A6E : B8                  	phi	RL8-1	;place it
(1)   58/    2A6F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    2A70 :                     	
(1)   60/    2A70 :                     
(1)   61/    2A70 :                     
(1)   62/    2A70 :                     ; *** Convert float to signed long
(1)   63/    2A70 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    2A70 :                     ; *** result in same register
(1)   65/    2A70 :                     	align 256
(1)   66/    2B00 :                     cvfi4:
(1)   67/    2B00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2B01 : BE                  	phi	memaddr ;save for later
(1)   69/    2B02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2B03 : FE                  	shl		;shift to df
(1)   71/    2B04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2B05 : 7E                  	shlc		;combine with 0
(1)   73/    2B06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2B06 : 22                  	dec	sp
(1)   75/    2B07 : 52                  	str	sp
(1)   76/    2B08 : F8 96               	ldi	150
(1)   77/    2B0A : F7                  	sm		;calculate shift count needed
(1)   78/    2B0B :                     ;*******note - the df flag set here is tested later
(1)   79/    2B0B : AE                  	plo	memaddr
(1)   80/    2B0C : 12                  	inc	sp	;release work area
(1)   81/    2B0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    2B0D : F8 00               	ldi	0
(1)   83/    2B0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2B10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2B11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2B13 : A8                  	plo	RL8-1	;put it back
(1)   87/    2B14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2B15 : 32 3B               	bz	$$sign
(1)   89/    2B17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2B17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2B19 :                     
(1)   92/    2B19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2B25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2B26 : 8E                  	glo	memaddr
(1)   95/    2B27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    2B29 : 30 3B               	br	$$sign
(1)   97/    2B2B :                     
(1)   98/    2B2B :                     ;handle negative shift as best I can - gigo
(1)   99/    2B2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    2B37 : 1E                  	inc	memaddr
(1)  101/    2B38 : 8E                  	glo	memaddr
(1)  102/    2B39 : 3A 2B               	bnz	$$lsh	
(1)  103/    2B3B :                     	
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 63 - 6/18/2013 11:03:18


(1)  104/    2B3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    2B3C : FE                  	shl		;shift sign bit into df
(1)  106/    2B3D : 3B 61               	bnf	$$done
(1)  107/    2B3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    2B5F : 30 61               	br	$$done	; and return
(1)  109/    2B61 :                     
(1)  110/    2B61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2B62 :                     
(1)  112/    2B62 :                     ; *** Check if character is numeric
(1)  113/    2B62 :                     ; *** D - char to check
(1)  114/    2B62 :                     ; *** Returns DF=1 if numeric
(1)  115/    2B62 :                     ; ***         DF=0 if not
(1)  116/    2B62 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    2B63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2B65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2B67 : FF 0A                          smi     10                  ; see if above
(1)  120/    2B69 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    2B6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    2B6D : C8                             lskp
(1)  123/    2B6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2B70 : 8E                             glo     r14                 ; recover character
(1)  125/    2B71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2B72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2B72 :                     ; *******************************
(1)  128/    2B72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2B73 : F6                             shr
(1)  130/    2B74 : B8                             phi   r8
(1)  131/    2B75 : 88                             glo   r8
(1)  132/    2B76 : 76                             shrc
(1)  133/    2B77 : A8                             plo   r8
(1)  134/    2B78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2B79 : 76                             shrc
(1)  136/    2B7A : B9                             phi   F9
(1)  137/    2B7B : 89                             glo   F9
(1)  138/    2B7C : 76                             shrc
(1)  139/    2B7D : A9                             plo   F9
(1)  140/    2B7E : (MACRO)                        Cretn
(1)  141/    2B7F :                     
(1)  142/    2B7F :                     ; ******************************
(1)  143/    2B7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    2B7F :                     ; ******************************
(1)  145/    2B7F : 89                  fp_shl_1:  glo   F9
(1)  146/    2B80 : FE                             shl
(1)  147/    2B81 : A9                             plo   F9
(1)  148/    2B82 : 99                             ghi   F9
(1)  149/    2B83 : 7E                             shlc
(1)  150/    2B84 : B9                             phi   F9
(1)  151/    2B85 : 88                             glo   r8
(1)  152/    2B86 : 7E                             shlc
(1)  153/    2B87 : A8                             plo   r8
(1)  154/    2B88 : 98                             ghi   r8
(1)  155/    2B89 : 7E                             shlc
(1)  156/    2B8A : B8                             phi   r8
(1)  157/    2B8B : D5                             sep   RRET
(1)  158/    2B8C :                     
(1)  159/    2B8C :                     ; **********************
(1)  160/    2B8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    2B8C :                     ; **********************
(1)  162/    2B8C : 8B                  fp_add_12: glo   FB
(1)  163/    2B8D : 22                  	   dec r2	;wjr - make a work area
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 64 - 6/18/2013 11:03:18


(1)  164/    2B8E : 52                             str   r2
(1)  165/    2B8F : 89                             glo   F9
(1)  166/    2B90 : F4                             add
(1)  167/    2B91 : A9                             plo   F9
(1)  168/    2B92 : 9B                             ghi   FB
(1)  169/    2B93 : 52                             str   r2
(1)  170/    2B94 : 99                             ghi   F9
(1)  171/    2B95 : 74                             adc
(1)  172/    2B96 : B9                             phi   F9
(1)  173/    2B97 : 8A                             glo   R10
(1)  174/    2B98 : 52                             str   r2
(1)  175/    2B99 : 88                             glo   r8
(1)  176/    2B9A : 74                             adc
(1)  177/    2B9B : A8                             plo   r8
(1)  178/    2B9C : 9A                             ghi   R10
(1)  179/    2B9D : 52                             str   r2
(1)  180/    2B9E : 98                             ghi   r8
(1)  181/    2B9F : 74                             adc
(1)  182/    2BA0 : B8                             phi   r8
(1)  183/    2BA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    2BA2 : (MACRO)                        Cretn
(1)  185/    2BA3 :                     
(1)  186/    2BA3 :                     ; *******************************
(1)  187/    2BA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    2BA3 :                     ; *******************************
(1)  189/    2BA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    2BA4 : F6                             shr
(1)  191/    2BA5 : BF                             phi   R15
(1)  192/    2BA6 : 8F                             glo   R15
(1)  193/    2BA7 : 76                             shrc
(1)  194/    2BA8 : AF                             plo   R15
(1)  195/    2BA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    2BAA : 76                             shrc
(1)  197/    2BAB : BD                             phi   R13
(1)  198/    2BAC : 8D                             glo   R13
(1)  199/    2BAD : 76                             shrc
(1)  200/    2BAE : AD                             plo   R13
(1)  201/    2BAF : (MACRO)                        Cretn
(1)  202/    2BB0 :                     
(1)  203/    2BB0 :                     ; *************************************
(1)  204/    2BB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    2BB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    2BB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    2BB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    2BB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    2BB0 :                     ; *************************************
(1)  210/    2BB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    2BB1 : FA 80                          ani   080h                  ; check it
(1)  212/    2BB3 : CA 2B C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    2BB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    2BB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    2BBA : FF 01                          smi   1                     ; minus 1
(1)  216/    2BBC : BF                             phi   R15                    ; and put it back
(1)  217/    2BBD : C0 2B B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    2BC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    2BC1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    2BC2 : A8                             plo   r8                    ; set aside
(1)  221/    2BC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    2BC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    2BC5 : F6                             shr                         ; shift bit 0 into DF
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 65 - 6/18/2013 11:03:18


(1)  224/    2BC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    2BC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    2BC8 : A8                             plo   r8                    ; and put it back
(1)  227/    2BC9 : 87                             glo   F7                   ; get signs
(1)  228/    2BCA : F6                             shr                         ; get sign 1
(1)  229/    2BCB : 98                             ghi   r8                    ; recover exponent
(1)  230/    2BCC : 76                             shrc                        ; shift in sign
(1)  231/    2BCD : B8                             phi   r8                    ; put it back
(1)  232/    2BCE : 12                             inc	r2	;wjr release work area
(1)  233/    2BCF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    2BD3 : (MACRO)             	   popr R12	;wjr
(1)  235/    2BD7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    2BDB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    2BDC :                     
(1)  238/    2BDC :                     ; ************************************
(1)  239/    2BDC :                     ; *** Get exponenst from arguments ***
(1)  240/    2BDC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    2BDC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    2BDC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    2BDC :                     ; ***          RF.0 - exp2         ***
(1)  244/    2BDC :                     ; ************************************
(1)  245/    2BDC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    2BDD : FE                             shl                         ; shift it into DF
(1)  247/    2BDE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    2BDF : 7E                             shlc                        ; shift in first bit
(1)  249/    2BE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    2BE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    2BE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    2BE2 : FE                             shl                         ; shift it into DF
(1)  253/    2BE3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    2BE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    2BE5 : AF                             plo   R15                    ; put into RF
(1)  256/    2BE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    2BE7 :                     
(1)  258/    2BE7 :                     ; ************************************
(1)  259/    2BE7 :                     ; *** Get signs from arguments     ***
(1)  260/    2BE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    2BE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    2BE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    2BE7 :                     ; ************************************
(1)  264/    2BE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    2BE8 : FE                             shl                         ; shift into DF
(1)  266/    2BE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    2BEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    2BEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    2BEC : A7                             plo   F7                    ; save them
(1)  270/    2BED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    2BEE :                     
(1)  272/    2BEE :                     ; ***************************************
(1)  273/    2BEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    2BEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    2BEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    2BEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    2BEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    2BEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    2BEE :                     ; ***        F7.0 - signs        ***
(1)  280/    2BEE :                     ; ***************************************
(1)  281/    2BEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    2BEF : CA 2C 07                       lbnz  add_a1nz
(1)  283/    2BF2 : 88                             glo   r8
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 66 - 6/18/2013 11:03:18


(1)  284/    2BF3 : CA 2C 07                       lbnz  add_a1nz
(1)  285/    2BF6 : 99                             ghi   F9
(1)  286/    2BF7 : CA 2C 07                       lbnz  add_a1nz
(1)  287/    2BFA : 89                             glo   F9
(1)  288/    2BFB : CA 2C 07                       lbnz  add_a1nz
(1)  289/    2BFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    2BFF : B8                             phi   r8
(1)  291/    2C00 : 8A                             glo   R10
(1)  292/    2C01 : A8                             plo   r8
(1)  293/    2C02 : 9B                             ghi   FB
(1)  294/    2C03 : B9                             phi   F9
(1)  295/    2C04 : 8B                             glo   FB
(1)  296/    2C05 : A9                             plo   F9
(1)  297/    2C06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2C07 :                     
(1)  299/    2C07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2C08 : CA 2C 18                       lbnz  add_a2nz
(1)  301/    2C0B : 8A                             glo   R10
(1)  302/    2C0C : CA 2C 18                       lbnz  add_a2nz
(1)  303/    2C0F : 9B                             ghi   FB
(1)  304/    2C10 : CA 2C 18                       lbnz  add_a2nz
(1)  305/    2C13 : 8B                             glo   FB
(1)  306/    2C14 : CA 2C 18                       lbnz  add_a2nz
(1)  307/    2C17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2C18 :                                
(1)  309/    2C18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    2C1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2C22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2C27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2C28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    2C2B : 9F                             ghi   R15
(1)  315/    2C2C : 52                             str   r2
(1)  316/    2C2D : 8F                             glo   R15
(1)  317/    2C2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    2C2F : CB 2C 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2C32 :                     
(1)  320/    2C32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2C33 : AE                             plo   R14
(1)  322/    2C34 : 9A                             ghi   R10
(1)  323/    2C35 : B8                             phi   r8
(1)  324/    2C36 : 8E                             glo   R14
(1)  325/    2C37 : BA                             phi   R10
(1)  326/    2C38 : 88                             glo   r8
(1)  327/    2C39 : AE                             plo   R14
(1)  328/    2C3A : 8A                             glo   R10
(1)  329/    2C3B : A8                             plo   r8
(1)  330/    2C3C : 8E                             glo   R14
(1)  331/    2C3D : AA                             plo   R10
(1)  332/    2C3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    2C3F : AE                             plo   R14
(1)  334/    2C40 : 9B                             ghi   FB
(1)  335/    2C41 : B9                             phi   F9
(1)  336/    2C42 : 8E                             glo   R14
(1)  337/    2C43 : BB                             phi   FB
(1)  338/    2C44 : 89                             glo   F9
(1)  339/    2C45 : AE                             plo   R14
(1)  340/    2C46 : 8B                             glo   FB
(1)  341/    2C47 : A9                             plo   F9
(1)  342/    2C48 : 8E                             glo   R14
(1)  343/    2C49 : AB                             plo   FB
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 67 - 6/18/2013 11:03:18


(1)  344/    2C4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    2C4B : AE                             plo   R14
(1)  346/    2C4C : 8F                             glo   R15
(1)  347/    2C4D : BF                             phi   R15
(1)  348/    2C4E : 8E                             glo   R14
(1)  349/    2C4F : AF                             plo   R15
(1)  350/    2C50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2C53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2C55 : B8                             phi   r8
(1)  353/    2C56 : BA                             phi   R10
(1)  354/    2C57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2C59 : 52                             str   r2
(1)  356/    2C5A : 88                             glo   r8
(1)  357/    2C5B : F1                             or
(1)  358/    2C5C : A8                             plo   r8
(1)  359/    2C5D : 8A                             glo   R10
(1)  360/    2C5E : F1                             or
(1)  361/    2C5F : AA                             plo   R10
(1)  362/    2C60 : 9F                             ghi   R15                    ; get exp1
(1)  363/    2C61 : 52                             str   r2                    ; place into memory
(1)  364/    2C62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2C63 : F7                             sm                          ; see if match to exp1
(1)  366/    2C64 : C2 2C 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2C67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2C68 : FC 01                          adi   1
(1)  369/    2C6A : AF                             plo   R15
(1)  370/    2C6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    2C6C : F6                             shr
(1)  372/    2C6D : AA                             plo   R10
(1)  373/    2C6E : 9B                             ghi   FB
(1)  374/    2C6F : 76                             shrc
(1)  375/    2C70 : BB                             phi   FB
(1)  376/    2C71 : 8B                             glo   FB
(1)  377/    2C72 : 76                             shrc
(1)  378/    2C73 : AB                             plo   FB
(1)  379/    2C74 : C0 2C 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2C77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2C78 : 52                             str   r2
(1)  382/    2C79 : F6                             shr
(1)  383/    2C7A : F3                             xor
(1)  384/    2C7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    2C7D : CA 2C 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2C80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2C83 : C0 2C BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2C86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2C87 : 52                             str   r2
(1)  390/    2C88 : 89                             glo   F9
(1)  391/    2C89 : F7                             sm
(1)  392/    2C8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    2C8B : 9B                             ghi   FB
(1)  394/    2C8C : 52                             str   r2
(1)  395/    2C8D : 99                             ghi   F9
(1)  396/    2C8E : 77                             smb
(1)  397/    2C8F : BC                             phi   R12
(1)  398/    2C90 : 8A                             glo   R10
(1)  399/    2C91 : 52                             str   r2
(1)  400/    2C92 : 88                             glo   r8
(1)  401/    2C93 : 77                             smb
(1)  402/    2C94 : AD                             plo   R13
(1)  403/    2C95 : 9A                             ghi   R10
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 68 - 6/18/2013 11:03:18


(1)  404/    2C96 : 52                             str   r2
(1)  405/    2C97 : 98                             ghi   r8
(1)  406/    2C98 : 77                             smb
(1)  407/    2C99 : BD                             phi   R13
(1)  408/    2C9A : CB 2C A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    2C9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    2C9E : B8                             phi   r8
(1)  411/    2C9F : 8D                             glo   R13
(1)  412/    2CA0 : A8                             plo   r8
(1)  413/    2CA1 : 9C                             ghi   R12
(1)  414/    2CA2 : B9                             phi   F9
(1)  415/    2CA3 : 8C                             glo   R12
(1)  416/    2CA4 : A9                             plo   F9
(1)  417/    2CA5 : C0 2C BF                       lbr   add_fnl               ; finalize
(1)  418/    2CA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    2CA9 : 52                             str   r2
(1)  420/    2CAA : 8B                             glo   FB
(1)  421/    2CAB : F7                             sm
(1)  422/    2CAC : A9                             plo   F9
(1)  423/    2CAD : 99                             ghi   F9
(1)  424/    2CAE : 52                             str   r2
(1)  425/    2CAF : 9B                             ghi   FB
(1)  426/    2CB0 : 77                             smb
(1)  427/    2CB1 : B9                             phi   F9
(1)  428/    2CB2 : 88                             glo   r8
(1)  429/    2CB3 : 52                             str   r2
(1)  430/    2CB4 : 8A                             glo   R10
(1)  431/    2CB5 : 77                             smb
(1)  432/    2CB6 : A8                             plo   r8
(1)  433/    2CB7 : 98                             ghi   r8
(1)  434/    2CB8 : 52                             str   r2
(1)  435/    2CB9 : 9A                             ghi   R10
(1)  436/    2CBA : 77                             smb
(1)  437/    2CBB : B8                             phi   r8
(1)  438/    2CBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    2CBD : FE                             shl
(1)  440/    2CBE : A7                             plo   F7
(1)  441/    2CBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    2CC0 : CA 2C DD                       lbnz  add_nz                ; jump if not
(1)  443/    2CC3 : 88                             glo   r8
(1)  444/    2CC4 : CA 2C DD                       lbnz  add_nz
(1)  445/    2CC7 : 99                             ghi   F9
(1)  446/    2CC8 : CA 2C DD                       lbnz  add_nz
(1)  447/    2CCB : 89                             glo   F9
(1)  448/    2CCC : CA 2C DD                       lbnz  add_nz
(1)  449/    2CCF : 12                             inc	r2	;wjr release work area
(1)  450/    2CD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    2CD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    2CD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    2CDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    2CDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    2CDE : C2 2C EB                       lbz   add_nx                ; jump if not
(1)  456/    2CE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    2CE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    2CE5 : FC 01                          adi   1                     ; increment it
(1)  459/    2CE7 : BF                             phi   R15                    ; and put it back
(1)  460/    2CE8 : C0 2C DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    2CEB :                     
(1)  462/    2CEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    2CEC : F6                             shr
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 69 - 6/18/2013 11:03:18


(1)  464/    2CED : A7                             plo   F7
(1)  465/    2CEE : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    2CF1 :                     
(1)  467/    2CF1 :                     ; ***************************************
(1)  468/    2CF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    2CF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    2CF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    2CF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    2CF1 :                     ; ***************************************
(1)  473/    2CF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    2CF2 : FB 80                          xri   080h
(1)  475/    2CF4 : BA                             phi   R10                    ; and put it back
(1)  476/    2CF5 : C0 2B EE                       lbr   fp_add                ; now just add
(1)  477/    2CF8 :                     
(1)  478/    2CF8 :                     ; ***************************************
(1)  479/    2CF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    2CF8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    2CF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    2CF8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    2CF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    2CF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    2CF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    2CF8 :                     ; ***************************************
(1)  487/    2CF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    2CF9 : CA 2D 09                       lbnz  div_a1nz
(1)  489/    2CFC : 88                             glo   r8
(1)  490/    2CFD : CA 2D 09                       lbnz  div_a1nz
(1)  491/    2D00 : 99                             ghi   F9
(1)  492/    2D01 : CA 2D 09                       lbnz  div_a1nz
(1)  493/    2D04 : 89                             glo   F9
(1)  494/    2D05 : CA 2D 09                       lbnz  div_a1nz
(1)  495/    2D08 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    2D09 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    2D0A : CA 2D 27                       lbnz  div_a2nz
(1)  498/    2D0D : 8A                             glo   R10
(1)  499/    2D0E : CA 2D 27                       lbnz  div_a2nz
(1)  500/    2D11 : 9B                             ghi   FB
(1)  501/    2D12 : CA 2D 27                       lbnz  div_a2nz
(1)  502/    2D15 : 8B                             glo   FB
(1)  503/    2D16 : CA 2D 27                       lbnz  div_a2nz
(1)  504/    2D19 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    2D1A : FA 80                          ani   080h                  ; want only sign
(1)  506/    2D1C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    2D1E : B8                             phi   r8                    ; put into answer
(1)  508/    2D1F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    2D21 : A8                             plo   r8 
(1)  510/    2D22 : F8 00                          ldi   0
(1)  511/    2D24 : B9                             phi   F9
(1)  512/    2D25 : A9                             plo   F9
(1)  513/    2D26 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    2D27 :                     
(1)  515/    2D27 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    2D2C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    2D31 : (MACRO)             	   pushr R13	;wjr
(1)  518/    2D36 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    2D37 :                     
(1)  520/    2D37 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    2D3A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    2D3D : 8F                             glo   R15                    ; get exp2
(1)  523/    2D3E : FF 7F                          smi   127                   ; remove bias
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 70 - 6/18/2013 11:03:18


(1)  524/    2D40 : 52                             str   r2                    ; place into memory
(1)  525/    2D41 : 9F                             ghi   R15                    ; get exp1
(1)  526/    2D42 : FF 7F                          smi   127                   ; remove bias
(1)  527/    2D44 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    2D45 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    2D47 : 73                             stxd                        ; save onto stack
(1)  530/    2D48 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    2D49 : 52                             str   r2
(1)  532/    2D4A : F6                             shr
(1)  533/    2D4B : F3                             xor
(1)  534/    2D4C : 73                             stxd                        ; place onto stack
(1)  535/    2D4D : F8 00                          ldi   0                     ; setup man
(1)  536/    2D4F : BA                             phi   R10
(1)  537/    2D50 : 8A                             glo   R10
(1)  538/    2D51 : F9 80                          ori   080h
(1)  539/    2D53 : AA                             plo   R10
(1)  540/    2D54 : F8 00                          ldi   0                     ; setup div
(1)  541/    2D56 : B8                             phi   r8
(1)  542/    2D57 : 88                             glo   r8
(1)  543/    2D58 : F9 80                          ori   080h
(1)  544/    2D5A : A8                             plo   r8
(1)  545/    2D5B : F8 00                          ldi   0                     ; setup result
(1)  546/    2D5D : BC                             phi   R12
(1)  547/    2D5E : AC                             plo   R12
(1)  548/    2D5F : B7                             phi   F7
(1)  549/    2D60 : A7                             plo   F7
(1)  550/    2D61 : AF                             plo   R15                    ; setup quotient
(1)  551/    2D62 : BF                             phi   R15
(1)  552/    2D63 : BD                             phi   R13
(1)  553/    2D64 : AD                             plo   R13
(1)  554/    2D65 : F8 80                          ldi   080h
(1)  555/    2D67 : AF                             plo   R15
(1)  556/    2D68 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    2D69 : CA 2D 7B                       lbnz  div_go1
(1)  558/    2D6C : 88                             glo   r8
(1)  559/    2D6D : CA 2D 7B                       lbnz  div_go1
(1)  560/    2D70 : 99                             ghi   F9
(1)  561/    2D71 : CA 2D 7B                       lbnz  div_go1
(1)  562/    2D74 : 89                             glo   F9
(1)  563/    2D75 : CA 2D 7B                       lbnz  div_go1
(1)  564/    2D78 : C0 2D DB                       lbr   div_z
(1)  565/    2D7B : 9A                  div_go1:   ghi   R10
(1)  566/    2D7C : CA 2D 8E                       lbnz  div_go
(1)  567/    2D7F : 8A                             glo   R10
(1)  568/    2D80 : CA 2D 8E                       lbnz  div_go
(1)  569/    2D83 : 9B                             ghi   FB
(1)  570/    2D84 : CA 2D 8E                       lbnz  div_go
(1)  571/    2D87 : 8B                             glo   FB
(1)  572/    2D88 : CA 2D 8E                       lbnz  div_go
(1)  573/    2D8B : C0 2D DB                       lbr   div_z                 ; nothing more to do
(1)  574/    2D8E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    2D8F : 52                             str   r2
(1)  576/    2D90 : 89                             glo   F9
(1)  577/    2D91 : F7                             sm
(1)  578/    2D92 : 9B                             ghi   FB
(1)  579/    2D93 : 52                             str   r2
(1)  580/    2D94 : 99                             ghi   F9
(1)  581/    2D95 : 77                             smb
(1)  582/    2D96 : 8A                             glo   R10
(1)  583/    2D97 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 71 - 6/18/2013 11:03:18


(1)  584/    2D98 : 88                             glo   r8
(1)  585/    2D99 : 77                             smb
(1)  586/    2D9A : 9A                             ghi   R10
(1)  587/    2D9B : 52                             str   r2
(1)  588/    2D9C : 98                             ghi   r8
(1)  589/    2D9D : 77                             smb
(1)  590/    2D9E : CB 2D C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    2DA1 : 8B                             glo   FB                    ; div -= man
(1)  592/    2DA2 : 52                             str   r2
(1)  593/    2DA3 : 89                             glo   F9
(1)  594/    2DA4 : F7                             sm
(1)  595/    2DA5 : A9                             plo   F9
(1)  596/    2DA6 : 9B                             ghi   FB
(1)  597/    2DA7 : 52                             str   r2
(1)  598/    2DA8 : 99                             ghi   F9
(1)  599/    2DA9 : 77                             smb
(1)  600/    2DAA : B9                             phi   F9
(1)  601/    2DAB : 8A                             glo   R10
(1)  602/    2DAC : 52                             str   r2
(1)  603/    2DAD : 88                             glo   r8
(1)  604/    2DAE : 77                             smb
(1)  605/    2DAF : A8                             plo   r8
(1)  606/    2DB0 : 9A                             ghi   R10
(1)  607/    2DB1 : 52                             str   r2
(1)  608/    2DB2 : 98                             ghi   r8
(1)  609/    2DB3 : 77                             smb
(1)  610/    2DB4 : B8                             phi   r8
(1)  611/    2DB5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    2DB6 : 52                             str   r2
(1)  613/    2DB7 : 9C                             ghi   R12
(1)  614/    2DB8 : F1                             or
(1)  615/    2DB9 : BC                             phi   R12
(1)  616/    2DBA : 8F                             glo   R15
(1)  617/    2DBB : 52                             str   r2
(1)  618/    2DBC : 8C                             glo   R12
(1)  619/    2DBD : F1                             or
(1)  620/    2DBE : AC                             plo   R12
(1)  621/    2DBF : 9D                             ghi   R13
(1)  622/    2DC0 : 52                             str   r2
(1)  623/    2DC1 : 97                             ghi   F7
(1)  624/    2DC2 : F1                             or
(1)  625/    2DC3 : B7                             phi   F7
(1)  626/    2DC4 : 8D                             glo   R13
(1)  627/    2DC5 : 52                             str   r2
(1)  628/    2DC6 : 87                             glo   F7
(1)  629/    2DC7 : F1                             or
(1)  630/    2DC8 : A7                             plo   F7
(1)  631/    2DC9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    2DCA : 2B A3                          dw    fp_shr_fd
(1)  633/    2DCC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    2DCD : F6                             shr
(1)  635/    2DCE : BA                             phi   R10
(1)  636/    2DCF : 8A                             glo   R10
(1)  637/    2DD0 : 76                             shrc
(1)  638/    2DD1 : AA                             plo   R10
(1)  639/    2DD2 : 9B                             ghi   FB
(1)  640/    2DD3 : 76                             shrc
(1)  641/    2DD4 : BB                             phi   FB
(1)  642/    2DD5 : 8B                             glo   FB
(1)  643/    2DD6 : 76                             shrc
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 72 - 6/18/2013 11:03:18


(1)  644/    2DD7 : AB                             plo   FB
(1)  645/    2DD8 : C0 2D 68                       lbr   div_lp                ; loop back until done
(1)  646/    2DDB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    2DDC : B8                             phi   r8
(1)  648/    2DDD : 8C                             glo   R12
(1)  649/    2DDE : A8                             plo   r8
(1)  650/    2DDF : 97                             ghi   F7
(1)  651/    2DE0 : B9                             phi   F9
(1)  652/    2DE1 : 87                             glo   F7
(1)  653/    2DE2 : A9                             plo   F9
(1)  654/    2DE3 : 60                             irx                         ; recover sign
(1)  655/    2DE4 : 72                             ldxa
(1)  656/    2DE5 : A7                             plo   F7
(1)  657/    2DE6 : F0                             ldx                         ; recover answer exponent
(1)  658/    2DE7 : BF                             phi   R15
(1)  659/    2DE8 : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    2DEB :                     
(1)  661/    2DEB :                     ; ***************************************
(1)  662/    2DEB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    2DEB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    2DEB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    2DEB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    2DEB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    2DEB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    2DEB :                     ; ***        F7.0 - signs             ***
(1)  669/    2DEB :                     ; ***************************************
(1)  670/    2DEB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    2DF0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    2DF5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    2DFA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    2DFB :                     
(1)  675/    2DFB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    2DFE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    2E01 : 8F                             glo   R15                    ; get exp2
(1)  678/    2E02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    2E04 : 52                             str   r2                    ; place into memory
(1)  680/    2E05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    2E06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    2E08 : F4                             add                         ; add in exponent 2
(1)  683/    2E09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    2E0B : 73                             stxd                        ; place onto stack
(1)  685/    2E0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    2E0D : 52                             str   r2
(1)  687/    2E0E : F6                             shr
(1)  688/    2E0F : F3                             xor
(1)  689/    2E10 : 73                             stxd                        ; place onto stack
(1)  690/    2E11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    2E12 : 73                             stxd                        ; save on stack
(1)  692/    2E13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    2E14 : 73                             stxd
(1)  694/    2E15 : 86                             glo   r6
(1)  695/    2E16 : 73                             stxd
(1)  696/    2E17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    2E19 : 73                             stxd
(1)  698/    2E1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    2E1B : AE                             plo   R14
(1)  700/    2E1C : B6                             phi   r6
(1)  701/    2E1D : A6                             plo   r6
(1)  702/    2E1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    2E1F : 88                             glo   r8                    ; be sure high bit is set
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 73 - 6/18/2013 11:03:18


(1)  704/    2E20 : F9 80                          ori   080h
(1)  705/    2E22 : A8                             plo   r8
(1)  706/    2E23 : F8 00                          ldi   0
(1)  707/    2E25 : BC                             phi   R12                    ; set result to 0
(1)  708/    2E26 : AC                             plo   R12
(1)  709/    2E27 : B7                             phi   F7
(1)  710/    2E28 : A7                             plo   F7
(1)  711/    2E29 : BF                             phi   R15
(1)  712/    2E2A : AF                             plo   R15
(1)  713/    2E2B : BD                             phi   R13
(1)  714/    2E2C : AD                             plo   R13
(1)  715/    2E2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    2E2E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    2E2F : F9 80                          ori   080h
(1)  718/    2E31 : AA                             plo   R10
(1)  719/    2E32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    2E33 : CA 2E 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    2E36 : 9B                             ghi   FB
(1)  722/    2E37 : CA 2E 42                       lbnz  mul_go1
(1)  723/    2E3A : 8A                             glo   R10
(1)  724/    2E3B : CA 2E 42                       lbnz  mul_go1
(1)  725/    2E3E : 9A                             ghi   R10
(1)  726/    2E3F : C2 2E BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    2E42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    2E43 : F6                             shr
(1)  729/    2E44 : BA                             phi   R10
(1)  730/    2E45 : 8A                             glo   R10
(1)  731/    2E46 : 76                             shrc
(1)  732/    2E47 : AA                             plo   R10
(1)  733/    2E48 : 9B                             ghi   FB
(1)  734/    2E49 : 76                             shrc
(1)  735/    2E4A : BB                             phi   FB
(1)  736/    2E4B : 8B                             glo   FB
(1)  737/    2E4C : 76                             shrc
(1)  738/    2E4D : AB                             plo   FB
(1)  739/    2E4E : CB 2E 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    2E51 : 89                             glo   F9                    ; res += mul
(1)  741/    2E52 : 52                             str   r2
(1)  742/    2E53 : 87                             glo   F7
(1)  743/    2E54 : F4                             add
(1)  744/    2E55 : A7                             plo   F7
(1)  745/    2E56 : 99                             ghi   F9
(1)  746/    2E57 : 52                             str   r2
(1)  747/    2E58 : 97                             ghi   F7
(1)  748/    2E59 : 74                             adc
(1)  749/    2E5A : B7                             phi   F7
(1)  750/    2E5B : 88                             glo   r8
(1)  751/    2E5C : 52                             str   r2
(1)  752/    2E5D : 8C                             glo   R12
(1)  753/    2E5E : 74                             adc
(1)  754/    2E5F : AC                             plo   R12
(1)  755/    2E60 : 98                             ghi   r8
(1)  756/    2E61 : 52                             str   r2
(1)  757/    2E62 : 9C                             ghi   R12
(1)  758/    2E63 : 74                             adc
(1)  759/    2E64 : BC                             phi   R12
(1)  760/    2E65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    2E66 : 52                             str   r2
(1)  762/    2E67 : 8D                             glo   R13
(1)  763/    2E68 : F4                             add
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 74 - 6/18/2013 11:03:18


(1)  764/    2E69 : AD                             plo   R13
(1)  765/    2E6A : 96                             ghi   r6
(1)  766/    2E6B : 52                             str   r2
(1)  767/    2E6C : 96                             ghi   r6
(1)  768/    2E6D : 52                             str   r2
(1)  769/    2E6E : 9D                             ghi   R13
(1)  770/    2E6F : 74                             adc
(1)  771/    2E70 : BD                             phi   R13
(1)  772/    2E71 : 8E                             glo   R14
(1)  773/    2E72 : 52                             str   r2
(1)  774/    2E73 : 8F                             glo   R15
(1)  775/    2E74 : 74                             adc
(1)  776/    2E75 : AF                             plo   R15
(1)  777/    2E76 : 9E                             ghi   R14
(1)  778/    2E77 : 52                             str   r2
(1)  779/    2E78 : 9F                             ghi   R15
(1)  780/    2E79 : 74                             adc
(1)  781/    2E7A : BF                             phi   R15
(1)  782/    2E7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    2E7C : C2 2E 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    2E7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    2E80 : FC 01                          adi   1
(1)  786/    2E82 : AD                             plo   R13
(1)  787/    2E83 : 9D                             ghi   R13
(1)  788/    2E84 : 7C 00                          adci  0
(1)  789/    2E86 : BD                             phi   R13
(1)  790/    2E87 : 8F                             glo   R15
(1)  791/    2E88 : 7C 00                          adci  0
(1)  792/    2E8A : AF                             plo   R15
(1)  793/    2E8B : 9F                             ghi   R15
(1)  794/    2E8C : 7C 00                          adci  0
(1)  795/    2E8E : BF                             phi   R15
(1)  796/    2E8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    2E90 : F0                             ldx
(1)  798/    2E91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    2E93 : 73                             stxd                        ; and put it back
(1)  800/    2E94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    2E95 : FE                             shl
(1)  802/    2E96 : A9                             plo   F9
(1)  803/    2E97 : 99                             ghi   F9
(1)  804/    2E98 : 7E                             shlc
(1)  805/    2E99 : B9                             phi   F9
(1)  806/    2E9A : 88                             glo   r8
(1)  807/    2E9B : 7E                             shlc
(1)  808/    2E9C : A8                             plo   r8
(1)  809/    2E9D : 98                             ghi   r8
(1)  810/    2E9E : 7E                             shlc
(1)  811/    2E9F : B8                             phi   r8
(1)  812/    2EA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    2EA1 : FE                             shl
(1)  814/    2EA2 : A6                             plo   r6
(1)  815/    2EA3 : 96                             ghi   r6
(1)  816/    2EA4 : 7E                             shlc
(1)  817/    2EA5 : B6                             phi   r6
(1)  818/    2EA6 : 8E                             glo   R14
(1)  819/    2EA7 : 7E                             shlc
(1)  820/    2EA8 : AE                             plo   R14
(1)  821/    2EA9 : 9E                             ghi   R14
(1)  822/    2EAA : 7E                             shlc
(1)  823/    2EAB : BE                             phi   R14
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 75 - 6/18/2013 11:03:18


(1)  824/    2EAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    2EAD : C2 2E 32                       lbz   mul_lp1               ; jump if not
(1)  826/    2EB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    2EB2 : B8                             phi   r8
(1)  828/    2EB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    2EB4 : F9 01                          ori   1
(1)  830/    2EB6 : A6                             plo   r6
(1)  831/    2EB7 : C0 2E 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    2EBA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    2EBB : 72                             ldxa
(1)  834/    2EBC : AE                             plo   R14                    ; set aside
(1)  835/    2EBD : 72                             ldxa
(1)  836/    2EBE : A6                             plo   r6
(1)  837/    2EBF : 72                             ldxa
(1)  838/    2EC0 : B6                             phi   r6
(1)  839/    2EC1 : F0                             ldx
(1)  840/    2EC2 : BE                             phi   R14
(1)  841/    2EC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    2EC4 : B8                             phi   r8
(1)  843/    2EC5 : 8C                             glo   R12
(1)  844/    2EC6 : A8                             plo   r8
(1)  845/    2EC7 : 97                             ghi   F7
(1)  846/    2EC8 : B9                             phi   F9
(1)  847/    2EC9 : 87                             glo   F7
(1)  848/    2ECA : A9                             plo   F9
(1)  849/    2ECB : 8E                             glo   R14
(1)  850/    2ECC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    2ECD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    2ECE : FF 02                          smi   2                     ; see if <2
(1)  853/    2ED0 : CB 2E E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    2ED3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    2ED4 : 2B 72                          dw    fp_shr_1
(1)  856/    2ED6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    2ED7 : 2B A3                          dw    fp_shr_fd
(1)  858/    2ED9 : CB 2E E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    2EDC : 88                             glo   r8                    ; set high bit
(1)  860/    2EDD : F9 80                          ori   080h
(1)  861/    2EDF : A8                             plo   r8
(1)  862/    2EE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    2EE1 : C0 2E CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    2EE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    2EE5 : 72                             ldxa
(1)  866/    2EE6 : A7                             plo   F7
(1)  867/    2EE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    2EE8 : AC                             plo   R12
(1)  869/    2EE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    2EEA : CA 2E FC                       lbnz  mul_lp3a
(1)  871/    2EED : 8F                             glo   R15
(1)  872/    2EEE : CA 2E FC                       lbnz  mul_lp3a
(1)  873/    2EF1 : 9D                             ghi   R13
(1)  874/    2EF2 : CA 2E FC                       lbnz  mul_lp3a
(1)  875/    2EF5 : 8D                             glo   R13
(1)  876/    2EF6 : CA 2E FC                       lbnz  mul_lp3a
(1)  877/    2EF9 : C0 2F 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    2EFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    2EFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    2F00 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    2F03 : CB 2E E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    2F06 : 88                             glo   r8                    ; set high bit
(1)  883/    2F07 : F9 80                          ori   080h
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 76 - 6/18/2013 11:03:18


(1)  884/    2F09 : A8                             plo   r8
(1)  885/    2F0A : C0 2E E9                       lbr   mul_lp3
(1)  886/    2F0D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    2F0E : BF                             phi   R15                    ; to high R15
(1)  888/    2F0F : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    2F12 :                     
(1)  890/    2F12 :                     ; ***************************************
(1)  891/    2F12 :                     ; *** Convert ascii to floating point ***
(1)  892/    2F12 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    2F12 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    2F12 :                     ; ***************************************
(1)  895/    2F12 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    2F13 : FF 20                          smi   ' '                   ; check for space
(1)  897/    2F15 : C2 2F 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    2F18 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    2F19 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    2F1A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    2F1C : CA 2F 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    2F1F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    2F21 : 73                             stxd                        ; place onto stack
(1)  904/    2F22 : 1F                             inc   R15                    ; move past sign
(1)  905/    2F23 : C0 2F 30                       lbr   atof_go1              ; and continue
(1)  906/    2F26 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    2F28 : 73                             stxd                        ; place onto stack
(1)  908/    2F29 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    2F2A : FF 2B                          smi   '+'
(1)  910/    2F2C : CA 2F 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    2F2F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    2F30 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    2F32 : B8                             phi   r8
(1)  914/    2F33 : A8                             plo   r8
(1)  915/    2F34 : B9                             phi   F9
(1)  916/    2F35 : A9                             plo   F9
(1)  917/    2F36 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    2F37 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    2F3A : CB 2F 67                       lbnf  atof_no1              ; jump if not
(1)  920/    2F3D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    2F3E : BA                             phi   R10
(1)  922/    2F3F : 88                             glo   r8
(1)  923/    2F40 : AA                             plo   R10
(1)  924/    2F41 : 99                             ghi   F9
(1)  925/    2F42 : BB                             phi   FB
(1)  926/    2F43 : 89                             glo   F9
(1)  927/    2F44 : AB                             plo   FB
(1)  928/    2F45 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    2F48 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    2F4B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    2F4E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    2F51 : 4F                             lda   R15                    ; get number
(1)  933/    2F52 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    2F54 : 52                             str   r2                    ; setup for add
(1)  935/    2F55 : 89                             glo   F9                    ; add in next digit
(1)  936/    2F56 : F4                             add
(1)  937/    2F57 : A9                             plo   F9
(1)  938/    2F58 : 99                             ghi   F9                    ; propagate carry
(1)  939/    2F59 : 7C 00                          adci  0
(1)  940/    2F5B : B9                             phi   F9
(1)  941/    2F5C : 88                             glo   r8
(1)  942/    2F5D : 7C 00                          adci  0
(1)  943/    2F5F : A8                             plo   r8
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 77 - 6/18/2013 11:03:18


(1)  944/    2F60 : 98                             ghi   r8
(1)  945/    2F61 : 7C 00                          adci  0
(1)  946/    2F63 : B8                             phi   r8
(1)  947/    2F64 : C0 2F 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    2F67 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    2F68 : FF 2E                          smi   '.'
(1)  950/    2F6A : CA 2F 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    2F6D : 1F                             inc   R15                    ; move past decimal
(1)  952/    2F6E : F8 30               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    2F70 : BA                             phi   R10
(1)  954/    2F71 : F8 A3                          ldi   scratch&255
(1)  955/    2F73 : AA                             plo   R10
(1)  956/    2F74 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    2F76 : AC                             plo   R12
(1)  958/    2F77 : F8 00               atof_lpx:  ldi   0
(1)  959/    2F79 : 5A                             str   R10
(1)  960/    2F7A : 1A                             inc   R10
(1)  961/    2F7B : 2C                             dec   R12
(1)  962/    2F7C : 8C                             glo   R12
(1)  963/    2F7D : CA 2F 77                       lbnz  atof_lpx
(1)  964/    2F80 : F8 30                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    2F82 : BA                             phi   R10
(1)  966/    2F83 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    2F85 : AA                             plo   R10
(1)  968/    2F86 : F8 01                          ldi   1                     ; setup count
(1)  969/    2F88 : AC                             plo   R12
(1)  970/    2F89 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    2F8B : BC                             phi   R12
(1)  972/    2F8C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    2F8D : FF 11                          smi   17
(1)  974/    2F8F : C2 2F A8                       lbz   atof_dn3              ; jump if so
(1)  975/    2F92 : 0F                             ldn   R15                    ; get character
(1)  976/    2F93 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    2F94 : 2B 62                          dw    f_isnum
(1)  978/    2F96 : CB 2F A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    2F99 : 4F                             lda   R15                    ; get character
(1)  980/    2F9A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    2F9C : 5A                             str   R10                    ; write into bcd area
(1)  982/    2F9D : 1A                             inc   R10
(1)  983/    2F9E : 1C                             inc   R12                    ; increment count
(1)  984/    2F9F : CA 2F 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    2FA2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    2FA4 : BC                             phi   R12
(1)  987/    2FA5 : C0 2F 8C                       lbr   atof_lp2
(1)  988/    2FA8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    2FA9 : CA 2F C2                       lbnz  atof_nz
(1)  990/    2FAC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    2FAD : CA 2F C2                       lbnz  atof_nz
(1)  992/    2FB0 : 88                             glo   r8
(1)  993/    2FB1 : CA 2F C2                       lbnz  atof_nz
(1)  994/    2FB4 : 99                             ghi   F9
(1)  995/    2FB5 : CA 2F C2                       lbnz  atof_nz
(1)  996/    2FB8 : 89                             glo   F9
(1)  997/    2FB9 : CA 2F C2                       lbnz  atof_nz
(1)  998/    2FBC : 60                             irx                         ; recover sign
(1)  999/    2FBD : F0                             ldx
(1) 1000/    2FBE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    2FBF : C0 30 95                       lbr	atof_end               ; and return
(1) 1002/    2FC2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    2FC4 : BC                             phi   R12
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 78 - 6/18/2013 11:03:18


(1) 1004/    2FC5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    2FC6 : FA 80                          ani   080h
(1) 1006/    2FC8 : CA 30 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    2FCB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    2FCE : F8 30                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    2FD0 : BA                             phi   R10
(1) 1010/    2FD1 : F8 A3                          ldi   255&scratch
(1) 1011/    2FD3 : AA                             plo   R10
(1) 1012/    2FD4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    2FD6 : 5A                             str   R10
(1) 1014/    2FD7 : F8 30                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    2FD9 : BA                             phi   R10
(1) 1016/    2FDA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    2FDC : AA                             plo   R10
(1) 1018/    2FDD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    2FDF : AE                             plo   R14
(1) 1020/    2FE0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    2FE2 : AC                             plo   R12
(1) 1022/    2FE3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    2FE4 : 52                             str   r2                    ; in memory for add
(1) 1024/    2FE5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    2FE6 : F4                             add                         ; add in carry
(1) 1026/    2FE7 : 52                             str   r2                    ; place into memory
(1) 1027/    2FE8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    2FE9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    2FEA : 5A                             str   R10                    ; put it back
(1) 1030/    2FEB : FF 0A                          smi   10
(1) 1031/    2FED : CB 2F F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    2FF0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    2FF1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    2FF3 : C8                             lskp                        ; skip next instruction
(1) 1035/    2FF4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    2FF6 : AE                             plo   R14
(1) 1037/    2FF7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    2FF8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    2FF9 : 8C                             glo   R12                    ; see if done
(1) 1040/    2FFA : CA 2F E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    2FFD : F8 30                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    2FFF : BA                             phi   R10
(1) 1043/    3000 : F8 A3                          ldi   255&scratch
(1) 1044/    3002 : AA                             plo   R10
(1) 1045/    3003 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    3004 : C2 30 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    3007 : 89                             glo   F9                    ; add in the carry
(1) 1048/    3008 : F9 01                          ori   1
(1) 1049/    300A : A9                             plo   F9
(1) 1050/    300B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    300C : FC 01                          adi   1
(1) 1052/    300E : BC                             phi   R12
(1) 1053/    300F : C0 2F C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    3012 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    3013 : 52                             str   r2                    ; into memory
(1) 1056/    3014 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    3016 : F7                             sm
(1) 1058/    3017 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    3019 : BD                             phi   R13                    ; set aside
(1) 1060/    301A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    301B : A9                             plo   F9
(1) 1062/    301C : 88                             glo   r8
(1) 1063/    301D : B9                             phi   F9
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 79 - 6/18/2013 11:03:18


(1) 1064/    301E : 98                             ghi   r8
(1) 1065/    301F : FE                             shl                         ; shift out high bit
(1) 1066/    3020 : A8                             plo   r8
(1) 1067/    3021 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    3022 : F6                             shr
(1) 1069/    3023 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    3024 : 88                             glo   r8                    ; get mantissa
(1) 1071/    3025 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    3026 : A8                             plo   r8                    ; and write it
(1) 1073/    3027 : 60                             irx                         ; point to sign
(1) 1074/    3028 : 98                             ghi   r8                    ; high byte
(1) 1075/    3029 : F1                             or                          ; set sign
(1) 1076/    302A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    302B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    302C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    302E : C2 30 37                       lbz   atof_exp
(1) 1080/    3031 : 0F                             ldn   R15
(1) 1081/    3032 : FF 45                          smi   'E'
(1) 1082/    3034 : CA 30 95                       lbnz  atof_end
(1) 1083/    3037 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    3038 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    3039 : FF 2D                          smi   '-'
(1) 1086/    303B : C2 30 48                       lbz   atof_n
(1) 1087/    303E : 0F                             ldn   R15
(1) 1088/    303F : FF 2B                          smi   '+'
(1) 1089/    3041 : C2 30 45                       lbz   atof_p
(1) 1090/    3044 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    3045 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    3047 : C8                             lskp
(1) 1093/    3048 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    304A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    304B : 1F                             inc   R15                    ; move past sign
(1) 1096/    304C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    304E : AC                             plo   R12
(1) 1098/    304F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    3050 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    3053 : CB 30 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    3056 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    3057 : 52                             str   r2
(1) 1103/    3058 : F6                             shr                         ; multiply by 2
(1) 1104/    3059 : F6                             shr                         ; by 4
(1) 1105/    305A : F4                             add                         ; by 5
(1) 1106/    305B : F6                             shr                         ; by 10
(1) 1107/    305C : 52                             str   r2                    ; put here for add
(1) 1108/    305D : 4F                             lda   R15                    ; recover number
(1) 1109/    305E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    3060 : F4                             add                         ; add with total
(1) 1111/    3061 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    3062 : C0 30 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    3065 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    3066 : C2 30 95                       lbz   atof_end              ; jump if so
(1) 1115/    3069 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    306A : 8C                             glo   R12                    ; save count
(1) 1117/    306B : 73                             stxd
(1) 1118/    306C : 9C                             ghi   R12                    ; save sign
(1) 1119/    306D : 73                             stxd
(1) 1120/    306E : 8F                             glo   R15
(1) 1121/    306F : 73                             stxd
(1) 1122/    3070 : 9F                             ghi   R15
(1) 1123/    3071 : 73                             stxd
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(LCC1802fp.inc) - page 80 - 6/18/2013 11:03:18


(1) 1124/    3072 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    3074 : BA                             phi   R10
(1) 1126/    3075 : F8 20                          ldi   020h
(1) 1127/    3077 : AA                             plo   R10
(1) 1128/    3078 : F8 00                          ldi   0
(1) 1129/    307A : BB                             phi   FB
(1) 1130/    307B : AB                             plo   FB
(1) 1131/    307C : 9C                             ghi   R12
(1) 1132/    307D : C2 30 86                       lbz   atof_div              ; jump if negative
(1) 1133/    3080 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    3083 : C0 30 89                       lbr   atof_go5              ; clean up call
(1) 1135/    3086 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    3089 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    308A : 72                             ldxa
(1) 1138/    308B : BF                             phi   R15
(1) 1139/    308C : 72                             ldxa
(1) 1140/    308D : AF                             plo   R15
(1) 1141/    308E : 72                             ldxa
(1) 1142/    308F : BC                             phi   R12
(1) 1143/    3090 : F0                             ldx
(1) 1144/    3091 : AC                             plo   R12
(1) 1145/    3092 : C0 30 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    3095 :                     atof_end:
(1) 1147/    3095 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    3096 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    309A : (MACRO)             	   popr R12	;wjr
(1) 1150/    309E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    30A2 : (MACRO)             	   Cretn
(1) 1152/    30A3 : 00 00               scratch:   db	00,00
    2850/    30A5 :                     	include IO1802.inc
(1)    1/    30A5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    30A5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    30A5 :                     	align 64
(1)    4/    30C0 :                     _putc:
(1)    5/    30C0 :                     _out5:	
(1)    6/    30C0 : 8C                  	glo	regArg1
(1)    7/    30C1 : 22                  	dec	sp
(1)    8/    30C2 : 52                  	str	sp
(1)    9/    30C3 : 65                  	out	5
(1)   10/    30C4 : (MACRO)             	Cretn
(1)   11/    30C5 :                     _inp:		;raw port input
(1)   12/    30C5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    30C5 : 22                  	dec	sp	;work backwards
(1)   14/    30C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    30C8 : 73                  	stxd		
(1)   16/    30C9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    30CA : FA 07               	ani	0x07	;clean it
(1)   18/    30CC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    30CE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    30D0 : 73                  	stxd		;store it for execution
(1)   21/    30D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    30D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    30D6 : D8                  	sep	rt1	;execute it
(1)   24/    30D7 :                     ;we will come back to here with the input byte in D
(1)   25/    30D7 : 12                  	inc	sp	;step over the work area
(1)   26/    30D8 : AF                  	plo	retVal	;save it to return
(1)   27/    30D9 : F8 00               	ldi	0
(1)   28/    30DB : BF                  	phi	retval	;clear top byte
(1)   29/    30DC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    30DD : 12                  	inc	sp	;and the D3
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm(IO1802.inc) - page 81 - 6/18/2013 11:03:18


(1)   31/    30DE : (MACRO)             	Cretn		;and we're done
(1)   32/    30DF :                     	
(1)   33/    30DF :                     _out:		;raw port output
(1)   34/    30DF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    30DF :                     		;this could be bolder:
(1)   36/    30DF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
(1)   37/    30DF :                     		;then SEP sp
(1)   38/    30DF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    30DF :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    30DF : 22                  	dec	sp	;work backwards
(1)   41/    30E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    30E2 : 73                  	stxd		
(1)   43/    30E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/    30E7 : 8C                  	glo	regarg1	;get the port number
(1)   45/    30E8 : FA 07               	ani	0x07	;clean it
(1)   46/    30EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    30EC : 73                  	stxd		;store it for execution
(1)   48/    30ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    30EE : 52                  	str	sp	;store it where sp points
(1)   50/    30EF : D8                  	sep	rt1	;execute it
(1)   51/    30F0 :                     ;we will come back to here with sp stepped up by one
(1)   52/    30F0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    30F1 : 12                  	inc	sp	;and the D3
(1)   54/    30F2 : (MACRO)             	Cretn		;and we're done
(1)   55/    30F3 :                     	
(1)   56/    30F3 :                     	
    2851/    30F3 :                     
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 82 - 6/18/2013 11:03:18


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2C07 C |  ADD_A2NZ :                    2C18 C |
 ADD_FNL :                     2CBF C |  ADD_LP1 :                     2C62 C |
 ADD_LP1DN :                   2C77 C |  ADD_NM :                      2C86 C |
 ADD_NO :                      2CA8 C |  ADD_NS :                      2C50 C |
 ADD_NX :                      2CEB C |  ADD_NZ :                      2CDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    3086 C |
 ATOF_DN3 :                    2FA8 C |  ATOF_DN4 :                    3012 C |
 ATOF_DN5 :                    3065 C |  ATOF_END :                    3095 C |
 ATOF_EXP :                    3037 C |  ATOF_GO1 :                    2F30 C |
 ATOF_GO5 :                    3089 C |  ATOF_LP1 :                    2F36 C |
 ATOF_LP2 :                    2F8C C |  ATOF_LP3 :                    2FC5 C |
 ATOF_LP4 :                    2FE3 C |  ATOF_LP5 :                    304F C |
 ATOF_LPX :                    2F77 C |  ATOF_N :                      3048 C |
 ATOF_NC4 :                    300B C |  ATOF_NDP :                    2F6E C |
 ATOF_NM :                     2F26 C |  ATOF_NO1 :                    2F67 C |
 ATOF_NO4 :                    2FF4 C |  ATOF_NZ :                     2FC2 C |
 ATOF_P :                      3045 C | *BIGENDIAN :                      0 - |
 BITLOOP318 :                  28B8 C | *BRANCHEXT :                      0 - |
 BVTABLE156 :                  135F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB316 :                2796 C |  CKNEXT318 :                   2907 C |
 CKTOP318 :                    28A3 C |  CLKPORT :                        2 - |
 CLRLP318 :                    2894 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       2B00 C |  CVIF4 :                       2A00 C |
*DATE :                   6/18/2013 - |  DCKLP318 :                    28BB C |
 DIVLOOP16_16313 :             2652 C | *DIVSETBIT16_16313 :           2684 C |
 DIVSKIP16_16313 :             2681 C |  DIVSKIPCLEAR16_16313 :        2688 C |
 DIVSKIPFINALADD16_16313 :     269A C |  DIVSUB16_16313 :              2673 C |
 DIV_A1NZ :                    2D09 C |  DIV_A2NZ :                    2D27 C |
 DIV_GO :                      2D8E C |  DIV_GO1 :                     2D7B C |
 DIV_LP :                      2D68 C |  DIV_NOPE :                    2DC9 C |
 DIV_Z :                       2DDB C |  DNOADD318 :                   28C3 C |
 DONE314 :                     26D3 C |  DONE317 :                     2874 C |
 DONE318 :                     2911 C |  DONE324 :                     2A6F C |
 DONE325 :                     2B61 C |  DSHLP318 :                    28D7 C |
 ENDLP315 :                    2761 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       2B6E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      2BEE C |  FP_ADD_12 :                   2B8C C |
 FP_ATOF :                     2F12 C |  FP_DIV :                      2CF8 C |
 FP_GETEXP :                   2BDC C |  FP_GETSGN :                   2BE7 C |
 FP_MUL :                      2DEB C |  FP_SC_CLN :                   2BC0 C |
 FP_SC_UP :                    2BB0 C |  FP_SHL_1 :                    2B7F C |
 FP_SHR_1 :                    2B72 C |  FP_SHR_FD :                   2BA3 C |
 FP_SUB :                      2CF1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     2B62 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            8C C |  L10 :                          10F C |
 L100 :                        247E C |  L103 :                        2479 C |
 L104 :                        1066 C |  L105 :                        1091 C |
 L106 :                        246A C |  L107 :                        1088 C |
 L108 :                        1091 C |  L109 :                        2459 C |
 L11 :                          113 C |  L110 :                        244A C |
 L111 :                        10C3 C |  L112 :                        1102 C |
 L113 :                        2439 C |  L114 :                        10F9 C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 83 - 6/18/2013 11:03:18


 L115 :                        1102 C |  L116 :                        2429 C |
 L117 :                        2412 C | *L118 :                        1161 C |
 L119 :                        1161 C |  L120 :                        1161 C |
 L121 :                        1146 C |  L122 :                        2403 C |
 L123 :                        1155 C |  L124 :                        23F6 C |
*L125 :                        11A9 C |  L126 :                        23EE C |
 L127 :                        11A9 C |  L129 :                        11A9 C |
*L131 :                        1283 C |  L132 :                        1283 C |
 L133 :                        1283 C |  L134 :                        1259 C |
 L135 :                        23EA C |  L136 :                        1268 C |
 L137 :                        23E6 C |  L138 :                        1277 C |
 L139 :                        23E2 C | *L140 :                        1201 C |
 L141 :                        124B C | *L143 :                        12D9 C |
 L144 :                        23C8 C |  L145 :                        12CA C |
 L146 :                        12D6 C | *L148 :                        1313 C |
 L149 :                        12FD C | *L150 :                        1300 C |
 L152 :                        1301 C | *L153 :                        1370 C |
 L155 :                        1416 C |  L156 :                        138A C |
*L157 :                        1407 C |  L159 :                        140A C |
 L160 :                        13FA C |  L163 :                        13ED C |
 L164 :                        13F3 C |  L165 :                        1407 C |
*L167 :                        1447 C |  L168 :                        1431 C |
*L169 :                        1431 C |  L171 :                        1433 C |
*L172 :                        1462 C |  L173 :                        1456 C |
 L174 :                        1458 C | *L176 :                        1498 C |
 L177 :                        1477 C |  L178 :                        1492 C |
*L180 :                        177B C |  L181 :                        15AE C |
 L182 :                        15BE C |  L183 :                        23C4 C |
 L184 :                        23C0 C |  L185 :                        15BE C |
 L187 :                        1602 C |  L189 :                        176F C |
*L191 :                        1919 C |  L192 :                        1854 C |
 L193 :                        1864 C |  L194 :                        186D C |
 L195 :                        18F1 C |  L197 :                        1874 C |
*L198 :                        1874 C |  L200 :                        1881 C |
 L201 :                        18E0 C |  L204 :                        18AA C |
*L205 :                        19F6 C |  L206 :                        19B0 C |
*L208 :                        1A44 C | *L209 :                        1AA4 C |
*L210 :                        1B17 C | *L211 :                        1BAA C |
 L212 :                        1B85 C |  L213 :                        1BAA C |
*L214 :                        1C28 C | *L215 :                        1F86 C |
 L216 :                        1C73 C |  L217 :                        1F74 C |
 L219 :                        1CAF C |  L220 :                        1F74 C |
 L221 :                        1F63 C |  L222 :                        1F74 C |
 L224 :                        1D74 C |  L225 :                        1D8D C |
 L226 :                        1DAA C |  L227 :                        1DC8 C |
 L228 :                        1E07 C |  L229 :                        1F13 C |
 L231 :                        1E65 C |  L233 :                        1E98 C |
 L234 :                        1F0E C |  L235 :                        1F13 C |
 L236 :                        1F63 C |  L238 :                        1F47 C |
 L240 :                        1D2A C |  L241 :                        1D39 C |
 L242 :                        1D16 C | *L244 :                        1D65 C |
*L245 :                        1FC6 C |  L246 :                        23B7 C |
 L247 :                        1FC3 C | *L248 :                        1FC3 C |
*L250 :                        2047 C |  L251 :                        1FFA C |
 L252 :                        202A C |  L254 :                        2043 C |
*L255 :                        20A1 C |  L256 :                        207E C |
 L257 :                        208C C | *L259 :                        20EB C |
 L26 :                         2528 C |  L260 :                        20CB C |
 L261 :                        20D6 C | *L263 :                        21B6 C |
*L27 :                          4AD C | *L28 :                          4D6 C |
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 84 - 6/18/2013 11:03:18


 L29 :                          4C5 C | *L30 :                          4C5 C |
*L32 :                          4FF C |  L33 :                          4EE C |
*L34 :                          4EE C |  L36 :                          641 C |
 L37 :                          537 C |  L39 :                          546 C |
*L4 :                            FE C |  L41 :                          5C6 C |
 L42 :                          5E6 C | *L44 :                          6DF C |
 L45 :                          9F2 C |  L46 :                          71B C |
 L48 :                          797 C |  L49 :                          839 C |
 L51 :                          839 C |  L53 :                          8C6 C |
 L54 :                          902 C |  L56 :                          9DB C |
*L57 :                          9DB C | *L59 :                          B2C C |
 L60 :                         24EF C | *L61 :                          B7A C |
 L62 :                          B35 C | *L63 :                          BBC C |
*L64 :                          DC8 C |  L65 :                          BC1 C |
 L66 :                          C64 C |  L67 :                          C98 C |
 L68 :                          CCF C |  L69 :                          D1C C |
*L7 :                           44E C |  L70 :                          D24 C |
 L71 :                         24D4 C |  L72 :                          D7A C |
 L73 :                          D83 C |  L74 :                          DB2 C |
 L75 :                          DBB C |  L76 :                          E4D C |
 L77 :                          E05 C | *L78 :                          E34 C |
 L8 :                           105 C |  L80 :                          E35 C |
 L81 :                          E34 C | *L83 :                         1102 C |
 L84 :                         24BB C |  L85 :                         24AC C |
 L86 :                          F7C C |  L88 :                         24A5 C |
 L89 :                          FAB C |  L9 :                           10B C |
 L91 :                         249F C |  L92 :                          FDC C |
 L94 :                         2492 C |  L95 :                         1048 C |
 L96 :                         1091 C |  L97 :                         2483 C |
 L98 :                         101F C |  LCC1802INIT :                 2565 C |
*LISTON :                         1 - |  LOOP269 :                     210A C |
 LOOP270 :                     214A C |  LOOP271 :                     218E C |
 LOOP272 :                     21A7 C |  LOOP315 :                     270F C |
 LSH325 :                      2B2B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP316 :                    2777 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP311 :                     261E C |  MULTLOOP16_16312 :            262B C |
 MULTSKIP16_16312 :            263D C |  MUL_DN :                      2EBA C |
 MUL_GO1 :                     2E42 C |  MUL_LP1 :                     2E32 C |
 MUL_LP2 :                     2ECD C |  MUL_LP2A :                    2EE0 C |
 MUL_LP3 :                     2EE9 C |  MUL_LP3A :                    2EFC C |
 MUL_LP4 :                     2F0D C |  MUL_NO :                      2E8F C |
 MUL_NXT1 :                    2EE4 C | *NESTMAX :                      100 - |
 NORESTORE315 :                275D C |  NXT324 :                      2A30 C |
 OUTIT156 :                    135C C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      2B6B C |
 POS1314 :                     26B3 C |  POS1317 :                     2826 C |
 POS2314 :                     26C3 C |  POS2317 :                     284D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 85 - 6/18/2013 11:03:18


 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     30A3 C |
 SETBITOFF156 :                1357 C |  SETSGN324 :                   2A68 C |
 SGNPOS324 :                   2A39 C |  SHDN324 :                     2A5F C |
 SHIFT316 :                    27AE C |  SHL324 :                      2A4B C |
 SHR325 :                      2B19 C |  SIGN325 :                     2B3B C |
 SP :                             2 - | *SPIMOSI :                        7 - |
 SPISCK :                         5 - | *TIME :                    11:03:18 - |
*TRUE :                           1 - |  UPNXT318 :                    28F0 C |
*VERSION :                     142F - |  ZEROIN269 :                   211B C |
 ZEROIN270 :                   215B C |  ZEROIN272 :                   21AD C |
 _00000303 :                   257F C |  _ANALYZEINPUT :                E64 C |
 _BUF :                        21B7 C |  _CALL :                       2601 C |
 _CLOSE0 :                      4DB C | *_CMDIP :                         8 C |
 _DELAY :                      12E2 C |  _DIE303 :                     2582 C |
*_DIGITALREAD :                1368 C |  _DIGITALWRITE :               1340 C |
 _DISCONNECT0 :                 4B2 C |  _DIVI2 :                      26A4 C |
 _DIVI4 :                      2800 C |  _DIVU2 :                      2649 C |
 _DIVU4 :                      2700 C |  _DUBDABX :                    2875 C |
*_EXIT :                       1F9D C |  _FTOA :                       14E4 C |
 _HANDLESESSION :              1166 C | *_INP :                        30C5 C |
 _ITOA :                       179C C |  _LEDMODE :                       4 C |
 _LTOA :                       1930 C |  _MAIN :                       128A C |
*_MEMCMP :                     1FCB C | *_MEMCPY :                     2058 C |
*_MEMSET :                     20AE C | *_MODI2 :                      2593 C |
*_MODI4 :                      291E C | *_MODU2 :                      258B C |
*_MODU4 :                      2912 C |  _MULT_NUMS :                  14C4 C |
*_MULU2 :                      2623 C | *_MULU4 :                      2766 C |
*_OLDUINOINCLUDER :            1320 C |  _ONEMS :                      261C C |
 _OUT :                        30DF C | *_OUT4 :                       259B C |
*_OUT5 :                       30C0 C |  _PIN4 :                          3 C |
 _PRINTF :                     1C2D C |  _PRINTFLT :                   1AAD C |
 _PRINTINT :                   1A0B C |  _PRINTLINT :                  1A4D C |
 _PRINTSTR :                   1467 C |  _PUTC :                       30C0 C |
 _PUTX :                       1BAF C |  _PUTXN :                      1B20 C |
 _RECV0 :                       504 C |  _RECV_SIZE :                   658 C |
*_REPORT :                      A0D C |  _REQTYPE :                       6 C |
 _RETURN :                     2612 C |  _ROUND_NUMS :                 14A4 C |
 _SEND0 :                       6E6 C |  _SEND0S :                      B81 C |
 _SENDACK :                     B49 C |  _SENDRESPONSE :               1115 C |
 _SENDSTUFF :                   D26 C |  _SERVER_LOOP :                11B2 C |
*_SETQOFF :                    2589 C | *_SETQON :                     2587 C |
*_SHIFTINF :                   21A0 C | *_SHIFTOUTF :                  2180 C |
 _SOCKET0_INIT :                457 C | *_SPINCLUDER :                 20F4 C |
 _SPI_READ :                     91 C |  _SPI_WRITE :                     A C |
 _STRCPY :                     141F C |  _STRINDEX :                    DD1 C |
 _STRLEN :                     144A C |  _STRNCMP :                    1371 C |
 _W5100_INIT :                  117 C | *_XFERSPIF :                   2100 C |
 _XFERSPIF2 :                  2140 C |  __FORW12 :                    30DC C |
*__FORW13 :                    30F0 C |  __FORW4 :                     136F C |

    460 symbols
    105 unused symbols

 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 86 - 6/18/2013 11:03:18


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     83 macros

 AS V1.42 Beta [Bld 87] - source file olduinoserver2.asm - page 87 - 6/18/2013 11:03:18


  codepages:
  ----------

STANDARD (0 changed characters)


0.20 seconds assembly time

   5582 lines source file
  14442 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
