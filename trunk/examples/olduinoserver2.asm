; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Tue Jun 18 11:03:02 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
_PIN4:
	db 0
_ledmode:
	dw 3
_reqtype:
	dw 3
_cmdip:
	dw 182
_SPI_Write:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(2+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(2+6); ASGNU1
;{
;  enablewiz();   			// Activate the CS pin
;  xferspif2(WIZNET_WRITE_OPCODE);   // Send Wiznet W5100 Write OpCode
	req
	ldaD R12,240; reg:acon
	Ccall _xferspif2;CALLU2(ar)*
;  xferspif2(addr >>8); 		// Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
	cpy2 R12,R11
	ghi	R12	;opt2
	plo	R12
	ldi	0
	phi	R12
	Ccall _xferspif2;CALLU2(ar)*
;  xferspif2(addr & 0x00FF);	// Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _xferspif2;CALLU2(ar)*
;  xferspif2(data);			// Send the data byte
	ld1 R11,'O',sp,(2+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R12,R11 ;LOADU2(reg)*
	Ccall _xferspif2;CALLU2(ar)*
;  disablewiz();				// make CS pin not active
	seq
;}
L1:
	release 4
	Cretn

_SPI_Read:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
;{
;  enablewiz();   		// Activate the CS pin
;  xferspif2(WIZNET_READ_OPCODE);   // Send Wiznet W5100 Write OpCode
	req
	ldaD R12,15; reg:acon
	Ccall _xferspif2;CALLU2(ar)*
;  xferspif2(addr >>8);	// Send Wiznet W5100 Address High Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	cpy2 R12,R11
	ghi	R12	;opt2
	plo	R12
	ldi	0
	phi	R12
	Ccall _xferspif2;CALLU2(ar)*
;  xferspif2(addr & 0x00FF);  // Send Wiznet W5100 Address Low Byte
	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
	alu2I R12,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	Ccall _xferspif2;CALLU2(ar)*
;  value=xferspif2(0x00);	// Send Dummy transmission to read the data
	ld2z R12
	Ccall _xferspif2;CALLU2(ar)*
	cpy1 R11,R15;LOADU1(reg)
	st1 R11,'O',sp,(-3+8); ASGNU1
;  disablewiz();			// make CS pin inactive
;  return(value);
	seq
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
L4:
	release 6
	Cretn

L8:
	db 222
	db 173
	db 190
	db 239
	db 254
	db 237
L9:
	db 192
	db 168
	db 1
	db 182
L10:
	db 255
	db 255
	db 255
	db 0
L11:
	db 192
	db 168
	db 1
	db 1
_W5100_Init:
	reserve 34
;void W5100_Init(void){// Ethernet Setup
;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
	ldA2 R11,'O',sp,(-8+36); reg:addr
	ldaD R8,L8; reg:acon
	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
;  unsigned char ip_addr[] = {192,168,1,182};
	ldA2 R11,'O',sp,(-12+36); reg:addr
	ldaD R8,L9; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char sub_mask[] = {255,255,255,0};
	ldA2 R11,'O',sp,(-16+36); reg:addr
	ldaD R8,L10; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  unsigned char gtw_addr[] = {192,168,1,1};
	ldA2 R11,'O',sp,(-20+36); reg:addr
	ldaD R8,L11; reg:acon
	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
;  SPI_Write(MR,0x80);   // setting bit 7 of the mode register does a software reset of the w5100
	ld2z R12
	ldaD R13,128; reg:acon
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(GAR + 0,gtw_addr[0]); SPI_Write(GAR + 1,gtw_addr[1]);
	ldaD R12,1; reg:acon
	ld1 R13,'O',sp,(-20+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,2; reg:acon
	ld1 R13,'O',sp,(-19+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(GAR + 2,gtw_addr[2]); SPI_Write(GAR + 3,gtw_addr[3]);
	ldaD R12,3; reg:acon
	ld1 R13,'O',sp,(-18+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,4; reg:acon
	ld1 R13,'O',sp,(-17+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SAR + 0,mac_addr[0]); SPI_Write(SAR + 1,mac_addr[1]);
	ldaD R12,9; reg:acon
	ld1 R13,'O',sp,(-8+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,10; reg:acon
	ld1 R13,'O',sp,(-7+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 2,mac_addr[2]); SPI_Write(SAR + 3,mac_addr[3]);
	ldaD R12,11; reg:acon
	ld1 R13,'O',sp,(-6+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,12; reg:acon
	ld1 R13,'O',sp,(-5+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SAR + 4,mac_addr[4]); SPI_Write(SAR + 5,mac_addr[5]);
	ldaD R12,13; reg:acon
	ld1 R13,'O',sp,(-4+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,14; reg:acon
	ld1 R13,'O',sp,(-3+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SUBR + 0,sub_mask[0]); SPI_Write(SUBR + 1,sub_mask[1]);
	ldaD R12,5; reg:acon
	ld1 R13,'O',sp,(-16+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,6; reg:acon
	ld1 R13,'O',sp,(-15+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SUBR + 2,sub_mask[2]); SPI_Write(SUBR + 3,sub_mask[3]);
	ldaD R12,7; reg:acon
	ld1 R13,'O',sp,(-14+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,8; reg:acon
	ld1 R13,'O',sp,(-13+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(SIPR + 0,ip_addr[0]); SPI_Write(SIPR + 1,ip_addr[1]);
	ldaD R12,15; reg:acon
	ld1 R13,'O',sp,(-12+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,16; reg:acon
	ld1 R13,'O',sp,(-11+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  SPI_Write(SIPR + 2,ip_addr[2]); SPI_Write(SIPR + 3,ip_addr[3]);
	ldaD R12,17; reg:acon
	ld1 R13,'O',sp,(-10+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
	ldaD R12,18; reg:acon
	ld1 R13,'O',sp,(-9+36)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;  delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;  SPI_Write(RMSR,0x55);
	ldaD R12,26; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  SPI_Write(TMSR,0x55);
	ldaD R12,27; reg:acon
	ldaD R13,85; reg:acon
	Ccall _SPI_Write
;  printf("Done Wiznet W5100 Initialization on IP address %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
	ldaD R12,15; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-22+36); ASGNI2(addr,reg)*;
	ldaD R12,16; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-24+36); ASGNI2(addr,reg)*;
	ldaD R12,17; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-26+36); ASGNI2(addr,reg)*;
	ldaD R12,18; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L26; reg:acon
	ld2 R10,'O',sp,(-22+36) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-24+36) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-26+36) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;}
L7:
	release 34
	Cretn

_socket0_init:
	reserve 4
;void socket0_init(){ //initialize socket 0 for http server
;	SPI_Write(S0_MR,MR_TCP);	//set mode register to tcp
	ldaD R12,1024; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	SPI_Write(S0_PORT,((TCP_PORT & 0xFF00) >> 8 ));	//set tcp port to 0050
	ldaD R12,1028; reg:acon
	ld2z R13
	Ccall _SPI_Write
;	SPI_Write(S0_PORT + 1,(TCP_PORT & 0x00FF));
	ldaD R12,1029; reg:acon
	ldaD R13,80; reg:acon
	Ccall _SPI_Write
;	SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
	ldaD R12,1025; reg:acon
	ldaD R13,1; reg:acon
	Ccall _SPI_Write
;	delay(10);
	ldaD R12,10; reg:acon
	Ccall _delay
;    SPI_Write(S0_CR,CR_LISTEN);					//listen to socket
	ldaD R12,1025; reg:acon
	ldaD R13,2; reg:acon
	Ccall _SPI_Write
;}
L27:
	release 4
	Cretn

_disconnect0:
	reserve 4
;void disconnect0(){
;   SPI_Write(S0_CR,CR_DISCON); 	//send disconnect command
	ldaD R12,1025; reg:acon
	ldaD R13,8; reg:acon
	Ccall _SPI_Write
L29:
;   while(SPI_Read(S0_CR));		// Wait for Disconecting Process
L30:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L29; NEI2(CVUI2(reg),con0)
;}
L28:
	release 4
	Cretn

_close0:
	reserve 4
;void close0(){
;   SPI_Write(S0_CR,CR_CLOSE);    // Send Close Command
	ldaD R12,1025; reg:acon
	ldaD R13,16; reg:acon
	Ccall _SPI_Write
L33:
;   while(SPI_Read(S0_CR));   	// Wait until the S0_CR is clear
L34:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L33; NEI2(CVUI2(reg),con0)
;}
L32:
	release 4
	Cretn

_recv0:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r6,r13; function(2054) 1
;unsigned int recv0(unsigned char *buf,unsigned int buflen){
;    if (buflen <= 0) return 1;
	jnzU2 r6,L37; NE 0
	ldaD R15,1; reg:acon
	lbr L36
L37:
;    if (buflen > MAX_BUF)	// If the request size > MAX_BUF,just truncate it
	jnU2I r6,512,lbdf,L39 ;LEU2 512 6 L39; LE is flipped test & subtraction
;        buflen=MAX_BUF - 2;
	ldaD R6,510; reg:acon
L39:
;    ptr = SPI_Read(S0_RX_RD);     // Read the Rx Read Pointer
	ldaD R12,1064; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
	ldaD R12,1065; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
	lbr L42
L41:
;    while(buflen) {//receive individual bytes into the buffer
;      buflen--;
	decm R6,1
;      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
	alu2I R11,R1,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R0,'O',R11,(24576); reg:addr
;      *buf = SPI_Read(realaddr);
	cpy2 R12,R0 ;LOADU2(reg)*
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	str1 R11,R7; ASGNU1(indaddr,reg)
;      offaddr++;
	incm R1,1
;      buf++;
	incm R7,1
;    }
L42:
;    while(buflen) {//receive individual bytes into the buffer
	jnzU2 r6,L41; NE 0
;    *buf='\0';        // terminate string
	ldaD R11,0; reg:acon
	str1 R11,R7; ASGNU1(indaddr,reg)
;    SPI_Write(S0_RX_RD,(offaddr >> 8) );
	ldaD R12,1064; reg:acon
	cpy2 R11,R1
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
	ldaD R12,1065; reg:acon
	alu2I R11,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_RECV);	// Now Send the RECV command
	ldaD R12,1025; reg:acon
	ldaD R13,64; reg:acon
	Ccall _SPI_Write
;    delay(5);    				// Wait for Receive Process
	ldaD R12,5; reg:acon
	Ccall _delay
;    return 1;
	ldaD R15,1; reg:acon
L36:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_recv_size:
	reserve 6
;unsigned int recv_size(void){
;  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
	ldaD R12,1062; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
	ldaD R12,1063; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2I R10,R10,255,ani,ani
	;removed ?	cpy2 R10,R10
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R11,R10,R11,add,adc; ADDI2(r,r)
	cpy2 R15,R11 ;LOADU2(reg)*
L44:
	release 6
	Cretn

_send0:
	reserve 6; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r6,r13; function(2054) 1
;unsigned int send0(unsigned char *buf,unsigned int buflen){
;    if (buflen <= 0) return 0;
	jnzU2 r6,L46; NE 0
	ld2z R15
	lbr L45
L46:
;    txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R1,R11 ;LOADU2(reg)*
;    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
;    timeout=0;
	ld2z R11
	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
	lbr L49
L48:
;    while (txsize < buflen) {
;      delay(1);
	ldaD R12,1; reg:acon
	Ccall _delay
;     txsize=SPI_Read(SO_TX_FSR);
	ldaD R12,1056; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	cpy2 R1,R11 ;LOADU2(reg)*
;     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
	ldaD R12,1057; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	alu2I R10,R1,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R1,R10,R11,add,adc; ADDU2(r,r)
;     if (timeout++ > 1000) {
	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-6+20); ASGNU2(addr,reg)*
	jnU2I r11,1000,lbdf,L51 ;LEU2 1000 11 L51; LE is flipped test & subtraction
;       disconnect0();
	Ccall _disconnect0
;       return 0;
	ld2z R15
	lbr L45
L51:
;   }
L49:
;    while (txsize < buflen) {
	jcU2 r1,r6,lbnf,L48; LT=lbnf i.e. subtract B from A and jump if borrow 
;   ptr = SPI_Read(S0_TX_WR);
	ldaD R12,1060; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-8+20); ASGNU2(addr,reg)*
;   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
	ldaD R12,1061; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ld2 R10,'O',sp,(-8+20); reg:INDIRU2(addr)
	alu2I R10,R10,255,ani,ani ;removed copy;BANDU2(reg,con)  
	shl2I R10,8
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	alu2 R0,R10,R11,add,adc; ADDU2(r,r)
	lbr L54
L53:
;    while(buflen) {
;      buflen--;
	decm R6,1
;      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
	alu2I R11,R0,2047,ani,ani ;removed copy;BANDU2(reg,con)  
	ldA2 R11,'O',R11,(16384); reg:addr
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
;      SPI_Write(realaddr,*buf);
	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
	ld1 R13,'O',R7,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SPI_Write
;      offaddr++;
	incm R0,1
;      buf++;
	incm R7,1
;    }
L54:
;    while(buflen) {
	jnzU2 r6,L53; NE 0
;    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
	ldaD R12,1060; reg:acon
	cpy2 RL10,R0
	zext4 RL10; CVUI4 jan 16
	ldI4 RL8,65280 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	shrI4I RL10,8
	cpy2 R11,RL10 ;LOADU2(reg)*
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
	ldaD R12,1061; reg:acon
	alu2I R11,R0,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R13,R11
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _SPI_Write
;    SPI_Write(S0_CR,CR_SEND);
	ldaD R12,1025; reg:acon
	ldaD R13,32; reg:acon
	Ccall _SPI_Write
L56:
;    while(SPI_Read(S0_CR));
L57:
	ldaD R12,1025; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	jnzU1 r11,L56; NEI2(CVUI2(reg),con0)
;    return 1;
	ldaD R15,1; reg:acon
L45:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 6; release room for local variables 
	Cretn

_report:
	reserve 22
	st2 r12,'O',sp,(24); flag1 
;void report(char * where){
;	printf(" at %s: wiznet MR=%x, S0_SR=%x, S0_MR=%x, S0_PORT=%x %x\n", where, SPI_Read(MR), SPI_Read(S0_SR), SPI_Read(S0_MR), SPI_Read(S0_PORT), SPI_Read(S0_PORT+1));
	ld2z R12
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+24); ASGNI2(addr,reg)*;
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-6+24); ASGNI2(addr,reg)*;
	ldaD R12,1024; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-8+24); ASGNI2(addr,reg)*;
	ldaD R12,1028; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-10+24); ASGNI2(addr,reg)*;
	ldaD R12,1029; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L60; reg:acon
	ld2 R13,'O',sp,(0+24);reg:  INDIRP2(addr)
	ld2 R10,'O',sp,(-4+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-6+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	ld2 R10,'O',sp,(-8+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(8); arg+f**
	ld2 R10,'O',sp,(-10+24) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(10); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(12); arg+f**
	Ccall _printf
;}
L59:
	release 22
	Cretn

L62:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 13
	db 10
	db 0
_sendack:
	reserve 6
;void sendack(){
;	sendrc=send0(ack,strlen((char *)ack)); 	// Now Send the HTTP Response
	ldaD R12,L62; reg:acon
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ldaD R12,L62; reg:acon
	cpy2 R13,R11 ;LOADU2(reg)*
	Ccall _send0;CALLU2(ar)*
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
;}
L61:
	release 6
	Cretn

_send0s:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;int send0s(unsigned char* what){
;	return send0(what,strlen((char *)what));
	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
	cpy2 R13,R11 ;LOADU2(reg)*
	Ccall _send0;CALLU2(ar)*
	cpy2 R11,R15 ;LOADI2(reg)*
L63:
	release 4
	Cretn

L65:
	db 72
	db 84
	db 84
	db 80
	db 47
	db 49
	db 46
	db 48
	db 32
	db 50
	db 48
	db 48
	db 32
	db 79
	db 75
	db 13
	db 10
	db 67
	db 111
	db 110
	db 116
	db 101
	db 110
	db 116
	db 45
	db 84
	db 121
	db 112
	db 101
	db 58
	db 32
	db 116
	db 101
	db 120
	db 116
	db 47
	db 104
	db 116
	db 109
	db 108
	db 13
	db 10
	db 13
	db 10
	db 60
	db 104
	db 116
	db 109
	db 108
	db 62
	db 60
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 115
	db 112
	db 97
	db 110
	db 32
	db 115
	db 116
	db 121
	db 108
	db 101
	db 61
	db 34
	db 99
	db 111
	db 108
	db 111
	db 114
	db 58
	db 35
	db 48
	db 48
	db 48
	db 48
	db 65
	db 48
	db 34
	db 62
	db 13
	db 10
	db 60
	db 104
	db 49
	db 62
	db 60
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 79
	db 108
	db 100
	db 117
	db 105
	db 110
	db 111
	db 32
	db 49
	db 56
	db 48
	db 50
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 60
	db 47
	db 99
	db 101
	db 110
	db 116
	db 101
	db 114
	db 62
	db 60
	db 47
	db 104
	db 49
	db 62
	db 13
	db 10
	db 60
	db 112
	db 62
	db 60
	db 102
	db 111
	db 114
	db 109
	db 32
	db 109
	db 101
	db 116
	db 104
	db 111
	db 100
	db 61
	db 34
	db 80
	db 79
	db 83
	db 84
	db 34
	db 62
	db 13
	db 10
	db 0
L66:
	db 60
	db 112
	db 62
	db 60
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 100
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 48
	db 34
	db 32
	db 0
L67:
	db 62
	db 76
	db 69
	db 68
	db 32
	db 79
	db 70
	db 70
	db 13
	db 10
	db 60
	db 98
	db 114
	db 62
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 114
	db 97
	db 100
	db 105
	db 111
	db 34
	db 32
	db 110
	db 97
	db 109
	db 101
	db 61
	db 34
	db 114
	db 100
	db 34
	db 32
	db 118
	db 97
	db 108
	db 117
	db 101
	db 61
	db 34
	db 49
	db 34
	db 32
	db 0
L68:
	db 62
	db 76
	db 69
	db 68
	db 32
	db 79
	db 78
	db 13
	db 10
	db 60
	db 47
	db 115
	db 116
	db 114
	db 111
	db 110
	db 103
	db 62
	db 60
	db 112
	db 62
	db 13
	db 10
	db 60
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 116
	db 121
	db 112
	db 101
	db 61
	db 34
	db 115
	db 117
	db 98
	db 109
	db 105
	db 116
	db 34
	db 62
	db 13
	db 10
	db 60
	db 47
	db 102
	db 111
	db 114
	db 109
	db 62
	db 60
	db 47
	db 115
	db 112
	db 97
	db 110
	db 62
	db 60
	db 47
	db 98
	db 111
	db 100
	db 121
	db 62
	db 60
	db 47
	db 104
	db 116
	db 109
	db 108
	db 62
	db 13
	db 10
	db 0
L69:
	db 99
	db 104
	db 101
	db 99
	db 107
	db 101
	db 100
	db 0
L70:
	db 32
	db 0
_sendstuff:
	pushr r7
	reserve 4; save room for outgoing arguments
;void sendstuff(){
;	printf("sendstuff sees ledmode=%d\n",ledmode);
	ldaD R12,L71; reg:acon
	ld2 R13,'D',(_ledmode),0 ;reg:INDIRI2(addr)
	Ccall _printf
;	sendrc=send0s(hdr); 	// Now Send the HTTP Response first part
	ldaD R12,L65; reg:acon
	Ccall _send0s; CALLI2(ar)
	cpy2 R7,R15 ;LOADI2(reg)*
;	sendrc=send0s(rpart1); 	// Now Send the radio button 1st part
	ldaD R12,L66; reg:acon
	Ccall _send0s; CALLI2(ar)
	cpy2 R7,R15 ;LOADI2(reg)*
;	if (ledmode==0) send0s(checked); else send0s(unchecked);
	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
	jnzU2 r11,L72; NE 0
	ldaD R12,L69; reg:acon
	Ccall _send0s; CALLI2(ar)
	lbr L73
L72:
	ldaD R12,L70; reg:acon
	Ccall _send0s; CALLI2(ar)
L73:
;	sendrc=send0s(rpart2); 	// Now Send the radio button 2nd part
	ldaD R12,L67; reg:acon
	Ccall _send0s; CALLI2(ar)
	cpy2 R7,R15 ;LOADI2(reg)*
;	if (ledmode==1) send0s(checked); else send0s(unchecked);
	ld2 R11,'D',(_ledmode),0 ;reg:INDIRI2(addr)
	jneU2I r11,1,L74; NE
	ldaD R12,L69; reg:acon
	Ccall _send0s; CALLI2(ar)
	lbr L75
L74:
	ldaD R12,L70; reg:acon
	Ccall _send0s; CALLI2(ar)
L75:
;	sendrc=send0s(trlr); 	// Now Send the rest of the page
	ldaD R12,L68; reg:acon
	Ccall _send0s; CALLI2(ar)
	cpy2 R7,R15 ;LOADI2(reg)*
;}
L64:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_strindex:
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r6,r13; function(2055) 1
;{
;  n=strlen(t);
	cpy2 R12,R6 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R0,R15 ;LOADU2(reg)*
;  for(i=0;*(s+i); i++) {
	ld2z R1
	lbr L80
L77:
;    if (strncmp(s+i,t,n) == 0)
	alu2 R12,R1,R7,add,adc
	cpy2 R13,R6 ;LOADP2(reg)
	st2 r0,'O',sp,(4); arg+f**
	Ccall _strncmp; CALLI2(ar)
	jnzU2 r15,L81; NE 0
;      return i;
	cpy2 R15,R1 ;LOADI2(reg)*
	lbr L76
L81:
;  }
L78:
;  for(i=0;*(s+i); i++) {
	incm R1,1
L80:
	alu2 R11,R1,R7,add,adc
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L77; NEI2(CVUI2(reg),con0)
;  return -1;
	ldaD R15,-1; reg:acon
L76:
	release 6; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_analyzeinput:
	reserve 6; save room for local variables
	pushr r7
	reserve 10; save room for outgoing arguments
;void analyzeinput(){
;	int reqmode=3; //mode request zero=off, 1=on, else =no request
	ldaD R7,3; reg:acon
;	printf("input from %d.%d.%d.%d\n\n",SPI_Read(S0_DIPR + 0),SPI_Read(S0_DIPR + 1),SPI_Read(S0_DIPR + 2),SPI_Read(S0_DIPR + 3));
	ldaD R12,1036; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-4+20); ASGNI2(addr,reg)*;
	ldaD R12,1037; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-6+20); ASGNI2(addr,reg)*;
	ldaD R12,1038; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADI2(reg)*
	st2 R11,'O',sp,(-8+20); ASGNI2(addr,reg)*;
	ldaD R12,1039; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	ldaD R12,L84; reg:acon
	ld2 R10,'O',sp,(-4+20) ;reg:INDIRI2(addr)
	cpy1 R13,R10
	zExt R13 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	ld2 R10,'O',sp,(-6+20) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(4); arg+f**
	ld2 R10,'O',sp,(-8+20) ;reg:INDIRI2(addr)
	zExt R10 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r10,'O',sp,(6); arg+f**
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;	printf("analyzing:\n%s\n",buf);
	ldaD R12,L85; reg:acon
	ldaD R13,_buf; reg:acon
	Ccall _printf
;  	if (strindex((char *)buf,"POST /")>=0) reqtype=post;
	ldaD R12,_buf; reg:acon
	ldaD R13,L88; reg:acon
	Ccall _strindex; CALLI2(ar)
	jcI2I r15,0,lbnf,L86  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ldaD R11,1; reg:acon
	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
L86:
;	if (strindex((char *)buf,"GET /")>=0) reqtype=get;
	ldaD R12,_buf; reg:acon
	ldaD R13,L91; reg:acon
	Ccall _strindex; CALLI2(ar)
	jcI2I r15,0,lbnf,L89  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ld2z R11
	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
L89:
;	if (strindex((char *)buf,"GET /favicon")>=0) reqtype=favicon;
	ldaD R12,_buf; reg:acon
	ldaD R13,L94; reg:acon
	Ccall _strindex; CALLI2(ar)
	jcI2I r15,0,lbnf,L92  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ldaD R11,2; reg:acon
	st2 R11,'D',(_reqtype),0; ASGNI2(addr,reg)*;
L92:
;	if (reqtype==post){
	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
	jneU2I r11,1,L95; NE
;	    printf("POST received\n");
	ldaD R12,L97; reg:acon
	Ccall _printf
;	  if (strindex((char *)buf,"rd=0") > 0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L100; reg:acon
	Ccall _strindex; CALLI2(ar)
	jnI2I r15,0,lbdf,L98 ;LEI2 0 15 L98; LE is flipped test & subtraction
;		reqmode=0;
	ld2z R7
L98:
;	  if (strindex((char *)buf,"rd=1") > 0)
	ldaD R12,_buf; reg:acon
	ldaD R13,L103; reg:acon
	Ccall _strindex; CALLI2(ar)
	jnI2I r15,0,lbdf,L96 ;LEI2 0 15 L96; LE is flipped test & subtraction
;		reqmode=1;
	ldaD R7,1; reg:acon
;	}
	lbr L96
L95:
;	else if (reqtype==get)
	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
	jnzU2 r11,L104; NE 0
;		printf("GET received.\n");
	ldaD R12,L106; reg:acon
	Ccall _printf
	lbr L105
L104:
;	else if (reqtype==favicon)
	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
	jneU2I r11,2,L107; NE
;		printf("favicon ignored\n");
	ldaD R12,L109; reg:acon
	Ccall _printf
	lbr L108
L107:
;		printf("unknown input\n");
	ldaD R12,L110; reg:acon
	Ccall _printf
L108:
L105:
L96:
;	if (reqmode==0){
	jnzU2 r7,L111; NE 0
;		printf("setting led off\n");
	ldaD R12,L113; reg:acon
	Ccall _printf
;		ledmode=0;
	ld2z R11
	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
;		digitalWrite(0,LOW);
	ld2z R11
	cpy2 R12,R11 ;LOADI2(reg)*
	cpy2 R13,R11 ;LOADI2(reg)*
	Ccall _digitalWrite
;	} else{
	lbr L112
L111:
;		if (reqmode==1){
	jneU2I r7,1,L114; NE
;			printf("setting led ON\n");
	ldaD R12,L116; reg:acon
	Ccall _printf
;			ledmode=1;
	ldaD R11,1; reg:acon
	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
;			digitalWrite(0,HIGH);
	ld2z R12
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;		}else{
	lbr L115
L114:
;			printf("No led action request\n");
	ldaD R12,L117; reg:acon
	Ccall _printf
;		}
L115:
;	}
L112:
;}
L83:
	release 10; release room for outgoing arguments
	popr r7
	release 6; release room for local variables 
	Cretn

_sendresponse:
	reserve 4
;void sendresponse(){
;	switch (reqtype){
	ld2 R11,'D',(_reqtype),0 ;reg:INDIRI2(addr)
	jzU2 r11,L121; EQ 0
	jeqU2I r11,1,L121;EQI2(reg,con)
	jeqU2I r11,2,L123;EQI2(reg,con)
	lbr L119
L121:
;			printf("sending form \n");
	ldaD R12,L122; reg:acon
	Ccall _printf
;			sendstuff();
	Ccall _sendstuff
;			break;
	lbr L120
L123:
;			printf("sending ack\n");
	ldaD R12,L124; reg:acon
	Ccall _printf
;			sendack();
	Ccall _sendack
;			break;
L119:
L120:
;}
L118:
	release 4
	Cretn

_handlesession:
	pushr r7
	reserve 4; save room for outgoing arguments
;void handlesession(){	//handle a session once it's established
;	rsize=recv_size();
	Ccall _recv_size;CALLU2(ar)*
	cpy2 R7,R15 ;LOADU2(reg)*
;	printf("rsz=%d\n",rsize);
	ldaD R12,L126; reg:acon
	cpy2 R13,R7 ;LOADU2(reg)*
	Ccall _printf
;	if (rsize>0){
	jzU2 r7,L127; EQ 0
;		if (recv0(buf,rsize)>0){
	ldaD R12,_buf; reg:acon
	cpy2 R13,R7 ;LOADU2(reg)*
	Ccall _recv0;CALLU2(ar)*
	jzU2 r15,L129; EQ 0
;			analyzeinput();
	Ccall _analyzeinput
;			sendresponse();
	Ccall _sendresponse
;			disconnect0();
	Ccall _disconnect0
;		}
L129:
;	}
L127:
;}
L125:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_server_loop:
	reserve 6
;void server_loop(){
;  	socketstatus=SPI_Read(S0_SR);
	ldaD R12,1027; reg:acon
	Ccall _SPI_Read; CALLI2(ar)
	cpy2 R11,R15 ;LOADU2(reg)*
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-4+8); ASGNI2(addr,reg)*;
;  	switch (socketstatus){
	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	ld2z R10
	jzU2 r11,L134; EQ 0
	jcI2 r11,r10,lbnf,L132; LT=lbnf i.e. subtract B from A and jump if borrow 
L140:
	ld2 R11,'O',sp,(-4+8) ;reg:INDIRI2(addr)
	jcI2I r11,23,lbnf,L132  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r11,29,lbnf,L132; GT reverse  the subtraction
	shl2I R11,1
	ld2 R11,'O',R11,(L141-46);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L141:
	dw L136
	dw L138
	dw L132
	dw L138
	dw L138
	dw L138
	dw L138
L134:
;	  	printf("SC\n");
	ldaD R12,L135; reg:acon
	Ccall _printf
;			socket0_init();	//initialize socket 0
	Ccall _socket0_init
;	  		break;
	lbr L133
L136:
;	  	printf("SX\n");
	ldaD R12,L137; reg:acon
	Ccall _printf
;	  		handlesession();
	Ccall _handlesession
;	  		break;
	lbr L133
L138:
;		  	printf("CS\n");
	ldaD R12,L139; reg:acon
	Ccall _printf
;      		close0();
	Ccall _close0
;      		break;
L132:
L133:
;}
L131:
	release 6
	Cretn

_main: ;copt is peeping you now!
	reserve 12
;void main(void){
;	ledmode=1;
	ldaD R11,1; reg:acon
	st2 R11,'D',(_ledmode),0; ASGNI2(addr,reg)*;
;	digitalWrite(0,HIGH);
	ld2z R12
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;	delay(1000);
	ldaD R12,1000; reg:acon
	Ccall _delay
;	printf("\nOlduino Web Server v2.1\n");
	ldaD R12,L144; reg:acon
	Ccall _printf
;    W5100_Init(); //initialize the wiznet chip
	Ccall _W5100_Init
	lbr L146
L145:
;	while(1){  // Loop forever
;		server_loop();
	Ccall _server_loop
;		delay(100);
	ldaD R12,100; reg:acon
	Ccall _delay
;	}
L146:
;	while(1){  // Loop forever
	lbr L145
;}
L143:
	release 12
	Cretn

_delay:
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R6,1; reg:acon
	lbr L152
L149:
;		oneMs();
	Ccall _oneMs; CALLI2(ar)
;	}
L150:
;	for (i=1;i!=howlong;i++){
	incm R6,1
L152:
	jneU2 r6,r7,L149; NE
;}
L148:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L153:
	Cretn

_strncmp:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L159
L156:
;	if (*s1 != *s2)
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L160; EQI2(reg,reg)
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R13,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbdf,L163; GE is flipped test from LT
	ldaD R6,-1; reg:acon
	lbr L164
L163:
	ldaD R6,1; reg:acon
L164:
	cpy2 R15,R6 ;LOADI2(reg)*
	lbr L155
L160:
;	else if (*s1 == '\0')
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L165; NEI2(CVUI2(reg),con0)
;	    return 0;
	ld2z R15
	lbr L155
L165:
L157:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L159:
	jnzU2 r7,L156; NE 0
;    return 0;
	ld2z R15
L155:
	popr r7
	popr r6
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L171
L168:
L169:
	incm R13,1
	incm R12,1
L171:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	jnzU1 r11,L168; NEI2(CVUI2(reg),con0)
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L167:
	release 2
	Cretn

_strlen:
	pushr r7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L174
L173:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L174:
;	while (*str != 0) {
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L173; NEI2(CVUI2(reg),con0)
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)*
L172:
	popr r7
	Cretn

_printstr:
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L178
L177:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg) opt1
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out; CALLI2(ar)
L178:
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 r11,L177; NEI2(CVUI2(reg),con0)
;}
L176:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:
	reserve 62; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked&floaty
	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
;   if (flt < 0.0) {
	ld4 RL10,'D',(L183),0;INDIRF4(addr)
	jcF4 RL6,RL10,lbdf,L181;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      flt *= -1.0 ;
	ld4 RL8,'D',(L184),0;INDIRF4(addr)
	cpy4 RL10,RL6; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   } else {
	lbr L182
L181:
;      if (use_leading_plus) {
	lbr L185
;         *output++ = '+' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L185:
;   }
L182:
;   if (dec_digits < 8) {
	jcI2I r1,8,lbdf,L187; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6; LOADU4(reg)
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   }
L187:
;	mult=mult_nums[dec_digits];
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
;   wholeNum = flt;
	cpy4 RL8,RL6; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-8+80)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6; LOADU4(reg)
	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-16+80)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	alu2 R0,R15,R0,add,adc
;   if (dec_digits > 0) {
	jzU2 r1,L189; EQ 0
;		*output++ = '.' ;
	cpy2 R11,R0 ;LOADP2(reg) opt1
	incm R0,1
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
	st2 r0,'O',sp,(4); arg+f**
	cpy2 R11,R1 ;LOADI2(reg)*
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	}
L189:
;   return outbfr;
	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
L180:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 62; release room for local variables 
	Cretn

_itoa:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-4+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L192; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R6,R11 ;LOADU2(reg)*
;	} else{
	lbr L193
L192:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R6,R11 ;LOADU2(reg)*
;	}
L193:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L195
L194:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L200
L197:
L198:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L200:
	jcU2 r6,r7,lbdf,L197 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	jnzU2 r0,L204; NE 0
	jnzU2 r1,L204; NE 0
	jneU2I r7,1,L201; NE
L204:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R1,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+16); ASGNP2
;			flag='y';
	ldaD R0,121; reg:acon
;		}
L201:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R7,R15 ;LOADU2(reg)*
;	}
L195:
;	while(k>0){
	jnzU2 r7,L194; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L191:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_ltoa:
	pushr r1
	pushr r6
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL6,RL10,lbdf,L206; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R1 ;LOADP2(reg) opt1
	incm R1,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
;	}
L206:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6; LOADI4*
	st2 r1,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R1 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
L205:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L208:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L209:
	release 18
	Cretn

_printflt:
	reserve 28
	st2 r12,'O',sp,(30); flag1 
	st2 r13,'O',sp,(32); flag1 
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
	ldA2 R11,'O',sp,(-22+30); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L210:
	release 28
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L212; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L213
L212:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L213:
;}
L211:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L214:
	release 4
	Cretn

_printf:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R1
;	int * this=(int *)&ptr;
	ldA2 R6,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R6,2
	incm R1,1
	lbr L217
L216:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L219;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L220
L219:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R0,R7
	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jcI2I r0,99,lbnf,L240  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r0,108,lbnf,L241; GT reverse  the subtraction
	cpy2 R11,R0
	shl2I R11,1
	ld2 R11,'O',R11,(L242-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L242:
	dw L226
	dw L224
	dw L221
	dw L235
	dw L221
	dw L221
	dw L224
	dw L221
	dw L221
	dw L228
L240:
	jeqU2I r0,88,L227;EQI2(reg,con)
	lbr L221
L241:
	ldaD R11,115; reg:acon
	jeqI2 r0,r11,L225; EQI2(reg,reg)
	jcI2 r0,r11,lbnf,L221; LT=lbnf i.e. subtract B from A and jump if borrow 
L244:
	jeqU2I r0,120,L227;EQI2(reg,con)
	lbr L221
L224:
;					printint(*this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L222
L225:
;					printstr((char*) *this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L222
L226:
;					putc((unsigned int) *this++);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L222
L227:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L222
L228:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L229; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L231; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L231:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L233; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R6,4
;						} else{
	lbr L234
L233:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L234:
;						argslot+=2;
	incm R1,2
;						break;
	lbr L222
L229:
L235:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L236; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L238; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L238:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R6,4
;						argslot+=2;
	incm R1,2
;						break;
	lbr L222
L236:
L221:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L222:
;		} //%
L220:
;	} //while
L217:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L216; NEI2(CVUI2(reg),con0)
;} //prtf
L215:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L246; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L247:
;	while(1);
L248:
	lbr L247
;}
L245:
	release 4
	Cretn

_memcmp:
	pushr r0
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L252
L251:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 ;LOADP2(reg) opt1
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg) opt1
	incm R0,1
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R6,R11,R10,sm,smb
;    }
L252:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jzU2 r11,L254; EQ 0
	jzU2 r6,L251; EQ 0
L254:
;    return v;
	cpy2 R15,R6 ;LOADI2(reg)*
L250:
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_memcpy:
	pushr r1
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R1,R13 ;LOADP2(reg)
	lbr L257
L256:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,1
	cpy2 R10,R1 ;LOADP2(reg) opt1
	incm R1,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L257:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L256; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L255:
	popr r7
	popr r6
	popr r1
	Cretn

_memset:
	pushr r6
	pushr r7
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R6,R12 ;LOADP2(reg)
	lbr L261
L260:
;        *p++ = (unsigned char)c;
	cpy2 R11,R6 ;LOADP2(reg) opt1
	incm R6,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L261:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L260; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L259:
	popr r7
	popr r6
	Cretn

_spincluder:
;void spincluder(){
;	asm("\tinclude fastspi.inc\n");
	include fastspi.inc
;}
L263:
	Cretn

_buf:
	db 512 dup (0); zerofill global
L246:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L184:
	dd 0xbf800000
	align 4
L183:
	dd 0x0
L144:
	db 10
	db 79
	db 108
	db 100
	db 117
	db 105
	db 110
	db 111
	db 32
	db 87
	db 101
	db 98
	db 32
	db 83
	db 101
	db 114
	db 118
	db 101
	db 114
	db 32
	db 118
	db 50
	db 46
	db 49
	db 10
	db 0
L139:
	db 67
	db 83
	db 10
	db 0
L137:
	db 83
	db 88
	db 10
	db 0
L135:
	db 83
	db 67
	db 10
	db 0
L126:
	db 114
	db 115
	db 122
	db 61
	db 37
	db 100
	db 10
	db 0
L124:
	db 115
	db 101
	db 110
	db 100
	db 105
	db 110
	db 103
	db 32
	db 97
	db 99
	db 107
	db 10
	db 0
L122:
	db 115
	db 101
	db 110
	db 100
	db 105
	db 110
	db 103
	db 32
	db 102
	db 111
	db 114
	db 109
	db 32
	db 10
	db 0
L117:
	db 78
	db 111
	db 32
	db 108
	db 101
	db 100
	db 32
	db 97
	db 99
	db 116
	db 105
	db 111
	db 110
	db 32
	db 114
	db 101
	db 113
	db 117
	db 101
	db 115
	db 116
	db 10
	db 0
L116:
	db 115
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 108
	db 101
	db 100
	db 32
	db 79
	db 78
	db 10
	db 0
L113:
	db 115
	db 101
	db 116
	db 116
	db 105
	db 110
	db 103
	db 32
	db 108
	db 101
	db 100
	db 32
	db 111
	db 102
	db 102
	db 10
	db 0
L110:
	db 117
	db 110
	db 107
	db 110
	db 111
	db 119
	db 110
	db 32
	db 105
	db 110
	db 112
	db 117
	db 116
	db 10
	db 0
L109:
	db 102
	db 97
	db 118
	db 105
	db 99
	db 111
	db 110
	db 32
	db 105
	db 103
	db 110
	db 111
	db 114
	db 101
	db 100
	db 10
	db 0
L106:
	db 71
	db 69
	db 84
	db 32
	db 114
	db 101
	db 99
	db 101
	db 105
	db 118
	db 101
	db 100
	db 46
	db 10
	db 0
L103:
	db 114
	db 100
	db 61
	db 49
	db 0
L100:
	db 114
	db 100
	db 61
	db 48
	db 0
L97:
	db 80
	db 79
	db 83
	db 84
	db 32
	db 114
	db 101
	db 99
	db 101
	db 105
	db 118
	db 101
	db 100
	db 10
	db 0
L94:
	db 71
	db 69
	db 84
	db 32
	db 47
	db 102
	db 97
	db 118
	db 105
	db 99
	db 111
	db 110
	db 0
L91:
	db 71
	db 69
	db 84
	db 32
	db 47
	db 0
L88:
	db 80
	db 79
	db 83
	db 84
	db 32
	db 47
	db 0
L85:
	db 97
	db 110
	db 97
	db 108
	db 121
	db 122
	db 105
	db 110
	db 103
	db 58
	db 10
	db 37
	db 115
	db 10
	db 0
L84:
	db 105
	db 110
	db 112
	db 117
	db 116
	db 32
	db 102
	db 114
	db 111
	db 109
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
L71:
	db 115
	db 101
	db 110
	db 100
	db 115
	db 116
	db 117
	db 102
	db 102
	db 32
	db 115
	db 101
	db 101
	db 115
	db 32
	db 108
	db 101
	db 100
	db 109
	db 111
	db 100
	db 101
	db 61
	db 37
	db 100
	db 10
	db 0
L60:
	db 32
	db 97
	db 116
	db 32
	db 37
	db 115
	db 58
	db 32
	db 119
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 77
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 83
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 77
	db 82
	db 61
	db 37
	db 120
	db 44
	db 32
	db 83
	db 48
	db 95
	db 80
	db 79
	db 82
	db 84
	db 61
	db 37
	db 120
	db 32
	db 37
	db 120
	db 10
	db 0
L26:
	db 68
	db 111
	db 110
	db 101
	db 32
	db 87
	db 105
	db 122
	db 110
	db 101
	db 116
	db 32
	db 87
	db 53
	db 49
	db 48
	db 48
	db 32
	db 73
	db 110
	db 105
	db 116
	db 105
	db 97
	db 108
	db 105
	db 122
	db 97
	db 116
	db 105
	db 111
	db 110
	db 32
	db 111
	db 110
	db 32
	db 73
	db 80
	db 32
	db 97
	db 100
	db 100
	db 114
	db 101
	db 115
	db 115
	db 32
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 46
	db 37
	db 100
	db 10
	db 10
	db 0
	include lcc1802Epilofl.inc
	include LCC1802fp.inc
	include IO1802.inc
