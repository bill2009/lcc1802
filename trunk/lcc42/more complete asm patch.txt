This is another attempt for inline assembly in lcc. It does not follow
the gcc style in this version, but it works fine for me. The syntax
is:

int kk;

void foo(int i) {

    asm("movl $i(%ebp), %eax\n"
        "leal $kk, %ebx\n"
        "movl %eax, (%ebx)\n");

}

The patch probably is broken by the HTML posting so a few edit could
be necessary to apply (aka broken lines).



diff -Nru ../orig/lcc-4.2/src/alpha.md lcc-4.2/src/alpha.md
--- ../orig/lcc-4.2/src/alpha.md	2002-08-28 16:12:41.000000000 -0700
+++ lcc-4.2/src/alpha.md	2004-02-19 19:51:35.372173832 -0800
@@ -321,6 +321,8 @@
 %term LOADU4=4326
 %term LOADU8=8422
 
+%term IASMV=88
+
 %term VREGP=711
 %%
 reg:  INDIRI1(VREGP)     "# read register\n"
@@ -620,6 +622,8 @@
 stmt: ARGB(INDIRB(reg))       "# argb %0\n"      1
 stmt: ASGNB(reg,INDIRB(reg))  "# asgnb %0 %1\n"  1
 
+stmt: IASMV		 "# emit inline assembly\n"
+
 %%
 static void progend(void){}
 
@@ -797,6 +801,9 @@
                 break;
                 }
 
+	case IASM+V:
+		asminline(p);
+		break;
         }
 }
 
diff -Nru ../orig/lcc-4.2/src/c.h lcc-4.2/src/c.h
--- ../orig/lcc-4.2/src/c.h	2002-08-28 16:12:41.000000000 -0700
+++ lcc-4.2/src/c.h	2004-02-19 19:51:35.372173832 -0800
@@ -6,6 +6,7 @@
 #include <limits.h>
 #include <string.h>
 
+#define NEWSTR(d, s, a) do { (d) = (char *) allocate(strlen(s) + 1,
a); strcpy(d, s); } while (0)
 #define NEW(p,a) ((p) = allocate(sizeof *(p), (a)))
 #define NEW0(p,a) memset(NEW((p),(a)), 0, sizeof *(p))
 #define isaddrop(op) (specific(op)==ADDRG+P || specific(op)==ADDRL+P
\
@@ -551,6 +552,7 @@
 extern Symbol install(const char *, Table *, int, int);
 extern Symbol intconst(int);
 extern Symbol lookup(const char *, Table);
+extern Symbol xlookup(const char *name, Table tp);
 extern Symbol mkstr(char *);
 extern Symbol mksymbol(int, const char *, Type);
 extern Symbol newtemp(int, int, int);
diff -Nru ../orig/lcc-4.2/src/config.h lcc-4.2/src/config.h
--- ../orig/lcc-4.2/src/config.h	2002-08-28 16:12:42.000000000 -0700
+++ lcc-4.2/src/config.h	2004-02-19 19:51:35.372173832 -0800
@@ -39,6 +39,7 @@
 extern void    setreg(Node, Symbol);
 extern void    spill(unsigned, int, Node);
 extern int     widens(Node);
+extern void    asminline(Node p);
 
 extern int      argoffset, maxargoffset;
 extern int      bflag, dflag;
diff -Nru ../orig/lcc-4.2/src/dag.c lcc-4.2/src/dag.c
--- ../orig/lcc-4.2/src/dag.c	2002-08-28 16:12:42.000000000 -0700
+++ lcc-4.2/src/dag.c	2004-02-19 19:51:35.372173832 -0800
@@ -372,6 +372,10 @@
 		      if (tp->u.sym->generated)
 		      	addlocal(tp->u.sym);
 		      p = node(tp->op + sizeop(voidptype->size), NULL, NULL,
tp->u.sym); } break;
+	case IASM: {
+		p = newnode(IASM+V, NULL, NULL, NULL);
+
+		list(p); } break;
 	default:assert(0);
 	}
 	tp->node = p;
diff -Nru ../orig/lcc-4.2/src/gen.c lcc-4.2/src/gen.c
--- ../orig/lcc-4.2/src/gen.c	2002-08-28 16:12:43.000000000 -0700
+++ lcc-4.2/src/gen.c	2004-02-19 19:51:35.373173680 -0800
@@ -828,3 +828,32 @@
 	return p->x.regnode->set<<8 | p->x.regnode->number;
 }
 
+void asminline(Node p) {
+	int i, sym, nsym, symidx;
+	char *asmi;
+	Symbol *idlist;
+	Symbol s;
+
+	asmi = p->syms[0]->name;
+	idlist = p->syms[0]->u.idlist;
+	for (nsym = 0; idlist[nsym]; nsym++);
+	for (i = 0; asmi[i]; i++) {
+		if (asmi[i] == '\\')
+			print("%c", asmi[++i]);
+		else if (asmi[i] == '$') {
+			symidx = atoi(asmi + i + 1);
+			for (i++; isdigit(asmi[i + 1]); i++);
+			if (symidx < 0 || symidx >= nsym) {
+				error("unknown symbol: $%d\n", symidx);
+				exit(1);
+			}
+			if (!(s = idlist[symidx])->x.name) {
+				error("unknown symbol: $%s\n", s->name);
+				exit(1);
+			}
+			print("%s", s->x.name);
+		} else
+			print("%c", asmi[i]);
+	}
+}
+
diff -Nru ../orig/lcc-4.2/src/lex.c lcc-4.2/src/lex.c
--- ../orig/lcc-4.2/src/lex.c	2002-08-28 16:12:44.000000000 -0700
+++ lcc-4.2/src/lex.c	2004-02-19 19:51:35.373173680 -0800
@@ -382,6 +382,12 @@
 				cp = rcp + 3;
 				return AUTO;
 			}
+			if (rcp[0] == 's'
+			&&  rcp[1] == 'm'
+			&& !(map[rcp[2]]&(DIGIT|LETTER))) {
+				cp = rcp + 2;
+				return ASM;
+			}
 			goto id;
 		case 'b':
 			if (rcp[0] == 'r'
diff -Nru ../orig/lcc-4.2/src/mips.md lcc-4.2/src/mips.md
--- ../orig/lcc-4.2/src/mips.md	2002-08-28 16:12:44.000000000 -0700
+++ lcc-4.2/src/mips.md	2004-02-19 19:51:35.374173528 -0800
@@ -323,6 +323,8 @@
 %term LOADU4=4326
 %term LOADU8=8422
 
+%term IASMV=88
+
 %term VREGP=711
 %%
 reg:  INDIRI1(VREGP)     "# read register\n"
@@ -523,6 +525,9 @@
 
 stmt: ARGB(INDIRB(reg))       "# argb %0\n"      1
 stmt: ASGNB(reg,INDIRB(reg))  "# asgnb %0 %1\n"  1
+
+stmt: IASMV		 "# emit inline assembly\n"
+
 %%
 static void progend(void){}
 static void progbeg(int argc, char *argv[]) {
@@ -669,6 +674,9 @@
                 for ( ; dst <= 12 && dst < n; dst += 4)
                         print("lw $%d,%d($sp)\n", (dst/4)+4, dst);
                 break;
+	case IASM+V:
+		asminline(p);
+		break;
         }
 }
 static Symbol argreg(int argno, int offset, int ty, int sz, int ty0)
{
diff -Nru ../orig/lcc-4.2/src/ops.h lcc-4.2/src/ops.h
--- ../orig/lcc-4.2/src/ops.h	2002-09-03 16:39:33.000000000 -0700
+++ lcc-4.2/src/ops.h	2004-02-19 19:51:35.374173528 -0800
@@ -131,3 +131,5 @@
 	op(LOAD,I,csilh)
 	op(LOAD,P,p)
 	op(LOAD,U,csilhp)
+gop(IASM,5)
+	op(IASM,V,-)
diff -Nru ../orig/lcc-4.2/src/sparc.md lcc-4.2/src/sparc.md
--- ../orig/lcc-4.2/src/sparc.md	2002-08-28 16:12:46.000000000 -0700
+++ lcc-4.2/src/sparc.md	2004-02-19 19:51:35.379172768 -0800
@@ -325,6 +325,8 @@
 %term LOADU4=4326
 %term LOADU8=8422
 
+%term IASMV=88
+
 %term VREGP=711
 %%
 reg:  INDIRI1(VREGP)     "# read register\n"
@@ -576,6 +578,8 @@
 
 stmt:  ASGNB(reg,INDIRB(reg))  "# ASGNB\n"
 
+stmt: IASMV		 "# emit inline assembly\n"
+
 %%
 static void progend(void){}
 static void progbeg(int argc, char *argv[]) {
@@ -738,7 +742,10 @@
                         getregnum(p->x.kids[1]), 0,
                         p->syms[0]->u.c.v.i, tmpregs);
                 break;
-        }
+	}
+	case IASM+V:
+		asminline(p);
+		break;
         }
 }
 static void local(Symbol p) {
diff -Nru ../orig/lcc-4.2/src/stmt.c lcc-4.2/src/stmt.c
--- ../orig/lcc-4.2/src/stmt.c	2002-08-28 16:12:46.000000000 -0700
+++ lcc-4.2/src/stmt.c	2004-02-19 19:51:35.379172768 -0800
@@ -3,6 +3,7 @@
 static char rcsid[] = "$Id: stmt.c,v 1.1 2002/08/28 23:12:46 drh Exp
$";
 
 #define SWSIZE 512
+#define MAX_IASM_TOKENS 16
 
 #define den(i,j) ((j-buckets[i]+1.0)/(v[j]-v[buckets[i]]+1))
 
@@ -23,6 +24,8 @@
 static void stmtlabel(void);
 static void swstmt(int, int, int);
 static void whilestmt(int, Swtch, int);
+static void asmstmt(int, Swtch, int);
+
 Code code(int kind) {
 	Code cp;
 
@@ -90,6 +93,8 @@
 
 	case FOR:      forstmt(genlabel(4), swp, lev + 1);
  break;
+	case ASM:      asmstmt(genlabel(1), swp, lev + 1);
+		break;
 	case BREAK:    walk(NULL, 0, 0);
 		       definept(NULL);
 		       if (swp && swp->lab > loop)
@@ -706,3 +711,71 @@
 	if (findlabel(lab + 2)->ref)
 		definelab(lab + 2);
 }
+
+static void asmstmt(int lab, Swtch swp, int lev) {
+	int i, j, sym, nsym, ssize;
+	char *asmi, *symn;
+	Tree p;
+	Node n;
+	Symbol s;
+	Symbol *idlist;
+	char ssym[128];
+
+	walk(NULL, 0, 0);
+	t = gettok();
+	expect('(');
+	definept(NULL);
+	if (t != SCON) {
+		error("expecting string constant at line: %d\n", lineno);
+		return;
+	}
+	NEWSTR(asmi, tsym->u.c.v.p, FUNC);
+	t = gettok();
+	expect(')');
+	expect(';');
+
+	idlist = (Symbol *) allocate(32 * sizeof(Symbol), FUNC);
+
+	ssize = strlen(asmi) + 128;
+	symn = (char *) allocate(ssize, FUNC);
+
+	for (i = j = 0, nsym = 0; asmi[i]; i++, j++) {
+		if (asmi[i] == '\\')
+			symn[j] = asmi[++i];
+		else if (asmi[i] == '$') {
+			sym = ++i;
+			while (isdigit(asmi[i]) || isalpha(asmi[i]) || asmi[i] == '_')
i++;
+			if (i - sym >= sizeof(ssym)) {
+				error("symbol too long at: %s\n", asmi + sym);
+				exit(1);
+			}
+			strncpy(ssym, asmi + sym, i - sym + 1);
+			ssym[i - sym] = '\0';
+			if (!(s = xlookup(ssym, identifiers))) {
+				error("unknown symbol: %s\n", ssym);
+				exit(1);
+			}
+			idlist[nsym++] = s;
+			s->addressed = 1;
+			sprintf(symn + j, "$%d", nsym - 1);
+			j = strlen(symn) - 1;
+			i--;
+		} else
+			symn[j] = asmi[i];
+	}
+	idlist[nsym] = NULL;
+
+	p = tree(mkop(IASM, voidtype), voidtype, NULL, NULL);
+	n = listnodes(p, 0, 0);
+
+	NEW0(s, FUNC);
+	s->name = s->x.name = (char *) symn;
+	s->scope = CONSTANTS;
+	s->sclass = STATIC;
+	s->type = voidtype;
+	s->u.idlist = idlist;
+
+	n->syms[0] = s;
+
+}
+
diff -Nru ../orig/lcc-4.2/src/sym.c lcc-4.2/src/sym.c
--- ../orig/lcc-4.2/src/sym.c	2002-08-28 16:12:47.000000000 -0700
+++ lcc-4.2/src/sym.c	2004-02-19 19:51:35.379172768 -0800
@@ -330,3 +330,23 @@
 	}
 	assert(0); return NULL;
 }
+
+/*
+ * Does symbol name lookup in the auto variable array (before)
+ * and, if failed, in the indentifier list. it is used by the
assembly
+ * code emitter to replace $SYMBOL with the content of s->x.name.
+ */
+Symbol xlookup(const char *name, Table tp) {
+	Symbol s;
+	Code cp;
+
+	for (; tp; tp = tp->previous)
+		for (s = tp->all; s; s = s->up) {
+			fprintf(stderr, "name='%s' sym='%s' scope=%d\n",
+				name, s->name, s->scope);
+			if (s->name && !strcmp(name, s->name))
+				return s;
+		}
+	return NULL;
+}
+
diff -Nru ../orig/lcc-4.2/src/token.h lcc-4.2/src/token.h
--- ../orig/lcc-4.2/src/token.h	2002-08-28 16:12:47.000000000 -0700
+++ lcc-4.2/src/token.h	2004-02-19 19:51:35.380172616 -0800
@@ -89,7 +89,7 @@
 xx(WHILE,       84,     0,      0,      0,      IF,     "while")
 xx(TYPECODE,    85,     0,      0,      0,      ID,     "__typecode")
 xx(FIRSTARG,    86,     0,      0,      0,      ID,     "__firstarg")
-yy(0,           87,     0,      0,      0,      0,      0)
+xx(ASM,         87,     0,      IASM,   0,      IF,     "asm")
 yy(0,           88,     0,      0,      0,      0,      0)
 yy(0,           89,     0,      0,      0,      0,      0)
 yy(0,           90,     0,      0,      0,      0,      0)
diff -Nru ../orig/lcc-4.2/src/x86.md lcc-4.2/src/x86.md
--- ../orig/lcc-4.2/src/x86.md	2002-08-28 16:12:48.000000000 -0700
+++ lcc-4.2/src/x86.md	2004-02-19 19:51:35.380172616 -0800
@@ -308,6 +308,8 @@
 %term LOADU4=4326
 %term LOADU8=8422
 
+%term IASMV=88
+
 %term VREGP=711
 %%
 reg:  INDIRI1(VREGP)     "# read register\n"
@@ -586,6 +588,9 @@
 stmt: RETP4(reg)  "# ret\n"
 stmt: RETF4(reg)  "# ret\n"
 stmt: RETF8(reg)  "# ret\n"
+
+stmt: IASMV		 "# emit inline assembly\n"
+
 %%
 static void progbeg(int argc, char *argv[]) {
         int i;
@@ -812,6 +817,8 @@
         else if (op == ARG+B)
                 print("sub esp,%d\nmov edi,esp\nmov ecx,%d\nrep
movsb\n",
                         roundup(p->syms[0]->u.c.v.i, 4),
p->syms[0]->u.c.v.i);
+	else if (op == IASM+V)
+		asminline(p);
 }
 
 static void doarg(Node p) {
diff -Nru ../orig/lcc-4.2/src/x86linux.md lcc-4.2/src/x86linux.md
--- ../orig/lcc-4.2/src/x86linux.md	2002-08-28 16:12:48.000000000
-0700
+++ lcc-4.2/src/x86linux.md	2004-02-19 19:51:35.380172616 -0800
@@ -305,6 +305,8 @@
 %term LOADU4=4326
 %term LOADU8=8422
 
+%term IASMV=88
+
 %term VREGP=711
 %%
 reg:  INDIRI1(VREGP)     "# read register\n"
@@ -680,6 +682,8 @@
 stmt: RETP4(reg)  "# ret\n"
 stmt: RETF4(freg) "# ret\n"
 stmt: RETF8(freg) "# ret\n"
+
+stmt: IASMV		 "# emit inline assembly\n"
 %%
 static void progbeg(int argc, char *argv[]) {
         int i;
@@ -875,6 +879,8 @@
         } else if (op == ARG+B)
                 print("subl $%d,%%esp\nmovl %%esp,%%edi\nmovl
$%d,%%ecx\nrep\nmovsb\n",
                         roundup(p->syms[0]->u.c.v.i, 4),
p->syms[0]->u.c.v.i);
+	else if (op == IASM+V)
+		asminline(p);
 }
 
 static void function(Symbol f, Symbol caller[], Symbol callee[], int
n) {