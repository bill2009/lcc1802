#line 1 "xnc28j60.c"

#line 1 "./mytypes.h"
typedef int int16_t;
typedef unsigned int uint16_t;
typedef unsigned int word;
typedef unsigned char uint8_t;
typedef unsigned char byte;
#line 3 "xnc28j60.c"
#line 1 "C:\lcc42\include/nstdlib.h"




char * strcpy(char *, const char*);
void printstr(char*);
void putc(char);
char * itoa(int, char *);
char * ltoa(long, char *);
void printf(char *, ...);
void exit(int);




int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count);
void* memcpy(void* dest, const void* src, unsigned int count);
#line 4 "xnc28j60.c"
#line 1 "C:\lcc42\include/olduino.h"
void delay(unsigned int);
void digitalWrite(unsigned char,unsigned char);
int digitalRead(unsigned char);
unsigned char PIN4=0;


#line 5 "xnc28j60.c"

#line 1 "./enc.h"
































































































































































































































void writeOp(uint8_t op, uint8_t address, uint8_t data);
 uint8_t readRegByte (uint8_t address);
 void writeRegByte (uint8_t address, uint8_t data);
 void writeReg(uint8_t address, uint16_t data);
 void writePhy (uint8_t address, uint16_t data);
uint8_t ethbegin (const uint16_t size);
uint16_t encpacketReceive();
void encinitSPI ();
uint8_t encinitialize (uint16_t size, const uint8_t* macaddr);
 void readBuf(uint16_t len, uint8_t* data);
 void writeBuf(uint16_t len, const uint8_t* data);
void encpacketSend(uint16_t len);
 uint16_t readPhyByte (uint8_t address);

uint16_t bufferSize;
static uint8_t Enc28j60Bank;
static int16_t gNextPacketPtr;



#line 7 "xnc28j60.c"
#line 1 "./net.h"



























































































































#line 8 "xnc28j60.c"
#line 1 "./tcpip.h"
word tcppacketLoop (word plen);
 void make_tcp_synack_from_syn();
 byte eth_type_is_ip_and_my_ip(word len);
 byte eth_type_is_arp_and_my_ip(word len);
 void make_arp_answer_from_request();
 void make_echo_reply_from_request(word len);
 void make_tcp_ack_from_any(int16_t datlentoack,byte addflags);
 void make_tcp_ack_with_data_noflags(word dlen);
 word get_tcp_data_len();
 byte check_ip_message_is_from(const byte *ip);
 void fill_checksum(byte dest, byte off, word len,byte type);
 void fill_ip_hdr_checksum();
 void make_eth_ip();
 byte client_store_gw_mac();
 void setMACs (const byte *mac);
 void client_arp_whohas(byte *ip_we_search);

 void client_syn(byte srcport,byte dstport_h,byte dstport_l);
 void setMACandIPs (const byte *mac, const byte *dst);

#line 9 "xnc28j60.c"
#line 1 "./webutil.h"
void copyIp (byte *dst, const byte *src);
void copyMac (byte *dst, const byte *src);
#line 10 "xnc28j60.c"
#line 1 "./util.h"
void hexDump(uint8_t *data, uint16_t len);
#line 11 "xnc28j60.c"

static uint8_t mymac[] = {
  0x74,0x69,0x69,0x2D,0x30,0x35 };
uint8_t myip[4]={ 192,168,1,190 };
uint8_t mymask[4];
uint8_t gwip[4];
uint8_t dhcpip[4];
uint8_t dnsip[4];
uint8_t hisip[4];
uint16_t hisport = 80;

uint8_t buffer[700];






void setup () {
  printf("\nEnc28j60 first try\n");

  printf("MAC & IP ");
  hexDump(mymac,6);
  hexDump(myip,4);

  if (ethbegin(700) == 0)
    printf( "Failed to access Ethernet controller\n");

  printf("readRegByte(ECON1) returns: %x\n",readRegByte(0x1F));
  printf("readRegByte(EREVID) returns: %x\n",readRegByte((0x12|0x60)));
  printf("readRegByte(ESTAT) returns: %x\n",readRegByte(0x1D));
  printf("MACtail readback: %x:%x\n",readRegByte((0x00|0x60|0x80)),readRegByte((0x01|0x60|0x80)));

  printf("and we're done\n");
}

void loop () {
	uint16_t len,pos;
  len = encpacketReceive();
  printf(" len=%d",len);
  pos = tcppacketLoop(len);
  printf(" pos=%d",pos);
  delay(2000);
}

void main(){
	asm("	seq	;1 on Q de-activates ethernet chip\n");
	printf("encmule - watch my Q!\n");
	setup();
	while(1){
		loop();
	}
}
#line 1 "C:\lcc42\include/nstdlib.c"





char * strcpy(char * to, const char *from)
{
	char *save = to;

	for (; (*to = *from) != 0; ++from, ++to);
	return(save);
}

void printstr(char *ptr){
    while(*ptr) out(5,*ptr++);
}

char * itoa(int s, char *buffer){
	unsigned int r,k,n;
	unsigned int flag=0;
	char * bptr; bptr=buffer;
	if (s<0){
		*bptr='-';bptr++;
		n=-s;
	} else{
		n=s;
	}
	k=10000;
	while(k>0){
		for(r=0;k<=n;r++,n-=k);
		if (flag || r>0||k==1){
			*bptr=('0'+r);bptr++;
			flag='y';
		}

		k=k/10;
	}

	*bptr='\0';
	return buffer;
}
char * dubdabx(long, char *);
char * ltoa(long s, char *buffer){
	char* bptr=buffer;
	if (s<0){
		*bptr++='-';
		s=-s;
	}
	strcpy(bptr,dubdabx(s,bptr));
	return buffer;
}
void printint(int s){
	char buffer[8];
	itoa(s,buffer);
	printstr(buffer);
}
void printlint(long s){
	char buffer[12];
	printstr(ltoa(s,buffer));
}
void putxn(unsigned char x){
	if (x<10){
		putc(x+'0');
	} else {
		putc(x+'A'-10);
	}
}
void putx(unsigned char x){
	putxn(x>>4);
	putxn(x & 0x0F);
}
void printf(char *ptr,...){

	unsigned char c,xord;
	int argslot=0;
	int * this=(int *)&ptr;
	this++; argslot++;
    while(*ptr) {
		c=*ptr++;
		if (c!='%'){
			putc(c);
		} else{
			c=*ptr++;
			switch (c){
				case 'i': case 'd':
					printint(*this++);
					argslot+=1;
					break;
				case 's':
					printstr((char*) *this++);
					argslot+=1;
					break;
				case 'c':
					putc((unsigned int) *this++);
					argslot+=1;
					break;
				case 'x': case 'X':
					putx(((unsigned int) *this)>>8);
					putx(((unsigned int) *this++)&255);
					argslot+=1;
					break;
				case 'l':
					if (*ptr){
						xord=*ptr++;
						if (argslot&1) {
							this++;
							argslot++;
						}
						if(xord=='d'){
							printlint(*(long *)this);
							this+=2;
						} else{
							putx(((unsigned int) *this)>>8);
							putx(((unsigned int) *this++)&255);
							putx(((unsigned int) *this)>>8);
							putx(((unsigned int) *this++)&255);
						}
						argslot+=2;
						break;
					}
				default:
					putc('%');putc(c);
			}
		}
	}
}
void exit(int code){
	printf("exit %d\n",code);
	while(1);
}
int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
	unsigned char* p1; unsigned char *p2;
    int v = 0;
    p1 = (unsigned char *)Ptr1;
    p2 = (unsigned char *)Ptr2;

    while(Count-- > 0 && v == 0) {
        v = *(p1++) - *(p2++);
    }

    return v;
}
void* memcpy(void* dest, const void* src, unsigned int count) {
        char* dst8 = (char*)dest;
        char* src8 = (char*)src;

        while (count--) {
            *dst8++ = *src8++;
        }
        return dest;
    }

void *memset(void *s, int c, unsigned int n)
{
    unsigned char* p=s;
    while(n--)
        *p++ = (unsigned char)c;
    return s;
}
#line 65 "xnc28j60.c"
#line 1 "C:\lcc42\include/olduino.c"


void delay(unsigned int howlong){
	unsigned int i;
	for (i=1;i!=howlong;i++){
		oneMs();
	}
}

#line 19 "C:\lcc42\include/olduino.c"
void olduinoincluder(){
	asm("\tinclude olduino.inc\n");
}
#line 66 "xnc28j60.c"

#line 1 "./enc.c"
 void enableChip () {
  digitalWrite(5,0);
  asm("	req	;0 on Q activates ethernet chip\n");
}

 void disableChip () {
  asm("	seq	;1 on Q de-activates ethernet chip\n");
}

 void SetBank (uint8_t address) {
  if ((address & 0x60) != Enc28j60Bank) {
    writeOp(0xA0,0x1F,0x02 | 0x01);
    Enc28j60Bank = address & 0x60;
    writeOp(0x80,0x1F, Enc28j60Bank>>5);
  }
}
uint8_t xferSPI(uint8_t value){
  int i;

  for(i=0;i<8;i++){
    digitalWrite(7,(value&0x80));
    value=(value<<1)|digitalRead(15);;
    digitalWrite(5,1);
    digitalWrite(5,0);
  }
  return value;
}

uint8_t readOp(uint8_t op,uint8_t address){
  uint8_t result;
  enableChip();
  xferSPI(op | (address & 0x1F));
  if (address & 0x80)
    result=xferSPI(00);
  result=xferSPI(0x00);
  disableChip();
  return result;
}
void writeOp(uint8_t op, uint8_t address, uint8_t data){
  int i;
  uint8_t temp, result;
  enableChip();
  xferSPI(op|(address& 0x1F));
  xferSPI(data);
  disableChip();
}

 uint8_t readRegByte (uint8_t address) {
    SetBank(address);
    return readOp(0x00, address);
}
 void writeRegByte (uint8_t address, uint8_t data) {
    SetBank(address);
    writeOp(0x40, address, data);
}

 void writeReg(uint8_t address, uint16_t data) {
    writeRegByte(address, data);
    writeRegByte(address + 1, data >> 8);
}
 void writePhy (uint8_t address, uint16_t data) {
    writeRegByte((0x14|0x40|0x80), address);
    writeReg((0x16|0x40|0x80), data);
    while (readRegByte((0x0A|0x60|0x80)) & 0x01)
        ;
}


uint8_t ethbegin (const uint16_t size) {
	printf(" ethbegin ");
  return encinitialize(size, mymac);
}
void encinitSPI () {
    digitalWrite(7,1);
    digitalWrite(7,0);
    digitalWrite(5,0);
}

uint8_t encinitialize (uint16_t size, const uint8_t* macaddr) {
    bufferSize = size;
    printf(" encinitialize ");
    encinitSPI();
    disableChip();

    writeOp(0xFF, 0,0xFF);
    printf(" writeop done ");

    while (!readOp(0x00,0x1D) & 0x01)
        ;

    gNextPacketPtr = 0x0000;
    writeReg((0x08|0x00),0x0000);
    writeReg((0x0C|0x00),0x0000);
    writeReg((0x0A|0x00),0x0BFF);
    writeReg((0x04|0x00),0x0C00);
    writeReg((0x06|0x00),0x11FF);
    writeRegByte((0x18|0x20),0x80 | 0x20 | 0x10);
    writeReg((0x08|0x20), 0x303f);
    writeReg((0x10|0x20), 0xf7f9);
    writeRegByte((0x00|0x40|0x80),0x01 | 0x08 | 0x04);
    writeRegByte((0x01|0x40|0x80), 0x00);
    writeOp(0x80,(0x02|0x40|0x80),
 0x20 | 0x10 | 0x02);
    writeReg((0x06|0x40|0x80), 0x0C12);
    writeRegByte((0x04|0x40|0x80), 0x12);
    writeReg((0x0A|0x40|0x80),1500);
    writeRegByte((0x04|0x60|0x80), macaddr[0]);
    writeRegByte((0x05|0x60|0x80), macaddr[1]);
    writeRegByte((0x02|0x60|0x80), macaddr[2]);
    writeRegByte((0x03|0x60|0x80), macaddr[3]);
    writeRegByte((0x00|0x60|0x80), macaddr[4]);
    writeRegByte((0x01|0x60|0x80), macaddr[5]);
    writePhy(0x10,0x0100);
    SetBank(0x1F);
    writeOp(0x80,0x1B,0x80 | 0x40);
    writeOp(0x80,0x1F,0x04);

    return readRegByte((0x12|0x60));
}
uint16_t encpacketReceive() {
	struct {
		uint16_t nextPacket;
		uint16_t byteCount;
		uint16_t status;
	} header;

    uint16_t len = 0;
    if (readRegByte((0x19|0x20)) > 0) {
        writeReg((0x00|0x00), gNextPacketPtr);
        printf("got a packet\n");
        readBuf(sizeof header, (uint8_t*) &header);
        hexDump((uint8_t*)&header,sizeof header);
        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4;
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
        buffer[len] = 0;
        if (gNextPacketPtr - 1 > 0x0BFF)
            writeReg((0x0C|0x00),0x0BFF);
        else
            writeReg((0x0C|0x00), gNextPacketPtr - 1);
        writeOp(0x80,0x1E,0x40);
    }
    return len;
}
 void readBuf(uint16_t len, uint8_t* data) {
    uint8_t x;
    enableChip();
    xferSPI(0x3A);
    while (len--) {
        x=xferSPI(0x00);
        *data++ = x;
    }
    disableChip();
}
 void writeBuf(uint16_t len, const uint8_t* data) {
    enableChip();
    xferSPI(0x7A);
    while (len--)
        xferSPI(*data++);
    disableChip();
}

void encpacketSend(uint16_t len) {
    while (readOp(0x00,0x1F) & 0x08)
        if (readRegByte(0x1C) & 0x02) {
            writeOp(0x80,0x1F,0x80);
            writeOp(0xA0,0x1F,0x80);
        }
    writeReg((0x02|0x00),0x0C00);
    writeReg((0x06|0x00),0x0C00 +len);
    writeOp(0x7A, 0, 0x00);
    writeBuf(len, buffer);
    writeOp(0x80,0x1F,0x08);
}
int isLinkUp() {
    return (readPhyByte(0x11) >> 2) & 1;
}
 uint16_t readPhyByte (uint8_t address) {
    writeRegByte((0x14|0x40|0x80), address);
    writeRegByte((0x12|0x40|0x80),0x01);
    while (readRegByte((0x0A|0x60|0x80)) & 0x01)
        ;
    writeRegByte((0x12|0x40|0x80), 0x00);
    return readRegByte((0x18|0x40|0x80)+1);
}


#line 68 "xnc28j60.c"
#line 1 "./tcpip.c"
#line 1 "./net.h"



























































































































#line 2 "./tcpip.c"



static byte tcpclient_src_port_l=1;
static byte tcp_fd;
static byte tcp_client_state;
static byte tcp_client_port_h;
static byte tcp_client_port_l;
static byte (*client_tcp_result_cb)(byte,byte,word,word);
 unsigned int (*client_tcp_datafill_cb)(byte);

static byte www_fd;
 void (*client_browser_cb)(byte,word,word);
static char *client_additionalheaderline;
static const char *client_postval;
static char *client_urlbuf;
static const char *client_urlbuf_var;
static char *client_hoststr;
static void (*icmp_cb)(byte *ip);
static int16_t delaycnt=1;
static byte gwmacaddr[6];
static byte waitgwmac;




static word info_data_len;
static byte seqnum = 0xa;




const char arpreqhdr[]  = { 0,1,8,0,6,4,0,1 };
const char iphdr[]  = { 0x45,0,0,0x82,0,0,0x40,0,0x20 };
const char ntpreqhdr[]  = { 0xE3,0,4,0xFA,0,1,0,0,0,1 };
const byte allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

word tcppacketLoop (word plen) {
  word len,save_len;
  byte send_fin;
  if (plen>0) hexDump(buffer,plen);

  if (plen==0) {
    if ((waitgwmac & 1 || waitgwmac & 4) &&
                                          delaycnt==0 && isLinkUp())
      client_arp_whohas(gwip);
    delaycnt++;
    if (tcp_client_state==1 && (waitgwmac & 2)) {
      tcp_client_state = 2;
      tcpclient_src_port_l++;
      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    }
    return 0;
  }

  if (eth_type_is_arp_and_my_ip(plen)) {
    printf("ARP\n");
    if (buffer[0x15]== 0x01)
        {printf("mkarp\n");make_arp_answer_from_request();}
    if (waitgwmac & 8 && (buffer[0x15]== 0x02) && client_store_gw_mac())
      {printf("wgw\n");waitgwmac = 2;}
    return 0;
  }

  if (eth_type_is_ip_and_my_ip(plen)==0){
    printf("ethtyp4me\n");
    return 0;
  }

  if (buffer[0x17]== 1 && buffer[0x22]== 8) {
    if (icmp_cb)
      (*icmp_cb)(&(buffer[0x1a]));
    make_echo_reply_from_request(plen);
    return 0;
  }

  if (plen<54 && buffer[0x17]!= 6 )
    return 0;
  if (buffer[0x24]== 11) {
    if (check_ip_message_is_from(hisip)==0)
      return 0;
    if (buffer[0x2f] & 4) {
      if (client_tcp_result_cb)
(*client_tcp_result_cb)((buffer[0x25]>>5)&0x7,3,0,0);
      tcp_client_state = 5;
      return 0;
    }
    len = get_tcp_data_len();
    if (tcp_client_state==2) {
      if ((buffer[0x2f] & 2) && (buffer[0x2f] & 0x10)) {
        make_tcp_ack_from_any(0,0);
 buffer[0x2f] = 0x10 | 8;
        if (client_tcp_datafill_cb)
          len = (*client_tcp_datafill_cb)((buffer[0x23]>>5)&0x7);
        else
          len = 0;
        tcp_client_state = 3;
        make_tcp_ack_with_data_noflags(len);
      }else{
        tcp_client_state = 1;
        len++;
        if (buffer[0x2f] & 0x10)
          len = 0;
        make_tcp_ack_from_any(len,4);
      }
      return 0;
    }
    if (tcp_client_state==3 && len>0) {
      tcp_client_state = 4;
      if (client_tcp_result_cb) {
        word tcpstart =((word)0x22 +(buffer[0x2e]>>4)*4);
        if (tcpstart>plen-8)
          tcpstart = plen-8;
        save_len = len;
        if (tcpstart+len>plen)
          save_len = plen-tcpstart;
        send_fin = (*client_tcp_result_cb)((buffer[0x25]>>5)&0x7,0,tcpstart,save_len);
        if (send_fin) {
          make_tcp_ack_from_any(len,8 | 1);
          tcp_client_state = 5;
          return 0;
        }
      }
    }
    if (tcp_client_state != 5) {
      if (buffer[0x2f] & 1) {
        make_tcp_ack_from_any(len+1,8 | 1);
        tcp_client_state = 5;
      } else if (len>0)
        make_tcp_ack_from_any(len,0);
    }
    return 0;
  }
  if (buffer[0x24] == (hisport >> 8) &&
 buffer[0x25] == ((byte) hisport)) {
    if (buffer[0x2f] & 2)
      make_tcp_synack_from_syn();
    else if (buffer[0x2f] & 0x10) {
      info_data_len = get_tcp_data_len();
      if (info_data_len > 0) {
        len =((word)0x22 +(buffer[0x2e]>>4)*4);
        if (len <= plen - 8)
          return len;
      } else if (buffer[0x2f] & 1)
        make_tcp_ack_from_any(0,0);
    }
  }

  return 0;
}
 void step_seq(word rel_ack_num,byte cp_seq) {
  byte i;
  byte tseq;
  i = 4;
  while(i>0) {
    rel_ack_num = buffer[0x26 +i-1]+rel_ack_num;
    tseq = buffer[0x2a +i-1];
 buffer[0x2a +i-1] = rel_ack_num;
    if (cp_seq)
 buffer[0x26 +i-1] = tseq;
    else
 buffer[0x26 +i-1] = 0;
    rel_ack_num = rel_ack_num>>8;
    i--;
  }
}

 void make_tcphead(word rel_ack_num,byte cp_seq) {
  byte j;
  byte i = buffer[0x24];
 buffer[0x24] = buffer[0x22];
 buffer[0x22] = i;
  j = buffer[0x25];
 buffer[0x25] = buffer[0x23];
 buffer[0x23] = j;
  step_seq(rel_ack_num,cp_seq);
 buffer[0x32] = 0;
 buffer[0x33] = 0;
 buffer[0x2e] = 0x50;
}
 void make_tcp_synack_from_syn() {
 buffer[0x10] = 0;
 buffer[0x11] = 20 + 20 +4;
  make_eth_ip();
 buffer[0x2f] = 0x12;
  make_tcphead(1,0);
 buffer[0x26 +0] = 0;
 buffer[0x26 +1] = 0;
 buffer[0x26 +2] = seqnum;
 buffer[0x26 +3] = 0;
  seqnum += 3;
 buffer[0x36] = 2;
 buffer[0x36 +1] = 4;
 buffer[0x36 +2] = 0x05;
 buffer[0x36 +3] = 0x0;
 buffer[0x2e] = 0x60;
 buffer[0x30] = 0x5;
 buffer[0x30 +1] = 0x78;
  fill_checksum(0x32,0x1a, 8+ 20 +4,2);
  encpacketSend(20 + 20 +4+ 14);
}

 byte eth_type_is_ip_and_my_ip(word len) {
  return len >= 42 && buffer[12] == 0x08 &&
 buffer[13] == 0x00 &&
 buffer[0xe] == 0x45 &&
                      memcmp(buffer + 0x1e, myip, 4) == 0;
}

 byte eth_type_is_arp_and_my_ip(word len) {
  printf("ARP Test with %x %x\n",buffer[12],buffer[13]);
  return len >= 41 && buffer[12] == 0x08 &&
 buffer[13] == 0x06 &&
                      memcmp(buffer + 0x26, myip, 4) == 0;
}
 void make_arp_answer_from_request() {
  setMACs(buffer + 6);
 buffer[0x14] = 0x0;
 buffer[0x15] = 0x02;
  copyMac(buffer + 0x20,buffer + 0x16);
  copyMac(buffer + 0x16, mymac);
  copyIp(buffer + 0x26,buffer + 0x1c);
  copyIp(buffer + 0x1c, myip);
  encpacketSend(42);
}
 void make_echo_reply_from_request(word len) {
  make_eth_ip();
 buffer[0x22] = 0;
  if (buffer[0x24] > (0xFF-0x08))
 buffer[0x24 +1]++;
 buffer[0x24] += 0x08;
  encpacketSend(len);
}
 void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
	word j;
 buffer[0x2f] = 0x10 |addflags;
  if (addflags!= 4 && datlentoack==0)
    datlentoack = 1;
  make_tcphead(datlentoack,1);
  j = 20 + 20;
 buffer[0x10] = j>>8;
 buffer[0x11] = j;
  make_eth_ip();
 buffer[0x30] = 0x4;
 buffer[0x30 +1] = 0;
  fill_checksum(0x32,0x1a, 8+ 20,2);
  encpacketSend(20 + 20 + 14);
}
 void make_tcp_ack_with_data_noflags(word dlen) {
  word j = 20 + 20 +dlen;
 buffer[0x10] = j>>8;
 buffer[0x11] = j;
  fill_ip_hdr_checksum();
 buffer[0x32] = 0;
 buffer[0x33] = 0;
  fill_checksum(0x32,0x1a, 8+ 20 +dlen,2);
  encpacketSend(20 + 20 +dlen+ 14);
}

 word get_tcp_data_len() {
  int16_t i = (((int16_t)buffer[0x10])<<8)| buffer[0x11];
  i -= 20;
  i -= (buffer[0x2e]>>4)*4;
  if (i<=0)
    i = 0;
  return (word)i;
}
 byte check_ip_message_is_from(const byte *ip) {
  return memcmp(buffer + 0x1a, ip, 4) == 0;
}
 void fill_checksum(byte dest, byte off, word len,byte type) {
  word ck;
  const byte* ptr = buffer + off;
 long sum = type==1 ? 17 +len-8 :
                  type==2 ? 6 +len-8 : 0;
  while(len >1) {
    sum += (word) (((unsigned long)*ptr<<8)|*(ptr+1));
    ptr+=2;
    len-=2;
  }
  if (len)
    sum += ((unsigned long)*ptr)<<8;
  while (sum>>16)
    sum = (word) sum + (sum >> 16);
  ck = ~ (word) sum;
 buffer[dest] = ck>>8;
 buffer[dest+1] = ck;
}

 void fill_ip_hdr_checksum() {
 buffer[0x18] = 0;
 buffer[0x18 +1] = 0;
 buffer[0x14] = 0x40;
 buffer[0x14 +1] = 0;
 buffer[0x16] = 64;
  fill_checksum(0x18,0xe,20,0);
}

 void make_eth_ip() {
  setMACs(buffer + 6);
  copyIp(buffer + 0x1e,buffer + 0x1a);
  copyIp(buffer + 0x1a, myip);
  fill_ip_hdr_checksum();
}


 byte client_store_gw_mac() {
  if (memcmp(buffer + 0x1c, gwip, 4) != 0)
    return 0;
  copyMac(gwmacaddr,buffer + 0x16);
  return 1;
}

 void setMACs (const byte *mac) {
  copyMac(buffer + 0, mac);
  copyMac(buffer + 6, mymac);
}

 void client_arp_whohas(byte *ip_we_search) {
  setMACs(allOnes);
 buffer[12] = 0x08;
 buffer[13] = 0x06;
  memcpy(buffer + 0xe,arpreqhdr,8);
  memset(buffer + 0x20, 0, 6);
  copyMac(buffer + 0x16, mymac);
  copyIp(buffer + 0x26, ip_we_search);
  copyIp(buffer + 0x1c, myip);
  waitgwmac |= 8;
  encpacketSend(42);
}

 void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
  setMACandIPs(gwmacaddr, hisip);
 buffer[12] = 0x08;
 buffer[13] = 0x00;
  memcpy(buffer + 0xe,iphdr,9);
 buffer[0x11] = 44;
 buffer[0x17] = 6;
  fill_ip_hdr_checksum();
 buffer[0x24] = dstport_h;
 buffer[0x25] = dstport_l;
 buffer[0x22] = 11;
 buffer[0x23] = srcport;
  memset(buffer + 0x26, 0, 8);
 buffer[0x26 +2] = seqnum;
  seqnum += 3;
 buffer[0x2e] = 0x60;
 buffer[0x2f] = 2;
 buffer[0x30] = 0x3;
 buffer[0x30 +1] = 0x0;
 buffer[0x32] = 0;
 buffer[0x33] = 0;
 buffer[0x33 +1] = 0;
 buffer[0x33 +2] = 0;
 buffer[0x36] = 2;
 buffer[0x36 +1] = 4;
 buffer[0x36 +2] = (550 >>8);
 buffer[0x36 +3] = (byte)550;
  fill_checksum(0x32,0x1a, 8 + 20 +4,2);

  encpacketSend(20 + 20 + 14 +4);
}
 void setMACandIPs (const byte *mac, const byte *dst) {
  setMACs(mac);
  copyIp(buffer + 0x1e, dst);
  copyIp(buffer + 0x1a, myip);
}




#line 381 "./tcpip.c"
#line 69 "xnc28j60.c"
#line 1 "./util.c"
void hexDump(uint8_t *data, uint16_t len) {
  int i;
  uint8_t cnt = 0;
  printf("dumping %d\n",len);
  for (i = 0; i < len; i++) {
    putx(data[i]);
    cnt++;
    if (cnt == 8) {
      putc(' ');
    }
    if (cnt == 16) {
      printf("\n");
      cnt = 0;
    }
  }
  if (cnt != 0) {
    printf("\n");
  }
}
#line 70 "xnc28j60.c"
#line 1 "./webutil.c"
void copyIp (byte *dst, const byte *src) {
    memcpy(dst, src, 4);
}

void copyMac (byte *dst, const byte *src) {
    memcpy(dst, src, 6);
}

#line 71 "xnc28j60.c"

