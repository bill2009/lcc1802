 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 1 - 4/25/2013 10:34:27


       1/       0 :                     ; generated by lcc-xr182b $Version: 4.0 - XR182b $ on Thu Apr 25 10:18:48 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  830/       0 :                     	listing	on
(1)  831/       0 : C0 3B 63            	lbr	lcc1802Init
(1)  832/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _mymac:
      15/       4 : 74                  	db 116
      16/       5 : 69                  	db 105
      17/       6 : 69                  	db 105
      18/       7 : 2D                  	db 45
      19/       8 : 30                  	db 48
      20/       9 : 31                  	db 49
      21/       A :                     _myip:
      22/       A : C0                  	db 192
      23/       B : A8                  	db 168
      24/       C : 01                  	db 1
      25/       D : BF                  	db 191
      26/       E :                     _hisport:
      27/       E : 00 50               	dw 80
      28/      10 :                     _setup:
      29/      10 : (MACRO)             	reserve 8
      30/      18 :                     ;void setup () {
      31/      18 :                     ;  printf("\nEnc28j60 first try\n");
      32/      18 : (MACRO)             	ldaD R12,L2; reg:acon
      33/      1E : (MACRO)             	Ccall _printf
      34/      21 :                     ;  printf("MAC & IP ");
      35/      21 : (MACRO)             	ldaD R12,L3; reg:acon
      36/      27 : (MACRO)             	Ccall _printf
      37/      2A :                     ;  hexDump(mymac,6);
      38/      2A : (MACRO)             	ldaD R12,_mymac; reg:acon
      39/      30 : (MACRO)             	ldaD R13,6; reg:acon
      40/      36 : (MACRO)             	Ccall _hexDump
      41/      39 :                     ;  hexDump(myip,4);
      42/      39 : (MACRO)             	ldaD R12,_myip; reg:acon
      43/      3F : (MACRO)             	ldaD R13,4; reg:acon
      44/      45 : (MACRO)             	Ccall _hexDump
      45/      48 :                     ;  if (ethbegin(700) == 0)
      46/      48 : (MACRO)             	ldaD R12,700; reg:acon
      47/      4E : (MACRO)             	Ccall _ethbegin
      48/      51 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      49/      55 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      50/      58 : (MACRO)             	jnzU2 r11,L4; NE 0
      51/      60 :                     ;    printf( "Failed to access Ethernet controller\n");
      52/      60 : (MACRO)             	ldaD R12,L6; reg:acon
      53/      66 : (MACRO)             	Ccall _printf
      54/      69 :                     L4:
      55/      69 :                     ;  printf("readRegByte(ECON1) returns: %x\n",readRegByte(ECON1));
      56/      69 : (MACRO)             	ldaD R12,31; reg:acon
      57/      6F : (MACRO)             	Ccall _readRegByte
      58/      72 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      59/      76 : (MACRO)             	ldaD R12,L7; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 2 - 4/25/2013 10:34:27


      60/      7C : (MACRO)             	cpy1 R13,R11
      61/      7E : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      62/      81 : (MACRO)             	Ccall _printf
      63/      84 :                     ;  printf("readRegByte(EREVID) returns: %x\n",readRegByte(EREVID));
      64/      84 : (MACRO)             	ldaD R12,114; reg:acon
      65/      8A : (MACRO)             	Ccall _readRegByte
      66/      8D : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      67/      91 : (MACRO)             	ldaD R12,L8; reg:acon
      68/      97 : (MACRO)             	cpy1 R13,R11
      69/      99 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      70/      9C : (MACRO)             	Ccall _printf
      71/      9F :                     ;  printf("readRegByte(ESTAT) returns: %x\n",readRegByte(ESTAT));
      72/      9F : (MACRO)             	ldaD R12,29; reg:acon
      73/      A5 : (MACRO)             	Ccall _readRegByte
      74/      A8 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      75/      AC : (MACRO)             	ldaD R12,L9; reg:acon
      76/      B2 : (MACRO)             	cpy1 R13,R11
      77/      B4 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      78/      B7 : (MACRO)             	Ccall _printf
      79/      BA :                     ;  printf("MACtail readback: %x:%x\n",readRegByte(MAADR1),readRegByte(MAADR0));
      80/      BA : (MACRO)             	ldaD R12,224; reg:acon
      81/      C0 : (MACRO)             	Ccall _readRegByte
      82/      C3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      83/      C7 : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
      84/      D4 : (MACRO)             	ldaD R12,225; reg:acon
      85/      DA : (MACRO)             	Ccall _readRegByte
      86/      DD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      87/      E1 : (MACRO)             	ldaD R12,L10; reg:acon
      88/      E7 : (MACRO)             	ld2 R10,'O',sp,(-4+10) ;reg:INDIRI2(addr)
      89/      F3 : (MACRO)             	cpy1 R13,R10
      90/      F5 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      91/      F8 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      92/      FB : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
      93/     108 : (MACRO)             	Ccall _printf
      94/     10B :                     ;  printf("and we're done\n");
      95/     10B : (MACRO)             	ldaD R12,L11; reg:acon
      96/     111 : (MACRO)             	Ccall _printf
      97/     114 :                     ;}
      98/     114 :                     L1:
      99/     114 : (MACRO)             	release 8
     100/     11C : (MACRO)             	Cretn
     101/     11D :                     
     102/     11D :                     _loop:
     103/     11D : (MACRO)             	reserve 8
     104/     125 :                     ;void loop () {
     105/     125 :                     ;  len = encpacketReceive();
     106/     125 : (MACRO)             	Ccall _encpacketReceive;CALLU2(ar)*
     107/     128 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     108/     12C : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNU2(addr,reg)*
     109/     139 :                     ;  pos = tcppacketLoop(len);
     110/     139 : (MACRO)             	ld2 R12,'O',sp,(-4+10); reg:INDIRU2(addr)
     111/     145 : (MACRO)             	Ccall _tcppacketLoop;CALLU2(ar)*
     112/     148 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     113/     14C : (MACRO)             	st2 R11,'O',sp,(-6+10); ASGNU2(addr,reg)*
     114/     159 :                     ;}
     115/     159 :                     L12:
     116/     159 : (MACRO)             	release 8
     117/     161 : (MACRO)             	Cretn
     118/     162 :                     
     119/     162 :                     _main:
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 3 - 4/25/2013 10:34:27


     120/     162 : (MACRO)             	reserve 4
     121/     166 :                     ;void main(){
     122/     166 :                     ;	asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     123/     166 :                     ;	printf("encmule - watch my Q!\n");
     124/     166 : 7B                  	seq	;1 on Q de-activates ethernet chip
     125/     167 : (MACRO)             	ldaD R12,L15; reg:acon
     126/     16D : (MACRO)             	Ccall _printf
     127/     170 :                     ;	setup();
     128/     170 : (MACRO)             	Ccall _setup
     129/     173 : C0 01 79            	lbr L17
     130/     176 :                     L16:
     131/     176 :                     ;	while(1){
     132/     176 :                     ;		loop();
     133/     176 : (MACRO)             	Ccall _loop
     134/     179 :                     ;	}
     135/     179 :                     L17:
     136/     179 :                     ;	while(1){
     137/     179 : C0 01 76            	lbr L16
     138/     17C :                     ;}
     139/     17C :                     L13:
     140/     17C : (MACRO)             	release 4
     141/     180 : (MACRO)             	Cretn
     142/     181 :                     
     143/     181 :                     _enableChip:
     144/     181 : (MACRO)             	reserve 4
     145/     185 :                     ; void enableChip () {
     146/     185 :                     ;  digitalWrite(sck,LOW); //make sure the clock is low
     147/     185 : (MACRO)             	ldaD R12,5; reg:acon
     148/     18B : (MACRO)             	ld2z R13
     149/     18F : (MACRO)             	Ccall _digitalWrite
     150/     192 :                     ;  asm("	req	;0 on Q activates ethernet chip\n"); //digitalWrite(encss,LOW); //activate the chip select
     151/     192 : 7A                  	req	;0 on Q activates ethernet chip
     152/     193 :                     ;}
     153/     193 :                     L19:
     154/     193 : (MACRO)             	release 4
     155/     197 : (MACRO)             	Cretn
     156/     198 :                     
     157/     198 :                     _disableChip:
     158/     198 :                     ; void disableChip () {
     159/     198 :                     ;  asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     160/     198 : 7B                  	seq	;1 on Q de-activates ethernet chip
     161/     199 :                     ;}
     162/     199 :                     L21:
     163/     199 : (MACRO)             	Cretn
     164/     19A :                     
     165/     19A :                     _SetBank:
     166/     19A : (MACRO)             	reserve 6
     167/     1A0 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     168/     1AD : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     169/     1B9 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     170/     1C3 :                     ; void SetBank (uint8_t address) {
     171/     1C3 :                     ;  if ((address & BANK_MASK) != Enc28j60Bank) {
     172/     1C3 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     173/     1CD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     174/     1D0 : (MACRO)             	alu2I R11,R11,96,ani,ani
     175/     1D8 :                     	;removed ?	cpy2 R11,R11
     176/     1D8 : (MACRO)             	ld1 R10,'D',(_Enc28j60Bank),0
     177/     1E0 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     178/     1E3 : (MACRO)             	jeqI2 r11,r10,L24; EQI2(reg,reg)
     179/     1F5 :                     ;    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 4 - 4/25/2013 10:34:27


     180/     1F5 : (MACRO)             	ldaD R12,160; reg:acon
     181/     1FB : (MACRO)             	ldaD R13,31; reg:acon
     182/     201 : (MACRO)             	ldaD R11,3; reg:acon
     183/     207 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     184/     214 : (MACRO)             	Ccall _writeOp
     185/     217 :                     ;    Enc28j60Bank = address & BANK_MASK;
     186/     217 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     187/     221 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     188/     224 : (MACRO)             	alu2I R11,R11,96,ani,ani
     189/     22C :                     	;removed ?	cpy2 R11,R11
     190/     22C : (MACRO)             	st1 R11,'D',(_Enc28j60Bank),0; ASGNU1
     191/     234 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     192/     234 : (MACRO)             	ldaD R12,128; reg:acon
     193/     23A : (MACRO)             	ldaD R13,31; reg:acon
     194/     240 : (MACRO)             	ld1 R11,'D',(_Enc28j60Bank),0
     195/     248 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     196/     24B : (MACRO)             	shrI2I R11,5
     197/     273 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     198/     276 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     199/     283 : (MACRO)             	Ccall _writeOp
     200/     286 :                     ;  }
     201/     286 :                     L24:
     202/     286 :                     ;}
     203/     286 :                     L23:
     204/     286 : (MACRO)             	release 6
     205/     28C : (MACRO)             	Cretn
     206/     28D :                     
     207/     28D :                     _xferSPI:
     208/     28D : (MACRO)             	reserve 0; save room for local variables
     209/     28D : (MACRO)             	pushr r7
     210/     292 : (MACRO)             	pushr r14
     211/     297 : (MACRO)             	reserve 4; save room for outgoing arguments
     212/     29B : (MACRO)             	cpy2 r14,r12; function(1030) 1
     213/     29F :                     ;uint8_t xferSPI(uint8_t value){
     214/     29F :                     ;  for(i=0;i<8;i++){
     215/     29F : (MACRO)             	ld2z R7
     216/     2A3 :                     L27:
     217/     2A3 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
     218/     2A3 : (MACRO)             	ldaD R12,7; reg:acon
     219/     2A9 : (MACRO)             	cpy1 R11,R14
     220/     2AB : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     221/     2AE : (MACRO)             	alu2I R11,R11,128,ani,ani
     222/     2B6 :                     	;removed ?	cpy2 R11,R11
     223/     2B6 : (MACRO)             	cpy1 R13,R11
     224/     2B8 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     225/     2BB : (MACRO)             	Ccall _digitalWrite
     226/     2BE :                     ;    value=(value<<1)|digitalRead(miso);;
     227/     2BE : (MACRO)             	ldaD R12,15; reg:acon
     228/     2C4 : (MACRO)             	Ccall _digitalRead
     229/     2C7 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     230/     2CB : (MACRO)             	cpy1 R10,R14
     231/     2CD : (MACRO)             	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     232/     2D0 : (MACRO)             	shl2I R10,1
     233/     2D6 : (MACRO)             	alu2 R11,R10,R11,or,or
     234/     2E2 : (MACRO)             	cpy1 R14,R11;LOADU1(reg)
     235/     2E4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
     236/     2E4 : (MACRO)             	ldaD R12,5; reg:acon
     237/     2EA : (MACRO)             	ldaD R13,1; reg:acon
     238/     2F0 : (MACRO)             	Ccall _digitalWrite
     239/     2F3 :                     ;    digitalWrite(sck,LOW);
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 5 - 4/25/2013 10:34:27


     240/     2F3 : (MACRO)             	ldaD R12,5; reg:acon
     241/     2F9 : (MACRO)             	ld2z R13
     242/     2FD : (MACRO)             	Ccall _digitalWrite
     243/     300 :                     ;  }
     244/     300 :                     L28:
     245/     300 :                     ;  for(i=0;i<8;i++){
     246/     300 : (MACRO)             	incm R7,1
     247/     301 : (MACRO)             	jcI2I r7,8,lbnf,L27  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     248/     312 :                     ;  return value;
     249/     312 : (MACRO)             	cpy1 R15,R14
     250/     314 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     251/     317 :                     L26:
     252/     317 : (MACRO)             	release 4; release room for outgoing arguments
     253/     31B : (MACRO)             	popr r14
     254/     31F : (MACRO)             	popr r7
     255/     323 : (MACRO)             	release 0; release room for local variables 
     256/     323 : (MACRO)             	Cretn
     257/     324 :                     
     258/     324 :                     _readOp:
     259/     324 : (MACRO)             	reserve 6
     260/     32A : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     261/     337 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     262/     344 : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     263/     350 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     264/     35A : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     265/     366 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     266/     370 :                     ;uint8_t readOp(uint8_t op,uint8_t address){
     267/     370 :                     ;  enableChip();
     268/     370 : (MACRO)             	Ccall _enableChip
     269/     373 :                     ;  xferSPI(op | (address & ADDR_MASK));
     270/     373 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     271/     37D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     272/     380 : (MACRO)             	ld1 R10,'O',sp,(2+8)
     273/     38A : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     274/     38D : (MACRO)             	alu2I R10,R10,31,ani,ani
     275/     395 :                     	;removed ?	cpy2 R10,R10
     276/     395 : (MACRO)             	alu2 R11,R11,R10,or,or
     277/     3A1 : (MACRO)             	cpy1 R12,R11
     278/     3A3 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     279/     3A6 : (MACRO)             	Ccall _xferSPI
     280/     3A9 :                     ;  if (address & 0x80)
     281/     3A9 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     282/     3B3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     283/     3B6 : (MACRO)             	alu2I R11,R11,128,ani,ani
     284/     3BE :                     	;removed ?	cpy2 R11,R11
     285/     3BE : (MACRO)             	jzU2 r11,L32; EQ 0
     286/     3C6 :                     ;    result=xferSPI(00);  //dummy byte if needed
     287/     3C6 : (MACRO)             	ld2z R12
     288/     3CA : (MACRO)             	Ccall _xferSPI
     289/     3CD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     290/     3D1 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     291/     3DB :                     L32:
     292/     3DB :                     ;  result=xferSPI(0x00); //then read the result
     293/     3DB : (MACRO)             	ld2z R12
     294/     3DF : (MACRO)             	Ccall _xferSPI
     295/     3E2 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     296/     3E6 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     297/     3F0 :                     ;  disableChip();
     298/     3F0 : (MACRO)             	Ccall _disableChip
     299/     3F3 :                     ;  return result;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 6 - 4/25/2013 10:34:27


     300/     3F3 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
     301/     3FD : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
     302/     400 :                     L31:
     303/     400 : (MACRO)             	release 6
     304/     406 : (MACRO)             	Cretn
     305/     407 :                     
     306/     407 :                     _writeOp:
     307/     407 : (MACRO)             	reserve 8
     308/     40F : (MACRO)             	st2 r12,'O',sp,(10); flag1 
     309/     41C : (MACRO)             	st2 r13,'O',sp,(12); flag1 
     310/     429 : (MACRO)             	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
     311/     435 : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
     312/     43F : (MACRO)             	ld2 R11,'O',sp,(2+10) ;reg:INDIRI2(addr)
     313/     44B : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
     314/     455 : (MACRO)             	ld2 R11,'O',sp,(4+10) ;reg:INDIRI2(addr)
     315/     461 : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
     316/     46B :                     ;void writeOp(uint8_t op, uint8_t address, uint8_t data){
     317/     46B :                     ;  enableChip();
     318/     46B : (MACRO)             	Ccall _enableChip
     319/     46E :                     ;  xferSPI(op|(address& ADDR_MASK));
     320/     46E : (MACRO)             	ld1 R11,'O',sp,(0+10)
     321/     478 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     322/     47B : (MACRO)             	ld1 R10,'O',sp,(2+10)
     323/     485 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     324/     488 : (MACRO)             	alu2I R10,R10,31,ani,ani
     325/     490 :                     	;removed ?	cpy2 R10,R10
     326/     490 : (MACRO)             	alu2 R11,R11,R10,or,or
     327/     49C : (MACRO)             	cpy1 R12,R11
     328/     49E : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     329/     4A1 : (MACRO)             	Ccall _xferSPI
     330/     4A4 :                     ;  xferSPI(data);
     331/     4A4 : (MACRO)             	ld1 R12,'O',sp,(4+10)
     332/     4AE : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     333/     4B1 : (MACRO)             	Ccall _xferSPI
     334/     4B4 :                     ;  disableChip();
     335/     4B4 : (MACRO)             	Ccall _disableChip
     336/     4B7 :                     ;}
     337/     4B7 :                     L34:
     338/     4B7 : (MACRO)             	release 8
     339/     4BF : (MACRO)             	Cretn
     340/     4C0 :                     
     341/     4C0 :                     _readRegByte:
     342/     4C0 : (MACRO)             	reserve 4
     343/     4C4 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     344/     4D1 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     345/     4DD : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     346/     4E7 :                     ; uint8_t readRegByte (uint8_t address) {
     347/     4E7 :                     ;    SetBank(address);
     348/     4E7 : (MACRO)             	ld1 R12,'O',sp,(0+6)
     349/     4F1 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     350/     4F4 : (MACRO)             	Ccall _SetBank
     351/     4F7 :                     ;    return readOp(ENC28J60_READ_CTRL_REG, address);
     352/     4F7 : (MACRO)             	ld2z R12
     353/     4FB : (MACRO)             	ld1 R13,'O',sp,(0+6)
     354/     505 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     355/     508 : (MACRO)             	Ccall _readOp
     356/     50B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     357/     50F : (MACRO)             	cpy1 R15,R11
     358/     511 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     359/     514 :                     L35:
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 7 - 4/25/2013 10:34:27


     360/     514 : (MACRO)             	release 4
     361/     518 : (MACRO)             	Cretn
     362/     519 :                     
     363/     519 :                     _writeRegByte:
     364/     519 : (MACRO)             	reserve 6
     365/     51F : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     366/     52C : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     367/     539 : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     368/     545 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     369/     54F : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     370/     55B : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     371/     565 :                     ; void writeRegByte (uint8_t address, uint8_t data) {
     372/     565 :                     ;    SetBank(address);
     373/     565 : (MACRO)             	ld1 R12,'O',sp,(0+8)
     374/     56F : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     375/     572 : (MACRO)             	Ccall _SetBank
     376/     575 :                     ;    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     377/     575 : (MACRO)             	ldaD R12,64; reg:acon
     378/     57B : (MACRO)             	ld1 R13,'O',sp,(0+8)
     379/     585 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     380/     588 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     381/     592 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     382/     595 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     383/     5A2 : (MACRO)             	Ccall _writeOp
     384/     5A5 :                     ;}
     385/     5A5 :                     L36:
     386/     5A5 : (MACRO)             	release 6
     387/     5AB : (MACRO)             	Cretn
     388/     5AC :                     
     389/     5AC :                     _writeReg:
     390/     5AC : (MACRO)             	reserve 4
     391/     5B0 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     392/     5BD : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     393/     5CA : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     394/     5D6 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     395/     5E0 :                     ; void writeReg(uint8_t address, uint16_t data) {
     396/     5E0 :                     ;    writeRegByte(address, data);
     397/     5E0 : (MACRO)             	ld1 R12,'O',sp,(0+6)
     398/     5EA : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     399/     5ED : (MACRO)             	ld2 R11,'O',sp,(2+6); reg:INDIRU2(addr)
     400/     5F9 : (MACRO)             	cpy1 R13,R11
     401/     5FB : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     402/     5FE : (MACRO)             	Ccall _writeRegByte
     403/     601 :                     ;    writeRegByte(address + 1, data >> 8);
     404/     601 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     405/     60B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     406/     60E : (MACRO)             	incm R11,1
     407/     60F : (MACRO)             	cpy1 R12,R11
     408/     611 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     409/     614 : (MACRO)             	ld2 R11,'O',sp,(2+6); reg:INDIRU2(addr)
     410/     620 : (MACRO)             	shrU2I R11,8
     411/     650 : (MACRO)             	cpy1 R13,R11
     412/     652 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     413/     655 : (MACRO)             	Ccall _writeRegByte
     414/     658 :                     ;}
     415/     658 :                     L37:
     416/     658 : (MACRO)             	release 4
     417/     65C : (MACRO)             	Cretn
     418/     65D :                     
     419/     65D :                     _writePhy:
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 8 - 4/25/2013 10:34:27


     420/     65D : (MACRO)             	reserve 4
     421/     661 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     422/     66E : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     423/     67B : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     424/     687 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     425/     691 :                     ; void writePhy (uint8_t address, uint16_t data) {
     426/     691 :                     ;    writeRegByte(MIREGADR, address);
     427/     691 : (MACRO)             	ldaD R12,212; reg:acon
     428/     697 : (MACRO)             	ld1 R13,'O',sp,(0+6)
     429/     6A1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     430/     6A4 : (MACRO)             	Ccall _writeRegByte
     431/     6A7 :                     ;    writeReg(MIWR, data);
     432/     6A7 : (MACRO)             	ldaD R12,214; reg:acon
     433/     6AD : (MACRO)             	ld2 R13,'O',sp,(2+6); reg:INDIRU2(addr)
     434/     6B9 : (MACRO)             	Ccall _writeReg
     435/     6BC :                     L39:
     436/     6BC :                     ;        ;
     437/     6BC :                     L40:
     438/     6BC :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
     439/     6BC : (MACRO)             	ldaD R12,234; reg:acon
     440/     6C2 : (MACRO)             	Ccall _readRegByte
     441/     6C5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     442/     6C9 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     443/     6CC : (MACRO)             	alu2I R11,R11,1,ani,ani
     444/     6D4 :                     	;removed ?	cpy2 R11,R11
     445/     6D4 : (MACRO)             	jnzU2 r11,L39; NE 0
     446/     6DC :                     ;}
     447/     6DC :                     L38:
     448/     6DC : (MACRO)             	release 4
     449/     6E0 : (MACRO)             	Cretn
     450/     6E1 :                     
     451/     6E1 :                     _ethbegin:
     452/     6E1 : (MACRO)             	reserve 4
     453/     6E5 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     454/     6F2 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
     455/     6FE : (MACRO)             	st2 R11,'O',sp,(0+6); ASGNU2(addr,reg)*
     456/     70B :                     ;uint8_t ethbegin (const uint16_t size) {
     457/     70B :                     ;  return encinitialize(size, mymac);
     458/     70B : (MACRO)             	ld2 R12,'O',sp,(0+6); reg:INDIRU2(addr)
     459/     717 : (MACRO)             	ldaD R13,_mymac; reg:acon
     460/     71D : (MACRO)             	Ccall _encinitialize
     461/     720 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     462/     724 : (MACRO)             	cpy1 R15,R11
     463/     726 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     464/     729 :                     L42:
     465/     729 : (MACRO)             	release 4
     466/     72D : (MACRO)             	Cretn
     467/     72E :                     
     468/     72E :                     _encinitSPI:
     469/     72E : (MACRO)             	reserve 4
     470/     732 :                     ;void encinitSPI () {
     471/     732 :                     ;    digitalWrite(mosi, HIGH);
     472/     732 : (MACRO)             	ldaD R12,7; reg:acon
     473/     738 : (MACRO)             	ldaD R13,1; reg:acon
     474/     73E : (MACRO)             	Ccall _digitalWrite
     475/     741 :                     ;    digitalWrite(mosi, LOW);
     476/     741 : (MACRO)             	ldaD R12,7; reg:acon
     477/     747 : (MACRO)             	ld2z R13
     478/     74B : (MACRO)             	Ccall _digitalWrite
     479/     74E :                     ;    digitalWrite(sck, LOW);
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 9 - 4/25/2013 10:34:27


     480/     74E : (MACRO)             	ldaD R12,5; reg:acon
     481/     754 : (MACRO)             	ld2z R13
     482/     758 : (MACRO)             	Ccall _digitalWrite
     483/     75B :                     ;}
     484/     75B :                     L43:
     485/     75B : (MACRO)             	release 4
     486/     75F : (MACRO)             	Cretn
     487/     760 :                     
     488/     760 :                     _encinitialize:
     489/     760 : (MACRO)             	reserve 0; save room for local variables
     490/     760 : (MACRO)             	pushr r7
     491/     765 : (MACRO)             	pushr r14
     492/     76A : (MACRO)             	reserve 6; save room for outgoing arguments
     493/     770 : (MACRO)             	st2 r12,'O',sp,(12); flag1 
     494/     77D : (MACRO)             	cpy2 r14,r13; function(2055) 1
     495/     781 :                     ;uint8_t encinitialize (uint16_t size, const uint8_t* macaddr) {
     496/     781 :                     ;    bufferSize = size;
     497/     781 : (MACRO)             	ld2 R11,'O',sp,(0+12); reg:INDIRU2(addr)
     498/     78D : (MACRO)             	st2 R11,'D',(_bufferSize),0; ASGNU2(addr,reg)*
     499/     798 :                     ;    encinitSPI();
     500/     798 : (MACRO)             	Ccall _encinitSPI
     501/     79B :                     ;    disableChip();
     502/     79B : (MACRO)             	Ccall _disableChip
     503/     79E :                     ;    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     504/     79E : (MACRO)             	ldaD R11,255; reg:acon
     505/     7A4 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
     506/     7A8 : (MACRO)             	ld2z R13
     507/     7AC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     508/     7B9 : (MACRO)             	Ccall _writeOp
     509/     7BC :                     L45:
     510/     7BC :                     ;        ;
     511/     7BC :                     L46:
     512/     7BC :                     ;    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     513/     7BC : (MACRO)             	ld2z R12
     514/     7C0 : (MACRO)             	ldaD R13,29; reg:acon
     515/     7C6 : (MACRO)             	Ccall _readOp
     516/     7C9 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     517/     7CD : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     518/     7D0 : (MACRO)             	jnzU2 r11,L49; NE 0
     519/     7D8 : (MACRO)             	ldaD R7,1; reg:acon
     520/     7DE : C0 07 E5            	lbr L50
     521/     7E1 :                     L49:
     522/     7E1 : (MACRO)             	ld2z R7
     523/     7E5 :                     L50:
     524/     7E5 : (MACRO)             	alu2I R11,R7,1,ani,ani
     525/     7ED :                     	;removed ?	cpy2 R11,R7
     526/     7ED : (MACRO)             	jnzU2 r11,L45; NE 0
     527/     7F5 :                     ;    gNextPacketPtr = RXSTART_INIT;
     528/     7F5 : (MACRO)             	ld2z R11
     529/     7F9 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0; ASGNI2(addr,reg)*;
     530/     804 :                     ;    writeReg(ERXST, RXSTART_INIT);
     531/     804 : (MACRO)             	ldaD R12,8; reg:acon
     532/     80A : (MACRO)             	ld2z R13
     533/     80E : (MACRO)             	Ccall _writeReg
     534/     811 :                     ;    writeReg(ERXRDPT, RXSTART_INIT);
     535/     811 : (MACRO)             	ldaD R12,12; reg:acon
     536/     817 : (MACRO)             	ld2z R13
     537/     81B : (MACRO)             	Ccall _writeReg
     538/     81E :                     ;    writeReg(ERXND, RXSTOP_INIT);
     539/     81E : (MACRO)             	ldaD R12,10; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 10 - 4/25/2013 10:34:27


     540/     824 : (MACRO)             	ldaD R13,3071; reg:acon
     541/     82A : (MACRO)             	Ccall _writeReg
     542/     82D :                     ;    writeReg(ETXST, TXSTART_INIT);
     543/     82D : (MACRO)             	ldaD R12,4; reg:acon
     544/     833 : (MACRO)             	ldaD R13,3072; reg:acon
     545/     839 : (MACRO)             	Ccall _writeReg
     546/     83C :                     ;    writeReg(ETXND, TXSTOP_INIT);
     547/     83C : (MACRO)             	ldaD R12,6; reg:acon
     548/     842 : (MACRO)             	ldaD R13,4607; reg:acon
     549/     848 : (MACRO)             	Ccall _writeReg
     550/     84B :                     ;    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     551/     84B : (MACRO)             	ldaD R12,56; reg:acon
     552/     851 : (MACRO)             	ldaD R13,176; reg:acon
     553/     857 : (MACRO)             	Ccall _writeRegByte
     554/     85A :                     ;    writeReg(EPMM0, 0x303f);
     555/     85A : (MACRO)             	ldaD R12,40; reg:acon
     556/     860 : (MACRO)             	ldaD R13,12351; reg:acon
     557/     866 : (MACRO)             	Ccall _writeReg
     558/     869 :                     ;    writeReg(EPMCS, 0xf7f9);
     559/     869 : (MACRO)             	ldaD R12,48; reg:acon
     560/     86F : (MACRO)             	ldaD R13,0xf7f9; reg:acon
     561/     875 : (MACRO)             	Ccall _writeReg
     562/     878 :                     ;    writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     563/     878 : (MACRO)             	ldaD R12,192; reg:acon
     564/     87E : (MACRO)             	ldaD R13,13; reg:acon
     565/     884 : (MACRO)             	Ccall _writeRegByte
     566/     887 :                     ;    writeRegByte(MACON2, 0x00);
     567/     887 : (MACRO)             	ldaD R12,193; reg:acon
     568/     88D : (MACRO)             	ld2z R13
     569/     891 : (MACRO)             	Ccall _writeRegByte
     570/     894 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
     571/     894 : (MACRO)             	ldaD R12,128; reg:acon
     572/     89A : (MACRO)             	ldaD R13,194; reg:acon
     573/     8A0 : (MACRO)             	ldaD R11,50; reg:acon
     574/     8A6 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     575/     8B3 : (MACRO)             	Ccall _writeOp
     576/     8B6 :                     ;    writeReg(MAIPG, 0x0C12);
     577/     8B6 : (MACRO)             	ldaD R12,198; reg:acon
     578/     8BC : (MACRO)             	ldaD R13,3090; reg:acon
     579/     8C2 : (MACRO)             	Ccall _writeReg
     580/     8C5 :                     ;    writeRegByte(MABBIPG, 0x12);
     581/     8C5 : (MACRO)             	ldaD R12,196; reg:acon
     582/     8CB : (MACRO)             	ldaD R13,18; reg:acon
     583/     8D1 : (MACRO)             	Ccall _writeRegByte
     584/     8D4 :                     ;    writeReg(MAMXFL, MAX_FRAMELEN);
     585/     8D4 : (MACRO)             	ldaD R12,202; reg:acon
     586/     8DA : (MACRO)             	ldaD R13,1500; reg:acon
     587/     8E0 : (MACRO)             	Ccall _writeReg
     588/     8E3 :                     ;    writeRegByte(MAADR5, macaddr[0]);
     589/     8E3 : (MACRO)             	ldaD R12,228; reg:acon
     590/     8E9 : (MACRO)             	ld1 R13,'O',R14,0
     591/     8F3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     592/     8F6 : (MACRO)             	Ccall _writeRegByte
     593/     8F9 :                     ;    writeRegByte(MAADR4, macaddr[1]);
     594/     8F9 : (MACRO)             	ldaD R12,229; reg:acon
     595/     8FF : (MACRO)             	ld1 R13,'O',R14,(1)
     596/     909 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     597/     90C : (MACRO)             	Ccall _writeRegByte
     598/     90F :                     ;    writeRegByte(MAADR3, macaddr[2]);
     599/     90F : (MACRO)             	ldaD R12,226; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 11 - 4/25/2013 10:34:27


     600/     915 : (MACRO)             	ld1 R13,'O',R14,(2)
     601/     91F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     602/     922 : (MACRO)             	Ccall _writeRegByte
     603/     925 :                     ;    writeRegByte(MAADR2, macaddr[3]);
     604/     925 : (MACRO)             	ldaD R12,227; reg:acon
     605/     92B : (MACRO)             	ld1 R13,'O',R14,(3)
     606/     935 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     607/     938 : (MACRO)             	Ccall _writeRegByte
     608/     93B :                     ;    writeRegByte(MAADR1, macaddr[4]);
     609/     93B : (MACRO)             	ldaD R12,224; reg:acon
     610/     941 : (MACRO)             	ld1 R13,'O',R14,(4)
     611/     94B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     612/     94E : (MACRO)             	Ccall _writeRegByte
     613/     951 :                     ;    writeRegByte(MAADR0, macaddr[5]);
     614/     951 : (MACRO)             	ldaD R12,225; reg:acon
     615/     957 : (MACRO)             	ld1 R13,'O',R14,(5)
     616/     961 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     617/     964 : (MACRO)             	Ccall _writeRegByte
     618/     967 :                     ;    writePhy(PHCON2, PHCON2_HDLDIS);
     619/     967 : (MACRO)             	ldaD R12,16; reg:acon
     620/     96D : (MACRO)             	ldaD R13,256; reg:acon
     621/     973 : (MACRO)             	Ccall _writePhy
     622/     976 :                     ;    SetBank(ECON1);
     623/     976 : (MACRO)             	ldaD R12,31; reg:acon
     624/     97C : (MACRO)             	Ccall _SetBank
     625/     97F :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     626/     97F : (MACRO)             	ldaD R12,128; reg:acon
     627/     985 : (MACRO)             	ldaD R13,27; reg:acon
     628/     98B : (MACRO)             	ldaD R11,192; reg:acon
     629/     991 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     630/     99E : (MACRO)             	Ccall _writeOp
     631/     9A1 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     632/     9A1 : (MACRO)             	ldaD R12,128; reg:acon
     633/     9A7 : (MACRO)             	ldaD R13,31; reg:acon
     634/     9AD : (MACRO)             	ldaD R11,4; reg:acon
     635/     9B3 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     636/     9C0 : (MACRO)             	Ccall _writeOp
     637/     9C3 :                     ;    return readRegByte(EREVID);
     638/     9C3 : (MACRO)             	ldaD R12,114; reg:acon
     639/     9C9 : (MACRO)             	Ccall _readRegByte
     640/     9CC : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     641/     9D0 : (MACRO)             	cpy1 R15,R11
     642/     9D2 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     643/     9D5 :                     L44:
     644/     9D5 : (MACRO)             	release 6; release room for outgoing arguments
     645/     9DB : (MACRO)             	popr r14
     646/     9DF : (MACRO)             	popr r7
     647/     9E3 : (MACRO)             	release 0; release room for local variables 
     648/     9E3 : (MACRO)             	Cretn
     649/     9E4 :                     
     650/     9E4 :                     _encpacketReceive:
     651/     9E4 : (MACRO)             	reserve 10; save room for local variables
     652/     9EE : (MACRO)             	pushr r14
     653/     9F3 : (MACRO)             	reserve 6; save room for outgoing arguments
     654/     9F9 :                     ;uint16_t encpacketReceive() {
     655/     9F9 :                     ;    uint16_t len = 0;
     656/     9F9 : (MACRO)             	ld2z R14
     657/     9FD :                     ;    if (readRegByte(EPKTCNT) > 0) {
     658/     9FD : (MACRO)             	ldaD R12,57; reg:acon
     659/     A03 : (MACRO)             	Ccall _readRegByte
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 12 - 4/25/2013 10:34:27


     660/     A06 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     661/     A0A : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     662/     A0D : (MACRO)             	jnI2I r11,0,lbdf,L53 ;LEI2 0 11 L53; LE is flipped test & subtraction
     663/     A1E :                     ;        writeReg(ERDPT, gNextPacketPtr);
     664/     A1E : (MACRO)             	ld2z R12
     665/     A22 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     666/     A2C : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     667/     A30 : (MACRO)             	Ccall _writeReg
     668/     A33 :                     ;        readBuf(sizeof header, (uint8_t*) &header);
     669/     A33 : (MACRO)             	ldaD R12,6; reg:acon
     670/     A39 : (MACRO)             	ldA2 R13,'O',sp,(-8+20); reg:addr
     671/     A41 : (MACRO)             	Ccall _readBuf
     672/     A44 :                     ;        headernextPacket=header.nextPacketL+(header.nextPacketH<<8); //assemble next packet pointer
     673/     A44 : (MACRO)             	ld1 R11,'O',sp,(-8+20)
     674/     A4E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     675/     A51 : (MACRO)             	ld1 R10,'O',sp,(-7+20)
     676/     A5B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     677/     A5E : (MACRO)             	shl2I R10,8
     678/     A8E : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
     679/     A9A : (MACRO)             	st2 R11,'O',sp,(-10+20); ASGNU2(addr,LOADU2(reg))*
     680/     AA7 :                     ;        headerbyteCount=header.byteCountL+(header.byteCountH<<8); //assemble byte count
     681/     AA7 : (MACRO)             	ld1 R11,'O',sp,(-6+20)
     682/     AB1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     683/     AB4 : (MACRO)             	ld1 R10,'O',sp,(-5+20)
     684/     ABE : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     685/     AC1 : (MACRO)             	shl2I R10,8
     686/     AF1 : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
     687/     AFD : (MACRO)             	st2 R11,'O',sp,(-12+20); ASGNU2(addr,LOADU2(reg))*
     688/     B0A :                     ;        gNextPacketPtr  = headernextPacket;
     689/     B0A : (MACRO)             	ld2 R11,'O',sp,(-10+20); reg:INDIRU2(addr)
     690/     B16 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0; ASGNI2(addr,LOADI2(reg)) wjrtest
     691/     B21 :                     ;        len = headerbyteCount - 4; //remove the CRC count
     692/     B21 : (MACRO)             	ld2 R11,'O',sp,(-12+20); reg:INDIRU2(addr)
     693/     B2D : (MACRO)             	cpy2 R14,R11
     694/     B31 : (MACRO)             	decm R14,4
     695/     B35 :                     ;        if (len>bufferSize-1)
     696/     B35 : (MACRO)             	ld2 R11,'D',(_bufferSize),0; reg:INDIRU2(addr)
     697/     B3F : (MACRO)             	decm R11,1
     698/     B40 : (MACRO)             	jcU2 r11,r14,lbdf,L58 ;LE is flipped test & operands
     699/     B4D :                     ;            len=bufferSize-1;
     700/     B4D : (MACRO)             	ld2 R11,'D',(_bufferSize),0; reg:INDIRU2(addr)
     701/     B57 : (MACRO)             	cpy2 R14,R11
     702/     B5B : (MACRO)             	decm R14,1
     703/     B5C :                     L58:
     704/     B5C :                     ;        if ((header.statusL & 0x80)==0)
     705/     B5C : (MACRO)             	ld1 R11,'O',sp,(-4+20)
     706/     B66 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     707/     B69 : (MACRO)             	alu2I R11,R11,128,ani,ani
     708/     B71 :                     	;removed ?	cpy2 R11,R11
     709/     B71 : (MACRO)             	jnzU2 r11,L60; NE 0
     710/     B79 :                     ;            len = 0;
     711/     B79 : (MACRO)             	ld2z R14
     712/     B7D : C0 0B 8D            	lbr L61
     713/     B80 :                     L60:
     714/     B80 :                     ;            readBuf(len, buffer);
     715/     B80 : (MACRO)             	cpy2 R12,R14 ;LOADU2(reg)*
     716/     B84 : (MACRO)             	ldaD R13,_buffer; reg:acon
     717/     B8A : (MACRO)             	Ccall _readBuf
     718/     B8D :                     L61:
     719/     B8D :                     ;        buffer[len] = 0;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 13 - 4/25/2013 10:34:27


     720/     B8D : (MACRO)             	ldaD R11,0; reg:acon
     721/     B93 : (MACRO)             	st1 R11,'O',R14,(_buffer); ASGNU1
     722/     B9D :                     ;        if (gNextPacketPtr - 1 > RXSTOP_INIT)
     723/     B9D : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     724/     BA7 : (MACRO)             	decm R11,1
     725/     BA8 : (MACRO)             	jnI2I r11,3071,lbdf,L63 ;LEI2 3071 11 L63; LE is flipped test & subtraction
     726/     BB9 :                     ;            writeReg(ERXRDPT, RXSTOP_INIT);
     727/     BB9 : (MACRO)             	ldaD R12,12; reg:acon
     728/     BBF : (MACRO)             	ldaD R13,3071; reg:acon
     729/     BC5 : (MACRO)             	Ccall _writeReg
     730/     BC8 : C0 0B E3            	lbr L64
     731/     BCB :                     L63:
     732/     BCB :                     ;            writeReg(ERXRDPT, gNextPacketPtr - 1);
     733/     BCB : (MACRO)             	ldaD R12,12; reg:acon
     734/     BD1 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     735/     BDB : (MACRO)             	decm R11,1
     736/     BDC : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     737/     BE0 : (MACRO)             	Ccall _writeReg
     738/     BE3 :                     L64:
     739/     BE3 :                     ;        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     740/     BE3 : (MACRO)             	ldaD R12,128; reg:acon
     741/     BE9 : (MACRO)             	ldaD R13,30; reg:acon
     742/     BEF : (MACRO)             	ldaD R11,64; reg:acon
     743/     BF5 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     744/     C02 : (MACRO)             	Ccall _writeOp
     745/     C05 :                     ;    }
     746/     C05 :                     L53:
     747/     C05 :                     ;    return len;
     748/     C05 : (MACRO)             	cpy2 R15,R14 ;LOADU2(reg)*
     749/     C09 :                     L51:
     750/     C09 : (MACRO)             	release 6; release room for outgoing arguments
     751/     C0F : (MACRO)             	popr r14
     752/     C13 : (MACRO)             	release 10; release room for local variables 
     753/     C1B : (MACRO)             	Cretn
     754/     C1C :                     
     755/     C1C :                     _readBuf:
     756/     C1C : (MACRO)             	reserve 0; save room for local variables
     757/     C1C : (MACRO)             	pushr r1
     758/     C21 : (MACRO)             	pushr r7
     759/     C26 : (MACRO)             	pushr r14
     760/     C2B : (MACRO)             	reserve 4; save room for outgoing arguments
     761/     C2F : (MACRO)             	cpy2 r14,r12; function(2054) 1
     762/     C33 : (MACRO)             	cpy2 r7,r13; function(2055) 1
     763/     C37 :                     ; void readBuf(uint16_t len, uint8_t* data) {
     764/     C37 :                     ;    enableChip();
     765/     C37 : (MACRO)             	Ccall _enableChip
     766/     C3A :                     ;    xferSPI(ENC28J60_READ_BUF_MEM);
     767/     C3A : (MACRO)             	ldaD R12,58; reg:acon
     768/     C40 : (MACRO)             	Ccall _xferSPI
     769/     C43 : C0 0C 5E            	lbr L67
     770/     C46 :                     L66:
     771/     C46 :                     ;    while (len--) {
     772/     C46 :                     ;        x=xferSPI(0x00);
     773/     C46 : (MACRO)             	ld2z R12
     774/     C4A : (MACRO)             	Ccall _xferSPI
     775/     C4D : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     776/     C51 : (MACRO)             	cpy1 R1,R11;LOADU1(reg)
     777/     C53 :                     ;        *data++ = x;
     778/     C53 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     779/     C57 : (MACRO)             	cpy2 R7,R11
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 14 - 4/25/2013 10:34:27


     780/     C5B : (MACRO)             	incm R7,1
     781/     C5C : (MACRO)             	str1 R1,R11; ASGNU1(indaddr,reg)
     782/     C5E :                     ;    }
     783/     C5E :                     L67:
     784/     C5E :                     ;    while (len--) {
     785/     C5E : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
     786/     C62 : (MACRO)             	cpy2 R14,R11
     787/     C66 : (MACRO)             	decm R14,1
     788/     C67 : (MACRO)             	jnzU2 r11,L66; NE 0
     789/     C6F :                     ;    disableChip();
     790/     C6F : (MACRO)             	Ccall _disableChip
     791/     C72 :                     ;}
     792/     C72 :                     L65:
     793/     C72 : (MACRO)             	release 4; release room for outgoing arguments
     794/     C76 : (MACRO)             	popr r14
     795/     C7A : (MACRO)             	popr r7
     796/     C7E : (MACRO)             	popr r1
     797/     C82 : (MACRO)             	release 0; release room for local variables 
     798/     C82 : (MACRO)             	Cretn
     799/     C83 :                     
     800/     C83 :                     _writeBuf:
     801/     C83 : (MACRO)             	reserve 0; save room for local variables
     802/     C83 : (MACRO)             	pushr r7
     803/     C88 : (MACRO)             	pushr r14
     804/     C8D : (MACRO)             	reserve 4; save room for outgoing arguments
     805/     C91 : (MACRO)             	cpy2 r14,r12; function(2054) 1
     806/     C95 : (MACRO)             	cpy2 r7,r13; function(2055) 1
     807/     C99 :                     ; void writeBuf(uint16_t len, const uint8_t* data) {
     808/     C99 :                     ;    enableChip();
     809/     C99 : (MACRO)             	Ccall _enableChip
     810/     C9C :                     ;    xferSPI(ENC28J60_WRITE_BUF_MEM);
     811/     C9C : (MACRO)             	ldaD R12,122; reg:acon
     812/     CA2 : (MACRO)             	Ccall _xferSPI
     813/     CA5 : C0 0C C1            	lbr L71
     814/     CA8 :                     L70:
     815/     CA8 :                     ;        xferSPI(*data++);
     816/     CA8 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     817/     CAC : (MACRO)             	cpy2 R7,R11
     818/     CB0 : (MACRO)             	incm R7,1
     819/     CB1 : (MACRO)             	ld1 R12,'O',R11,0
     820/     CBB : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     821/     CBE : (MACRO)             	Ccall _xferSPI
     822/     CC1 :                     L71:
     823/     CC1 :                     ;    while (len--)
     824/     CC1 : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
     825/     CC5 : (MACRO)             	cpy2 R14,R11
     826/     CC9 : (MACRO)             	decm R14,1
     827/     CCA : (MACRO)             	jnzU2 r11,L70; NE 0
     828/     CD2 :                     ;    disableChip();
     829/     CD2 : (MACRO)             	Ccall _disableChip
     830/     CD5 :                     ;}
     831/     CD5 :                     L69:
     832/     CD5 : (MACRO)             	release 4; release room for outgoing arguments
     833/     CD9 : (MACRO)             	popr r14
     834/     CDD : (MACRO)             	popr r7
     835/     CE1 : (MACRO)             	release 0; release room for local variables 
     836/     CE1 : (MACRO)             	Cretn
     837/     CE2 :                     
     838/     CE2 :                     _encpacketSend:
     839/     CE2 : (MACRO)             	reserve 6
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 15 - 4/25/2013 10:34:27


     840/     CE8 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     841/     CF5 :                     ;void encpacketSend(uint16_t len) {
     842/     CF5 : C0 0D 5A            	lbr L75
     843/     CF8 :                     L74:
     844/     CF8 :                     ;        if (readRegByte(EIR) & EIR_TXERIF) {
     845/     CF8 : (MACRO)             	ldaD R12,28; reg:acon
     846/     CFE : (MACRO)             	Ccall _readRegByte
     847/     D01 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     848/     D05 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     849/     D08 : (MACRO)             	alu2I R11,R11,2,ani,ani
     850/     D10 :                     	;removed ?	cpy2 R11,R11
     851/     D10 : (MACRO)             	jzU2 r11,L77; EQ 0
     852/     D18 :                     ;            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     853/     D18 : (MACRO)             	ldaD R11,128; reg:acon
     854/     D1E : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
     855/     D22 : (MACRO)             	ldaD R13,31; reg:acon
     856/     D28 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     857/     D35 : (MACRO)             	Ccall _writeOp
     858/     D38 :                     ;            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     859/     D38 : (MACRO)             	ldaD R12,160; reg:acon
     860/     D3E : (MACRO)             	ldaD R13,31; reg:acon
     861/     D44 : (MACRO)             	ldaD R11,128; reg:acon
     862/     D4A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     863/     D57 : (MACRO)             	Ccall _writeOp
     864/     D5A :                     ;        }
     865/     D5A :                     L77:
     866/     D5A :                     L75:
     867/     D5A :                     ;    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     868/     D5A : (MACRO)             	ld2z R12
     869/     D5E : (MACRO)             	ldaD R13,31; reg:acon
     870/     D64 : (MACRO)             	Ccall _readOp
     871/     D67 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     872/     D6B : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     873/     D6E : (MACRO)             	alu2I R11,R11,8,ani,ani
     874/     D76 :                     	;removed ?	cpy2 R11,R11
     875/     D76 : (MACRO)             	jnzU2 r11,L74; NE 0
     876/     D7E :                     ;    writeReg(EWRPT, TXSTART_INIT);
     877/     D7E : (MACRO)             	ldaD R12,2; reg:acon
     878/     D84 : (MACRO)             	ldaD R13,3072; reg:acon
     879/     D8A : (MACRO)             	Ccall _writeReg
     880/     D8D :                     ;    writeReg(ETXND, TXSTART_INIT+len);
     881/     D8D : (MACRO)             	ldaD R12,6; reg:acon
     882/     D93 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     883/     D9F : (MACRO)             	ldA2 R13,'O',R11,(3072); reg:addr
     884/     DA7 : (MACRO)             	Ccall _writeReg
     885/     DAA :                     ;    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     886/     DAA : (MACRO)             	ldaD R12,122; reg:acon
     887/     DB0 : (MACRO)             	ld2z R11
     888/     DB4 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
     889/     DB8 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     890/     DC5 : (MACRO)             	Ccall _writeOp
     891/     DC8 :                     ;    writeBuf(len, buffer);
     892/     DC8 : (MACRO)             	ld2 R12,'O',sp,(0+8); reg:INDIRU2(addr)
     893/     DD4 : (MACRO)             	ldaD R13,_buffer; reg:acon
     894/     DDA : (MACRO)             	Ccall _writeBuf
     895/     DDD :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     896/     DDD : (MACRO)             	ldaD R12,128; reg:acon
     897/     DE3 : (MACRO)             	ldaD R13,31; reg:acon
     898/     DE9 : (MACRO)             	ldaD R11,8; reg:acon
     899/     DEF : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 16 - 4/25/2013 10:34:28


     900/     DFC : (MACRO)             	Ccall _writeOp
     901/     DFF :                     ;}
     902/     DFF :                     L73:
     903/     DFF : (MACRO)             	release 6
     904/     E05 : (MACRO)             	Cretn
     905/     E06 :                     
     906/     E06 :                     _isLinkUp:
     907/     E06 : (MACRO)             	reserve 4
     908/     E0A :                     ;int isLinkUp() {
     909/     E0A :                     ;    return (readPhyByte(PHSTAT2) >> 2) & 1;
     910/     E0A : (MACRO)             	ldaD R12,17; reg:acon
     911/     E10 : (MACRO)             	Ccall _readPhyByte;CALLU2(ar)*
     912/     E13 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     913/     E17 : (MACRO)             	shrU2I R11,2
     914/     E23 : (MACRO)             	alu2I R11,R11,1,ani,ani ;removed copy;BANDU2(reg,con)  
     915/     E2B : (MACRO)             	cpy2 R15,R11 ;LOADI2(reg)*
     916/     E2F :                     L79:
     917/     E2F : (MACRO)             	release 4
     918/     E33 : (MACRO)             	Cretn
     919/     E34 :                     
     920/     E34 :                     _readPhyByte:
     921/     E34 : (MACRO)             	reserve 4
     922/     E38 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     923/     E45 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     924/     E51 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     925/     E5B :                     ; uint16_t readPhyByte (uint8_t address) {
     926/     E5B :                     ;    writeRegByte(MIREGADR, address);
     927/     E5B : (MACRO)             	ldaD R12,212; reg:acon
     928/     E61 : (MACRO)             	ld1 R13,'O',sp,(0+6)
     929/     E6B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     930/     E6E : (MACRO)             	Ccall _writeRegByte
     931/     E71 :                     ;    writeRegByte(MICMD, MICMD_MIIRD);
     932/     E71 : (MACRO)             	ldaD R12,210; reg:acon
     933/     E77 : (MACRO)             	ldaD R13,1; reg:acon
     934/     E7D : (MACRO)             	Ccall _writeRegByte
     935/     E80 :                     L81:
     936/     E80 :                     ;        ;
     937/     E80 :                     L82:
     938/     E80 :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
     939/     E80 : (MACRO)             	ldaD R12,234; reg:acon
     940/     E86 : (MACRO)             	Ccall _readRegByte
     941/     E89 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     942/     E8D : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     943/     E90 : (MACRO)             	alu2I R11,R11,1,ani,ani
     944/     E98 :                     	;removed ?	cpy2 R11,R11
     945/     E98 : (MACRO)             	jnzU2 r11,L81; NE 0
     946/     EA0 :                     ;    writeRegByte(MICMD, 0x00);
     947/     EA0 : (MACRO)             	ldaD R12,210; reg:acon
     948/     EA6 : (MACRO)             	ld2z R13
     949/     EAA : (MACRO)             	Ccall _writeRegByte
     950/     EAD :                     ;    return readRegByte(MIRD+1);
     951/     EAD : (MACRO)             	ldaD R12,217; reg:acon
     952/     EB3 : (MACRO)             	Ccall _readRegByte
     953/     EB6 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     954/     EBA : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     955/     EBD : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     956/     EC1 :                     L80:
     957/     EC1 : (MACRO)             	release 4
     958/     EC5 : (MACRO)             	Cretn
     959/     EC6 :                     
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 17 - 4/25/2013 10:34:28


     960/     EC6 :                     _tcpclient_src_port_l:
     961/     EC6 : 01                  	db 1
     962/     EC7 :                     _delaycnt:
     963/     EC7 : 00 01               	dw 1
     964/     EC9 :                     _seqnum:
     965/     EC9 : 0A                  	db 10
     966/     ECA :                     _arpreqhdr:
     967/     ECA : 00                  	db 0
     968/     ECB : 01                  	db 1
     969/     ECC : 08                  	db 8
     970/     ECD : 00                  	db 0
     971/     ECE : 06                  	db 6
     972/     ECF : 04                  	db 4
     973/     ED0 : 00                  	db 0
     974/     ED1 : 01                  	db 1
     975/     ED2 :                     _iphdr:
     976/     ED2 : 45                  	db 69
     977/     ED3 : 00                  	db 0
     978/     ED4 : 00                  	db 0
     979/     ED5 : 82                  	db 130
     980/     ED6 : 00                  	db 0
     981/     ED7 : 00                  	db 0
     982/     ED8 : 40                  	db 64
     983/     ED9 : 00                  	db 0
     984/     EDA : 20                  	db 32
     985/     EDB :                     _ntpreqhdr:
     986/     EDB : E3                  	db 227
     987/     EDC : 00                  	db 0
     988/     EDD : 04                  	db 4
     989/     EDE : FA                  	db 250
     990/     EDF : 00                  	db 0
     991/     EE0 : 01                  	db 1
     992/     EE1 : 00                  	db 0
     993/     EE2 : 00                  	db 0
     994/     EE3 : 00                  	db 0
     995/     EE4 : 01                  	db 1
     996/     EE5 :                     _allOnes:
     997/     EE5 : FF                  	db 255
     998/     EE6 : FF                  	db 255
     999/     EE7 : FF                  	db 255
    1000/     EE8 : FF                  	db 255
    1001/     EE9 : FF                  	db 255
    1002/     EEA : FF                  	db 255
    1003/     EEB :                     _tcppacketLoop:
    1004/     EEB : (MACRO)             	reserve 8; save room for local variables
    1005/     EF3 : (MACRO)             	pushr r14
    1006/     EF8 : (MACRO)             	reserve 8; save room for outgoing arguments
    1007/     F00 : (MACRO)             	cpy2 r14,r12; function(2054) 1
    1008/     F04 :                     ;word tcppacketLoop (word plen) {
    1009/     F04 :                     ;  if (plen==0) {
    1010/     F04 : (MACRO)             	jnzU2 r14,L85; NE 0
    1011/     F0C :                     ;    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1012/     F0C : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1013/     F14 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1014/     F17 : (MACRO)             	alu2I R10,R11,1,ani,ani
    1015/     F1F :                     	;removed ?	cpy2 R10,R11
    1016/     F1F : (MACRO)             	jnzU2 r10,L89; NE 0
    1017/     F27 : (MACRO)             	alu2I R11,R11,4,ani,ani
    1018/     F2F :                     	;removed ?	cpy2 R11,R11
    1019/     F2F : (MACRO)             	jzU2 r11,L87; EQ 0
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 18 - 4/25/2013 10:34:28


    1020/     F37 :                     L89:
    1021/     F37 : (MACRO)             	ld2 R11,'D',(_delaycnt),0 ;reg:INDIRI2(addr)
    1022/     F41 : (MACRO)             	jnzU2 r11,L87; NE 0
    1023/     F49 : (MACRO)             	Ccall _isLinkUp
    1024/     F4C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1025/     F50 : (MACRO)             	jzU2 r11,L87; EQ 0
    1026/     F58 :                     ;      client_arp_whohas(gwip);
    1027/     F58 : (MACRO)             	ldaD R12,_gwip; reg:acon
    1028/     F5E : (MACRO)             	Ccall _client_arp_whohas
    1029/     F61 :                     L87:
    1030/     F61 :                     ;    delaycnt++;
    1031/     F61 : (MACRO)             	ld2 R11,'D',(_delaycnt),0 ;reg:INDIRI2(addr)
    1032/     F6B : (MACRO)             	incm R11,1
    1033/     F6C : (MACRO)             	st2 R11,'D',(_delaycnt),0; ASGNI2(addr,reg)*;
    1034/     F77 :                     ;    if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1035/     F77 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1036/     F7F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1037/     F82 : (MACRO)             	jneU2I r11,1,L90; NE
    1038/     F8E : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1039/     F96 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1040/     F99 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1041/     FA1 :                     	;removed ?	cpy2 R11,R11
    1042/     FA1 : (MACRO)             	jzU2 r11,L90; EQ 0
    1043/     FA9 :                     ;      tcp_client_state = 2;
    1044/     FA9 : (MACRO)             	ldaD R11,2; reg:acon
    1045/     FAF : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1046/     FB7 :                     ;      tcpclient_src_port_l++; // allocate a new port
    1047/     FB7 : (MACRO)             	ldaD R11,_tcpclient_src_port_l; reg:acon
    1048/     FBD : (MACRO)             	ld1 R10,'D',(_tcpclient_src_port_l),0
    1049/     FC5 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1050/     FC8 : (MACRO)             	incm R10,1
    1051/     FC9 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1052/     FCB :                     ;      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1053/     FCB : (MACRO)             	ld1 R11,'D',(_tcp_fd),0
    1054/     FD3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1055/     FD6 : (MACRO)             	shl2I R11,5
    1056/     FF4 : (MACRO)             	ld1 R10,'D',(_tcpclient_src_port_l),0
    1057/     FFC : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1058/     FFF : (MACRO)             	alu2I R10,R10,31,ani,ani
    1059/    1007 :                     	;removed ?	cpy2 R10,R10
    1060/    1007 : (MACRO)             	alu2 R11,R11,R10,or,or
    1061/    1013 : (MACRO)             	cpy1 R12,R11
    1062/    1015 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1063/    1018 : (MACRO)             	ld1 R13,'D',(_tcp_client_port_h),0
    1064/    1020 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1065/    1023 : (MACRO)             	ld1 R11,'D',(_tcp_client_port_l),0
    1066/    102B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1067/    102E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1068/    103B : (MACRO)             	Ccall _client_syn
    1069/    103E :                     ;    }
    1070/    103E :                     L90:
    1071/    103E :                     ;    return 0;
    1072/    103E : (MACRO)             	ld2z R15
    1073/    1042 : C0 18 3A            	lbr L84
    1074/    1045 :                     L85:
    1075/    1045 :                     ;  if (eth_type_is_arp_and_my_ip(plen)) {
    1076/    1045 : (MACRO)             	cpy2 R12,R14 ;LOADU2(reg)*
    1077/    1049 : (MACRO)             	Ccall _eth_type_is_arp_and_my_ip
    1078/    104C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1079/    1050 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 19 - 4/25/2013 10:34:28


    1080/    1053 : (MACRO)             	jzU2 r11,L92; EQ 0
    1081/    105B :                     ;    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1082/    105B : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1083/    1063 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1084/    1066 : (MACRO)             	jneU2I r11,1,L94; NE
    1085/    1072 :                     ;        make_arp_answer_from_request();
    1086/    1072 : (MACRO)             	Ccall _make_arp_answer_from_request
    1087/    1075 :                     ;    }
    1088/    1075 :                     L94:
    1089/    1075 :                     ;    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac()){
    1090/    1075 : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1091/    107D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1092/    1080 : (MACRO)             	alu2I R11,R11,8,ani,ani
    1093/    1088 :                     	;removed ?	cpy2 R11,R11
    1094/    1088 : (MACRO)             	jzU2 r11,L97; EQ 0
    1095/    1090 : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1096/    1098 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1097/    109B : (MACRO)             	jneU2I r11,2,L97; NE
    1098/    10A7 : (MACRO)             	Ccall _client_store_gw_mac
    1099/    10AA : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1100/    10AE : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1101/    10B1 : (MACRO)             	jzU2 r11,L97; EQ 0
    1102/    10B9 :                     ;		waitgwmac = WGW_HAVE_GW_MAC;
    1103/    10B9 : (MACRO)             	ldaD R11,2; reg:acon
    1104/    10BF : (MACRO)             	st1 R11,'D',(_waitgwmac),0; ASGNU1
    1105/    10C7 :                     ;	}
    1106/    10C7 :                     L97:
    1107/    10C7 :                     ;    return 0;
    1108/    10C7 : (MACRO)             	ld2z R15
    1109/    10CB : C0 18 3A            	lbr L84
    1110/    10CE :                     L92:
    1111/    10CE :                     ;  if (eth_type_is_ip_and_my_ip(plen)==0){
    1112/    10CE : (MACRO)             	cpy2 R12,R14 ;LOADU2(reg)*
    1113/    10D2 : (MACRO)             	Ccall _eth_type_is_ip_and_my_ip
    1114/    10D5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1115/    10D9 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1116/    10DC : (MACRO)             	jnzU2 r11,L100; NE 0
    1117/    10E4 :                     ;    return 0;
    1118/    10E4 : (MACRO)             	ld2z R15
    1119/    10E8 : C0 18 3A            	lbr L84
    1120/    10EB :                     L100:
    1121/    10EB :                     ;  if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V) {
    1122/    10EB : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1123/    10F3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1124/    10F6 : (MACRO)             	jneU2I r11,1,L102; NE
    1125/    1102 : (MACRO)             	ld1 R11,'D',(_buffer+34),0
    1126/    110A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1127/    110D : (MACRO)             	jneU2I r11,8,L102; NE
    1128/    1119 :                     ;    if (icmp_cb)
    1129/    1119 : (MACRO)             	ld2 R11,'D',(_icmp_cb),0;reg:  INDIRP2(addr)
    1130/    1123 : (MACRO)             	jeqU2I r11,0,L106;EQU2(reg,con)
    1131/    112F :                     ;      (*icmp_cb)(&(gPB[IP_SRC_P]));
    1132/    112F : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    1133/    1135 : (MACRO)             	ld2 R11,'D',(_icmp_cb),0;reg:  INDIRP2(addr)
    1134/    113F : (MACRO)             	Ccall r11
    1135/    1142 :                     L106:
    1136/    1142 :                     ;    make_echo_reply_from_request(plen);
    1137/    1142 : (MACRO)             	cpy2 R12,R14 ;LOADU2(reg)*
    1138/    1146 : (MACRO)             	Ccall _make_echo_reply_from_request
    1139/    1149 :                     ;    return 0;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 20 - 4/25/2013 10:34:28


    1140/    1149 : (MACRO)             	ld2z R15
    1141/    114D : C0 18 3A            	lbr L84
    1142/    1150 :                     L102:
    1143/    1150 :                     ;  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    1144/    1150 : (MACRO)             	jcI2I r14,54,lbdf,L109; GE is flipped test from LT
    1145/    1161 : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1146/    1169 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1147/    116C : (MACRO)             	jeqU2I r11,6,L109;EQI2(reg,con)
    1148/    1178 :                     ;    return 0;
    1149/    1178 : (MACRO)             	ld2z R15
    1150/    117C : C0 18 3A            	lbr L84
    1151/    117F :                     L109:
    1152/    117F :                     ;  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
    1153/    117F : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    1154/    1187 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1155/    118A : (MACRO)             	jneU2I r11,11,L112; NE
    1156/    1196 :                     ;    if (check_ip_message_is_from(hisip)==0)
    1157/    1196 : (MACRO)             	ldaD R12,_hisip; reg:acon
    1158/    119C : (MACRO)             	Ccall _check_ip_message_is_from
    1159/    119F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1160/    11A3 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1161/    11A6 : (MACRO)             	jnzU2 r11,L115; NE 0
    1162/    11AE :                     ;      return 0;
    1163/    11AE : (MACRO)             	ld2z R15
    1164/    11B2 : C0 18 3A            	lbr L84
    1165/    11B5 :                     L115:
    1166/    11B5 :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) {
    1167/    11B5 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1168/    11BD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1169/    11C0 : (MACRO)             	alu2I R11,R11,4,ani,ani
    1170/    11C8 :                     	;removed ?	cpy2 R11,R11
    1171/    11C8 : (MACRO)             	jzU2 r11,L117; EQ 0
    1172/    11D0 :                     ;      if (client_tcp_result_cb)
    1173/    11D0 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1174/    11DA : (MACRO)             	jeqU2I r11,0,L120;EQU2(reg,con)
    1175/    11E6 :                     ;(*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1176/    11E6 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    1177/    11EE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1178/    11F1 : (MACRO)             	shrI2I R11,5
    1179/    1219 : (MACRO)             	alu2I R11,R11,7,ani,ani
    1180/    1221 :                     	;removed ?	cpy2 R11,R11
    1181/    1221 : (MACRO)             	cpy1 R12,R11
    1182/    1223 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1183/    1226 : (MACRO)             	ldaD R13,3; reg:acon
    1184/    122C : (MACRO)             	ld2z R11
    1185/    1230 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1186/    123D : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1187/    124A : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1188/    1254 : (MACRO)             	Ccall r11
    1189/    1257 :                     L120:
    1190/    1257 :                     ;      tcp_client_state = 5;
    1191/    1257 : (MACRO)             	ldaD R11,5; reg:acon
    1192/    125D : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1193/    1265 :                     ;      return 0;
    1194/    1265 : (MACRO)             	ld2z R15
    1195/    1269 : C0 18 3A            	lbr L84
    1196/    126C :                     L117:
    1197/    126C :                     ;    len = get_tcp_data_len();
    1198/    126C : (MACRO)             	Ccall _get_tcp_data_len;CALLU2(ar)*
    1199/    126F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 21 - 4/25/2013 10:34:28


    1200/    1273 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1201/    1280 :                     ;    if (tcp_client_state==2) {
    1202/    1280 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1203/    1288 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1204/    128B : (MACRO)             	jneU2I r11,2,L123; NE
    1205/    1297 :                     ;      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)) {
    1206/    1297 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1207/    129F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1208/    12A2 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1209/    12AA :                     	;removed ?	cpy2 R11,R11
    1210/    12AA : (MACRO)             	jzU2 r11,L125; EQ 0
    1211/    12B2 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1212/    12BA : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1213/    12BD : (MACRO)             	alu2I R11,R11,16,ani,ani
    1214/    12C5 :                     	;removed ?	cpy2 R11,R11
    1215/    12C5 : (MACRO)             	jzU2 r11,L125; EQ 0
    1216/    12CD :                     ;        make_tcp_ack_from_any(0,0);
    1217/    12CD : (MACRO)             	ld2z R11
    1218/    12D1 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1219/    12D5 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1220/    12D9 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1221/    12DC :                     ;        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1222/    12DC : (MACRO)             	ldaD R11,24; reg:acon
    1223/    12E2 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1224/    12EA :                     ;        if (client_tcp_datafill_cb)
    1225/    12EA : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0;reg:  INDIRP2(addr)
    1226/    12F4 : (MACRO)             	jeqU2I r11,0,L130;EQU2(reg,con)
    1227/    1300 :                     ;          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    1228/    1300 : (MACRO)             	ld1 R11,'D',(_buffer+35),0
    1229/    1308 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1230/    130B : (MACRO)             	shrI2I R11,5
    1231/    1333 : (MACRO)             	alu2I R11,R11,7,ani,ani
    1232/    133B :                     	;removed ?	cpy2 R11,R11
    1233/    133B : (MACRO)             	cpy1 R12,R11
    1234/    133D : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1235/    1340 : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0;reg:  INDIRP2(addr)
    1236/    134A : (MACRO)             	Ccall r11;CALLU2(ar)*
    1237/    134D : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1238/    1351 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1239/    135E : C0 13 72            	lbr L131
    1240/    1361 :                     L130:
    1241/    1361 :                     ;          len = 0;
    1242/    1361 : (MACRO)             	ld2z R11
    1243/    1365 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1244/    1372 :                     L131:
    1245/    1372 :                     ;        tcp_client_state = 3;
    1246/    1372 : (MACRO)             	ldaD R11,3; reg:acon
    1247/    1378 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1248/    1380 :                     ;        make_tcp_ack_with_data_noflags(len);
    1249/    1380 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
    1250/    138C : (MACRO)             	Ccall _make_tcp_ack_with_data_noflags
    1251/    138F :                     ;      }else{
    1252/    138F : C0 13 FF            	lbr L126
    1253/    1392 :                     L125:
    1254/    1392 :                     ;        tcp_client_state = 1; // retry
    1255/    1392 : (MACRO)             	ldaD R11,1; reg:acon
    1256/    1398 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1257/    13A0 :                     ;        len++;
    1258/    13A0 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1259/    13AC : (MACRO)             	incm R11,1
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 22 - 4/25/2013 10:34:28


    1260/    13AD : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1261/    13BA :                     ;        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1262/    13BA : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1263/    13C2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1264/    13C5 : (MACRO)             	alu2I R11,R11,16,ani,ani
    1265/    13CD :                     	;removed ?	cpy2 R11,R11
    1266/    13CD : (MACRO)             	jzU2 r11,L133; EQ 0
    1267/    13D5 :                     ;          len = 0;
    1268/    13D5 : (MACRO)             	ld2z R11
    1269/    13D9 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1270/    13E6 :                     L133:
    1271/    13E6 :                     ;        make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    1272/    13E6 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1273/    13F2 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1274/    13F6 : (MACRO)             	ldaD R13,4; reg:acon
    1275/    13FC : (MACRO)             	Ccall _make_tcp_ack_from_any
    1276/    13FF :                     ;      }
    1277/    13FF :                     L126:
    1278/    13FF :                     ;      return 0;
    1279/    13FF : (MACRO)             	ld2z R15
    1280/    1403 : C0 18 3A            	lbr L84
    1281/    1406 :                     L123:
    1282/    1406 :                     ;    if (tcp_client_state==3 && len>0) {
    1283/    1406 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1284/    140E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1285/    1411 : (MACRO)             	jneU2I r11,3,L136; NE
    1286/    141D : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1287/    1429 : (MACRO)             	jeqU2I r11,0,L136;EQU2(reg,con)
    1288/    1435 :                     ;      tcp_client_state = 4;
    1289/    1435 : (MACRO)             	ldaD R11,4; reg:acon
    1290/    143B : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1291/    1443 :                     ;      if (client_tcp_result_cb) {
    1292/    1443 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1293/    144D : (MACRO)             	jeqU2I r11,0,L138;EQU2(reg,con)
    1294/    1459 :                     ;        word tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    1295/    1459 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1296/    1461 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1297/    1464 : (MACRO)             	shrI2I R11,4
    1298/    1484 : (MACRO)             	shl2I R11,2
    1299/    1490 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    1300/    1498 : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)*
    1301/    14A5 :                     ;        if (tcpstart>plen-8)
    1302/    14A5 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1303/    14B1 : (MACRO)             	alu2I R10,R14,8,smi,smbi
    1304/    14B9 : (MACRO)             	jcU2 r10,r11,lbdf,L141 ;LE is flipped test & operands
    1305/    14C6 :                     ;          tcpstart = plen-8; // dummy but save
    1306/    14C6 : (MACRO)             	alu2I R11,R14,8,smi,smbi
    1307/    14CE : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)*
    1308/    14DB :                     L141:
    1309/    14DB :                     ;        save_len = len;
    1310/    14DB : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1311/    14E7 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
    1312/    14F4 :                     ;        if (tcpstart+len>plen)
    1313/    14F4 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1314/    1500 : (MACRO)             	ld2 R10,'O',sp,(-4+20); reg:INDIRU2(addr)
    1315/    150C : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDU2(r,r)
    1316/    1518 : (MACRO)             	jcU2 r14,r11,lbdf,L143 ;LE is flipped test & operands
    1317/    1525 :                     ;          save_len = plen-tcpstart;
    1318/    1525 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1319/    1531 : (MACRO)             	alu2 R11,R14,R11,sm,smb
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 23 - 4/25/2013 10:34:28


    1320/    153D : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
    1321/    154A :                     L143:
    1322/    154A :                     ;        send_fin = (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1323/    154A : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    1324/    1552 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1325/    1555 : (MACRO)             	shrI2I R11,5
    1326/    157D : (MACRO)             	alu2I R11,R11,7,ani,ani
    1327/    1585 :                     	;removed ?	cpy2 R11,R11
    1328/    1585 : (MACRO)             	cpy1 R12,R11
    1329/    1587 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1330/    158A : (MACRO)             	ld2z R13
    1331/    158E : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1332/    159A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1333/    15A7 : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
    1334/    15B3 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1335/    15C0 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1336/    15CA : (MACRO)             	Ccall r11
    1337/    15CD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1338/    15D1 : (MACRO)             	st1 R11,'O',sp,(-7+20); ASGNU1
    1339/    15DB :                     ;        if (send_fin) {
    1340/    15DB : (MACRO)             	ld1 R11,'O',sp,(-7+20)
    1341/    15E5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1342/    15E8 : (MACRO)             	jzU2 r11,L146; EQ 0
    1343/    15F0 :                     ;          make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1344/    15F0 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1345/    15FC : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1346/    1600 : (MACRO)             	ldaD R13,9; reg:acon
    1347/    1606 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1348/    1609 :                     ;          tcp_client_state = 5;
    1349/    1609 : (MACRO)             	ldaD R11,5; reg:acon
    1350/    160F : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1351/    1617 :                     ;          return 0;
    1352/    1617 : (MACRO)             	ld2z R15
    1353/    161B : C0 18 3A            	lbr L84
    1354/    161E :                     L146:
    1355/    161E :                     ;      }
    1356/    161E :                     L138:
    1357/    161E :                     ;    }
    1358/    161E :                     L136:
    1359/    161E :                     ;    if (tcp_client_state != 5) {
    1360/    161E : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1361/    1626 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1362/    1629 : (MACRO)             	jeqU2I r11,5,L148;EQI2(reg,con)
    1363/    1635 :                     ;      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    1364/    1635 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1365/    163D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1366/    1640 : (MACRO)             	alu2I R11,R11,1,ani,ani
    1367/    1648 :                     	;removed ?	cpy2 R11,R11
    1368/    1648 : (MACRO)             	jzU2 r11,L150; EQ 0
    1369/    1650 :                     ;        make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1370/    1650 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1371/    165C : (MACRO)             	incm R11,1
    1372/    165D : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1373/    1661 : (MACRO)             	ldaD R13,9; reg:acon
    1374/    1667 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1375/    166A :                     ;        tcp_client_state = 5; // connection terminated
    1376/    166A : (MACRO)             	ldaD R11,5; reg:acon
    1377/    1670 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1378/    1678 :                     ;      } else if (len>0)
    1379/    1678 : C0 16 AA            	lbr L151
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 24 - 4/25/2013 10:34:28


    1380/    167B :                     L150:
    1381/    167B : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1382/    1687 : (MACRO)             	jeqU2I r11,0,L153;EQU2(reg,con)
    1383/    1693 :                     ;        make_tcp_ack_from_any(len,0);
    1384/    1693 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1385/    169F : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1386/    16A3 : (MACRO)             	ld2z R13
    1387/    16A7 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1388/    16AA :                     L153:
    1389/    16AA :                     L151:
    1390/    16AA :                     ;    }
    1391/    16AA :                     L148:
    1392/    16AA :                     ;    return 0;
    1393/    16AA : (MACRO)             	ld2z R15
    1394/    16AE : C0 18 3A            	lbr L84
    1395/    16B1 :                     L112:
    1396/    16B1 :                     ;  if (gPB[TCP_DST_PORT_H_P] == (hisport >> 8) &&
    1397/    16B1 : (MACRO)             	ld2 R11,'D',(_hisport),0; reg:INDIRU2(addr)
    1398/    16BB : (MACRO)             	ld1 R10,'D',(_buffer+36),0
    1399/    16C3 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1400/    16C6 : (MACRO)             	cpy2 R9,R11
    1401/    16CA : (MACRO)             	shrU2I R9,8
    1402/    16FA : (MACRO)             	jneU2 r10,r9,L155; NE
    1403/    170C : (MACRO)             	ld1 R10,'D',(_buffer+37),0
    1404/    1714 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1405/    1717 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1406/    171A : (MACRO)             	jneU2 r10,r11,L155; NE
    1407/    172C :                     ;      gPB[TCP_DST_PORT_L_P] == ((byte) hisport)) {
    1408/    172C :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    1409/    172C : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1410/    1734 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1411/    1737 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1412/    173F :                     	;removed ?	cpy2 R11,R11
    1413/    173F : (MACRO)             	jzU2 r11,L159; EQ 0
    1414/    1747 :                     ;      make_tcp_synack_from_syn();
    1415/    1747 : (MACRO)             	Ccall _make_tcp_synack_from_syn
    1416/    174A : C0 18 36            	lbr L160
    1417/    174D :                     L159:
    1418/    174D :                     ;    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
    1419/    174D : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1420/    1755 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1421/    1758 : (MACRO)             	alu2I R11,R11,16,ani,ani
    1422/    1760 :                     	;removed ?	cpy2 R11,R11
    1423/    1760 : (MACRO)             	jzU2 r11,L162; EQ 0
    1424/    1768 :                     ;      info_data_len = get_tcp_data_len();
    1425/    1768 : (MACRO)             	Ccall _get_tcp_data_len;CALLU2(ar)*
    1426/    176B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1427/    176F : (MACRO)             	st2 R11,'D',(_info_data_len),0; ASGNU2(addr,reg)*
    1428/    177A :                     ;      if (info_data_len > 0) {
    1429/    177A : (MACRO)             	ld2 R11,'D',(_info_data_len),0; reg:INDIRU2(addr)
    1430/    1784 : (MACRO)             	jeqU2I r11,0,L165;EQU2(reg,con)
    1431/    1790 :                     ;        len = TCP_DATA_START; // TCP_DATA_START is a formula
    1432/    1790 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1433/    1798 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1434/    179B : (MACRO)             	shrI2I R11,4
    1435/    17BB : (MACRO)             	shl2I R11,2
    1436/    17C7 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    1437/    17CF : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1438/    17DC :                     ;        if (len <= plen - 8)
    1439/    17DC : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 25 - 4/25/2013 10:34:28


    1440/    17E8 : (MACRO)             	alu2I R10,R14,8,smi,smbi
    1441/    17F0 : (MACRO)             	jcU2 r10,r11,lbnf,L166 ;GT same as LT but operands reversed
    1442/    17FD :                     ;          return len;
    1443/    17FD : (MACRO)             	ld2 R15,'O',sp,(-4+20); reg:INDIRU2(addr)
    1444/    1809 : C0 18 3A            	lbr L84
    1445/    180C :                     ;      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    1446/    180C :                     L165:
    1447/    180C : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1448/    1814 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1449/    1817 : (MACRO)             	alu2I R11,R11,1,ani,ani
    1450/    181F :                     	;removed ?	cpy2 R11,R11
    1451/    181F : (MACRO)             	jzU2 r11,L170; EQ 0
    1452/    1827 :                     ;        make_tcp_ack_from_any(0,0);
    1453/    1827 : (MACRO)             	ld2z R11
    1454/    182B : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1455/    182F : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1456/    1833 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1457/    1836 :                     L170:
    1458/    1836 :                     L166:
    1459/    1836 :                     ;    }
    1460/    1836 :                     L162:
    1461/    1836 :                     L160:
    1462/    1836 :                     ;  }
    1463/    1836 :                     L155:
    1464/    1836 :                     ;  return 0;
    1465/    1836 : (MACRO)             	ld2z R15
    1466/    183A :                     L84:
    1467/    183A : (MACRO)             	release 8; release room for outgoing arguments
    1468/    1842 : (MACRO)             	popr r14
    1469/    1846 : (MACRO)             	release 8; release room for local variables 
    1470/    184E : (MACRO)             	Cretn
    1471/    184F :                     
    1472/    184F :                     _step_seq:
    1473/    184F : (MACRO)             	reserve 0; save room for local variables
    1474/    184F : (MACRO)             	pushr r7
    1475/    1854 : (MACRO)             	pushr r14
    1476/    1859 : (MACRO)             	reserve 0; save room for outgoing arguments
    1477/    1859 :                     ; void step_seq(word rel_ack_num,byte cp_seq) {
    1478/    1859 :                     ;  i = 4;
    1479/    1859 : (MACRO)             	ldaD R14,4; reg:acon
    1480/    185F : C0 19 0C            	lbr L175
    1481/    1862 :                     L174:
    1482/    1862 :                     ;  while(i>0) {
    1483/    1862 :                     ;    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
    1484/    1862 : (MACRO)             	cpy1 R11,R14
    1485/    1864 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1486/    1867 : (MACRO)             	ld1 R11,'O',R11,(_buffer-1+38)
    1487/    1871 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1488/    1874 : (MACRO)             	alu2 R12,R11,R12,add,adc; ADDU2(r,r)
    1489/    1880 :                     ;    tseq = gPB[TCP_SEQACK_H_P+i-1];
    1490/    1880 : (MACRO)             	cpy1 R11,R14
    1491/    1882 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1492/    1885 : (MACRO)             	ld1 R7,'O',R11,(_buffer-1+42)
    1493/    188F :                     ;    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
    1494/    188F : (MACRO)             	cpy1 R11,R14
    1495/    1891 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1496/    1894 : (MACRO)             	cpy1 R10,R12;LOADU1(reg)
    1497/    1896 : (MACRO)             	st1 R10,'O',R11,(_buffer-1+42); ASGNU1
    1498/    18A0 :                     ;    if (cp_seq)
    1499/    18A0 : (MACRO)             	cpy1 R11,R13
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 26 - 4/25/2013 10:34:28


    1500/    18A2 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1501/    18A5 : (MACRO)             	jzU2 r11,L183; EQ 0
    1502/    18AD :                     ;      gPB[TCP_SEQ_H_P+i-1] = tseq;
    1503/    18AD : (MACRO)             	cpy1 R11,R14
    1504/    18AF : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1505/    18B2 : (MACRO)             	st1 R7,'O',R11,(_buffer-1+38); ASGNU1
    1506/    18BC : C0 18 D4            	lbr L184
    1507/    18BF :                     L183:
    1508/    18BF :                     ;      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
    1509/    18BF : (MACRO)             	cpy1 R11,R14
    1510/    18C1 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1511/    18C4 : (MACRO)             	ldaD R10,0; reg:acon
    1512/    18CA : (MACRO)             	st1 R10,'O',R11,(_buffer-1+38); ASGNU1
    1513/    18D4 :                     L184:
    1514/    18D4 :                     ;    rel_ack_num = rel_ack_num>>8;
    1515/    18D4 : (MACRO)             	shrU2I R12,8
    1516/    1904 :                     ;    i--;
    1517/    1904 : (MACRO)             	cpy1 R11,R14
    1518/    1906 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1519/    1909 : (MACRO)             	decm R11,1
    1520/    190A : (MACRO)             	cpy1 R14,R11;LOADU1(reg)
    1521/    190C :                     ;  }
    1522/    190C :                     L175:
    1523/    190C :                     ;  while(i>0) {
    1524/    190C : (MACRO)             	cpy1 R11,R14
    1525/    190E : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1526/    1911 : (MACRO)             	jnI2I r11,0,lbnf,L174; GT reverse  the subtraction
    1527/    1922 :                     ;}
    1528/    1922 :                     L173:
    1529/    1922 : (MACRO)             	release 0; release room for outgoing arguments
    1530/    1922 : (MACRO)             	popr r14
    1531/    1926 : (MACRO)             	popr r7
    1532/    192A : (MACRO)             	release 0; release room for local variables 
    1533/    192A : (MACRO)             	Cretn
    1534/    192B :                     
    1535/    192B :                     _make_tcphead:
    1536/    192B : (MACRO)             	reserve 6
    1537/    1931 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    1538/    193E : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    1539/    194B : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
    1540/    1957 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
    1541/    1961 :                     ; void make_tcphead(word rel_ack_num,byte cp_seq) {
    1542/    1961 :                     ;  byte i = gPB[TCP_DST_PORT_H_P];
    1543/    1961 : (MACRO)             	ldaD R11,_buffer+36; reg:acon
    1544/    1967 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1545/    1969 : (MACRO)             	st1 R11,'O',sp,(-4+8); ASGNU1
    1546/    1973 :                     ;  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
    1547/    1973 : (MACRO)             	ldaD R11,_buffer+34; reg:acon
    1548/    1979 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1549/    197B : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    1550/    1983 :                     ;  gPB[TCP_SRC_PORT_H_P] = i;
    1551/    1983 : (MACRO)             	ld1 R11,'O',sp,(-4+8)
    1552/    198D : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    1553/    1995 :                     ;  j = gPB[TCP_DST_PORT_L_P];
    1554/    1995 : (MACRO)             	ldaD R11,_buffer+37; reg:acon
    1555/    199B : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1556/    199D : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
    1557/    19A7 :                     ;  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
    1558/    19A7 : (MACRO)             	ldaD R11,_buffer+35; reg:acon
    1559/    19AD : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 27 - 4/25/2013 10:34:28


    1560/    19AF : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    1561/    19B7 :                     ;  gPB[TCP_SRC_PORT_L_P] = j;
    1562/    19B7 : (MACRO)             	ld1 R11,'O',sp,(-3+8)
    1563/    19C1 : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
    1564/    19C9 :                     ;  step_seq(rel_ack_num,cp_seq);
    1565/    19C9 : (MACRO)             	ld2 R12,'O',sp,(0+8); reg:INDIRU2(addr)
    1566/    19D5 : (MACRO)             	ld1 R13,'O',sp,(2+8)
    1567/    19DF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1568/    19E2 : (MACRO)             	Ccall _step_seq
    1569/    19E5 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    1570/    19E5 : (MACRO)             	ldaD R11,0; reg:acon
    1571/    19EB : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    1572/    19F3 :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    1573/    19F3 : (MACRO)             	ldaD R11,0; reg:acon
    1574/    19F9 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    1575/    1A01 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x50;
    1576/    1A01 : (MACRO)             	ldaD R11,80; reg:acon
    1577/    1A07 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    1578/    1A0F :                     ;}
    1579/    1A0F :                     L189:
    1580/    1A0F : (MACRO)             	release 6
    1581/    1A15 : (MACRO)             	Cretn
    1582/    1A16 :                     
    1583/    1A16 :                     _make_tcp_synack_from_syn:
    1584/    1A16 : (MACRO)             	reserve 8
    1585/    1A1E :                     ; void make_tcp_synack_from_syn() {
    1586/    1A1E :                     ;  gPB[IP_TOTLEN_H_P] = 0;
    1587/    1A1E : (MACRO)             	ldaD R11,0; reg:acon
    1588/    1A24 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1589/    1A2C :                     ;  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    1590/    1A2C : (MACRO)             	ldaD R11,44; reg:acon
    1591/    1A32 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1592/    1A3A :                     ;  make_eth_ip();
    1593/    1A3A : (MACRO)             	Ccall _make_eth_ip
    1594/    1A3D :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    1595/    1A3D : (MACRO)             	ldaD R11,18; reg:acon
    1596/    1A43 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1597/    1A4B :                     ;  make_tcphead(1,0);
    1598/    1A4B : (MACRO)             	ldaD R12,1; reg:acon
    1599/    1A51 : (MACRO)             	ld2z R13
    1600/    1A55 : (MACRO)             	Ccall _make_tcphead
    1601/    1A58 :                     ;  gPB[TCP_SEQ_H_P+0] = 0;
    1602/    1A58 : (MACRO)             	ldaD R11,0; reg:acon
    1603/    1A5E : (MACRO)             	st1 R11,'D',(_buffer+38),0; ASGNU1
    1604/    1A66 :                     ;  gPB[TCP_SEQ_H_P+1] = 0;
    1605/    1A66 : (MACRO)             	ldaD R11,0; reg:acon
    1606/    1A6C : (MACRO)             	st1 R11,'D',(_buffer+39),0; ASGNU1
    1607/    1A74 :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    1608/    1A74 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    1609/    1A7A : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1610/    1A7C : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    1611/    1A84 :                     ;  gPB[TCP_SEQ_H_P+3] = 0;
    1612/    1A84 : (MACRO)             	ldaD R11,0; reg:acon
    1613/    1A8A : (MACRO)             	st1 R11,'D',(_buffer+41),0; ASGNU1
    1614/    1A92 :                     ;  seqnum += 3;
    1615/    1A92 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    1616/    1A98 : (MACRO)             	ld1 R10,'D',(_seqnum),0
    1617/    1AA0 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1618/    1AA3 : (MACRO)             	incm R10,3
    1619/    1AA6 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 28 - 4/25/2013 10:34:28


    1620/    1AA8 :                     ;  gPB[TCP_OPTIONS_P] = 2;
    1621/    1AA8 : (MACRO)             	ldaD R11,2; reg:acon
    1622/    1AAE : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    1623/    1AB6 :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    1624/    1AB6 : (MACRO)             	ldaD R11,4; reg:acon
    1625/    1ABC : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    1626/    1AC4 :                     ;  gPB[TCP_OPTIONS_P+2] = 0x05;
    1627/    1AC4 : (MACRO)             	ldaD R11,5; reg:acon
    1628/    1ACA : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    1629/    1AD2 :                     ;  gPB[TCP_OPTIONS_P+3] = 0x0;
    1630/    1AD2 : (MACRO)             	ldaD R11,0; reg:acon
    1631/    1AD8 : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    1632/    1AE0 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60;
    1633/    1AE0 : (MACRO)             	ldaD R11,96; reg:acon
    1634/    1AE6 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    1635/    1AEE :                     ;  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    1636/    1AEE : (MACRO)             	ldaD R11,5; reg:acon
    1637/    1AF4 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    1638/    1AFC :                     ;  gPB[TCP_WIN_SIZE+1] = 0x78;
    1639/    1AFC : (MACRO)             	ldaD R11,120; reg:acon
    1640/    1B02 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    1641/    1B0A :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    1642/    1B0A : (MACRO)             	ldaD R12,50; reg:acon
    1643/    1B10 : (MACRO)             	ldaD R13,26; reg:acon
    1644/    1B16 : (MACRO)             	ldaD R11,32; reg:acon
    1645/    1B1C : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1646/    1B29 : (MACRO)             	ldaD R11,2; reg:acon
    1647/    1B2F : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1648/    1B3C : (MACRO)             	Ccall _fill_checksum
    1649/    1B3F :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    1650/    1B3F : (MACRO)             	ldaD R12,58; reg:acon
    1651/    1B45 : (MACRO)             	Ccall _encpacketSend
    1652/    1B48 :                     ;}
    1653/    1B48 :                     L201:
    1654/    1B48 : (MACRO)             	release 8
    1655/    1B50 : (MACRO)             	Cretn
    1656/    1B51 :                     
    1657/    1B51 :                     _eth_type_is_ip_and_my_ip:
    1658/    1B51 : (MACRO)             	reserve 0; save room for local variables
    1659/    1B51 : (MACRO)             	pushr r14
    1660/    1B56 : (MACRO)             	reserve 6; save room for outgoing arguments
    1661/    1B5C : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1662/    1B69 :                     ; byte eth_type_is_ip_and_my_ip(word len) {
    1663/    1B69 :                     ;  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1664/    1B69 : (MACRO)             	ld2 R11,'O',sp,(0+10); reg:INDIRU2(addr)
    1665/    1B75 : (MACRO)             	jcU2I r11,42,lbnf,L222 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1666/    1B7E : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    1667/    1B86 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1668/    1B89 : (MACRO)             	jneU2I r11,8,L222; NE
    1669/    1B95 : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    1670/    1B9D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1671/    1BA0 : (MACRO)             	jnzU2 r11,L222; NE 0
    1672/    1BA8 : (MACRO)             	ld1 R11,'D',(_buffer+14),0
    1673/    1BB0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1674/    1BB3 : (MACRO)             	jneU2I r11,69,L222; NE
    1675/    1BBF : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    1676/    1BC5 : (MACRO)             	ldaD R13,_myip; reg:acon
    1677/    1BCB : (MACRO)             	ldaD R11,4; reg:acon
    1678/    1BD1 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1679/    1BDE : (MACRO)             	Ccall _memcmp
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 29 - 4/25/2013 10:34:28


    1680/    1BE1 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1681/    1BE5 : (MACRO)             	jnzU2 r11,L222; NE 0
    1682/    1BED : (MACRO)             	ldaD R14,1; reg:acon
    1683/    1BF3 : C0 1B FA            	lbr L223
    1684/    1BF6 :                     L222:
    1685/    1BF6 : (MACRO)             	ld2z R14
    1686/    1BFA :                     L223:
    1687/    1BFA : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    1688/    1BFE : (MACRO)             	cpy1 R15,R11
    1689/    1C00 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1690/    1C03 :                     L216:
    1691/    1C03 : (MACRO)             	release 6; release room for outgoing arguments
    1692/    1C09 : (MACRO)             	popr r14
    1693/    1C0D : (MACRO)             	release 0; release room for local variables 
    1694/    1C0D : (MACRO)             	Cretn
    1695/    1C0E :                     
    1696/    1C0E :                     _eth_type_is_arp_and_my_ip:
    1697/    1C0E : (MACRO)             	reserve 0; save room for local variables
    1698/    1C0E : (MACRO)             	pushr r14
    1699/    1C13 : (MACRO)             	reserve 6; save room for outgoing arguments
    1700/    1C19 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1701/    1C26 :                     ; byte eth_type_is_arp_and_my_ip(word len) {
    1702/    1C26 :                     ;  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1703/    1C26 : (MACRO)             	ld2 R11,'O',sp,(0+10); reg:INDIRU2(addr)
    1704/    1C32 : (MACRO)             	jcU2I r11,41,lbnf,L229 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1705/    1C3B : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    1706/    1C43 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1707/    1C46 : (MACRO)             	jneU2I r11,8,L229; NE
    1708/    1C52 : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    1709/    1C5A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1710/    1C5D : (MACRO)             	jneU2I r11,6,L229; NE
    1711/    1C69 : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    1712/    1C6F : (MACRO)             	ldaD R13,_myip; reg:acon
    1713/    1C75 : (MACRO)             	ldaD R11,4; reg:acon
    1714/    1C7B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1715/    1C88 : (MACRO)             	Ccall _memcmp
    1716/    1C8B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1717/    1C8F : (MACRO)             	jnzU2 r11,L229; NE 0
    1718/    1C97 : (MACRO)             	ldaD R14,1; reg:acon
    1719/    1C9D : C0 1C A4            	lbr L230
    1720/    1CA0 :                     L229:
    1721/    1CA0 : (MACRO)             	ld2z R14
    1722/    1CA4 :                     L230:
    1723/    1CA4 : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    1724/    1CA8 : (MACRO)             	cpy1 R15,R11
    1725/    1CAA : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1726/    1CAD :                     L224:
    1727/    1CAD : (MACRO)             	release 6; release room for outgoing arguments
    1728/    1CB3 : (MACRO)             	popr r14
    1729/    1CB7 : (MACRO)             	release 0; release room for local variables 
    1730/    1CB7 : (MACRO)             	Cretn
    1731/    1CB8 :                     
    1732/    1CB8 :                     _make_arp_answer_from_request:
    1733/    1CB8 : (MACRO)             	reserve 4
    1734/    1CBC :                     ; void make_arp_answer_from_request() {
    1735/    1CBC :                     ;  setMACs(gPB + ETH_SRC_MAC);
    1736/    1CBC : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    1737/    1CC2 : (MACRO)             	Ccall _setMACs
    1738/    1CC5 :                     ;  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1739/    1CC5 : (MACRO)             	ldaD R11,0; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 30 - 4/25/2013 10:34:28


    1740/    1CCB : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
    1741/    1CD3 :                     ;  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    1742/    1CD3 : (MACRO)             	ldaD R11,2; reg:acon
    1743/    1CD9 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    1744/    1CE1 :                     ;  copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1745/    1CE1 : (MACRO)             	ldaD R12,_buffer+32; reg:acon
    1746/    1CE7 : (MACRO)             	ldaD R13,_buffer+22; reg:acon
    1747/    1CED : (MACRO)             	Ccall _copyMac
    1748/    1CF0 :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    1749/    1CF0 : (MACRO)             	ldaD R12,_buffer+22; reg:acon
    1750/    1CF6 : (MACRO)             	ldaD R13,_mymac; reg:acon
    1751/    1CFC : (MACRO)             	Ccall _copyMac
    1752/    1CFF :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1753/    1CFF : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    1754/    1D05 : (MACRO)             	ldaD R13,_buffer+28; reg:acon
    1755/    1D0B : (MACRO)             	Ccall _copyIp
    1756/    1D0E :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    1757/    1D0E : (MACRO)             	ldaD R12,_buffer+28; reg:acon
    1758/    1D14 : (MACRO)             	ldaD R13,_myip; reg:acon
    1759/    1D1A : (MACRO)             	Ccall _copyIp
    1760/    1D1D :                     ;  encpacketSend(42);
    1761/    1D1D : (MACRO)             	ldaD R12,42; reg:acon
    1762/    1D23 : (MACRO)             	Ccall _encpacketSend
    1763/    1D26 :                     ;}
    1764/    1D26 :                     L231:
    1765/    1D26 : (MACRO)             	release 4
    1766/    1D2A : (MACRO)             	Cretn
    1767/    1D2B :                     
    1768/    1D2B :                     _make_echo_reply_from_request:
    1769/    1D2B : (MACRO)             	reserve 4
    1770/    1D2F : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1771/    1D3C :                     ; void make_echo_reply_from_request(word len) {
    1772/    1D3C :                     ;  make_eth_ip();
    1773/    1D3C : (MACRO)             	Ccall _make_eth_ip
    1774/    1D3F :                     ;  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1775/    1D3F : (MACRO)             	ldaD R11,0; reg:acon
    1776/    1D45 : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    1777/    1D4D :                     ;  if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1778/    1D4D : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    1779/    1D55 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1780/    1D58 : (MACRO)             	jnI2I r11,247,lbdf,L243 ;LEI2 247 11 L243; LE is flipped test & subtraction
    1781/    1D69 :                     ;      gPB[ICMP_CHECKSUM_P+1]++;
    1782/    1D69 : (MACRO)             	ldaD R11,_buffer+37; reg:acon
    1783/    1D6F : (MACRO)             	ld1 R10,'D',(_buffer+37),0
    1784/    1D77 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1785/    1D7A : (MACRO)             	incm R10,1
    1786/    1D7B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1787/    1D7D :                     L243:
    1788/    1D7D :                     ;  gPB[ICMP_CHECKSUM_P] += 0x08;
    1789/    1D7D : (MACRO)             	ldaD R11,_buffer+36; reg:acon
    1790/    1D83 : (MACRO)             	ld1 R10,'D',(_buffer+36),0
    1791/    1D8B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1792/    1D8E : (MACRO)             	ldA2 R10,'O',R10,(8); reg:addr
    1793/    1D96 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1794/    1D98 :                     ;  encpacketSend(len);
    1795/    1D98 : (MACRO)             	ld2 R12,'O',sp,(0+6); reg:INDIRU2(addr)
    1796/    1DA4 : (MACRO)             	Ccall _encpacketSend
    1797/    1DA7 :                     ;}
    1798/    1DA7 :                     L241:
    1799/    1DA7 : (MACRO)             	release 4
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 31 - 4/25/2013 10:34:28


    1800/    1DAB : (MACRO)             	Cretn
    1801/    1DAC :                     
    1802/    1DAC :                     _make_tcp_ack_from_any:
    1803/    1DAC : (MACRO)             	reserve 0; save room for local variables
    1804/    1DAC : (MACRO)             	pushr r14
    1805/    1DB1 : (MACRO)             	reserve 8; save room for outgoing arguments
    1806/    1DB9 : (MACRO)             	st2 r12,'O',sp,(12); flag1 
    1807/    1DC6 : (MACRO)             	st2 r13,'O',sp,(14); flag1 
    1808/    1DD3 : (MACRO)             	ld2 R11,'O',sp,(2+12) ;reg:INDIRI2(addr)
    1809/    1DDF : (MACRO)             	st1 R11,'O',sp,(2+12); ASGNU1
    1810/    1DE9 :                     ; void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
    1811/    1DE9 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
    1812/    1DE9 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    1813/    1DF3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1814/    1DF6 : (MACRO)             	alu2I R11,R11,16,ori,ori ;removed copy
    1815/    1DFE : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1816/    1E06 :                     ;  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
    1817/    1E06 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    1818/    1E10 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1819/    1E13 : (MACRO)             	jeqU2I r11,4,L250;EQI2(reg,con)
    1820/    1E1F : (MACRO)             	ld2 R11,'O',sp,(0+12) ;reg:INDIRI2(addr)
    1821/    1E2B : (MACRO)             	jnzU2 r11,L250; NE 0
    1822/    1E33 :                     ;    datlentoack = 1;
    1823/    1E33 : (MACRO)             	ldaD R11,1; reg:acon
    1824/    1E39 : (MACRO)             	st2 R11,'O',sp,(0+12); ASGNI2(addr,reg)*;
    1825/    1E46 :                     L250:
    1826/    1E46 :                     ;  make_tcphead(datlentoack,1); // no options
    1827/    1E46 : (MACRO)             	ld2 R11,'O',sp,(0+12) ;reg:INDIRI2(addr)
    1828/    1E52 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
    1829/    1E56 : (MACRO)             	ldaD R13,1; reg:acon
    1830/    1E5C : (MACRO)             	Ccall _make_tcphead
    1831/    1E5F :                     ;  j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
    1832/    1E5F : (MACRO)             	ldaD R14,40; reg:acon
    1833/    1E65 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    1834/    1E65 : (MACRO)             	cpy2 R11,R14
    1835/    1E69 : (MACRO)             	shrU2I R11,8
    1836/    1E99 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1837/    1EA1 :                     ;  gPB[IP_TOTLEN_L_P] = j;
    1838/    1EA1 : (MACRO)             	cpy1 R11,R14;LOADU1(reg)
    1839/    1EA3 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1840/    1EAB :                     ;  make_eth_ip();
    1841/    1EAB : (MACRO)             	Ccall _make_eth_ip
    1842/    1EAE :                     ;  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
    1843/    1EAE : (MACRO)             	ldaD R11,4; reg:acon
    1844/    1EB4 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    1845/    1EBC :                     ;  gPB[TCP_WIN_SIZE+1] = 0;
    1846/    1EBC : (MACRO)             	ldaD R11,0; reg:acon
    1847/    1EC2 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    1848/    1ECA :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
    1849/    1ECA : (MACRO)             	ldaD R12,50; reg:acon
    1850/    1ED0 : (MACRO)             	ldaD R13,26; reg:acon
    1851/    1ED6 : (MACRO)             	ldaD R11,28; reg:acon
    1852/    1EDC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1853/    1EE9 : (MACRO)             	ldaD R11,2; reg:acon
    1854/    1EEF : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1855/    1EFC : (MACRO)             	Ccall _fill_checksum
    1856/    1EFF :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
    1857/    1EFF : (MACRO)             	ldaD R12,54; reg:acon
    1858/    1F05 : (MACRO)             	Ccall _encpacketSend
    1859/    1F08 :                     ;}
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 32 - 4/25/2013 10:34:28


    1860/    1F08 :                     L248:
    1861/    1F08 : (MACRO)             	release 8; release room for outgoing arguments
    1862/    1F10 : (MACRO)             	popr r14
    1863/    1F14 : (MACRO)             	release 0; release room for local variables 
    1864/    1F14 : (MACRO)             	Cretn
    1865/    1F15 :                     
    1866/    1F15 :                     _make_tcp_ack_with_data_noflags:
    1867/    1F15 : (MACRO)             	reserve 0; save room for local variables
    1868/    1F15 : (MACRO)             	pushr r7
    1869/    1F1A : (MACRO)             	pushr r14
    1870/    1F1F : (MACRO)             	reserve 8; save room for outgoing arguments
    1871/    1F27 : (MACRO)             	cpy2 r14,r12; function(2054) 1
    1872/    1F2B :                     ; void make_tcp_ack_with_data_noflags(word dlen) {
    1873/    1F2B :                     ;  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    1874/    1F2B : (MACRO)             	ldA2 R7,'O',R14,(40); reg:addr
    1875/    1F33 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    1876/    1F33 : (MACRO)             	cpy2 R11,R7
    1877/    1F37 : (MACRO)             	shrU2I R11,8
    1878/    1F67 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1879/    1F6F :                     ;  gPB[IP_TOTLEN_L_P] = j;
    1880/    1F6F : (MACRO)             	cpy1 R11,R7;LOADU1(reg)
    1881/    1F71 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1882/    1F79 :                     ;  fill_ip_hdr_checksum();
    1883/    1F79 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    1884/    1F7C :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    1885/    1F7C : (MACRO)             	ldaD R11,0; reg:acon
    1886/    1F82 : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    1887/    1F8A :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    1888/    1F8A : (MACRO)             	ldaD R11,0; reg:acon
    1889/    1F90 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    1890/    1F98 :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    1891/    1F98 : (MACRO)             	ldaD R12,50; reg:acon
    1892/    1F9E : (MACRO)             	ldaD R13,26; reg:acon
    1893/    1FA4 : (MACRO)             	ldA2 R11,'O',R14,(28); reg:addr
    1894/    1FAC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1895/    1FB9 : (MACRO)             	ldaD R11,2; reg:acon
    1896/    1FBF : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1897/    1FCC : (MACRO)             	Ccall _fill_checksum
    1898/    1FCF :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
    1899/    1FCF : (MACRO)             	ldA2 R11,'O',R14,(40); reg:addr
    1900/    1FD7 : (MACRO)             	ldA2 R12,'O',R11,(14); reg:addr
    1901/    1FDF : (MACRO)             	Ccall _encpacketSend
    1902/    1FE2 :                     ;}
    1903/    1FE2 :                     L256:
    1904/    1FE2 : (MACRO)             	release 8; release room for outgoing arguments
    1905/    1FEA : (MACRO)             	popr r14
    1906/    1FEE : (MACRO)             	popr r7
    1907/    1FF2 : (MACRO)             	release 0; release room for local variables 
    1908/    1FF2 : (MACRO)             	Cretn
    1909/    1FF3 :                     
    1910/    1FF3 :                     _get_tcp_data_len:
    1911/    1FF3 : (MACRO)             	reserve 0; save room for local variables
    1912/    1FF3 : (MACRO)             	pushr r14
    1913/    1FF8 : (MACRO)             	reserve 0; save room for outgoing arguments
    1914/    1FF8 :                     ; word get_tcp_data_len() {
    1915/    1FF8 :                     ;  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    1916/    1FF8 : (MACRO)             	ld1 R11,'D',(_buffer+16),0
    1917/    2000 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1918/    2003 : (MACRO)             	shl2I R11,8
    1919/    2033 : (MACRO)             	ld1 R10,'D',(_buffer+17),0
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 33 - 4/25/2013 10:34:28


    1920/    203B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1921/    203E : (MACRO)             	alu2 R14,R11,R10,or,or
    1922/    204A :                     ;  i -= IP_HEADER_LEN;
    1923/    204A : (MACRO)             	alu2I R14,R14,20,smi,smbi
    1924/    2052 :                     ;  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1925/    2052 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1926/    205A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1927/    205D : (MACRO)             	shrI2I R11,4
    1928/    207D : (MACRO)             	shl2I R11,2
    1929/    2089 : (MACRO)             	alu2 R14,R14,R11,sm,smb
    1930/    2095 :                     ;  if (i<=0)
    1931/    2095 : (MACRO)             	jnI2I r14,0,lbnf,L265; GT reverse  the subtraction
    1932/    20A6 :                     ;    i = 0;
    1933/    20A6 : (MACRO)             	ld2z R14
    1934/    20AA :                     L265:
    1935/    20AA :                     ;  return (word)i;
    1936/    20AA : (MACRO)             	cpy2 R15,R14 ;LOADU2(reg)*
    1937/    20AE :                     L261:
    1938/    20AE : (MACRO)             	release 0; release room for outgoing arguments
    1939/    20AE : (MACRO)             	popr r14
    1940/    20B2 : (MACRO)             	release 0; release room for local variables 
    1941/    20B2 : (MACRO)             	Cretn
    1942/    20B3 :                     
    1943/    20B3 :                     _check_ip_message_is_from:
    1944/    20B3 : (MACRO)             	reserve 0; save room for local variables
    1945/    20B3 : (MACRO)             	pushr r14
    1946/    20B8 : (MACRO)             	reserve 6; save room for outgoing arguments
    1947/    20BE : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1948/    20CB :                     ; byte check_ip_message_is_from(const byte *ip) {
    1949/    20CB :                     ;  return memcmp(gPB + IP_SRC_P, ip, 4) == 0;
    1950/    20CB : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    1951/    20D1 : (MACRO)             	ld2 R13,'O',sp,(0+10);reg:  INDIRP2(addr)
    1952/    20DD : (MACRO)             	ldaD R11,4; reg:acon
    1953/    20E3 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1954/    20F0 : (MACRO)             	Ccall _memcmp
    1955/    20F3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1956/    20F7 : (MACRO)             	jnzU2 r11,L270; NE 0
    1957/    20FF : (MACRO)             	ldaD R14,1; reg:acon
    1958/    2105 : C0 21 0C            	lbr L271
    1959/    2108 :                     L270:
    1960/    2108 : (MACRO)             	ld2z R14
    1961/    210C :                     L271:
    1962/    210C : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    1963/    2110 : (MACRO)             	cpy1 R15,R11
    1964/    2112 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1965/    2115 :                     L267:
    1966/    2115 : (MACRO)             	release 6; release room for outgoing arguments
    1967/    211B : (MACRO)             	popr r14
    1968/    211F : (MACRO)             	release 0; release room for local variables 
    1969/    211F : (MACRO)             	Cretn
    1970/    2120 :                     
    1971/    2120 :                     _fill_checksum:
    1972/    2120 : (MACRO)             	reserve 6; save room for local variables
    1973/    2126 : (MACRO)             	pushr r0
    1974/    212B : (MACRO)             	pushr r1
    1975/    2130 : (MACRO)             	pushr r7
    1976/    2135 : (MACRO)             	pushr r14
    1977/    213A : (MACRO)             	reserve 0; save room for outgoing arguments
    1978/    213A : (MACRO)             	ld2 R14,'O',sp,(4+16); reg:INDIRU2(addr)
    1979/    2146 : (MACRO)             	ld2 R11,'O',sp,(6+16) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 34 - 4/25/2013 10:34:28


    1980/    2152 : (MACRO)             	st1 R11,'O',sp,(6+16); ASGNU1
    1981/    215C :                     ; void fill_checksum(byte dest, byte off, word len,byte type) {
    1982/    215C :                     ;  const byte* ptr = gPB + off;
    1983/    215C : (MACRO)             	cpy1 R11,R13
    1984/    215E : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1985/    2161 : (MACRO)             	ldA2 R7,'O',R11,(_buffer); reg:addr
    1986/    2169 :                     ; long sum = type==1 ? IP_PROTO_UDP_V+len-8 :
    1987/    2169 : (MACRO)             	ld1 R11,'O',sp,(6+16)
    1988/    2173 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1989/    2176 : (MACRO)             	jneU2I r11,1,L275; NE
    1990/    2182 : (MACRO)             	ldA2 R11,'O',R14,(17); reg:addr
    1991/    218A : (MACRO)             	alu2I R11,R11,8,smi,smbi
    1992/    2192 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNU2(addr,reg)*
    1993/    219F : C0 22 05            	lbr L276
    1994/    21A2 :                     L275:
    1995/    21A2 : (MACRO)             	ld1 R11,'O',sp,(6+16)
    1996/    21AC : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1997/    21AF : (MACRO)             	jneU2I r11,2,L277; NE
    1998/    21BB : (MACRO)             	ldA2 R11,'O',R14,(6); reg:addr
    1999/    21C3 : (MACRO)             	alu2I R11,R11,8,smi,smbi
    2000/    21CB : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)*
    2001/    21D8 : C0 21 EC            	lbr L278
    2002/    21DB :                     L277:
    2003/    21DB : (MACRO)             	ld2z R11
    2004/    21DF : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)*
    2005/    21EC :                     L278:
    2006/    21EC : (MACRO)             	ld2 R11,'O',sp,(-8+16); reg:INDIRU2(addr)
    2007/    21F8 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNU2(addr,reg)*
    2008/    2205 :                     L276:
    2009/    2205 : (MACRO)             	ld2 RL0,'O',sp,(-6+16)
    2010/    2211 : (MACRO)             	zext4 RL0 ;CVUI4: widen unsigned int to signed long (zero extend)
    2011/    2215 : C0 22 EC            	lbr L280
    2012/    2218 :                     L279:
    2013/    2218 :                     ;  while(len >1) {
    2014/    2218 :                     ;    sum += (word) (((unsigned long)*ptr<<8)|*(ptr+1));
    2015/    2218 : (MACRO)             	ld1 R11,'O',R7,0
    2016/    2222 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2017/    2225 : (MACRO)             	cpy2 RL10,R11
    2018/    2229 : (MACRO)             	sext4 RL10; CVIU4
    2019/    2234 : (MACRO)             	shl4I RL10,8; LSHU4(reg,con)
    2020/    2294 : (MACRO)             	ld1 R9,'O',R7,(1)
    2021/    229E : (MACRO)             	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
    2022/    22A1 : (MACRO)             	cpy2 RL8,R9
    2023/    22A5 : (MACRO)             	sext4 RL8; CVIU4
    2024/    22B0 : (MACRO)             	alu4 RL10,RL10,RL8,or,or
    2025/    22C6 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
    2026/    22CA : (MACRO)             	cpy2 RL10,R11
    2027/    22CE : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2028/    22D2 : (MACRO)             	alu4 RL0,RL0,RL10,add,adc
    2029/    22E8 :                     ;    ptr+=2;
    2030/    22E8 : (MACRO)             	incm R7,2
    2031/    22EA :                     ;    len-=2;
    2032/    22EA : (MACRO)             	decm R14,2
    2033/    22EC :                     ;  }
    2034/    22EC :                     L280:
    2035/    22EC :                     ;  while(len >1) {
    2036/    22EC : (MACRO)             	jnU2I r14,1,lbnf,L279; GT reverse the subtraction
    2037/    22F5 :                     ;  if (len)
    2038/    22F5 : (MACRO)             	jeqU2I r14,0,L285;EQU2(reg,con)
    2039/    2301 :                     ;    sum += ((unsigned long)*ptr)<<8;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 35 - 4/25/2013 10:34:28


    2040/    2301 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
    2041/    2309 : (MACRO)             	ld1 R9,'O',R7,0
    2042/    2313 : (MACRO)             	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
    2043/    2316 : (MACRO)             	cpy2 RL8,R9
    2044/    231A : (MACRO)             	sext4 RL8; CVIU4
    2045/    2325 : (MACRO)             	shl4I RL8,8; LSHU4(reg,con)
    2046/    2385 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    2047/    239B : (MACRO)             	cpy4 RL0,RL10; LOADI4*
    2048/    23A3 : C0 24 B0            	lbr L285
    2049/    23A6 :                     L284:
    2050/    23A6 :                     ;    sum = (word) sum + (sum >> 16);
    2051/    23A6 : (MACRO)             	cpy2 R11,RL0 ;LOADU2(reg)*
    2052/    23AA : (MACRO)             	cpy2 RL10,R11
    2053/    23AE : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2054/    23B2 : (MACRO)             	cpy4 RL8,RL0
    2055/    23BA : (MACRO)             	shrI4I RL8,16
    2056/    249A : (MACRO)             	alu4 RL0,RL10,RL8,add,adc
    2057/    24B0 :                     L285:
    2058/    24B0 :                     ;  while (sum>>16)
    2059/    24B0 : (MACRO)             	cpy4 RL10,RL0
    2060/    24B8 : (MACRO)             	shrI4I RL10,16
    2061/    2598 : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
    2062/    25A4 : (MACRO)             	jneU4 rL10,rL8,L284; NE
    2063/    25CB :                     ;  ck = ~ (word) sum;
    2064/    25CB : (MACRO)             	cpy2 R11,RL0 ;LOADU2(reg)*
    2065/    25CF : (MACRO)             	alu2I R11,R11,-1,xri,xri; was?	cpy2 R11,R11+xor2I R11,-1
    2066/    25D7 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
    2067/    25E4 :                     ;  gPB[dest] = ck>>8;
    2068/    25E4 : (MACRO)             	cpy1 R11,R12
    2069/    25E6 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2070/    25E9 : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
    2071/    25F5 : (MACRO)             	shrU2I R10,8
    2072/    2625 : (MACRO)             	st1 R10,'O',R11,(_buffer); ASGNU1
    2073/    262F :                     ;  gPB[dest+1] = ck;
    2074/    262F : (MACRO)             	cpy1 R11,R12
    2075/    2631 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2076/    2634 : (MACRO)             	ld2 R10,'O',sp,(-4+16); reg:INDIRU2(addr)
    2077/    2640 : (MACRO)             	st1 R10,'O',R11,(_buffer+1); ASGNU1
    2078/    264A :                     ;}
    2079/    264A :                     L272:
    2080/    264A : (MACRO)             	release 0; release room for outgoing arguments
    2081/    264A : (MACRO)             	popr r14
    2082/    264E : (MACRO)             	popr r7
    2083/    2652 : (MACRO)             	popr r1
    2084/    2656 : (MACRO)             	popr r0
    2085/    265A : (MACRO)             	release 6; release room for local variables 
    2086/    2660 : (MACRO)             	Cretn
    2087/    2661 :                     
    2088/    2661 :                     _fill_ip_hdr_checksum:
    2089/    2661 : (MACRO)             	reserve 8
    2090/    2669 :                     ; void fill_ip_hdr_checksum() {
    2091/    2669 :                     ;  gPB[IP_CHECKSUM_P] = 0;
    2092/    2669 : (MACRO)             	ldaD R11,0; reg:acon
    2093/    266F : (MACRO)             	st1 R11,'D',(_buffer+24),0; ASGNU1
    2094/    2677 :                     ;  gPB[IP_CHECKSUM_P+1] = 0;
    2095/    2677 : (MACRO)             	ldaD R11,0; reg:acon
    2096/    267D : (MACRO)             	st1 R11,'D',(_buffer+25),0; ASGNU1
    2097/    2685 :                     ;  gPB[IP_FLAGS_P] = 0x40; // don't fragment
    2098/    2685 : (MACRO)             	ldaD R11,64; reg:acon
    2099/    268B : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 36 - 4/25/2013 10:34:28


    2100/    2693 :                     ;  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
    2101/    2693 : (MACRO)             	ldaD R11,0; reg:acon
    2102/    2699 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    2103/    26A1 :                     ;  gPB[IP_TTL_P] = 64; // ttl
    2104/    26A1 : (MACRO)             	ldaD R11,64; reg:acon
    2105/    26A7 : (MACRO)             	st1 R11,'D',(_buffer+22),0; ASGNU1
    2106/    26AF :                     ;  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
    2107/    26AF : (MACRO)             	ldaD R12,24; reg:acon
    2108/    26B5 : (MACRO)             	ldaD R13,14; reg:acon
    2109/    26BB : (MACRO)             	ldaD R11,20; reg:acon
    2110/    26C1 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2111/    26CE : (MACRO)             	ld2z R11
    2112/    26D2 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2113/    26DF : (MACRO)             	Ccall _fill_checksum
    2114/    26E2 :                     ;}
    2115/    26E2 :                     L288:
    2116/    26E2 : (MACRO)             	release 8
    2117/    26EA : (MACRO)             	Cretn
    2118/    26EB :                     
    2119/    26EB :                     _make_eth_ip:
    2120/    26EB : (MACRO)             	reserve 4
    2121/    26EF :                     ; void make_eth_ip() {
    2122/    26EF :                     ;  setMACs(gPB + ETH_SRC_MAC);
    2123/    26EF : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    2124/    26F5 : (MACRO)             	Ccall _setMACs
    2125/    26F8 :                     ;  copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
    2126/    26F8 : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    2127/    26FE : (MACRO)             	ldaD R13,_buffer+26; reg:acon
    2128/    2704 : (MACRO)             	Ccall _copyIp
    2129/    2707 :                     ;  copyIp(gPB + IP_SRC_P, myip);
    2130/    2707 : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    2131/    270D : (MACRO)             	ldaD R13,_myip; reg:acon
    2132/    2713 : (MACRO)             	Ccall _copyIp
    2133/    2716 :                     ;  fill_ip_hdr_checksum();
    2134/    2716 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2135/    2719 :                     ;}
    2136/    2719 :                     L294:
    2137/    2719 : (MACRO)             	release 4
    2138/    271D : (MACRO)             	Cretn
    2139/    271E :                     
    2140/    271E :                     _client_store_gw_mac:
    2141/    271E : (MACRO)             	reserve 6
    2142/    2724 :                     ; byte client_store_gw_mac() {
    2143/    2724 :                     ;  if (memcmp(gPB + ETH_ARP_SRC_IP_P, gwip, 4) != 0)
    2144/    2724 : (MACRO)             	ldaD R12,_buffer+28; reg:acon
    2145/    272A : (MACRO)             	ldaD R13,_gwip; reg:acon
    2146/    2730 : (MACRO)             	ldaD R11,4; reg:acon
    2147/    2736 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2148/    2743 : (MACRO)             	Ccall _memcmp
    2149/    2746 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    2150/    274A : (MACRO)             	jzU2 r11,L300; EQ 0
    2151/    2752 :                     ;    return 0;
    2152/    2752 : (MACRO)             	ld2z R15
    2153/    2756 : C0 27 6E            	lbr L299
    2154/    2759 :                     L300:
    2155/    2759 :                     ;  copyMac(gwmacaddr, gPB + ETH_ARP_SRC_MAC_P);
    2156/    2759 : (MACRO)             	ldaD R12,_gwmacaddr; reg:acon
    2157/    275F : (MACRO)             	ldaD R13,_buffer+22; reg:acon
    2158/    2765 : (MACRO)             	Ccall _copyMac
    2159/    2768 :                     ;  return 1;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 37 - 4/25/2013 10:34:28


    2160/    2768 : (MACRO)             	ldaD R15,1; reg:acon
    2161/    276E :                     L299:
    2162/    276E : (MACRO)             	release 6
    2163/    2774 : (MACRO)             	Cretn
    2164/    2775 :                     
    2165/    2775 :                     _setMACs:
    2166/    2775 : (MACRO)             	reserve 4
    2167/    2779 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2168/    2786 :                     ; void setMACs (const byte *mac) {
    2169/    2786 :                     ;  copyMac(gPB + ETH_DST_MAC, mac);
    2170/    2786 : (MACRO)             	ldaD R12,_buffer; reg:acon
    2171/    278C : (MACRO)             	ld2 R13,'O',sp,(0+6);reg:  INDIRP2(addr)
    2172/    2798 : (MACRO)             	Ccall _copyMac
    2173/    279B :                     ;  copyMac(gPB + ETH_SRC_MAC, mymac);
    2174/    279B : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    2175/    27A1 : (MACRO)             	ldaD R13,_mymac; reg:acon
    2176/    27A7 : (MACRO)             	Ccall _copyMac
    2177/    27AA :                     ;}
    2178/    27AA :                     L304:
    2179/    27AA : (MACRO)             	release 4
    2180/    27AE : (MACRO)             	Cretn
    2181/    27AF :                     
    2182/    27AF :                     _client_arp_whohas:
    2183/    27AF : (MACRO)             	reserve 6
    2184/    27B5 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2185/    27C2 :                     ; void client_arp_whohas(byte *ip_we_search) {
    2186/    27C2 :                     ;  setMACs(allOnes);
    2187/    27C2 : (MACRO)             	ldaD R12,_allOnes; reg:acon
    2188/    27C8 : (MACRO)             	Ccall _setMACs
    2189/    27CB :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    2190/    27CB : (MACRO)             	ldaD R11,8; reg:acon
    2191/    27D1 : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2192/    27D9 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    2193/    27D9 : (MACRO)             	ldaD R11,6; reg:acon
    2194/    27DF : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2195/    27E7 :                     ;  memcpy(gPB + ETH_ARP_P,arpreqhdr,8);
    2196/    27E7 : (MACRO)             	ldaD R12,_buffer+14; reg:acon
    2197/    27ED : (MACRO)             	ldaD R13,_arpreqhdr; reg:acon
    2198/    27F3 : (MACRO)             	ldaD R11,8; reg:acon
    2199/    27F9 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2200/    2806 : (MACRO)             	Ccall _memcpy
    2201/    2809 :                     ;  memset(gPB + ETH_ARP_DST_MAC_P, 0, 6);
    2202/    2809 : (MACRO)             	ldaD R12,_buffer+32; reg:acon
    2203/    280F : (MACRO)             	ld2z R13
    2204/    2813 : (MACRO)             	ldaD R11,6; reg:acon
    2205/    2819 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2206/    2826 : (MACRO)             	Ccall _memset
    2207/    2829 :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    2208/    2829 : (MACRO)             	ldaD R12,_buffer+22; reg:acon
    2209/    282F : (MACRO)             	ldaD R13,_mymac; reg:acon
    2210/    2835 : (MACRO)             	Ccall _copyMac
    2211/    2838 :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
    2212/    2838 : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    2213/    283E : (MACRO)             	ld2 R13,'O',sp,(0+8);reg:  INDIRP2(addr)
    2214/    284A : (MACRO)             	Ccall _copyIp
    2215/    284D :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    2216/    284D : (MACRO)             	ldaD R12,_buffer+28; reg:acon
    2217/    2853 : (MACRO)             	ldaD R13,_myip; reg:acon
    2218/    2859 : (MACRO)             	Ccall _copyIp
    2219/    285C :                     ;  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 38 - 4/25/2013 10:34:28


    2220/    285C : (MACRO)             	ldaD R11,_waitgwmac; reg:acon
    2221/    2862 : (MACRO)             	ld1 R10,'D',(_waitgwmac),0
    2222/    286A : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2223/    286D : (MACRO)             	alu2I R10,R10,8,ori,ori ;removed copy
    2224/    2875 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2225/    2877 :                     ;  encpacketSend(42);
    2226/    2877 : (MACRO)             	ldaD R12,42; reg:acon
    2227/    287D : (MACRO)             	Ccall _encpacketSend
    2228/    2880 :                     ;}
    2229/    2880 :                     L306:
    2230/    2880 : (MACRO)             	release 6
    2231/    2886 : (MACRO)             	Cretn
    2232/    2887 :                     
    2233/    2887 :                     _client_syn:
    2234/    2887 : (MACRO)             	reserve 8
    2235/    288F : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2236/    289C : (MACRO)             	st2 r13,'O',sp,(12); flag1 
    2237/    28A9 : (MACRO)             	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
    2238/    28B5 : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
    2239/    28BF : (MACRO)             	ld2 R11,'O',sp,(2+10) ;reg:INDIRI2(addr)
    2240/    28CB : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
    2241/    28D5 : (MACRO)             	ld2 R11,'O',sp,(4+10) ;reg:INDIRI2(addr)
    2242/    28E1 : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
    2243/    28EB :                     ; void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
    2244/    28EB :                     ;  setMACandIPs(gwmacaddr, hisip);
    2245/    28EB : (MACRO)             	ldaD R12,_gwmacaddr; reg:acon
    2246/    28F1 : (MACRO)             	ldaD R13,_hisip; reg:acon
    2247/    28F7 : (MACRO)             	Ccall _setMACandIPs
    2248/    28FA :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    2249/    28FA : (MACRO)             	ldaD R11,8; reg:acon
    2250/    2900 : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2251/    2908 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    2252/    2908 : (MACRO)             	ldaD R11,0; reg:acon
    2253/    290E : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2254/    2916 :                     ;  memcpy(gPB + IP_P,iphdr,9);
    2255/    2916 : (MACRO)             	ldaD R12,_buffer+14; reg:acon
    2256/    291C : (MACRO)             	ldaD R13,_iphdr; reg:acon
    2257/    2922 : (MACRO)             	ldaD R11,9; reg:acon
    2258/    2928 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2259/    2935 : (MACRO)             	Ccall _memcpy
    2260/    2938 :                     ;  gPB[IP_TOTLEN_L_P] = 44; // good for syn
    2261/    2938 : (MACRO)             	ldaD R11,44; reg:acon
    2262/    293E : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2263/    2946 :                     ;  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    2264/    2946 : (MACRO)             	ldaD R11,6; reg:acon
    2265/    294C : (MACRO)             	st1 R11,'D',(_buffer+23),0; ASGNU1
    2266/    2954 :                     ;  fill_ip_hdr_checksum();
    2267/    2954 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2268/    2957 :                     ;  gPB[TCP_DST_PORT_H_P] = dstport_h;
    2269/    2957 : (MACRO)             	ld1 R11,'O',sp,(2+10)
    2270/    2961 : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    2271/    2969 :                     ;  gPB[TCP_DST_PORT_L_P] = dstport_l;
    2272/    2969 : (MACRO)             	ld1 R11,'O',sp,(4+10)
    2273/    2973 : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    2274/    297B :                     ;  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    2275/    297B : (MACRO)             	ldaD R11,11; reg:acon
    2276/    2981 : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    2277/    2989 :                     ;  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    2278/    2989 : (MACRO)             	ld1 R11,'O',sp,(0+10)
    2279/    2993 : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 39 - 4/25/2013 10:34:28


    2280/    299B :                     ;  memset(gPB + TCP_SEQ_H_P, 0, 8);
    2281/    299B : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    2282/    29A1 : (MACRO)             	ld2z R13
    2283/    29A5 : (MACRO)             	ldaD R11,8; reg:acon
    2284/    29AB : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2285/    29B8 : (MACRO)             	Ccall _memset
    2286/    29BB :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    2287/    29BB : (MACRO)             	ldaD R11,_seqnum; reg:acon
    2288/    29C1 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2289/    29C3 : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    2290/    29CB :                     ;  seqnum += 3;
    2291/    29CB : (MACRO)             	ldaD R11,_seqnum; reg:acon
    2292/    29D1 : (MACRO)             	ld1 R10,'D',(_seqnum),0
    2293/    29D9 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2294/    29DC : (MACRO)             	incm R10,3
    2295/    29DF : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2296/    29E1 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    2297/    29E1 : (MACRO)             	ldaD R11,96; reg:acon
    2298/    29E7 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    2299/    29EF :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    2300/    29EF : (MACRO)             	ldaD R11,2; reg:acon
    2301/    29F5 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    2302/    29FD :                     ;  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    2303/    29FD : (MACRO)             	ldaD R11,3; reg:acon
    2304/    2A03 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    2305/    2A0B :                     ;  gPB[TCP_WIN_SIZE+1] = 0x0;
    2306/    2A0B : (MACRO)             	ldaD R11,0; reg:acon
    2307/    2A11 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    2308/    2A19 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    2309/    2A19 : (MACRO)             	ldaD R11,0; reg:acon
    2310/    2A1F : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    2311/    2A27 :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    2312/    2A27 : (MACRO)             	ldaD R11,0; reg:acon
    2313/    2A2D : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    2314/    2A35 :                     ;  gPB[TCP_CHECKSUM_L_P+1] = 0;
    2315/    2A35 : (MACRO)             	ldaD R11,0; reg:acon
    2316/    2A3B : (MACRO)             	st1 R11,'D',(_buffer+52),0; ASGNU1
    2317/    2A43 :                     ;  gPB[TCP_CHECKSUM_L_P+2] = 0;
    2318/    2A43 : (MACRO)             	ldaD R11,0; reg:acon
    2319/    2A49 : (MACRO)             	st1 R11,'D',(_buffer+53),0; ASGNU1
    2320/    2A51 :                     ;  gPB[TCP_OPTIONS_P] = 2;
    2321/    2A51 : (MACRO)             	ldaD R11,2; reg:acon
    2322/    2A57 : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    2323/    2A5F :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    2324/    2A5F : (MACRO)             	ldaD R11,4; reg:acon
    2325/    2A65 : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    2326/    2A6D :                     ;  gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    2327/    2A6D : (MACRO)             	ldaD R11,2; reg:acon
    2328/    2A73 : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    2329/    2A7B :                     ;  gPB[TCP_OPTIONS_P+3] = (byte) CLIENTMSS;
    2330/    2A7B : (MACRO)             	ldaD R11,550; reg:acon
    2331/    2A81 : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    2332/    2A89 :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    2333/    2A89 : (MACRO)             	ldaD R12,50; reg:acon
    2334/    2A8F : (MACRO)             	ldaD R13,26; reg:acon
    2335/    2A95 : (MACRO)             	ldaD R11,32; reg:acon
    2336/    2A9B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2337/    2AA8 : (MACRO)             	ldaD R11,2; reg:acon
    2338/    2AAE : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2339/    2ABB : (MACRO)             	Ccall _fill_checksum
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 40 - 4/25/2013 10:34:28


    2340/    2ABE :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    2341/    2ABE : (MACRO)             	ldaD R12,58; reg:acon
    2342/    2AC4 : (MACRO)             	Ccall _encpacketSend
    2343/    2AC7 :                     ;}
    2344/    2AC7 :                     L314:
    2345/    2AC7 : (MACRO)             	release 8
    2346/    2ACF : (MACRO)             	Cretn
    2347/    2AD0 :                     
    2348/    2AD0 :                     _setMACandIPs:
    2349/    2AD0 : (MACRO)             	reserve 4
    2350/    2AD4 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2351/    2AE1 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
    2352/    2AEE :                     ; void setMACandIPs (const byte *mac, const byte *dst) {
    2353/    2AEE :                     ;  setMACs(mac);
    2354/    2AEE : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
    2355/    2AFA : (MACRO)             	Ccall _setMACs
    2356/    2AFD :                     ;  copyIp(gPB + IP_DST_P, dst);
    2357/    2AFD : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    2358/    2B03 : (MACRO)             	ld2 R13,'O',sp,(2+6);reg:  INDIRP2(addr)
    2359/    2B0F : (MACRO)             	Ccall _copyIp
    2360/    2B12 :                     ;  copyIp(gPB + IP_SRC_P, myip);
    2361/    2B12 : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    2362/    2B18 : (MACRO)             	ldaD R13,_myip; reg:acon
    2363/    2B1E : (MACRO)             	Ccall _copyIp
    2364/    2B21 :                     ;}
    2365/    2B21 :                     L338:
    2366/    2B21 : (MACRO)             	release 4
    2367/    2B25 : (MACRO)             	Cretn
    2368/    2B26 :                     
    2369/    2B26 :                     _hexDump:
    2370/    2B26 : (MACRO)             	reserve 0; save room for local variables
    2371/    2B26 : (MACRO)             	pushr r0
    2372/    2B2B : (MACRO)             	pushr r1
    2373/    2B30 : (MACRO)             	pushr r7
    2374/    2B35 : (MACRO)             	pushr r14
    2375/    2B3A : (MACRO)             	reserve 4; save room for outgoing arguments
    2376/    2B3E : (MACRO)             	cpy2 r14,r12; function(2055) 1
    2377/    2B42 : (MACRO)             	cpy2 r7,r13; function(2054) 1
    2378/    2B46 :                     ;void hexDump(uint8_t *data, uint16_t len) {
    2379/    2B46 :                     ;  uint8_t cnt = 0;
    2380/    2B46 : (MACRO)             	ldaD R1,0; reg:acon
    2381/    2B4C :                     ;  printf("dumping %d\n",len);
    2382/    2B4C : (MACRO)             	ldaD R12,L342; reg:acon
    2383/    2B52 : (MACRO)             	cpy2 R13,R7 ;LOADU2(reg)*
    2384/    2B56 : (MACRO)             	Ccall _printf
    2385/    2B59 :                     ;  for (i = 0; i < len; i++) {
    2386/    2B59 : (MACRO)             	ld2z R0
    2387/    2B5D : C0 2B BF            	lbr L346
    2388/    2B60 :                     L343:
    2389/    2B60 :                     ;    putx(data[i]);
    2390/    2B60 : (MACRO)             	alu2 R11,R0,R14,add,adc
    2391/    2B6C : (MACRO)             	ld1 R12,'O',R11,0
    2392/    2B76 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    2393/    2B79 : (MACRO)             	Ccall _putx
    2394/    2B7C :                     ;    cnt++;
    2395/    2B7C : (MACRO)             	cpy1 R11,R1
    2396/    2B7E : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2397/    2B81 : (MACRO)             	incm R11,1
    2398/    2B82 : (MACRO)             	cpy1 R1,R11;LOADU1(reg)
    2399/    2B84 :                     ;    if (cnt == 8) {
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 41 - 4/25/2013 10:34:28


    2400/    2B84 : (MACRO)             	cpy1 R11,R1
    2401/    2B86 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2402/    2B89 : (MACRO)             	jneU2I r11,8,L347; NE
    2403/    2B95 :                     ;      putc(' ');
    2404/    2B95 : (MACRO)             	ldaD R12,32; reg:acon
    2405/    2B9B : (MACRO)             	Ccall _putc
    2406/    2B9E :                     ;    }
    2407/    2B9E :                     L347:
    2408/    2B9E :                     ;    if (cnt == 16) {
    2409/    2B9E : (MACRO)             	cpy1 R11,R1
    2410/    2BA0 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2411/    2BA3 : (MACRO)             	jneU2I r11,16,L349; NE
    2412/    2BAF :                     ;      printf("\n");
    2413/    2BAF : (MACRO)             	ldaD R12,L351; reg:acon
    2414/    2BB5 : (MACRO)             	Ccall _printf
    2415/    2BB8 :                     ;      cnt = 0;
    2416/    2BB8 : (MACRO)             	ldaD R1,0; reg:acon
    2417/    2BBE :                     ;    }
    2418/    2BBE :                     L349:
    2419/    2BBE :                     ;  }
    2420/    2BBE :                     L344:
    2421/    2BBE :                     ;  for (i = 0; i < len; i++) {
    2422/    2BBE : (MACRO)             	incm R0,1
    2423/    2BBF :                     L346:
    2424/    2BBF : (MACRO)             	cpy2 R11,R0 ;LOADU2(reg)*
    2425/    2BC3 : (MACRO)             	jcU2 r11,r7,lbnf,L343; LT=lbnf i.e. subtract B from A and jump if borrow 
    2426/    2BD0 :                     ;  if (cnt != 0) {
    2427/    2BD0 : (MACRO)             	cpy1 R11,R1
    2428/    2BD2 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2429/    2BD5 : (MACRO)             	jzU2 r11,L352; EQ 0
    2430/    2BDD :                     ;    printf("\n");
    2431/    2BDD : (MACRO)             	ldaD R12,L351; reg:acon
    2432/    2BE3 : (MACRO)             	Ccall _printf
    2433/    2BE6 :                     ;  }
    2434/    2BE6 :                     L352:
    2435/    2BE6 :                     ;}
    2436/    2BE6 :                     L341:
    2437/    2BE6 : (MACRO)             	release 4; release room for outgoing arguments
    2438/    2BEA : (MACRO)             	popr r14
    2439/    2BEE : (MACRO)             	popr r7
    2440/    2BF2 : (MACRO)             	popr r1
    2441/    2BF6 : (MACRO)             	popr r0
    2442/    2BFA : (MACRO)             	release 0; release room for local variables 
    2443/    2BFA : (MACRO)             	Cretn
    2444/    2BFB :                     
    2445/    2BFB :                     _copyIp:
    2446/    2BFB : (MACRO)             	reserve 6
    2447/    2C01 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2448/    2C0E : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    2449/    2C1B :                     ;void copyIp (byte *dst, const byte *src) {
    2450/    2C1B :                     ;    memcpy(dst, src, 4);
    2451/    2C1B : (MACRO)             	ld2 R12,'O',sp,(0+8);reg:  INDIRP2(addr)
    2452/    2C27 : (MACRO)             	ld2 R13,'O',sp,(2+8);reg:  INDIRP2(addr)
    2453/    2C33 : (MACRO)             	ldaD R11,4; reg:acon
    2454/    2C39 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2455/    2C46 : (MACRO)             	Ccall _memcpy
    2456/    2C49 :                     ;}
    2457/    2C49 :                     L354:
    2458/    2C49 : (MACRO)             	release 6
    2459/    2C4F : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 42 - 4/25/2013 10:34:28


    2460/    2C50 :                     
    2461/    2C50 :                     _copyMac:
    2462/    2C50 : (MACRO)             	reserve 6
    2463/    2C56 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2464/    2C63 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    2465/    2C70 :                     ;void copyMac (byte *dst, const byte *src) {
    2466/    2C70 :                     ;    memcpy(dst, src, 6);
    2467/    2C70 : (MACRO)             	ld2 R12,'O',sp,(0+8);reg:  INDIRP2(addr)
    2468/    2C7C : (MACRO)             	ld2 R13,'O',sp,(2+8);reg:  INDIRP2(addr)
    2469/    2C88 : (MACRO)             	ldaD R11,6; reg:acon
    2470/    2C8E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2471/    2C9B : (MACRO)             	Ccall _memcpy
    2472/    2C9E :                     ;}
    2473/    2C9E :                     L355:
    2474/    2C9E : (MACRO)             	release 6
    2475/    2CA4 : (MACRO)             	Cretn
    2476/    2CA5 :                     
    2477/    2CA5 :                     _strcpy:
    2478/    2CA5 : (MACRO)             	reserve 2
    2479/    2CA7 :                     ;{
    2480/    2CA7 :                     ;	char *save = to;
    2481/    2CA7 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    2482/    2CB4 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    2483/    2CB4 : C0 2C B9            	lbr L360
    2484/    2CB7 :                     L357:
    2485/    2CB7 :                     L358:
    2486/    2CB7 : (MACRO)             	incm R13,1
    2487/    2CB8 : (MACRO)             	incm R12,1
    2488/    2CB9 :                     L360:
    2489/    2CB9 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    2490/    2CBB : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    2491/    2CBD : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2492/    2CC0 : (MACRO)             	jnzU2 r11,L357; NE 0
    2493/    2CC8 :                     ;	return(save);
    2494/    2CC8 : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    2495/    2CD4 :                     L356:
    2496/    2CD4 : (MACRO)             	release 2
    2497/    2CD6 : (MACRO)             	Cretn
    2498/    2CD7 :                     
    2499/    2CD7 :                     _strlen:
    2500/    2CD7 : (MACRO)             	reserve 0; save room for local variables
    2501/    2CD7 : (MACRO)             	pushr r14
    2502/    2CDC : (MACRO)             	reserve 0; save room for outgoing arguments
    2503/    2CDC :                     ;{
    2504/    2CDC :                     ;	unsigned int slen = 0 ;
    2505/    2CDC : (MACRO)             	ld2z R14
    2506/    2CE0 : C0 2C E5            	lbr L363
    2507/    2CE3 :                     L362:
    2508/    2CE3 :                     ;	while (*str != 0) {
    2509/    2CE3 :                     ;      slen++ ;
    2510/    2CE3 : (MACRO)             	incm R14,1
    2511/    2CE4 :                     ;      str++ ;
    2512/    2CE4 : (MACRO)             	incm R12,1
    2513/    2CE5 :                     ;   }
    2514/    2CE5 :                     L363:
    2515/    2CE5 :                     ;	while (*str != 0) {
    2516/    2CE5 : (MACRO)             	ld1 R11,'O',R12,0
    2517/    2CEF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2518/    2CF2 : (MACRO)             	jnzU2 r11,L362; NE 0
    2519/    2CFA :                     ;   return slen;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 43 - 4/25/2013 10:34:28


    2520/    2CFA : (MACRO)             	cpy2 R15,R14 ;LOADU2(reg)*
    2521/    2CFE :                     L361:
    2522/    2CFE : (MACRO)             	release 0; release room for outgoing arguments
    2523/    2CFE : (MACRO)             	popr r14
    2524/    2D02 : (MACRO)             	release 0; release room for local variables 
    2525/    2D02 : (MACRO)             	Cretn
    2526/    2D03 :                     
    2527/    2D03 :                     _printstr:
    2528/    2D03 : (MACRO)             	reserve 0; save room for local variables
    2529/    2D03 : (MACRO)             	pushr r14
    2530/    2D08 : (MACRO)             	reserve 4; save room for outgoing arguments
    2531/    2D0C : (MACRO)             	cpy2 r14,r12; function(2055) 1
    2532/    2D10 :                     ;void printstr(char *ptr){
    2533/    2D10 : C0 2D 32            	lbr L367
    2534/    2D13 :                     L366:
    2535/    2D13 :                     ;    while(*ptr) out(5,*ptr++);
    2536/    2D13 : (MACRO)             	ldaD R12,5; reg:acon
    2537/    2D19 : (MACRO)             	cpy2 R11,R14 ;LOADP2(reg)
    2538/    2D1D : (MACRO)             	cpy2 R14,R11
    2539/    2D21 : (MACRO)             	incm R14,1
    2540/    2D22 : (MACRO)             	ld1 R13,'O',R11,0
    2541/    2D2C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    2542/    2D2F : (MACRO)             	Ccall _out
    2543/    2D32 :                     L367:
    2544/    2D32 : (MACRO)             	ld1 R11,'O',R14,0
    2545/    2D3C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2546/    2D3F : (MACRO)             	jnzU2 r11,L366; NE 0
    2547/    2D47 :                     ;}
    2548/    2D47 :                     L365:
    2549/    2D47 : (MACRO)             	release 4; release room for outgoing arguments
    2550/    2D4B : (MACRO)             	popr r14
    2551/    2D4F : (MACRO)             	release 0; release room for local variables 
    2552/    2D4F : (MACRO)             	Cretn
    2553/    2D50 :                     
    2554/    2D50 :                     _itoa:
    2555/    2D50 : (MACRO)             	reserve 2; save room for local variables
    2556/    2D52 : (MACRO)             	pushr r0
    2557/    2D57 : (MACRO)             	pushr r1
    2558/    2D5C : (MACRO)             	pushr r7
    2559/    2D61 : (MACRO)             	pushr r14
    2560/    2D66 : (MACRO)             	reserve 4; save room for outgoing arguments
    2561/    2D6A : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2562/    2D77 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    2563/    2D84 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    2564/    2D84 :                     ;	unsigned int flag=0;
    2565/    2D84 : (MACRO)             	ld2z R0
    2566/    2D88 :                     ;	char * bptr; bptr=buffer;
    2567/    2D88 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    2568/    2D94 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2569/    2DA1 :                     ;	if (s<0){
    2570/    2DA1 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2571/    2DAD : (MACRO)             	jcI2I r11,0,lbdf,L370; GE is flipped test from LT
    2572/    2DBE :                     ;		*bptr='-';bptr++;
    2573/    2DBE : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2574/    2DCA : (MACRO)             	ldaD R10,45; reg:acon
    2575/    2DD0 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2576/    2DD2 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2577/    2DDE : (MACRO)             	incm R11,1
    2578/    2DDF : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2579/    2DEC :                     ;		n=-s;
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 44 - 4/25/2013 10:34:28


    2580/    2DEC : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2581/    2DF8 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    2582/    2E01 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
    2583/    2E05 :                     ;	} else{
    2584/    2E05 : C0 2E 18            	lbr L371
    2585/    2E08 :                     L370:
    2586/    2E08 :                     ;		n=s;
    2587/    2E08 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2588/    2E14 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
    2589/    2E18 :                     ;	}
    2590/    2E18 :                     L371:
    2591/    2E18 :                     ;	k=10000;
    2592/    2E18 : (MACRO)             	ldaD R14,10000; reg:acon
    2593/    2E1E : C0 2E A9            	lbr L373
    2594/    2E21 :                     L372:
    2595/    2E21 :                     ;	while(k>0){
    2596/    2E21 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    2597/    2E21 : (MACRO)             	ld2z R1
    2598/    2E25 : C0 2E 35            	lbr L378
    2599/    2E28 :                     L375:
    2600/    2E28 :                     L376:
    2601/    2E28 : (MACRO)             	incm R1,1
    2602/    2E29 : (MACRO)             	alu2 R7,R7,R14,sm,smb
    2603/    2E35 :                     L378:
    2604/    2E35 : (MACRO)             	jcU2 r7,r14,lbdf,L375 ;LE is flipped test & operands
    2605/    2E42 :                     ;		if (flag || r>0||k==1){
    2606/    2E42 : (MACRO)             	jnzU2 r0,L382; NE 0
    2607/    2E4A : (MACRO)             	jnzU2 r1,L382; NE 0
    2608/    2E52 : (MACRO)             	jneU2I r14,1,L379; NE
    2609/    2E5E :                     L382:
    2610/    2E5E :                     ;			*bptr=('0'+r);bptr++;
    2611/    2E5E : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2612/    2E6A : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
    2613/    2E72 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2614/    2E74 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2615/    2E80 : (MACRO)             	incm R11,1
    2616/    2E81 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2617/    2E8E :                     ;			flag='y';
    2618/    2E8E : (MACRO)             	ldaD R0,121; reg:acon
    2619/    2E94 :                     ;		}
    2620/    2E94 :                     L379:
    2621/    2E94 :                     ;		k=k/10;
    2622/    2E94 : (MACRO)             	cpy2 R12,R14 ;LOADU2(reg)*
    2623/    2E98 : (MACRO)             	ldaD R13,10; reg:acon
    2624/    2E9E : (MACRO)             	Ccall _divu2
    2625/    2EA1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    2626/    2EA5 : (MACRO)             	cpy2 R14,R11 ;LOADU2(reg)*
    2627/    2EA9 :                     ;	}
    2628/    2EA9 :                     L373:
    2629/    2EA9 :                     ;	while(k>0){
    2630/    2EA9 : (MACRO)             	jnzU2 r14,L372; NE 0
    2631/    2EB1 :                     ;	*bptr='\0';
    2632/    2EB1 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2633/    2EBD : (MACRO)             	ldaD R10,0; reg:acon
    2634/    2EC3 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2635/    2EC5 :                     ;	return buffer;
    2636/    2EC5 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    2637/    2ED1 :                     L369:
    2638/    2ED1 : (MACRO)             	release 4; release room for outgoing arguments
    2639/    2ED5 : (MACRO)             	popr r14
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 45 - 4/25/2013 10:34:28


    2640/    2ED9 : (MACRO)             	popr r7
    2641/    2EDD : (MACRO)             	popr r1
    2642/    2EE1 : (MACRO)             	popr r0
    2643/    2EE5 : (MACRO)             	release 2; release room for local variables 
    2644/    2EE7 : (MACRO)             	Cretn
    2645/    2EE8 :                     
    2646/    2EE8 :                     _ltoa:
    2647/    2EE8 : (MACRO)             	reserve 0; save room for local variables
    2648/    2EE8 : (MACRO)             	pushr r0
    2649/    2EED : (MACRO)             	pushr r1
    2650/    2EF2 : (MACRO)             	pushr r14
    2651/    2EF7 : (MACRO)             	reserve 8; save room for outgoing arguments
    2652/    2EFF : (MACRO)             	cpy4 RL0,RL12; halfbaked
    2653/    2F07 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    2654/    2F07 :                     ;	char* bptr=buffer;
    2655/    2F07 : (MACRO)             	ld2 R14,'O',sp,(4+16);reg:  INDIRP2(addr)
    2656/    2F13 :                     ;	if (s<0){
    2657/    2F13 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    2658/    2F1F : (MACRO)             	jcI4 RL0,RL10,lbdf,L384; GE is flipped test from LT
    2659/    2F3B :                     ;		*bptr++='-';
    2660/    2F3B : (MACRO)             	cpy2 R11,R14 ;LOADP2(reg)
    2661/    2F3F : (MACRO)             	cpy2 R14,R11
    2662/    2F43 : (MACRO)             	incm R14,1
    2663/    2F44 : (MACRO)             	ldaD R10,45; reg:acon
    2664/    2F4A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2665/    2F4C :                     ;		s=-s;
    2666/    2F4C : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
    2667/    2F6C :                     ;	}
    2668/    2F6C :                     L384:
    2669/    2F6C :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    2670/    2F6C : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
    2671/    2F74 : (MACRO)             	st2 r14,'O',sp,(4); arg+f**
    2672/    2F81 : (MACRO)             	ldaD R11,1; reg:acon
    2673/    2F87 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2674/    2F94 : (MACRO)             	Ccall _dubdabx
    2675/    2F97 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    2676/    2F9B : (MACRO)             	cpy2 R12,R14 ;LOADP2(reg)
    2677/    2F9F : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    2678/    2FA3 : (MACRO)             	Ccall _strcpy
    2679/    2FA6 :                     ;	return buffer;
    2680/    2FA6 : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    2681/    2FB2 :                     L383:
    2682/    2FB2 : (MACRO)             	release 8; release room for outgoing arguments
    2683/    2FBA : (MACRO)             	popr r14
    2684/    2FBE : (MACRO)             	popr r1
    2685/    2FC2 : (MACRO)             	popr r0
    2686/    2FC6 : (MACRO)             	release 0; release room for local variables 
    2687/    2FC6 : (MACRO)             	Cretn
    2688/    2FC7 :                     
    2689/    2FC7 :                     _printint:
    2690/    2FC7 : (MACRO)             	reserve 12
    2691/    2FD1 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    2692/    2FDE :                     ;void printint(int s){ //print an integer
    2693/    2FDE :                     ;	itoa(s,buffer);
    2694/    2FDE : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    2695/    2FEA : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    2696/    2FF2 : (MACRO)             	Ccall _itoa
    2697/    2FF5 :                     ;	printstr(buffer);
    2698/    2FF5 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    2699/    2FFD : (MACRO)             	Ccall _printstr
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 46 - 4/25/2013 10:34:28


    2700/    3000 :                     ;}
    2701/    3000 :                     L386:
    2702/    3000 : (MACRO)             	release 12
    2703/    3008 : (MACRO)             	Cretn
    2704/    3009 :                     
    2705/    3009 :                     _printlint:
    2706/    3009 : (MACRO)             	reserve 18
    2707/    3013 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    2708/    3020 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    2709/    302D :                     ;void printlint(long s){ //print a long integer
    2710/    302D :                     ;	printstr(ltoa(s,buffer));
    2711/    302D : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    2712/    303D : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    2713/    3045 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2714/    3052 : (MACRO)             	Ccall _ltoa
    2715/    3055 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    2716/    3059 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2717/    305D : (MACRO)             	Ccall _printstr
    2718/    3060 :                     ;}
    2719/    3060 :                     L387:
    2720/    3060 : (MACRO)             	release 18
    2721/    3068 : (MACRO)             	Cretn
    2722/    3069 :                     
    2723/    3069 :                     _putxn:
    2724/    3069 : (MACRO)             	reserve 4
    2725/    306D : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2726/    307A : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2727/    3086 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    2728/    3090 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    2729/    3090 :                     ;	if (x<10){
    2730/    3090 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2731/    309A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2732/    309D : (MACRO)             	jcI2I r11,10,lbdf,L389; GE is flipped test from LT
    2733/    30AE :                     ;		putc(x+'0');
    2734/    30AE : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2735/    30B8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2736/    30BB : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    2737/    30C3 : (MACRO)             	cpy1 R12,R11
    2738/    30C5 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2739/    30C8 : (MACRO)             	Ccall _putc
    2740/    30CB :                     ;	} else {
    2741/    30CB : C0 30 F3            	lbr L390
    2742/    30CE :                     L389:
    2743/    30CE :                     ;		putc(x+'A'-10);
    2744/    30CE : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2745/    30D8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2746/    30DB : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    2747/    30E3 : (MACRO)             	alu2I R11,R11,10,smi,smbi
    2748/    30EB : (MACRO)             	cpy1 R12,R11
    2749/    30ED : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2750/    30F0 : (MACRO)             	Ccall _putc
    2751/    30F3 :                     ;	}
    2752/    30F3 :                     L390:
    2753/    30F3 :                     ;}
    2754/    30F3 :                     L388:
    2755/    30F3 : (MACRO)             	release 4
    2756/    30F7 : (MACRO)             	Cretn
    2757/    30F8 :                     
    2758/    30F8 :                     _putx:
    2759/    30F8 : (MACRO)             	reserve 4
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 47 - 4/25/2013 10:34:28


    2760/    30FC : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2761/    3109 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2762/    3115 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    2763/    311F :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    2764/    311F :                     ;	putxn(x>>4);
    2765/    311F : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2766/    3129 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2767/    312C : (MACRO)             	shrI2I R11,4
    2768/    314C : (MACRO)             	cpy1 R12,R11
    2769/    314E : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2770/    3151 : (MACRO)             	Ccall _putxn
    2771/    3154 :                     ;	putxn(x & 0x0F);
    2772/    3154 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2773/    315E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2774/    3161 : (MACRO)             	alu2I R11,R11,15,ani,ani
    2775/    3169 :                     	;removed ?	cpy2 R11,R11
    2776/    3169 : (MACRO)             	cpy1 R12,R11
    2777/    316B : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2778/    316E : (MACRO)             	Ccall _putxn
    2779/    3171 :                     ;}
    2780/    3171 :                     L391:
    2781/    3171 : (MACRO)             	release 4
    2782/    3175 : (MACRO)             	Cretn
    2783/    3176 :                     
    2784/    3176 :                     _printf:
    2785/    3176 : (MACRO)             	reserve 2; save room for local variables
    2786/    3178 : (MACRO)             	pushr r0
    2787/    317D : (MACRO)             	pushr r1
    2788/    3182 : (MACRO)             	pushr r7
    2789/    3187 : (MACRO)             	pushr r14
    2790/    318C : (MACRO)             	reserve 4; save room for outgoing arguments
    2791/    3190 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2792/    319D : (MACRO)             	st2 r13,'O',sp,(18); flag2
    2793/    31AA :                     ;void printf(char *ptr,...){ //limited implementation of printf
    2794/    31AA :                     ;	int argslot=0;	//used to align longs
    2795/    31AA : (MACRO)             	ld2z R1
    2796/    31AE :                     ;	int * this=(int *)&ptr;
    2797/    31AE : (MACRO)             	ldA2 R7,'O',sp,(0+16); reg:addr
    2798/    31B6 :                     ;	this++; argslot++; //advance argument pointer and slot #
    2799/    31B6 : (MACRO)             	incm R7,2
    2800/    31B8 : (MACRO)             	incm R1,1
    2801/    31B9 : C0 35 20            	lbr L394
    2802/    31BC :                     L393:
    2803/    31BC :                     ;    while(*ptr) {
    2804/    31BC :                     ;		c=*ptr++;
    2805/    31BC : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2806/    31C8 : (MACRO)             	cpy2 R10,R11
    2807/    31CC : (MACRO)             	incm R10,1
    2808/    31CD : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2809/    31DA : (MACRO)             	ldn1 R14,R11;reg:  INDIRU1(indaddr)
    2810/    31DC :                     ;		if (c!='%'){
    2811/    31DC : (MACRO)             	cpy1 R11,R14
    2812/    31DE : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2813/    31E1 : (MACRO)             	jeqU2I r11,37,L396;EQI2(reg,con)
    2814/    31ED :                     ;			putc(c);
    2815/    31ED : (MACRO)             	cpy1 R12,R14
    2816/    31EF : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2817/    31F2 : (MACRO)             	Ccall _putc
    2818/    31F5 :                     ;		} else{
    2819/    31F5 : C0 35 20            	lbr L397
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 48 - 4/25/2013 10:34:28


    2820/    31F8 :                     L396:
    2821/    31F8 :                     ;			c=*ptr++;
    2822/    31F8 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2823/    3204 : (MACRO)             	cpy2 R10,R11
    2824/    3208 : (MACRO)             	incm R10,1
    2825/    3209 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2826/    3216 : (MACRO)             	ldn1 R14,R11;reg:  INDIRU1(indaddr)
    2827/    3218 :                     ;			switch (c){
    2828/    3218 : (MACRO)             	cpy1 R0,R14
    2829/    321A : (MACRO)             	zExt R0 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2830/    321D : (MACRO)             	jeqU2I r0,105,L401;EQI2(reg,con)
    2831/    3229 : (MACRO)             	ldaD R11,108; reg:acon
    2832/    322F : (MACRO)             	jeqI2 r0,r11,L405; EQI2(reg,reg)
    2833/    3241 : (MACRO)             	jcI2 r11,r0,lbnf,L413 ;GT is reversed operands from LT
    2834/    3255 :                     L412:
    2835/    3255 : (MACRO)             	ldaD R11,88; reg:acon
    2836/    325B : (MACRO)             	jeqI2 r0,r11,L404; EQI2(reg,reg)
    2837/    326D : (MACRO)             	jcI2 r0,r11,lbnf,L398; LT=lbnf i.e. subtract B from A and jump if borrow 
    2838/    3281 :                     L414:
    2839/    3281 : (MACRO)             	jeqU2I r0,99,L403;EQI2(reg,con)
    2840/    328D : (MACRO)             	jeqU2I r0,100,L401;EQI2(reg,con)
    2841/    3299 : C0 35 0F            	lbr L398
    2842/    329C :                     L413:
    2843/    329C : (MACRO)             	ldaD R11,115; reg:acon
    2844/    32A2 : (MACRO)             	jeqI2 r0,r11,L402; EQI2(reg,reg)
    2845/    32B4 : (MACRO)             	jcI2 r0,r11,lbnf,L398; LT=lbnf i.e. subtract B from A and jump if borrow 
    2846/    32C8 :                     L415:
    2847/    32C8 : (MACRO)             	jeqU2I r0,120,L404;EQI2(reg,con)
    2848/    32D4 : C0 35 0F            	lbr L398
    2849/    32D7 :                     L401:
    2850/    32D7 :                     ;					printint(*this++);
    2851/    32D7 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2852/    32DB : (MACRO)             	cpy2 R7,R11
    2853/    32DF : (MACRO)             	incm R7,2
    2854/    32E1 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    2855/    32ED : (MACRO)             	Ccall _printint
    2856/    32F0 :                     ;					argslot+=1; //next argument slot
    2857/    32F0 : (MACRO)             	incm R1,1
    2858/    32F1 :                     ;					break;
    2859/    32F1 : C0 35 20            	lbr L399
    2860/    32F4 :                     L402:
    2861/    32F4 :                     ;					printstr((char*) *this++);
    2862/    32F4 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2863/    32F8 : (MACRO)             	cpy2 R7,R11
    2864/    32FC : (MACRO)             	incm R7,2
    2865/    32FE : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2866/    330A : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2867/    330E : (MACRO)             	Ccall _printstr
    2868/    3311 :                     ;					argslot+=1; //next argument slot
    2869/    3311 : (MACRO)             	incm R1,1
    2870/    3312 :                     ;					break;
    2871/    3312 : C0 35 20            	lbr L399
    2872/    3315 :                     L403:
    2873/    3315 :                     ;					putc((unsigned int) *this++);
    2874/    3315 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2875/    3319 : (MACRO)             	cpy2 R7,R11
    2876/    331D : (MACRO)             	incm R7,2
    2877/    331F : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2878/    332B : (MACRO)             	cpy1 R12,R11
    2879/    332D : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 49 - 4/25/2013 10:34:28


    2880/    3330 : (MACRO)             	Ccall _putc
    2881/    3333 :                     ;					argslot+=1; //next argument slot
    2882/    3333 : (MACRO)             	incm R1,1
    2883/    3334 :                     ;					break;
    2884/    3334 : C0 35 20            	lbr L399
    2885/    3337 :                     L404:
    2886/    3337 :                     ;					putx(((unsigned int) *this)>>8);
    2887/    3337 : (MACRO)             	ld2 R11,'O',R7,0 ;reg:INDIRI2(addr)
    2888/    3343 : (MACRO)             	shrU2I R11,8
    2889/    3373 : (MACRO)             	cpy1 R12,R11
    2890/    3375 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2891/    3378 : (MACRO)             	Ccall _putx
    2892/    337B :                     ;					putx(((unsigned int) *this++)&255);
    2893/    337B : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2894/    337F : (MACRO)             	cpy2 R7,R11
    2895/    3383 : (MACRO)             	incm R7,2
    2896/    3385 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2897/    3391 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2898/    3399 : (MACRO)             	cpy1 R12,R11
    2899/    339B : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2900/    339E : (MACRO)             	Ccall _putx
    2901/    33A1 :                     ;					argslot+=1; //next argument slot
    2902/    33A1 : (MACRO)             	incm R1,1
    2903/    33A2 :                     ;					break;
    2904/    33A2 : C0 35 20            	lbr L399
    2905/    33A5 :                     L405:
    2906/    33A5 :                     ;					if (*ptr){ //as long as there's something there
    2907/    33A5 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2908/    33B1 : (MACRO)             	ld1 R11,'O',R11,0
    2909/    33BB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2910/    33BE : (MACRO)             	jzU2 r11,L406; EQ 0
    2911/    33C6 :                     ;						xord=*ptr++;
    2912/    33C6 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2913/    33D2 : (MACRO)             	cpy2 R10,R11
    2914/    33D6 : (MACRO)             	incm R10,1
    2915/    33D7 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2916/    33E4 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2917/    33E6 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    2918/    33F0 :                     ;						if (argslot&1) {
    2919/    33F0 : (MACRO)             	alu2I R11,R1,1,ani,ani
    2920/    33F8 :                     	;removed ?	cpy2 R11,R1
    2921/    33F8 : (MACRO)             	jzU2 r11,L408; EQ 0
    2922/    3400 :                     ;							this++;
    2923/    3400 : (MACRO)             	incm R7,2
    2924/    3402 :                     ;							argslot++;
    2925/    3402 : (MACRO)             	incm R1,1
    2926/    3403 :                     ;						}
    2927/    3403 :                     L408:
    2928/    3403 :                     ;						if(xord=='d'){
    2929/    3403 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    2930/    340D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2931/    3410 : (MACRO)             	jneU2I r11,100,L410; NE
    2932/    341C :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    2933/    341C : (MACRO)             	ld4 Rp1p2,'O',R7,0;reg:  INDIRI4(addr)
    2934/    342C : (MACRO)             	Ccall _printlint
    2935/    342F :                     ;							this+=2;				// and advances it 4 bytes
    2936/    342F : (MACRO)             	incm R7,4
    2937/    3433 :                     ;						} else{
    2938/    3433 : C0 35 0A            	lbr L411
    2939/    3436 :                     L410:
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 50 - 4/25/2013 10:34:28


    2940/    3436 :                     ;							putx(((unsigned int) *this)>>8);
    2941/    3436 : (MACRO)             	ld2 R11,'O',R7,0 ;reg:INDIRI2(addr)
    2942/    3442 : (MACRO)             	shrU2I R11,8
    2943/    3472 : (MACRO)             	cpy1 R12,R11
    2944/    3474 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2945/    3477 : (MACRO)             	Ccall _putx
    2946/    347A :                     ;							putx(((unsigned int) *this++)&255);
    2947/    347A : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2948/    347E : (MACRO)             	cpy2 R7,R11
    2949/    3482 : (MACRO)             	incm R7,2
    2950/    3484 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2951/    3490 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2952/    3498 : (MACRO)             	cpy1 R12,R11
    2953/    349A : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2954/    349D : (MACRO)             	Ccall _putx
    2955/    34A0 :                     ;							putx(((unsigned int) *this)>>8);
    2956/    34A0 : (MACRO)             	ld2 R11,'O',R7,0 ;reg:INDIRI2(addr)
    2957/    34AC : (MACRO)             	shrU2I R11,8
    2958/    34DC : (MACRO)             	cpy1 R12,R11
    2959/    34DE : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2960/    34E1 : (MACRO)             	Ccall _putx
    2961/    34E4 :                     ;							putx(((unsigned int) *this++)&255);
    2962/    34E4 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2963/    34E8 : (MACRO)             	cpy2 R7,R11
    2964/    34EC : (MACRO)             	incm R7,2
    2965/    34EE : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2966/    34FA : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2967/    3502 : (MACRO)             	cpy1 R12,R11
    2968/    3504 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2969/    3507 : (MACRO)             	Ccall _putx
    2970/    350A :                     ;						}
    2971/    350A :                     L411:
    2972/    350A :                     ;						argslot+=2;
    2973/    350A : (MACRO)             	incm R1,2
    2974/    350C :                     ;						break;
    2975/    350C : C0 35 20            	lbr L399
    2976/    350F :                     L406:
    2977/    350F :                     L398:
    2978/    350F :                     ;					putc('%');putc(c);
    2979/    350F : (MACRO)             	ldaD R12,37; reg:acon
    2980/    3515 : (MACRO)             	Ccall _putc
    2981/    3518 : (MACRO)             	cpy1 R12,R14
    2982/    351A : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2983/    351D : (MACRO)             	Ccall _putc
    2984/    3520 :                     ;			} //switch
    2985/    3520 :                     L399:
    2986/    3520 :                     ;		} //%
    2987/    3520 :                     L397:
    2988/    3520 :                     ;	} //while
    2989/    3520 :                     L394:
    2990/    3520 :                     ;    while(*ptr) {
    2991/    3520 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2992/    352C : (MACRO)             	ld1 R11,'O',R11,0
    2993/    3536 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2994/    3539 : (MACRO)             	jnzU2 r11,L393; NE 0
    2995/    3541 :                     ;} //prtf
    2996/    3541 :                     L392:
    2997/    3541 : (MACRO)             	release 4; release room for outgoing arguments
    2998/    3545 : (MACRO)             	popr r14
    2999/    3549 : (MACRO)             	popr r7
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 51 - 4/25/2013 10:34:28


    3000/    354D : (MACRO)             	popr r1
    3001/    3551 : (MACRO)             	popr r0
    3002/    3555 : (MACRO)             	release 2; release room for local variables 
    3003/    3557 : (MACRO)             	Cretn
    3004/    3558 :                     
    3005/    3558 :                     _exit:
    3006/    3558 : (MACRO)             	reserve 4
    3007/    355C : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    3008/    3569 :                     ;void exit(int code){
    3009/    3569 :                     ;	printf("exit %d\n",code);
    3010/    3569 : (MACRO)             	ldaD R12,L417; reg:acon
    3011/    356F : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    3012/    357B : (MACRO)             	Ccall _printf
    3013/    357E :                     L418:
    3014/    357E :                     ;	while(1);
    3015/    357E :                     L419:
    3016/    357E : C0 35 7E            	lbr L418
    3017/    3581 :                     ;}
    3018/    3581 :                     L416:
    3019/    3581 : (MACRO)             	release 4
    3020/    3585 : (MACRO)             	Cretn
    3021/    3586 :                     
    3022/    3586 :                     _memcmp:
    3023/    3586 : (MACRO)             	reserve 0; save room for local variables
    3024/    3586 : (MACRO)             	pushr r0
    3025/    358B : (MACRO)             	pushr r1
    3026/    3590 : (MACRO)             	pushr r7
    3027/    3595 : (MACRO)             	pushr r14
    3028/    359A : (MACRO)             	reserve 0; save room for outgoing arguments
    3029/    359A : (MACRO)             	ld2 R14,'O',sp,(4+10); reg:INDIRU2(addr)
    3030/    35A6 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    3031/    35A6 :                     ;    int v = 0;
    3032/    35A6 : (MACRO)             	ld2z R7
    3033/    35AA :                     ;    p1 = (unsigned char *)Ptr1;
    3034/    35AA : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    3035/    35AE :                     ;    p2 = (unsigned char *)Ptr2;
    3036/    35AE : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    3037/    35B2 : C0 35 ED            	lbr L423
    3038/    35B5 :                     L422:
    3039/    35B5 :                     ;    while(Count-- > 0 && v == 0) {
    3040/    35B5 :                     ;        v = *(p1++) - *(p2++);
    3041/    35B5 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    3042/    35B9 : (MACRO)             	cpy2 R1,R11
    3043/    35BD : (MACRO)             	incm R1,1
    3044/    35BE : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
    3045/    35C2 : (MACRO)             	cpy2 R0,R10
    3046/    35C6 : (MACRO)             	incm R0,1
    3047/    35C7 : (MACRO)             	ld1 R11,'O',R11,0
    3048/    35D1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3049/    35D4 : (MACRO)             	ld1 R10,'O',R10,0
    3050/    35DE : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    3051/    35E1 : (MACRO)             	alu2 R7,R11,R10,sm,smb
    3052/    35ED :                     ;    }
    3053/    35ED :                     L423:
    3054/    35ED :                     ;    while(Count-- > 0 && v == 0) {
    3055/    35ED : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    3056/    35F1 : (MACRO)             	cpy2 R14,R11
    3057/    35F5 : (MACRO)             	decm R14,1
    3058/    35F6 : (MACRO)             	jeqU2I r11,0,L425;EQU2(reg,con)
    3059/    3602 : (MACRO)             	jzU2 r7,L422; EQ 0
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 52 - 4/25/2013 10:34:28


    3060/    360A :                     L425:
    3061/    360A :                     ;    return v;
    3062/    360A : (MACRO)             	cpy2 R15,R7 ;LOADI2(reg)*
    3063/    360E :                     L421:
    3064/    360E : (MACRO)             	release 0; release room for outgoing arguments
    3065/    360E : (MACRO)             	popr r14
    3066/    3612 : (MACRO)             	popr r7
    3067/    3616 : (MACRO)             	popr r1
    3068/    361A : (MACRO)             	popr r0
    3069/    361E : (MACRO)             	release 0; release room for local variables 
    3070/    361E : (MACRO)             	Cretn
    3071/    361F :                     
    3072/    361F :                     _memcpy:
    3073/    361F : (MACRO)             	reserve 0; save room for local variables
    3074/    361F : (MACRO)             	pushr r1
    3075/    3624 : (MACRO)             	pushr r7
    3076/    3629 : (MACRO)             	pushr r14
    3077/    362E : (MACRO)             	reserve 0; save room for outgoing arguments
    3078/    362E : (MACRO)             	ld2 R14,'O',sp,(4+8); reg:INDIRU2(addr)
    3079/    363A :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    3080/    363A :                     ;        char* dst8 = (char*)dest;
    3081/    363A : (MACRO)             	cpy2 R7,R12 ;LOADP2(reg)
    3082/    363E :                     ;        char* src8 = (char*)src;
    3083/    363E : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
    3084/    3642 : C0 36 5B            	lbr L428
    3085/    3645 :                     L427:
    3086/    3645 :                     ;        while (count--) {
    3087/    3645 :                     ;            *dst8++ = *src8++;
    3088/    3645 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    3089/    3649 : (MACRO)             	cpy2 R7,R11
    3090/    364D : (MACRO)             	incm R7,1
    3091/    364E : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg)
    3092/    3652 : (MACRO)             	cpy2 R1,R10
    3093/    3656 : (MACRO)             	incm R1,1
    3094/    3657 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    3095/    3659 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    3096/    365B :                     ;        }
    3097/    365B :                     L428:
    3098/    365B :                     ;        while (count--) {
    3099/    365B : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    3100/    365F : (MACRO)             	cpy2 R14,R11
    3101/    3663 : (MACRO)             	decm R14,1
    3102/    3664 : (MACRO)             	jnzU2 r11,L427; NE 0
    3103/    366C :                     ;        return dest;
    3104/    366C : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    3105/    3670 :                     L426:
    3106/    3670 : (MACRO)             	release 0; release room for outgoing arguments
    3107/    3670 : (MACRO)             	popr r14
    3108/    3674 : (MACRO)             	popr r7
    3109/    3678 : (MACRO)             	popr r1
    3110/    367C : (MACRO)             	release 0; release room for local variables 
    3111/    367C : (MACRO)             	Cretn
    3112/    367D :                     
    3113/    367D :                     _memset:
    3114/    367D : (MACRO)             	reserve 0; save room for local variables
    3115/    367D : (MACRO)             	pushr r7
    3116/    3682 : (MACRO)             	pushr r14
    3117/    3687 : (MACRO)             	reserve 0; save room for outgoing arguments
    3118/    3687 : (MACRO)             	ld2 R14,'O',sp,(4+6); reg:INDIRU2(addr)
    3119/    3693 :                     ;{
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 53 - 4/25/2013 10:34:28


    3120/    3693 :                     ;    unsigned char* p=s;
    3121/    3693 : (MACRO)             	cpy2 R7,R12 ;LOADP2(reg)
    3122/    3697 : C0 36 A9            	lbr L432
    3123/    369A :                     L431:
    3124/    369A :                     ;        *p++ = (unsigned char)c;
    3125/    369A : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    3126/    369E : (MACRO)             	cpy2 R7,R11
    3127/    36A2 : (MACRO)             	incm R7,1
    3128/    36A3 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    3129/    36A7 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    3130/    36A9 :                     L432:
    3131/    36A9 :                     ;    while(n--)
    3132/    36A9 : (MACRO)             	cpy2 R11,R14 ;LOADU2(reg)*
    3133/    36AD : (MACRO)             	cpy2 R14,R11
    3134/    36B1 : (MACRO)             	decm R14,1
    3135/    36B2 : (MACRO)             	jnzU2 r11,L431; NE 0
    3136/    36BA :                     ;    return s;
    3137/    36BA : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    3138/    36BE :                     L430:
    3139/    36BE : (MACRO)             	release 0; release room for outgoing arguments
    3140/    36BE : (MACRO)             	popr r14
    3141/    36C2 : (MACRO)             	popr r7
    3142/    36C6 : (MACRO)             	release 0; release room for local variables 
    3143/    36C6 : (MACRO)             	Cretn
    3144/    36C7 :                     
    3145/    36C7 :                     _delay:
    3146/    36C7 : (MACRO)             	reserve 0; save room for local variables
    3147/    36C7 : (MACRO)             	pushr r7
    3148/    36CC : (MACRO)             	pushr r14
    3149/    36D1 : (MACRO)             	reserve 4; save room for outgoing arguments
    3150/    36D5 : (MACRO)             	cpy2 r14,r12; function(2054) 1
    3151/    36D9 :                     ;void delay(unsigned int howlong){
    3152/    36D9 :                     ;	for (i=1;i!=howlong;i++){
    3153/    36D9 : (MACRO)             	ldaD R7,1; reg:acon
    3154/    36DF : C0 36 E6            	lbr L438
    3155/    36E2 :                     L435:
    3156/    36E2 :                     ;		oneMs();
    3157/    36E2 : (MACRO)             	Ccall _oneMs
    3158/    36E5 :                     ;	}
    3159/    36E5 :                     L436:
    3160/    36E5 :                     ;	for (i=1;i!=howlong;i++){
    3161/    36E5 : (MACRO)             	incm R7,1
    3162/    36E6 :                     L438:
    3163/    36E6 : (MACRO)             	jneU2 r7,r14,L435; NE
    3164/    36F8 :                     ;}
    3165/    36F8 :                     L434:
    3166/    36F8 : (MACRO)             	release 4; release room for outgoing arguments
    3167/    36FC : (MACRO)             	popr r14
    3168/    3700 : (MACRO)             	popr r7
    3169/    3704 : (MACRO)             	release 0; release room for local variables 
    3170/    3704 : (MACRO)             	Cretn
    3171/    3705 :                     
    3172/    3705 :                     _olduinoincluder:
    3173/    3705 :                     ;void olduinoincluder(){
    3174/    3705 :                     ;	asm("\tinclude olduino.inc\n");
    3175/    3705 :                     	include olduino.inc
(1)    1/    3705 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    3705 :                     
(1)    3/    3705 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    3705 :                     	align 64	;needed to make sure all on same page
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(olduino.inc) - page 54 - 4/25/2013 10:34:28


(1)    5/    3740 :                     _digitalWrite:
(1)    6/    3740 : 8C                  	glo regArg1	;get the bit number
(1)    7/    3741 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/    3743 : AE                  	plo memaddr
(1)    9/    3744 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    3745 : BE                  	phi memaddr	
(1)   11/    3746 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    3747 : A8                  	plo rt1		;save it in a temp
(1)   13/    3748 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   14/    374E : EE                  	sex memaddr	;prepare to change it
(1)   15/    374F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    3750 : 32 57               	bz $$setbitoff
(1)   17/    3752 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    3752 : 88                  	glo rt1		;get the bit value back
(1)   19/    3753 : F1                  	or		;apply it
(1)   20/    3754 : 5E                  	str memaddr	;and save it
(1)   21/    3755 : 30 5C               	br $$outit	;go fnish up
(1)   22/    3757 :                     $$setbitoff:
(1)   23/    3757 : 88                  	glo rt1		;get the bit pattern
(1)   24/    3758 : FB FF               	xri 0xff	;reverse it
(1)   25/    375A : F2                  	and		;combine it with the existing pin value
(1)   26/    375B : 5E                  	str memaddr	;and save it
(1)   27/    375C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    375C :                     $$outit:
(1)   29/    375C : 64                  	out 4		;X was already set to memaddr
(1)   30/    375D : E2                  	sex sp		;reset X
(1)   31/    375E : (MACRO)             	cretn
(1)   32/    375F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    3767 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    3767 :                     	align 8	;protect jump boundary
(1)   35/    3768 :                     _digitalRead:
(1)   36/    3768 : F8 00               	ldi 0		;default is false
(1)   37/    376A : AF                  	plo R15
(1)   38/    376B : BF                  	phi R15
(1)   39/    376C : 36 6F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    376E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    376F : (MACRO)             +	cretn
(1)   42/    3770 :                     
    3176/    3770 :                     ;}
    3177/    3770 :                     L439:
    3178/    3770 : (MACRO)             	Cretn
    3179/    3771 :                     
    3180/    3771 :                     _info_data_len:
    3181/    3771 : 00 00               	db 2 dup (0); zerofill global
    3182/    3773 :                     _waitgwmac:
    3183/    3773 : 00                  	db 1 dup (0); zerofill global
    3184/    3774 :                     _gwmacaddr:
    3185/    3774 : 00 00 00 00 00 00   	db 6 dup (0); zerofill global
    3186/    377A :                     _icmp_cb:
    3187/    377A : 00 00               	db 2 dup (0); zerofill global
    3188/    377C :                     _client_hoststr:
    3189/    377C : 00 00               	db 2 dup (0); zerofill global
    3190/    377E :                     _client_urlbuf_var:
    3191/    377E : 00 00               	db 2 dup (0); zerofill global
    3192/    3780 :                     _client_urlbuf:
    3193/    3780 : 00 00               	db 2 dup (0); zerofill global
    3194/    3782 :                     _client_postval:
    3195/    3782 : 00 00               	db 2 dup (0); zerofill global
    3196/    3784 :                     _client_additionalheaderline:
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 55 - 4/25/2013 10:34:28


    3197/    3784 : 00 00               	db 2 dup (0); zerofill global
    3198/    3786 :                     _client_browser_cb:
    3199/    3786 : 00 00               	db 2 dup (0); zerofill global
    3200/    3788 :                     _www_fd:
    3201/    3788 : 00                  	db 1 dup (0); zerofill global
    3202/    3789 :                     _client_tcp_datafill_cb:
    3203/    3789 : 00 00               	db 2 dup (0); zerofill global
    3204/    378B :                     _client_tcp_result_cb:
    3205/    378B : 00 00               	db 2 dup (0); zerofill global
    3206/    378D :                     _tcp_client_port_l:
    3207/    378D : 00                  	db 1 dup (0); zerofill global
    3208/    378E :                     _tcp_client_port_h:
    3209/    378E : 00                  	db 1 dup (0); zerofill global
    3210/    378F :                     _tcp_client_state:
    3211/    378F : 00                  	db 1 dup (0); zerofill global
    3212/    3790 :                     _tcp_fd:
    3213/    3790 : 00                  	db 1 dup (0); zerofill global
    3214/    3791 :                     _buffer:
    3215/    3791 : 00 00 00 00 00 00   	db 700 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 56 - 4/25/2013 10:34:28


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 57 - 4/25/2013 10:34:28


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 
    3216/    3A4D :                     _hisip:
    3217/    3A4D : 00 00 00 00         	db 4 dup (0); zerofill global
    3218/    3A51 :                     _dnsip:
    3219/    3A51 : 00 00 00 00         	db 4 dup (0); zerofill global
    3220/    3A55 :                     _dhcpip:
    3221/    3A55 : 00 00 00 00         	db 4 dup (0); zerofill global
    3222/    3A59 :                     _gwip:
    3223/    3A59 : 00 00 00 00         	db 4 dup (0); zerofill global
    3224/    3A5D :                     _mymask:
    3225/    3A5D : 00 00 00 00         	db 4 dup (0); zerofill global
    3226/    3A61 :                     _gNextPacketPtr:
    3227/    3A61 : 00 00               	db 2 dup (0); zerofill global
    3228/    3A63 :                     _Enc28j60Bank:
    3229/    3A63 : 00                  	db 1 dup (0); zerofill global
    3230/    3A64 :                     _bufferSize:
    3231/    3A64 : 00 00               	db 2 dup (0); zerofill global
    3232/    3A66 :                     L417:
    3233/    3A66 : 65                  	db 101
    3234/    3A67 : 78                  	db 120
    3235/    3A68 : 69                  	db 105
    3236/    3A69 : 74                  	db 116
    3237/    3A6A : 20                  	db 32
    3238/    3A6B : 25                  	db 37
    3239/    3A6C : 64                  	db 100
    3240/    3A6D : 0A                  	db 10
    3241/    3A6E : 00                  	db 0
    3242/    3A6F :                     L351:
    3243/    3A6F : 0A                  	db 10
    3244/    3A70 : 00                  	db 0
    3245/    3A71 :                     L342:
    3246/    3A71 : 64                  	db 100
    3247/    3A72 : 75                  	db 117
    3248/    3A73 : 6D                  	db 109
    3249/    3A74 : 70                  	db 112
    3250/    3A75 : 69                  	db 105
    3251/    3A76 : 6E                  	db 110
    3252/    3A77 : 67                  	db 103
    3253/    3A78 : 20                  	db 32
    3254/    3A79 : 25                  	db 37
    3255/    3A7A : 64                  	db 100
    3256/    3A7B : 0A                  	db 10
    3257/    3A7C : 00                  	db 0
    3258/    3A7D :                     L15:
    3259/    3A7D : 65                  	db 101
    3260/    3A7E : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 58 - 4/25/2013 10:34:28


    3261/    3A7F : 63                  	db 99
    3262/    3A80 : 6D                  	db 109
    3263/    3A81 : 75                  	db 117
    3264/    3A82 : 6C                  	db 108
    3265/    3A83 : 65                  	db 101
    3266/    3A84 : 20                  	db 32
    3267/    3A85 : 2D                  	db 45
    3268/    3A86 : 20                  	db 32
    3269/    3A87 : 77                  	db 119
    3270/    3A88 : 61                  	db 97
    3271/    3A89 : 74                  	db 116
    3272/    3A8A : 63                  	db 99
    3273/    3A8B : 68                  	db 104
    3274/    3A8C : 20                  	db 32
    3275/    3A8D : 6D                  	db 109
    3276/    3A8E : 79                  	db 121
    3277/    3A8F : 20                  	db 32
    3278/    3A90 : 51                  	db 81
    3279/    3A91 : 21                  	db 33
    3280/    3A92 : 0A                  	db 10
    3281/    3A93 : 00                  	db 0
    3282/    3A94 :                     L11:
    3283/    3A94 : 61                  	db 97
    3284/    3A95 : 6E                  	db 110
    3285/    3A96 : 64                  	db 100
    3286/    3A97 : 20                  	db 32
    3287/    3A98 : 77                  	db 119
    3288/    3A99 : 65                  	db 101
    3289/    3A9A : 27                  	db 39
    3290/    3A9B : 72                  	db 114
    3291/    3A9C : 65                  	db 101
    3292/    3A9D : 20                  	db 32
    3293/    3A9E : 64                  	db 100
    3294/    3A9F : 6F                  	db 111
    3295/    3AA0 : 6E                  	db 110
    3296/    3AA1 : 65                  	db 101
    3297/    3AA2 : 0A                  	db 10
    3298/    3AA3 : 00                  	db 0
    3299/    3AA4 :                     L10:
    3300/    3AA4 : 4D                  	db 77
    3301/    3AA5 : 41                  	db 65
    3302/    3AA6 : 43                  	db 67
    3303/    3AA7 : 74                  	db 116
    3304/    3AA8 : 61                  	db 97
    3305/    3AA9 : 69                  	db 105
    3306/    3AAA : 6C                  	db 108
    3307/    3AAB : 20                  	db 32
    3308/    3AAC : 72                  	db 114
    3309/    3AAD : 65                  	db 101
    3310/    3AAE : 61                  	db 97
    3311/    3AAF : 64                  	db 100
    3312/    3AB0 : 62                  	db 98
    3313/    3AB1 : 61                  	db 97
    3314/    3AB2 : 63                  	db 99
    3315/    3AB3 : 6B                  	db 107
    3316/    3AB4 : 3A                  	db 58
    3317/    3AB5 : 20                  	db 32
    3318/    3AB6 : 25                  	db 37
    3319/    3AB7 : 78                  	db 120
    3320/    3AB8 : 3A                  	db 58
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 59 - 4/25/2013 10:34:28


    3321/    3AB9 : 25                  	db 37
    3322/    3ABA : 78                  	db 120
    3323/    3ABB : 0A                  	db 10
    3324/    3ABC : 00                  	db 0
    3325/    3ABD :                     L9:
    3326/    3ABD : 72                  	db 114
    3327/    3ABE : 65                  	db 101
    3328/    3ABF : 61                  	db 97
    3329/    3AC0 : 64                  	db 100
    3330/    3AC1 : 52                  	db 82
    3331/    3AC2 : 65                  	db 101
    3332/    3AC3 : 67                  	db 103
    3333/    3AC4 : 42                  	db 66
    3334/    3AC5 : 79                  	db 121
    3335/    3AC6 : 74                  	db 116
    3336/    3AC7 : 65                  	db 101
    3337/    3AC8 : 28                  	db 40
    3338/    3AC9 : 45                  	db 69
    3339/    3ACA : 53                  	db 83
    3340/    3ACB : 54                  	db 84
    3341/    3ACC : 41                  	db 65
    3342/    3ACD : 54                  	db 84
    3343/    3ACE : 29                  	db 41
    3344/    3ACF : 20                  	db 32
    3345/    3AD0 : 72                  	db 114
    3346/    3AD1 : 65                  	db 101
    3347/    3AD2 : 74                  	db 116
    3348/    3AD3 : 75                  	db 117
    3349/    3AD4 : 72                  	db 114
    3350/    3AD5 : 6E                  	db 110
    3351/    3AD6 : 73                  	db 115
    3352/    3AD7 : 3A                  	db 58
    3353/    3AD8 : 20                  	db 32
    3354/    3AD9 : 25                  	db 37
    3355/    3ADA : 78                  	db 120
    3356/    3ADB : 0A                  	db 10
    3357/    3ADC : 00                  	db 0
    3358/    3ADD :                     L8:
    3359/    3ADD : 72                  	db 114
    3360/    3ADE : 65                  	db 101
    3361/    3ADF : 61                  	db 97
    3362/    3AE0 : 64                  	db 100
    3363/    3AE1 : 52                  	db 82
    3364/    3AE2 : 65                  	db 101
    3365/    3AE3 : 67                  	db 103
    3366/    3AE4 : 42                  	db 66
    3367/    3AE5 : 79                  	db 121
    3368/    3AE6 : 74                  	db 116
    3369/    3AE7 : 65                  	db 101
    3370/    3AE8 : 28                  	db 40
    3371/    3AE9 : 45                  	db 69
    3372/    3AEA : 52                  	db 82
    3373/    3AEB : 45                  	db 69
    3374/    3AEC : 56                  	db 86
    3375/    3AED : 49                  	db 73
    3376/    3AEE : 44                  	db 68
    3377/    3AEF : 29                  	db 41
    3378/    3AF0 : 20                  	db 32
    3379/    3AF1 : 72                  	db 114
    3380/    3AF2 : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 60 - 4/25/2013 10:34:28


    3381/    3AF3 : 74                  	db 116
    3382/    3AF4 : 75                  	db 117
    3383/    3AF5 : 72                  	db 114
    3384/    3AF6 : 6E                  	db 110
    3385/    3AF7 : 73                  	db 115
    3386/    3AF8 : 3A                  	db 58
    3387/    3AF9 : 20                  	db 32
    3388/    3AFA : 25                  	db 37
    3389/    3AFB : 78                  	db 120
    3390/    3AFC : 0A                  	db 10
    3391/    3AFD : 00                  	db 0
    3392/    3AFE :                     L7:
    3393/    3AFE : 72                  	db 114
    3394/    3AFF : 65                  	db 101
    3395/    3B00 : 61                  	db 97
    3396/    3B01 : 64                  	db 100
    3397/    3B02 : 52                  	db 82
    3398/    3B03 : 65                  	db 101
    3399/    3B04 : 67                  	db 103
    3400/    3B05 : 42                  	db 66
    3401/    3B06 : 79                  	db 121
    3402/    3B07 : 74                  	db 116
    3403/    3B08 : 65                  	db 101
    3404/    3B09 : 28                  	db 40
    3405/    3B0A : 45                  	db 69
    3406/    3B0B : 43                  	db 67
    3407/    3B0C : 4F                  	db 79
    3408/    3B0D : 4E                  	db 78
    3409/    3B0E : 31                  	db 49
    3410/    3B0F : 29                  	db 41
    3411/    3B10 : 20                  	db 32
    3412/    3B11 : 72                  	db 114
    3413/    3B12 : 65                  	db 101
    3414/    3B13 : 74                  	db 116
    3415/    3B14 : 75                  	db 117
    3416/    3B15 : 72                  	db 114
    3417/    3B16 : 6E                  	db 110
    3418/    3B17 : 73                  	db 115
    3419/    3B18 : 3A                  	db 58
    3420/    3B19 : 20                  	db 32
    3421/    3B1A : 25                  	db 37
    3422/    3B1B : 78                  	db 120
    3423/    3B1C : 0A                  	db 10
    3424/    3B1D : 00                  	db 0
    3425/    3B1E :                     L6:
    3426/    3B1E : 46                  	db 70
    3427/    3B1F : 61                  	db 97
    3428/    3B20 : 69                  	db 105
    3429/    3B21 : 6C                  	db 108
    3430/    3B22 : 65                  	db 101
    3431/    3B23 : 64                  	db 100
    3432/    3B24 : 20                  	db 32
    3433/    3B25 : 74                  	db 116
    3434/    3B26 : 6F                  	db 111
    3435/    3B27 : 20                  	db 32
    3436/    3B28 : 61                  	db 97
    3437/    3B29 : 63                  	db 99
    3438/    3B2A : 63                  	db 99
    3439/    3B2B : 65                  	db 101
    3440/    3B2C : 73                  	db 115
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 61 - 4/25/2013 10:34:28


    3441/    3B2D : 73                  	db 115
    3442/    3B2E : 20                  	db 32
    3443/    3B2F : 45                  	db 69
    3444/    3B30 : 74                  	db 116
    3445/    3B31 : 68                  	db 104
    3446/    3B32 : 65                  	db 101
    3447/    3B33 : 72                  	db 114
    3448/    3B34 : 6E                  	db 110
    3449/    3B35 : 65                  	db 101
    3450/    3B36 : 74                  	db 116
    3451/    3B37 : 20                  	db 32
    3452/    3B38 : 63                  	db 99
    3453/    3B39 : 6F                  	db 111
    3454/    3B3A : 6E                  	db 110
    3455/    3B3B : 74                  	db 116
    3456/    3B3C : 72                  	db 114
    3457/    3B3D : 6F                  	db 111
    3458/    3B3E : 6C                  	db 108
    3459/    3B3F : 6C                  	db 108
    3460/    3B40 : 65                  	db 101
    3461/    3B41 : 72                  	db 114
    3462/    3B42 : 0A                  	db 10
    3463/    3B43 : 00                  	db 0
    3464/    3B44 :                     L3:
    3465/    3B44 : 4D                  	db 77
    3466/    3B45 : 41                  	db 65
    3467/    3B46 : 43                  	db 67
    3468/    3B47 : 20                  	db 32
    3469/    3B48 : 26                  	db 38
    3470/    3B49 : 20                  	db 32
    3471/    3B4A : 49                  	db 73
    3472/    3B4B : 50                  	db 80
    3473/    3B4C : 20                  	db 32
    3474/    3B4D : 00                  	db 0
    3475/    3B4E :                     L2:
    3476/    3B4E : 0A                  	db 10
    3477/    3B4F : 45                  	db 69
    3478/    3B50 : 6E                  	db 110
    3479/    3B51 : 63                  	db 99
    3480/    3B52 : 32                  	db 50
    3481/    3B53 : 38                  	db 56
    3482/    3B54 : 6A                  	db 106
    3483/    3B55 : 36                  	db 54
    3484/    3B56 : 30                  	db 48
    3485/    3B57 : 20                  	db 32
    3486/    3B58 : 66                  	db 102
    3487/    3B59 : 69                  	db 105
    3488/    3B5A : 72                  	db 114
    3489/    3B5B : 73                  	db 115
    3490/    3B5C : 74                  	db 116
    3491/    3B5D : 20                  	db 32
    3492/    3B5E : 74                  	db 116
    3493/    3B5F : 72                  	db 114
    3494/    3B60 : 79                  	db 121
    3495/    3B61 : 0A                  	db 10
    3496/    3B62 : 00                  	db 0
    3497/    3B63 :                     	include lcc1802Epilofl.inc
(1)    1/    3B63 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    3B63 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    3B63 :                     ;this is the version published with the lcc1802121229 release
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 62 - 4/25/2013 10:34:28


(1)    4/    3B63 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    3B63 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    3B63 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    3B63 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    3B63 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    3B63 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    3B63 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    3B63 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    3B63 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    3B63 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    3B63 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    3B63 :                     
(1)   16/    3B63 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    3B63 :                     lcc1802init:	
(1)   18/    3B63 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    3B69 : (MACRO)             	ldiReg	RRET,_return
(1)   20/    3B6F : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    3B75 : E2                  	sex	SP
(1)   22/    3B76 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    3B7C : D3                  	sep	RPC
(1)   24/    3B7D :                     $$_00000:
(1)   25/    3B7D : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    3B80 : C0 3B 80            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    3B83 : DE AD               	db	0xde,0xad
(1)   28/    3B85 :                     
(1)   29/    3B85 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    3B85 :                     _setqOn:
(1)   31/    3B85 : 7B                  	seq
(1)   32/    3B86 : (MACRO)             	Cretn
(1)   33/    3B87 :                     _setqOff:
(1)   34/    3B87 : 7A                  	req
(1)   35/    3B88 : (MACRO)             	Cretn
(1)   36/    3B89 :                     
(1)   37/    3B89 :                     _modU2:	;16 bit unsigned remainder
(1)   38/    3B89 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    3B89 : (MACRO)                 Ccall _divU2
(1)   40/    3B8C : 8D                      glo regArg2
(1)   41/    3B8D : AF                      plo retVal
(1)   42/    3B8E : 9D                      ghi regArg2
(1)   43/    3B8F : BF                      phi retVal
(1)   44/    3B90 : (MACRO)                 Cretn
(1)   45/    3B91 :                         
(1)   46/    3B91 :                     _modI2:	;16 bit signed remainder
(1)   47/    3B91 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    3B91 : (MACRO)                 Ccall _divI2
(1)   49/    3B94 : 8D                      glo regArg2
(1)   50/    3B95 : AF                      plo retVal
(1)   51/    3B96 : 9D                      ghi regArg2
(1)   52/    3B97 : BF                      phi retVal
(1)   53/    3B98 : (MACRO)                 Cretn
(1)   54/    3B99 :                     
(1)   55/    3B99 :                     _out4:	
(1)   56/    3B99 : 8C                  	glo	regArg1
(1)   57/    3B9A : 22                  	dec	sp
(1)   58/    3B9B : 52                  	str	sp
(1)   59/    3B9C : 64                  	out	4
(1)   60/    3B9D : (MACRO)             	Cretn
(1)   61/    3B9E :                     
(1)   62/    3B9E :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    3B9E :                     	align 256
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 63 - 4/25/2013 10:34:28


(1)   64/    3C00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    3C00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    3C00 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    3C00 : D3                  	sep     R3 ;go to subroutine
(1)   68/    3C01 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    3C02 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    3C03 : 22                  	dec	sp
(1)   71/    3C04 : 73                  	stxd
(1)   72/    3C05 : 96                  	ghi	retAddr
(1)   73/    3C06 : 52                  	str	sp	
(1)   74/    3C07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    3C08 : A6                  	plo	retAddr
(1)   76/    3C09 : 93                  	ghi	RPC
(1)   77/    3C0A : B6                  	phi	retAddr
(1)   78/    3C0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    3C0C : B3                  	phi	RPC
(1)   80/    3C0D : 46                  	lda	retAddr
(1)   81/    3C0E : A3                  	plo	RPC
(1)   82/    3C0F : 30 00               	br	_call-1
(1)   83/    3C11 :                     
(1)   84/    3C11 :                     ;Standard subroutine return 
(1)   85/    3C11 : D3                  	sep	RPC	;return to the original program
(1)   86/    3C12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    3C13 : A3                  	plo	RPC
(1)   88/    3C14 : 96                  	ghi	retAddr
(1)   89/    3C15 : B3                  	phi	RPC
(1)   90/    3C16 : 42                  	lda	SP	;pick up old return address
(1)   91/    3C17 : B6                  	phi	retAddr
(1)   92/    3C18 : 42                  	lda	SP
(1)   93/    3C19 : A6                  	plo	retAddr
(1)   94/    3C1A : 30 11               	br	_return-1
(1)   95/    3C1C :                     
(1)   96/    3C1C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    3C1C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    3C1E : FF 01               $$mslp:	smi	1
(1)   99/    3C20 : 3A 1E               	bnz	$$mslp
(1)  100/    3C22 : (MACRO)             	Cretn
(1)  101/    3C23 :                     
(1)  102/    3C23 :                     
(1)  103/    3C23 :                     	
(1)  104/    3C23 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    3C23 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    3C23 :                     _mulu2:		
(1)  107/    3C23 : 22                      dec sp
(1)  108/    3C24 : F8 10                   ldi 16
(1)  109/    3C26 : AE                      plo	rwork	;bit count
(1)  110/    3C27 : F8 00                   ldi 0
(1)  111/    3C29 : BF                      phi	retVal	;quotient
(1)  112/    3C2A : AF                      plo retVal
(1)  113/    3C2B :                     $$MultLoop16_16:
(1)  114/    3C2B : 9C                      ghi regArg1
(1)  115/    3C2C : F6                      shr
(1)  116/    3C2D : BC                      phi regArg1
(1)  117/    3C2E : 8C                      glo regArg1
(1)  118/    3C2F : 76                      shrc
(1)  119/    3C30 : AC                      plo regArg1
(1)  120/    3C31 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    3C33 : 8D                      glo regArg2
(1)  122/    3C34 : 52                      str sp
(1)  123/    3C35 : 8F                      glo retVal
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 64 - 4/25/2013 10:34:28


(1)  124/    3C36 : F4                      add 
(1)  125/    3C37 : AF                      plo retVal
(1)  126/    3C38 : 9D                      ghi regArg2
(1)  127/    3C39 : 52                      str sp
(1)  128/    3C3A : 9F                      ghi retVal
(1)  129/    3C3B : 74                      adc
(1)  130/    3C3C : BF                      phi retVal
(1)  131/    3C3D :                     $$MultSkip16_16:
(1)  132/    3C3D : 8D                      glo regArg2
(1)  133/    3C3E : FE                      shl
(1)  134/    3C3F : AD                      plo regArg2
(1)  135/    3C40 : 9D                      ghi regArg2
(1)  136/    3C41 : 7E                      shlc
(1)  137/    3C42 : BD                      phi regArg2
(1)  138/    3C43 : 2E                      dec rwork
(1)  139/    3C44 : 8E                      glo rwork
(1)  140/    3C45 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    3C47 : 12                      inc sp
(1)  142/    3C48 : D5                      sep 5
(1)  143/    3C49 :                     
(1)  144/    3C49 :                     
(1)  145/    3C49 :                     _divU2:
(1)  146/    3C49 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    3C49 :                     	; This is really an unsigned 23 bit divide
(1)  148/    3C49 :                     	;thanks to Ted Rossin
(1)  149/    3C49 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    3C49 : 22                      dec sp
(1)  151/    3C4A : F8 10                   ldi 16
(1)  152/    3C4C : AE                      plo rwork
(1)  153/    3C4D : F8 00                   ldi 0
(1)  154/    3C4F : BF                      phi retVal
(1)  155/    3C50 : AF                      plo retVal
(1)  156/    3C51 : BE                      phi rwork
(1)  157/    3C52 :                     $$DivLoop16_16:
(1)  158/    3C52 : 8C                      glo regArg1
(1)  159/    3C53 : FE                      shl
(1)  160/    3C54 : AC                      plo regArg1
(1)  161/    3C55 : 9C                      ghi regArg1
(1)  162/    3C56 : 7E                      shlc
(1)  163/    3C57 : BC                      phi regArg1
(1)  164/    3C58 : 8F                      glo retVal
(1)  165/    3C59 : 7E                      shlc
(1)  166/    3C5A : AF                      plo retVal
(1)  167/    3C5B : 9F                      ghi retVal
(1)  168/    3C5C : 7E                      shlc
(1)  169/    3C5D : BF                      phi retVal
(1)  170/    3C5E : 9E                      ghi rwork
(1)  171/    3C5F : 7E                      shlc
(1)  172/    3C60 : BE                      phi rwork
(1)  173/    3C61 : 3B 73                   bnf $$DivSub16_16
(1)  174/    3C63 : 8D                      glo regArg2
(1)  175/    3C64 : 52                      str sp
(1)  176/    3C65 : 8F                      glo retVal
(1)  177/    3C66 : F4                      add 
(1)  178/    3C67 : AF                      plo retVal
(1)  179/    3C68 : 9D                      ghi regArg2
(1)  180/    3C69 : 52                      str sp
(1)  181/    3C6A : 9F                      ghi retVal
(1)  182/    3C6B : 74                      adc 
(1)  183/    3C6C : BF                      phi retVal
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 65 - 4/25/2013 10:34:28


(1)  184/    3C6D : 9E                      ghi rwork
(1)  185/    3C6E : 7C 00                   adci 0
(1)  186/    3C70 : BE                      phi rwork
(1)  187/    3C71 : 30 81                   br $$DivSkip16_16
(1)  188/    3C73 :                     $$DivSub16_16:
(1)  189/    3C73 : 8D                      glo regArg2
(1)  190/    3C74 : 52                      str sp
(1)  191/    3C75 : 8F                      glo retVal
(1)  192/    3C76 : F7                      sm
(1)  193/    3C77 : AF                      plo retVal
(1)  194/    3C78 : 9D                      ghi regArg2
(1)  195/    3C79 : 52                      str sp
(1)  196/    3C7A : 9F                      ghi retVal
(1)  197/    3C7B : 77                      smb 
(1)  198/    3C7C : BF                      phi retVal
(1)  199/    3C7D : 9E                      ghi rwork
(1)  200/    3C7E : 7F 00                   smbi 0
(1)  201/    3C80 : BE                      phi rwork 
(1)  202/    3C81 :                     $$DivSkip16_16:
(1)  203/    3C81 : FE                      shl
(1)  204/    3C82 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    3C84 :                     $$DivSetBit16_16:
(1)  206/    3C84 : 8C                      glo regArg1
(1)  207/    3C85 : F9 01                   ori  0x01
(1)  208/    3C87 : AC                      plo regArg1
(1)  209/    3C88 :                     $$DivSkipClear16_16:
(1)  210/    3C88 : 2E                      dec rwork
(1)  211/    3C89 : 8E                      glo rwork
(1)  212/    3C8A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    3C8C : 9E                      ghi rwork
(1)  214/    3C8D : FE                      shl
(1)  215/    3C8E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    3C90 : 8D                      glo regArg2
(1)  217/    3C91 : 52                      str sp
(1)  218/    3C92 : 8F                      glo retVal
(1)  219/    3C93 : F4                      add
(1)  220/    3C94 : AF                      plo retVal
(1)  221/    3C95 : 9D                      ghi regArg2
(1)  222/    3C96 : 52                      str sp
(1)  223/    3C97 : 9F                      ghi retVal
(1)  224/    3C98 : 74                      adc
(1)  225/    3C99 : BF                      phi retVal
(1)  226/    3C9A :                     $$DivSkipFinalAdd16_16:
(1)  227/    3C9A : 12                      inc sp
(1)  228/    3C9B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    3C9B : 8F                      glo retVal
(1)  230/    3C9C : AD                      plo regArg2
(1)  231/    3C9D : 9F                      ghi retVal
(1)  232/    3C9E : BD                      phi regArg2
(1)  233/    3C9F : 8C                      glo regArg1
(1)  234/    3CA0 : AF                      plo retVal
(1)  235/    3CA1 : 9C                      ghi regArg1
(1)  236/    3CA2 : BF                      phi retVal
(1)  237/    3CA3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    3CA3 : D5                      sep 5
(1)  239/    3CA4 :                     
(1)  240/    3CA4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    3CA4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    3CA4 :                     _divI2:
(1)  243/    3CA4 :                         ;pushr retAddr	;save the return address NG doesnot need
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 66 - 4/25/2013 10:34:28


(1)  244/    3CA4 : 22                      dec	sp	;leave a work area available
(1)  245/    3CA5 : 9C                      ghi regArg1
(1)  246/    3CA6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    3CA7 : FE                      shl
(1)  248/    3CA8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    3CAA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    3CB3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    3CB3 : 9D                      ghi regArg2
(1)  252/    3CB4 : F3                      xor	
(1)  253/    3CB5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    3CB6 : 9D                      ghi regArg2
(1)  255/    3CB7 : FE                      shl
(1)  256/    3CB8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    3CBA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    3CC3 :                     $$pos2: ; both args now +v
(1)  259/    3CC3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    3CC6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    3CC6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    3CC7 : FE                      shl
(1)  263/    3CC8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    3CCA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    3CD3 :                     $$done:
(1)  266/    3CD3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    3CD3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    3CD4 :                     
(1)  269/    3CD4 :                     
(1)  270/    3CD4 :                     	align 256    ;32 bit operations follow
(1)  271/    3D00 :                     _divu4:
(1)  272/    3D00 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    3D00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    3D00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    3D00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    3D00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    3D00 :                     
(1)  278/    3D00 : F8 20               	ldi 32		;set loop count
(1)  279/    3D02 : AE                  	plo memaddr	;in temp register
(1)  280/    3D03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    3D0F :                     $$loop:
(1)  282/    3D0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    3D1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    3D27 :                     
(1)  285/    3D27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    3D3D :                     
(1)  287/    3D3D : FA 80               	ani 0x80	;check the top bit
(1)  288/    3D3F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    3D41 : 89                  		glo RL8
(1)  290/    3D42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    3D44 : A9                  		plo RL8
(1)  292/    3D45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    3D5B : 30 61               	br $$endlp 	;else
(1)  294/    3D5D :                     $$norestore:
(1)  295/    3D5D : 89                  		glo RL8
(1)  296/    3D5E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    3D60 : A9                  		plo RL8
(1)  298/    3D61 :                     	;end if
(1)  299/    3D61 :                     $$endlp:
(1)  300/    3D61 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    3D62 : 8E                  	glo memaddr
(1)  302/    3D63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    3D65 :                     	
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 67 - 4/25/2013 10:34:28


(1)  304/    3D65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    3D66 :                     		
(1)  306/    3D66 :                     
(1)  307/    3D66 :                     _mulu4:
(1)  308/    3D66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    3D66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    3D66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    3D66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    3D66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    3D66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    3D66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    3D66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    3D66 :                     	;for 10 we subtract and shift
(1)  317/    3D66 :                     	;for 00 and 11 we just shift
(1)  318/    3D66 :                     
(1)  319/    3D66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    3D72 : F8 20                   ldi 32
(1)  321/    3D74 : AE                      plo memaddr		;cycle count
(1)  322/    3D75 : FC 00                   adi 0		;clear df
(1)  323/    3D77 :                     $$mloop:
(1)  324/    3D77 : 89                      glo RL8
(1)  325/    3D78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    3D7A : 3B 96                   bnf	$$check_sub	;
(1)  327/    3D7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    3D7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    3D7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    3D94 : 30 AE                   br $$shift
(1)  331/    3D96 :                     $$check_sub:
(1)  332/    3D96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    3D98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    3D98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    3DAE :                     $$shift:
(1)  336/    3DAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    3DBC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    3DC8 :                     
(1)  339/    3DC8 : 2E                      dec memaddr		;cycle count
(1)  340/    3DC9 : 8E                      glo memaddr
(1)  341/    3DCA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    3DCC :                         
(1)  343/    3DCC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    3DCD :                     
(1)  345/    3DCD :                     	align 256
(1)  346/    3E00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    3E00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    3E00 :                     _divI4:
(1)  349/    3E00 : 22                      dec	sp	;leave a work area available
(1)  350/    3E01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    3E02 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    3E03 : FE                      shl
(1)  353/    3E04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    3E06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    3E26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    3E26 : 9A                      ghi RL10-1
(1)  357/    3E27 : F3                      xor	
(1)  358/    3E28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    3E29 : 9A                      ghi RL10-1
(1)  360/    3E2A : FE                      shl
(1)  361/    3E2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    3E2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    3E4D :                     $$pos2: ; both args now +v
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 68 - 4/25/2013 10:34:28


(1)  364/    3E4D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    3E50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    3E50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    3E51 : FE                      shl
(1)  368/    3E52 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    3E54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    3E74 :                     $$done:
(1)  371/    3E74 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    3E75 :                     
(1)  373/    3E75 :                     _dubdabx:	
(1)  374/    3E75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    3E75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    3E75 :                     ;long interger is passed in rp1p2
(1)  377/    3E75 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    3E75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    3E75 :                     ;r8-11 are used as temps
(1)  380/    3E75 :                     ;r8 is the working pointer
(1)  381/    3E75 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    3E75 :                     ;r9.0 is digit count
(1)  383/    3E75 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    3E75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    3E81 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    3E8D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    3E91 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    3E93 : A9                  	plo r9
(1)  389/    3E94 :                     $$clrlp:	;clear the passed buffer
(1)  390/    3E94 : F8 00               	ldi 0	
(1)  391/    3E96 : 58                  	str r8	;clear a byte
(1)  392/    3E97 : 18                  	inc r8
(1)  393/    3E98 : 29                  	dec r9
(1)  394/    3E99 : 89                  	glo r9	;check the count
(1)  395/    3E9A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    3E9C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    3EA0 :                     
(1)  398/    3EA0 : F8 20               	ldi 32	;bit count
(1)  399/    3EA2 : AF                  	plo r15
(1)  400/    3EA3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    3EA3 :                     $$cktop:
(1)  402/    3EA3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    3EA4 : FE                  	shl		;check for a 1
(1)  404/    3EA5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    3EA7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    3EB3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    3EB4 : 8F                  	glo r15
(1)  408/    3EB5 : 3A A3               	bnz $$cktop	;
(1)  409/    3EB7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    3EB8 :                     $$bitloop:
(1)  411/    3EB8 : F8 0A               	ldi 10	;digit count
(1)  412/    3EBA : A9                  	plo r9
(1)  413/    3EBB :                     $$dcklp:
(1)  414/    3EBB : 08                  	ldn r8 	;pick up a digit
(1)  415/    3EBC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    3EBE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    3EC0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    3EC2 : 58                  	str r8	;put it back
(1)  419/    3EC3 :                     $$dnoadd:
(1)  420/    3EC3 : 18                  	inc r8
(1)  421/    3EC4 : 29                  	dec r9	;decrement digit count
(1)  422/    3EC5 : 89                  	glo r9
(1)  423/    3EC6 : 3A BB               	bnz $$dcklp ;and back for next digit
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 69 - 4/25/2013 10:34:28


(1)  424/    3EC8 :                     	
(1)  425/    3EC8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    3ED4 :                     	
(1)  427/    3ED4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    3ED6 : A9                  	plo r9
(1)  429/    3ED7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    3ED7 :                     $$dshlp:
(1)  431/    3ED7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    3ED8 : 08                  	ldn r8	;get the digit back
(1)  433/    3ED9 : 7E                  	shlc	;continue the shift
(1)  434/    3EDA : BF                  	phi r15 ;save it for the carry test
(1)  435/    3EDB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    3EDD : 58                  	str r8	;put the digit back
(1)  437/    3EDE : 9F                  	ghi r15	;now test for carry
(1)  438/    3EDF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    3EE1 : 29                  	dec r9	;decrement the digit count
(1)  440/    3EE2 : 89                  	glo r9
(1)  441/    3EE3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    3EE5 :                     	
(1)  443/    3EE5 : 2F                  	dec r15
(1)  444/    3EE6 : 8F                  	glo r15
(1)  445/    3EE7 : 3A B8               	bnz $$bitloop
(1)  446/    3EE9 :                     	
(1)  447/    3EE9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    3EED : F8 0A               	ldi 10		;digit count again
(1)  449/    3EEF : A9                  	plo r9
(1)  450/    3EF0 :                     $$upnxt:
(1)  451/    3EF0 : 08                  	ldn r8		;get digit
(1)  452/    3EF1 : F9 30               	ori 0x30	;make ascii
(1)  453/    3EF3 : 58                  	str r8		;put it back
(1)  454/    3EF4 : 18                  	inc r8		;next digit
(1)  455/    3EF5 : 29                  	dec r9		;counter
(1)  456/    3EF6 : 89                  	glo r9
(1)  457/    3EF7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    3EF9 :                     	
(1)  459/    3EF9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    3F01 : EE                  	sex memaddr	;set up
(1)  461/    3F02 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    3F04 : F7                  	sm		;desired number of digits to skip
(1)  463/    3F05 : E2                  	sex sp		;reset index register
(1)  464/    3F06 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    3F07 :                     $$cknext:
(1)  466/    3F07 : 0F                  	ldn r15		;check digit
(1)  467/    3F08 : FF 30               	smi 0x30	;for '0'
(1)  468/    3F0A : 3A 11               	bnz $$done
(1)  469/    3F0C : 1F                  	inc r15		;next digit
(1)  470/    3F0D : 29                  	dec r9		;reduce count
(1)  471/    3F0E : 89                  	glo r9
(1)  472/    3F0F : 3A 07               	bnz $$cknext
(1)  473/    3F11 :                     $$done:
(1)  474/    3F11 : (MACRO)             	cretn
(1)  475/    3F12 :                     	
(1)  476/    3F12 :                     	
(1)  477/    3F12 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    3F12 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    3F12 : (MACRO)                 Ccall _divU4
(1)  480/    3F15 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    3F1D : (MACRO)                 Cretn
(1)  482/    3F1E :                         
(1)  483/    3F1E :                     _modI4:	;32 bit signed remainder
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm(lcc1802Epilofl.inc) - page 70 - 4/25/2013 10:34:28


(1)  484/    3F1E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    3F1E : (MACRO)                 Ccall _divI4
(1)  486/    3F21 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    3F29 : (MACRO)                 Cretn
(1)  488/    3F2A :                         
(1)  489/    3F2A :                     	
(1)  490/    3F2A :                      
    3498/    3F2A :                     	include IO1802.inc
(1)    1/    3F2A :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    3F2A :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    3F2A :                     	align 64
(1)    4/    3F40 :                     _putc:
(1)    5/    3F40 :                     _out5:	
(1)    6/    3F40 : 8C                  	glo	regArg1
(1)    7/    3F41 : 22                  	dec	sp
(1)    8/    3F42 : 52                  	str	sp
(1)    9/    3F43 : 65                  	out	5
(1)   10/    3F44 : (MACRO)             	Cretn
(1)   11/    3F45 :                     _inp:		;raw port input
(1)   12/    3F45 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    3F45 : 22                  	dec	sp	;work backwards
(1)   14/    3F46 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    3F48 : 73                  	stxd		
(1)   16/    3F49 : 8C                  	glo	regarg1	;get the port number
(1)   17/    3F4A : FA 07               	ani	0x07	;clean it
(1)   18/    3F4C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    3F4E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    3F50 : 73                  	stxd		;store it for execution
(1)   21/    3F51 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    3F55 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    3F56 : D8                  	sep	rt1	;execute it
(1)   24/    3F57 :                     ;we will come back to here with the input byte in D
(1)   25/    3F57 : 12                  	inc	sp	;step over the work area
(1)   26/    3F58 : AF                  	plo	retVal	;save it to return
(1)   27/    3F59 : F8 00               	ldi	0
(1)   28/    3F5B : BF                  	phi	retval	;clear top byte
(1)   29/    3F5C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    3F5D : 12                  	inc	sp	;and the D3
(1)   31/    3F5E : (MACRO)             	Cretn		;and we're done
(1)   32/    3F5F :                     	
(1)   33/    3F5F :                     _out:		;raw port output
(1)   34/    3F5F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    3F5F : 22                  	dec	sp	;work backwards
(1)   36/    3F60 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    3F62 : 73                  	stxd		
(1)   38/    3F63 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    3F67 : 8C                  	glo	regarg1	;get the port number
(1)   40/    3F68 : FA 07               	ani	0x07	;clean it
(1)   41/    3F6A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    3F6C : 73                  	stxd		;store it for execution
(1)   43/    3F6D : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    3F6E : 52                  	str	sp	;store it where sp points
(1)   45/    3F6F : D8                  	sep	rt1	;execute it
(1)   46/    3F70 :                     ;we will come back to here with sp stepped up by one
(1)   47/    3F70 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    3F71 : 12                  	inc	sp	;and the D3
(1)   49/    3F72 : (MACRO)             	Cretn		;and we're done
(1)   50/    3F73 :                     	
(1)   51/    3F73 :                     	
    3499/    3F73 :                     
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 71 - 4/25/2013 10:34:28


 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 72 - 4/25/2013 10:34:28


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP396 :                  3EB8 C | *BRANCHEXT :                      0 - |
 BVTABLE338 :                  375F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB394 :                3D96 C |  CKNEXT396 :                   3F07 C |
 CKTOP396 :                    3EA3 C |  CLRLP396 :                    3E94 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   4/25/2013 - |
 DCKLP396 :                    3EBB C |  DIVLOOP16_16391 :             3C52 C |
*DIVSETBIT16_16391 :           3C84 C |  DIVSKIP16_16391 :             3C81 C |
 DIVSKIPCLEAR16_16391 :        3C88 C |  DIVSKIPFINALADD16_16391 :     3C9A C |
 DIVSUB16_16391 :              3C73 C |  DNOADD396 :                   3EC3 C |
 DONE392 :                     3CD3 C |  DONE395 :                     3E74 C |
 DONE396 :                     3F11 C |  DSHLP396 :                    3ED7 C |
 ENDLP393 :                    3D61 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                           114 C |  L10 :                         3AA4 C |
 L100 :                        10EB C |  L102 :                        1150 C |
 L106 :                        1142 C |  L109 :                        117F C |
 L11 :                         3A94 C |  L112 :                        16B1 C |
 L115 :                        11B5 C |  L117 :                        126C C |
*L12 :                          159 C |  L120 :                        1257 C |
 L123 :                        1406 C |  L125 :                        1392 C |
 L126 :                        13FF C | *L13 :                          17C C |
 L130 :                        1361 C |  L131 :                        1372 C |
 L133 :                        13E6 C |  L136 :                        161E C |
 L138 :                        161E C |  L141 :                        14DB C |
 L143 :                        154A C |  L146 :                        161E C |
 L148 :                        16AA C |  L15 :                         3A7D C |
 L150 :                        167B C |  L151 :                        16AA C |
 L153 :                        16AA C |  L155 :                        1836 C |
 L159 :                        174D C |  L16 :                          176 C |
 L160 :                        1836 C |  L162 :                        1836 C |
 L165 :                        180C C |  L166 :                        1836 C |
 L17 :                          179 C |  L170 :                        1836 C |
*L173 :                        1922 C |  L174 :                        1862 C |
 L175 :                        190C C |  L183 :                        18BF C |
 L184 :                        18D4 C | *L189 :                        1A0F C |
*L19 :                          193 C |  L2 :                          3B4E C |
*L201 :                        1B48 C | *L21 :                          199 C |
*L216 :                        1C03 C |  L222 :                        1BF6 C |
 L223 :                        1BFA C | *L224 :                        1CAD C |
 L229 :                        1CA0 C | *L23 :                          286 C |
 L230 :                        1CA4 C | *L231 :                        1D26 C |
 L24 :                          286 C | *L241 :                        1DA7 C |
 L243 :                        1D7D C | *L248 :                        1F08 C |
 L250 :                        1E46 C | *L256 :                        1FE2 C |
*L26 :                          317 C | *L261 :                        20AE C |
 L265 :                        20AA C | *L267 :                        2115 C |
 L27 :                          2A3 C |  L270 :                        2108 C |
 L271 :                        210C C | *L272 :                        264A C |
 L275 :                        21A2 C |  L276 :                        2205 C |
 L277 :                        21DB C |  L278 :                        21EC C |
 L279 :                        2218 C | *L28 :                          300 C |
 L280 :                        22EC C |  L284 :                        23A6 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 73 - 4/25/2013 10:34:28


 L285 :                        24B0 C | *L288 :                        26E2 C |
*L294 :                        2719 C |  L299 :                        276E C |
 L3 :                          3B44 C |  L300 :                        2759 C |
*L304 :                        27AA C | *L306 :                        2880 C |
*L31 :                          400 C | *L314 :                        2AC7 C |
 L32 :                          3DB C | *L338 :                        2B21 C |
*L34 :                          4B7 C | *L341 :                        2BE6 C |
 L342 :                        3A71 C |  L343 :                        2B60 C |
*L344 :                        2BBE C |  L346 :                        2BBF C |
 L347 :                        2B9E C |  L349 :                        2BBE C |
*L35 :                          514 C |  L351 :                        3A6F C |
 L352 :                        2BE6 C | *L354 :                        2C49 C |
*L355 :                        2C9E C | *L356 :                        2CD4 C |
 L357 :                        2CB7 C | *L358 :                        2CB7 C |
*L36 :                          5A5 C |  L360 :                        2CB9 C |
*L361 :                        2CFE C |  L362 :                        2CE3 C |
 L363 :                        2CE5 C | *L365 :                        2D47 C |
 L366 :                        2D13 C |  L367 :                        2D32 C |
*L369 :                        2ED1 C | *L37 :                          658 C |
 L370 :                        2E08 C |  L371 :                        2E18 C |
 L372 :                        2E21 C |  L373 :                        2EA9 C |
 L375 :                        2E28 C | *L376 :                        2E28 C |
 L378 :                        2E35 C |  L379 :                        2E94 C |
*L38 :                          6DC C |  L382 :                        2E5E C |
*L383 :                        2FB2 C |  L384 :                        2F6C C |
*L386 :                        3000 C | *L387 :                        3060 C |
*L388 :                        30F3 C |  L389 :                        30CE C |
 L39 :                          6BC C |  L390 :                        30F3 C |
*L391 :                        3171 C | *L392 :                        3541 C |
 L393 :                        31BC C |  L394 :                        3520 C |
 L396 :                        31F8 C |  L397 :                        3520 C |
 L398 :                        350F C |  L399 :                        3520 C |
 L4 :                            69 C | *L40 :                          6BC C |
 L401 :                        32D7 C |  L402 :                        32F4 C |
 L403 :                        3315 C |  L404 :                        3337 C |
 L405 :                        33A5 C |  L406 :                        350F C |
 L408 :                        3403 C |  L410 :                        3436 C |
 L411 :                        350A C | *L412 :                        3255 C |
 L413 :                        329C C | *L414 :                        3281 C |
*L415 :                        32C8 C | *L416 :                        3581 C |
 L417 :                        3A66 C |  L418 :                        357E C |
*L419 :                        357E C | *L42 :                          729 C |
*L421 :                        360E C |  L422 :                        35B5 C |
 L423 :                        35ED C |  L425 :                        360A C |
*L426 :                        3670 C |  L427 :                        3645 C |
 L428 :                        365B C | *L43 :                          75B C |
*L430 :                        36BE C |  L431 :                        369A C |
 L432 :                        36A9 C | *L434 :                        36F8 C |
 L435 :                        36E2 C | *L436 :                        36E5 C |
 L438 :                        36E6 C | *L439 :                        3770 C |
*L44 :                          9D5 C |  L45 :                          7BC C |
*L46 :                          7BC C |  L49 :                          7E1 C |
 L50 :                          7E5 C | *L51 :                          C09 C |
 L53 :                          C05 C |  L58 :                          B5C C |
 L6 :                          3B1E C |  L60 :                          B80 C |
 L61 :                          B8D C |  L63 :                          BCB C |
 L64 :                          BE3 C | *L65 :                          C72 C |
 L66 :                          C46 C |  L67 :                          C5E C |
*L69 :                          CD5 C |  L7 :                          3AFE C |
 L70 :                          CA8 C |  L71 :                          CC1 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 74 - 4/25/2013 10:34:28


*L73 :                          DFF C |  L74 :                          CF8 C |
 L75 :                          D5A C |  L77 :                          D5A C |
*L79 :                          E2F C |  L8 :                          3ADD C |
*L80 :                          EC1 C |  L81 :                          E80 C |
*L82 :                          E80 C |  L84 :                         183A C |
 L85 :                         1045 C |  L87 :                          F61 C |
 L89 :                          F37 C |  L9 :                          3ABD C |
 L90 :                         103E C |  L92 :                         10CE C |
 L94 :                         1075 C |  L97 :                         10C7 C |
 LCC1802INIT :                 3B63 C | *LISTON :                         1 - |
 LOOP393 :                     3D0F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP394 :                    3D77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP389 :                     3C1E C |  MULTLOOP16_16390 :            3C2B C |
 MULTSKIP16_16390 :            3C3D C | *NESTMAX :                      100 - |
 NORESTORE393 :                3D5D C |  OUTIT338 :                    375C C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS1392 :                     3CB3 C |  POS1395 :                     3E26 C |
 POS2392 :                     3CC3 C |  POS2395 :                     3E4D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SETBITOFF338 :                3757 C |  SHIFT394 :                    3DAE C |
 SP :                             2 - | *TIME :                    10:34:27 - |
*TRUE :                           1 - |  UPNXT396 :                    3EF0 C |
*VERSION :                     142F - |  _00000381 :                   3B7D C |
 _ALLONES :                     EE5 C |  _ARPREQHDR :                   ECA C |
 _BUFFER :                     3791 C |  _BUFFERSIZE :                 3A64 C |
 _CALL :                       3C01 C |  _CHECK_IP_MESSAGE_IS_FROM :   20B3 C |
*_CLIENT_ADDITIONALHEADERLINE : 3784 C |
 _CLIENT_ARP_WHOHAS :          27AF C | *_CLIENT_BROWSER_CB :          3786 C |
*_CLIENT_HOSTSTR :             377C C | *_CLIENT_POSTVAL :             3782 C |
 _CLIENT_STORE_GW_MAC :        271E C |  _CLIENT_SYN :                 2887 C |
 _CLIENT_TCP_DATAFILL_CB :     3789 C |  _CLIENT_TCP_RESULT_CB :       378B C |
*_CLIENT_URLBUF :              3780 C | *_CLIENT_URLBUF_VAR :          377E C |
 _COPYIP :                     2BFB C |  _COPYMAC :                    2C50 C |
*_DELAY :                      36C7 C |  _DELAYCNT :                    EC7 C |
*_DHCPIP :                     3A55 C |  _DIE381 :                     3B80 C |
 _DIGITALREAD :                3768 C |  _DIGITALWRITE :               3740 C |
 _DISABLECHIP :                 198 C |  _DIVI2 :                      3CA4 C |
 _DIVI4 :                      3E00 C |  _DIVU2 :                      3C49 C |
 _DIVU4 :                      3D00 C | *_DNSIP :                      3A51 C |
 _DUBDABX :                    3E75 C |  _ENABLECHIP :                  181 C |
 _ENC28J60BANK :               3A63 C |  _ENCINITIALIZE :               760 C |
 _ENCINITSPI :                  72E C |  _ENCPACKETRECEIVE :            9E4 C |
 _ENCPACKETSEND :               CE2 C |  _ETHBEGIN :                    6E1 C |
 _ETH_TYPE_IS_ARP_AND_MY_IP :  1C0E C |  _ETH_TYPE_IS_IP_AND_MY_IP :   1B51 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 75 - 4/25/2013 10:34:28


*_EXIT :                       3558 C |  _FILL_CHECKSUM :              2120 C |
 _FILL_IP_HDR_CHECKSUM :       2661 C |  _GET_TCP_DATA_LEN :           1FF3 C |
 _GNEXTPACKETPTR :             3A61 C |  _GWIP :                       3A59 C |
 _GWMACADDR :                  3774 C |  _HEXDUMP :                    2B26 C |
 _HISIP :                      3A4D C |  _HISPORT :                       E C |
 _ICMP_CB :                    377A C |  _INFO_DATA_LEN :              3771 C |
*_INP :                        3F45 C |  _IPHDR :                       ED2 C |
 _ISLINKUP :                    E06 C |  _ITOA :                       2D50 C |
 _LOOP :                        11D C |  _LTOA :                       2EE8 C |
 _MAIN :                        162 C |
 _MAKE_ARP_ANSWER_FROM_REQUEST :                                       1CB8 C |
 _MAKE_ECHO_REPLY_FROM_REQUEST :                                       1D2B C |
 _MAKE_ETH_IP :                26EB C |  _MAKE_TCPHEAD :               192B C |
 _MAKE_TCP_ACK_FROM_ANY :      1DAC C |
 _MAKE_TCP_ACK_WITH_DATA_NOFLAGS :                                     1F15 C |
 _MAKE_TCP_SYNACK_FROM_SYN :   1A16 C |  _MEMCMP :                     3586 C |
 _MEMCPY :                     361F C |  _MEMSET :                     367D C |
*_MODI2 :                      3B91 C | *_MODI4 :                      3F1E C |
*_MODU2 :                      3B89 C | *_MODU4 :                      3F12 C |
*_MULU2 :                      3C23 C | *_MULU4 :                      3D66 C |
 _MYIP :                          A C |  _MYMAC :                         4 C |
*_MYMASK :                     3A5D C | *_NTPREQHDR :                   EDB C |
*_OLDUINOINCLUDER :            3705 C |  _ONEMS :                      3C1C C |
 _OUT :                        3F5F C | *_OUT4 :                       3B99 C |
*_OUT5 :                       3F40 C |  _PIN4 :                          3 C |
 _PRINTF :                     3176 C |  _PRINTINT :                   2FC7 C |
 _PRINTLINT :                  3009 C |  _PRINTSTR :                   2D03 C |
 _PUTC :                       3F40 C |  _PUTX :                       30F8 C |
 _PUTXN :                      3069 C |  _READBUF :                     C1C C |
 _READOP :                      324 C |  _READPHYBYTE :                 E34 C |
 _READREGBYTE :                 4C0 C |  _RETURN :                     3C12 C |
 _SEQNUM :                      EC9 C |  _SETBANK :                     19A C |
 _SETMACANDIPS :               2AD0 C |  _SETMACS :                    2775 C |
*_SETQOFF :                    3B87 C | *_SETQON :                     3B85 C |
 _SETUP :                        10 C |  _STEP_SEQ :                   184F C |
 _STRCPY :                     2CA5 C | *_STRLEN :                     2CD7 C |
 _TCPCLIENT_SRC_PORT_L :        EC6 C |  _TCPPACKETLOOP :               EEB C |
 _TCP_CLIENT_PORT_H :          378E C |  _TCP_CLIENT_PORT_L :          378D C |
 _TCP_CLIENT_STATE :           378F C |  _TCP_FD :                     3790 C |
 _WAITGWMAC :                  3773 C |  _WRITEBUF :                    C83 C |
 _WRITEOP :                     407 C |  _WRITEPHY :                    65D C |
 _WRITEREG :                    5AC C |  _WRITEREGBYTE :                519 C |
*_WWW_FD :                     3788 C |  _XFERSPI :                     28D C |
 __FORW24 :                    376F C |  __FORW25 :                    3F5C C |
*__FORW26 :                    3F70 C |

    437 symbols
    132 unused symbols

 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 76 - 4/25/2013 10:34:28


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | JUMPV                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     81 macros

 AS V1.42 Beta [Bld 87] - source file xnc28j60.asm - page 77 - 4/25/2013 10:34:28


  codepages:
  ----------

STANDARD (0 changed characters)


0.40 seconds assembly time

   4914 lines source file
  20734 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
