 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 1 - 5/23/2013 16:52:22


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Thu May 23 16:51:58 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  830/       0 :                     	listing	on
(1)  831/       0 : C0 25 91            	lbr	lcc1802Init
(1)  832/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     	align 4
      13/       4 :                     _round_nums:
      14/       4 : 3F 00 00 00         	dd 0x3f000000
      15/       8 : 3D 4C CC CD         	dd 0x3d4ccccd
      16/       C : 3B A3 D7 0A         	dd 0x3ba3d70a
      17/      10 : 3A 03 12 6F         	dd 0x3a03126f
      18/      14 : 38 51 B7 17         	dd 0x3851b717
      19/      18 : 36 A7 C5 AC         	dd 0x36a7c5ac
      20/      1C : 35 06 37 BD         	dd 0x350637bd
      21/      20 : 33 56 BF 95         	dd 0x3356bf95
      22/      24 :                     	align 4
      23/      24 :                     _mult_nums:
      24/      24 : 3F 80 00 00         	dd 0x3f800000
      25/      28 : 41 20 00 00         	dd 0x41200000
      26/      2C : 42 C8 00 00         	dd 0x42c80000
      27/      30 : 44 7A 00 00         	dd 0x447a0000
      28/      34 : 46 1C 40 00         	dd 0x461c4000
      29/      38 : 47 C3 50 00         	dd 0x47c35000
      30/      3C : 49 74 24 00         	dd 0x49742400
      31/      40 : 4B 18 96 80         	dd 0x4b189680
      32/      44 :                     _PIN4:
      33/      44 : 00                  	db 0
      34/      45 :                     _enablechip:
      35/      45 : (MACRO)             	reserve 4
      36/      49 :                     ;void enablechip () { //pull cs low
      37/      49 :                     ;  digitalWrite(oldss,LOW);
      38/      49 : (MACRO)             	ldaD R12,4; reg:acon
      39/      4F : (MACRO)             	ld2z R13
      40/      53 : (MACRO)             	Ccall _digitalWrite
      41/      56 :                     ;}
      42/      56 :                     L1:
      43/      56 : (MACRO)             	release 4
      44/      5A : (MACRO)             	Cretn
      45/      5B :                     
      46/      5B :                     _disablechip:
      47/      5B : (MACRO)             	reserve 4
      48/      5F :                     ; void disablechip () {
      49/      5F :                     ;  digitalWrite(oldss,HIGH);
      50/      5F : (MACRO)             	ldaD R12,4; reg:acon
      51/      65 : (MACRO)             	ldaD R13,1; reg:acon
      52/      6B : (MACRO)             	Ccall _digitalWrite
      53/      6E :                     ;}
      54/      6E :                     L2:
      55/      6E : (MACRO)             	release 4
      56/      72 : (MACRO)             	Cretn
      57/      73 :                     
      58/      73 :                     _xferspi:
      59/      73 : (MACRO)             	reserve 0; save room for local variables
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 2 - 5/23/2013 16:52:22


      60/      73 : (MACRO)             	pushr r1
      61/      78 : (MACRO)             	pushr r7
      62/      7D : (MACRO)             	reserve 4; save room for outgoing arguments
      63/      81 : (MACRO)             	cpy2 r7,r12; function(1030) 1
      64/      85 :                     ;unsigned char xferspi(unsigned char value){
      65/      85 :                     ;  for(i=0;i<8;i++){
      66/      85 : (MACRO)             	ld2z R1
      67/      89 :                     L4:
      68/      89 :                     ;    digitalWrite(oldmosi,(value&0x80));      //by setting mosi for each bit
      69/      89 : (MACRO)             	ldaD R12,7; reg:acon
      70/      8F : (MACRO)             	cpy1 R11,R7
      71/      91 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      72/      94 : (MACRO)             	alu2I R11,R11,128,ani,ani
      73/      9C :                     	;removed ?	cpy2 R11,R11
      74/      9C : (MACRO)             	cpy1 R13,R11
      75/      9E : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      76/      A1 : (MACRO)             	Ccall _digitalWrite
      77/      A4 :                     ;    value=(value<<1)|digitalRead(oldmiso);;
      78/      A4 : (MACRO)             	ldaD R12,15; reg:acon
      79/      AA : (MACRO)             	Ccall _digitalRead
      80/      AD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
      81/      B1 : (MACRO)             	cpy1 R10,R7
      82/      B3 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      83/      B6 : (MACRO)             	shl2I R10,1
      84/      BC : (MACRO)             	alu2 R11,R10,R11,or,or
      85/      C8 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
      86/      CA :                     ;    digitalWrite(oldsck,HIGH);              //then pulsing the clock
      87/      CA : (MACRO)             	ldaD R12,5; reg:acon
      88/      D0 : (MACRO)             	ldaD R13,1; reg:acon
      89/      D6 : (MACRO)             	Ccall _digitalWrite
      90/      D9 :                     ;    digitalWrite(oldsck,LOW);
      91/      D9 : (MACRO)             	ldaD R12,5; reg:acon
      92/      DF : (MACRO)             	ld2z R13
      93/      E3 : (MACRO)             	Ccall _digitalWrite
      94/      E6 :                     ;  }
      95/      E6 :                     L5:
      96/      E6 :                     ;  for(i=0;i<8;i++){
      97/      E6 : (MACRO)             	incm R1,1
      98/      E7 : (MACRO)             	jcI2I r1,8,lbnf,L4  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
      99/      F8 :                     ;  return value;
     100/      F8 : (MACRO)             	cpy1 R15,R7
     101/      FA : (MACRO)             	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     102/      FD :                     L3:
     103/      FD : (MACRO)             	release 4; release room for outgoing arguments
     104/     101 : (MACRO)             	popr r7
     105/     105 : (MACRO)             	popr r1
     106/     109 : (MACRO)             	release 0; release room for local variables 
     107/     109 : (MACRO)             	Cretn
     108/     10A :                     
     109/     10A :                     _SPI_Write:
     110/     10A : (MACRO)             	reserve 0; save room for local variables
     111/     10A : (MACRO)             	pushr r7
     112/     10F : (MACRO)             	reserve 4; save room for outgoing arguments
     113/     113 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     114/     120 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     115/     12D : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     116/     139 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     117/     143 :                     ;{
     118/     143 :                     ;  enablechip();
     119/     143 : (MACRO)             	Ccall _enablechip
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 3 - 5/23/2013 16:52:22


     120/     146 :                     ;  value=xferspi(WIZNET_WRITE_OPCODE);
     121/     146 : (MACRO)             	ldaD R12,240; reg:acon
     122/     14C : (MACRO)             	Ccall _xferspi
     123/     14F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     124/     153 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     125/     155 :                     ;  value=xferspi((addr & 0xFF00)>>8);
     126/     155 : (MACRO)             	ld2 RL10,'O',sp,(0+8)
     127/     161 : (MACRO)             	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
     128/     165 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     129/     171 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     130/     187 : (MACRO)             	shrI4I RL10,8
     131/     1F7 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     132/     1FB : (MACRO)             	cpy1 R12,R11
     133/     1FD : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     134/     200 : (MACRO)             	Ccall _xferspi
     135/     203 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     136/     207 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     137/     209 :                     ;  value=xferspi(addr & 0x00FF);
     138/     209 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     139/     215 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     140/     21D : (MACRO)             	cpy1 R12,R11
     141/     21F : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     142/     222 : (MACRO)             	Ccall _xferspi
     143/     225 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     144/     229 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     145/     22B :                     ;  value=xferspi(data);
     146/     22B : (MACRO)             	ld1 R12,'O',sp,(2+8)
     147/     235 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     148/     238 : (MACRO)             	Ccall _xferspi
     149/     23B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     150/     23F : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     151/     241 :                     ;  disablechip();
     152/     241 : (MACRO)             	Ccall _disablechip
     153/     244 :                     ;}
     154/     244 :                     L8:
     155/     244 : (MACRO)             	release 4; release room for outgoing arguments
     156/     248 : (MACRO)             	popr r7
     157/     24C : (MACRO)             	release 0; release room for local variables 
     158/     24C : (MACRO)             	Cretn
     159/     24D :                     
     160/     24D :                     _SPI_Read:
     161/     24D : (MACRO)             	reserve 0; save room for local variables
     162/     24D : (MACRO)             	pushr r7
     163/     252 : (MACRO)             	reserve 4; save room for outgoing arguments
     164/     256 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     165/     263 :                     ;{
     166/     263 :                     ;  enablechip();
     167/     263 : (MACRO)             	Ccall _enablechip
     168/     266 :                     ;  value=xferspi(WIZNET_READ_OPCODE);
     169/     266 : (MACRO)             	ldaD R12,15; reg:acon
     170/     26C : (MACRO)             	Ccall _xferspi
     171/     26F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     172/     273 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     173/     275 :                     ;  value=xferspi((addr & 0xFF00)>>8);
     174/     275 : (MACRO)             	ld2 RL10,'O',sp,(0+8)
     175/     281 : (MACRO)             	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
     176/     285 : (MACRO)             	ldI4 RL8,65280 ;loading a long integer constant
     177/     291 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     178/     2A7 : (MACRO)             	shrI4I RL10,8
     179/     317 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 4 - 5/23/2013 16:52:22


     180/     31B : (MACRO)             	cpy1 R12,R11
     181/     31D : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     182/     320 : (MACRO)             	Ccall _xferspi
     183/     323 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     184/     327 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     185/     329 :                     ;  value=xferspi(addr & 0x00FF);
     186/     329 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     187/     335 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     188/     33D : (MACRO)             	cpy1 R12,R11
     189/     33F : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     190/     342 : (MACRO)             	Ccall _xferspi
     191/     345 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     192/     349 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     193/     34B :                     ;  value=xferspi(0x00);
     194/     34B : (MACRO)             	ld2z R12
     195/     34F : (MACRO)             	Ccall _xferspi
     196/     352 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     197/     356 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     198/     358 :                     ;  disablechip();
     199/     358 : (MACRO)             	Ccall _disablechip
     200/     35B :                     ;  return(value);
     201/     35B : (MACRO)             	cpy1 R15,R7
     202/     35D : (MACRO)             	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     203/     360 :                     L9:
     204/     360 : (MACRO)             	release 4; release room for outgoing arguments
     205/     364 : (MACRO)             	popr r7
     206/     368 : (MACRO)             	release 0; release room for local variables 
     207/     368 : (MACRO)             	Cretn
     208/     369 :                     
     209/     369 :                     L11:
     210/     369 : DE                  	db 222
     211/     36A : AD                  	db 173
     212/     36B : BE                  	db 190
     213/     36C : EF                  	db 239
     214/     36D : FE                  	db 254
     215/     36E : ED                  	db 237
     216/     36F :                     L12:
     217/     36F : C0                  	db 192
     218/     370 : A8                  	db 168
     219/     371 : 01                  	db 1
     220/     372 : B3                  	db 179
     221/     373 :                     L13:
     222/     373 : FF                  	db 255
     223/     374 : FF                  	db 255
     224/     375 : FF                  	db 255
     225/     376 : 00                  	db 0
     226/     377 :                     L14:
     227/     377 : C0                  	db 192
     228/     378 : A8                  	db 168
     229/     379 : 01                  	db 1
     230/     37A : 01                  	db 1
     231/     37B :                     _W5100_Init:
     232/     37B : (MACRO)             	reserve 62
     233/     385 :                     ;{
     234/     385 :                     ;  unsigned char mac_addr[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
     235/     385 : (MACRO)             	ldA2 R11,'O',sp,(-8+64); reg:addr
     236/     38D : (MACRO)             	ldaD R8,L11; reg:acon
     237/     393 : (MACRO)             	blkcpy r11,r8,6; ASGNB(reg,INDIRB(reg))
     238/     3A8 :                     ;  unsigned char ip_addr[] = {192,168,1,179};
     239/     3A8 : (MACRO)             	ldA2 R11,'O',sp,(-12+64); reg:addr
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 5 - 5/23/2013 16:52:22


     240/     3B0 : (MACRO)             	ldaD R8,L12; reg:acon
     241/     3B6 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     242/     3CB :                     ;  unsigned char sub_mask[] = {255,255,255,0};
     243/     3CB : (MACRO)             	ldA2 R11,'O',sp,(-16+64); reg:addr
     244/     3D3 : (MACRO)             	ldaD R8,L13; reg:acon
     245/     3D9 : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     246/     3EE :                     ;  unsigned char gtw_addr[] = {192,168,1,1};
     247/     3EE : (MACRO)             	ldA2 R11,'O',sp,(-20+64); reg:addr
     248/     3F6 : (MACRO)             	ldaD R8,L14; reg:acon
     249/     3FC : (MACRO)             	blkcpy r11,r8,4; ASGNB(reg,INDIRB(reg))
     250/     411 :                     ;  SPI_Write(MR,0x80);            // MR = 0b10000000;
     251/     411 : (MACRO)             	ld2z R12
     252/     415 : (MACRO)             	ldaD R13,128; reg:acon
     253/     41B : (MACRO)             	Ccall _SPI_Write
     254/     41E :                     ;  delay(1);
     255/     41E : (MACRO)             	ldaD R12,1; reg:acon
     256/     424 : (MACRO)             	Ccall _delay
     257/     427 :                     ;  delay(1);
     258/     427 : (MACRO)             	ldaD R12,1; reg:acon
     259/     42D : (MACRO)             	Ccall _delay
     260/     430 :                     ;  printf("Reading MR: %d\n",SPI_Read(MR));
     261/     430 : (MACRO)             	ld2z R12
     262/     434 : (MACRO)             	Ccall _SPI_Read
     263/     437 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     264/     43B : (MACRO)             	ldaD R12,L15; reg:acon
     265/     441 : (MACRO)             	cpy1 R13,R11
     266/     443 : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     267/     446 : (MACRO)             	Ccall _printf
     268/     449 :                     ;  printf("Reading RTR: %d\n",(SPI_Read(RTR)<<8)+SPI_Read(RTR+1));
     269/     449 : (MACRO)             	ldaD R12,23; reg:acon
     270/     44F : (MACRO)             	Ccall _SPI_Read
     271/     452 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     272/     456 : (MACRO)             	st2 R11,'O',sp,(-22+64)
     273/     463 : (MACRO)             	ldaD R12,24; reg:acon
     274/     469 : (MACRO)             	Ccall _SPI_Read
     275/     46C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     276/     470 : (MACRO)             	ldaD R12,L16; reg:acon
     277/     476 : (MACRO)             	ld2 R10,'O',sp,(-22+64) ;reg:INDIRI2(addr)
     278/     482 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     279/     485 : (MACRO)             	shl2I R10,8
     280/     4B5 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     281/     4B8 : (MACRO)             	alu2 R13,R10,R11,add,adc; ADDI2(r,r)
     282/     4C4 : (MACRO)             	Ccall _printf
     283/     4C7 :                     ;  printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],
     284/     4C7 : (MACRO)             	ldaD R12,L17; reg:acon
     285/     4CD : (MACRO)             	ld1 R13,'O',sp,(-20+64)
     286/     4D7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     287/     4DA : (MACRO)             	ld1 R11,'O',sp,(-19+64)
     288/     4E4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     289/     4E7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     290/     4F4 : (MACRO)             	ld1 R11,'O',sp,(-18+64)
     291/     4FE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     292/     501 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     293/     50E : (MACRO)             	ld1 R11,'O',sp,(-17+64)
     294/     518 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     295/     51B : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     296/     528 : (MACRO)             	Ccall _printf
     297/     52B :                     ;  SPI_Write(GAR + 0,gtw_addr[0]);
     298/     52B : (MACRO)             	ldaD R12,1; reg:acon
     299/     531 : (MACRO)             	ld1 R13,'O',sp,(-20+64)
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 6 - 5/23/2013 16:52:22


     300/     53B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     301/     53E : (MACRO)             	Ccall _SPI_Write
     302/     541 :                     ;  SPI_Write(GAR + 1,gtw_addr[1]);
     303/     541 : (MACRO)             	ldaD R12,2; reg:acon
     304/     547 : (MACRO)             	ld1 R13,'O',sp,(-19+64)
     305/     551 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     306/     554 : (MACRO)             	Ccall _SPI_Write
     307/     557 :                     ;  SPI_Write(GAR + 2,gtw_addr[2]);
     308/     557 : (MACRO)             	ldaD R12,3; reg:acon
     309/     55D : (MACRO)             	ld1 R13,'O',sp,(-18+64)
     310/     567 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     311/     56A : (MACRO)             	Ccall _SPI_Write
     312/     56D :                     ;  SPI_Write(GAR + 3,gtw_addr[3]);
     313/     56D : (MACRO)             	ldaD R12,4; reg:acon
     314/     573 : (MACRO)             	ld1 R13,'O',sp,(-17+64)
     315/     57D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     316/     580 : (MACRO)             	Ccall _SPI_Write
     317/     583 :                     ;  delay(1);
     318/     583 : (MACRO)             	ldaD R12,1; reg:acon
     319/     589 : (MACRO)             	Ccall _delay
     320/     58C :                     ;  printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),
     321/     58C : (MACRO)             	ldaD R12,1; reg:acon
     322/     592 : (MACRO)             	Ccall _SPI_Read
     323/     595 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     324/     599 : (MACRO)             	st2 R11,'O',sp,(-24+64)
     325/     5A6 : (MACRO)             	ldaD R12,2; reg:acon
     326/     5AC : (MACRO)             	Ccall _SPI_Read
     327/     5AF : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     328/     5B3 : (MACRO)             	st2 R11,'O',sp,(-26+64)
     329/     5C0 : (MACRO)             	ldaD R12,3; reg:acon
     330/     5C6 : (MACRO)             	Ccall _SPI_Read
     331/     5C9 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     332/     5CD : (MACRO)             	st2 R11,'O',sp,(-28+64)
     333/     5DA : (MACRO)             	ldaD R12,4; reg:acon
     334/     5E0 : (MACRO)             	Ccall _SPI_Read
     335/     5E3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     336/     5E7 : (MACRO)             	ldaD R12,L24; reg:acon
     337/     5ED : (MACRO)             	ld2 R10,'O',sp,(-24+64) ;reg:INDIRI2(addr)
     338/     5F9 : (MACRO)             	cpy1 R13,R10
     339/     5FB : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     340/     5FE : (MACRO)             	ld2 R10,'O',sp,(-26+64) ;reg:INDIRI2(addr)
     341/     60A : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     342/     60D : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     343/     61A : (MACRO)             	ld2 R10,'O',sp,(-28+64) ;reg:INDIRI2(addr)
     344/     626 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     345/     629 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     346/     636 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     347/     639 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     348/     646 : (MACRO)             	Ccall _printf
     349/     649 :                     ;  printf("Setting Source Address %x:%x:%x:%x:%x:%x\n",mac_addr[0],mac_addr[1],
     350/     649 : (MACRO)             	ldaD R12,L25; reg:acon
     351/     64F : (MACRO)             	ld1 R13,'O',sp,(-8+64)
     352/     659 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     353/     65C : (MACRO)             	ld1 R11,'O',sp,(-7+64)
     354/     666 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     355/     669 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     356/     676 : (MACRO)             	ld1 R11,'O',sp,(-6+64)
     357/     680 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     358/     683 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     359/     690 : (MACRO)             	ld1 R11,'O',sp,(-5+64)
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 7 - 5/23/2013 16:52:22


     360/     69A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     361/     69D : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     362/     6AA : (MACRO)             	ld1 R11,'O',sp,(-4+64)
     363/     6B4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     364/     6B7 : (MACRO)             	st2 r11,'O',sp,(10); arg+f**
     365/     6C4 : (MACRO)             	ld1 R11,'O',sp,(-3+64)
     366/     6CE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     367/     6D1 : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     368/     6DE : (MACRO)             	Ccall _printf
     369/     6E1 :                     ;  SPI_Write(SAR + 0,mac_addr[0]);
     370/     6E1 : (MACRO)             	ldaD R12,9; reg:acon
     371/     6E7 : (MACRO)             	ld1 R13,'O',sp,(-8+64)
     372/     6F1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     373/     6F4 : (MACRO)             	Ccall _SPI_Write
     374/     6F7 :                     ;  SPI_Write(SAR + 1,mac_addr[1]);
     375/     6F7 : (MACRO)             	ldaD R12,10; reg:acon
     376/     6FD : (MACRO)             	ld1 R13,'O',sp,(-7+64)
     377/     707 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     378/     70A : (MACRO)             	Ccall _SPI_Write
     379/     70D :                     ;  SPI_Write(SAR + 2,mac_addr[2]);
     380/     70D : (MACRO)             	ldaD R12,11; reg:acon
     381/     713 : (MACRO)             	ld1 R13,'O',sp,(-6+64)
     382/     71D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     383/     720 : (MACRO)             	Ccall _SPI_Write
     384/     723 :                     ;  SPI_Write(SAR + 3,mac_addr[3]);
     385/     723 : (MACRO)             	ldaD R12,12; reg:acon
     386/     729 : (MACRO)             	ld1 R13,'O',sp,(-5+64)
     387/     733 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     388/     736 : (MACRO)             	Ccall _SPI_Write
     389/     739 :                     ;  SPI_Write(SAR + 4,mac_addr[4]);
     390/     739 : (MACRO)             	ldaD R12,13; reg:acon
     391/     73F : (MACRO)             	ld1 R13,'O',sp,(-4+64)
     392/     749 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     393/     74C : (MACRO)             	Ccall _SPI_Write
     394/     74F :                     ;  SPI_Write(SAR + 5,mac_addr[5]);
     395/     74F : (MACRO)             	ldaD R12,14; reg:acon
     396/     755 : (MACRO)             	ld1 R13,'O',sp,(-3+64)
     397/     75F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     398/     762 : (MACRO)             	Ccall _SPI_Write
     399/     765 :                     ;  delay(1);
     400/     765 : (MACRO)             	ldaD R12,1; reg:acon
     401/     76B : (MACRO)             	Ccall _delay
     402/     76E :                     ;  printf("Reading SAR: %x:%x:%x:%x:%x:%x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),
     403/     76E : (MACRO)             	ldaD R12,9; reg:acon
     404/     774 : (MACRO)             	Ccall _SPI_Read
     405/     777 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     406/     77B : (MACRO)             	st2 R11,'O',sp,(-30+64)
     407/     788 : (MACRO)             	ldaD R12,10; reg:acon
     408/     78E : (MACRO)             	Ccall _SPI_Read
     409/     791 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     410/     795 : (MACRO)             	st2 R11,'O',sp,(-32+64)
     411/     7A2 : (MACRO)             	ldaD R12,11; reg:acon
     412/     7A8 : (MACRO)             	Ccall _SPI_Read
     413/     7AB : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     414/     7AF : (MACRO)             	st2 R11,'O',sp,(-34+64)
     415/     7BC : (MACRO)             	ldaD R12,12; reg:acon
     416/     7C2 : (MACRO)             	Ccall _SPI_Read
     417/     7C5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     418/     7C9 : (MACRO)             	st2 R11,'O',sp,(-36+64)
     419/     7D6 : (MACRO)             	ldaD R12,13; reg:acon
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 8 - 5/23/2013 16:52:22


     420/     7DC : (MACRO)             	Ccall _SPI_Read
     421/     7DF : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     422/     7E3 : (MACRO)             	st2 R11,'O',sp,(-38+64)
     423/     7F0 : (MACRO)             	ldaD R12,14; reg:acon
     424/     7F6 : (MACRO)             	Ccall _SPI_Read
     425/     7F9 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     426/     7FD : (MACRO)             	ldaD R12,L36; reg:acon
     427/     803 : (MACRO)             	ld2 R10,'O',sp,(-30+64) ;reg:INDIRI2(addr)
     428/     80F : (MACRO)             	cpy1 R13,R10
     429/     811 : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     430/     814 : (MACRO)             	ld2 R10,'O',sp,(-32+64) ;reg:INDIRI2(addr)
     431/     820 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     432/     823 : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     433/     830 : (MACRO)             	ld2 R10,'O',sp,(-34+64) ;reg:INDIRI2(addr)
     434/     83C : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     435/     83F : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     436/     84C : (MACRO)             	ld2 R10,'O',sp,(-36+64) ;reg:INDIRI2(addr)
     437/     858 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     438/     85B : (MACRO)             	st2 r10,'O',sp,(8); arg+f**
     439/     868 : (MACRO)             	ld2 R10,'O',sp,(-38+64) ;reg:INDIRI2(addr)
     440/     874 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     441/     877 : (MACRO)             	st2 r10,'O',sp,(10); arg+f**
     442/     884 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     443/     887 : (MACRO)             	st2 r11,'O',sp,(12); arg+f**
     444/     894 : (MACRO)             	Ccall _printf
     445/     897 :                     ;  printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],
     446/     897 : (MACRO)             	ldaD R12,L37; reg:acon
     447/     89D : (MACRO)             	ld1 R13,'O',sp,(-16+64)
     448/     8A7 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     449/     8AA : (MACRO)             	ld1 R11,'O',sp,(-15+64)
     450/     8B4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     451/     8B7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     452/     8C4 : (MACRO)             	ld1 R11,'O',sp,(-14+64)
     453/     8CE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     454/     8D1 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     455/     8DE : (MACRO)             	ld1 R11,'O',sp,(-13+64)
     456/     8E8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     457/     8EB : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     458/     8F8 : (MACRO)             	Ccall _printf
     459/     8FB :                     ;  SPI_Write(SUBR + 0,sub_mask[0]);
     460/     8FB : (MACRO)             	ldaD R12,5; reg:acon
     461/     901 : (MACRO)             	ld1 R13,'O',sp,(-16+64)
     462/     90B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     463/     90E : (MACRO)             	Ccall _SPI_Write
     464/     911 :                     ;  SPI_Write(SUBR + 1,sub_mask[1]);
     465/     911 : (MACRO)             	ldaD R12,6; reg:acon
     466/     917 : (MACRO)             	ld1 R13,'O',sp,(-15+64)
     467/     921 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     468/     924 : (MACRO)             	Ccall _SPI_Write
     469/     927 :                     ;  SPI_Write(SUBR + 2,sub_mask[2]);
     470/     927 : (MACRO)             	ldaD R12,7; reg:acon
     471/     92D : (MACRO)             	ld1 R13,'O',sp,(-14+64)
     472/     937 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     473/     93A : (MACRO)             	Ccall _SPI_Write
     474/     93D :                     ;  SPI_Write(SUBR + 3,sub_mask[3]);
     475/     93D : (MACRO)             	ldaD R12,8; reg:acon
     476/     943 : (MACRO)             	ld1 R13,'O',sp,(-13+64)
     477/     94D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     478/     950 : (MACRO)             	Ccall _SPI_Write
     479/     953 :                     ;  delay(1);
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 9 - 5/23/2013 16:52:22


     480/     953 : (MACRO)             	ldaD R12,1; reg:acon
     481/     959 : (MACRO)             	Ccall _delay
     482/     95C :                     ;  printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),
     483/     95C : (MACRO)             	ldaD R12,5; reg:acon
     484/     962 : (MACRO)             	Ccall _SPI_Read
     485/     965 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     486/     969 : (MACRO)             	st2 R11,'O',sp,(-40+64)
     487/     976 : (MACRO)             	ldaD R12,6; reg:acon
     488/     97C : (MACRO)             	Ccall _SPI_Read
     489/     97F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     490/     983 : (MACRO)             	st2 R11,'O',sp,(-42+64)
     491/     990 : (MACRO)             	ldaD R12,7; reg:acon
     492/     996 : (MACRO)             	Ccall _SPI_Read
     493/     999 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     494/     99D : (MACRO)             	st2 R11,'O',sp,(-44+64)
     495/     9AA : (MACRO)             	ldaD R12,8; reg:acon
     496/     9B0 : (MACRO)             	Ccall _SPI_Read
     497/     9B3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     498/     9B7 : (MACRO)             	ldaD R12,L44; reg:acon
     499/     9BD : (MACRO)             	ld2 R10,'O',sp,(-40+64) ;reg:INDIRI2(addr)
     500/     9C9 : (MACRO)             	cpy1 R13,R10
     501/     9CB : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     502/     9CE : (MACRO)             	ld2 R10,'O',sp,(-42+64) ;reg:INDIRI2(addr)
     503/     9DA : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     504/     9DD : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     505/     9EA : (MACRO)             	ld2 R10,'O',sp,(-44+64) ;reg:INDIRI2(addr)
     506/     9F6 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     507/     9F9 : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     508/     A06 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     509/     A09 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     510/     A16 : (MACRO)             	Ccall _printf
     511/     A19 :                     ;  printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],
     512/     A19 : (MACRO)             	ldaD R12,L45; reg:acon
     513/     A1F : (MACRO)             	ld1 R13,'O',sp,(-12+64)
     514/     A29 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     515/     A2C : (MACRO)             	ld1 R11,'O',sp,(-11+64)
     516/     A36 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     517/     A39 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     518/     A46 : (MACRO)             	ld1 R11,'O',sp,(-10+64)
     519/     A50 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     520/     A53 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     521/     A60 : (MACRO)             	ld1 R11,'O',sp,(-9+64)
     522/     A6A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     523/     A6D : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     524/     A7A : (MACRO)             	Ccall _printf
     525/     A7D :                     ;  SPI_Write(SIPR + 0,ip_addr[0]);
     526/     A7D : (MACRO)             	ldaD R12,15; reg:acon
     527/     A83 : (MACRO)             	ld1 R13,'O',sp,(-12+64)
     528/     A8D : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     529/     A90 : (MACRO)             	Ccall _SPI_Write
     530/     A93 :                     ;  SPI_Write(SIPR + 1,ip_addr[1]);
     531/     A93 : (MACRO)             	ldaD R12,16; reg:acon
     532/     A99 : (MACRO)             	ld1 R13,'O',sp,(-11+64)
     533/     AA3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     534/     AA6 : (MACRO)             	Ccall _SPI_Write
     535/     AA9 :                     ;  SPI_Write(SIPR + 2,ip_addr[2]);
     536/     AA9 : (MACRO)             	ldaD R12,17; reg:acon
     537/     AAF : (MACRO)             	ld1 R13,'O',sp,(-10+64)
     538/     AB9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     539/     ABC : (MACRO)             	Ccall _SPI_Write
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 10 - 5/23/2013 16:52:22


     540/     ABF :                     ;  SPI_Write(SIPR + 3,ip_addr[3]);
     541/     ABF : (MACRO)             	ldaD R12,18; reg:acon
     542/     AC5 : (MACRO)             	ld1 R13,'O',sp,(-9+64)
     543/     ACF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     544/     AD2 : (MACRO)             	Ccall _SPI_Write
     545/     AD5 :                     ;  delay(1);
     546/     AD5 : (MACRO)             	ldaD R12,1; reg:acon
     547/     ADB : (MACRO)             	Ccall _delay
     548/     ADE :                     ;  printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),
     549/     ADE : (MACRO)             	ldaD R12,15; reg:acon
     550/     AE4 : (MACRO)             	Ccall _SPI_Read
     551/     AE7 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     552/     AEB : (MACRO)             	st2 R11,'O',sp,(-46+64)
     553/     AF8 : (MACRO)             	ldaD R12,16; reg:acon
     554/     AFE : (MACRO)             	Ccall _SPI_Read
     555/     B01 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     556/     B05 : (MACRO)             	st2 R11,'O',sp,(-48+64)
     557/     B12 : (MACRO)             	ldaD R12,17; reg:acon
     558/     B18 : (MACRO)             	Ccall _SPI_Read
     559/     B1B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     560/     B1F : (MACRO)             	st2 R11,'O',sp,(-50+64)
     561/     B2C : (MACRO)             	ldaD R12,18; reg:acon
     562/     B32 : (MACRO)             	Ccall _SPI_Read
     563/     B35 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     564/     B39 : (MACRO)             	ldaD R12,L52; reg:acon
     565/     B3F : (MACRO)             	ld2 R10,'O',sp,(-46+64) ;reg:INDIRI2(addr)
     566/     B4B : (MACRO)             	cpy1 R13,R10
     567/     B4D : (MACRO)             	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     568/     B50 : (MACRO)             	ld2 R10,'O',sp,(-48+64) ;reg:INDIRI2(addr)
     569/     B5C : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     570/     B5F : (MACRO)             	st2 r10,'O',sp,(4); arg+f**
     571/     B6C : (MACRO)             	ld2 R10,'O',sp,(-50+64) ;reg:INDIRI2(addr)
     572/     B78 : (MACRO)             	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     573/     B7B : (MACRO)             	st2 r10,'O',sp,(6); arg+f**
     574/     B88 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     575/     B8B : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     576/     B98 : (MACRO)             	Ccall _printf
     577/     B9B :                     ;  printf("Setting Wiznet RMSR and TMSR\n\n");
     578/     B9B : (MACRO)             	ldaD R12,L53; reg:acon
     579/     BA1 : (MACRO)             	Ccall _printf
     580/     BA4 :                     ;  SPI_Write(RMSR,0x55);
     581/     BA4 : (MACRO)             	ldaD R12,26; reg:acon
     582/     BAA : (MACRO)             	ldaD R13,85; reg:acon
     583/     BB0 : (MACRO)             	Ccall _SPI_Write
     584/     BB3 :                     ;  SPI_Write(TMSR,0x55);
     585/     BB3 : (MACRO)             	ldaD R12,27; reg:acon
     586/     BB9 : (MACRO)             	ldaD R13,85; reg:acon
     587/     BBF : (MACRO)             	Ccall _SPI_Write
     588/     BC2 :                     ;  printf("Done Wiznet W5100 Initialization!\n");
     589/     BC2 : (MACRO)             	ldaD R12,L54; reg:acon
     590/     BC8 : (MACRO)             	Ccall _printf
     591/     BCB :                     ;}
     592/     BCB :                     L10:
     593/     BCB : (MACRO)             	release 62
     594/     BD3 : (MACRO)             	Cretn
     595/     BD4 :                     
     596/     BD4 :                     _setup:
     597/     BD4 : (MACRO)             	reserve 4
     598/     BD8 :                     ;void setup(){
     599/     BD8 :                     ;  printf("Wiznet 5100 pingmastery begins here!\n");
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 11 - 5/23/2013 16:52:22


     600/     BD8 : (MACRO)             	ldaD R12,L56; reg:acon
     601/     BDE : (MACRO)             	Ccall _printf
     602/     BE1 :                     ;  printf("Wiznet 5100 initialization\n");
     603/     BE1 : (MACRO)             	ldaD R12,L57; reg:acon
     604/     BE7 : (MACRO)             	Ccall _printf
     605/     BEA :                     ;        W5100_Init();
     606/     BEA : (MACRO)             	Ccall _W5100_Init
     607/     BED :                     ;}
     608/     BED :                     L55:
     609/     BED : (MACRO)             	release 4
     610/     BF1 : (MACRO)             	Cretn
     611/     BF2 :                     
     612/     BF2 :                     _loop:
     613/     BF2 :                     ;void loop(){
     614/     BF2 :                     ;}
     615/     BF2 :                     L58:
     616/     BF2 : (MACRO)             	Cretn
     617/     BF3 :                     
     618/     BF3 :                     _main:
     619/     BF3 : (MACRO)             	reserve 4
     620/     BF7 :                     ;void main(void){
     621/     BF7 :                     ;	printf("miso is %d\n",digitalRead(oldmiso));
     622/     BF7 : (MACRO)             	ldaD R12,15; reg:acon
     623/     BFD : (MACRO)             	Ccall _digitalRead
     624/     C00 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)
     625/     C04 : (MACRO)             	ldaD R12,L60; reg:acon
     626/     C0A : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)
     627/     C0E : (MACRO)             	Ccall _printf
     628/     C11 :                     ;	setup();
     629/     C11 : (MACRO)             	Ccall _setup
     630/     C14 :                     ;	printf("loop..");
     631/     C14 : (MACRO)             	ldaD R12,L61; reg:acon
     632/     C1A : (MACRO)             	Ccall _printf
     633/     C1D :                     ;	delay(1000);
     634/     C1D : (MACRO)             	ldaD R12,1000; reg:acon
     635/     C23 : (MACRO)             	Ccall _delay
     636/     C26 :                     ;  for(;;){
     637/     C26 :                     L62:
     638/     C26 :                     ;	  loop();
     639/     C26 : (MACRO)             	Ccall _loop
     640/     C29 :                     ;  }
     641/     C29 :                     ;  for(;;){
     642/     C29 : C0 0C 26            	lbr L62
     643/     C2C :                     L59:
     644/     C2C : (MACRO)             	release 4
     645/     C30 : (MACRO)             	Cretn
     646/     C31 :                     
     647/     C31 :                     _delay:
     648/     C31 : (MACRO)             	reserve 0; save room for local variables
     649/     C31 : (MACRO)             	pushr r1
     650/     C36 : (MACRO)             	pushr r7
     651/     C3B : (MACRO)             	reserve 4; save room for outgoing arguments
     652/     C3F : (MACRO)             	cpy2 r7,r12; function(2054) 1
     653/     C43 :                     ;void delay(unsigned int howlong){
     654/     C43 :                     ;	for (i=1;i!=howlong;i++){
     655/     C43 : (MACRO)             	ldaD R1,1; reg:acon
     656/     C49 : C0 0C 50            	lbr L70
     657/     C4C :                     L67:
     658/     C4C :                     ;		oneMs();
     659/     C4C : (MACRO)             	Ccall _oneMs
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 12 - 5/23/2013 16:52:22


     660/     C4F :                     ;	}
     661/     C4F :                     L68:
     662/     C4F :                     ;	for (i=1;i!=howlong;i++){
     663/     C4F : (MACRO)             	incm R1,1
     664/     C50 :                     L70:
     665/     C50 : (MACRO)             	jneU2 r1,r7,L67; NE
     666/     C62 :                     ;}
     667/     C62 :                     L66:
     668/     C62 : (MACRO)             	release 4; release room for outgoing arguments
     669/     C66 : (MACRO)             	popr r7
     670/     C6A : (MACRO)             	popr r1
     671/     C6E : (MACRO)             	release 0; release room for local variables 
     672/     C6E : (MACRO)             	Cretn
     673/     C6F :                     
     674/     C6F :                     _olduinoincluder:
     675/     C6F :                     ;void olduinoincluder(){
     676/     C6F :                     ;	asm("\tinclude olduino.inc\n");
     677/     C6F :                     	include olduino.inc
(1)    1/     C6F :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     C6F :                     
(1)    3/     C6F :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     C6F :                     	align 64	;needed to make sure all on same page
(1)    5/     C80 :                     _digitalWrite:
(1)    6/     C80 : 8C                  	glo regArg1	;get the bit number
(1)    7/     C81 : FC 9F               	adi $$bvtable&255	;add the table offset
(1)    8/     C83 : AE                  	plo memaddr
(1)    9/     C84 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     C85 : BE                  	phi memaddr	
(1)   11/     C86 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     C87 : A8                  	plo rt1		;save it in a temp
(1)   13/     C88 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   14/     C8E : EE                  	sex memaddr	;prepare to change it
(1)   15/     C8F : 8D                  	glo regArg2	;get on/off switch
(1)   16/     C90 : 32 97               	bz $$setbitoff
(1)   17/     C92 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     C92 : 88                  	glo rt1		;get the bit value back
(1)   19/     C93 : F1                  	or		;apply it
(1)   20/     C94 : 5E                  	str memaddr	;and save it
(1)   21/     C95 : 30 9C               	br $$outit	;go fnish up
(1)   22/     C97 :                     $$setbitoff:
(1)   23/     C97 : 88                  	glo rt1		;get the bit pattern
(1)   24/     C98 : FB FF               	xri 0xff	;reverse it
(1)   25/     C9A : F2                  	and		;combine it with the existing pin value
(1)   26/     C9B : 5E                  	str memaddr	;and save it
(1)   27/     C9C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     C9C :                     $$outit:
(1)   29/     C9C : 64                  	out 4		;X was already set to memaddr
(1)   30/     C9D : E2                  	sex sp		;reset X
(1)   31/     C9E : (MACRO)             	cretn
(1)   32/     C9F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     CA7 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     CA7 :                     	align 8	;protect jump boundary
(1)   35/     CA8 :                     _digitalRead:
(1)   36/     CA8 : F8 00               	ldi 0		;default is false
(1)   37/     CAA : AF                  	plo R15
(1)   38/     CAB : BF                  	phi R15
(1)   39/     CAC : 36 AF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     CAE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     CAF : (MACRO)             +	cretn
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(olduino.inc) - page 13 - 5/23/2013 16:52:22


(1)   42/     CB0 :                     
     678/     CB0 :                     ;}
     679/     CB0 :                     L71:
     680/     CB0 : (MACRO)             	Cretn
     681/     CB1 :                     
     682/     CB1 :                     _strcpy:
     683/     CB1 : (MACRO)             	reserve 2
     684/     CB3 :                     ;{
     685/     CB3 :                     ;	char *save = to;
     686/     CB3 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     687/     CC0 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     688/     CC0 : C0 0C C5            	lbr L77
     689/     CC3 :                     L74:
     690/     CC3 :                     L75:
     691/     CC3 : (MACRO)             	incm R13,1
     692/     CC4 : (MACRO)             	incm R12,1
     693/     CC5 :                     L77:
     694/     CC5 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
     695/     CC7 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
     696/     CC9 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     697/     CCC : (MACRO)             	jnzU2 r11,L74; NE 0
     698/     CD4 :                     ;	return(save);
     699/     CD4 : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
     700/     CE0 :                     L73:
     701/     CE0 : (MACRO)             	release 2
     702/     CE2 : (MACRO)             	Cretn
     703/     CE3 :                     
     704/     CE3 :                     _printstr:
     705/     CE3 : (MACRO)             	reserve 0; save room for local variables
     706/     CE3 : (MACRO)             	pushr r7
     707/     CE8 : (MACRO)             	reserve 4; save room for outgoing arguments
     708/     CEC : (MACRO)             	cpy2 r7,r12; function(2055) 1
     709/     CF0 :                     ;void printstr(char *ptr){
     710/     CF0 : C0 0D 12            	lbr L80
     711/     CF3 :                     L79:
     712/     CF3 :                     ;    while(*ptr) out(5,*ptr++);
     713/     CF3 : (MACRO)             	ldaD R12,5; reg:acon
     714/     CF9 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     715/     CFD : (MACRO)             	cpy2 R7,R11
     716/     D01 : (MACRO)             	incm R7,1
     717/     D02 : (MACRO)             	ld1 R13,'O',R11,0
     718/     D0C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     719/     D0F : (MACRO)             	Ccall _out
     720/     D12 :                     L80:
     721/     D12 : (MACRO)             	ld1 R11,'O',R7,0
     722/     D1C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     723/     D1F : (MACRO)             	jnzU2 r11,L79; NE 0
     724/     D27 :                     ;}
     725/     D27 :                     L78:
     726/     D27 : (MACRO)             	release 4; release room for outgoing arguments
     727/     D2B : (MACRO)             	popr r7
     728/     D2F : (MACRO)             	release 0; release room for local variables 
     729/     D2F : (MACRO)             	Cretn
     730/     D30 :                     
     731/     D30 :                     _ftoa:
     732/     D30 : (MACRO)             	reserve 130; save room for local variables
     733/     D3A : (MACRO)             	pushr r0
     734/     D3F : (MACRO)             	pushr r1
     735/     D44 : (MACRO)             	pushr r7
     736/     D49 : (MACRO)             	reserve 4; save room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 14 - 5/23/2013 16:52:22


     737/     D4D : (MACRO)             	cpy4 RL0,RL12; halfbaked&floaty
     738/     D55 : (MACRO)             	ld2 R7,'O',sp,(6+142); reg:INDIRU2(addr)
     739/     D61 :                     ;{
     740/     D61 :                     ;   char *output = outbfr ;
     741/     D61 : (MACRO)             	ld2 R11,'O',sp,(4+142);reg:  INDIRP2(addr)
     742/     D6D : (MACRO)             	st2 R11,'O',sp,(-54+142); ASGNP2
     743/     D7A :                     ;   if (flt < 0.0) {
     744/     D7A : (MACRO)             	ld4 RL10,'D',(L85),0;INDIRF4(addr)
     745/     D88 : (MACRO)             	jcF4 RL0,RL10,lbdf,L83;GEF4(reg,reg) - reverse test
     746/     DCD :                     ;      *output++ = '-' ;
     747/     DCD : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
     748/     DD9 : (MACRO)             	cpy2 R10,R11
     749/     DDD : (MACRO)             	incm R10,1
     750/     DDE : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
     751/     DEB : (MACRO)             	ldaD R10,45; reg:acon
     752/     DF1 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     753/     DF3 :                     ;      flt *= -1.0 ;
     754/     DF3 : (MACRO)             	ld4 RL8,'D',(L86),0;INDIRF4(addr)
     755/     E01 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
     756/     E09 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     757/     E0C : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
     758/     E14 :                     ;   } else {
     759/     E14 : C0 0E 40            	lbr L84
     760/     E17 :                     L83:
     761/     E17 :                     ;      if (use_leading_plus) {
     762/     E17 : C0 0E 40            	lbr L87
     763/     E1A :                     ;         *output++ = '+' ;
     764/     E1A : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
     765/     E26 : (MACRO)             	cpy2 R10,R11
     766/     E2A : (MACRO)             	incm R10,1
     767/     E2B : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
     768/     E38 : (MACRO)             	ldaD R10,43; reg:acon
     769/     E3E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     770/     E40 :                     ;      }
     771/     E40 :                     L87:
     772/     E40 :                     ;   }
     773/     E40 :                     L84:
     774/     E40 :                     ;   if (dec_digits < 8) {
     775/     E40 : (MACRO)             	jcI2I r7,8,lbdf,L89; GE is flipped test from LT
     776/     E51 :                     ;      flt += round_nums[dec_digits] ;
     777/     E51 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     778/     E59 : (MACRO)             	cpy2 R11,R7
     779/     E5D : (MACRO)             	shl2I R11,2
     780/     E69 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
     781/     E79 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     782/     E7C : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
     783/     E84 :                     ;   }
     784/     E84 :                     L89:
     785/     E84 :                     ;	mult=mult_nums[dec_digits];
     786/     E84 : (MACRO)             	cpy2 R11,R7
     787/     E88 : (MACRO)             	shl2I R11,2
     788/     E94 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
     789/     EA4 : (MACRO)             	st4 RL10,'O',sp,(-72+142); ASGNF4(addr,reg)
     790/     EB7 : (MACRO)             	ld4 RL8,'D',(L94),0;INDIRF4(addr)
     791/     EC5 : (MACRO)             	st4 RL8,'O',sp,(-68+142); ASGNF4(addr,reg)
     792/     ED8 : (MACRO)             	jcF4 RL10,RL8,lbnf,L92;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
     793/     F1D : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     794/     F25 : (MACRO)             	ld4 RL10,'O',sp,(-68+142);INDIRF4(addr)
     795/     F35 : (MACRO)             	cpy4 RL10,RL10; LOADU4(reg)
     796/     F3D : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 15 - 5/23/2013 16:52:22


     797/     F40 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     798/     F43 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     799/     F4B : (MACRO)             	ldI4 RL8,0x80000000 ;loading a long unsigned constant
     800/     F57 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     801/     F6D : (MACRO)             	st4 RL10,'O',sp,(-64+142); ASGNU4
     802/     F80 : C0 0F B9            	lbr L93
     803/     F83 :                     L92:
     804/     F83 : (MACRO)             	ld4 RL10,'O',sp,(-72+142);INDIRF4(addr)
     805/     F93 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     806/     F9B : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     807/     F9E : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     808/     FA6 : (MACRO)             	st4 RL10,'O',sp,(-64+142); ASGNU4
     809/     FB9 :                     L93:
     810/     FB9 : (MACRO)             	ld4 RL10,'O',sp,(-64+142);reg:  INDIRU4(addr)
     811/     FC9 : (MACRO)             	st4 RL10,'O',sp,(-60+142); ASGNU4
     812/     FDC :                     ;   wholeNum = (unsigned long) flt;
     813/     FDC : (MACRO)             	ld4 RL10,'D',(L94),0;INDIRF4(addr)
     814/     FEA : (MACRO)             	jcF4 RL0,RL10,lbnf,L96;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
     815/    102F : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     816/    1037 : (MACRO)             	cpy4 RL10,RL10; LOADU4(reg)
     817/    103F : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     818/    1042 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     819/    1045 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     820/    104D : (MACRO)             	ldI4 RL8,0x80000000 ;loading a long unsigned constant
     821/    1059 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     822/    106F : (MACRO)             	st4 RL10,'O',sp,(-76+142); ASGNU4
     823/    1082 : C0 10 AB            	lbr L97
     824/    1085 :                     L96:
     825/    1085 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     826/    108D : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     827/    1090 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     828/    1098 : (MACRO)             	st4 RL10,'O',sp,(-76+142); ASGNU4
     829/    10AB :                     L97:
     830/    10AB : (MACRO)             	ld4 RL10,'O',sp,(-76+142);reg:  INDIRU4(addr)
     831/    10BB : (MACRO)             	st4 RL10,'O',sp,(-8+142); ASGNU4
     832/    10CE :                     ;   decimalNum = (unsigned long) ((flt - wholeNum) * mult);
     833/    10CE : (MACRO)             	ld4 RL10,'D',(L101),0;INDIRF4(addr)
     834/    10DC : (MACRO)             	st4 RL10,'O',sp,(-84+142); ASGNF4(addr,reg)
     835/    10EF : (MACRO)             	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
     836/    10FF : (MACRO)             	st4 RL8,'O',sp,(-92+142); ASGNU4
     837/    1112 : (MACRO)             	ldaD R11,1; reg:acon
     838/    1118 : (MACRO)             	st2 R11,'O',sp,(-86+142); ASGNU2(addr,reg)*
     839/    1125 : (MACRO)             	ld4 RL10,'O',sp,(-60+142);reg:  INDIRU4(addr)
     840/    1135 : (MACRO)             	st4 RL10,'O',sp,(-96+142); ASGNU4
     841/    1148 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     842/    1150 : (MACRO)             	st4 RL8,'O',sp,(-100+142); ASGNF4(addr,reg)
     843/    1163 : (MACRO)             	ld4 RL10,'O',sp,(-84+142);INDIRF4(addr)
     844/    1173 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     845/    117B : (MACRO)             	st4 RL8,'O',sp,(-104+142); ASGNF4(addr,reg)
     846/    118E : (MACRO)             	ld4 RL10,'O',sp,(-92+142);reg:  INDIRU4(addr)
     847/    119E : (MACRO)             	shrU4I RL10,1
     848/    11AA : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     849/    11B2 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     850/    11B5 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     851/    11BD : (MACRO)             	ld4 RL8,'O',sp,(-104+142);INDIRF4(addr)
     852/    11CD : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     853/    11D0 : (MACRO)             	st4 RL8,'O',sp,(-108+142); ASGNF4(addr,reg)
     854/    11E3 : (MACRO)             	ld2 R11,'O',sp,(-86+142); reg:INDIRU2(addr)
     855/    11EF : (MACRO)             	ld4 RL8,'O',sp,(-92+142);reg:  INDIRU4(addr)
     856/    11FF : (MACRO)             	alu4 RL10,RL8,R11,and,and
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 16 - 5/23/2013 16:52:22


     857/    1215 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     858/    121D : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     859/    1220 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     860/    1228 : (MACRO)             	ld4 RL8,'O',sp,(-108+142);INDIRF4(addr)
     861/    1238 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     862/    123B : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     863/    1243 : (MACRO)             	ld4 RL8,'O',sp,(-100+142);INDIRF4(addr)
     864/    1253 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     865/    1256 : (MACRO)             	st4 RL8,'O',sp,(-112+142); ASGNF4(addr,reg)
     866/    1269 : (MACRO)             	ld4 RL10,'O',sp,(-84+142);INDIRF4(addr)
     867/    1279 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     868/    1281 : (MACRO)             	st4 RL8,'O',sp,(-116+142); ASGNF4(addr,reg)
     869/    1294 : (MACRO)             	ld4 RL10,'O',sp,(-96+142);reg:  INDIRU4(addr)
     870/    12A4 : (MACRO)             	shrU4I RL10,1
     871/    12B0 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     872/    12B8 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     873/    12BB : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     874/    12C3 : (MACRO)             	ld4 RL8,'O',sp,(-116+142);INDIRF4(addr)
     875/    12D3 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     876/    12D6 : (MACRO)             	st4 RL8,'O',sp,(-120+142); ASGNF4(addr,reg)
     877/    12E9 : (MACRO)             	ld2 R11,'O',sp,(-86+142); reg:INDIRU2(addr)
     878/    12F5 : (MACRO)             	ld4 RL8,'O',sp,(-96+142);reg:  INDIRU4(addr)
     879/    1305 : (MACRO)             	alu4 RL10,RL8,R11,and,and
     880/    131B : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     881/    1323 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     882/    1326 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     883/    132E : (MACRO)             	ld4 RL8,'O',sp,(-120+142);INDIRF4(addr)
     884/    133E : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     885/    1341 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     886/    1349 : (MACRO)             	ld4 RL8,'O',sp,(-112+142);INDIRF4(addr)
     887/    1359 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     888/    135C : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     889/    1364 : (MACRO)             	st4 RL10,'O',sp,(-128+142); ASGNF4(addr,reg)
     890/    1377 : (MACRO)             	ld4 RL8,'D',(L94),0;INDIRF4(addr)
     891/    1385 : (MACRO)             	st4 RL8,'O',sp,(-124+142); ASGNF4(addr,reg)
     892/    1398 : (MACRO)             	jcF4 RL10,RL8,lbnf,L99;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
     893/    13DD : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     894/    13E5 : (MACRO)             	ld4 RL10,'O',sp,(-124+142);INDIRF4(addr)
     895/    13F5 : (MACRO)             	cpy4 RL10,RL10; LOADU4(reg)
     896/    13FD : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     897/    1400 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     898/    1403 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     899/    140B : (MACRO)             	ldI4 RL8,0x80000000 ;loading a long unsigned constant
     900/    1417 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     901/    142D : (MACRO)             	st4 RL10,'O',sp,(-80+142); ASGNU4
     902/    1440 : C0 14 79            	lbr L100
     903/    1443 :                     L99:
     904/    1443 : (MACRO)             	ld4 RL10,'O',sp,(-128+142);INDIRF4(addr)
     905/    1453 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     906/    145B : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     907/    145E : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     908/    1466 : (MACRO)             	st4 RL10,'O',sp,(-80+142); ASGNU4
     909/    1479 :                     L100:
     910/    1479 : (MACRO)             	ld4 RL10,'O',sp,(-80+142);reg:  INDIRU4(addr)
     911/    1489 : (MACRO)             	st4 RL10,'O',sp,(-52+142); ASGNU4
     912/    149C :                     ;   idx = 0 ;
     913/    149C : (MACRO)             	ld2z R11
     914/    14A0 : (MACRO)             	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
     915/    14AD : C0 15 9B            	lbr L103
     916/    14B0 :                     L102:
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 17 - 5/23/2013 16:52:22


     917/    14B0 :                     ;   while (wholeNum != 0) {
     918/    14B0 :                     ;      tbfr[idx++] = '0' + (wholeNum % 10) ;
     919/    14B0 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
     920/    14BC : (MACRO)             	st2 R11,'O',sp,(-130+142); ASGNU2(addr,reg)*
     921/    14C9 : (MACRO)             	cpy2 R10,R11
     922/    14CD : (MACRO)             	incm R10,1
     923/    14CE : (MACRO)             	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
     924/    14DB : (MACRO)             	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
     925/    14EB : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     926/    14F7 : (MACRO)             	Ccall _modu4
     927/    14FA : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     928/    1502 : (MACRO)             	ldA2 R9,'O',sp,(-48+142); reg:addr
     929/    150A : (MACRO)             	ld2 R8,'O',sp,(-130+142); reg:INDIRU2(addr)
     930/    1516 : (MACRO)             	alu2 R9,R8,R9,add,adc
     931/    1522 : (MACRO)             	st2 R9,'O',sp,(-132+142); ASGNP2
     932/    152F : (MACRO)             	ldI4 RL8,48 ;loading a long unsigned constant
     933/    153B : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     934/    1551 : (MACRO)             	cpy1 R11,RL10;LOADU1(reg)
     935/    1553 : (MACRO)             	ld2 R10,'O',sp,(-132+142);reg:  INDIRP2(addr)
     936/    155F : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
     937/    1561 :                     ;      wholeNum /= 10 ;
     938/    1561 : (MACRO)             	ld4 RL8,'O',sp,(-8+142);reg:  INDIRU4(addr)
     939/    1571 : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     940/    157D : (MACRO)             	Ccall _divu4
     941/    1580 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     942/    1588 : (MACRO)             	st4 RL10,'O',sp,(-8+142); ASGNU4
     943/    159B :                     ;   }
     944/    159B :                     L103:
     945/    159B :                     ;   while (wholeNum != 0) {
     946/    159B : (MACRO)             	ld4 RL10,'O',sp,(-8+142);reg:  INDIRU4(addr)
     947/    15AB : (MACRO)             	ldI4 RL8,0 ;loading a long unsigned constant
     948/    15B7 : (MACRO)             	jneU4 rL10,rL8,L102; NE
     949/    15DE :                     ;   if (idx == 0) {
     950/    15DE : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
     951/    15EA : (MACRO)             	jnzU2 r11,L108; NE 0
     952/    15F2 :                     ;      *output++ = '0' ;
     953/    15F2 : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
     954/    15FE : (MACRO)             	cpy2 R10,R11
     955/    1602 : (MACRO)             	incm R10,1
     956/    1603 : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
     957/    1610 : (MACRO)             	ldaD R10,48; reg:acon
     958/    1616 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     959/    1618 :                     ;   } else {
     960/    1618 : C0 16 8C            	lbr L106
     961/    161B :                     L107:
     962/    161B :                     ;      while (idx > 0) {
     963/    161B :                     ;         *output++ = tbfr[idx-1] ;  //lint !e771
     964/    161B : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
     965/    1627 : (MACRO)             	cpy2 R10,R11
     966/    162B : (MACRO)             	incm R10,1
     967/    162C : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
     968/    1639 : (MACRO)             	ld2 R10,'O',sp,(-4+142); reg:INDIRU2(addr)
     969/    1645 : (MACRO)             	decm R10,1
     970/    1646 : (MACRO)             	ldA2 R9,'O',sp,(-48+142); reg:addr
     971/    164E : (MACRO)             	alu2 R10,R10,R9,add,adc
     972/    165A : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     973/    165C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     974/    165E :                     ;         idx-- ;
     975/    165E : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
     976/    166A : (MACRO)             	decm R11,1
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 18 - 5/23/2013 16:52:23


     977/    166B : (MACRO)             	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
     978/    1678 :                     ;      }
     979/    1678 :                     L108:
     980/    1678 :                     ;      while (idx > 0) {
     981/    1678 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
     982/    1684 : (MACRO)             	jnzU2 r11,L107; NE 0
     983/    168C :                     ;   }
     984/    168C :                     L106:
     985/    168C :                     ;   if (dec_digits > 0) {
     986/    168C : (MACRO)             	jeqU2I r7,0,L110;EQU2(reg,con)
     987/    1698 :                     ;      *output++ = '.' ;
     988/    1698 : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
     989/    16A4 : (MACRO)             	cpy2 R10,R11
     990/    16A8 : (MACRO)             	incm R10,1
     991/    16A9 : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
     992/    16B6 : (MACRO)             	ldaD R10,46; reg:acon
     993/    16BC : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     994/    16BE :                     ;      idx = 0 ;
     995/    16BE : (MACRO)             	ld2z R11
     996/    16C2 : (MACRO)             	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
     997/    16CF : C0 17 BD            	lbr L113
     998/    16D2 :                     L112:
     999/    16D2 :                     ;      while (decimalNum != 0) {
    1000/    16D2 :                     ;         tbfr[idx++] = '0' + (decimalNum % 10) ;
    1001/    16D2 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1002/    16DE : (MACRO)             	st2 R11,'O',sp,(-130+142); ASGNU2(addr,reg)*
    1003/    16EB : (MACRO)             	cpy2 R10,R11
    1004/    16EF : (MACRO)             	incm R10,1
    1005/    16F0 : (MACRO)             	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
    1006/    16FD : (MACRO)             	ld4 RL8,'O',sp,(-52+142);reg:  INDIRU4(addr)
    1007/    170D : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
    1008/    1719 : (MACRO)             	Ccall _modu4
    1009/    171C : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1010/    1724 : (MACRO)             	ldA2 R9,'O',sp,(-48+142); reg:addr
    1011/    172C : (MACRO)             	ld2 R8,'O',sp,(-130+142); reg:INDIRU2(addr)
    1012/    1738 : (MACRO)             	alu2 R9,R8,R9,add,adc
    1013/    1744 : (MACRO)             	st2 R9,'O',sp,(-132+142); ASGNP2
    1014/    1751 : (MACRO)             	ldI4 RL8,48 ;loading a long unsigned constant
    1015/    175D : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    1016/    1773 : (MACRO)             	cpy1 R11,RL10;LOADU1(reg)
    1017/    1775 : (MACRO)             	ld2 R10,'O',sp,(-132+142);reg:  INDIRP2(addr)
    1018/    1781 : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
    1019/    1783 :                     ;         decimalNum /= 10 ;
    1020/    1783 : (MACRO)             	ld4 RL8,'O',sp,(-52+142);reg:  INDIRU4(addr)
    1021/    1793 : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
    1022/    179F : (MACRO)             	Ccall _divu4
    1023/    17A2 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
    1024/    17AA : (MACRO)             	st4 RL10,'O',sp,(-52+142); ASGNU4
    1025/    17BD :                     ;      }
    1026/    17BD :                     L113:
    1027/    17BD :                     ;      while (decimalNum != 0) {
    1028/    17BD : (MACRO)             	ld4 RL10,'O',sp,(-52+142);reg:  INDIRU4(addr)
    1029/    17CD : (MACRO)             	ldI4 RL8,0 ;loading a long unsigned constant
    1030/    17D9 : (MACRO)             	jneU4 rL10,rL8,L112; NE
    1031/    1800 : C0 18 3D            	lbr L116
    1032/    1803 :                     L115:
    1033/    1803 :                     ;      while (idx < dec_digits) {
    1034/    1803 :                     ;         tbfr[idx++] = '0' ;
    1035/    1803 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1036/    180F : (MACRO)             	cpy2 R10,R11
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 19 - 5/23/2013 16:52:23


    1037/    1813 : (MACRO)             	incm R10,1
    1038/    1814 : (MACRO)             	st2 R10,'O',sp,(-4+142); ASGNU2(addr,reg)*
    1039/    1821 : (MACRO)             	ldA2 R10,'O',sp,(-48+142); reg:addr
    1040/    1829 : (MACRO)             	alu2 R11,R11,R10,add,adc
    1041/    1835 : (MACRO)             	ldaD R10,48; reg:acon
    1042/    183B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1043/    183D :                     ;      }
    1044/    183D :                     L116:
    1045/    183D :                     ;      while (idx < dec_digits) {
    1046/    183D : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1047/    1849 : (MACRO)             	jcU2 r11,r7,lbnf,L115; LT=lbnf i.e. subtract B from A and jump if borrow 
    1048/    1856 :                     ;      if (idx == 0) {
    1049/    1856 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1050/    1862 : (MACRO)             	jnzU2 r11,L121; NE 0
    1051/    186A :                     ;         *output++ = '0' ;
    1052/    186A : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
    1053/    1876 : (MACRO)             	cpy2 R10,R11
    1054/    187A : (MACRO)             	incm R10,1
    1055/    187B : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
    1056/    1888 : (MACRO)             	ldaD R10,48; reg:acon
    1057/    188E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1058/    1890 :                     ;      } else {
    1059/    1890 : C0 19 04            	lbr L119
    1060/    1893 :                     L120:
    1061/    1893 :                     ;         while (idx > 0) {
    1062/    1893 :                     ;            *output++ = tbfr[idx-1] ;
    1063/    1893 : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
    1064/    189F : (MACRO)             	cpy2 R10,R11
    1065/    18A3 : (MACRO)             	incm R10,1
    1066/    18A4 : (MACRO)             	st2 R10,'O',sp,(-54+142); ASGNP2
    1067/    18B1 : (MACRO)             	ld2 R10,'O',sp,(-4+142); reg:INDIRU2(addr)
    1068/    18BD : (MACRO)             	decm R10,1
    1069/    18BE : (MACRO)             	ldA2 R9,'O',sp,(-48+142); reg:addr
    1070/    18C6 : (MACRO)             	alu2 R10,R10,R9,add,adc
    1071/    18D2 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    1072/    18D4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1073/    18D6 :                     ;            idx-- ;
    1074/    18D6 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1075/    18E2 : (MACRO)             	decm R11,1
    1076/    18E3 : (MACRO)             	st2 R11,'O',sp,(-4+142); ASGNU2(addr,reg)*
    1077/    18F0 :                     ;         }
    1078/    18F0 :                     L121:
    1079/    18F0 :                     ;         while (idx > 0) {
    1080/    18F0 : (MACRO)             	ld2 R11,'O',sp,(-4+142); reg:INDIRU2(addr)
    1081/    18FC : (MACRO)             	jnzU2 r11,L120; NE 0
    1082/    1904 :                     ;      }
    1083/    1904 :                     L119:
    1084/    1904 :                     ;   }
    1085/    1904 :                     L110:
    1086/    1904 :                     ;   *output = 0 ;
    1087/    1904 : (MACRO)             	ld2 R11,'O',sp,(-54+142);reg:  INDIRP2(addr)
    1088/    1910 : (MACRO)             	ldaD R10,0; reg:acon
    1089/    1916 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1090/    1918 :                     ;   return outbfr;
    1091/    1918 : (MACRO)             	ld2 R15,'O',sp,(4+142);reg:  INDIRP2(addr)
    1092/    1924 :                     L82:
    1093/    1924 : (MACRO)             	release 4; release room for outgoing arguments
    1094/    1928 : (MACRO)             	popr r7
    1095/    192C : (MACRO)             	popr r1
    1096/    1930 : (MACRO)             	popr r0
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 20 - 5/23/2013 16:52:23


    1097/    1934 : (MACRO)             	release 130; release room for local variables 
    1098/    193C : (MACRO)             	Cretn
    1099/    193D :                     
    1100/    193D :                     _itoa:
    1101/    193D : (MACRO)             	reserve 4; save room for local variables
    1102/    1941 : (MACRO)             	pushr r0
    1103/    1946 : (MACRO)             	pushr r1
    1104/    194B : (MACRO)             	pushr r7
    1105/    1950 : (MACRO)             	reserve 4; save room for outgoing arguments
    1106/    1954 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1107/    1961 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    1108/    196E :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    1109/    196E :                     ;	unsigned int flag=0;
    1110/    196E : (MACRO)             	ld2z R11
    1111/    1972 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
    1112/    197F :                     ;	char * bptr; bptr=buffer;
    1113/    197F : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    1114/    198B : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    1115/    1998 :                     ;	if (s<0){
    1116/    1998 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1117/    19A4 : (MACRO)             	jcI2I r11,0,lbdf,L124; GE is flipped test from LT
    1118/    19B5 :                     ;		*bptr='-';bptr++;
    1119/    19B5 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    1120/    19C1 : (MACRO)             	ldaD R10,45; reg:acon
    1121/    19C7 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1122/    19C9 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    1123/    19D5 : (MACRO)             	incm R11,1
    1124/    19D6 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    1125/    19E3 :                     ;		n=-s;
    1126/    19E3 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1127/    19EF : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    1128/    19F8 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
    1129/    19FC :                     ;	} else{
    1130/    19FC : C0 1A 0F            	lbr L125
    1131/    19FF :                     L124:
    1132/    19FF :                     ;		n=s;
    1133/    19FF : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    1134/    1A0B : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
    1135/    1A0F :                     ;	}
    1136/    1A0F :                     L125:
    1137/    1A0F :                     ;	k=10000;
    1138/    1A0F : (MACRO)             	ldaD R7,10000; reg:acon
    1139/    1A15 : C0 1A B9            	lbr L127
    1140/    1A18 :                     L126:
    1141/    1A18 :                     ;	while(k>0){
    1142/    1A18 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    1143/    1A18 : (MACRO)             	ld2z R0
    1144/    1A1C : C0 1A 2C            	lbr L132
    1145/    1A1F :                     L129:
    1146/    1A1F :                     L130:
    1147/    1A1F : (MACRO)             	incm R0,1
    1148/    1A20 : (MACRO)             	alu2 R1,R1,R7,sm,smb
    1149/    1A2C :                     L132:
    1150/    1A2C : (MACRO)             	jcU2 r1,r7,lbdf,L129 ;LE is flipped test & operands
    1151/    1A39 :                     ;		if (flag || r>0||k==1){
    1152/    1A39 : (MACRO)             	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
    1153/    1A45 : (MACRO)             	jnzU2 r11,L136; NE 0
    1154/    1A4D : (MACRO)             	jnzU2 r0,L136; NE 0
    1155/    1A55 : (MACRO)             	jneU2I r7,1,L133; NE
    1156/    1A61 :                     L136:
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 21 - 5/23/2013 16:52:23


    1157/    1A61 :                     ;			*bptr=('0'+r);bptr++;
    1158/    1A61 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    1159/    1A6D : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
    1160/    1A75 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1161/    1A77 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    1162/    1A83 : (MACRO)             	incm R11,1
    1163/    1A84 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    1164/    1A91 :                     ;			flag='y';
    1165/    1A91 : (MACRO)             	ldaD R11,121; reg:acon
    1166/    1A97 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
    1167/    1AA4 :                     ;		}
    1168/    1AA4 :                     L133:
    1169/    1AA4 :                     ;		k=k/10;
    1170/    1AA4 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1171/    1AA8 : (MACRO)             	ldaD R13,10; reg:acon
    1172/    1AAE : (MACRO)             	Ccall _divu2
    1173/    1AB1 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1174/    1AB5 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
    1175/    1AB9 :                     ;	}
    1176/    1AB9 :                     L127:
    1177/    1AB9 :                     ;	while(k>0){
    1178/    1AB9 : (MACRO)             	jnzU2 r7,L126; NE 0
    1179/    1AC1 :                     ;	*bptr='\0';
    1180/    1AC1 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    1181/    1ACD : (MACRO)             	ldaD R10,0; reg:acon
    1182/    1AD3 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1183/    1AD5 :                     ;	return buffer;
    1184/    1AD5 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    1185/    1AE1 :                     L123:
    1186/    1AE1 : (MACRO)             	release 4; release room for outgoing arguments
    1187/    1AE5 : (MACRO)             	popr r7
    1188/    1AE9 : (MACRO)             	popr r1
    1189/    1AED : (MACRO)             	popr r0
    1190/    1AF1 : (MACRO)             	release 4; release room for local variables 
    1191/    1AF5 : (MACRO)             	Cretn
    1192/    1AF6 :                     
    1193/    1AF6 :                     _ltoa:
    1194/    1AF6 : (MACRO)             	reserve 0; save room for local variables
    1195/    1AF6 : (MACRO)             	pushr r0
    1196/    1AFB : (MACRO)             	pushr r1
    1197/    1B00 : (MACRO)             	pushr r7
    1198/    1B05 : (MACRO)             	reserve 6; save room for outgoing arguments
    1199/    1B0B : (MACRO)             	cpy4 RL0,RL12; halfbaked
    1200/    1B13 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    1201/    1B13 :                     ;	char* bptr=buffer;
    1202/    1B13 : (MACRO)             	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
    1203/    1B1F :                     ;	if (s<0){
    1204/    1B1F : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    1205/    1B2B : (MACRO)             	jcI4 RL0,RL10,lbdf,L138; GE is flipped test from LT
    1206/    1B47 :                     ;		*bptr++='-';
    1207/    1B47 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    1208/    1B4B : (MACRO)             	cpy2 R7,R11
    1209/    1B4F : (MACRO)             	incm R7,1
    1210/    1B50 : (MACRO)             	ldaD R10,45; reg:acon
    1211/    1B56 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1212/    1B58 :                     ;		s=-s;
    1213/    1B58 : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
    1214/    1B78 :                     ;	}
    1215/    1B78 :                     L138:
    1216/    1B78 :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 22 - 5/23/2013 16:52:23


    1217/    1B78 : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
    1218/    1B80 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
    1219/    1B8D : (MACRO)             	Ccall _dubdabx
    1220/    1B90 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1221/    1B94 : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
    1222/    1B98 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    1223/    1B9C : (MACRO)             	Ccall _strcpy
    1224/    1B9F :                     ;	return buffer;
    1225/    1B9F : (MACRO)             	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
    1226/    1BAB :                     L137:
    1227/    1BAB : (MACRO)             	release 6; release room for outgoing arguments
    1228/    1BB1 : (MACRO)             	popr r7
    1229/    1BB5 : (MACRO)             	popr r1
    1230/    1BB9 : (MACRO)             	popr r0
    1231/    1BBD : (MACRO)             	release 0; release room for local variables 
    1232/    1BBD : (MACRO)             	Cretn
    1233/    1BBE :                     
    1234/    1BBE :                     _printint:
    1235/    1BBE : (MACRO)             	reserve 12
    1236/    1BC8 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    1237/    1BD5 :                     ;void printint(int s){ //print an integer
    1238/    1BD5 :                     ;	itoa(s,buffer);
    1239/    1BD5 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    1240/    1BE1 : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    1241/    1BE9 : (MACRO)             	Ccall _itoa
    1242/    1BEC :                     ;	printstr(buffer);
    1243/    1BEC : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    1244/    1BF4 : (MACRO)             	Ccall _printstr
    1245/    1BF7 :                     ;}
    1246/    1BF7 :                     L140:
    1247/    1BF7 : (MACRO)             	release 12
    1248/    1BFF : (MACRO)             	Cretn
    1249/    1C00 :                     
    1250/    1C00 :                     _printlint:
    1251/    1C00 : (MACRO)             	reserve 18
    1252/    1C0A : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    1253/    1C17 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    1254/    1C24 :                     ;void printlint(long s){ //print a long integer
    1255/    1C24 :                     ;	printstr(ltoa(s,buffer));
    1256/    1C24 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    1257/    1C34 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    1258/    1C3C : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1259/    1C49 : (MACRO)             	Ccall _ltoa
    1260/    1C4C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1261/    1C50 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1262/    1C54 : (MACRO)             	Ccall _printstr
    1263/    1C57 :                     ;}
    1264/    1C57 :                     L141:
    1265/    1C57 : (MACRO)             	release 18
    1266/    1C5F : (MACRO)             	Cretn
    1267/    1C60 :                     
    1268/    1C60 :                     _printflt:
    1269/    1C60 : (MACRO)             	reserve 24
    1270/    1C6A : (MACRO)             	st2 r12,'O',sp,(26); flag1 
    1271/    1C77 : (MACRO)             	st2 r13,'O',sp,(28); flag1 
    1272/    1C84 :                     ;void printflt(float s){ //print a float
    1273/    1C84 :                     ;	printstr(ftoa(s,buffer,6));
    1274/    1C84 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+26);INDIRF4(addr)
    1275/    1C94 : (MACRO)             	ldA2 R11,'O',sp,(-18+26); reg:addr
    1276/    1C9C : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 23 - 5/23/2013 16:52:23


    1277/    1CA9 : (MACRO)             	ldaD R11,6; reg:acon
    1278/    1CAF : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1279/    1CBC : (MACRO)             	Ccall _ftoa
    1280/    1CBF : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    1281/    1CC3 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1282/    1CC7 : (MACRO)             	Ccall _printstr
    1283/    1CCA :                     ;}
    1284/    1CCA :                     L142:
    1285/    1CCA : (MACRO)             	release 24
    1286/    1CD2 : (MACRO)             	Cretn
    1287/    1CD3 :                     
    1288/    1CD3 :                     _putxn:
    1289/    1CD3 : (MACRO)             	reserve 4
    1290/    1CD7 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1291/    1CE4 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1292/    1CF0 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1293/    1CFA :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    1294/    1CFA :                     ;	if (x<10){
    1295/    1CFA : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1296/    1D04 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1297/    1D07 : (MACRO)             	jcI2I r11,10,lbdf,L144; GE is flipped test from LT
    1298/    1D18 :                     ;		putc(x+'0');
    1299/    1D18 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1300/    1D22 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1301/    1D25 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    1302/    1D2D : (MACRO)             	cpy1 R12,R11
    1303/    1D2F : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1304/    1D32 : (MACRO)             	Ccall _putc
    1305/    1D35 :                     ;	} else {
    1306/    1D35 : C0 1D 5D            	lbr L145
    1307/    1D38 :                     L144:
    1308/    1D38 :                     ;		putc(x+'A'-10);
    1309/    1D38 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1310/    1D42 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1311/    1D45 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    1312/    1D4D : (MACRO)             	alu2I R11,R11,10,smi,smbi
    1313/    1D55 : (MACRO)             	cpy1 R12,R11
    1314/    1D57 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1315/    1D5A : (MACRO)             	Ccall _putc
    1316/    1D5D :                     ;	}
    1317/    1D5D :                     L145:
    1318/    1D5D :                     ;}
    1319/    1D5D :                     L143:
    1320/    1D5D : (MACRO)             	release 4
    1321/    1D61 : (MACRO)             	Cretn
    1322/    1D62 :                     
    1323/    1D62 :                     _putx:
    1324/    1D62 : (MACRO)             	reserve 4
    1325/    1D66 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1326/    1D73 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1327/    1D7F : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1328/    1D89 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    1329/    1D89 :                     ;	putxn(x>>4);
    1330/    1D89 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1331/    1D93 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1332/    1D96 : (MACRO)             	shrI2I R11,4
    1333/    1DB6 : (MACRO)             	cpy1 R12,R11
    1334/    1DB8 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1335/    1DBB : (MACRO)             	Ccall _putxn
    1336/    1DBE :                     ;	putxn(x & 0x0F);
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 24 - 5/23/2013 16:52:23


    1337/    1DBE : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1338/    1DC8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1339/    1DCB : (MACRO)             	alu2I R11,R11,15,ani,ani
    1340/    1DD3 :                     	;removed ?	cpy2 R11,R11
    1341/    1DD3 : (MACRO)             	cpy1 R12,R11
    1342/    1DD5 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1343/    1DD8 : (MACRO)             	Ccall _putxn
    1344/    1DDB :                     ;}
    1345/    1DDB :                     L146:
    1346/    1DDB : (MACRO)             	release 4
    1347/    1DDF : (MACRO)             	Cretn
    1348/    1DE0 :                     
    1349/    1DE0 :                     _printf:
    1350/    1DE0 : (MACRO)             	reserve 4; save room for local variables
    1351/    1DE4 : (MACRO)             	pushr r0
    1352/    1DE9 : (MACRO)             	pushr r1
    1353/    1DEE : (MACRO)             	pushr r7
    1354/    1DF3 : (MACRO)             	reserve 4; save room for outgoing arguments
    1355/    1DF7 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    1356/    1E04 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    1357/    1E11 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    1358/    1E11 :                     ;	int argslot=0;	//used to align longs
    1359/    1E11 : (MACRO)             	ld2z R0
    1360/    1E15 :                     ;	int * this=(int *)&ptr;
    1361/    1E15 : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
    1362/    1E1D :                     ;	this++; argslot++; //advance argument pointer and slot #
    1363/    1E1D : (MACRO)             	incm R1,2
    1364/    1E1F : (MACRO)             	incm R0,1
    1365/    1E20 : C0 21 F6            	lbr L149
    1366/    1E23 :                     L148:
    1367/    1E23 :                     ;    while(*ptr) {
    1368/    1E23 :                     ;		c=*ptr++;
    1369/    1E23 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1370/    1E2F : (MACRO)             	cpy2 R10,R11
    1371/    1E33 : (MACRO)             	incm R10,1
    1372/    1E34 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1373/    1E41 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1374/    1E43 :                     ;		if (c!='%'){
    1375/    1E43 : (MACRO)             	cpy1 R11,R7
    1376/    1E45 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1377/    1E48 : (MACRO)             	jeqU2I r11,37,L151;EQI2(reg,con)
    1378/    1E54 :                     ;			putc(c);
    1379/    1E54 : (MACRO)             	cpy1 R12,R7
    1380/    1E56 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1381/    1E59 : (MACRO)             	Ccall _putc
    1382/    1E5C :                     ;		} else{
    1383/    1E5C : C0 21 F6            	lbr L152
    1384/    1E5F :                     L151:
    1385/    1E5F :                     ;			c=*ptr++;
    1386/    1E5F : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1387/    1E6B : (MACRO)             	cpy2 R10,R11
    1388/    1E6F : (MACRO)             	incm R10,1
    1389/    1E70 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1390/    1E7D : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    1391/    1E7F :                     ;			switch (c){
    1392/    1E7F : (MACRO)             	cpy1 R11,R7
    1393/    1E81 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1394/    1E84 : (MACRO)             	st2 R11,'O',sp,(-5+16)
    1395/    1E91 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    1396/    1E9D : (MACRO)             	jcI2I r11,99,lbnf,L172  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 25 - 5/23/2013 16:52:23


    1397/    1EAE : (MACRO)             	jnI2I r11,108,lbnf,L173; GT reverse  the subtraction
    1398/    1EBF : (MACRO)             	shl2I R11,1
    1399/    1EC5 : (MACRO)             	ld2 R11,'O',R11,(L174-198);reg:  INDIRP2(addr)
    1400/    1ED1 : (MACRO)             	jumpv r11; JUMPV(reg)
    1401/    1EDB :                     L174:
    1402/    1EDB : 1F 9B               	dw L158
    1403/    1EDD : 1F 5D               	dw L156
    1404/    1EDF : 21 E5               	dw L153
    1405/    1EE1 : 21 95               	dw L167
    1406/    1EE3 : 21 E5               	dw L153
    1407/    1EE5 : 21 E5               	dw L153
    1408/    1EE7 : 1F 5D               	dw L156
    1409/    1EE9 : 21 E5               	dw L153
    1410/    1EEB : 21 E5               	dw L153
    1411/    1EED : 20 2B               	dw L160
    1412/    1EEF :                     L172:
    1413/    1EEF : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    1414/    1EFB : (MACRO)             	jeqU2I r11,88,L159;EQI2(reg,con)
    1415/    1F07 : C0 21 E5            	lbr L153
    1416/    1F0A :                     L173:
    1417/    1F0A : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    1418/    1F16 : (MACRO)             	ldaD R10,115; reg:acon
    1419/    1F1C : (MACRO)             	jeqI2 r11,r10,L157; EQI2(reg,reg)
    1420/    1F2E : (MACRO)             	jcI2 r11,r10,lbnf,L153; LT=lbnf i.e. subtract B from A and jump if borrow 
    1421/    1F42 :                     L176:
    1422/    1F42 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    1423/    1F4E : (MACRO)             	jeqU2I r11,120,L159;EQI2(reg,con)
    1424/    1F5A : C0 21 E5            	lbr L153
    1425/    1F5D :                     L156:
    1426/    1F5D :                     ;					printint(*this++);
    1427/    1F5D : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1428/    1F61 : (MACRO)             	cpy2 R1,R11
    1429/    1F65 : (MACRO)             	incm R1,2
    1430/    1F67 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    1431/    1F73 : (MACRO)             	Ccall _printint
    1432/    1F76 :                     ;					argslot+=1; //next argument slot
    1433/    1F76 : (MACRO)             	incm R0,1
    1434/    1F77 :                     ;					break;
    1435/    1F77 : C0 21 F6            	lbr L154
    1436/    1F7A :                     L157:
    1437/    1F7A :                     ;					printstr((char*) *this++);
    1438/    1F7A : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1439/    1F7E : (MACRO)             	cpy2 R1,R11
    1440/    1F82 : (MACRO)             	incm R1,2
    1441/    1F84 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1442/    1F90 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    1443/    1F94 : (MACRO)             	Ccall _printstr
    1444/    1F97 :                     ;					argslot+=1; //next argument slot
    1445/    1F97 : (MACRO)             	incm R0,1
    1446/    1F98 :                     ;					break;
    1447/    1F98 : C0 21 F6            	lbr L154
    1448/    1F9B :                     L158:
    1449/    1F9B :                     ;					putc((unsigned int) *this++);
    1450/    1F9B : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1451/    1F9F : (MACRO)             	cpy2 R1,R11
    1452/    1FA3 : (MACRO)             	incm R1,2
    1453/    1FA5 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1454/    1FB1 : (MACRO)             	cpy1 R12,R11
    1455/    1FB3 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1456/    1FB6 : (MACRO)             	Ccall _putc
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 26 - 5/23/2013 16:52:23


    1457/    1FB9 :                     ;					argslot+=1; //next argument slot
    1458/    1FB9 : (MACRO)             	incm R0,1
    1459/    1FBA :                     ;					break;
    1460/    1FBA : C0 21 F6            	lbr L154
    1461/    1FBD :                     L159:
    1462/    1FBD :                     ;					putx(((unsigned int) *this)>>8);
    1463/    1FBD : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    1464/    1FC9 : (MACRO)             	shrU2I R11,8
    1465/    1FF9 : (MACRO)             	cpy1 R12,R11
    1466/    1FFB : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1467/    1FFE : (MACRO)             	Ccall _putx
    1468/    2001 :                     ;					putx(((unsigned int) *this++)&255);
    1469/    2001 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1470/    2005 : (MACRO)             	cpy2 R1,R11
    1471/    2009 : (MACRO)             	incm R1,2
    1472/    200B : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1473/    2017 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1474/    201F : (MACRO)             	cpy1 R12,R11
    1475/    2021 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1476/    2024 : (MACRO)             	Ccall _putx
    1477/    2027 :                     ;					argslot+=1; //next argument slot
    1478/    2027 : (MACRO)             	incm R0,1
    1479/    2028 :                     ;					break;
    1480/    2028 : C0 21 F6            	lbr L154
    1481/    202B :                     L160:
    1482/    202B :                     ;					if (*ptr){ //as long as there's something there
    1483/    202B : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1484/    2037 : (MACRO)             	ld1 R11,'O',R11,0
    1485/    2041 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1486/    2044 : (MACRO)             	jzU2 r11,L161; EQ 0
    1487/    204C :                     ;						xord=*ptr++;
    1488/    204C : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1489/    2058 : (MACRO)             	cpy2 R10,R11
    1490/    205C : (MACRO)             	incm R10,1
    1491/    205D : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    1492/    206A : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1493/    206C : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    1494/    2076 :                     ;						if (argslot&1) {
    1495/    2076 : (MACRO)             	alu2I R11,R0,1,ani,ani
    1496/    207E :                     	;removed ?	cpy2 R11,R0
    1497/    207E : (MACRO)             	jzU2 r11,L163; EQ 0
    1498/    2086 :                     ;							this++;
    1499/    2086 : (MACRO)             	incm R1,2
    1500/    2088 :                     ;							argslot++;
    1501/    2088 : (MACRO)             	incm R0,1
    1502/    2089 :                     ;						}
    1503/    2089 :                     L163:
    1504/    2089 :                     ;						if(xord=='d'){
    1505/    2089 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    1506/    2093 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1507/    2096 : (MACRO)             	jneU2I r11,100,L165; NE
    1508/    20A2 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    1509/    20A2 : (MACRO)             	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
    1510/    20B2 : (MACRO)             	Ccall _printlint
    1511/    20B5 :                     ;							this+=2;				// and advances it 4 bytes
    1512/    20B5 : (MACRO)             	incm R1,4
    1513/    20B9 :                     ;						} else{
    1514/    20B9 : C0 21 90            	lbr L166
    1515/    20BC :                     L165:
    1516/    20BC :                     ;							putx(((unsigned int) *this)>>8);
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 27 - 5/23/2013 16:52:23


    1517/    20BC : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    1518/    20C8 : (MACRO)             	shrU2I R11,8
    1519/    20F8 : (MACRO)             	cpy1 R12,R11
    1520/    20FA : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1521/    20FD : (MACRO)             	Ccall _putx
    1522/    2100 :                     ;							putx(((unsigned int) *this++)&255);
    1523/    2100 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1524/    2104 : (MACRO)             	cpy2 R1,R11
    1525/    2108 : (MACRO)             	incm R1,2
    1526/    210A : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1527/    2116 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1528/    211E : (MACRO)             	cpy1 R12,R11
    1529/    2120 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1530/    2123 : (MACRO)             	Ccall _putx
    1531/    2126 :                     ;							putx(((unsigned int) *this)>>8);
    1532/    2126 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    1533/    2132 : (MACRO)             	shrU2I R11,8
    1534/    2162 : (MACRO)             	cpy1 R12,R11
    1535/    2164 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1536/    2167 : (MACRO)             	Ccall _putx
    1537/    216A :                     ;							putx(((unsigned int) *this++)&255);
    1538/    216A : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1539/    216E : (MACRO)             	cpy2 R1,R11
    1540/    2172 : (MACRO)             	incm R1,2
    1541/    2174 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1542/    2180 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1543/    2188 : (MACRO)             	cpy1 R12,R11
    1544/    218A : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1545/    218D : (MACRO)             	Ccall _putx
    1546/    2190 :                     ;						}
    1547/    2190 :                     L166:
    1548/    2190 :                     ;						argslot+=2;
    1549/    2190 : (MACRO)             	incm R0,2
    1550/    2192 :                     ;						break;
    1551/    2192 : C0 21 F6            	lbr L154
    1552/    2195 :                     L161:
    1553/    2195 :                     L167:
    1554/    2195 :                     ;					if (*ptr){ //as long as there's something there
    1555/    2195 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1556/    21A1 : (MACRO)             	ld1 R11,'O',R11,0
    1557/    21AB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1558/    21AE : (MACRO)             	jzU2 r11,L168; EQ 0
    1559/    21B6 :                     ;						if (argslot&1) { //adjust alignment
    1560/    21B6 : (MACRO)             	alu2I R11,R0,1,ani,ani
    1561/    21BE :                     	;removed ?	cpy2 R11,R0
    1562/    21BE : (MACRO)             	jzU2 r11,L170; EQ 0
    1563/    21C6 :                     ;							this++;
    1564/    21C6 : (MACRO)             	incm R1,2
    1565/    21C8 :                     ;							argslot++;
    1566/    21C8 : (MACRO)             	incm R0,1
    1567/    21C9 :                     ;						}
    1568/    21C9 :                     L170:
    1569/    21C9 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
    1570/    21C9 : (MACRO)             	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
    1571/    21D9 : (MACRO)             	Ccall _printflt
    1572/    21DC :                     ;						this+=2;				// and advances it 4 bytes
    1573/    21DC : (MACRO)             	incm R1,4
    1574/    21E0 :                     ;						argslot+=2;
    1575/    21E0 : (MACRO)             	incm R0,2
    1576/    21E2 :                     ;						break;
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 28 - 5/23/2013 16:52:23


    1577/    21E2 : C0 21 F6            	lbr L154
    1578/    21E5 :                     L168:
    1579/    21E5 :                     L153:
    1580/    21E5 :                     ;					putc('%');putc(c);
    1581/    21E5 : (MACRO)             	ldaD R12,37; reg:acon
    1582/    21EB : (MACRO)             	Ccall _putc
    1583/    21EE : (MACRO)             	cpy1 R12,R7
    1584/    21F0 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1585/    21F3 : (MACRO)             	Ccall _putc
    1586/    21F6 :                     ;			} //switch
    1587/    21F6 :                     L154:
    1588/    21F6 :                     ;		} //%
    1589/    21F6 :                     L152:
    1590/    21F6 :                     ;	} //while
    1591/    21F6 :                     L149:
    1592/    21F6 :                     ;    while(*ptr) {
    1593/    21F6 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1594/    2202 : (MACRO)             	ld1 R11,'O',R11,0
    1595/    220C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1596/    220F : (MACRO)             	jnzU2 r11,L148; NE 0
    1597/    2217 :                     ;} //prtf
    1598/    2217 :                     L147:
    1599/    2217 : (MACRO)             	release 4; release room for outgoing arguments
    1600/    221B : (MACRO)             	popr r7
    1601/    221F : (MACRO)             	popr r1
    1602/    2223 : (MACRO)             	popr r0
    1603/    2227 : (MACRO)             	release 4; release room for local variables 
    1604/    222B : (MACRO)             	Cretn
    1605/    222C :                     
    1606/    222C :                     _exit:
    1607/    222C : (MACRO)             	reserve 4
    1608/    2230 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1609/    223D :                     ;void exit(int code){
    1610/    223D :                     ;	printf("exit %d\n",code);
    1611/    223D : (MACRO)             	ldaD R12,L178; reg:acon
    1612/    2243 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1613/    224F : (MACRO)             	Ccall _printf
    1614/    2252 :                     L179:
    1615/    2252 :                     ;	while(1);
    1616/    2252 :                     L180:
    1617/    2252 : C0 22 52            	lbr L179
    1618/    2255 :                     ;}
    1619/    2255 :                     L177:
    1620/    2255 : (MACRO)             	release 4
    1621/    2259 : (MACRO)             	Cretn
    1622/    225A :                     
    1623/    225A :                     _memcmp:
    1624/    225A : (MACRO)             	reserve 2; save room for local variables
    1625/    225C : (MACRO)             	pushr r0
    1626/    2261 : (MACRO)             	pushr r1
    1627/    2266 : (MACRO)             	pushr r7
    1628/    226B : (MACRO)             	reserve 0; save room for outgoing arguments
    1629/    226B : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    1630/    2277 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1631/    2277 :                     ;    int v = 0;
    1632/    2277 : (MACRO)             	ld2z R1
    1633/    227B :                     ;    p1 = (unsigned char *)Ptr1;
    1634/    227B : (MACRO)             	cpy2 R0,R12 ;LOADP2(reg)
    1635/    227F :                     ;    p2 = (unsigned char *)Ptr2;
    1636/    227F : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 29 - 5/23/2013 16:52:23


    1637/    228C : C0 22 DC            	lbr L184
    1638/    228F :                     L183:
    1639/    228F :                     ;    while(Count-- > 0 && v == 0) {
    1640/    228F :                     ;        v = *(p1++) - *(p2++);
    1641/    228F : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
    1642/    2293 : (MACRO)             	cpy2 R0,R11
    1643/    2297 : (MACRO)             	incm R0,1
    1644/    2298 : (MACRO)             	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
    1645/    22A4 : (MACRO)             	cpy2 R9,R10
    1646/    22A8 : (MACRO)             	incm R9,1
    1647/    22A9 : (MACRO)             	st2 R9,'O',sp,(-4+10); ASGNP2
    1648/    22B6 : (MACRO)             	ld1 R11,'O',R11,0
    1649/    22C0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1650/    22C3 : (MACRO)             	ld1 R10,'O',R10,0
    1651/    22CD : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1652/    22D0 : (MACRO)             	alu2 R1,R11,R10,sm,smb
    1653/    22DC :                     ;    }
    1654/    22DC :                     L184:
    1655/    22DC :                     ;    while(Count-- > 0 && v == 0) {
    1656/    22DC : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1657/    22E0 : (MACRO)             	cpy2 R7,R11
    1658/    22E4 : (MACRO)             	decm R7,1
    1659/    22E5 : (MACRO)             	jeqU2I r11,0,L186;EQU2(reg,con)
    1660/    22F1 : (MACRO)             	jzU2 r1,L183; EQ 0
    1661/    22F9 :                     L186:
    1662/    22F9 :                     ;    return v;
    1663/    22F9 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)
    1664/    22FD :                     L182:
    1665/    22FD : (MACRO)             	release 0; release room for outgoing arguments
    1666/    22FD : (MACRO)             	popr r7
    1667/    2301 : (MACRO)             	popr r1
    1668/    2305 : (MACRO)             	popr r0
    1669/    2309 : (MACRO)             	release 2; release room for local variables 
    1670/    230B : (MACRO)             	Cretn
    1671/    230C :                     
    1672/    230C :                     _memcpy:
    1673/    230C : (MACRO)             	reserve 0; save room for local variables
    1674/    230C : (MACRO)             	pushr r0
    1675/    2311 : (MACRO)             	pushr r1
    1676/    2316 : (MACRO)             	pushr r7
    1677/    231B : (MACRO)             	reserve 0; save room for outgoing arguments
    1678/    231B : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    1679/    2327 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1680/    2327 :                     ;        char* dst8 = (char*)dest;
    1681/    2327 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1682/    232B :                     ;        char* src8 = (char*)src;
    1683/    232B : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    1684/    232F : C0 23 48            	lbr L189
    1685/    2332 :                     L188:
    1686/    2332 :                     ;        while (count--) {
    1687/    2332 :                     ;            *dst8++ = *src8++;
    1688/    2332 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1689/    2336 : (MACRO)             	cpy2 R1,R11
    1690/    233A : (MACRO)             	incm R1,1
    1691/    233B : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
    1692/    233F : (MACRO)             	cpy2 R0,R10
    1693/    2343 : (MACRO)             	incm R0,1
    1694/    2344 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    1695/    2346 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1696/    2348 :                     ;        }
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 30 - 5/23/2013 16:52:23


    1697/    2348 :                     L189:
    1698/    2348 :                     ;        while (count--) {
    1699/    2348 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1700/    234C : (MACRO)             	cpy2 R7,R11
    1701/    2350 : (MACRO)             	decm R7,1
    1702/    2351 : (MACRO)             	jnzU2 r11,L188; NE 0
    1703/    2359 :                     ;        return dest;
    1704/    2359 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1705/    235D :                     L187:
    1706/    235D : (MACRO)             	release 0; release room for outgoing arguments
    1707/    235D : (MACRO)             	popr r7
    1708/    2361 : (MACRO)             	popr r1
    1709/    2365 : (MACRO)             	popr r0
    1710/    2369 : (MACRO)             	release 0; release room for local variables 
    1711/    2369 : (MACRO)             	Cretn
    1712/    236A :                     
    1713/    236A :                     _memset:
    1714/    236A : (MACRO)             	reserve 0; save room for local variables
    1715/    236A : (MACRO)             	pushr r1
    1716/    236F : (MACRO)             	pushr r7
    1717/    2374 : (MACRO)             	reserve 0; save room for outgoing arguments
    1718/    2374 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1719/    2380 :                     ;{
    1720/    2380 :                     ;    unsigned char* p=s;
    1721/    2380 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1722/    2384 : C0 23 96            	lbr L193
    1723/    2387 :                     L192:
    1724/    2387 :                     ;        *p++ = (unsigned char)c;
    1725/    2387 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1726/    238B : (MACRO)             	cpy2 R1,R11
    1727/    238F : (MACRO)             	incm R1,1
    1728/    2390 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    1729/    2394 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1730/    2396 :                     L193:
    1731/    2396 :                     ;    while(n--)
    1732/    2396 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1733/    239A : (MACRO)             	cpy2 R7,R11
    1734/    239E : (MACRO)             	decm R7,1
    1735/    239F : (MACRO)             	jnzU2 r11,L192; NE 0
    1736/    23A7 :                     ;    return s;
    1737/    23A7 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1738/    23AB :                     L191:
    1739/    23AB : (MACRO)             	release 0; release room for outgoing arguments
    1740/    23AB : (MACRO)             	popr r7
    1741/    23AF : (MACRO)             	popr r1
    1742/    23B3 : (MACRO)             	release 0; release room for local variables 
    1743/    23B3 : (MACRO)             	Cretn
    1744/    23B4 :                     
    1745/    23B4 :                     L178:
    1746/    23B4 : 65                  	db 101
    1747/    23B5 : 78                  	db 120
    1748/    23B6 : 69                  	db 105
    1749/    23B7 : 74                  	db 116
    1750/    23B8 : 20                  	db 32
    1751/    23B9 : 25                  	db 37
    1752/    23BA : 64                  	db 100
    1753/    23BB : 0A                  	db 10
    1754/    23BC : 00                  	db 0
    1755/    23BD :                     	align 4
    1756/    23C0 :                     L101:
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 31 - 5/23/2013 16:52:23


    1757/    23C0 : 40 00 00 00         	dd 0x40000000
    1758/    23C4 :                     	align 4
    1759/    23C4 :                     L94:
    1760/    23C4 : 4F 00 00 00         	dd 0x4f000000
    1761/    23C8 :                     	align 4
    1762/    23C8 :                     L86:
    1763/    23C8 : BF 80 00 00         	dd 0xbf800000
    1764/    23CC :                     	align 4
    1765/    23CC :                     L85:
    1766/    23CC : 00 00 00 00         	dd 0x0
    1767/    23D0 :                     L61:
    1768/    23D0 : 6C                  	db 108
    1769/    23D1 : 6F                  	db 111
    1770/    23D2 : 6F                  	db 111
    1771/    23D3 : 70                  	db 112
    1772/    23D4 : 2E                  	db 46
    1773/    23D5 : 2E                  	db 46
    1774/    23D6 : 00                  	db 0
    1775/    23D7 :                     L60:
    1776/    23D7 : 6D                  	db 109
    1777/    23D8 : 69                  	db 105
    1778/    23D9 : 73                  	db 115
    1779/    23DA : 6F                  	db 111
    1780/    23DB : 20                  	db 32
    1781/    23DC : 69                  	db 105
    1782/    23DD : 73                  	db 115
    1783/    23DE : 20                  	db 32
    1784/    23DF : 25                  	db 37
    1785/    23E0 : 64                  	db 100
    1786/    23E1 : 0A                  	db 10
    1787/    23E2 : 00                  	db 0
    1788/    23E3 :                     L57:
    1789/    23E3 : 57                  	db 87
    1790/    23E4 : 69                  	db 105
    1791/    23E5 : 7A                  	db 122
    1792/    23E6 : 6E                  	db 110
    1793/    23E7 : 65                  	db 101
    1794/    23E8 : 74                  	db 116
    1795/    23E9 : 20                  	db 32
    1796/    23EA : 35                  	db 53
    1797/    23EB : 31                  	db 49
    1798/    23EC : 30                  	db 48
    1799/    23ED : 30                  	db 48
    1800/    23EE : 20                  	db 32
    1801/    23EF : 69                  	db 105
    1802/    23F0 : 6E                  	db 110
    1803/    23F1 : 69                  	db 105
    1804/    23F2 : 74                  	db 116
    1805/    23F3 : 69                  	db 105
    1806/    23F4 : 61                  	db 97
    1807/    23F5 : 6C                  	db 108
    1808/    23F6 : 69                  	db 105
    1809/    23F7 : 7A                  	db 122
    1810/    23F8 : 61                  	db 97
    1811/    23F9 : 74                  	db 116
    1812/    23FA : 69                  	db 105
    1813/    23FB : 6F                  	db 111
    1814/    23FC : 6E                  	db 110
    1815/    23FD : 0A                  	db 10
    1816/    23FE : 00                  	db 0
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 32 - 5/23/2013 16:52:23


    1817/    23FF :                     L56:
    1818/    23FF : 57                  	db 87
    1819/    2400 : 69                  	db 105
    1820/    2401 : 7A                  	db 122
    1821/    2402 : 6E                  	db 110
    1822/    2403 : 65                  	db 101
    1823/    2404 : 74                  	db 116
    1824/    2405 : 20                  	db 32
    1825/    2406 : 35                  	db 53
    1826/    2407 : 31                  	db 49
    1827/    2408 : 30                  	db 48
    1828/    2409 : 30                  	db 48
    1829/    240A : 20                  	db 32
    1830/    240B : 70                  	db 112
    1831/    240C : 69                  	db 105
    1832/    240D : 6E                  	db 110
    1833/    240E : 67                  	db 103
    1834/    240F : 6D                  	db 109
    1835/    2410 : 61                  	db 97
    1836/    2411 : 73                  	db 115
    1837/    2412 : 74                  	db 116
    1838/    2413 : 65                  	db 101
    1839/    2414 : 72                  	db 114
    1840/    2415 : 79                  	db 121
    1841/    2416 : 20                  	db 32
    1842/    2417 : 62                  	db 98
    1843/    2418 : 65                  	db 101
    1844/    2419 : 67                  	db 103
    1845/    241A : 69                  	db 105
    1846/    241B : 6E                  	db 110
    1847/    241C : 73                  	db 115
    1848/    241D : 20                  	db 32
    1849/    241E : 68                  	db 104
    1850/    241F : 65                  	db 101
    1851/    2420 : 72                  	db 114
    1852/    2421 : 65                  	db 101
    1853/    2422 : 21                  	db 33
    1854/    2423 : 0A                  	db 10
    1855/    2424 : 00                  	db 0
    1856/    2425 :                     L54:
    1857/    2425 : 44                  	db 68
    1858/    2426 : 6F                  	db 111
    1859/    2427 : 6E                  	db 110
    1860/    2428 : 65                  	db 101
    1861/    2429 : 20                  	db 32
    1862/    242A : 57                  	db 87
    1863/    242B : 69                  	db 105
    1864/    242C : 7A                  	db 122
    1865/    242D : 6E                  	db 110
    1866/    242E : 65                  	db 101
    1867/    242F : 74                  	db 116
    1868/    2430 : 20                  	db 32
    1869/    2431 : 57                  	db 87
    1870/    2432 : 35                  	db 53
    1871/    2433 : 31                  	db 49
    1872/    2434 : 30                  	db 48
    1873/    2435 : 30                  	db 48
    1874/    2436 : 20                  	db 32
    1875/    2437 : 49                  	db 73
    1876/    2438 : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 33 - 5/23/2013 16:52:23


    1877/    2439 : 69                  	db 105
    1878/    243A : 74                  	db 116
    1879/    243B : 69                  	db 105
    1880/    243C : 61                  	db 97
    1881/    243D : 6C                  	db 108
    1882/    243E : 69                  	db 105
    1883/    243F : 7A                  	db 122
    1884/    2440 : 61                  	db 97
    1885/    2441 : 74                  	db 116
    1886/    2442 : 69                  	db 105
    1887/    2443 : 6F                  	db 111
    1888/    2444 : 6E                  	db 110
    1889/    2445 : 21                  	db 33
    1890/    2446 : 0A                  	db 10
    1891/    2447 : 00                  	db 0
    1892/    2448 :                     L53:
    1893/    2448 : 53                  	db 83
    1894/    2449 : 65                  	db 101
    1895/    244A : 74                  	db 116
    1896/    244B : 74                  	db 116
    1897/    244C : 69                  	db 105
    1898/    244D : 6E                  	db 110
    1899/    244E : 67                  	db 103
    1900/    244F : 20                  	db 32
    1901/    2450 : 57                  	db 87
    1902/    2451 : 69                  	db 105
    1903/    2452 : 7A                  	db 122
    1904/    2453 : 6E                  	db 110
    1905/    2454 : 65                  	db 101
    1906/    2455 : 74                  	db 116
    1907/    2456 : 20                  	db 32
    1908/    2457 : 52                  	db 82
    1909/    2458 : 4D                  	db 77
    1910/    2459 : 53                  	db 83
    1911/    245A : 52                  	db 82
    1912/    245B : 20                  	db 32
    1913/    245C : 61                  	db 97
    1914/    245D : 6E                  	db 110
    1915/    245E : 64                  	db 100
    1916/    245F : 20                  	db 32
    1917/    2460 : 54                  	db 84
    1918/    2461 : 4D                  	db 77
    1919/    2462 : 53                  	db 83
    1920/    2463 : 52                  	db 82
    1921/    2464 : 0A                  	db 10
    1922/    2465 : 0A                  	db 10
    1923/    2466 : 00                  	db 0
    1924/    2467 :                     L52:
    1925/    2467 : 52                  	db 82
    1926/    2468 : 65                  	db 101
    1927/    2469 : 61                  	db 97
    1928/    246A : 64                  	db 100
    1929/    246B : 69                  	db 105
    1930/    246C : 6E                  	db 110
    1931/    246D : 67                  	db 103
    1932/    246E : 20                  	db 32
    1933/    246F : 53                  	db 83
    1934/    2470 : 49                  	db 73
    1935/    2471 : 50                  	db 80
    1936/    2472 : 52                  	db 82
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 34 - 5/23/2013 16:52:23


    1937/    2473 : 3A                  	db 58
    1938/    2474 : 20                  	db 32
    1939/    2475 : 25                  	db 37
    1940/    2476 : 64                  	db 100
    1941/    2477 : 2E                  	db 46
    1942/    2478 : 25                  	db 37
    1943/    2479 : 64                  	db 100
    1944/    247A : 2E                  	db 46
    1945/    247B : 25                  	db 37
    1946/    247C : 64                  	db 100
    1947/    247D : 2E                  	db 46
    1948/    247E : 25                  	db 37
    1949/    247F : 64                  	db 100
    1950/    2480 : 0A                  	db 10
    1951/    2481 : 0A                  	db 10
    1952/    2482 : 00                  	db 0
    1953/    2483 :                     L45:
    1954/    2483 : 53                  	db 83
    1955/    2484 : 65                  	db 101
    1956/    2485 : 74                  	db 116
    1957/    2486 : 74                  	db 116
    1958/    2487 : 69                  	db 105
    1959/    2488 : 6E                  	db 110
    1960/    2489 : 67                  	db 103
    1961/    248A : 20                  	db 32
    1962/    248B : 49                  	db 73
    1963/    248C : 50                  	db 80
    1964/    248D : 20                  	db 32
    1965/    248E : 41                  	db 65
    1966/    248F : 64                  	db 100
    1967/    2490 : 64                  	db 100
    1968/    2491 : 72                  	db 114
    1969/    2492 : 65                  	db 101
    1970/    2493 : 73                  	db 115
    1971/    2494 : 73                  	db 115
    1972/    2495 : 20                  	db 32
    1973/    2496 : 25                  	db 37
    1974/    2497 : 64                  	db 100
    1975/    2498 : 2E                  	db 46
    1976/    2499 : 25                  	db 37
    1977/    249A : 64                  	db 100
    1978/    249B : 2E                  	db 46
    1979/    249C : 25                  	db 37
    1980/    249D : 64                  	db 100
    1981/    249E : 2E                  	db 46
    1982/    249F : 25                  	db 37
    1983/    24A0 : 64                  	db 100
    1984/    24A1 : 0A                  	db 10
    1985/    24A2 : 00                  	db 0
    1986/    24A3 :                     L44:
    1987/    24A3 : 52                  	db 82
    1988/    24A4 : 65                  	db 101
    1989/    24A5 : 61                  	db 97
    1990/    24A6 : 64                  	db 100
    1991/    24A7 : 69                  	db 105
    1992/    24A8 : 6E                  	db 110
    1993/    24A9 : 67                  	db 103
    1994/    24AA : 20                  	db 32
    1995/    24AB : 53                  	db 83
    1996/    24AC : 55                  	db 85
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 35 - 5/23/2013 16:52:23


    1997/    24AD : 42                  	db 66
    1998/    24AE : 52                  	db 82
    1999/    24AF : 3A                  	db 58
    2000/    24B0 : 20                  	db 32
    2001/    24B1 : 25                  	db 37
    2002/    24B2 : 64                  	db 100
    2003/    24B3 : 2E                  	db 46
    2004/    24B4 : 25                  	db 37
    2005/    24B5 : 64                  	db 100
    2006/    24B6 : 2E                  	db 46
    2007/    24B7 : 25                  	db 37
    2008/    24B8 : 64                  	db 100
    2009/    24B9 : 2E                  	db 46
    2010/    24BA : 25                  	db 37
    2011/    24BB : 64                  	db 100
    2012/    24BC : 0A                  	db 10
    2013/    24BD : 0A                  	db 10
    2014/    24BE : 00                  	db 0
    2015/    24BF :                     L37:
    2016/    24BF : 53                  	db 83
    2017/    24C0 : 65                  	db 101
    2018/    24C1 : 74                  	db 116
    2019/    24C2 : 74                  	db 116
    2020/    24C3 : 69                  	db 105
    2021/    24C4 : 6E                  	db 110
    2022/    24C5 : 67                  	db 103
    2023/    24C6 : 20                  	db 32
    2024/    24C7 : 53                  	db 83
    2025/    24C8 : 75                  	db 117
    2026/    24C9 : 62                  	db 98
    2027/    24CA : 20                  	db 32
    2028/    24CB : 4D                  	db 77
    2029/    24CC : 61                  	db 97
    2030/    24CD : 73                  	db 115
    2031/    24CE : 6B                  	db 107
    2032/    24CF : 20                  	db 32
    2033/    24D0 : 41                  	db 65
    2034/    24D1 : 64                  	db 100
    2035/    24D2 : 64                  	db 100
    2036/    24D3 : 72                  	db 114
    2037/    24D4 : 65                  	db 101
    2038/    24D5 : 73                  	db 115
    2039/    24D6 : 73                  	db 115
    2040/    24D7 : 20                  	db 32
    2041/    24D8 : 25                  	db 37
    2042/    24D9 : 64                  	db 100
    2043/    24DA : 2E                  	db 46
    2044/    24DB : 25                  	db 37
    2045/    24DC : 64                  	db 100
    2046/    24DD : 2E                  	db 46
    2047/    24DE : 25                  	db 37
    2048/    24DF : 64                  	db 100
    2049/    24E0 : 2E                  	db 46
    2050/    24E1 : 25                  	db 37
    2051/    24E2 : 64                  	db 100
    2052/    24E3 : 0A                  	db 10
    2053/    24E4 : 00                  	db 0
    2054/    24E5 :                     L36:
    2055/    24E5 : 52                  	db 82
    2056/    24E6 : 65                  	db 101
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 36 - 5/23/2013 16:52:23


    2057/    24E7 : 61                  	db 97
    2058/    24E8 : 64                  	db 100
    2059/    24E9 : 69                  	db 105
    2060/    24EA : 6E                  	db 110
    2061/    24EB : 67                  	db 103
    2062/    24EC : 20                  	db 32
    2063/    24ED : 53                  	db 83
    2064/    24EE : 41                  	db 65
    2065/    24EF : 52                  	db 82
    2066/    24F0 : 3A                  	db 58
    2067/    24F1 : 20                  	db 32
    2068/    24F2 : 25                  	db 37
    2069/    24F3 : 78                  	db 120
    2070/    24F4 : 3A                  	db 58
    2071/    24F5 : 25                  	db 37
    2072/    24F6 : 78                  	db 120
    2073/    24F7 : 3A                  	db 58
    2074/    24F8 : 25                  	db 37
    2075/    24F9 : 78                  	db 120
    2076/    24FA : 3A                  	db 58
    2077/    24FB : 25                  	db 37
    2078/    24FC : 78                  	db 120
    2079/    24FD : 3A                  	db 58
    2080/    24FE : 25                  	db 37
    2081/    24FF : 78                  	db 120
    2082/    2500 : 3A                  	db 58
    2083/    2501 : 25                  	db 37
    2084/    2502 : 78                  	db 120
    2085/    2503 : 0A                  	db 10
    2086/    2504 : 0A                  	db 10
    2087/    2505 : 00                  	db 0
    2088/    2506 :                     L25:
    2089/    2506 : 53                  	db 83
    2090/    2507 : 65                  	db 101
    2091/    2508 : 74                  	db 116
    2092/    2509 : 74                  	db 116
    2093/    250A : 69                  	db 105
    2094/    250B : 6E                  	db 110
    2095/    250C : 67                  	db 103
    2096/    250D : 20                  	db 32
    2097/    250E : 53                  	db 83
    2098/    250F : 6F                  	db 111
    2099/    2510 : 75                  	db 117
    2100/    2511 : 72                  	db 114
    2101/    2512 : 63                  	db 99
    2102/    2513 : 65                  	db 101
    2103/    2514 : 20                  	db 32
    2104/    2515 : 41                  	db 65
    2105/    2516 : 64                  	db 100
    2106/    2517 : 64                  	db 100
    2107/    2518 : 72                  	db 114
    2108/    2519 : 65                  	db 101
    2109/    251A : 73                  	db 115
    2110/    251B : 73                  	db 115
    2111/    251C : 20                  	db 32
    2112/    251D : 25                  	db 37
    2113/    251E : 78                  	db 120
    2114/    251F : 3A                  	db 58
    2115/    2520 : 25                  	db 37
    2116/    2521 : 78                  	db 120
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 37 - 5/23/2013 16:52:23


    2117/    2522 : 3A                  	db 58
    2118/    2523 : 25                  	db 37
    2119/    2524 : 78                  	db 120
    2120/    2525 : 3A                  	db 58
    2121/    2526 : 25                  	db 37
    2122/    2527 : 78                  	db 120
    2123/    2528 : 3A                  	db 58
    2124/    2529 : 25                  	db 37
    2125/    252A : 78                  	db 120
    2126/    252B : 3A                  	db 58
    2127/    252C : 25                  	db 37
    2128/    252D : 78                  	db 120
    2129/    252E : 0A                  	db 10
    2130/    252F : 00                  	db 0
    2131/    2530 :                     L24:
    2132/    2530 : 52                  	db 82
    2133/    2531 : 65                  	db 101
    2134/    2532 : 61                  	db 97
    2135/    2533 : 64                  	db 100
    2136/    2534 : 69                  	db 105
    2137/    2535 : 6E                  	db 110
    2138/    2536 : 67                  	db 103
    2139/    2537 : 20                  	db 32
    2140/    2538 : 47                  	db 71
    2141/    2539 : 41                  	db 65
    2142/    253A : 52                  	db 82
    2143/    253B : 3A                  	db 58
    2144/    253C : 20                  	db 32
    2145/    253D : 25                  	db 37
    2146/    253E : 64                  	db 100
    2147/    253F : 2E                  	db 46
    2148/    2540 : 25                  	db 37
    2149/    2541 : 64                  	db 100
    2150/    2542 : 2E                  	db 46
    2151/    2543 : 25                  	db 37
    2152/    2544 : 64                  	db 100
    2153/    2545 : 2E                  	db 46
    2154/    2546 : 25                  	db 37
    2155/    2547 : 64                  	db 100
    2156/    2548 : 0A                  	db 10
    2157/    2549 : 0A                  	db 10
    2158/    254A : 00                  	db 0
    2159/    254B :                     L17:
    2160/    254B : 53                  	db 83
    2161/    254C : 65                  	db 101
    2162/    254D : 74                  	db 116
    2163/    254E : 74                  	db 116
    2164/    254F : 69                  	db 105
    2165/    2550 : 6E                  	db 110
    2166/    2551 : 67                  	db 103
    2167/    2552 : 20                  	db 32
    2168/    2553 : 47                  	db 71
    2169/    2554 : 61                  	db 97
    2170/    2555 : 74                  	db 116
    2171/    2556 : 65                  	db 101
    2172/    2557 : 77                  	db 119
    2173/    2558 : 61                  	db 97
    2174/    2559 : 79                  	db 121
    2175/    255A : 20                  	db 32
    2176/    255B : 41                  	db 65
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 38 - 5/23/2013 16:52:23


    2177/    255C : 64                  	db 100
    2178/    255D : 64                  	db 100
    2179/    255E : 72                  	db 114
    2180/    255F : 65                  	db 101
    2181/    2560 : 73                  	db 115
    2182/    2561 : 73                  	db 115
    2183/    2562 : 20                  	db 32
    2184/    2563 : 25                  	db 37
    2185/    2564 : 64                  	db 100
    2186/    2565 : 2E                  	db 46
    2187/    2566 : 25                  	db 37
    2188/    2567 : 64                  	db 100
    2189/    2568 : 2E                  	db 46
    2190/    2569 : 25                  	db 37
    2191/    256A : 64                  	db 100
    2192/    256B : 2E                  	db 46
    2193/    256C : 25                  	db 37
    2194/    256D : 64                  	db 100
    2195/    256E : 0A                  	db 10
    2196/    256F : 00                  	db 0
    2197/    2570 :                     L16:
    2198/    2570 : 52                  	db 82
    2199/    2571 : 65                  	db 101
    2200/    2572 : 61                  	db 97
    2201/    2573 : 64                  	db 100
    2202/    2574 : 69                  	db 105
    2203/    2575 : 6E                  	db 110
    2204/    2576 : 67                  	db 103
    2205/    2577 : 20                  	db 32
    2206/    2578 : 52                  	db 82
    2207/    2579 : 54                  	db 84
    2208/    257A : 52                  	db 82
    2209/    257B : 3A                  	db 58
    2210/    257C : 20                  	db 32
    2211/    257D : 25                  	db 37
    2212/    257E : 64                  	db 100
    2213/    257F : 0A                  	db 10
    2214/    2580 : 00                  	db 0
    2215/    2581 :                     L15:
    2216/    2581 : 52                  	db 82
    2217/    2582 : 65                  	db 101
    2218/    2583 : 61                  	db 97
    2219/    2584 : 64                  	db 100
    2220/    2585 : 69                  	db 105
    2221/    2586 : 6E                  	db 110
    2222/    2587 : 67                  	db 103
    2223/    2588 : 20                  	db 32
    2224/    2589 : 4D                  	db 77
    2225/    258A : 52                  	db 82
    2226/    258B : 3A                  	db 58
    2227/    258C : 20                  	db 32
    2228/    258D : 25                  	db 37
    2229/    258E : 64                  	db 100
    2230/    258F : 0A                  	db 10
    2231/    2590 : 00                  	db 0
    2232/    2591 :                     	include lcc1802Epilofl.inc
(1)    1/    2591 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    2591 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    2591 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    2591 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 39 - 5/23/2013 16:52:23


(1)    5/    2591 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    2591 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    2591 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    2591 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    2591 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    2591 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    2591 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    2591 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    2591 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    2591 :                     
(1)   15/    2591 : =EH                 rwork	equ	memAddr	;work register
(1)   16/    2591 :                     lcc1802init:	
(1)   17/    2591 : (MACRO)             	ldiReg	RCALL,_call
(1)   18/    2597 : (MACRO)             	ldiReg	RRET,_return
(1)   19/    259D : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   20/    25A3 : E2                  	sex	SP
(1)   21/    25A4 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   22/    25AA : D3                  	sep	RPC
(1)   23/    25AB :                     $$_00000:
(1)   24/    25AB : (MACRO)             	Ccall _main	;call the main routine
(1)   25/    25AE : C0 25 AE            $$_die:	lbr	$$_die		;loop here when main returns
(1)   26/    25B1 : DE AD               	db	0xde,0xad
(1)   27/    25B3 :                     
(1)   28/    25B3 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   29/    25B3 :                     _setqOn:
(1)   30/    25B3 : 7B                  	seq
(1)   31/    25B4 : (MACRO)             	Cretn
(1)   32/    25B5 :                     _setqOff:
(1)   33/    25B5 : 7A                  	req
(1)   34/    25B6 : (MACRO)             	Cretn
(1)   35/    25B7 :                     
(1)   36/    25B7 :                     _modU2:	;16 bit unsigned remainder
(1)   37/    25B7 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   38/    25B7 : (MACRO)                 Ccall _divU2
(1)   39/    25BA : 8D                      glo regArg2
(1)   40/    25BB : AF                      plo retVal
(1)   41/    25BC : 9D                      ghi regArg2
(1)   42/    25BD : BF                      phi retVal
(1)   43/    25BE : (MACRO)                 Cretn
(1)   44/    25BF :                         
(1)   45/    25BF :                     _modI2:	;16 bit signed remainder
(1)   46/    25BF :                     	; just calls the 16 bit division then puts remainder into return value
(1)   47/    25BF : (MACRO)                 Ccall _divI2
(1)   48/    25C2 : 8D                      glo regArg2
(1)   49/    25C3 : AF                      plo retVal
(1)   50/    25C4 : 9D                      ghi regArg2
(1)   51/    25C5 : BF                      phi retVal
(1)   52/    25C6 : (MACRO)                 Cretn
(1)   53/    25C7 :                     
(1)   54/    25C7 :                     _out4:	
(1)   55/    25C7 : 8C                  	glo	regArg1
(1)   56/    25C8 : 22                  	dec	sp
(1)   57/    25C9 : 52                  	str	sp
(1)   58/    25CA : 64                  	out	4
(1)   59/    25CB : (MACRO)             	Cretn
(1)   60/    25CC :                     
(1)   61/    25CC :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   62/    25CC :                     	align 256
(1)   63/    2600 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   64/    2600 :                     ;requires programs to save the return address if they destroy it (by using call for example)
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 40 - 5/23/2013 16:52:23


(1)   65/    2600 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   66/    2600 : D3                  	sep     R3 ;go to subroutine
(1)   67/    2601 : E2                  _call	sex	SP ;make sure X=SP
(1)   68/    2602 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   69/    2603 : 22                  	dec	sp
(1)   70/    2604 : 73                  	stxd
(1)   71/    2605 : 96                  	ghi	retAddr
(1)   72/    2606 : 52                  	str	sp	
(1)   73/    2607 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   74/    2608 : A6                  	plo	retAddr
(1)   75/    2609 : 93                  	ghi	RPC
(1)   76/    260A : B6                  	phi	retAddr
(1)   77/    260B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   78/    260C : B3                  	phi	RPC
(1)   79/    260D : 46                  	lda	retAddr
(1)   80/    260E : A3                  	plo	RPC
(1)   81/    260F : 30 00               	br	_call-1
(1)   82/    2611 :                     
(1)   83/    2611 :                     ;Standard subroutine return 
(1)   84/    2611 : D3                  	sep	RPC	;return to the original program
(1)   85/    2612 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   86/    2613 : A3                  	plo	RPC
(1)   87/    2614 : 96                  	ghi	retAddr
(1)   88/    2615 : B3                  	phi	RPC
(1)   89/    2616 : 42                  	lda	SP	;pick up old return address
(1)   90/    2617 : B6                  	phi	retAddr
(1)   91/    2618 : 42                  	lda	SP
(1)   92/    2619 : A6                  	plo	retAddr
(1)   93/    261A : 30 11               	br	_return-1
(1)   94/    261C :                     
(1)   95/    261C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   96/    261C : F8 24               	ldi	(100-15-10-2)/2
(1)   97/    261E : FF 01               $$mslp:	smi	1
(1)   98/    2620 : 3A 1E               	bnz	$$mslp
(1)   99/    2622 : (MACRO)             	Cretn
(1)  100/    2623 :                     
(1)  101/    2623 :                     
(1)  102/    2623 :                     	
(1)  103/    2623 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  104/    2623 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  105/    2623 :                     _mulu2:		
(1)  106/    2623 : 22                      dec sp
(1)  107/    2624 : F8 10                   ldi 16
(1)  108/    2626 : AE                      plo	rwork	;bit count
(1)  109/    2627 : F8 00                   ldi 0
(1)  110/    2629 : BF                      phi	retVal	;quotient
(1)  111/    262A : AF                      plo retVal
(1)  112/    262B :                     $$MultLoop16_16:
(1)  113/    262B : 9C                      ghi regArg1
(1)  114/    262C : F6                      shr
(1)  115/    262D : BC                      phi regArg1
(1)  116/    262E : 8C                      glo regArg1
(1)  117/    262F : 76                      shrc
(1)  118/    2630 : AC                      plo regArg1
(1)  119/    2631 : 3B 3D                   bnf $$MultSkip16_16
(1)  120/    2633 : 8D                      glo regArg2
(1)  121/    2634 : 52                      str sp
(1)  122/    2635 : 8F                      glo retVal
(1)  123/    2636 : F4                      add 
(1)  124/    2637 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 41 - 5/23/2013 16:52:23


(1)  125/    2638 : 9D                      ghi regArg2
(1)  126/    2639 : 52                      str sp
(1)  127/    263A : 9F                      ghi retVal
(1)  128/    263B : 74                      adc
(1)  129/    263C : BF                      phi retVal
(1)  130/    263D :                     $$MultSkip16_16:
(1)  131/    263D : 8D                      glo regArg2
(1)  132/    263E : FE                      shl
(1)  133/    263F : AD                      plo regArg2
(1)  134/    2640 : 9D                      ghi regArg2
(1)  135/    2641 : 7E                      shlc
(1)  136/    2642 : BD                      phi regArg2
(1)  137/    2643 : 2E                      dec rwork
(1)  138/    2644 : 8E                      glo rwork
(1)  139/    2645 : 3A 2B                   bnz $$MultLoop16_16
(1)  140/    2647 : 12                      inc sp
(1)  141/    2648 : D5                      sep 5
(1)  142/    2649 :                     
(1)  143/    2649 :                     
(1)  144/    2649 :                     _divU2:
(1)  145/    2649 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  146/    2649 :                     	; This is really an unsigned 23 bit divide
(1)  147/    2649 :                     	;thanks to Ted Rossin
(1)  148/    2649 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  149/    2649 : 22                      dec sp
(1)  150/    264A : F8 10                   ldi 16
(1)  151/    264C : AE                      plo rwork
(1)  152/    264D : F8 00                   ldi 0
(1)  153/    264F : BF                      phi retVal
(1)  154/    2650 : AF                      plo retVal
(1)  155/    2651 : BE                      phi rwork
(1)  156/    2652 :                     $$DivLoop16_16:
(1)  157/    2652 : 8C                      glo regArg1
(1)  158/    2653 : FE                      shl
(1)  159/    2654 : AC                      plo regArg1
(1)  160/    2655 : 9C                      ghi regArg1
(1)  161/    2656 : 7E                      shlc
(1)  162/    2657 : BC                      phi regArg1
(1)  163/    2658 : 8F                      glo retVal
(1)  164/    2659 : 7E                      shlc
(1)  165/    265A : AF                      plo retVal
(1)  166/    265B : 9F                      ghi retVal
(1)  167/    265C : 7E                      shlc
(1)  168/    265D : BF                      phi retVal
(1)  169/    265E : 9E                      ghi rwork
(1)  170/    265F : 7E                      shlc
(1)  171/    2660 : BE                      phi rwork
(1)  172/    2661 : 3B 73                   bnf $$DivSub16_16
(1)  173/    2663 : 8D                      glo regArg2
(1)  174/    2664 : 52                      str sp
(1)  175/    2665 : 8F                      glo retVal
(1)  176/    2666 : F4                      add 
(1)  177/    2667 : AF                      plo retVal
(1)  178/    2668 : 9D                      ghi regArg2
(1)  179/    2669 : 52                      str sp
(1)  180/    266A : 9F                      ghi retVal
(1)  181/    266B : 74                      adc 
(1)  182/    266C : BF                      phi retVal
(1)  183/    266D : 9E                      ghi rwork
(1)  184/    266E : 7C 00                   adci 0
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 42 - 5/23/2013 16:52:23


(1)  185/    2670 : BE                      phi rwork
(1)  186/    2671 : 30 81                   br $$DivSkip16_16
(1)  187/    2673 :                     $$DivSub16_16:
(1)  188/    2673 : 8D                      glo regArg2
(1)  189/    2674 : 52                      str sp
(1)  190/    2675 : 8F                      glo retVal
(1)  191/    2676 : F7                      sm
(1)  192/    2677 : AF                      plo retVal
(1)  193/    2678 : 9D                      ghi regArg2
(1)  194/    2679 : 52                      str sp
(1)  195/    267A : 9F                      ghi retVal
(1)  196/    267B : 77                      smb 
(1)  197/    267C : BF                      phi retVal
(1)  198/    267D : 9E                      ghi rwork
(1)  199/    267E : 7F 00                   smbi 0
(1)  200/    2680 : BE                      phi rwork 
(1)  201/    2681 :                     $$DivSkip16_16:
(1)  202/    2681 : FE                      shl
(1)  203/    2682 : 33 88                   bdf $$DivSkipClear16_16
(1)  204/    2684 :                     $$DivSetBit16_16:
(1)  205/    2684 : 8C                      glo regArg1
(1)  206/    2685 : F9 01                   ori  0x01
(1)  207/    2687 : AC                      plo regArg1
(1)  208/    2688 :                     $$DivSkipClear16_16:
(1)  209/    2688 : 2E                      dec rwork
(1)  210/    2689 : 8E                      glo rwork
(1)  211/    268A : 3A 52                   bnz $$DivLoop16_16
(1)  212/    268C : 9E                      ghi rwork
(1)  213/    268D : FE                      shl
(1)  214/    268E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  215/    2690 : 8D                      glo regArg2
(1)  216/    2691 : 52                      str sp
(1)  217/    2692 : 8F                      glo retVal
(1)  218/    2693 : F4                      add
(1)  219/    2694 : AF                      plo retVal
(1)  220/    2695 : 9D                      ghi regArg2
(1)  221/    2696 : 52                      str sp
(1)  222/    2697 : 9F                      ghi retVal
(1)  223/    2698 : 74                      adc
(1)  224/    2699 : BF                      phi retVal
(1)  225/    269A :                     $$DivSkipFinalAdd16_16:
(1)  226/    269A : 12                      inc sp
(1)  227/    269B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  228/    269B : 8F                      glo retVal
(1)  229/    269C : AD                      plo regArg2
(1)  230/    269D : 9F                      ghi retVal
(1)  231/    269E : BD                      phi regArg2
(1)  232/    269F : 8C                      glo regArg1
(1)  233/    26A0 : AF                      plo retVal
(1)  234/    26A1 : 9C                      ghi regArg1
(1)  235/    26A2 : BF                      phi retVal
(1)  236/    26A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  237/    26A3 : D5                      sep 5
(1)  238/    26A4 :                     
(1)  239/    26A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  240/    26A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  241/    26A4 :                     _divI2:
(1)  242/    26A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  243/    26A4 : 22                      dec	sp	;leave a work area available
(1)  244/    26A5 : 9C                      ghi regArg1
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 43 - 5/23/2013 16:52:23


(1)  245/    26A6 : 52                      str sp	;save the sign of the 1st arg
(1)  246/    26A7 : FE                      shl
(1)  247/    26A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  248/    26AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  249/    26B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  250/    26B3 : 9D                      ghi regArg2
(1)  251/    26B4 : F3                      xor	
(1)  252/    26B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  253/    26B6 : 9D                      ghi regArg2
(1)  254/    26B7 : FE                      shl
(1)  255/    26B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  256/    26BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  257/    26C3 :                     $$pos2: ; both args now +v
(1)  258/    26C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  259/    26C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  260/    26C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  261/    26C7 : FE                      shl
(1)  262/    26C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  263/    26CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  264/    26D3 :                     $$done:
(1)  265/    26D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  266/    26D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  267/    26D4 :                     
(1)  268/    26D4 :                     
(1)  269/    26D4 :                     	align 256    ;32 bit operations follow
(1)  270/    2700 :                     _divu4:
(1)  271/    2700 :                     ;This is an unsigned 32 bit restoring division
(1)  272/    2700 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  273/    2700 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  274/    2700 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  275/    2700 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  276/    2700 :                     
(1)  277/    2700 : F8 20               	ldi 32		;set loop count
(1)  278/    2702 : AE                  	plo memaddr	;in temp register
(1)  279/    2703 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  280/    270F :                     $$loop:
(1)  281/    270F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  282/    271B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  283/    2727 :                     
(1)  284/    2727 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  285/    273D :                     
(1)  286/    273D : FA 80               	ani 0x80	;check the top bit
(1)  287/    273F : 32 5D               	bz $$norestore	;if it's 0
(1)  288/    2741 : 89                  		glo RL8
(1)  289/    2742 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  290/    2744 : A9                  		plo RL8
(1)  291/    2745 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  292/    275B : 30 61               	br $$endlp 	;else
(1)  293/    275D :                     $$norestore:
(1)  294/    275D : 89                  		glo RL8
(1)  295/    275E : F9 01               		ori 1	;turn on the bottom bit
(1)  296/    2760 : A9                  		plo RL8
(1)  297/    2761 :                     	;end if
(1)  298/    2761 :                     $$endlp:
(1)  299/    2761 : 2E                  	dec memaddr	;check the cycle count
(1)  300/    2762 : 8E                  	glo memaddr
(1)  301/    2763 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  302/    2765 :                     	
(1)  303/    2765 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  304/    2766 :                     		
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 44 - 5/23/2013 16:52:23


(1)  305/    2766 :                     
(1)  306/    2766 :                     _mulu4:
(1)  307/    2766 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  308/    2766 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  309/    2766 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  310/    2766 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  311/    2766 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  312/    2766 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  313/    2766 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  314/    2766 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  315/    2766 :                     	;for 10 we subtract and shift
(1)  316/    2766 :                     	;for 00 and 11 we just shift
(1)  317/    2766 :                     
(1)  318/    2766 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  319/    2772 : F8 20                   ldi 32
(1)  320/    2774 : AE                      plo memaddr		;cycle count
(1)  321/    2775 : FC 00                   adi 0		;clear df
(1)  322/    2777 :                     $$mloop:
(1)  323/    2777 : 89                      glo RL8
(1)  324/    2778 : FA 01                   ani 1		;isolate bottom bit of result
(1)  325/    277A : 3B 96                   bnf	$$check_sub	;
(1)  326/    277C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  327/    277E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  328/    277E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  329/    2794 : 30 AE                   br $$shift
(1)  330/    2796 :                     $$check_sub:
(1)  331/    2796 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  332/    2798 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  333/    2798 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  334/    27AE :                     $$shift:
(1)  335/    27AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  336/    27BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  337/    27C8 :                     
(1)  338/    27C8 : 2E                      dec memaddr		;cycle count
(1)  339/    27C9 : 8E                      glo memaddr
(1)  340/    27CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  341/    27CC :                         
(1)  342/    27CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  343/    27CD :                     
(1)  344/    27CD :                     	align 256
(1)  345/    2800 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  346/    2800 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  347/    2800 :                     _divI4:
(1)  348/    2800 : 22                      dec	sp	;leave a work area available
(1)  349/    2801 : 98                      ghi RL8-1	;get the top of the dividend
(1)  350/    2802 : 52                      str sp	;save the sign of the 1st arg
(1)  351/    2803 : FE                      shl
(1)  352/    2804 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  353/    2806 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  354/    2826 :                     $$pos1: ;1st is now +v, check 2nd
(1)  355/    2826 : 9A                      ghi RL10-1
(1)  356/    2827 : F3                      xor	
(1)  357/    2828 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  358/    2829 : 9A                      ghi RL10-1
(1)  359/    282A : FE                      shl
(1)  360/    282B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  361/    282D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  362/    284D :                     $$pos2: ; both args now +v
(1)  363/    284D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  364/    2850 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 45 - 5/23/2013 16:52:23


(1)  365/    2850 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  366/    2851 : FE                      shl
(1)  367/    2852 : 3B 74                   bnf $$done ;if the signs were different
(1)  368/    2854 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  369/    2874 :                     $$done:
(1)  370/    2874 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  371/    2875 :                     
(1)  372/    2875 :                     _dubdabx:	
(1)  373/    2875 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  374/    2875 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  375/    2875 :                     ;long interger is passed in rp1p2
(1)  376/    2875 :                     ;buffer pointer is passed at sp+2+4
(1)  377/    2875 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  378/    2875 :                     ;r8-11 are used as temps
(1)  379/    2875 :                     ;r8 is the working pointer
(1)  380/    2875 :                     ;r9.0 is bit count(32)
(1)  381/    2875 :                     ;r10.0 is digit count
(1)  382/    2875 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  383/    2881 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  384/    2885 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  385/    2887 : A9                  	plo r9
(1)  386/    2888 :                     $$clrlp:	;clear the passed buffer
(1)  387/    2888 : F8 00               	ldi 0	
(1)  388/    288A : 58                  	str r8	;clear a byte
(1)  389/    288B : 18                  	inc r8
(1)  390/    288C : 29                  	dec r9
(1)  391/    288D : 89                  	glo r9	;check the count
(1)  392/    288E : 3A 88               	bnz $$clrlp ;back for more
(1)  393/    2890 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  394/    2894 :                     
(1)  395/    2894 : F8 20               	ldi 32	;bit count
(1)  396/    2896 : AF                  	plo r15
(1)  397/    2897 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  398/    2897 :                     $$cktop:
(1)  399/    2897 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  400/    2898 : FE                  	shl		;check for a 1
(1)  401/    2899 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  402/    289B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  403/    28A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  404/    28A8 : 8F                  	glo r15
(1)  405/    28A9 : 3A 97               	bnz $$cktop	;
(1)  406/    28AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  407/    28AC :                     $$bitloop:
(1)  408/    28AC : F8 0A               	ldi 10	;digit count
(1)  409/    28AE : A9                  	plo r9
(1)  410/    28AF :                     $$dcklp:
(1)  411/    28AF : 08                  	ldn r8 	;pick up a digit
(1)  412/    28B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  413/    28B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  414/    28B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  415/    28B6 : 58                  	str r8	;put it back
(1)  416/    28B7 :                     $$dnoadd:
(1)  417/    28B7 : 18                  	inc r8
(1)  418/    28B8 : 29                  	dec r9	;decrement digit count
(1)  419/    28B9 : 89                  	glo r9
(1)  420/    28BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  421/    28BC :                     	
(1)  422/    28BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  423/    28C8 :                     	
(1)  424/    28C8 : F8 0A               	ldi 10	;load the digit count again
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(lcc1802Epilofl.inc) - page 46 - 5/23/2013 16:52:23


(1)  425/    28CA : A9                  	plo r9
(1)  426/    28CB :                     ;r8 is now just past the units location and ready to walk back
(1)  427/    28CB :                     $$dshlp:
(1)  428/    28CB : 28                  	dec r8	;walk back from 0's position
(1)  429/    28CC : 08                  	ldn r8	;get the digit back
(1)  430/    28CD : 7E                  	shlc	;continue the shift
(1)  431/    28CE : BF                  	phi r15 ;save it for the carry test
(1)  432/    28CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  433/    28D1 : 58                  	str r8	;put the digit back
(1)  434/    28D2 : 9F                  	ghi r15	;now test for carry
(1)  435/    28D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  436/    28D5 : 29                  	dec r9	;decrement the digit count
(1)  437/    28D6 : 89                  	glo r9
(1)  438/    28D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  439/    28D9 :                     	
(1)  440/    28D9 : 2F                  	dec r15
(1)  441/    28DA : 8F                  	glo r15
(1)  442/    28DB : 3A AC               	bnz $$bitloop
(1)  443/    28DD :                     	
(1)  444/    28DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  445/    28E1 : F8 0A               	ldi 10		;digit count again
(1)  446/    28E3 : A9                  	plo r9
(1)  447/    28E4 :                     $$upnxt:
(1)  448/    28E4 : 08                  	ldn r8		;get digit
(1)  449/    28E5 : F9 30               	ori 0x30	;make ascii
(1)  450/    28E7 : 58                  	str r8		;put it back
(1)  451/    28E8 : 18                  	inc r8		;next digit
(1)  452/    28E9 : 29                  	dec r9		;counter
(1)  453/    28EA : 89                  	glo r9
(1)  454/    28EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  455/    28ED :                     	
(1)  456/    28ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  457/    28EF : A9                  	plo r9
(1)  458/    28F0 :                     $$cknext:
(1)  459/    28F0 : 0F                  	ldn r15		;check digit
(1)  460/    28F1 : FF 30               	smi 0x30	;for '0'
(1)  461/    28F3 : 3A FA               	bnz $$done
(1)  462/    28F5 : 1F                  	inc r15		;next digit
(1)  463/    28F6 : 29                  	dec r9		;reduce count
(1)  464/    28F7 : 89                  	glo r9
(1)  465/    28F8 : 3A F0               	bnz $$cknext
(1)  466/    28FA :                     $$done:
(1)  467/    28FA : (MACRO)             	cretn
(1)  468/    28FB :                     	
(1)  469/    28FB :                     	
(1)  470/    28FB :                     _modU4:	;32 bit unsigned remainder
(1)  471/    28FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  472/    28FB : (MACRO)                 Ccall _divU4
(1)  473/    28FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  474/    2906 : (MACRO)                 Cretn
(1)  475/    2907 :                         
(1)  476/    2907 :                     _modI4:	;32 bit signed remainder
(1)  477/    2907 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  478/    2907 : (MACRO)                 Ccall _divI4
(1)  479/    290A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  480/    2912 : (MACRO)                 Cretn
(1)  481/    2913 :                         
(1)  482/    2913 :                     	
(1)  483/    2913 :                      
    2233/    2913 :                     	include LCC1802fp.inc
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 47 - 5/23/2013 16:52:23


(1)    1/    2913 :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    2913 :                     ;maybe originally from RCA
(1)    3/    2913 :                     ;these routines use ALL the registers from 6-15!
(1)    4/    2913 :                     ;8-15 were more or less available to start with
(1)    5/    2913 :                     ;it saves 6 when it uses it
(1)    6/    2913 :                     ;I save 7 on entry and restore on exit
(1)    7/    2913 :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    2913 : =BH                 FB	equ	11	;was R9
(1)    9/    2913 : =9H                 F9	equ	9	;was R7
(1)   10/    2913 : =7H                 F7	equ	7	;was RB
(1)   11/    2913 :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    2913 :                     ; *** Convert signed long to float
(1)   13/    2913 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    2913 :                     ; *** result in same register
(1)   15/    2913 :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    2913 :                     	align 256
(1)   17/    2A00 : F8 00               cvif4:	ldi	0
(1)   18/    2A02 : BE                  	phi	memaddr	;sign
(1)   19/    2A03 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    2A05 : AE                  	plo	memaddr	;
(1)   21/    2A06 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    2A07 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    2A09 : FE                  	shl		;sign bit to df
(1)   24/    2A0A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    2A0C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    2A0D : BE                  	phi	memaddr	;save it
(1)   27/    2A0E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    2A2E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    2A30 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    2A31 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    2A33 : 99                  	ghi	RL8	;next byte
(1)   32/    2A34 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    2A36 : 89                  	glo	RL8	;last byte
(1)   34/    2A37 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    2A39 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    2A3A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    2A3C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    2A3D : (MACRO)             	shru4	RL8
(1)   39/    2A49 : 30 39               	br	$$sgnpos
(1)   40/    2A4B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    2A4C : FA 80               	ani	0x80	;isolate it
(1)   42/    2A4E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    2A50 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    2A51 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    2A5D : 30 4B               	br	$$shl
(1)   46/    2A5F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    2A60 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    2A61 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    2A62 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    2A64 : 88                  	glo	RL8-1	;get the byte
(1)   51/    2A65 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    2A67 : A8                  	plo	RL8-1	;put it back
(1)   53/    2A68 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    2A69 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    2A6B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    2A6C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    2A6E : B8                  	phi	RL8-1	;place it
(1)   58/    2A6F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    2A70 :                     	
(1)   60/    2A70 :                     
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 48 - 5/23/2013 16:52:23


(1)   61/    2A70 :                     
(1)   62/    2A70 :                     ; *** Convert float to signed long
(1)   63/    2A70 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    2A70 :                     ; *** result in same register
(1)   65/    2A70 :                     	align 256
(1)   66/    2B00 :                     cvfi4:
(1)   67/    2B00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2B01 : BE                  	phi	memaddr ;save for later
(1)   69/    2B02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2B03 : FE                  	shl		;shift to df
(1)   71/    2B04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2B05 : 7E                  	shlc		;combine with 0
(1)   73/    2B06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2B06 : 22                  	dec	sp
(1)   75/    2B07 : 52                  	str	sp
(1)   76/    2B08 : F8 96               	ldi	150
(1)   77/    2B0A : F7                  	sm		;calculate shift count needed
(1)   78/    2B0B :                     ;*******note - the df flag set here is tested later
(1)   79/    2B0B : AE                  	plo	memaddr
(1)   80/    2B0C : 12                  	inc	sp	;release work area
(1)   81/    2B0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    2B0D : F8 00               	ldi	0
(1)   83/    2B0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2B10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2B11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2B13 : A8                  	plo	RL8-1	;put it back
(1)   87/    2B14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2B15 : 32 3B               	bz	$$sign
(1)   89/    2B17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2B17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2B19 :                     
(1)   92/    2B19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2B25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2B26 : 8E                  	glo	memaddr
(1)   95/    2B27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    2B29 : 30 3B               	br	$$sign
(1)   97/    2B2B :                     
(1)   98/    2B2B :                     ;handle negative shift as best I can - gigo
(1)   99/    2B2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    2B37 : 1E                  	inc	memaddr
(1)  101/    2B38 : 8E                  	glo	memaddr
(1)  102/    2B39 : 3A 2B               	bnz	$$lsh	
(1)  103/    2B3B :                     	
(1)  104/    2B3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    2B3C : FE                  	shl		;shift sign bit into df
(1)  106/    2B3D : 3B 61               	bnf	$$done
(1)  107/    2B3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    2B5F : 30 61               	br	$$done	; and return
(1)  109/    2B61 :                     
(1)  110/    2B61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2B62 :                     
(1)  112/    2B62 :                     ; *** Check if character is numeric
(1)  113/    2B62 :                     ; *** D - char to check
(1)  114/    2B62 :                     ; *** Returns DF=1 if numeric
(1)  115/    2B62 :                     ; ***         DF=0 if not
(1)  116/    2B62 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    2B63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2B65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2B67 : FF 0A                          smi     10                  ; see if above
(1)  120/    2B69 : 33 6E                          bdf     fails               ; fails if so
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 49 - 5/23/2013 16:52:23


(1)  121/    2B6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    2B6D : C8                             lskp
(1)  123/    2B6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2B70 : 8E                             glo     r14                 ; recover character
(1)  125/    2B71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2B72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2B72 :                     ; *******************************
(1)  128/    2B72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2B73 : F6                             shr
(1)  130/    2B74 : B8                             phi   r8
(1)  131/    2B75 : 88                             glo   r8
(1)  132/    2B76 : 76                             shrc
(1)  133/    2B77 : A8                             plo   r8
(1)  134/    2B78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2B79 : 76                             shrc
(1)  136/    2B7A : B9                             phi   F9
(1)  137/    2B7B : 89                             glo   F9
(1)  138/    2B7C : 76                             shrc
(1)  139/    2B7D : A9                             plo   F9
(1)  140/    2B7E : (MACRO)                        Cretn
(1)  141/    2B7F :                     
(1)  142/    2B7F :                     ; ******************************
(1)  143/    2B7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    2B7F :                     ; ******************************
(1)  145/    2B7F : 89                  fp_shl_1:  glo   F9
(1)  146/    2B80 : FE                             shl
(1)  147/    2B81 : A9                             plo   F9
(1)  148/    2B82 : 99                             ghi   F9
(1)  149/    2B83 : 7E                             shlc
(1)  150/    2B84 : B9                             phi   F9
(1)  151/    2B85 : 88                             glo   r8
(1)  152/    2B86 : 7E                             shlc
(1)  153/    2B87 : A8                             plo   r8
(1)  154/    2B88 : 98                             ghi   r8
(1)  155/    2B89 : 7E                             shlc
(1)  156/    2B8A : B8                             phi   r8
(1)  157/    2B8B : D5                             sep   RRET
(1)  158/    2B8C :                     
(1)  159/    2B8C :                     ; **********************
(1)  160/    2B8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    2B8C :                     ; **********************
(1)  162/    2B8C : 8B                  fp_add_12: glo   FB
(1)  163/    2B8D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    2B8E : 52                             str   r2
(1)  165/    2B8F : 89                             glo   F9
(1)  166/    2B90 : F4                             add
(1)  167/    2B91 : A9                             plo   F9
(1)  168/    2B92 : 9B                             ghi   FB
(1)  169/    2B93 : 52                             str   r2
(1)  170/    2B94 : 99                             ghi   F9
(1)  171/    2B95 : 74                             adc
(1)  172/    2B96 : B9                             phi   F9
(1)  173/    2B97 : 8A                             glo   R10
(1)  174/    2B98 : 52                             str   r2
(1)  175/    2B99 : 88                             glo   r8
(1)  176/    2B9A : 74                             adc
(1)  177/    2B9B : A8                             plo   r8
(1)  178/    2B9C : 9A                             ghi   R10
(1)  179/    2B9D : 52                             str   r2
(1)  180/    2B9E : 98                             ghi   r8
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 50 - 5/23/2013 16:52:23


(1)  181/    2B9F : 74                             adc
(1)  182/    2BA0 : B8                             phi   r8
(1)  183/    2BA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    2BA2 : (MACRO)                        Cretn
(1)  185/    2BA3 :                     
(1)  186/    2BA3 :                     ; *******************************
(1)  187/    2BA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    2BA3 :                     ; *******************************
(1)  189/    2BA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    2BA4 : F6                             shr
(1)  191/    2BA5 : BF                             phi   R15
(1)  192/    2BA6 : 8F                             glo   R15
(1)  193/    2BA7 : 76                             shrc
(1)  194/    2BA8 : AF                             plo   R15
(1)  195/    2BA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    2BAA : 76                             shrc
(1)  197/    2BAB : BD                             phi   R13
(1)  198/    2BAC : 8D                             glo   R13
(1)  199/    2BAD : 76                             shrc
(1)  200/    2BAE : AD                             plo   R13
(1)  201/    2BAF : (MACRO)                        Cretn
(1)  202/    2BB0 :                     
(1)  203/    2BB0 :                     ; *************************************
(1)  204/    2BB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    2BB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    2BB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    2BB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    2BB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    2BB0 :                     ; *************************************
(1)  210/    2BB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    2BB1 : FA 80                          ani   080h                  ; check it
(1)  212/    2BB3 : CA 2B C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    2BB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    2BB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    2BBA : FF 01                          smi   1                     ; minus 1
(1)  216/    2BBC : BF                             phi   R15                    ; and put it back
(1)  217/    2BBD : C0 2B B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    2BC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    2BC1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    2BC2 : A8                             plo   r8                    ; set aside
(1)  221/    2BC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    2BC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    2BC5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    2BC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    2BC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    2BC8 : A8                             plo   r8                    ; and put it back
(1)  227/    2BC9 : 87                             glo   F7                   ; get signs
(1)  228/    2BCA : F6                             shr                         ; get sign 1
(1)  229/    2BCB : 98                             ghi   r8                    ; recover exponent
(1)  230/    2BCC : 76                             shrc                        ; shift in sign
(1)  231/    2BCD : B8                             phi   r8                    ; put it back
(1)  232/    2BCE : 12                             inc	r2	;wjr release work area
(1)  233/    2BCF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    2BD3 : (MACRO)             	   popr R12	;wjr
(1)  235/    2BD7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    2BDB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    2BDC :                     
(1)  238/    2BDC :                     ; ************************************
(1)  239/    2BDC :                     ; *** Get exponenst from arguments ***
(1)  240/    2BDC :                     ; *** R8:F9 - Arg 1                ***
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 51 - 5/23/2013 16:52:23


(1)  241/    2BDC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    2BDC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    2BDC :                     ; ***          RF.0 - exp2         ***
(1)  244/    2BDC :                     ; ************************************
(1)  245/    2BDC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    2BDD : FE                             shl                         ; shift it into DF
(1)  247/    2BDE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    2BDF : 7E                             shlc                        ; shift in first bit
(1)  249/    2BE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    2BE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    2BE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    2BE2 : FE                             shl                         ; shift it into DF
(1)  253/    2BE3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    2BE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    2BE5 : AF                             plo   R15                    ; put into RF
(1)  256/    2BE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    2BE7 :                     
(1)  258/    2BE7 :                     ; ************************************
(1)  259/    2BE7 :                     ; *** Get signs from arguments     ***
(1)  260/    2BE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    2BE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    2BE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    2BE7 :                     ; ************************************
(1)  264/    2BE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    2BE8 : FE                             shl                         ; shift into DF
(1)  266/    2BE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    2BEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    2BEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    2BEC : A7                             plo   F7                    ; save them
(1)  270/    2BED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    2BEE :                     
(1)  272/    2BEE :                     ; ***************************************
(1)  273/    2BEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    2BEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    2BEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    2BEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    2BEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    2BEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    2BEE :                     ; ***        F7.0 - signs        ***
(1)  280/    2BEE :                     ; ***************************************
(1)  281/    2BEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    2BEF : CA 2C 07                       lbnz  add_a1nz
(1)  283/    2BF2 : 88                             glo   r8
(1)  284/    2BF3 : CA 2C 07                       lbnz  add_a1nz
(1)  285/    2BF6 : 99                             ghi   F9
(1)  286/    2BF7 : CA 2C 07                       lbnz  add_a1nz
(1)  287/    2BFA : 89                             glo   F9
(1)  288/    2BFB : CA 2C 07                       lbnz  add_a1nz
(1)  289/    2BFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    2BFF : B8                             phi   r8
(1)  291/    2C00 : 8A                             glo   R10
(1)  292/    2C01 : A8                             plo   r8
(1)  293/    2C02 : 9B                             ghi   FB
(1)  294/    2C03 : B9                             phi   F9
(1)  295/    2C04 : 8B                             glo   FB
(1)  296/    2C05 : A9                             plo   F9
(1)  297/    2C06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2C07 :                     
(1)  299/    2C07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2C08 : CA 2C 18                       lbnz  add_a2nz
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 52 - 5/23/2013 16:52:23


(1)  301/    2C0B : 8A                             glo   R10
(1)  302/    2C0C : CA 2C 18                       lbnz  add_a2nz
(1)  303/    2C0F : 9B                             ghi   FB
(1)  304/    2C10 : CA 2C 18                       lbnz  add_a2nz
(1)  305/    2C13 : 8B                             glo   FB
(1)  306/    2C14 : CA 2C 18                       lbnz  add_a2nz
(1)  307/    2C17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2C18 :                                
(1)  309/    2C18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    2C1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2C22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2C27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2C28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    2C2B : 9F                             ghi   R15
(1)  315/    2C2C : 52                             str   r2
(1)  316/    2C2D : 8F                             glo   R15
(1)  317/    2C2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    2C2F : CB 2C 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2C32 :                     
(1)  320/    2C32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2C33 : AE                             plo   R14
(1)  322/    2C34 : 9A                             ghi   R10
(1)  323/    2C35 : B8                             phi   r8
(1)  324/    2C36 : 8E                             glo   R14
(1)  325/    2C37 : BA                             phi   R10
(1)  326/    2C38 : 88                             glo   r8
(1)  327/    2C39 : AE                             plo   R14
(1)  328/    2C3A : 8A                             glo   R10
(1)  329/    2C3B : A8                             plo   r8
(1)  330/    2C3C : 8E                             glo   R14
(1)  331/    2C3D : AA                             plo   R10
(1)  332/    2C3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    2C3F : AE                             plo   R14
(1)  334/    2C40 : 9B                             ghi   FB
(1)  335/    2C41 : B9                             phi   F9
(1)  336/    2C42 : 8E                             glo   R14
(1)  337/    2C43 : BB                             phi   FB
(1)  338/    2C44 : 89                             glo   F9
(1)  339/    2C45 : AE                             plo   R14
(1)  340/    2C46 : 8B                             glo   FB
(1)  341/    2C47 : A9                             plo   F9
(1)  342/    2C48 : 8E                             glo   R14
(1)  343/    2C49 : AB                             plo   FB
(1)  344/    2C4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    2C4B : AE                             plo   R14
(1)  346/    2C4C : 8F                             glo   R15
(1)  347/    2C4D : BF                             phi   R15
(1)  348/    2C4E : 8E                             glo   R14
(1)  349/    2C4F : AF                             plo   R15
(1)  350/    2C50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2C53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2C55 : B8                             phi   r8
(1)  353/    2C56 : BA                             phi   R10
(1)  354/    2C57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2C59 : 52                             str   r2
(1)  356/    2C5A : 88                             glo   r8
(1)  357/    2C5B : F1                             or
(1)  358/    2C5C : A8                             plo   r8
(1)  359/    2C5D : 8A                             glo   R10
(1)  360/    2C5E : F1                             or
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 53 - 5/23/2013 16:52:23


(1)  361/    2C5F : AA                             plo   R10
(1)  362/    2C60 : 9F                             ghi   R15                    ; get exp1
(1)  363/    2C61 : 52                             str   r2                    ; place into memory
(1)  364/    2C62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2C63 : F7                             sm                          ; see if match to exp1
(1)  366/    2C64 : C2 2C 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2C67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2C68 : FC 01                          adi   1
(1)  369/    2C6A : AF                             plo   R15
(1)  370/    2C6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    2C6C : F6                             shr
(1)  372/    2C6D : AA                             plo   R10
(1)  373/    2C6E : 9B                             ghi   FB
(1)  374/    2C6F : 76                             shrc
(1)  375/    2C70 : BB                             phi   FB
(1)  376/    2C71 : 8B                             glo   FB
(1)  377/    2C72 : 76                             shrc
(1)  378/    2C73 : AB                             plo   FB
(1)  379/    2C74 : C0 2C 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2C77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2C78 : 52                             str   r2
(1)  382/    2C79 : F6                             shr
(1)  383/    2C7A : F3                             xor
(1)  384/    2C7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    2C7D : CA 2C 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2C80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2C83 : C0 2C BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2C86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2C87 : 52                             str   r2
(1)  390/    2C88 : 89                             glo   F9
(1)  391/    2C89 : F7                             sm
(1)  392/    2C8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    2C8B : 9B                             ghi   FB
(1)  394/    2C8C : 52                             str   r2
(1)  395/    2C8D : 99                             ghi   F9
(1)  396/    2C8E : 77                             smb
(1)  397/    2C8F : BC                             phi   R12
(1)  398/    2C90 : 8A                             glo   R10
(1)  399/    2C91 : 52                             str   r2
(1)  400/    2C92 : 88                             glo   r8
(1)  401/    2C93 : 77                             smb
(1)  402/    2C94 : AD                             plo   R13
(1)  403/    2C95 : 9A                             ghi   R10
(1)  404/    2C96 : 52                             str   r2
(1)  405/    2C97 : 98                             ghi   r8
(1)  406/    2C98 : 77                             smb
(1)  407/    2C99 : BD                             phi   R13
(1)  408/    2C9A : CB 2C A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    2C9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    2C9E : B8                             phi   r8
(1)  411/    2C9F : 8D                             glo   R13
(1)  412/    2CA0 : A8                             plo   r8
(1)  413/    2CA1 : 9C                             ghi   R12
(1)  414/    2CA2 : B9                             phi   F9
(1)  415/    2CA3 : 8C                             glo   R12
(1)  416/    2CA4 : A9                             plo   F9
(1)  417/    2CA5 : C0 2C BF                       lbr   add_fnl               ; finalize
(1)  418/    2CA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    2CA9 : 52                             str   r2
(1)  420/    2CAA : 8B                             glo   FB
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 54 - 5/23/2013 16:52:23


(1)  421/    2CAB : F7                             sm
(1)  422/    2CAC : A9                             plo   F9
(1)  423/    2CAD : 99                             ghi   F9
(1)  424/    2CAE : 52                             str   r2
(1)  425/    2CAF : 9B                             ghi   FB
(1)  426/    2CB0 : 77                             smb
(1)  427/    2CB1 : B9                             phi   F9
(1)  428/    2CB2 : 88                             glo   r8
(1)  429/    2CB3 : 52                             str   r2
(1)  430/    2CB4 : 8A                             glo   R10
(1)  431/    2CB5 : 77                             smb
(1)  432/    2CB6 : A8                             plo   r8
(1)  433/    2CB7 : 98                             ghi   r8
(1)  434/    2CB8 : 52                             str   r2
(1)  435/    2CB9 : 9A                             ghi   R10
(1)  436/    2CBA : 77                             smb
(1)  437/    2CBB : B8                             phi   r8
(1)  438/    2CBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    2CBD : FE                             shl
(1)  440/    2CBE : A7                             plo   F7
(1)  441/    2CBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    2CC0 : CA 2C DD                       lbnz  add_nz                ; jump if not
(1)  443/    2CC3 : 88                             glo   r8
(1)  444/    2CC4 : CA 2C DD                       lbnz  add_nz
(1)  445/    2CC7 : 99                             ghi   F9
(1)  446/    2CC8 : CA 2C DD                       lbnz  add_nz
(1)  447/    2CCB : 89                             glo   F9
(1)  448/    2CCC : CA 2C DD                       lbnz  add_nz
(1)  449/    2CCF : 12                             inc	r2	;wjr release work area
(1)  450/    2CD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    2CD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    2CD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    2CDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    2CDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    2CDE : C2 2C EB                       lbz   add_nx                ; jump if not
(1)  456/    2CE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    2CE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    2CE5 : FC 01                          adi   1                     ; increment it
(1)  459/    2CE7 : BF                             phi   R15                    ; and put it back
(1)  460/    2CE8 : C0 2C DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    2CEB :                     
(1)  462/    2CEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    2CEC : F6                             shr
(1)  464/    2CED : A7                             plo   F7
(1)  465/    2CEE : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    2CF1 :                     
(1)  467/    2CF1 :                     ; ***************************************
(1)  468/    2CF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    2CF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    2CF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    2CF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    2CF1 :                     ; ***************************************
(1)  473/    2CF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    2CF2 : FB 80                          xri   080h
(1)  475/    2CF4 : BA                             phi   R10                    ; and put it back
(1)  476/    2CF5 : C0 2B EE                       lbr   fp_add                ; now just add
(1)  477/    2CF8 :                     
(1)  478/    2CF8 :                     ; ***************************************
(1)  479/    2CF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    2CF8 :                     ; *** R8:F9 - Arg 1                   ***
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 55 - 5/23/2013 16:52:23


(1)  481/    2CF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    2CF8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    2CF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    2CF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    2CF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    2CF8 :                     ; ***************************************
(1)  487/    2CF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    2CF9 : CA 2D 09                       lbnz  div_a1nz
(1)  489/    2CFC : 88                             glo   r8
(1)  490/    2CFD : CA 2D 09                       lbnz  div_a1nz
(1)  491/    2D00 : 99                             ghi   F9
(1)  492/    2D01 : CA 2D 09                       lbnz  div_a1nz
(1)  493/    2D04 : 89                             glo   F9
(1)  494/    2D05 : CA 2D 09                       lbnz  div_a1nz
(1)  495/    2D08 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    2D09 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    2D0A : CA 2D 27                       lbnz  div_a2nz
(1)  498/    2D0D : 8A                             glo   R10
(1)  499/    2D0E : CA 2D 27                       lbnz  div_a2nz
(1)  500/    2D11 : 9B                             ghi   FB
(1)  501/    2D12 : CA 2D 27                       lbnz  div_a2nz
(1)  502/    2D15 : 8B                             glo   FB
(1)  503/    2D16 : CA 2D 27                       lbnz  div_a2nz
(1)  504/    2D19 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    2D1A : FA 80                          ani   080h                  ; want only sign
(1)  506/    2D1C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    2D1E : B8                             phi   r8                    ; put into answer
(1)  508/    2D1F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    2D21 : A8                             plo   r8 
(1)  510/    2D22 : F8 00                          ldi   0
(1)  511/    2D24 : B9                             phi   F9
(1)  512/    2D25 : A9                             plo   F9
(1)  513/    2D26 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    2D27 :                     
(1)  515/    2D27 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    2D2C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    2D31 : (MACRO)             	   pushr R13	;wjr
(1)  518/    2D36 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    2D37 :                     
(1)  520/    2D37 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    2D3A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    2D3D : 8F                             glo   R15                    ; get exp2
(1)  523/    2D3E : FF 7F                          smi   127                   ; remove bias
(1)  524/    2D40 : 52                             str   r2                    ; place into memory
(1)  525/    2D41 : 9F                             ghi   R15                    ; get exp1
(1)  526/    2D42 : FF 7F                          smi   127                   ; remove bias
(1)  527/    2D44 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    2D45 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    2D47 : 73                             stxd                        ; save onto stack
(1)  530/    2D48 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    2D49 : 52                             str   r2
(1)  532/    2D4A : F6                             shr
(1)  533/    2D4B : F3                             xor
(1)  534/    2D4C : 73                             stxd                        ; place onto stack
(1)  535/    2D4D : F8 00                          ldi   0                     ; setup man
(1)  536/    2D4F : BA                             phi   R10
(1)  537/    2D50 : 8A                             glo   R10
(1)  538/    2D51 : F9 80                          ori   080h
(1)  539/    2D53 : AA                             plo   R10
(1)  540/    2D54 : F8 00                          ldi   0                     ; setup div
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 56 - 5/23/2013 16:52:23


(1)  541/    2D56 : B8                             phi   r8
(1)  542/    2D57 : 88                             glo   r8
(1)  543/    2D58 : F9 80                          ori   080h
(1)  544/    2D5A : A8                             plo   r8
(1)  545/    2D5B : F8 00                          ldi   0                     ; setup result
(1)  546/    2D5D : BC                             phi   R12
(1)  547/    2D5E : AC                             plo   R12
(1)  548/    2D5F : B7                             phi   F7
(1)  549/    2D60 : A7                             plo   F7
(1)  550/    2D61 : AF                             plo   R15                    ; setup quotient
(1)  551/    2D62 : BF                             phi   R15
(1)  552/    2D63 : BD                             phi   R13
(1)  553/    2D64 : AD                             plo   R13
(1)  554/    2D65 : F8 80                          ldi   080h
(1)  555/    2D67 : AF                             plo   R15
(1)  556/    2D68 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    2D69 : CA 2D 7B                       lbnz  div_go1
(1)  558/    2D6C : 88                             glo   r8
(1)  559/    2D6D : CA 2D 7B                       lbnz  div_go1
(1)  560/    2D70 : 99                             ghi   F9
(1)  561/    2D71 : CA 2D 7B                       lbnz  div_go1
(1)  562/    2D74 : 89                             glo   F9
(1)  563/    2D75 : CA 2D 7B                       lbnz  div_go1
(1)  564/    2D78 : C0 2D DB                       lbr   div_z
(1)  565/    2D7B : 9A                  div_go1:   ghi   R10
(1)  566/    2D7C : CA 2D 8E                       lbnz  div_go
(1)  567/    2D7F : 8A                             glo   R10
(1)  568/    2D80 : CA 2D 8E                       lbnz  div_go
(1)  569/    2D83 : 9B                             ghi   FB
(1)  570/    2D84 : CA 2D 8E                       lbnz  div_go
(1)  571/    2D87 : 8B                             glo   FB
(1)  572/    2D88 : CA 2D 8E                       lbnz  div_go
(1)  573/    2D8B : C0 2D DB                       lbr   div_z                 ; nothing more to do
(1)  574/    2D8E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    2D8F : 52                             str   r2
(1)  576/    2D90 : 89                             glo   F9
(1)  577/    2D91 : F7                             sm
(1)  578/    2D92 : 9B                             ghi   FB
(1)  579/    2D93 : 52                             str   r2
(1)  580/    2D94 : 99                             ghi   F9
(1)  581/    2D95 : 77                             smb
(1)  582/    2D96 : 8A                             glo   R10
(1)  583/    2D97 : 52                             str   r2
(1)  584/    2D98 : 88                             glo   r8
(1)  585/    2D99 : 77                             smb
(1)  586/    2D9A : 9A                             ghi   R10
(1)  587/    2D9B : 52                             str   r2
(1)  588/    2D9C : 98                             ghi   r8
(1)  589/    2D9D : 77                             smb
(1)  590/    2D9E : CB 2D C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    2DA1 : 8B                             glo   FB                    ; div -= man
(1)  592/    2DA2 : 52                             str   r2
(1)  593/    2DA3 : 89                             glo   F9
(1)  594/    2DA4 : F7                             sm
(1)  595/    2DA5 : A9                             plo   F9
(1)  596/    2DA6 : 9B                             ghi   FB
(1)  597/    2DA7 : 52                             str   r2
(1)  598/    2DA8 : 99                             ghi   F9
(1)  599/    2DA9 : 77                             smb
(1)  600/    2DAA : B9                             phi   F9
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 57 - 5/23/2013 16:52:23


(1)  601/    2DAB : 8A                             glo   R10
(1)  602/    2DAC : 52                             str   r2
(1)  603/    2DAD : 88                             glo   r8
(1)  604/    2DAE : 77                             smb
(1)  605/    2DAF : A8                             plo   r8
(1)  606/    2DB0 : 9A                             ghi   R10
(1)  607/    2DB1 : 52                             str   r2
(1)  608/    2DB2 : 98                             ghi   r8
(1)  609/    2DB3 : 77                             smb
(1)  610/    2DB4 : B8                             phi   r8
(1)  611/    2DB5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    2DB6 : 52                             str   r2
(1)  613/    2DB7 : 9C                             ghi   R12
(1)  614/    2DB8 : F1                             or
(1)  615/    2DB9 : BC                             phi   R12
(1)  616/    2DBA : 8F                             glo   R15
(1)  617/    2DBB : 52                             str   r2
(1)  618/    2DBC : 8C                             glo   R12
(1)  619/    2DBD : F1                             or
(1)  620/    2DBE : AC                             plo   R12
(1)  621/    2DBF : 9D                             ghi   R13
(1)  622/    2DC0 : 52                             str   r2
(1)  623/    2DC1 : 97                             ghi   F7
(1)  624/    2DC2 : F1                             or
(1)  625/    2DC3 : B7                             phi   F7
(1)  626/    2DC4 : 8D                             glo   R13
(1)  627/    2DC5 : 52                             str   r2
(1)  628/    2DC6 : 87                             glo   F7
(1)  629/    2DC7 : F1                             or
(1)  630/    2DC8 : A7                             plo   F7
(1)  631/    2DC9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    2DCA : 2B A3                          dw    fp_shr_fd
(1)  633/    2DCC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    2DCD : F6                             shr
(1)  635/    2DCE : BA                             phi   R10
(1)  636/    2DCF : 8A                             glo   R10
(1)  637/    2DD0 : 76                             shrc
(1)  638/    2DD1 : AA                             plo   R10
(1)  639/    2DD2 : 9B                             ghi   FB
(1)  640/    2DD3 : 76                             shrc
(1)  641/    2DD4 : BB                             phi   FB
(1)  642/    2DD5 : 8B                             glo   FB
(1)  643/    2DD6 : 76                             shrc
(1)  644/    2DD7 : AB                             plo   FB
(1)  645/    2DD8 : C0 2D 68                       lbr   div_lp                ; loop back until done
(1)  646/    2DDB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    2DDC : B8                             phi   r8
(1)  648/    2DDD : 8C                             glo   R12
(1)  649/    2DDE : A8                             plo   r8
(1)  650/    2DDF : 97                             ghi   F7
(1)  651/    2DE0 : B9                             phi   F9
(1)  652/    2DE1 : 87                             glo   F7
(1)  653/    2DE2 : A9                             plo   F9
(1)  654/    2DE3 : 60                             irx                         ; recover sign
(1)  655/    2DE4 : 72                             ldxa
(1)  656/    2DE5 : A7                             plo   F7
(1)  657/    2DE6 : F0                             ldx                         ; recover answer exponent
(1)  658/    2DE7 : BF                             phi   R15
(1)  659/    2DE8 : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    2DEB :                     
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 58 - 5/23/2013 16:52:23


(1)  661/    2DEB :                     ; ***************************************
(1)  662/    2DEB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    2DEB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    2DEB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    2DEB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    2DEB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    2DEB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    2DEB :                     ; ***        F7.0 - signs             ***
(1)  669/    2DEB :                     ; ***************************************
(1)  670/    2DEB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    2DF0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    2DF5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    2DFA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    2DFB :                     
(1)  675/    2DFB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    2DFE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    2E01 : 8F                             glo   R15                    ; get exp2
(1)  678/    2E02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    2E04 : 52                             str   r2                    ; place into memory
(1)  680/    2E05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    2E06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    2E08 : F4                             add                         ; add in exponent 2
(1)  683/    2E09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    2E0B : 73                             stxd                        ; place onto stack
(1)  685/    2E0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    2E0D : 52                             str   r2
(1)  687/    2E0E : F6                             shr
(1)  688/    2E0F : F3                             xor
(1)  689/    2E10 : 73                             stxd                        ; place onto stack
(1)  690/    2E11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    2E12 : 73                             stxd                        ; save on stack
(1)  692/    2E13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    2E14 : 73                             stxd
(1)  694/    2E15 : 86                             glo   r6
(1)  695/    2E16 : 73                             stxd
(1)  696/    2E17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    2E19 : 73                             stxd
(1)  698/    2E1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    2E1B : AE                             plo   R14
(1)  700/    2E1C : B6                             phi   r6
(1)  701/    2E1D : A6                             plo   r6
(1)  702/    2E1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    2E1F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    2E20 : F9 80                          ori   080h
(1)  705/    2E22 : A8                             plo   r8
(1)  706/    2E23 : F8 00                          ldi   0
(1)  707/    2E25 : BC                             phi   R12                    ; set result to 0
(1)  708/    2E26 : AC                             plo   R12
(1)  709/    2E27 : B7                             phi   F7
(1)  710/    2E28 : A7                             plo   F7
(1)  711/    2E29 : BF                             phi   R15
(1)  712/    2E2A : AF                             plo   R15
(1)  713/    2E2B : BD                             phi   R13
(1)  714/    2E2C : AD                             plo   R13
(1)  715/    2E2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    2E2E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    2E2F : F9 80                          ori   080h
(1)  718/    2E31 : AA                             plo   R10
(1)  719/    2E32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    2E33 : CA 2E 42                       lbnz  mul_go1               ; jump if not zero
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 59 - 5/23/2013 16:52:23


(1)  721/    2E36 : 9B                             ghi   FB
(1)  722/    2E37 : CA 2E 42                       lbnz  mul_go1
(1)  723/    2E3A : 8A                             glo   R10
(1)  724/    2E3B : CA 2E 42                       lbnz  mul_go1
(1)  725/    2E3E : 9A                             ghi   R10
(1)  726/    2E3F : C2 2E BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    2E42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    2E43 : F6                             shr
(1)  729/    2E44 : BA                             phi   R10
(1)  730/    2E45 : 8A                             glo   R10
(1)  731/    2E46 : 76                             shrc
(1)  732/    2E47 : AA                             plo   R10
(1)  733/    2E48 : 9B                             ghi   FB
(1)  734/    2E49 : 76                             shrc
(1)  735/    2E4A : BB                             phi   FB
(1)  736/    2E4B : 8B                             glo   FB
(1)  737/    2E4C : 76                             shrc
(1)  738/    2E4D : AB                             plo   FB
(1)  739/    2E4E : CB 2E 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    2E51 : 89                             glo   F9                    ; res += mul
(1)  741/    2E52 : 52                             str   r2
(1)  742/    2E53 : 87                             glo   F7
(1)  743/    2E54 : F4                             add
(1)  744/    2E55 : A7                             plo   F7
(1)  745/    2E56 : 99                             ghi   F9
(1)  746/    2E57 : 52                             str   r2
(1)  747/    2E58 : 97                             ghi   F7
(1)  748/    2E59 : 74                             adc
(1)  749/    2E5A : B7                             phi   F7
(1)  750/    2E5B : 88                             glo   r8
(1)  751/    2E5C : 52                             str   r2
(1)  752/    2E5D : 8C                             glo   R12
(1)  753/    2E5E : 74                             adc
(1)  754/    2E5F : AC                             plo   R12
(1)  755/    2E60 : 98                             ghi   r8
(1)  756/    2E61 : 52                             str   r2
(1)  757/    2E62 : 9C                             ghi   R12
(1)  758/    2E63 : 74                             adc
(1)  759/    2E64 : BC                             phi   R12
(1)  760/    2E65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    2E66 : 52                             str   r2
(1)  762/    2E67 : 8D                             glo   R13
(1)  763/    2E68 : F4                             add
(1)  764/    2E69 : AD                             plo   R13
(1)  765/    2E6A : 96                             ghi   r6
(1)  766/    2E6B : 52                             str   r2
(1)  767/    2E6C : 96                             ghi   r6
(1)  768/    2E6D : 52                             str   r2
(1)  769/    2E6E : 9D                             ghi   R13
(1)  770/    2E6F : 74                             adc
(1)  771/    2E70 : BD                             phi   R13
(1)  772/    2E71 : 8E                             glo   R14
(1)  773/    2E72 : 52                             str   r2
(1)  774/    2E73 : 8F                             glo   R15
(1)  775/    2E74 : 74                             adc
(1)  776/    2E75 : AF                             plo   R15
(1)  777/    2E76 : 9E                             ghi   R14
(1)  778/    2E77 : 52                             str   r2
(1)  779/    2E78 : 9F                             ghi   R15
(1)  780/    2E79 : 74                             adc
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 60 - 5/23/2013 16:52:23


(1)  781/    2E7A : BF                             phi   R15
(1)  782/    2E7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    2E7C : C2 2E 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    2E7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    2E80 : FC 01                          adi   1
(1)  786/    2E82 : AD                             plo   R13
(1)  787/    2E83 : 9D                             ghi   R13
(1)  788/    2E84 : 7C 00                          adci  0
(1)  789/    2E86 : BD                             phi   R13
(1)  790/    2E87 : 8F                             glo   R15
(1)  791/    2E88 : 7C 00                          adci  0
(1)  792/    2E8A : AF                             plo   R15
(1)  793/    2E8B : 9F                             ghi   R15
(1)  794/    2E8C : 7C 00                          adci  0
(1)  795/    2E8E : BF                             phi   R15
(1)  796/    2E8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    2E90 : F0                             ldx
(1)  798/    2E91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    2E93 : 73                             stxd                        ; and put it back
(1)  800/    2E94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    2E95 : FE                             shl
(1)  802/    2E96 : A9                             plo   F9
(1)  803/    2E97 : 99                             ghi   F9
(1)  804/    2E98 : 7E                             shlc
(1)  805/    2E99 : B9                             phi   F9
(1)  806/    2E9A : 88                             glo   r8
(1)  807/    2E9B : 7E                             shlc
(1)  808/    2E9C : A8                             plo   r8
(1)  809/    2E9D : 98                             ghi   r8
(1)  810/    2E9E : 7E                             shlc
(1)  811/    2E9F : B8                             phi   r8
(1)  812/    2EA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    2EA1 : FE                             shl
(1)  814/    2EA2 : A6                             plo   r6
(1)  815/    2EA3 : 96                             ghi   r6
(1)  816/    2EA4 : 7E                             shlc
(1)  817/    2EA5 : B6                             phi   r6
(1)  818/    2EA6 : 8E                             glo   R14
(1)  819/    2EA7 : 7E                             shlc
(1)  820/    2EA8 : AE                             plo   R14
(1)  821/    2EA9 : 9E                             ghi   R14
(1)  822/    2EAA : 7E                             shlc
(1)  823/    2EAB : BE                             phi   R14
(1)  824/    2EAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    2EAD : C2 2E 32                       lbz   mul_lp1               ; jump if not
(1)  826/    2EB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    2EB2 : B8                             phi   r8
(1)  828/    2EB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    2EB4 : F9 01                          ori   1
(1)  830/    2EB6 : A6                             plo   r6
(1)  831/    2EB7 : C0 2E 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    2EBA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    2EBB : 72                             ldxa
(1)  834/    2EBC : AE                             plo   R14                    ; set aside
(1)  835/    2EBD : 72                             ldxa
(1)  836/    2EBE : A6                             plo   r6
(1)  837/    2EBF : 72                             ldxa
(1)  838/    2EC0 : B6                             phi   r6
(1)  839/    2EC1 : F0                             ldx
(1)  840/    2EC2 : BE                             phi   R14
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 61 - 5/23/2013 16:52:23


(1)  841/    2EC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    2EC4 : B8                             phi   r8
(1)  843/    2EC5 : 8C                             glo   R12
(1)  844/    2EC6 : A8                             plo   r8
(1)  845/    2EC7 : 97                             ghi   F7
(1)  846/    2EC8 : B9                             phi   F9
(1)  847/    2EC9 : 87                             glo   F7
(1)  848/    2ECA : A9                             plo   F9
(1)  849/    2ECB : 8E                             glo   R14
(1)  850/    2ECC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    2ECD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    2ECE : FF 02                          smi   2                     ; see if <2
(1)  853/    2ED0 : CB 2E E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    2ED3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    2ED4 : 2B 72                          dw    fp_shr_1
(1)  856/    2ED6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    2ED7 : 2B A3                          dw    fp_shr_fd
(1)  858/    2ED9 : CB 2E E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    2EDC : 88                             glo   r8                    ; set high bit
(1)  860/    2EDD : F9 80                          ori   080h
(1)  861/    2EDF : A8                             plo   r8
(1)  862/    2EE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    2EE1 : C0 2E CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    2EE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    2EE5 : 72                             ldxa
(1)  866/    2EE6 : A7                             plo   F7
(1)  867/    2EE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    2EE8 : AC                             plo   R12
(1)  869/    2EE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    2EEA : CA 2E FC                       lbnz  mul_lp3a
(1)  871/    2EED : 8F                             glo   R15
(1)  872/    2EEE : CA 2E FC                       lbnz  mul_lp3a
(1)  873/    2EF1 : 9D                             ghi   R13
(1)  874/    2EF2 : CA 2E FC                       lbnz  mul_lp3a
(1)  875/    2EF5 : 8D                             glo   R13
(1)  876/    2EF6 : CA 2E FC                       lbnz  mul_lp3a
(1)  877/    2EF9 : C0 2F 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    2EFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    2EFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    2F00 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    2F03 : CB 2E E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    2F06 : 88                             glo   r8                    ; set high bit
(1)  883/    2F07 : F9 80                          ori   080h
(1)  884/    2F09 : A8                             plo   r8
(1)  885/    2F0A : C0 2E E9                       lbr   mul_lp3
(1)  886/    2F0D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    2F0E : BF                             phi   R15                    ; to high R15
(1)  888/    2F0F : C0 2B B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    2F12 :                     
(1)  890/    2F12 :                     ; ***************************************
(1)  891/    2F12 :                     ; *** Convert ascii to floating point ***
(1)  892/    2F12 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    2F12 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    2F12 :                     ; ***************************************
(1)  895/    2F12 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    2F13 : FF 20                          smi   ' '                   ; check for space
(1)  897/    2F15 : C2 2F 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    2F18 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    2F19 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    2F1A : FF 2D                          smi   '-'                   ; first check for minus
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 62 - 5/23/2013 16:52:23


(1)  901/    2F1C : CA 2F 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    2F1F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    2F21 : 73                             stxd                        ; place onto stack
(1)  904/    2F22 : 1F                             inc   R15                    ; move past sign
(1)  905/    2F23 : C0 2F 30                       lbr   atof_go1              ; and continue
(1)  906/    2F26 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    2F28 : 73                             stxd                        ; place onto stack
(1)  908/    2F29 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    2F2A : FF 2B                          smi   '+'
(1)  910/    2F2C : CA 2F 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    2F2F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    2F30 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    2F32 : B8                             phi   r8
(1)  914/    2F33 : A8                             plo   r8
(1)  915/    2F34 : B9                             phi   F9
(1)  916/    2F35 : A9                             plo   F9
(1)  917/    2F36 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    2F37 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    2F3A : CB 2F 67                       lbnf  atof_no1              ; jump if not
(1)  920/    2F3D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    2F3E : BA                             phi   R10
(1)  922/    2F3F : 88                             glo   r8
(1)  923/    2F40 : AA                             plo   R10
(1)  924/    2F41 : 99                             ghi   F9
(1)  925/    2F42 : BB                             phi   FB
(1)  926/    2F43 : 89                             glo   F9
(1)  927/    2F44 : AB                             plo   FB
(1)  928/    2F45 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    2F48 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    2F4B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    2F4E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    2F51 : 4F                             lda   R15                    ; get number
(1)  933/    2F52 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    2F54 : 52                             str   r2                    ; setup for add
(1)  935/    2F55 : 89                             glo   F9                    ; add in next digit
(1)  936/    2F56 : F4                             add
(1)  937/    2F57 : A9                             plo   F9
(1)  938/    2F58 : 99                             ghi   F9                    ; propagate carry
(1)  939/    2F59 : 7C 00                          adci  0
(1)  940/    2F5B : B9                             phi   F9
(1)  941/    2F5C : 88                             glo   r8
(1)  942/    2F5D : 7C 00                          adci  0
(1)  943/    2F5F : A8                             plo   r8
(1)  944/    2F60 : 98                             ghi   r8
(1)  945/    2F61 : 7C 00                          adci  0
(1)  946/    2F63 : B8                             phi   r8
(1)  947/    2F64 : C0 2F 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    2F67 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    2F68 : FF 2E                          smi   '.'
(1)  950/    2F6A : CA 2F 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    2F6D : 1F                             inc   R15                    ; move past decimal
(1)  952/    2F6E : F8 30               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    2F70 : BA                             phi   R10
(1)  954/    2F71 : F8 A3                          ldi   scratch&255
(1)  955/    2F73 : AA                             plo   R10
(1)  956/    2F74 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    2F76 : AC                             plo   R12
(1)  958/    2F77 : F8 00               atof_lpx:  ldi   0
(1)  959/    2F79 : 5A                             str   R10
(1)  960/    2F7A : 1A                             inc   R10
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 63 - 5/23/2013 16:52:23


(1)  961/    2F7B : 2C                             dec   R12
(1)  962/    2F7C : 8C                             glo   R12
(1)  963/    2F7D : CA 2F 77                       lbnz  atof_lpx
(1)  964/    2F80 : F8 30                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    2F82 : BA                             phi   R10
(1)  966/    2F83 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    2F85 : AA                             plo   R10
(1)  968/    2F86 : F8 01                          ldi   1                     ; setup count
(1)  969/    2F88 : AC                             plo   R12
(1)  970/    2F89 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    2F8B : BC                             phi   R12
(1)  972/    2F8C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    2F8D : FF 11                          smi   17
(1)  974/    2F8F : C2 2F A8                       lbz   atof_dn3              ; jump if so
(1)  975/    2F92 : 0F                             ldn   R15                    ; get character
(1)  976/    2F93 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    2F94 : 2B 62                          dw    f_isnum
(1)  978/    2F96 : CB 2F A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    2F99 : 4F                             lda   R15                    ; get character
(1)  980/    2F9A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    2F9C : 5A                             str   R10                    ; write into bcd area
(1)  982/    2F9D : 1A                             inc   R10
(1)  983/    2F9E : 1C                             inc   R12                    ; increment count
(1)  984/    2F9F : CA 2F 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    2FA2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    2FA4 : BC                             phi   R12
(1)  987/    2FA5 : C0 2F 8C                       lbr   atof_lp2
(1)  988/    2FA8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    2FA9 : CA 2F C2                       lbnz  atof_nz
(1)  990/    2FAC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    2FAD : CA 2F C2                       lbnz  atof_nz
(1)  992/    2FB0 : 88                             glo   r8
(1)  993/    2FB1 : CA 2F C2                       lbnz  atof_nz
(1)  994/    2FB4 : 99                             ghi   F9
(1)  995/    2FB5 : CA 2F C2                       lbnz  atof_nz
(1)  996/    2FB8 : 89                             glo   F9
(1)  997/    2FB9 : CA 2F C2                       lbnz  atof_nz
(1)  998/    2FBC : 60                             irx                         ; recover sign
(1)  999/    2FBD : F0                             ldx
(1) 1000/    2FBE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    2FBF : C0 30 95                       lbr	atof_end               ; and return
(1) 1002/    2FC2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    2FC4 : BC                             phi   R12
(1) 1004/    2FC5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    2FC6 : FA 80                          ani   080h
(1) 1006/    2FC8 : CA 30 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    2FCB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    2FCE : F8 30                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    2FD0 : BA                             phi   R10
(1) 1010/    2FD1 : F8 A3                          ldi   255&scratch
(1) 1011/    2FD3 : AA                             plo   R10
(1) 1012/    2FD4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    2FD6 : 5A                             str   R10
(1) 1014/    2FD7 : F8 30                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    2FD9 : BA                             phi   R10
(1) 1016/    2FDA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    2FDC : AA                             plo   R10
(1) 1018/    2FDD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    2FDF : AE                             plo   R14
(1) 1020/    2FE0 : F8 10                          ldi   16                    ; setup count
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 64 - 5/23/2013 16:52:23


(1) 1021/    2FE2 : AC                             plo   R12
(1) 1022/    2FE3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    2FE4 : 52                             str   r2                    ; in memory for add
(1) 1024/    2FE5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    2FE6 : F4                             add                         ; add in carry
(1) 1026/    2FE7 : 52                             str   r2                    ; place into memory
(1) 1027/    2FE8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    2FE9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    2FEA : 5A                             str   R10                    ; put it back
(1) 1030/    2FEB : FF 0A                          smi   10
(1) 1031/    2FED : CB 2F F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    2FF0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    2FF1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    2FF3 : C8                             lskp                        ; skip next instruction
(1) 1035/    2FF4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    2FF6 : AE                             plo   R14
(1) 1037/    2FF7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    2FF8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    2FF9 : 8C                             glo   R12                    ; see if done
(1) 1040/    2FFA : CA 2F E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    2FFD : F8 30                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    2FFF : BA                             phi   R10
(1) 1043/    3000 : F8 A3                          ldi   255&scratch
(1) 1044/    3002 : AA                             plo   R10
(1) 1045/    3003 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    3004 : C2 30 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    3007 : 89                             glo   F9                    ; add in the carry
(1) 1048/    3008 : F9 01                          ori   1
(1) 1049/    300A : A9                             plo   F9
(1) 1050/    300B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    300C : FC 01                          adi   1
(1) 1052/    300E : BC                             phi   R12
(1) 1053/    300F : C0 2F C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    3012 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    3013 : 52                             str   r2                    ; into memory
(1) 1056/    3014 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    3016 : F7                             sm
(1) 1058/    3017 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    3019 : BD                             phi   R13                    ; set aside
(1) 1060/    301A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    301B : A9                             plo   F9
(1) 1062/    301C : 88                             glo   r8
(1) 1063/    301D : B9                             phi   F9
(1) 1064/    301E : 98                             ghi   r8
(1) 1065/    301F : FE                             shl                         ; shift out high bit
(1) 1066/    3020 : A8                             plo   r8
(1) 1067/    3021 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    3022 : F6                             shr
(1) 1069/    3023 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    3024 : 88                             glo   r8                    ; get mantissa
(1) 1071/    3025 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    3026 : A8                             plo   r8                    ; and write it
(1) 1073/    3027 : 60                             irx                         ; point to sign
(1) 1074/    3028 : 98                             ghi   r8                    ; high byte
(1) 1075/    3029 : F1                             or                          ; set sign
(1) 1076/    302A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    302B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    302C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    302E : C2 30 37                       lbz   atof_exp
(1) 1080/    3031 : 0F                             ldn   R15
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 65 - 5/23/2013 16:52:23


(1) 1081/    3032 : FF 45                          smi   'E'
(1) 1082/    3034 : CA 30 95                       lbnz  atof_end
(1) 1083/    3037 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    3038 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    3039 : FF 2D                          smi   '-'
(1) 1086/    303B : C2 30 48                       lbz   atof_n
(1) 1087/    303E : 0F                             ldn   R15
(1) 1088/    303F : FF 2B                          smi   '+'
(1) 1089/    3041 : C2 30 45                       lbz   atof_p
(1) 1090/    3044 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    3045 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    3047 : C8                             lskp
(1) 1093/    3048 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    304A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    304B : 1F                             inc   R15                    ; move past sign
(1) 1096/    304C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    304E : AC                             plo   R12
(1) 1098/    304F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    3050 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    3053 : CB 30 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    3056 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    3057 : 52                             str   r2
(1) 1103/    3058 : F6                             shr                         ; multiply by 2
(1) 1104/    3059 : F6                             shr                         ; by 4
(1) 1105/    305A : F4                             add                         ; by 5
(1) 1106/    305B : F6                             shr                         ; by 10
(1) 1107/    305C : 52                             str   r2                    ; put here for add
(1) 1108/    305D : 4F                             lda   R15                    ; recover number
(1) 1109/    305E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    3060 : F4                             add                         ; add with total
(1) 1111/    3061 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    3062 : C0 30 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    3065 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    3066 : C2 30 95                       lbz   atof_end              ; jump if so
(1) 1115/    3069 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    306A : 8C                             glo   R12                    ; save count
(1) 1117/    306B : 73                             stxd
(1) 1118/    306C : 9C                             ghi   R12                    ; save sign
(1) 1119/    306D : 73                             stxd
(1) 1120/    306E : 8F                             glo   R15
(1) 1121/    306F : 73                             stxd
(1) 1122/    3070 : 9F                             ghi   R15
(1) 1123/    3071 : 73                             stxd
(1) 1124/    3072 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    3074 : BA                             phi   R10
(1) 1126/    3075 : F8 20                          ldi   020h
(1) 1127/    3077 : AA                             plo   R10
(1) 1128/    3078 : F8 00                          ldi   0
(1) 1129/    307A : BB                             phi   FB
(1) 1130/    307B : AB                             plo   FB
(1) 1131/    307C : 9C                             ghi   R12
(1) 1132/    307D : C2 30 86                       lbz   atof_div              ; jump if negative
(1) 1133/    3080 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    3083 : C0 30 89                       lbr   atof_go5              ; clean up call
(1) 1135/    3086 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    3089 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    308A : 72                             ldxa
(1) 1138/    308B : BF                             phi   R15
(1) 1139/    308C : 72                             ldxa
(1) 1140/    308D : AF                             plo   R15
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(LCC1802fp.inc) - page 66 - 5/23/2013 16:52:23


(1) 1141/    308E : 72                             ldxa
(1) 1142/    308F : BC                             phi   R12
(1) 1143/    3090 : F0                             ldx
(1) 1144/    3091 : AC                             plo   R12
(1) 1145/    3092 : C0 30 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    3095 :                     atof_end:
(1) 1147/    3095 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    3096 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    309A : (MACRO)             	   popr R12	;wjr
(1) 1150/    309E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    30A2 : (MACRO)             	   Cretn
(1) 1152/    30A3 : 00 00               scratch:   db	00,00
    2234/    30A5 :                     	include IO1802.inc
(1)    1/    30A5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    30A5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    30A5 :                     	align 64
(1)    4/    30C0 :                     _putc:
(1)    5/    30C0 :                     _out5:	
(1)    6/    30C0 : 8C                  	glo	regArg1
(1)    7/    30C1 : 22                  	dec	sp
(1)    8/    30C2 : 52                  	str	sp
(1)    9/    30C3 : 65                  	out	5
(1)   10/    30C4 : (MACRO)             	Cretn
(1)   11/    30C5 :                     _inp:		;raw port input
(1)   12/    30C5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    30C5 : 22                  	dec	sp	;work backwards
(1)   14/    30C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    30C8 : 73                  	stxd		
(1)   16/    30C9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    30CA : FA 07               	ani	0x07	;clean it
(1)   18/    30CC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    30CE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    30D0 : 73                  	stxd		;store it for execution
(1)   21/    30D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    30D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    30D6 : D8                  	sep	rt1	;execute it
(1)   24/    30D7 :                     ;we will come back to here with the input byte in D
(1)   25/    30D7 : 12                  	inc	sp	;step over the work area
(1)   26/    30D8 : AF                  	plo	retVal	;save it to return
(1)   27/    30D9 : F8 00               	ldi	0
(1)   28/    30DB : BF                  	phi	retval	;clear top byte
(1)   29/    30DC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    30DD : 12                  	inc	sp	;and the D3
(1)   31/    30DE : (MACRO)             	Cretn		;and we're done
(1)   32/    30DF :                     	
(1)   33/    30DF :                     _out:		;raw port output
(1)   34/    30DF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    30DF : 22                  	dec	sp	;work backwards
(1)   36/    30E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    30E2 : 73                  	stxd		
(1)   38/    30E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    30E7 : 8C                  	glo	regarg1	;get the port number
(1)   40/    30E8 : FA 07               	ani	0x07	;clean it
(1)   41/    30EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    30EC : 73                  	stxd		;store it for execution
(1)   43/    30ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    30EE : 52                  	str	sp	;store it where sp points
(1)   45/    30EF : D8                  	sep	rt1	;execute it
(1)   46/    30F0 :                     ;we will come back to here with sp stepped up by one
(1)   47/    30F0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm(IO1802.inc) - page 67 - 5/23/2013 16:52:23


(1)   48/    30F1 : 12                  	inc	sp	;and the D3
(1)   49/    30F2 : (MACRO)             	Cretn		;and we're done
(1)   50/    30F3 :                     	
(1)   51/    30F3 :                     	
    2235/    30F3 :                     
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 68 - 5/23/2013 16:52:23


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2C07 C |  ADD_A2NZ :                    2C18 C |
 ADD_FNL :                     2CBF C |  ADD_LP1 :                     2C62 C |
 ADD_LP1DN :                   2C77 C |  ADD_NM :                      2C86 C |
 ADD_NO :                      2CA8 C |  ADD_NS :                      2C50 C |
 ADD_NX :                      2CEB C |  ADD_NZ :                      2CDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    3086 C |
 ATOF_DN3 :                    2FA8 C |  ATOF_DN4 :                    3012 C |
 ATOF_DN5 :                    3065 C |  ATOF_END :                    3095 C |
 ATOF_EXP :                    3037 C |  ATOF_GO1 :                    2F30 C |
 ATOF_GO5 :                    3089 C |  ATOF_LP1 :                    2F36 C |
 ATOF_LP2 :                    2F8C C |  ATOF_LP3 :                    2FC5 C |
 ATOF_LP4 :                    2FE3 C |  ATOF_LP5 :                    304F C |
 ATOF_LPX :                    2F77 C |  ATOF_N :                      3048 C |
 ATOF_NC4 :                    300B C |  ATOF_NDP :                    2F6E C |
 ATOF_NM :                     2F26 C |  ATOF_NO1 :                    2F67 C |
 ATOF_NO4 :                    2FF4 C |  ATOF_NZ :                     2FC2 C |
 ATOF_P :                      3045 C | *BIGENDIAN :                      0 - |
 BITLOOP222 :                  28AC C | *BRANCHEXT :                      0 - |
 BVTABLE73 :                    C9F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB220 :                2796 C |  CKNEXT222 :                   28F0 C |
 CKTOP222 :                    2897 C |  CLRLP222 :                    2888 C |
*CONSTPI :        3.141592653589793 - |  CVFI4 :                       2B00 C |
 CVIF4 :                       2A00 C | *DATE :                   5/23/2013 - |
 DCKLP222 :                    28AF C |  DIVLOOP16_16217 :             2652 C |
*DIVSETBIT16_16217 :           2684 C |  DIVSKIP16_16217 :             2681 C |
 DIVSKIPCLEAR16_16217 :        2688 C |  DIVSKIPFINALADD16_16217 :     269A C |
 DIVSUB16_16217 :              2673 C |  DIV_A1NZ :                    2D09 C |
 DIV_A2NZ :                    2D27 C |  DIV_GO :                      2D8E C |
 DIV_GO1 :                     2D7B C |  DIV_LP :                      2D68 C |
 DIV_NOPE :                    2DC9 C |  DIV_Z :                       2DDB C |
 DNOADD222 :                   28B7 C |  DONE218 :                     26D3 C |
 DONE221 :                     2874 C |  DONE222 :                     28FA C |
 DONE228 :                     2A6F C |  DONE229 :                     2B61 C |
 DSHLP222 :                    28CB C |  ENDLP219 :                    2761 C |
 F7 :                             7 - |  F9 :                             9 - |
 FAILS :                       2B6E C | *FALSE :                          0 - |
 FB :                             B - |  FP_ADD :                      2BEE C |
 FP_ADD_12 :                   2B8C C |  FP_ATOF :                     2F12 C |
 FP_DIV :                      2CF8 C |  FP_GETEXP :                   2BDC C |
 FP_GETSGN :                   2BE7 C |  FP_MUL :                      2DEB C |
 FP_SC_CLN :                   2BC0 C |  FP_SC_UP :                    2BB0 C |
 FP_SHL_1 :                    2B7F C |  FP_SHR_1 :                    2B72 C |
 FP_SHR_FD :                   2BA3 C |  FP_SUB :                      2CF1 C |
*FULLPMMU :                       1 - |  F_ISNUM :                     2B62 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            56 C |
*L10 :                          BCB C |  L100 :                        1479 C |
 L101 :                        23C0 C |  L102 :                        14B0 C |
 L103 :                        159B C |  L106 :                        168C C |
 L107 :                        161B C |  L108 :                        1678 C |
 L11 :                          369 C |  L110 :                        1904 C |
 L112 :                        16D2 C |  L113 :                        17BD C |
 L115 :                        1803 C |  L116 :                        183D C |
 L119 :                        1904 C |  L12 :                          36F C |
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 69 - 5/23/2013 16:52:23


 L120 :                        1893 C |  L121 :                        18F0 C |
*L123 :                        1AE1 C |  L124 :                        19FF C |
 L125 :                        1A0F C |  L126 :                        1A18 C |
 L127 :                        1AB9 C |  L129 :                        1A1F C |
 L13 :                          373 C | *L130 :                        1A1F C |
 L132 :                        1A2C C |  L133 :                        1AA4 C |
 L136 :                        1A61 C | *L137 :                        1BAB C |
 L138 :                        1B78 C |  L14 :                          377 C |
*L140 :                        1BF7 C | *L141 :                        1C57 C |
*L142 :                        1CCA C | *L143 :                        1D5D C |
 L144 :                        1D38 C |  L145 :                        1D5D C |
*L146 :                        1DDB C | *L147 :                        2217 C |
 L148 :                        1E23 C |  L149 :                        21F6 C |
 L15 :                         2581 C |  L151 :                        1E5F C |
 L152 :                        21F6 C |  L153 :                        21E5 C |
 L154 :                        21F6 C |  L156 :                        1F5D C |
 L157 :                        1F7A C |  L158 :                        1F9B C |
 L159 :                        1FBD C |  L16 :                         2570 C |
 L160 :                        202B C |  L161 :                        2195 C |
 L163 :                        2089 C |  L165 :                        20BC C |
 L166 :                        2190 C |  L167 :                        2195 C |
 L168 :                        21E5 C |  L17 :                         254B C |
 L170 :                        21C9 C |  L172 :                        1EEF C |
 L173 :                        1F0A C |  L174 :                        1EDB C |
*L176 :                        1F42 C | *L177 :                        2255 C |
 L178 :                        23B4 C |  L179 :                        2252 C |
*L180 :                        2252 C | *L182 :                        22FD C |
 L183 :                        228F C |  L184 :                        22DC C |
 L186 :                        22F9 C | *L187 :                        235D C |
 L188 :                        2332 C |  L189 :                        2348 C |
*L191 :                        23AB C |  L192 :                        2387 C |
 L193 :                        2396 C | *L2 :                            6E C |
 L24 :                         2530 C |  L25 :                         2506 C |
*L3 :                            FD C |  L36 :                         24E5 C |
 L37 :                         24BF C |  L4 :                            89 C |
 L44 :                         24A3 C |  L45 :                         2483 C |
*L5 :                            E6 C |  L52 :                         2467 C |
 L53 :                         2448 C |  L54 :                         2425 C |
*L55 :                          BED C |  L56 :                         23FF C |
 L57 :                         23E3 C | *L58 :                          BF2 C |
*L59 :                          C2C C |  L60 :                         23D7 C |
 L61 :                         23D0 C |  L62 :                          C26 C |
*L66 :                          C62 C |  L67 :                          C4C C |
*L68 :                          C4F C |  L70 :                          C50 C |
*L71 :                          CB0 C | *L73 :                          CE0 C |
 L74 :                          CC3 C | *L75 :                          CC3 C |
 L77 :                          CC5 C | *L78 :                          D27 C |
 L79 :                          CF3 C | *L8 :                           244 C |
 L80 :                          D12 C | *L82 :                         1924 C |
 L83 :                          E17 C |  L84 :                          E40 C |
 L85 :                         23CC C |  L86 :                         23C8 C |
 L87 :                          E40 C |  L89 :                          E84 C |
*L9 :                           360 C |  L92 :                          F83 C |
 L93 :                          FB9 C |  L94 :                         23C4 C |
 L96 :                         1085 C |  L97 :                         10AB C |
 L99 :                         1443 C |  LCC1802INIT :                 2591 C |
*LISTON :                         1 - |  LOOP219 :                     270F C |
 LSH229 :                      2B2B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP220 :                    2777 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 70 - 5/23/2013 16:52:23


 MSLP215 :                     261E C |  MULTLOOP16_16216 :            262B C |
 MULTSKIP16_16216 :            263D C |  MUL_DN :                      2EBA C |
 MUL_GO1 :                     2E42 C |  MUL_LP1 :                     2E32 C |
 MUL_LP2 :                     2ECD C |  MUL_LP2A :                    2EE0 C |
 MUL_LP3 :                     2EE9 C |  MUL_LP3A :                    2EFC C |
 MUL_LP4 :                     2F0D C |  MUL_NO :                      2E8F C |
 MUL_NXT1 :                    2EE4 C | *NESTMAX :                      100 - |
 NORESTORE219 :                275D C |  NXT228 :                      2A30 C |
 OUTIT73 :                      C9C C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      2B6B C |
 POS1218 :                     26B3 C |  POS1221 :                     2826 C |
 POS2218 :                     26C3 C |  POS2221 :                     284D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SCRATCH :                     30A3 C |  SETBITOFF73 :                  C97 C |
 SETSGN228 :                   2A68 C |  SGNPOS228 :                   2A39 C |
 SHDN228 :                     2A5F C |  SHIFT220 :                    27AE C |
 SHL228 :                      2A4B C |  SHR229 :                      2B19 C |
 SIGN229 :                     2B3B C |  SP :                             2 - |
*TIME :                    16:52:18 - | *TRUE :                           1 - |
 UPNXT222 :                    28E4 C | *VERSION :                     142F - |
 _00000207 :                   25AB C |  _CALL :                       2601 C |
 _DELAY :                       C31 C |  _DIE207 :                     25AE C |
 _DIGITALREAD :                 CA8 C |  _DIGITALWRITE :                C80 C |
 _DISABLECHIP :                  5B C |  _DIVI2 :                      26A4 C |
 _DIVI4 :                      2800 C |  _DIVU2 :                      2649 C |
 _DIVU4 :                      2700 C |  _DUBDABX :                    2875 C |
 _ENABLECHIP :                   45 C | *_EXIT :                       222C C |
 _FTOA :                        D30 C | *_INP :                        30C5 C |
 _ITOA :                       193D C |  _LOOP :                        BF2 C |
 _LTOA :                       1AF6 C |  _MAIN :                        BF3 C |
*_MEMCMP :                     225A C | *_MEMCPY :                     230C C |
*_MEMSET :                     236A C | *_MODI2 :                      25BF C |
*_MODI4 :                      2907 C | *_MODU2 :                      25B7 C |
 _MODU4 :                      28FB C |  _MULT_NUMS :                    24 C |
*_MULU2 :                      2623 C | *_MULU4 :                      2766 C |
*_OLDUINOINCLUDER :             C6F C |  _ONEMS :                      261C C |
 _OUT :                        30DF C | *_OUT4 :                       25C7 C |
*_OUT5 :                       30C0 C |  _PIN4 :                         44 C |
 _PRINTF :                     1DE0 C |  _PRINTFLT :                   1C60 C |
 _PRINTINT :                   1BBE C |  _PRINTLINT :                  1C00 C |
 _PRINTSTR :                    CE3 C |  _PUTC :                       30C0 C |
 _PUTX :                       1D62 C |  _PUTXN :                      1CD3 C |
 _RETURN :                     2612 C |  _ROUND_NUMS :                    4 C |
*_SETQOFF :                    25B5 C | *_SETQON :                     25B3 C |
 _SETUP :                       BD4 C |  _SPI_READ :                    24D C |
 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 71 - 5/23/2013 16:52:23


 _SPI_WRITE :                   10A C |  _STRCPY :                      CB1 C |
 _W5100_INIT :                  37B C |  _XFERSPI :                      73 C |
 __FORW0 :                      CAF C |  __FORW8 :                     30DC C |
*__FORW9 :                     30F0 C |

    361 symbols
     81 unused symbols

 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 72 - 5/23/2013 16:52:23


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | JUMPV                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     81 macros

 AS V1.42 Beta [Bld 87] - source file wiznetpingolduino.asm - page 73 - 5/23/2013 16:52:23


  codepages:
  ----------

STANDARD (0 changed characters)


5.41 seconds assembly time

   4795 lines source file
  15374 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
