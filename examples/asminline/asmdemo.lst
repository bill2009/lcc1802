 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 1 - 2/23/2013 7:47:57


       1/       0 :                     ; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Sat Feb 23 07:47:13 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  757/       0 :                     	listing	on
(1)  758/       0 : C0 0C 7F            	lbr	lcc1802Init
(1)  759/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _turnqoff:
      15/       4 :                     ;void turnqoff(){
      16/       4 :                     ;	asm("	req\n");
      17/       4 : 7A                  	req
      18/       5 :                     ;}
      19/       5 :                     L1:
      20/       5 : (MACRO)             	Cretn
      20/       5 : D5                          sep     RRET
      21/       6 :                     
      22/       6 :                     _main:
      23/       6 : (MACRO)             	reserve 4
      23/       6 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      23/       6 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      23/       6 : 82                          glo sp          ;grab low byte of stack pointer
      23/       7 : FF 04                       smi 4&255 ;claculate new low byte
      23/       9 : AE                          plo memAddr     ;save it for a moment
      23/       A : 92                          ghi sp          ;grab high byte
      23/       B : 7F 00                       smbi (4>>8)&255 ;calculate the new page
      23/       D : B2                          phi sp          ;adjust page first
      23/       E : 8E                          glo memAddr     ;get new low byte
      23/       F : A2                          plo sp          ;finish adjusting the stack pointer
      24/      10 :                     ;{
      25/      10 :                     ;	printstr("hello World!\n");
      26/      10 : (MACRO)             	ldaD R12,L4
      26/      10 : F8 71                       ldi     (L4)&255
      26/      12 : AC                          plo     R12
      26/      13 : F8 0C                       ldi     (L4)>>8; was/256
      26/      15 : BC                          phi     R12
      27/      16 : (MACRO)             	Ccall _printstr
      27/      16 : D4                          sep     RCALL
      27/      17 : 00 B0                       dw      _PRINTSTR
      28/      19 : C0 00 32            	lbr L6
      29/      1C :                     L5:
      30/      1C :                     ;	while(1){
      31/      1C :                     ;		asm("	seq\n");
      32/      1C :                     ;		delay(100);
      33/      1C : 7B                  	seq
      34/      1D : (MACRO)             	ldaD R12,100
      34/      1D : F8 64                       ldi     (100)&255
      34/      1F : AC                          plo     R12
      34/      20 : F8 00                       ldi     (100)>>8; was/256
      34/      22 : BC                          phi     R12
      35/      23 : (MACRO)             	Ccall _delay
      35/      23 : D4                          sep     RCALL
      35/      24 : 0A B8                       dw      _DELAY
      36/      26 :                     ;		turnqoff();
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 2 - 2/23/2013 7:47:57


      37/      26 : (MACRO)             	Ccall _turnqoff
      37/      26 : D4                          sep     RCALL
      37/      27 : 00 04                       dw      _TURNQOFF
      38/      29 :                     ;		delay(100);
      39/      29 : (MACRO)             	ldaD R12,100
      39/      29 : F8 64                       ldi     (100)&255
      39/      2B : AC                          plo     R12
      39/      2C : F8 00                       ldi     (100)>>8; was/256
      39/      2E : BC                          phi     R12
      40/      2F : (MACRO)             	Ccall _delay
      40/      2F : D4                          sep     RCALL
      40/      30 : 0A B8                       dw      _DELAY
      41/      32 :                     ;	}
      42/      32 :                     L6:
      43/      32 :                     ;	while(1){
      44/      32 : C0 00 1C            	lbr L5
      45/      35 :                     ;}
      46/      35 :                     L3:
      47/      35 : (MACRO)             	release 4
      47/      35 :                     ;for release we adjust the low byte first 
      47/      35 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      47/      35 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
      47/      35 : 82                          glo     SP
      47/      36 : FC 04                       ADI     (4)#256
      47/      38 : A2                          plo     SP
      47/      39 : 92                          ghi     SP
      47/      3A : 7C 00                       ADCI     (4)>>8; was/256
      47/      3C : B2                          phi     SP
      48/      3D : (MACRO)             	Cretn
      48/      3D : D5                          sep     RRET
      49/      3E :                     
      50/      3E :                     _strcpy:
      51/      3E : (MACRO)             	reserve 2
      51/      3E :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      51/      3E :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      51/      3E : 82                          glo sp          ;grab low byte of stack pointer
      51/      3F : FF 02                       smi 2&255 ;claculate new low byte
      51/      41 : AE                          plo memAddr     ;save it for a moment
      51/      42 : 92                          ghi sp          ;grab high byte
      51/      43 : 7F 00                       smbi (2>>8)&255 ;calculate the new page
      51/      45 : B2                          phi sp          ;adjust page first
      51/      46 : 8E                          glo memAddr     ;get new low byte
      51/      47 : A2                          plo sp          ;finish adjusting the stack pointer
      52/      48 :                     ;{
      53/      48 :                     ;	char *save = to;
      54/      48 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
      54/      48 : =>TRUE                      if      ('O'='O')
      54/      48 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
      54/      48 : 82                          glo     SP
      54/      49 : FC 00                       adi     ((-4+4))#256
      54/      4B : AE                          plo     MEMADDR
      54/      4C : 92                          ghi     SP
      54/      4D : 7C 00                       adci    ((-4+4))>>8; was/256
      54/      4F : BE                          phi     MEMADDR
      54/      50 : =>FALSE                     else
      54/      50 :                                     ldAD    memAddr,SP
      54/      50 : [54]                        endif
      54/      50 : 9C                          ghi     R12
      54/      51 : 5E                          str     memAddr
      54/      52 : 1E                          inc     memAddr
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 3 - 2/23/2013 7:47:57


      54/      53 : 8C                          glo     R12
      54/      54 : 5E                          str     memAddr
      55/      55 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
      56/      55 : C0 00 76            	lbr L13
      57/      58 :                     L10:
      58/      58 :                     L11:
      59/      58 : (MACRO)             	ldaD R11,1
      59/      58 : F8 01                       ldi     (1)&255
      59/      5A : AB                          plo     R11
      59/      5B : F8 00                       ldi     (1)>>8; was/256
      59/      5D : BB                          phi     R11
      60/      5E : (MACRO)             	alu2 R13,R13,R11,add,adc
      60/      5E : 22                          dec     sp ;make a work ares
      60/      5F : 8B                          glo     R11
      60/      60 : 52                          str     sp
      60/      61 : 8D                          glo     R13
      60/      62 : F4                          ADD             ;calculate the low order byte
      60/      63 : AD                          plo     R13
      60/      64 : 9B                          ghi     R11
      60/      65 : 52                          str     sp
      60/      66 : 9D                          ghi     R13
      60/      67 : 74                          ADC             ;calculate the high byte
      60/      68 : BD                          phi     R13
      60/      69 : 12                          inc     sp      ;release the work area
      61/      6A : (MACRO)             	alu2 R12,R12,R11,add,adc
      61/      6A : 22                          dec     sp ;make a work ares
      61/      6B : 8B                          glo     R11
      61/      6C : 52                          str     sp
      61/      6D : 8C                          glo     R12
      61/      6E : F4                          ADD             ;calculate the low order byte
      61/      6F : AC                          plo     R12
      61/      70 : 9B                          ghi     R11
      61/      71 : 52                          str     sp
      61/      72 : 9C                          ghi     R12
      61/      73 : 74                          ADC             ;calculate the high byte
      61/      74 : BC                          phi     R12
      61/      75 : 12                          inc     sp      ;release the work area
      62/      76 :                     L13:
      63/      76 : (MACRO)             	ld1 R11,'O',R13,0
      63/      76 : =>TRUE                      if      ('O'='O')
      63/      76 :  (MACRO-2)                          ldAX    memAddr,R13,0
      63/      76 : 8D                          glo     R13
      63/      77 : FC 00                       adi     (0)#256
      63/      79 : AE                          plo     MEMADDR
      63/      7A : 9D                          ghi     R13
      63/      7B : 7C 00                       adci    (0)>>8; was/256
      63/      7D : BE                          phi     MEMADDR
      63/      7E : =>FALSE                     else
      63/      7E :                                     ldAD    memAddr,R13
      63/      7E : [63]                        endif
      63/      7E : 0E                          ldn     memAddr
      63/      7F : AB                          plo     R11
      64/      80 : (MACRO)             	st1 R11,'O',R12,0; ASGNU1
      64/      80 : =>TRUE                      if      ('O'='O')
      64/      80 :  (MACRO-2)                          ldAX    memAddr,R12,0
      64/      80 : 8C                          glo     R12
      64/      81 : FC 00                       adi     (0)#256
      64/      83 : AE                          plo     MEMADDR
      64/      84 : 9C                          ghi     R12
      64/      85 : 7C 00                       adci    (0)>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 4 - 2/23/2013 7:47:57


      64/      87 : BE                          phi     MEMADDR
      64/      88 : =>FALSE                     else
      64/      88 :                                     ldAD    memAddr,R12
      64/      88 : [64]                        endif
      64/      88 : 8B                          glo     R11
      64/      89 : 5E                          str     memAddr
      65/      8A : (MACRO)             	cpy1 R11,R11
      65/      8A : 8B                          glo     R11
      65/      8B : AB                          plo     R11
      66/      8C : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      66/      8C : F8 00                       ldi     0
      66/      8E : BB                          phi     11
      67/      8F : (MACRO)             	jneU2I r11,0,L10; NE
      67/      8F : 8B                          glo     R11
      67/      90 : FF 00                       smi     (0)#256
      67/      92 : CA 00 58                    lbnz    L10
      67/      95 : 9B                          ghi     R11
      67/      96 : 7F 00                       smbi    (0)>>8; was/256
      67/      98 : CA 00 58                    lbnz    L10
      68/      9B :                     ;	return(save);
      69/      9B : (MACRO)             	ld2 R15,'O',sp,(-4+4)
      69/      9B : =>TRUE                      if      ('O'='O')
      69/      9B :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
      69/      9B : 82                          glo     SP
      69/      9C : FC 00                       adi     ((-4+4))#256
      69/      9E : AE                          plo     MEMADDR
      69/      9F : 92                          ghi     SP
      69/      A0 : 7C 00                       adci    ((-4+4))>>8; was/256
      69/      A2 : BE                          phi     MEMADDR
      69/      A3 : =>FALSE                     else
      69/      A3 :                                     ldAD    memAddr,SP
      69/      A3 : [69]                        endif
      69/      A3 : 4E                          lda     memAddr
      69/      A4 : BF                          phi     R15
      69/      A5 : 0E                          ldn     memAddr
      69/      A6 : AF                          plo     R15
      70/      A7 :                     L9:
      71/      A7 : (MACRO)             	release 2
      71/      A7 :                     ;for release we adjust the low byte first 
      71/      A7 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      71/      A7 :  (MACRO-2)                  alu2i sp,sp,2,adi,adci
      71/      A7 : 82                          glo     SP
      71/      A8 : FC 02                       ADI     (2)#256
      71/      AA : A2                          plo     SP
      71/      AB : 92                          ghi     SP
      71/      AC : 7C 00                       ADCI     (2)>>8; was/256
      71/      AE : B2                          phi     SP
      72/      AF : (MACRO)             	Cretn
      72/      AF : D5                          sep     RRET
      73/      B0 :                     
      74/      B0 :                     _printstr:
      75/      B0 : (MACRO)             	reserve 6
      75/      B0 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      75/      B0 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      75/      B0 : 82                          glo sp          ;grab low byte of stack pointer
      75/      B1 : FF 06                       smi 6&255 ;claculate new low byte
      75/      B3 : AE                          plo memAddr     ;save it for a moment
      75/      B4 : 92                          ghi sp          ;grab high byte
      75/      B5 : 7F 00                       smbi (6>>8)&255 ;calculate the new page
      75/      B7 : B2                          phi sp          ;adjust page first
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 5 - 2/23/2013 7:47:57


      75/      B8 : 8E                          glo memAddr     ;get new low byte
      75/      B9 : A2                          plo sp          ;finish adjusting the stack pointer
      76/      BA : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
      76/      BA : 82                          glo     SP
      76/      BB : FC 05                       ADI     ((5))#256
      76/      BD : AE                          plo     MEMADDR
      76/      BE : 92                          ghi     SP
      76/      BF : 7C 00                       ADCI     ((5))>>8; was/256
      76/      C1 : BE                          phi     MEMADDR
      77/      C2 : EE                  	sex	memaddr
      78/      C3 : (MACRO)             	savmi r7
      78/      C3 : 87                          glo     R7
      78/      C4 : 73                          stxd            ;R7 x is primed to the spot to start the saves
      78/      C5 : 97                          ghi     R7
      78/      C6 : 73                          stxd            ;and it end up where needed to do the next one
      79/      C7 : E2                  	sex sp
      80/      C8 : (MACRO)             	cpy2 r7,r12; function(2055) 1
      80/      C8 : 8C                          glo     R12
      80/      C9 : A7                          plo     R7
      80/      CA : 9C                          ghi     R12
      80/      CB : B7                          phi     R7
      81/      CC :                     ;void printstr(char *ptr){
      82/      CC : C0 00 F1            	lbr L16
      83/      CF :                     L15:
      84/      CF :                     ;    while(*ptr) out(5,*ptr++);
      85/      CF : (MACRO)             	ldaD R12,5
      85/      CF : F8 05                       ldi     (5)&255
      85/      D1 : AC                          plo     R12
      85/      D2 : F8 00                       ldi     (5)>>8; was/256
      85/      D4 : BC                          phi     R12
      86/      D5 : (MACRO)             	cpy2 R11,R7
      86/      D5 : 87                          glo     R7
      86/      D6 : AB                          plo     R11
      86/      D7 : 97                          ghi     R7
      86/      D8 : BB                          phi     R11
      87/      D9 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
      87/      D9 : =>TRUE                      if      ('O'='O')
      87/      D9 :  (MACRO-2)                          ldAX    R7,R11,(1)
      87/      D9 : 8B                          glo     R11
      87/      DA : FC 01                       adi     ((1))#256
      87/      DC : A7                          plo     R7
      87/      DD : 9B                          ghi     R11
      87/      DE : 7C 00                       adci    ((1))>>8; was/256
      87/      E0 : B7                          phi     R7
      87/      E1 : =>FALSE                     else
      87/      E1 :                                     ldAD    R7,R11
      87/      E1 : [87]                        endif
      88/      E1 : (MACRO)             	ld1 R13,'O',R11,0
      88/      E1 : =>TRUE                      if      ('O'='O')
      88/      E1 :  (MACRO-2)                          ldAX    memAddr,R11,0
      88/      E1 : 8B                          glo     R11
      88/      E2 : FC 00                       adi     (0)#256
      88/      E4 : AE                          plo     MEMADDR
      88/      E5 : 9B                          ghi     R11
      88/      E6 : 7C 00                       adci    (0)>>8; was/256
      88/      E8 : BE                          phi     MEMADDR
      88/      E9 : =>FALSE                     else
      88/      E9 :                                     ldAD    memAddr,R11
      88/      E9 : [88]                        endif
      88/      E9 : 0E                          ldn     memAddr
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 6 - 2/23/2013 7:47:57


      88/      EA : AD                          plo     R13
      89/      EB : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
      89/      EB : F8 00                       ldi     0
      89/      ED : BD                          phi     13
      90/      EE : (MACRO)             	Ccall _out
      90/      EE : D4                          sep     RCALL
      90/      EF : 10 5F                       dw      _OUT
      91/      F1 :                     L16:
      92/      F1 : (MACRO)             	ld1 R11,'O',R7,0
      92/      F1 : =>TRUE                      if      ('O'='O')
      92/      F1 :  (MACRO-2)                          ldAX    memAddr,R7,0
      92/      F1 : 87                          glo     R7
      92/      F2 : FC 00                       adi     (0)#256
      92/      F4 : AE                          plo     MEMADDR
      92/      F5 : 97                          ghi     R7
      92/      F6 : 7C 00                       adci    (0)>>8; was/256
      92/      F8 : BE                          phi     MEMADDR
      92/      F9 : =>FALSE                     else
      92/      F9 :                                     ldAD    memAddr,R7
      92/      F9 : [92]                        endif
      92/      F9 : 0E                          ldn     memAddr
      92/      FA : AB                          plo     R11
      93/      FB : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      93/      FB : F8 00                       ldi     0
      93/      FD : BB                          phi     11
      94/      FE : (MACRO)             	jneU2I r11,0,L15; NE
      94/      FE : 8B                          glo     R11
      94/      FF : FF 00                       smi     (0)#256
      94/     101 : CA 00 CF                    lbnz    L15
      94/     104 : 9B                          ghi     R11
      94/     105 : 7F 00                       smbi    (0)>>8; was/256
      94/     107 : CA 00 CF                    lbnz    L15
      95/     10A :                     ;}
      96/     10A :                     L14:
      97/     10A : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
      97/     10A : 82                          glo     SP
      97/     10B : FC 04                       ADI     ((4))#256
      97/     10D : AE                          plo     MEMADDR
      97/     10E : 92                          ghi     SP
      97/     10F : 7C 00                       ADCI     ((4))>>8; was/256
      97/     111 : BE                          phi     MEMADDR
      98/     112 : (MACRO)             	rldmi r7,memaddr
      98/     112 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
      98/     113 : B7                          phi     R7
      98/     114 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
      98/     115 : A7                          plo     R7
      99/     116 : (MACRO)             	release 6
      99/     116 :                     ;for release we adjust the low byte first 
      99/     116 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      99/     116 :  (MACRO-2)                  alu2i sp,sp,6,adi,adci
      99/     116 : 82                          glo     SP
      99/     117 : FC 06                       ADI     (6)#256
      99/     119 : A2                          plo     SP
      99/     11A : 92                          ghi     SP
      99/     11B : 7C 00                       ADCI     (6)>>8; was/256
      99/     11D : B2                          phi     SP
     100/     11E : (MACRO)             	Cretn
     100/     11E : D5                          sep     RRET
     101/     11F :                     
     102/     11F :                     _itoa:
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 7 - 2/23/2013 7:47:57


     103/     11F : (MACRO)             	reserve 14
     103/     11F :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     103/     11F :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     103/     11F : 82                          glo sp          ;grab low byte of stack pointer
     103/     120 : FF 0E                       smi 14&255 ;claculate new low byte
     103/     122 : AE                          plo memAddr     ;save it for a moment
     103/     123 : 92                          ghi sp          ;grab high byte
     103/     124 : 7F 00                       smbi (14>>8)&255 ;calculate the new page
     103/     126 : B2                          phi sp          ;adjust page first
     103/     127 : 8E                          glo memAddr     ;get new low byte
     103/     128 : A2                          plo sp          ;finish adjusting the stack pointer
     104/     129 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     104/     129 : 82                          glo     SP
     104/     12A : FC 09                       ADI     ((9))#256
     104/     12C : AE                          plo     MEMADDR
     104/     12D : 92                          ghi     SP
     104/     12E : 7C 00                       ADCI     ((9))>>8; was/256
     104/     130 : BE                          phi     MEMADDR
     105/     131 : EE                  	sex	memaddr
     106/     132 : (MACRO)             	savmi r0
     106/     132 : 80                          glo     R0
     106/     133 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     106/     134 : 90                          ghi     R0
     106/     135 : 73                          stxd            ;and it end up where needed to do the next one
     107/     136 : (MACRO)             	savmi r1
     107/     136 : 81                          glo     R1
     107/     137 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     107/     138 : 91                          ghi     R1
     107/     139 : 73                          stxd            ;and it end up where needed to do the next one
     108/     13A : (MACRO)             	savmi r7
     108/     13A : 87                          glo     R7
     108/     13B : 73                          stxd            ;R7 x is primed to the spot to start the saves
     108/     13C : 97                          ghi     R7
     108/     13D : 73                          stxd            ;and it end up where needed to do the next one
     109/     13E : E2                  	sex sp
     110/     13F : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     110/     13F : =>TRUE                      if      ('O'='O')
     110/     13F :  (MACRO-2)                          ldAX    memAddr,SP,(16)
     110/     13F : 82                          glo     SP
     110/     140 : FC 10                       adi     ((16))#256
     110/     142 : AE                          plo     MEMADDR
     110/     143 : 92                          ghi     SP
     110/     144 : 7C 00                       adci    ((16))>>8; was/256
     110/     146 : BE                          phi     MEMADDR
     110/     147 : =>FALSE                     else
     110/     147 :                                     ldAD    memAddr,SP
     110/     147 : [110]                       endif
     110/     147 : 9C                          ghi     R12
     110/     148 : 5E                          str     memAddr
     110/     149 : 1E                          inc     memAddr
     110/     14A : 8C                          glo     R12
     110/     14B : 5E                          str     memAddr
     111/     14C : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     111/     14C : =>TRUE                      if      ('O'='O')
     111/     14C :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     111/     14C : 82                          glo     SP
     111/     14D : FC 12                       adi     ((18))#256
     111/     14F : AE                          plo     MEMADDR
     111/     150 : 92                          ghi     SP
     111/     151 : 7C 00                       adci    ((18))>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 8 - 2/23/2013 7:47:57


     111/     153 : BE                          phi     MEMADDR
     111/     154 : =>FALSE                     else
     111/     154 :                                     ldAD    memAddr,SP
     111/     154 : [111]                       endif
     111/     154 : 9D                          ghi     R13
     111/     155 : 5E                          str     memAddr
     111/     156 : 1E                          inc     memAddr
     111/     157 : 8D                          glo     R13
     111/     158 : 5E                          str     memAddr
     112/     159 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     113/     159 :                     ;	unsigned int flag=0;
     114/     159 : (MACRO)             	ld2z R11
     114/     159 : F8 00                       ldi     0
     114/     15B : AB                          plo     R11
     114/     15C : BB                          phi     R11
     115/     15D : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     115/     15D : =>TRUE                      if      ('O'='O')
     115/     15D :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     115/     15D : 82                          glo     SP
     115/     15E : FC 0C                       adi     ((-4+16))#256
     115/     160 : AE                          plo     MEMADDR
     115/     161 : 92                          ghi     SP
     115/     162 : 7C 00                       adci    ((-4+16))>>8; was/256
     115/     164 : BE                          phi     MEMADDR
     115/     165 : =>FALSE                     else
     115/     165 :                                     ldAD    memAddr,SP
     115/     165 : [115]                       endif
     115/     165 : 9B                          ghi     R11
     115/     166 : 5E                          str     memAddr
     115/     167 : 1E                          inc     memAddr
     115/     168 : 8B                          glo     R11
     115/     169 : 5E                          str     memAddr
     116/     16A :                     ;	char * bptr; bptr=buffer;
     117/     16A : (MACRO)             	ld2 R11,'O',sp,(2+16)
     117/     16A : =>TRUE                      if      ('O'='O')
     117/     16A :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
     117/     16A : 82                          glo     SP
     117/     16B : FC 12                       adi     ((2+16))#256
     117/     16D : AE                          plo     MEMADDR
     117/     16E : 92                          ghi     SP
     117/     16F : 7C 00                       adci    ((2+16))>>8; was/256
     117/     171 : BE                          phi     MEMADDR
     117/     172 : =>FALSE                     else
     117/     172 :                                     ldAD    memAddr,SP
     117/     172 : [117]                       endif
     117/     172 : 4E                          lda     memAddr
     117/     173 : BB                          phi     R11
     117/     174 : 0E                          ldn     memAddr
     117/     175 : AB                          plo     R11
     118/     176 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     118/     176 : =>TRUE                      if      ('O'='O')
     118/     176 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     118/     176 : 82                          glo     SP
     118/     177 : FC 0A                       adi     ((-6+16))#256
     118/     179 : AE                          plo     MEMADDR
     118/     17A : 92                          ghi     SP
     118/     17B : 7C 00                       adci    ((-6+16))>>8; was/256
     118/     17D : BE                          phi     MEMADDR
     118/     17E : =>FALSE                     else
     118/     17E :                                     ldAD    memAddr,SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 9 - 2/23/2013 7:47:57


     118/     17E : [118]                       endif
     118/     17E : 9B                          ghi     R11
     118/     17F : 5E                          str     memAddr
     118/     180 : 1E                          inc     memAddr
     118/     181 : 8B                          glo     R11
     118/     182 : 5E                          str     memAddr
     119/     183 :                     ;	if (s<0){
     120/     183 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     120/     183 : =>TRUE                      if      ('O'='O')
     120/     183 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     120/     183 : 82                          glo     SP
     120/     184 : FC 10                       adi     ((0+16))#256
     120/     186 : AE                          plo     MEMADDR
     120/     187 : 92                          ghi     SP
     120/     188 : 7C 00                       adci    ((0+16))>>8; was/256
     120/     18A : BE                          phi     MEMADDR
     120/     18B : =>FALSE                     else
     120/     18B :                                     ldAD    memAddr,SP
     120/     18B : [120]                       endif
     120/     18B : 4E                          lda     memAddr
     120/     18C : BB                          phi     R11
     120/     18D : 0E                          ldn     memAddr
     120/     18E : AB                          plo     R11
     121/     18F : (MACRO)             	jcI2I r11,0,lbdf,L19; GE is flipped test from LT
     121/     18F : 8B                          glo     R11
     121/     190 : FF 00                       smi     (0)#256
     121/     192 : 9B                          ghi     R11
     121/     193 : 7F 00                       smbi    (0)>>8; was/256      ;that's a standard signed subtraction
     121/     195 : 9B                          ghi     R11 ;
     121/     196 : FB 00                       xri     (0)>>8; was/256      ;sets the top bit if the signs are different
     121/     198 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     121/     199 : C7                          lsnf    ;bypass the df flip if signs were the same
     121/     19A : FB 01                       xri     01     ;invert original df if signs were different
     121/     19C : 76                          shrc           ;put it back in df
     121/     19D : C3 01 F9                    LBDF    L19  ;execute 
     122/     1A0 :                     ;		*bptr='-';bptr++;
     123/     1A0 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     123/     1A0 : =>TRUE                      if      ('O'='O')
     123/     1A0 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     123/     1A0 : 82                          glo     SP
     123/     1A1 : FC 0A                       adi     ((-6+16))#256
     123/     1A3 : AE                          plo     MEMADDR
     123/     1A4 : 92                          ghi     SP
     123/     1A5 : 7C 00                       adci    ((-6+16))>>8; was/256
     123/     1A7 : BE                          phi     MEMADDR
     123/     1A8 : =>FALSE                     else
     123/     1A8 :                                     ldAD    memAddr,SP
     123/     1A8 : [123]                       endif
     123/     1A8 : 4E                          lda     memAddr
     123/     1A9 : BB                          phi     R11
     123/     1AA : 0E                          ldn     memAddr
     123/     1AB : AB                          plo     R11
     124/     1AC : (MACRO)             	ldaD R10,45
     124/     1AC : F8 2D                       ldi     (45)&255
     124/     1AE : AA                          plo     R10
     124/     1AF : F8 00                       ldi     (45)>>8; was/256
     124/     1B1 : BA                          phi     R10
     125/     1B2 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     125/     1B2 : =>TRUE                      if      ('O'='O')
     125/     1B2 :  (MACRO-2)                          ldAX    memAddr,R11,0
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 10 - 2/23/2013 7:47:57


     125/     1B2 : 8B                          glo     R11
     125/     1B3 : FC 00                       adi     (0)#256
     125/     1B5 : AE                          plo     MEMADDR
     125/     1B6 : 9B                          ghi     R11
     125/     1B7 : 7C 00                       adci    (0)>>8; was/256
     125/     1B9 : BE                          phi     MEMADDR
     125/     1BA : =>FALSE                     else
     125/     1BA :                                     ldAD    memAddr,R11
     125/     1BA : [125]                       endif
     125/     1BA : 8A                          glo     R10
     125/     1BB : 5E                          str     memAddr
     126/     1BC : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     126/     1BC : =>TRUE                      if      ('O'='O')
     126/     1BC :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     126/     1BC : 82                          glo     SP
     126/     1BD : FC 0A                       adi     ((-6+16))#256
     126/     1BF : AE                          plo     MEMADDR
     126/     1C0 : 92                          ghi     SP
     126/     1C1 : 7C 00                       adci    ((-6+16))>>8; was/256
     126/     1C3 : BE                          phi     MEMADDR
     126/     1C4 : =>FALSE                     else
     126/     1C4 :                                     ldAD    memAddr,SP
     126/     1C4 : [126]                       endif
     126/     1C4 : 4E                          lda     memAddr
     126/     1C5 : BB                          phi     R11
     126/     1C6 : 0E                          ldn     memAddr
     126/     1C7 : AB                          plo     R11
     127/     1C8 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     127/     1C8 : =>TRUE                      if      ('O'='O')
     127/     1C8 :  (MACRO-2)                          ldAX    R11,R11,(1)
     127/     1C8 : 8B                          glo     R11
     127/     1C9 : FC 01                       adi     ((1))#256
     127/     1CB : AB                          plo     R11
     127/     1CC : 9B                          ghi     R11
     127/     1CD : 7C 00                       adci    ((1))>>8; was/256
     127/     1CF : BB                          phi     R11
     127/     1D0 : =>FALSE                     else
     127/     1D0 :                                     ldAD    R11,R11
     127/     1D0 : [127]                       endif
     128/     1D0 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     128/     1D0 : =>TRUE                      if      ('O'='O')
     128/     1D0 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     128/     1D0 : 82                          glo     SP
     128/     1D1 : FC 0A                       adi     ((-6+16))#256
     128/     1D3 : AE                          plo     MEMADDR
     128/     1D4 : 92                          ghi     SP
     128/     1D5 : 7C 00                       adci    ((-6+16))>>8; was/256
     128/     1D7 : BE                          phi     MEMADDR
     128/     1D8 : =>FALSE                     else
     128/     1D8 :                                     ldAD    memAddr,SP
     128/     1D8 : [128]                       endif
     128/     1D8 : 9B                          ghi     R11
     128/     1D9 : 5E                          str     memAddr
     128/     1DA : 1E                          inc     memAddr
     128/     1DB : 8B                          glo     R11
     128/     1DC : 5E                          str     memAddr
     129/     1DD :                     ;		n=-s;
     130/     1DD : (MACRO)             	ld2 R11,'O',sp,(0+16)
     130/     1DD : =>TRUE                      if      ('O'='O')
     130/     1DD :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 11 - 2/23/2013 7:47:57


     130/     1DD : 82                          glo     SP
     130/     1DE : FC 10                       adi     ((0+16))#256
     130/     1E0 : AE                          plo     MEMADDR
     130/     1E1 : 92                          ghi     SP
     130/     1E2 : 7C 00                       adci    ((0+16))>>8; was/256
     130/     1E4 : BE                          phi     MEMADDR
     130/     1E5 : =>FALSE                     else
     130/     1E5 :                                     ldAD    memAddr,SP
     130/     1E5 : [130]                       endif
     130/     1E5 : 4E                          lda     memAddr
     130/     1E6 : BB                          phi     R11
     130/     1E7 : 0E                          ldn     memAddr
     130/     1E8 : AB                          plo     R11
     131/     1E9 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     131/     1E9 : 8B                          glo     R11                     ;(flip all the bits and add 1)
     131/     1EA : FB FF                       xri     0xff
     131/     1EC : AB                          plo     R11
     131/     1ED : 9B                          ghi     R11
     131/     1EE : FB FF                       xri     0xff
     131/     1F0 : BB                          phi     R11
     131/     1F1 : 1B                          inc     R11
     132/     1F2 : (MACRO)             	cpy2 R1,R11
     132/     1F2 : 8B                          glo     R11
     132/     1F3 : A1                          plo     R1
     132/     1F4 : 9B                          ghi     R11
     132/     1F5 : B1                          phi     R1
     133/     1F6 :                     ;	} else{
     134/     1F6 : C0 02 09            	lbr L20
     135/     1F9 :                     L19:
     136/     1F9 :                     ;		n=s;
     137/     1F9 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     137/     1F9 : =>TRUE                      if      ('O'='O')
     137/     1F9 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     137/     1F9 : 82                          glo     SP
     137/     1FA : FC 10                       adi     ((0+16))#256
     137/     1FC : AE                          plo     MEMADDR
     137/     1FD : 92                          ghi     SP
     137/     1FE : 7C 00                       adci    ((0+16))>>8; was/256
     137/     200 : BE                          phi     MEMADDR
     137/     201 : =>FALSE                     else
     137/     201 :                                     ldAD    memAddr,SP
     137/     201 : [137]                       endif
     137/     201 : 4E                          lda     memAddr
     137/     202 : BB                          phi     R11
     137/     203 : 0E                          ldn     memAddr
     137/     204 : AB                          plo     R11
     138/     205 : (MACRO)             	cpy2 R1,R11
     138/     205 : 8B                          glo     R11
     138/     206 : A1                          plo     R1
     138/     207 : 9B                          ghi     R11
     138/     208 : B1                          phi     R1
     139/     209 :                     ;	}
     140/     209 :                     L20:
     141/     209 :                     ;	k=10000;
     142/     209 : (MACRO)             	ldaD R7,10000
     142/     209 : F8 10                       ldi     (10000)&255
     142/     20B : A7                          plo     R7
     142/     20C : F8 27                       ldi     (10000)>>8; was/256
     142/     20E : B7                          phi     R7
     143/     20F : C0 02 D6            	lbr L22
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 12 - 2/23/2013 7:47:57


     144/     212 :                     L21:
     145/     212 :                     ;	while(k>0){
     146/     212 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     147/     212 : (MACRO)             	ld2z R0
     147/     212 : F8 00                       ldi     0
     147/     214 : A0                          plo     R0
     147/     215 : B0                          phi     R0
     148/     216 : C0 02 26            	lbr L27
     149/     219 :                     L24:
     150/     219 :                     L25:
     151/     219 : 10                  	inc R0
     152/     21A : (MACRO)             	alu2 R1,R1,R7,sm,smb
     152/     21A : 22                          dec     sp ;make a work ares
     152/     21B : 87                          glo     R7
     152/     21C : 52                          str     sp
     152/     21D : 81                          glo     R1
     152/     21E : F7                          SM             ;calculate the low order byte
     152/     21F : A1                          plo     R1
     152/     220 : 97                          ghi     R7
     152/     221 : 52                          str     sp
     152/     222 : 91                          ghi     R1
     152/     223 : 77                          SMB             ;calculate the high byte
     152/     224 : B1                          phi     R1
     152/     225 : 12                          inc     sp      ;release the work area
     153/     226 :                     L27:
     154/     226 : (MACRO)             	jcU2 r1,r7,lbdf,L24 ;LE is flipped test & operands
     154/     226 : 22                          dec     sp
     154/     227 : 87                          glo     R7
     154/     228 : 52                          str     sp
     154/     229 : 81                          glo     R1
     154/     22A : F7                          sm
     154/     22B : 97                          ghi     R7
     154/     22C : 52                          str     sp
     154/     22D : 91                          ghi     R1
     154/     22E : 77                          smb
     154/     22F : 12                          inc     sp
     154/     230 : C3 02 19                    LBDF    L24
     155/     233 :                     ;		if (flag || r>0||k==1){
     156/     233 : (MACRO)             	ld2z R11
     156/     233 : F8 00                       ldi     0
     156/     235 : AB                          plo     R11
     156/     236 : BB                          phi     R11
     157/     237 : (MACRO)             	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
     157/     237 : =>TRUE                      if      ('O'='O')
     157/     237 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     157/     237 : 82                          glo     SP
     157/     238 : FC 0C                       adi     ((-4+16))#256
     157/     23A : AE                          plo     MEMADDR
     157/     23B : 92                          ghi     SP
     157/     23C : 7C 00                       adci    ((-4+16))>>8; was/256
     157/     23E : BE                          phi     MEMADDR
     157/     23F : =>FALSE                     else
     157/     23F :                                     ldAD    memAddr,SP
     157/     23F : [157]                       endif
     157/     23F : 4E                          lda     memAddr
     157/     240 : BA                          phi     R10
     157/     241 : 0E                          ldn     memAddr
     157/     242 : AA                          plo     R10
     158/     243 : (MACRO)             	jneU2 r10,r11,L31; NE
     158/     243 : 22                          dec     sp
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 13 - 2/23/2013 7:47:57


     158/     244 : 8B                          glo     R11
     158/     245 : 52                          str     sp
     158/     246 : 8A                          glo     R10
     158/     247 : F7                          sm
     158/     248 : 12                          inc     sp
     158/     249 : CA 02 73                    lbnz    L31
     158/     24C : 22                          dec     sp
     158/     24D : 9B                          ghi     R11
     158/     24E : 52                          str     sp
     158/     24F : 9A                          ghi     R10
     158/     250 : 77                          smb
     158/     251 : 12                          inc     sp
     158/     252 : CA 02 73                    lbnz    L31
     159/     255 : (MACRO)             	jneU2 r0,r11,L31; NE
     159/     255 : 22                          dec     sp
     159/     256 : 8B                          glo     R11
     159/     257 : 52                          str     sp
     159/     258 : 80                          glo     R0
     159/     259 : F7                          sm
     159/     25A : 12                          inc     sp
     159/     25B : CA 02 73                    lbnz    L31
     159/     25E : 22                          dec     sp
     159/     25F : 9B                          ghi     R11
     159/     260 : 52                          str     sp
     159/     261 : 90                          ghi     R0
     159/     262 : 77                          smb
     159/     263 : 12                          inc     sp
     159/     264 : CA 02 73                    lbnz    L31
     160/     267 : (MACRO)             	jneU2I r7,1,L28; NE
     160/     267 : 87                          glo     R7
     160/     268 : FF 01                       smi     (1)#256
     160/     26A : CA 02 C5                    lbnz    L28
     160/     26D : 97                          ghi     R7
     160/     26E : 7F 00                       smbi    (1)>>8; was/256
     160/     270 : CA 02 C5                    lbnz    L28
     161/     273 :                     L31:
     162/     273 :                     ;			*bptr=('0'+r);bptr++;
     163/     273 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     163/     273 : =>TRUE                      if      ('O'='O')
     163/     273 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     163/     273 : 82                          glo     SP
     163/     274 : FC 0A                       adi     ((-6+16))#256
     163/     276 : AE                          plo     MEMADDR
     163/     277 : 92                          ghi     SP
     163/     278 : 7C 00                       adci    ((-6+16))>>8; was/256
     163/     27A : BE                          phi     MEMADDR
     163/     27B : =>FALSE                     else
     163/     27B :                                     ldAD    memAddr,SP
     163/     27B : [163]                       endif
     163/     27B : 4E                          lda     memAddr
     163/     27C : BB                          phi     R11
     163/     27D : 0E                          ldn     memAddr
     163/     27E : AB                          plo     R11
     164/     27F : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     164/     27F : =>TRUE                      if      ('O'='O')
     164/     27F :  (MACRO-2)                          ldAX    R10,R0,(48)
     164/     27F : 80                          glo     R0
     164/     280 : FC 30                       adi     ((48))#256
     164/     282 : AA                          plo     R10
     164/     283 : 90                          ghi     R0
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 14 - 2/23/2013 7:47:57


     164/     284 : 7C 00                       adci    ((48))>>8; was/256
     164/     286 : BA                          phi     R10
     164/     287 : =>FALSE                     else
     164/     287 :                                     ldAD    R10,R0
     164/     287 : [164]                       endif
     165/     287 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     165/     287 : =>TRUE                      if      ('O'='O')
     165/     287 :  (MACRO-2)                          ldAX    memAddr,R11,0
     165/     287 : 8B                          glo     R11
     165/     288 : FC 00                       adi     (0)#256
     165/     28A : AE                          plo     MEMADDR
     165/     28B : 9B                          ghi     R11
     165/     28C : 7C 00                       adci    (0)>>8; was/256
     165/     28E : BE                          phi     MEMADDR
     165/     28F : =>FALSE                     else
     165/     28F :                                     ldAD    memAddr,R11
     165/     28F : [165]                       endif
     165/     28F : 8A                          glo     R10
     165/     290 : 5E                          str     memAddr
     166/     291 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     166/     291 : =>TRUE                      if      ('O'='O')
     166/     291 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     166/     291 : 82                          glo     SP
     166/     292 : FC 0A                       adi     ((-6+16))#256
     166/     294 : AE                          plo     MEMADDR
     166/     295 : 92                          ghi     SP
     166/     296 : 7C 00                       adci    ((-6+16))>>8; was/256
     166/     298 : BE                          phi     MEMADDR
     166/     299 : =>FALSE                     else
     166/     299 :                                     ldAD    memAddr,SP
     166/     299 : [166]                       endif
     166/     299 : 4E                          lda     memAddr
     166/     29A : BB                          phi     R11
     166/     29B : 0E                          ldn     memAddr
     166/     29C : AB                          plo     R11
     167/     29D : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     167/     29D : =>TRUE                      if      ('O'='O')
     167/     29D :  (MACRO-2)                          ldAX    R11,R11,(1)
     167/     29D : 8B                          glo     R11
     167/     29E : FC 01                       adi     ((1))#256
     167/     2A0 : AB                          plo     R11
     167/     2A1 : 9B                          ghi     R11
     167/     2A2 : 7C 00                       adci    ((1))>>8; was/256
     167/     2A4 : BB                          phi     R11
     167/     2A5 : =>FALSE                     else
     167/     2A5 :                                     ldAD    R11,R11
     167/     2A5 : [167]                       endif
     168/     2A5 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     168/     2A5 : =>TRUE                      if      ('O'='O')
     168/     2A5 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     168/     2A5 : 82                          glo     SP
     168/     2A6 : FC 0A                       adi     ((-6+16))#256
     168/     2A8 : AE                          plo     MEMADDR
     168/     2A9 : 92                          ghi     SP
     168/     2AA : 7C 00                       adci    ((-6+16))>>8; was/256
     168/     2AC : BE                          phi     MEMADDR
     168/     2AD : =>FALSE                     else
     168/     2AD :                                     ldAD    memAddr,SP
     168/     2AD : [168]                       endif
     168/     2AD : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 15 - 2/23/2013 7:47:57


     168/     2AE : 5E                          str     memAddr
     168/     2AF : 1E                          inc     memAddr
     168/     2B0 : 8B                          glo     R11
     168/     2B1 : 5E                          str     memAddr
     169/     2B2 :                     ;			flag='y';
     170/     2B2 : (MACRO)             	ldaD R11,121
     170/     2B2 : F8 79                       ldi     (121)&255
     170/     2B4 : AB                          plo     R11
     170/     2B5 : F8 00                       ldi     (121)>>8; was/256
     170/     2B7 : BB                          phi     R11
     171/     2B8 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     171/     2B8 : =>TRUE                      if      ('O'='O')
     171/     2B8 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     171/     2B8 : 82                          glo     SP
     171/     2B9 : FC 0C                       adi     ((-4+16))#256
     171/     2BB : AE                          plo     MEMADDR
     171/     2BC : 92                          ghi     SP
     171/     2BD : 7C 00                       adci    ((-4+16))>>8; was/256
     171/     2BF : BE                          phi     MEMADDR
     171/     2C0 : =>FALSE                     else
     171/     2C0 :                                     ldAD    memAddr,SP
     171/     2C0 : [171]                       endif
     171/     2C0 : 9B                          ghi     R11
     171/     2C1 : 5E                          str     memAddr
     171/     2C2 : 1E                          inc     memAddr
     171/     2C3 : 8B                          glo     R11
     171/     2C4 : 5E                          str     memAddr
     172/     2C5 :                     ;		}
     173/     2C5 :                     L28:
     174/     2C5 :                     ;		k=k/10;
     175/     2C5 : (MACRO)             	cpy2 R12,R7
     175/     2C5 : 87                          glo     R7
     175/     2C6 : AC                          plo     R12
     175/     2C7 : 97                          ghi     R7
     175/     2C8 : BC                          phi     R12
     176/     2C9 : (MACRO)             	ldaD R13,10
     176/     2C9 : F8 0A                       ldi     (10)&255
     176/     2CB : AD                          plo     R13
     176/     2CC : F8 00                       ldi     (10)>>8; was/256
     176/     2CE : BD                          phi     R13
     177/     2CF : (MACRO)             	Ccall _divu2
     177/     2CF : D4                          sep     RCALL
     177/     2D0 : 0D 49                       dw      _DIVU2
     178/     2D2 : (MACRO)             	cpy2 R7,R15
     178/     2D2 : 8F                          glo     R15
     178/     2D3 : A7                          plo     R7
     178/     2D4 : 9F                          ghi     R15
     178/     2D5 : B7                          phi     R7
     179/     2D6 :                     ;	}
     180/     2D6 :                     L22:
     181/     2D6 :                     ;	while(k>0){
     182/     2D6 : (MACRO)             	jnzU2 r7,L21; NE 0
     182/     2D6 : 87                          glo     R7
     182/     2D7 : CA 02 12                    lbnz    L21
     182/     2DA : 97                          ghi     R7
     182/     2DB : CA 02 12                    lbnz    L21
     183/     2DE :                     ;	*bptr='\0';
     184/     2DE : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     184/     2DE : =>TRUE                      if      ('O'='O')
     184/     2DE :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 16 - 2/23/2013 7:47:57


     184/     2DE : 82                          glo     SP
     184/     2DF : FC 0A                       adi     ((-6+16))#256
     184/     2E1 : AE                          plo     MEMADDR
     184/     2E2 : 92                          ghi     SP
     184/     2E3 : 7C 00                       adci    ((-6+16))>>8; was/256
     184/     2E5 : BE                          phi     MEMADDR
     184/     2E6 : =>FALSE                     else
     184/     2E6 :                                     ldAD    memAddr,SP
     184/     2E6 : [184]                       endif
     184/     2E6 : 4E                          lda     memAddr
     184/     2E7 : BB                          phi     R11
     184/     2E8 : 0E                          ldn     memAddr
     184/     2E9 : AB                          plo     R11
     185/     2EA : (MACRO)             	ldaD R10,0
     185/     2EA : F8 00                       ldi     (0)&255
     185/     2EC : AA                          plo     R10
     185/     2ED : F8 00                       ldi     (0)>>8; was/256
     185/     2EF : BA                          phi     R10
     186/     2F0 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     186/     2F0 : =>TRUE                      if      ('O'='O')
     186/     2F0 :  (MACRO-2)                          ldAX    memAddr,R11,0
     186/     2F0 : 8B                          glo     R11
     186/     2F1 : FC 00                       adi     (0)#256
     186/     2F3 : AE                          plo     MEMADDR
     186/     2F4 : 9B                          ghi     R11
     186/     2F5 : 7C 00                       adci    (0)>>8; was/256
     186/     2F7 : BE                          phi     MEMADDR
     186/     2F8 : =>FALSE                     else
     186/     2F8 :                                     ldAD    memAddr,R11
     186/     2F8 : [186]                       endif
     186/     2F8 : 8A                          glo     R10
     186/     2F9 : 5E                          str     memAddr
     187/     2FA :                     ;	return buffer;
     188/     2FA : (MACRO)             	ld2 R15,'O',sp,(2+16)
     188/     2FA : =>TRUE                      if      ('O'='O')
     188/     2FA :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
     188/     2FA : 82                          glo     SP
     188/     2FB : FC 12                       adi     ((2+16))#256
     188/     2FD : AE                          plo     MEMADDR
     188/     2FE : 92                          ghi     SP
     188/     2FF : 7C 00                       adci    ((2+16))>>8; was/256
     188/     301 : BE                          phi     MEMADDR
     188/     302 : =>FALSE                     else
     188/     302 :                                     ldAD    memAddr,SP
     188/     302 : [188]                       endif
     188/     302 : 4E                          lda     memAddr
     188/     303 : BF                          phi     R15
     188/     304 : 0E                          ldn     memAddr
     188/     305 : AF                          plo     R15
     189/     306 :                     L18:
     190/     306 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     190/     306 : 82                          glo     SP
     190/     307 : FC 04                       ADI     ((4))#256
     190/     309 : AE                          plo     MEMADDR
     190/     30A : 92                          ghi     SP
     190/     30B : 7C 00                       ADCI     ((4))>>8; was/256
     190/     30D : BE                          phi     MEMADDR
     191/     30E : (MACRO)             	rldmi r7,memaddr
     191/     30E : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     191/     30F : B7                          phi     R7
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 17 - 2/23/2013 7:47:57


     191/     310 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     191/     311 : A7                          plo     R7
     192/     312 : (MACRO)             	rldmi r1,memaddr
     192/     312 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     192/     313 : B1                          phi     R1
     192/     314 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     192/     315 : A1                          plo     R1
     193/     316 : (MACRO)             	rldmi r0,memaddr
     193/     316 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     193/     317 : B0                          phi     R0
     193/     318 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     193/     319 : A0                          plo     R0
     194/     31A : (MACRO)             	release 14
     194/     31A :                     ;for release we adjust the low byte first 
     194/     31A :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     194/     31A :  (MACRO-2)                  alu2i sp,sp,14,adi,adci
     194/     31A : 82                          glo     SP
     194/     31B : FC 0E                       ADI     (14)#256
     194/     31D : A2                          plo     SP
     194/     31E : 92                          ghi     SP
     194/     31F : 7C 00                       ADCI     (14)>>8; was/256
     194/     321 : B2                          phi     SP
     195/     322 : (MACRO)             	Cretn
     195/     322 : D5                          sep     RRET
     196/     323 :                     
     197/     323 :                     _ltoa:
     198/     323 : (MACRO)             	reserve 12
     198/     323 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     198/     323 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     198/     323 : 82                          glo sp          ;grab low byte of stack pointer
     198/     324 : FF 0C                       smi 12&255 ;claculate new low byte
     198/     326 : AE                          plo memAddr     ;save it for a moment
     198/     327 : 92                          ghi sp          ;grab high byte
     198/     328 : 7F 00                       smbi (12>>8)&255 ;calculate the new page
     198/     32A : B2                          phi sp          ;adjust page first
     198/     32B : 8E                          glo memAddr     ;get new low byte
     198/     32C : A2                          plo sp          ;finish adjusting the stack pointer
     199/     32D : (MACRO)             	alu2I memaddr,sp,(11),adi,adci
     199/     32D : 82                          glo     SP
     199/     32E : FC 0B                       ADI     ((11))#256
     199/     330 : AE                          plo     MEMADDR
     199/     331 : 92                          ghi     SP
     199/     332 : 7C 00                       ADCI     ((11))>>8; was/256
     199/     334 : BE                          phi     MEMADDR
     200/     335 : EE                  	sex	memaddr
     201/     336 : (MACRO)             	savmi r0
     201/     336 : 80                          glo     R0
     201/     337 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     201/     338 : 90                          ghi     R0
     201/     339 : 73                          stxd            ;and it end up where needed to do the next one
     202/     33A : (MACRO)             	savmi r1
     202/     33A : 81                          glo     R1
     202/     33B : 73                          stxd            ;R1 x is primed to the spot to start the saves
     202/     33C : 91                          ghi     R1
     202/     33D : 73                          stxd            ;and it end up where needed to do the next one
     203/     33E : (MACRO)             	savmi r7
     203/     33E : 87                          glo     R7
     203/     33F : 73                          stxd            ;R7 x is primed to the spot to start the saves
     203/     340 : 97                          ghi     R7
     203/     341 : 73                          stxd            ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 18 - 2/23/2013 7:47:57


     204/     342 : E2                  	sex sp
     205/     343 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     205/     343 :  (MACRO-2)                  cpy2    RL0,RL12 ;long reg pairs are addressed as the low order pair
     205/     343 : 8D                          glo     RL12
     205/     344 : A1                          plo     RL0
     205/     345 : 9D                          ghi     RL12
     205/     346 : B1                          phi     RL0
     205/     347 :  (MACRO-2)                  cpy2    RL0-1,RL12-1
     205/     347 : 8C                          glo     RL12-1
     205/     348 : A0                          plo     RL0-1
     205/     349 : 9C                          ghi     RL12-1
     205/     34A : B0                          phi     RL0-1
     206/     34B :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     207/     34B :                     ;	char* bptr=buffer;
     208/     34B : (MACRO)             	ld2 R7,'O',sp,(4+14)
     208/     34B : =>TRUE                      if      ('O'='O')
     208/     34B :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     208/     34B : 82                          glo     SP
     208/     34C : FC 12                       adi     ((4+14))#256
     208/     34E : AE                          plo     MEMADDR
     208/     34F : 92                          ghi     SP
     208/     350 : 7C 00                       adci    ((4+14))>>8; was/256
     208/     352 : BE                          phi     MEMADDR
     208/     353 : =>FALSE                     else
     208/     353 :                                     ldAD    memAddr,SP
     208/     353 : [208]                       endif
     208/     353 : 4E                          lda     memAddr
     208/     354 : B7                          phi     R7
     208/     355 : 0E                          ldn     memAddr
     208/     356 : A7                          plo     R7
     209/     357 :                     ;	if (s<0){
     210/     357 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     210/     357 : F8 00                       ldi     (0)&255
     210/     359 : AB                          plo     RL10
     210/     35A : F8 00                       ldi     ((0)>>8)&255; 
     210/     35C : BB                          phi     RL10
     210/     35D : F8 00                       ldi     ((0)>>16)&255; 
     210/     35F : AA                          plo     RL10-1
     210/     360 : F8 00                       ldi     ((0)>>24)&255; 
     210/     362 : BA                          phi     RL10-1
     211/     363 : (MACRO)             	jcI4 RL0,RL10,lbdf,L33; GE is flipped test from LT
     211/     363 : 22                          dec     sp ;make a work area
     211/     364 : 8B                          glo     RL10    ;lowest order byte
     211/     365 : 52                          str     sp 
     211/     366 : 81                          glo     RL0
     211/     367 : F7                          sm
     211/     368 : 9B                          ghi     RL10
     211/     369 : 52                          str     sp
     211/     36A : 91                          ghi     RL0
     211/     36B : 77                          smb          ;that's a standard signed subtraction of one reg
     211/     36C : 8A                          glo     RL10-1  ;lowest order byte of the top register
     211/     36D : 52                          str     sp 
     211/     36E : 80                          glo     RL0-1
     211/     36F : 77                          smb
     211/     370 : 9A                          ghi     RL10-1
     211/     371 : 52                          str     sp
     211/     372 : 90                          ghi     RL0-1
     211/     373 : 77                          smb          ;that's a standard signed subtraction of a double register
     211/     374 : 90                          ghi     RL0-1 ;
     211/     375 : F3                          xor           ;sets the top bit if the signs are different
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 19 - 2/23/2013 7:47:57


     211/     376 : 12                          inc     sp ;release the work area
     211/     377 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     211/     378 : C7                          lsnf    ;bypass the flip if signs were the same
     211/     379 : FB 01                       xri     01     ;invert original df if signs were different
     211/     37B : 76                          shrc           ;put it back in df
     211/     37C : C3 03 BB                    LBDF    L33  ;execute 
     212/     37F :                     ;		*bptr++='-';
     213/     37F : (MACRO)             	cpy2 R11,R7
     213/     37F : 87                          glo     R7
     213/     380 : AB                          plo     R11
     213/     381 : 97                          ghi     R7
     213/     382 : BB                          phi     R11
     214/     383 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     214/     383 : =>TRUE                      if      ('O'='O')
     214/     383 :  (MACRO-2)                          ldAX    R7,R11,(1)
     214/     383 : 8B                          glo     R11
     214/     384 : FC 01                       adi     ((1))#256
     214/     386 : A7                          plo     R7
     214/     387 : 9B                          ghi     R11
     214/     388 : 7C 00                       adci    ((1))>>8; was/256
     214/     38A : B7                          phi     R7
     214/     38B : =>FALSE                     else
     214/     38B :                                     ldAD    R7,R11
     214/     38B : [214]                       endif
     215/     38B : (MACRO)             	ldaD R10,45
     215/     38B : F8 2D                       ldi     (45)&255
     215/     38D : AA                          plo     R10
     215/     38E : F8 00                       ldi     (45)>>8; was/256
     215/     390 : BA                          phi     R10
     216/     391 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     216/     391 : =>TRUE                      if      ('O'='O')
     216/     391 :  (MACRO-2)                          ldAX    memAddr,R11,0
     216/     391 : 8B                          glo     R11
     216/     392 : FC 00                       adi     (0)#256
     216/     394 : AE                          plo     MEMADDR
     216/     395 : 9B                          ghi     R11
     216/     396 : 7C 00                       adci    (0)>>8; was/256
     216/     398 : BE                          phi     MEMADDR
     216/     399 : =>FALSE                     else
     216/     399 :                                     ldAD    memAddr,R11
     216/     399 : [216]                       endif
     216/     399 : 8A                          glo     R10
     216/     39A : 5E                          str     memAddr
     217/     39B :                     ;		s=-s;
     218/     39B : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     218/     39B :  (MACRO-2)                  alu4I   RL0,RL0,0xffffffff,xri,xri      ;flip all the bits
     218/     39B : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
     218/     39C : FB FF                       XRI     (0XFFFFFFFF)&255
     218/     39E : A1                          plo     RL0
     218/     39F : 91                          ghi     RL0
     218/     3A0 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
     218/     3A2 : B1                          phi     RL0
     218/     3A3 : 80                          glo     RL0-1
     218/     3A4 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
     218/     3A6 : A0                          plo     RL0-1
     218/     3A7 : 90                          ghi     RL0-1
     218/     3A8 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
     218/     3AA : B0                          phi     RL0-1
     218/     3AB :  (MACRO-2)                  alu4i   RL0,RL0,1,adi,adci              ;and add 1
     218/     3AB : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 20 - 2/23/2013 7:47:57


     218/     3AC : FC 01                       ADI     (1)&255
     218/     3AE : A1                          plo     RL0
     218/     3AF : 91                          ghi     RL0
     218/     3B0 : 7C 00                       ADCI     ((1)>>8)&255; 
     218/     3B2 : B1                          phi     RL0
     218/     3B3 : 80                          glo     RL0-1
     218/     3B4 : 7C 00                       ADCI     ((1)>>16)&255; 
     218/     3B6 : A0                          plo     RL0-1
     218/     3B7 : 90                          ghi     RL0-1
     218/     3B8 : 7C 00                       ADCI     ((1)>>24)&255; 
     218/     3BA : B0                          phi     RL0-1
     219/     3BB :                     ;	}
     220/     3BB :                     L33:
     221/     3BB :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     222/     3BB : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     222/     3BB :  (MACRO-2)                  cpy2    RP1P2,RL0 ;long reg pairs are addressed as the low order pair
     222/     3BB : 81                          glo     RL0
     222/     3BC : AD                          plo     RP1P2
     222/     3BD : 91                          ghi     RL0
     222/     3BE : BD                          phi     RP1P2
     222/     3BF :  (MACRO-2)                  cpy2    RP1P2-1,RL0-1
     222/     3BF : 80                          glo     RL0-1
     222/     3C0 : AC                          plo     RP1P2-1
     222/     3C1 : 90                          ghi     RL0-1
     222/     3C2 : BC                          phi     RP1P2-1
     223/     3C3 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     223/     3C3 : =>TRUE                      if      ('O'='O')
     223/     3C3 :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     223/     3C3 : 82                          glo     SP
     223/     3C4 : FC 04                       adi     ((4))#256
     223/     3C6 : AE                          plo     MEMADDR
     223/     3C7 : 92                          ghi     SP
     223/     3C8 : 7C 00                       adci    ((4))>>8; was/256
     223/     3CA : BE                          phi     MEMADDR
     223/     3CB : =>FALSE                     else
     223/     3CB :                                     ldAD    memAddr,SP
     223/     3CB : [223]                       endif
     223/     3CB : 97                          ghi     R7
     223/     3CC : 5E                          str     memAddr
     223/     3CD : 1E                          inc     memAddr
     223/     3CE : 87                          glo     R7
     223/     3CF : 5E                          str     memAddr
     224/     3D0 : (MACRO)             	Ccall _dubdabx
     224/     3D0 : D4                          sep     RCALL
     224/     3D1 : 0F 75                       dw      _DUBDABX
     225/     3D3 : (MACRO)             	cpy2 R11,R15
     225/     3D3 : 8F                          glo     R15
     225/     3D4 : AB                          plo     R11
     225/     3D5 : 9F                          ghi     R15
     225/     3D6 : BB                          phi     R11
     226/     3D7 : (MACRO)             	cpy2 R12,R7
     226/     3D7 : 87                          glo     R7
     226/     3D8 : AC                          plo     R12
     226/     3D9 : 97                          ghi     R7
     226/     3DA : BC                          phi     R12
     227/     3DB : (MACRO)             	cpy2 R13,R11
     227/     3DB : 8B                          glo     R11
     227/     3DC : AD                          plo     R13
     227/     3DD : 9B                          ghi     R11
     227/     3DE : BD                          phi     R13
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 21 - 2/23/2013 7:47:57


     228/     3DF : (MACRO)             	Ccall _strcpy
     228/     3DF : D4                          sep     RCALL
     228/     3E0 : 00 3E                       dw      _STRCPY
     229/     3E2 :                     ;	return buffer;
     230/     3E2 : (MACRO)             	ld2 R15,'O',sp,(4+14)
     230/     3E2 : =>TRUE                      if      ('O'='O')
     230/     3E2 :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     230/     3E2 : 82                          glo     SP
     230/     3E3 : FC 12                       adi     ((4+14))#256
     230/     3E5 : AE                          plo     MEMADDR
     230/     3E6 : 92                          ghi     SP
     230/     3E7 : 7C 00                       adci    ((4+14))>>8; was/256
     230/     3E9 : BE                          phi     MEMADDR
     230/     3EA : =>FALSE                     else
     230/     3EA :                                     ldAD    memAddr,SP
     230/     3EA : [230]                       endif
     230/     3EA : 4E                          lda     memAddr
     230/     3EB : BF                          phi     R15
     230/     3EC : 0E                          ldn     memAddr
     230/     3ED : AF                          plo     R15
     231/     3EE :                     L32:
     232/     3EE : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
     232/     3EE : 82                          glo     SP
     232/     3EF : FC 06                       ADI     ((6))#256
     232/     3F1 : AE                          plo     MEMADDR
     232/     3F2 : 92                          ghi     SP
     232/     3F3 : 7C 00                       ADCI     ((6))>>8; was/256
     232/     3F5 : BE                          phi     MEMADDR
     233/     3F6 : (MACRO)             	rldmi r7,memaddr
     233/     3F6 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     233/     3F7 : B7                          phi     R7
     233/     3F8 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     233/     3F9 : A7                          plo     R7
     234/     3FA : (MACRO)             	rldmi r1,memaddr
     234/     3FA : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     234/     3FB : B1                          phi     R1
     234/     3FC : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     234/     3FD : A1                          plo     R1
     235/     3FE : (MACRO)             	rldmi r0,memaddr
     235/     3FE : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     235/     3FF : B0                          phi     R0
     235/     400 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     235/     401 : A0                          plo     R0
     236/     402 : (MACRO)             	release 12
     236/     402 :                     ;for release we adjust the low byte first 
     236/     402 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     236/     402 :  (MACRO-2)                  alu2i sp,sp,12,adi,adci
     236/     402 : 82                          glo     SP
     236/     403 : FC 0C                       ADI     (12)#256
     236/     405 : A2                          plo     SP
     236/     406 : 92                          ghi     SP
     236/     407 : 7C 00                       ADCI     (12)>>8; was/256
     236/     409 : B2                          phi     SP
     237/     40A : (MACRO)             	Cretn
     237/     40A : D5                          sep     RRET
     238/     40B :                     
     239/     40B :                     _printint:
     240/     40B : (MACRO)             	reserve 12
     240/     40B :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     240/     40B :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 22 - 2/23/2013 7:47:57


     240/     40B : 82                          glo sp          ;grab low byte of stack pointer
     240/     40C : FF 0C                       smi 12&255 ;claculate new low byte
     240/     40E : AE                          plo memAddr     ;save it for a moment
     240/     40F : 92                          ghi sp          ;grab high byte
     240/     410 : 7F 00                       smbi (12>>8)&255 ;calculate the new page
     240/     412 : B2                          phi sp          ;adjust page first
     240/     413 : 8E                          glo memAddr     ;get new low byte
     240/     414 : A2                          plo sp          ;finish adjusting the stack pointer
     241/     415 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     241/     415 : =>TRUE                      if      ('O'='O')
     241/     415 :  (MACRO-2)                          ldAX    memAddr,SP,(14)
     241/     415 : 82                          glo     SP
     241/     416 : FC 0E                       adi     ((14))#256
     241/     418 : AE                          plo     MEMADDR
     241/     419 : 92                          ghi     SP
     241/     41A : 7C 00                       adci    ((14))>>8; was/256
     241/     41C : BE                          phi     MEMADDR
     241/     41D : =>FALSE                     else
     241/     41D :                                     ldAD    memAddr,SP
     241/     41D : [241]                       endif
     241/     41D : 9C                          ghi     R12
     241/     41E : 5E                          str     memAddr
     241/     41F : 1E                          inc     memAddr
     241/     420 : 8C                          glo     R12
     241/     421 : 5E                          str     memAddr
     242/     422 :                     ;void printint(int s){ //print an integer
     243/     422 :                     ;	itoa(s,buffer);
     244/     422 : (MACRO)             	ld2 R12,'O',sp,(0+14)
     244/     422 : =>TRUE                      if      ('O'='O')
     244/     422 :  (MACRO-2)                          ldAX    memAddr,SP,(0+14)
     244/     422 : 82                          glo     SP
     244/     423 : FC 0E                       adi     ((0+14))#256
     244/     425 : AE                          plo     MEMADDR
     244/     426 : 92                          ghi     SP
     244/     427 : 7C 00                       adci    ((0+14))>>8; was/256
     244/     429 : BE                          phi     MEMADDR
     244/     42A : =>FALSE                     else
     244/     42A :                                     ldAD    memAddr,SP
     244/     42A : [244]                       endif
     244/     42A : 4E                          lda     memAddr
     244/     42B : BC                          phi     R12
     244/     42C : 0E                          ldn     memAddr
     244/     42D : AC                          plo     R12
     245/     42E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     245/     42E : =>TRUE                      if      ('O'='O')
     245/     42E :  (MACRO-2)                          ldAX    R13,SP,(-10+14)
     245/     42E : 82                          glo     SP
     245/     42F : FC 04                       adi     ((-10+14))#256
     245/     431 : AD                          plo     R13
     245/     432 : 92                          ghi     SP
     245/     433 : 7C 00                       adci    ((-10+14))>>8; was/256
     245/     435 : BD                          phi     R13
     245/     436 : =>FALSE                     else
     245/     436 :                                     ldAD    R13,SP
     245/     436 : [245]                       endif
     246/     436 : (MACRO)             	Ccall _itoa
     246/     436 : D4                          sep     RCALL
     246/     437 : 01 1F                       dw      _ITOA
     247/     439 :                     ;	printstr(buffer);
     248/     439 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 23 - 2/23/2013 7:47:57


     248/     439 : =>TRUE                      if      ('O'='O')
     248/     439 :  (MACRO-2)                          ldAX    R12,SP,(-10+14)
     248/     439 : 82                          glo     SP
     248/     43A : FC 04                       adi     ((-10+14))#256
     248/     43C : AC                          plo     R12
     248/     43D : 92                          ghi     SP
     248/     43E : 7C 00                       adci    ((-10+14))>>8; was/256
     248/     440 : BC                          phi     R12
     248/     441 : =>FALSE                     else
     248/     441 :                                     ldAD    R12,SP
     248/     441 : [248]                       endif
     249/     441 : (MACRO)             	Ccall _printstr
     249/     441 : D4                          sep     RCALL
     249/     442 : 00 B0                       dw      _PRINTSTR
     250/     444 :                     ;}
     251/     444 :                     L35:
     252/     444 : (MACRO)             	release 12
     252/     444 :                     ;for release we adjust the low byte first 
     252/     444 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     252/     444 :  (MACRO-2)                  alu2i sp,sp,12,adi,adci
     252/     444 : 82                          glo     SP
     252/     445 : FC 0C                       ADI     (12)#256
     252/     447 : A2                          plo     SP
     252/     448 : 92                          ghi     SP
     252/     449 : 7C 00                       ADCI     (12)>>8; was/256
     252/     44B : B2                          phi     SP
     253/     44C : (MACRO)             	Cretn
     253/     44C : D5                          sep     RRET
     254/     44D :                     
     255/     44D :                     _printlint:
     256/     44D : (MACRO)             	reserve 18
     256/     44D :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     256/     44D :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     256/     44D : 82                          glo sp          ;grab low byte of stack pointer
     256/     44E : FF 12                       smi 18&255 ;claculate new low byte
     256/     450 : AE                          plo memAddr     ;save it for a moment
     256/     451 : 92                          ghi sp          ;grab high byte
     256/     452 : 7F 00                       smbi (18>>8)&255 ;calculate the new page
     256/     454 : B2                          phi sp          ;adjust page first
     256/     455 : 8E                          glo memAddr     ;get new low byte
     256/     456 : A2                          plo sp          ;finish adjusting the stack pointer
     257/     457 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     257/     457 : =>TRUE                      if      ('O'='O')
     257/     457 :  (MACRO-2)                          ldAX    memAddr,SP,(20)
     257/     457 : 82                          glo     SP
     257/     458 : FC 14                       adi     ((20))#256
     257/     45A : AE                          plo     MEMADDR
     257/     45B : 92                          ghi     SP
     257/     45C : 7C 00                       adci    ((20))>>8; was/256
     257/     45E : BE                          phi     MEMADDR
     257/     45F : =>FALSE                     else
     257/     45F :                                     ldAD    memAddr,SP
     257/     45F : [257]                       endif
     257/     45F : 9C                          ghi     R12
     257/     460 : 5E                          str     memAddr
     257/     461 : 1E                          inc     memAddr
     257/     462 : 8C                          glo     R12
     257/     463 : 5E                          str     memAddr
     258/     464 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     258/     464 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 24 - 2/23/2013 7:47:57


     258/     464 :  (MACRO-2)                          ldAX    memAddr,SP,(22)
     258/     464 : 82                          glo     SP
     258/     465 : FC 16                       adi     ((22))#256
     258/     467 : AE                          plo     MEMADDR
     258/     468 : 92                          ghi     SP
     258/     469 : 7C 00                       adci    ((22))>>8; was/256
     258/     46B : BE                          phi     MEMADDR
     258/     46C : =>FALSE                     else
     258/     46C :                                     ldAD    memAddr,SP
     258/     46C : [258]                       endif
     258/     46C : 9D                          ghi     R13
     258/     46D : 5E                          str     memAddr
     258/     46E : 1E                          inc     memAddr
     258/     46F : 8D                          glo     R13
     258/     470 : 5E                          str     memAddr
     259/     471 :                     ;void printlint(long s){ //print a long integer
     260/     471 :                     ;	printstr(ltoa(s,buffer));
     261/     471 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20)
     261/     471 : =>TRUE                      if      ('O'='O')
     261/     471 :  (MACRO-2)                          ldAX    memAddr,SP,(0+20)
     261/     471 : 82                          glo     SP
     261/     472 : FC 14                       adi     ((0+20))#256
     261/     474 : AE                          plo     MEMADDR
     261/     475 : 92                          ghi     SP
     261/     476 : 7C 00                       adci    ((0+20))>>8; was/256
     261/     478 : BE                          phi     MEMADDR
     261/     479 : =>FALSE                     else
     261/     479 :                                     ldAD    memAddr,SP
     261/     479 : [261]                       endif
     261/     479 : 4E                          lda     memAddr
     261/     47A : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     261/     47B : 4E                          lda     memAddr ;but load and store start with the 1st
     261/     47C : AC                          plo     RP1P2-1
     261/     47D : 4E                          lda     memAddr
     261/     47E : BD                          phi     RP1P2
     261/     47F : 0E                          ldn     memAddr
     261/     480 : AD                          plo     RP1P2
     262/     481 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     262/     481 : =>TRUE                      if      ('O'='O')
     262/     481 :  (MACRO-2)                          ldAX    R11,SP,(-14+20)
     262/     481 : 82                          glo     SP
     262/     482 : FC 06                       adi     ((-14+20))#256
     262/     484 : AB                          plo     R11
     262/     485 : 92                          ghi     SP
     262/     486 : 7C 00                       adci    ((-14+20))>>8; was/256
     262/     488 : BB                          phi     R11
     262/     489 : =>FALSE                     else
     262/     489 :                                     ldAD    R11,SP
     262/     489 : [262]                       endif
     263/     489 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     263/     489 : =>TRUE                      if      ('O'='O')
     263/     489 :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     263/     489 : 82                          glo     SP
     263/     48A : FC 04                       adi     ((4))#256
     263/     48C : AE                          plo     MEMADDR
     263/     48D : 92                          ghi     SP
     263/     48E : 7C 00                       adci    ((4))>>8; was/256
     263/     490 : BE                          phi     MEMADDR
     263/     491 : =>FALSE                     else
     263/     491 :                                     ldAD    memAddr,SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 25 - 2/23/2013 7:47:57


     263/     491 : [263]                       endif
     263/     491 : 9B                          ghi     R11
     263/     492 : 5E                          str     memAddr
     263/     493 : 1E                          inc     memAddr
     263/     494 : 8B                          glo     R11
     263/     495 : 5E                          str     memAddr
     264/     496 : (MACRO)             	Ccall _ltoa
     264/     496 : D4                          sep     RCALL
     264/     497 : 03 23                       dw      _LTOA
     265/     499 : (MACRO)             	cpy2 R11,R15
     265/     499 : 8F                          glo     R15
     265/     49A : AB                          plo     R11
     265/     49B : 9F                          ghi     R15
     265/     49C : BB                          phi     R11
     266/     49D : (MACRO)             	cpy2 R12,R11
     266/     49D : 8B                          glo     R11
     266/     49E : AC                          plo     R12
     266/     49F : 9B                          ghi     R11
     266/     4A0 : BC                          phi     R12
     267/     4A1 : (MACRO)             	Ccall _printstr
     267/     4A1 : D4                          sep     RCALL
     267/     4A2 : 00 B0                       dw      _PRINTSTR
     268/     4A4 :                     ;}
     269/     4A4 :                     L36:
     270/     4A4 : (MACRO)             	release 18
     270/     4A4 :                     ;for release we adjust the low byte first 
     270/     4A4 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     270/     4A4 :  (MACRO-2)                  alu2i sp,sp,18,adi,adci
     270/     4A4 : 82                          glo     SP
     270/     4A5 : FC 12                       ADI     (18)#256
     270/     4A7 : A2                          plo     SP
     270/     4A8 : 92                          ghi     SP
     270/     4A9 : 7C 00                       ADCI     (18)>>8; was/256
     270/     4AB : B2                          phi     SP
     271/     4AC : (MACRO)             	Cretn
     271/     4AC : D5                          sep     RRET
     272/     4AD :                     
     273/     4AD :                     _putxn:
     274/     4AD : (MACRO)             	reserve 4
     274/     4AD :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     274/     4AD :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     274/     4AD : 82                          glo sp          ;grab low byte of stack pointer
     274/     4AE : FF 04                       smi 4&255 ;claculate new low byte
     274/     4B0 : AE                          plo memAddr     ;save it for a moment
     274/     4B1 : 92                          ghi sp          ;grab high byte
     274/     4B2 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     274/     4B4 : B2                          phi sp          ;adjust page first
     274/     4B5 : 8E                          glo memAddr     ;get new low byte
     274/     4B6 : A2                          plo sp          ;finish adjusting the stack pointer
     275/     4B7 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     275/     4B7 : =>TRUE                      if      ('O'='O')
     275/     4B7 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     275/     4B7 : 82                          glo     SP
     275/     4B8 : FC 06                       adi     ((6))#256
     275/     4BA : AE                          plo     MEMADDR
     275/     4BB : 92                          ghi     SP
     275/     4BC : 7C 00                       adci    ((6))>>8; was/256
     275/     4BE : BE                          phi     MEMADDR
     275/     4BF : =>FALSE                     else
     275/     4BF :                                     ldAD    memAddr,SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 26 - 2/23/2013 7:47:57


     275/     4BF : [275]                       endif
     275/     4BF : 9C                          ghi     R12
     275/     4C0 : 5E                          str     memAddr
     275/     4C1 : 1E                          inc     memAddr
     275/     4C2 : 8C                          glo     R12
     275/     4C3 : 5E                          str     memAddr
     276/     4C4 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     276/     4C4 : =>TRUE                      if      ('O'='O')
     276/     4C4 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     276/     4C4 : 82                          glo     SP
     276/     4C5 : FC 06                       adi     ((0+6))#256
     276/     4C7 : AE                          plo     MEMADDR
     276/     4C8 : 92                          ghi     SP
     276/     4C9 : 7C 00                       adci    ((0+6))>>8; was/256
     276/     4CB : BE                          phi     MEMADDR
     276/     4CC : =>FALSE                     else
     276/     4CC :                                     ldAD    memAddr,SP
     276/     4CC : [276]                       endif
     276/     4CC : 4E                          lda     memAddr
     276/     4CD : BB                          phi     R11
     276/     4CE : 0E                          ldn     memAddr
     276/     4CF : AB                          plo     R11
     277/     4D0 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     277/     4D0 : =>TRUE                      if      ('O'='O')
     277/     4D0 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     277/     4D0 : 82                          glo     SP
     277/     4D1 : FC 06                       adi     ((0+6))#256
     277/     4D3 : AE                          plo     MEMADDR
     277/     4D4 : 92                          ghi     SP
     277/     4D5 : 7C 00                       adci    ((0+6))>>8; was/256
     277/     4D7 : BE                          phi     MEMADDR
     277/     4D8 : =>FALSE                     else
     277/     4D8 :                                     ldAD    memAddr,SP
     277/     4D8 : [277]                       endif
     277/     4D8 : 8B                          glo     R11
     277/     4D9 : 5E                          str     memAddr
     278/     4DA :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     279/     4DA :                     ;	if (x<10){
     280/     4DA : (MACRO)             	ld1 R11,'O',sp,(0+6)
     280/     4DA : =>TRUE                      if      ('O'='O')
     280/     4DA :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     280/     4DA : 82                          glo     SP
     280/     4DB : FC 06                       adi     ((0+6))#256
     280/     4DD : AE                          plo     MEMADDR
     280/     4DE : 92                          ghi     SP
     280/     4DF : 7C 00                       adci    ((0+6))>>8; was/256
     280/     4E1 : BE                          phi     MEMADDR
     280/     4E2 : =>FALSE                     else
     280/     4E2 :                                     ldAD    memAddr,SP
     280/     4E2 : [280]                       endif
     280/     4E2 : 0E                          ldn     memAddr
     280/     4E3 : AB                          plo     R11
     281/     4E4 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     281/     4E4 : F8 00                       ldi     0
     281/     4E6 : BB                          phi     11
     282/     4E7 : (MACRO)             	jcI2I r11,10,lbdf,L38; GE is flipped test from LT
     282/     4E7 : 8B                          glo     R11
     282/     4E8 : FF 0A                       smi     (10)#256
     282/     4EA : 9B                          ghi     R11
     282/     4EB : 7F 00                       smbi    (10)>>8; was/256      ;that's a standard signed subtraction
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 27 - 2/23/2013 7:47:57


     282/     4ED : 9B                          ghi     R11 ;
     282/     4EE : FB 00                       xri     (10)>>8; was/256      ;sets the top bit if the signs are different
     282/     4F0 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     282/     4F1 : C7                          lsnf    ;bypass the df flip if signs were the same
     282/     4F2 : FB 01                       xri     01     ;invert original df if signs were different
     282/     4F4 : 76                          shrc           ;put it back in df
     282/     4F5 : C3 05 18                    LBDF    L38  ;execute 
     283/     4F8 :                     ;		putc(x+'0');
     284/     4F8 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     284/     4F8 : =>TRUE                      if      ('O'='O')
     284/     4F8 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     284/     4F8 : 82                          glo     SP
     284/     4F9 : FC 06                       adi     ((0+6))#256
     284/     4FB : AE                          plo     MEMADDR
     284/     4FC : 92                          ghi     SP
     284/     4FD : 7C 00                       adci    ((0+6))>>8; was/256
     284/     4FF : BE                          phi     MEMADDR
     284/     500 : =>FALSE                     else
     284/     500 :                                     ldAD    memAddr,SP
     284/     500 : [284]                       endif
     284/     500 : 0E                          ldn     memAddr
     284/     501 : AB                          plo     R11
     285/     502 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     285/     502 : F8 00                       ldi     0
     285/     504 : BB                          phi     11
     286/     505 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     286/     505 : =>TRUE                      if      ('O'='O')
     286/     505 :  (MACRO-2)                          ldAX    R11,R11,(48)
     286/     505 : 8B                          glo     R11
     286/     506 : FC 30                       adi     ((48))#256
     286/     508 : AB                          plo     R11
     286/     509 : 9B                          ghi     R11
     286/     50A : 7C 00                       adci    ((48))>>8; was/256
     286/     50C : BB                          phi     R11
     286/     50D : =>FALSE                     else
     286/     50D :                                     ldAD    R11,R11
     286/     50D : [286]                       endif
     287/     50D : (MACRO)             	cpy1 R12,R11
     287/     50D : 8B                          glo     R11
     287/     50E : AC                          plo     R12
     288/     50F : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     288/     50F : F8 00                       ldi     0
     288/     511 : BC                          phi     12
     289/     512 : (MACRO)             	Ccall _putc
     289/     512 : D4                          sep     RCALL
     289/     513 : 10 40                       dw      _PUTC
     290/     515 :                     ;	} else {
     291/     515 : C0 05 3D            	lbr L39
     292/     518 :                     L38:
     293/     518 :                     ;		putc(x+'A'-10);
     294/     518 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     294/     518 : =>TRUE                      if      ('O'='O')
     294/     518 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     294/     518 : 82                          glo     SP
     294/     519 : FC 06                       adi     ((0+6))#256
     294/     51B : AE                          plo     MEMADDR
     294/     51C : 92                          ghi     SP
     294/     51D : 7C 00                       adci    ((0+6))>>8; was/256
     294/     51F : BE                          phi     MEMADDR
     294/     520 : =>FALSE                     else
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 28 - 2/23/2013 7:47:57


     294/     520 :                                     ldAD    memAddr,SP
     294/     520 : [294]                       endif
     294/     520 : 0E                          ldn     memAddr
     294/     521 : AB                          plo     R11
     295/     522 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     295/     522 : F8 00                       ldi     0
     295/     524 : BB                          phi     11
     296/     525 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     296/     525 : =>TRUE                      if      ('O'='O')
     296/     525 :  (MACRO-2)                          ldAX    R11,R11,(65)
     296/     525 : 8B                          glo     R11
     296/     526 : FC 41                       adi     ((65))#256
     296/     528 : AB                          plo     R11
     296/     529 : 9B                          ghi     R11
     296/     52A : 7C 00                       adci    ((65))>>8; was/256
     296/     52C : BB                          phi     R11
     296/     52D : =>FALSE                     else
     296/     52D :                                     ldAD    R11,R11
     296/     52D : [296]                       endif
     297/     52D : (MACRO)             	alu2I R11,R11,10,smi,smbi
     297/     52D : 8B                          glo     R11
     297/     52E : FF 0A                       SMI     (10)#256
     297/     530 : AB                          plo     R11
     297/     531 : 9B                          ghi     R11
     297/     532 : 7F 00                       SMBI     (10)>>8; was/256
     297/     534 : BB                          phi     R11
     298/     535 : (MACRO)             	cpy1 R12,R11
     298/     535 : 8B                          glo     R11
     298/     536 : AC                          plo     R12
     299/     537 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     299/     537 : F8 00                       ldi     0
     299/     539 : BC                          phi     12
     300/     53A : (MACRO)             	Ccall _putc
     300/     53A : D4                          sep     RCALL
     300/     53B : 10 40                       dw      _PUTC
     301/     53D :                     ;	}
     302/     53D :                     L39:
     303/     53D :                     ;}
     304/     53D :                     L37:
     305/     53D : (MACRO)             	release 4
     305/     53D :                     ;for release we adjust the low byte first 
     305/     53D :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     305/     53D :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     305/     53D : 82                          glo     SP
     305/     53E : FC 04                       ADI     (4)#256
     305/     540 : A2                          plo     SP
     305/     541 : 92                          ghi     SP
     305/     542 : 7C 00                       ADCI     (4)>>8; was/256
     305/     544 : B2                          phi     SP
     306/     545 : (MACRO)             	Cretn
     306/     545 : D5                          sep     RRET
     307/     546 :                     
     308/     546 :                     _putx:
     309/     546 : (MACRO)             	reserve 4
     309/     546 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     309/     546 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     309/     546 : 82                          glo sp          ;grab low byte of stack pointer
     309/     547 : FF 04                       smi 4&255 ;claculate new low byte
     309/     549 : AE                          plo memAddr     ;save it for a moment
     309/     54A : 92                          ghi sp          ;grab high byte
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 29 - 2/23/2013 7:47:57


     309/     54B : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     309/     54D : B2                          phi sp          ;adjust page first
     309/     54E : 8E                          glo memAddr     ;get new low byte
     309/     54F : A2                          plo sp          ;finish adjusting the stack pointer
     310/     550 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     310/     550 : =>TRUE                      if      ('O'='O')
     310/     550 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     310/     550 : 82                          glo     SP
     310/     551 : FC 06                       adi     ((6))#256
     310/     553 : AE                          plo     MEMADDR
     310/     554 : 92                          ghi     SP
     310/     555 : 7C 00                       adci    ((6))>>8; was/256
     310/     557 : BE                          phi     MEMADDR
     310/     558 : =>FALSE                     else
     310/     558 :                                     ldAD    memAddr,SP
     310/     558 : [310]                       endif
     310/     558 : 9C                          ghi     R12
     310/     559 : 5E                          str     memAddr
     310/     55A : 1E                          inc     memAddr
     310/     55B : 8C                          glo     R12
     310/     55C : 5E                          str     memAddr
     311/     55D : (MACRO)             	ld2 R11,'O',sp,(0+6)
     311/     55D : =>TRUE                      if      ('O'='O')
     311/     55D :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     311/     55D : 82                          glo     SP
     311/     55E : FC 06                       adi     ((0+6))#256
     311/     560 : AE                          plo     MEMADDR
     311/     561 : 92                          ghi     SP
     311/     562 : 7C 00                       adci    ((0+6))>>8; was/256
     311/     564 : BE                          phi     MEMADDR
     311/     565 : =>FALSE                     else
     311/     565 :                                     ldAD    memAddr,SP
     311/     565 : [311]                       endif
     311/     565 : 4E                          lda     memAddr
     311/     566 : BB                          phi     R11
     311/     567 : 0E                          ldn     memAddr
     311/     568 : AB                          plo     R11
     312/     569 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     312/     569 : =>TRUE                      if      ('O'='O')
     312/     569 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     312/     569 : 82                          glo     SP
     312/     56A : FC 06                       adi     ((0+6))#256
     312/     56C : AE                          plo     MEMADDR
     312/     56D : 92                          ghi     SP
     312/     56E : 7C 00                       adci    ((0+6))>>8; was/256
     312/     570 : BE                          phi     MEMADDR
     312/     571 : =>FALSE                     else
     312/     571 :                                     ldAD    memAddr,SP
     312/     571 : [312]                       endif
     312/     571 : 8B                          glo     R11
     312/     572 : 5E                          str     memAddr
     313/     573 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     314/     573 :                     ;	putxn(x>>4);
     315/     573 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     315/     573 : =>TRUE                      if      ('O'='O')
     315/     573 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     315/     573 : 82                          glo     SP
     315/     574 : FC 06                       adi     ((0+6))#256
     315/     576 : AE                          plo     MEMADDR
     315/     577 : 92                          ghi     SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 30 - 2/23/2013 7:47:57


     315/     578 : 7C 00                       adci    ((0+6))>>8; was/256
     315/     57A : BE                          phi     MEMADDR
     315/     57B : =>FALSE                     else
     315/     57B :                                     ldAD    memAddr,SP
     315/     57B : [315]                       endif
     315/     57B : 0E                          ldn     memAddr
     315/     57C : AB                          plo     R11
     316/     57D : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     316/     57D : F8 00                       ldi     0
     316/     57F : BB                          phi     11
     317/     580 : (MACRO)             	shrI2I R11,4
     317/     580 :                             rept    4
     317/     580 :                             shrI2   R11
     317/     580 :                             endm
     317/     580 :  (MACRO-2)                  shrI2   R11
     317/     580 : 9B                          ghi     R11
     317/     581 : FE                          shl             ;set DF to the sign
     317/     582 : 9B                          ghi     R11     ;get the top byte back
     317/     583 : 76                          shrc            ;shift one bit extending the sign
     317/     584 : BB                          phi     R11
     317/     585 : 8B                          glo     R11
     317/     586 : 76                          shrc
     317/     587 : AB                          plo     R11
     317/     588 :  (MACRO-2)                  shrI2   R11
     317/     588 : 9B                          ghi     R11
     317/     589 : FE                          shl             ;set DF to the sign
     317/     58A : 9B                          ghi     R11     ;get the top byte back
     317/     58B : 76                          shrc            ;shift one bit extending the sign
     317/     58C : BB                          phi     R11
     317/     58D : 8B                          glo     R11
     317/     58E : 76                          shrc
     317/     58F : AB                          plo     R11
     317/     590 :  (MACRO-2)                  shrI2   R11
     317/     590 : 9B                          ghi     R11
     317/     591 : FE                          shl             ;set DF to the sign
     317/     592 : 9B                          ghi     R11     ;get the top byte back
     317/     593 : 76                          shrc            ;shift one bit extending the sign
     317/     594 : BB                          phi     R11
     317/     595 : 8B                          glo     R11
     317/     596 : 76                          shrc
     317/     597 : AB                          plo     R11
     317/     598 :  (MACRO-2)                  shrI2   R11
     317/     598 : 9B                          ghi     R11
     317/     599 : FE                          shl             ;set DF to the sign
     317/     59A : 9B                          ghi     R11     ;get the top byte back
     317/     59B : 76                          shrc            ;shift one bit extending the sign
     317/     59C : BB                          phi     R11
     317/     59D : 8B                          glo     R11
     317/     59E : 76                          shrc
     317/     59F : AB                          plo     R11
     318/     5A0 : (MACRO)             	cpy1 R12,R11
     318/     5A0 : 8B                          glo     R11
     318/     5A1 : AC                          plo     R12
     319/     5A2 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     319/     5A2 : F8 00                       ldi     0
     319/     5A4 : BC                          phi     12
     320/     5A5 : (MACRO)             	Ccall _putxn
     320/     5A5 : D4                          sep     RCALL
     320/     5A6 : 04 AD                       dw      _PUTXN
     321/     5A8 :                     ;	putxn(x & 0x0F);
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 31 - 2/23/2013 7:47:57


     322/     5A8 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     322/     5A8 : =>TRUE                      if      ('O'='O')
     322/     5A8 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     322/     5A8 : 82                          glo     SP
     322/     5A9 : FC 06                       adi     ((0+6))#256
     322/     5AB : AE                          plo     MEMADDR
     322/     5AC : 92                          ghi     SP
     322/     5AD : 7C 00                       adci    ((0+6))>>8; was/256
     322/     5AF : BE                          phi     MEMADDR
     322/     5B0 : =>FALSE                     else
     322/     5B0 :                                     ldAD    memAddr,SP
     322/     5B0 : [322]                       endif
     322/     5B0 : 0E                          ldn     memAddr
     322/     5B1 : AB                          plo     R11
     323/     5B2 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     323/     5B2 : F8 00                       ldi     0
     323/     5B4 : BB                          phi     11
     324/     5B5 : (MACRO)             	alu2I R11,R11,15,ani,ani
     324/     5B5 : 8B                          glo     R11
     324/     5B6 : FA 0F                       ANI     (15)#256
     324/     5B8 : AB                          plo     R11
     324/     5B9 : 9B                          ghi     R11
     324/     5BA : FA 00                       ANI     (15)>>8; was/256
     324/     5BC : BB                          phi     R11
     325/     5BD :                     	;removed ?	cpy2 R11,R11
     326/     5BD : (MACRO)             	cpy1 R12,R11
     326/     5BD : 8B                          glo     R11
     326/     5BE : AC                          plo     R12
     327/     5BF : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     327/     5BF : F8 00                       ldi     0
     327/     5C1 : BC                          phi     12
     328/     5C2 : (MACRO)             	Ccall _putxn
     328/     5C2 : D4                          sep     RCALL
     328/     5C3 : 04 AD                       dw      _PUTXN
     329/     5C5 :                     ;}
     330/     5C5 :                     L40:
     331/     5C5 : (MACRO)             	release 4
     331/     5C5 :                     ;for release we adjust the low byte first 
     331/     5C5 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     331/     5C5 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     331/     5C5 : 82                          glo     SP
     331/     5C6 : FC 04                       ADI     (4)#256
     331/     5C8 : A2                          plo     SP
     331/     5C9 : 92                          ghi     SP
     331/     5CA : 7C 00                       ADCI     (4)>>8; was/256
     331/     5CC : B2                          phi     SP
     332/     5CD : (MACRO)             	Cretn
     332/     5CD : D5                          sep     RRET
     333/     5CE :                     
     334/     5CE :                     _printf:
     335/     5CE : (MACRO)             	reserve 14
     335/     5CE :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     335/     5CE :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     335/     5CE : 82                          glo sp          ;grab low byte of stack pointer
     335/     5CF : FF 0E                       smi 14&255 ;claculate new low byte
     335/     5D1 : AE                          plo memAddr     ;save it for a moment
     335/     5D2 : 92                          ghi sp          ;grab high byte
     335/     5D3 : 7F 00                       smbi (14>>8)&255 ;calculate the new page
     335/     5D5 : B2                          phi sp          ;adjust page first
     335/     5D6 : 8E                          glo memAddr     ;get new low byte
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 32 - 2/23/2013 7:47:57


     335/     5D7 : A2                          plo sp          ;finish adjusting the stack pointer
     336/     5D8 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     336/     5D8 : 82                          glo     SP
     336/     5D9 : FC 09                       ADI     ((9))#256
     336/     5DB : AE                          plo     MEMADDR
     336/     5DC : 92                          ghi     SP
     336/     5DD : 7C 00                       ADCI     ((9))>>8; was/256
     336/     5DF : BE                          phi     MEMADDR
     337/     5E0 : EE                  	sex	memaddr
     338/     5E1 : (MACRO)             	savmi r0
     338/     5E1 : 80                          glo     R0
     338/     5E2 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     338/     5E3 : 90                          ghi     R0
     338/     5E4 : 73                          stxd            ;and it end up where needed to do the next one
     339/     5E5 : (MACRO)             	savmi r1
     339/     5E5 : 81                          glo     R1
     339/     5E6 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     339/     5E7 : 91                          ghi     R1
     339/     5E8 : 73                          stxd            ;and it end up where needed to do the next one
     340/     5E9 : (MACRO)             	savmi r7
     340/     5E9 : 87                          glo     R7
     340/     5EA : 73                          stxd            ;R7 x is primed to the spot to start the saves
     340/     5EB : 97                          ghi     R7
     340/     5EC : 73                          stxd            ;and it end up where needed to do the next one
     341/     5ED : E2                  	sex sp
     342/     5EE : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     342/     5EE : =>TRUE                      if      ('O'='O')
     342/     5EE :  (MACRO-2)                          ldAX    memAddr,SP,(16)
     342/     5EE : 82                          glo     SP
     342/     5EF : FC 10                       adi     ((16))#256
     342/     5F1 : AE                          plo     MEMADDR
     342/     5F2 : 92                          ghi     SP
     342/     5F3 : 7C 00                       adci    ((16))>>8; was/256
     342/     5F5 : BE                          phi     MEMADDR
     342/     5F6 : =>FALSE                     else
     342/     5F6 :                                     ldAD    memAddr,SP
     342/     5F6 : [342]                       endif
     342/     5F6 : 9C                          ghi     R12
     342/     5F7 : 5E                          str     memAddr
     342/     5F8 : 1E                          inc     memAddr
     342/     5F9 : 8C                          glo     R12
     342/     5FA : 5E                          str     memAddr
     343/     5FB : (MACRO)             	st2 r13,'O',sp,(18); flag2
     343/     5FB : =>TRUE                      if      ('O'='O')
     343/     5FB :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     343/     5FB : 82                          glo     SP
     343/     5FC : FC 12                       adi     ((18))#256
     343/     5FE : AE                          plo     MEMADDR
     343/     5FF : 92                          ghi     SP
     343/     600 : 7C 00                       adci    ((18))>>8; was/256
     343/     602 : BE                          phi     MEMADDR
     343/     603 : =>FALSE                     else
     343/     603 :                                     ldAD    memAddr,SP
     343/     603 : [343]                       endif
     343/     603 : 9D                          ghi     R13
     343/     604 : 5E                          str     memAddr
     343/     605 : 1E                          inc     memAddr
     343/     606 : 8D                          glo     R13
     343/     607 : 5E                          str     memAddr
     344/     608 :                     ;void printf(char *ptr,...){ //limited implementation of printf
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 33 - 2/23/2013 7:47:57


     345/     608 :                     ;	int argslot=0;	//used to align longs
     346/     608 : (MACRO)             	ldaD R0,0
     346/     608 : F8 00                       ldi     (0)&255
     346/     60A : A0                          plo     R0
     346/     60B : F8 00                       ldi     (0)>>8; was/256
     346/     60D : B0                          phi     R0
     347/     60E :                     ;	int * this=(int *)&ptr;
     348/     60E : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     348/     60E : =>TRUE                      if      ('O'='O')
     348/     60E :  (MACRO-2)                          ldAX    R1,SP,(0+16)
     348/     60E : 82                          glo     SP
     348/     60F : FC 10                       adi     ((0+16))#256
     348/     611 : A1                          plo     R1
     348/     612 : 92                          ghi     SP
     348/     613 : 7C 00                       adci    ((0+16))>>8; was/256
     348/     615 : B1                          phi     R1
     348/     616 : =>FALSE                     else
     348/     616 :                                     ldAD    R1,SP
     348/     616 : [348]                       endif
     349/     616 :                     ;	this++; argslot++; //advance argument pointer and slot #
     350/     616 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     350/     616 : =>TRUE                      if      ('O'='O')
     350/     616 :  (MACRO-2)                          ldAX    R1,R1,(2)
     350/     616 : 81                          glo     R1
     350/     617 : FC 02                       adi     ((2))#256
     350/     619 : A1                          plo     R1
     350/     61A : 91                          ghi     R1
     350/     61B : 7C 00                       adci    ((2))>>8; was/256
     350/     61D : B1                          phi     R1
     350/     61E : =>FALSE                     else
     350/     61E :                                     ldAD    R1,R1
     350/     61E : [350]                       endif
     351/     61E : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     351/     61E : =>TRUE                      if      ('O'='O')
     351/     61E :  (MACRO-2)                          ldAX    R0,R0,(1)
     351/     61E : 80                          glo     R0
     351/     61F : FC 01                       adi     ((1))#256
     351/     621 : A0                          plo     R0
     351/     622 : 90                          ghi     R0
     351/     623 : 7C 00                       adci    ((1))>>8; was/256
     351/     625 : B0                          phi     R0
     351/     626 : =>FALSE                     else
     351/     626 :                                     ldAD    R0,R0
     351/     626 : [351]                       endif
     352/     626 : C0 0A 3E            	lbr L43
     353/     629 :                     L42:
     354/     629 :                     ;    while(*ptr) {
     355/     629 :                     ;		c=*ptr++;
     356/     629 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     356/     629 : =>TRUE                      if      ('O'='O')
     356/     629 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     356/     629 : 82                          glo     SP
     356/     62A : FC 10                       adi     ((0+16))#256
     356/     62C : AE                          plo     MEMADDR
     356/     62D : 92                          ghi     SP
     356/     62E : 7C 00                       adci    ((0+16))>>8; was/256
     356/     630 : BE                          phi     MEMADDR
     356/     631 : =>FALSE                     else
     356/     631 :                                     ldAD    memAddr,SP
     356/     631 : [356]                       endif
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 34 - 2/23/2013 7:47:57


     356/     631 : 4E                          lda     memAddr
     356/     632 : BB                          phi     R11
     356/     633 : 0E                          ldn     memAddr
     356/     634 : AB                          plo     R11
     357/     635 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     357/     635 : =>TRUE                      if      ('O'='O')
     357/     635 :  (MACRO-2)                          ldAX    R10,R11,(1)
     357/     635 : 8B                          glo     R11
     357/     636 : FC 01                       adi     ((1))#256
     357/     638 : AA                          plo     R10
     357/     639 : 9B                          ghi     R11
     357/     63A : 7C 00                       adci    ((1))>>8; was/256
     357/     63C : BA                          phi     R10
     357/     63D : =>FALSE                     else
     357/     63D :                                     ldAD    R10,R11
     357/     63D : [357]                       endif
     358/     63D : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     358/     63D : =>TRUE                      if      ('O'='O')
     358/     63D :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     358/     63D : 82                          glo     SP
     358/     63E : FC 10                       adi     ((0+16))#256
     358/     640 : AE                          plo     MEMADDR
     358/     641 : 92                          ghi     SP
     358/     642 : 7C 00                       adci    ((0+16))>>8; was/256
     358/     644 : BE                          phi     MEMADDR
     358/     645 : =>FALSE                     else
     358/     645 :                                     ldAD    memAddr,SP
     358/     645 : [358]                       endif
     358/     645 : 9A                          ghi     R10
     358/     646 : 5E                          str     memAddr
     358/     647 : 1E                          inc     memAddr
     358/     648 : 8A                          glo     R10
     358/     649 : 5E                          str     memAddr
     359/     64A : (MACRO)             	ld1 R7,'O',R11,0
     359/     64A : =>TRUE                      if      ('O'='O')
     359/     64A :  (MACRO-2)                          ldAX    memAddr,R11,0
     359/     64A : 8B                          glo     R11
     359/     64B : FC 00                       adi     (0)#256
     359/     64D : AE                          plo     MEMADDR
     359/     64E : 9B                          ghi     R11
     359/     64F : 7C 00                       adci    (0)>>8; was/256
     359/     651 : BE                          phi     MEMADDR
     359/     652 : =>FALSE                     else
     359/     652 :                                     ldAD    memAddr,R11
     359/     652 : [359]                       endif
     359/     652 : 0E                          ldn     memAddr
     359/     653 : A7                          plo     R7
     360/     654 :                     ;		if (c!='%'){
     361/     654 : (MACRO)             	cpy1 R11,R7
     361/     654 : 87                          glo     R7
     361/     655 : AB                          plo     R11
     362/     656 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     362/     656 : F8 00                       ldi     0
     362/     658 : BB                          phi     11
     363/     659 : (MACRO)             	jeqU2I r11,37,L45
     363/     659 : 8B                          glo     R11
     363/     65A : FF 25                       smi     (37)#256
     363/     65C : CA 06 65                    lbnz    $$nobr
     363/     65F : 9B                          ghi     R11
     363/     660 : 7F 00                       smbi    (37)>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 35 - 2/23/2013 7:47:57


     363/     662 : C2 06 70                    lbz     L45
     363/     665 :                     $$nobr:
     364/     665 :                     ;			putc(c);
     365/     665 : (MACRO)             	cpy1 R12,R7
     365/     665 : 87                          glo     R7
     365/     666 : AC                          plo     R12
     366/     667 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     366/     667 : F8 00                       ldi     0
     366/     669 : BC                          phi     12
     367/     66A : (MACRO)             	Ccall _putc
     367/     66A : D4                          sep     RCALL
     367/     66B : 10 40                       dw      _PUTC
     368/     66D :                     ;		} else{
     369/     66D : C0 0A 3E            	lbr L46
     370/     670 :                     L45:
     371/     670 :                     ;			c=*ptr++;
     372/     670 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     372/     670 : =>TRUE                      if      ('O'='O')
     372/     670 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     372/     670 : 82                          glo     SP
     372/     671 : FC 10                       adi     ((0+16))#256
     372/     673 : AE                          plo     MEMADDR
     372/     674 : 92                          ghi     SP
     372/     675 : 7C 00                       adci    ((0+16))>>8; was/256
     372/     677 : BE                          phi     MEMADDR
     372/     678 : =>FALSE                     else
     372/     678 :                                     ldAD    memAddr,SP
     372/     678 : [372]                       endif
     372/     678 : 4E                          lda     memAddr
     372/     679 : BB                          phi     R11
     372/     67A : 0E                          ldn     memAddr
     372/     67B : AB                          plo     R11
     373/     67C : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     373/     67C : =>TRUE                      if      ('O'='O')
     373/     67C :  (MACRO-2)                          ldAX    R10,R11,(1)
     373/     67C : 8B                          glo     R11
     373/     67D : FC 01                       adi     ((1))#256
     373/     67F : AA                          plo     R10
     373/     680 : 9B                          ghi     R11
     373/     681 : 7C 00                       adci    ((1))>>8; was/256
     373/     683 : BA                          phi     R10
     373/     684 : =>FALSE                     else
     373/     684 :                                     ldAD    R10,R11
     373/     684 : [373]                       endif
     374/     684 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     374/     684 : =>TRUE                      if      ('O'='O')
     374/     684 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     374/     684 : 82                          glo     SP
     374/     685 : FC 10                       adi     ((0+16))#256
     374/     687 : AE                          plo     MEMADDR
     374/     688 : 92                          ghi     SP
     374/     689 : 7C 00                       adci    ((0+16))>>8; was/256
     374/     68B : BE                          phi     MEMADDR
     374/     68C : =>FALSE                     else
     374/     68C :                                     ldAD    memAddr,SP
     374/     68C : [374]                       endif
     374/     68C : 9A                          ghi     R10
     374/     68D : 5E                          str     memAddr
     374/     68E : 1E                          inc     memAddr
     374/     68F : 8A                          glo     R10
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 36 - 2/23/2013 7:47:57


     374/     690 : 5E                          str     memAddr
     375/     691 : (MACRO)             	ld1 R7,'O',R11,0
     375/     691 : =>TRUE                      if      ('O'='O')
     375/     691 :  (MACRO-2)                          ldAX    memAddr,R11,0
     375/     691 : 8B                          glo     R11
     375/     692 : FC 00                       adi     (0)#256
     375/     694 : AE                          plo     MEMADDR
     375/     695 : 9B                          ghi     R11
     375/     696 : 7C 00                       adci    (0)>>8; was/256
     375/     698 : BE                          phi     MEMADDR
     375/     699 : =>FALSE                     else
     375/     699 :                                     ldAD    memAddr,R11
     375/     699 : [375]                       endif
     375/     699 : 0E                          ldn     memAddr
     375/     69A : A7                          plo     R7
     376/     69B :                     ;			switch (c){
     377/     69B : (MACRO)             	cpy1 R11,R7
     377/     69B : 87                          glo     R7
     377/     69C : AB                          plo     R11
     378/     69D : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     378/     69D : F8 00                       ldi     0
     378/     69F : BB                          phi     11
     379/     6A0 : (MACRO)             	st2 R11,'O',sp,(-5+16)
     379/     6A0 : =>TRUE                      if      ('O'='O')
     379/     6A0 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     379/     6A0 : 82                          glo     SP
     379/     6A1 : FC 0B                       adi     ((-5+16))#256
     379/     6A3 : AE                          plo     MEMADDR
     379/     6A4 : 92                          ghi     SP
     379/     6A5 : 7C 00                       adci    ((-5+16))>>8; was/256
     379/     6A7 : BE                          phi     MEMADDR
     379/     6A8 : =>FALSE                     else
     379/     6A8 :                                     ldAD    memAddr,SP
     379/     6A8 : [379]                       endif
     379/     6A8 : 9B                          ghi     R11
     379/     6A9 : 5E                          str     memAddr
     379/     6AA : 1E                          inc     memAddr
     379/     6AB : 8B                          glo     R11
     379/     6AC : 5E                          str     memAddr
     380/     6AD : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     380/     6AD : =>TRUE                      if      ('O'='O')
     380/     6AD :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     380/     6AD : 82                          glo     SP
     380/     6AE : FC 0B                       adi     ((-5+16))#256
     380/     6B0 : AE                          plo     MEMADDR
     380/     6B1 : 92                          ghi     SP
     380/     6B2 : 7C 00                       adci    ((-5+16))>>8; was/256
     380/     6B4 : BE                          phi     MEMADDR
     380/     6B5 : =>FALSE                     else
     380/     6B5 :                                     ldAD    memAddr,SP
     380/     6B5 : [380]                       endif
     380/     6B5 : 4E                          lda     memAddr
     380/     6B6 : BB                          phi     R11
     380/     6B7 : 0E                          ldn     memAddr
     380/     6B8 : AB                          plo     R11
     381/     6B9 : (MACRO)             	jeqU2I r11,105,L50
     381/     6B9 : 8B                          glo     R11
     381/     6BA : FF 69                       smi     (105)#256
     381/     6BC : CA 06 C5                    lbnz    $$nobr
     381/     6BF : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 37 - 2/23/2013 7:47:57


     381/     6C0 : 7F 00                       smbi    (105)>>8; was/256
     381/     6C2 : C2 07 A3                    lbz     L50
     381/     6C5 :                     $$nobr:
     382/     6C5 : (MACRO)             	ldaD R10,108
     382/     6C5 : F8 6C                       ldi     (108)&255
     382/     6C7 : AA                          plo     R10
     382/     6C8 : F8 00                       ldi     (108)>>8; was/256
     382/     6CA : BA                          phi     R10
     383/     6CB : (MACRO)             	jeqI2 r11,r10,L54
     383/     6CB : 22                          dec     sp
     383/     6CC : 8A                          glo     R10
     383/     6CD : 52                          str     sp
     383/     6CE : 8B                          glo     R11
     383/     6CF : F7                          sm
     383/     6D0 : 12                          inc     sp
     383/     6D1 : CA 06 DD                    lbnz    $$nobr
     383/     6D4 : 22                          dec     sp
     383/     6D5 : 9A                          ghi     R10
     383/     6D6 : 52                          str     sp
     383/     6D7 : 9B                          ghi     R11
     383/     6D8 : 77                          smb
     383/     6D9 : 12                          inc     sp
     383/     6DA : C2 08 95                    lbz     L54
     383/     6DD :                     $$nobr:
     384/     6DD : (MACRO)             	jcI2 r10,r11,lbnf,L62 ;GT is reversed operands from LT
     384/     6DD : 22                          dec     sp ;make a work area
     384/     6DE : 8B                          glo     R11
     384/     6DF : 52                          str     sp 
     384/     6E0 : 8A                          glo     R10
     384/     6E1 : F7                          sm
     384/     6E2 : 9B                          ghi     R11
     384/     6E3 : 52                          str     sp
     384/     6E4 : 9A                          ghi     R10
     384/     6E5 : 77                          smb          ;that's a standard signed subtraction
     384/     6E6 : 9A                          ghi     R10 ;
     384/     6E7 : F3                          xor           ;sets the top bit if the signs are different
     384/     6E8 : 12                          inc     sp ;release the work area
     384/     6E9 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     384/     6EA : C7                          lsnf    ;bypass the flip if signs were the same
     384/     6EB : FB 01                       xri     01     ;invert original df if signs were different
     384/     6ED : 76                          shrc           ;put it back in df
     384/     6EE : CB 07 50                    LBNF    L62  ;execute 
     385/     6F1 :                     L61:
     386/     6F1 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     386/     6F1 : =>TRUE                      if      ('O'='O')
     386/     6F1 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     386/     6F1 : 82                          glo     SP
     386/     6F2 : FC 0B                       adi     ((-5+16))#256
     386/     6F4 : AE                          plo     MEMADDR
     386/     6F5 : 92                          ghi     SP
     386/     6F6 : 7C 00                       adci    ((-5+16))>>8; was/256
     386/     6F8 : BE                          phi     MEMADDR
     386/     6F9 : =>FALSE                     else
     386/     6F9 :                                     ldAD    memAddr,SP
     386/     6F9 : [386]                       endif
     386/     6F9 : 4E                          lda     memAddr
     386/     6FA : BB                          phi     R11
     386/     6FB : 0E                          ldn     memAddr
     386/     6FC : AB                          plo     R11
     387/     6FD : (MACRO)             	ldaD R10,88
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 38 - 2/23/2013 7:47:57


     387/     6FD : F8 58                       ldi     (88)&255
     387/     6FF : AA                          plo     R10
     387/     700 : F8 00                       ldi     (88)>>8; was/256
     387/     702 : BA                          phi     R10
     388/     703 : (MACRO)             	jeqI2 r11,r10,L53
     388/     703 : 22                          dec     sp
     388/     704 : 8A                          glo     R10
     388/     705 : 52                          str     sp
     388/     706 : 8B                          glo     R11
     388/     707 : F7                          sm
     388/     708 : 12                          inc     sp
     388/     709 : CA 07 15                    lbnz    $$nobr
     388/     70C : 22                          dec     sp
     388/     70D : 9A                          ghi     R10
     388/     70E : 52                          str     sp
     388/     70F : 9B                          ghi     R11
     388/     710 : 77                          smb
     388/     711 : 12                          inc     sp
     388/     712 : C2 08 1E                    lbz     L53
     388/     715 :                     $$nobr:
     389/     715 : (MACRO)             	jcI2 r11,r10,lbnf,L47; LT=lbnf i.e. subtract B from A and jump if borrow 
     389/     715 : 22                          dec     sp ;make a work area
     389/     716 : 8A                          glo     R10
     389/     717 : 52                          str     sp 
     389/     718 : 8B                          glo     R11
     389/     719 : F7                          sm
     389/     71A : 9A                          ghi     R10
     389/     71B : 52                          str     sp
     389/     71C : 9B                          ghi     R11
     389/     71D : 77                          smb          ;that's a standard signed subtraction
     389/     71E : 9B                          ghi     R11 ;
     389/     71F : F3                          xor           ;sets the top bit if the signs are different
     389/     720 : 12                          inc     sp ;release the work area
     389/     721 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     389/     722 : C7                          lsnf    ;bypass the flip if signs were the same
     389/     723 : FB 01                       xri     01     ;invert original df if signs were different
     389/     725 : 76                          shrc           ;put it back in df
     389/     726 : CB 0A 2D                    LBNF    L47  ;execute 
     390/     729 :                     L63:
     391/     729 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     391/     729 : =>TRUE                      if      ('O'='O')
     391/     729 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     391/     729 : 82                          glo     SP
     391/     72A : FC 0B                       adi     ((-5+16))#256
     391/     72C : AE                          plo     MEMADDR
     391/     72D : 92                          ghi     SP
     391/     72E : 7C 00                       adci    ((-5+16))>>8; was/256
     391/     730 : BE                          phi     MEMADDR
     391/     731 : =>FALSE                     else
     391/     731 :                                     ldAD    memAddr,SP
     391/     731 : [391]                       endif
     391/     731 : 4E                          lda     memAddr
     391/     732 : BB                          phi     R11
     391/     733 : 0E                          ldn     memAddr
     391/     734 : AB                          plo     R11
     392/     735 : (MACRO)             	jeqU2I r11,99,L52
     392/     735 : 8B                          glo     R11
     392/     736 : FF 63                       smi     (99)#256
     392/     738 : CA 07 41                    lbnz    $$nobr
     392/     73B : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 39 - 2/23/2013 7:47:57


     392/     73C : 7F 00                       smbi    (99)>>8; was/256
     392/     73E : C2 07 F3                    lbz     L52
     392/     741 :                     $$nobr:
     393/     741 : (MACRO)             	jeqU2I r11,100,L50
     393/     741 : 8B                          glo     R11
     393/     742 : FF 64                       smi     (100)#256
     393/     744 : CA 07 4D                    lbnz    $$nobr
     393/     747 : 9B                          ghi     R11
     393/     748 : 7F 00                       smbi    (100)>>8; was/256
     393/     74A : C2 07 A3                    lbz     L50
     393/     74D :                     $$nobr:
     394/     74D : C0 0A 2D            	lbr L47
     395/     750 :                     L62:
     396/     750 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     396/     750 : =>TRUE                      if      ('O'='O')
     396/     750 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     396/     750 : 82                          glo     SP
     396/     751 : FC 0B                       adi     ((-5+16))#256
     396/     753 : AE                          plo     MEMADDR
     396/     754 : 92                          ghi     SP
     396/     755 : 7C 00                       adci    ((-5+16))>>8; was/256
     396/     757 : BE                          phi     MEMADDR
     396/     758 : =>FALSE                     else
     396/     758 :                                     ldAD    memAddr,SP
     396/     758 : [396]                       endif
     396/     758 : 4E                          lda     memAddr
     396/     759 : BB                          phi     R11
     396/     75A : 0E                          ldn     memAddr
     396/     75B : AB                          plo     R11
     397/     75C : (MACRO)             	ldaD R10,115
     397/     75C : F8 73                       ldi     (115)&255
     397/     75E : AA                          plo     R10
     397/     75F : F8 00                       ldi     (115)>>8; was/256
     397/     761 : BA                          phi     R10
     398/     762 : (MACRO)             	jeqI2 r11,r10,L51
     398/     762 : 22                          dec     sp
     398/     763 : 8A                          glo     R10
     398/     764 : 52                          str     sp
     398/     765 : 8B                          glo     R11
     398/     766 : F7                          sm
     398/     767 : 12                          inc     sp
     398/     768 : CA 07 74                    lbnz    $$nobr
     398/     76B : 22                          dec     sp
     398/     76C : 9A                          ghi     R10
     398/     76D : 52                          str     sp
     398/     76E : 9B                          ghi     R11
     398/     76F : 77                          smb
     398/     770 : 12                          inc     sp
     398/     771 : C2 07 C9                    lbz     L51
     398/     774 :                     $$nobr:
     399/     774 : (MACRO)             	jcI2 r11,r10,lbnf,L47; LT=lbnf i.e. subtract B from A and jump if borrow 
     399/     774 : 22                          dec     sp ;make a work area
     399/     775 : 8A                          glo     R10
     399/     776 : 52                          str     sp 
     399/     777 : 8B                          glo     R11
     399/     778 : F7                          sm
     399/     779 : 9A                          ghi     R10
     399/     77A : 52                          str     sp
     399/     77B : 9B                          ghi     R11
     399/     77C : 77                          smb          ;that's a standard signed subtraction
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 40 - 2/23/2013 7:47:57


     399/     77D : 9B                          ghi     R11 ;
     399/     77E : F3                          xor           ;sets the top bit if the signs are different
     399/     77F : 12                          inc     sp ;release the work area
     399/     780 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     399/     781 : C7                          lsnf    ;bypass the flip if signs were the same
     399/     782 : FB 01                       xri     01     ;invert original df if signs were different
     399/     784 : 76                          shrc           ;put it back in df
     399/     785 : CB 0A 2D                    LBNF    L47  ;execute 
     400/     788 :                     L64:
     401/     788 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     401/     788 : =>TRUE                      if      ('O'='O')
     401/     788 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     401/     788 : 82                          glo     SP
     401/     789 : FC 0B                       adi     ((-5+16))#256
     401/     78B : AE                          plo     MEMADDR
     401/     78C : 92                          ghi     SP
     401/     78D : 7C 00                       adci    ((-5+16))>>8; was/256
     401/     78F : BE                          phi     MEMADDR
     401/     790 : =>FALSE                     else
     401/     790 :                                     ldAD    memAddr,SP
     401/     790 : [401]                       endif
     401/     790 : 4E                          lda     memAddr
     401/     791 : BB                          phi     R11
     401/     792 : 0E                          ldn     memAddr
     401/     793 : AB                          plo     R11
     402/     794 : (MACRO)             	jeqU2I r11,120,L53
     402/     794 : 8B                          glo     R11
     402/     795 : FF 78                       smi     (120)#256
     402/     797 : CA 07 A0                    lbnz    $$nobr
     402/     79A : 9B                          ghi     R11
     402/     79B : 7F 00                       smbi    (120)>>8; was/256
     402/     79D : C2 08 1E                    lbz     L53
     402/     7A0 :                     $$nobr:
     403/     7A0 : C0 0A 2D            	lbr L47
     404/     7A3 :                     L50:
     405/     7A3 :                     ;					printint(*this++);
     406/     7A3 : (MACRO)             	cpy2 R11,R1
     406/     7A3 : 81                          glo     R1
     406/     7A4 : AB                          plo     R11
     406/     7A5 : 91                          ghi     R1
     406/     7A6 : BB                          phi     R11
     407/     7A7 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     407/     7A7 : =>TRUE                      if      ('O'='O')
     407/     7A7 :  (MACRO-2)                          ldAX    R1,R11,(2)
     407/     7A7 : 8B                          glo     R11
     407/     7A8 : FC 02                       adi     ((2))#256
     407/     7AA : A1                          plo     R1
     407/     7AB : 9B                          ghi     R11
     407/     7AC : 7C 00                       adci    ((2))>>8; was/256
     407/     7AE : B1                          phi     R1
     407/     7AF : =>FALSE                     else
     407/     7AF :                                     ldAD    R1,R11
     407/     7AF : [407]                       endif
     408/     7AF : (MACRO)             	ld2 R12,'O',R11,0
     408/     7AF : =>TRUE                      if      ('O'='O')
     408/     7AF :  (MACRO-2)                          ldAX    memAddr,R11,0
     408/     7AF : 8B                          glo     R11
     408/     7B0 : FC 00                       adi     (0)#256
     408/     7B2 : AE                          plo     MEMADDR
     408/     7B3 : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 41 - 2/23/2013 7:47:57


     408/     7B4 : 7C 00                       adci    (0)>>8; was/256
     408/     7B6 : BE                          phi     MEMADDR
     408/     7B7 : =>FALSE                     else
     408/     7B7 :                                     ldAD    memAddr,R11
     408/     7B7 : [408]                       endif
     408/     7B7 : 4E                          lda     memAddr
     408/     7B8 : BC                          phi     R12
     408/     7B9 : 0E                          ldn     memAddr
     408/     7BA : AC                          plo     R12
     409/     7BB : (MACRO)             	Ccall _printint
     409/     7BB : D4                          sep     RCALL
     409/     7BC : 04 0B                       dw      _PRINTINT
     410/     7BE :                     ;					argslot+=1; //next argument slot
     411/     7BE : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     411/     7BE : =>TRUE                      if      ('O'='O')
     411/     7BE :  (MACRO-2)                          ldAX    R0,R0,(1)
     411/     7BE : 80                          glo     R0
     411/     7BF : FC 01                       adi     ((1))#256
     411/     7C1 : A0                          plo     R0
     411/     7C2 : 90                          ghi     R0
     411/     7C3 : 7C 00                       adci    ((1))>>8; was/256
     411/     7C5 : B0                          phi     R0
     411/     7C6 : =>FALSE                     else
     411/     7C6 :                                     ldAD    R0,R0
     411/     7C6 : [411]                       endif
     412/     7C6 :                     ;					break;
     413/     7C6 : C0 0A 3E            	lbr L48
     414/     7C9 :                     L51:
     415/     7C9 :                     ;					printstr((char*) *this++);
     416/     7C9 : (MACRO)             	cpy2 R11,R1
     416/     7C9 : 81                          glo     R1
     416/     7CA : AB                          plo     R11
     416/     7CB : 91                          ghi     R1
     416/     7CC : BB                          phi     R11
     417/     7CD : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     417/     7CD : =>TRUE                      if      ('O'='O')
     417/     7CD :  (MACRO-2)                          ldAX    R1,R11,(2)
     417/     7CD : 8B                          glo     R11
     417/     7CE : FC 02                       adi     ((2))#256
     417/     7D0 : A1                          plo     R1
     417/     7D1 : 9B                          ghi     R11
     417/     7D2 : 7C 00                       adci    ((2))>>8; was/256
     417/     7D4 : B1                          phi     R1
     417/     7D5 : =>FALSE                     else
     417/     7D5 :                                     ldAD    R1,R11
     417/     7D5 : [417]                       endif
     418/     7D5 : (MACRO)             	ld2 R11,'O',R11,0
     418/     7D5 : =>TRUE                      if      ('O'='O')
     418/     7D5 :  (MACRO-2)                          ldAX    memAddr,R11,0
     418/     7D5 : 8B                          glo     R11
     418/     7D6 : FC 00                       adi     (0)#256
     418/     7D8 : AE                          plo     MEMADDR
     418/     7D9 : 9B                          ghi     R11
     418/     7DA : 7C 00                       adci    (0)>>8; was/256
     418/     7DC : BE                          phi     MEMADDR
     418/     7DD : =>FALSE                     else
     418/     7DD :                                     ldAD    memAddr,R11
     418/     7DD : [418]                       endif
     418/     7DD : 4E                          lda     memAddr
     418/     7DE : BB                          phi     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 42 - 2/23/2013 7:47:57


     418/     7DF : 0E                          ldn     memAddr
     418/     7E0 : AB                          plo     R11
     419/     7E1 : (MACRO)             	cpy2 R12,R11
     419/     7E1 : 8B                          glo     R11
     419/     7E2 : AC                          plo     R12
     419/     7E3 : 9B                          ghi     R11
     419/     7E4 : BC                          phi     R12
     420/     7E5 : (MACRO)             	Ccall _printstr
     420/     7E5 : D4                          sep     RCALL
     420/     7E6 : 00 B0                       dw      _PRINTSTR
     421/     7E8 :                     ;					argslot+=1; //next argument slot
     422/     7E8 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     422/     7E8 : =>TRUE                      if      ('O'='O')
     422/     7E8 :  (MACRO-2)                          ldAX    R0,R0,(1)
     422/     7E8 : 80                          glo     R0
     422/     7E9 : FC 01                       adi     ((1))#256
     422/     7EB : A0                          plo     R0
     422/     7EC : 90                          ghi     R0
     422/     7ED : 7C 00                       adci    ((1))>>8; was/256
     422/     7EF : B0                          phi     R0
     422/     7F0 : =>FALSE                     else
     422/     7F0 :                                     ldAD    R0,R0
     422/     7F0 : [422]                       endif
     423/     7F0 :                     ;					break;
     424/     7F0 : C0 0A 3E            	lbr L48
     425/     7F3 :                     L52:
     426/     7F3 :                     ;					putc((unsigned int) *this++);
     427/     7F3 : (MACRO)             	cpy2 R11,R1
     427/     7F3 : 81                          glo     R1
     427/     7F4 : AB                          plo     R11
     427/     7F5 : 91                          ghi     R1
     427/     7F6 : BB                          phi     R11
     428/     7F7 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     428/     7F7 : =>TRUE                      if      ('O'='O')
     428/     7F7 :  (MACRO-2)                          ldAX    R1,R11,(2)
     428/     7F7 : 8B                          glo     R11
     428/     7F8 : FC 02                       adi     ((2))#256
     428/     7FA : A1                          plo     R1
     428/     7FB : 9B                          ghi     R11
     428/     7FC : 7C 00                       adci    ((2))>>8; was/256
     428/     7FE : B1                          phi     R1
     428/     7FF : =>FALSE                     else
     428/     7FF :                                     ldAD    R1,R11
     428/     7FF : [428]                       endif
     429/     7FF : (MACRO)             	ld2 R11,'O',R11,0
     429/     7FF : =>TRUE                      if      ('O'='O')
     429/     7FF :  (MACRO-2)                          ldAX    memAddr,R11,0
     429/     7FF : 8B                          glo     R11
     429/     800 : FC 00                       adi     (0)#256
     429/     802 : AE                          plo     MEMADDR
     429/     803 : 9B                          ghi     R11
     429/     804 : 7C 00                       adci    (0)>>8; was/256
     429/     806 : BE                          phi     MEMADDR
     429/     807 : =>FALSE                     else
     429/     807 :                                     ldAD    memAddr,R11
     429/     807 : [429]                       endif
     429/     807 : 4E                          lda     memAddr
     429/     808 : BB                          phi     R11
     429/     809 : 0E                          ldn     memAddr
     429/     80A : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 43 - 2/23/2013 7:47:57


     430/     80B : (MACRO)             	cpy1 R12,R11
     430/     80B : 8B                          glo     R11
     430/     80C : AC                          plo     R12
     431/     80D : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     431/     80D : F8 00                       ldi     0
     431/     80F : BC                          phi     12
     432/     810 : (MACRO)             	Ccall _putc
     432/     810 : D4                          sep     RCALL
     432/     811 : 10 40                       dw      _PUTC
     433/     813 :                     ;					argslot+=1; //next argument slot
     434/     813 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     434/     813 : =>TRUE                      if      ('O'='O')
     434/     813 :  (MACRO-2)                          ldAX    R0,R0,(1)
     434/     813 : 80                          glo     R0
     434/     814 : FC 01                       adi     ((1))#256
     434/     816 : A0                          plo     R0
     434/     817 : 90                          ghi     R0
     434/     818 : 7C 00                       adci    ((1))>>8; was/256
     434/     81A : B0                          phi     R0
     434/     81B : =>FALSE                     else
     434/     81B :                                     ldAD    R0,R0
     434/     81B : [434]                       endif
     435/     81B :                     ;					break;
     436/     81B : C0 0A 3E            	lbr L48
     437/     81E :                     L53:
     438/     81E :                     ;					putx(((unsigned int) *this)>>8);
     439/     81E : (MACRO)             	ld2 R11,'O',R1,0
     439/     81E : =>TRUE                      if      ('O'='O')
     439/     81E :  (MACRO-2)                          ldAX    memAddr,R1,0
     439/     81E : 81                          glo     R1
     439/     81F : FC 00                       adi     (0)#256
     439/     821 : AE                          plo     MEMADDR
     439/     822 : 91                          ghi     R1
     439/     823 : 7C 00                       adci    (0)>>8; was/256
     439/     825 : BE                          phi     MEMADDR
     439/     826 : =>FALSE                     else
     439/     826 :                                     ldAD    memAddr,R1
     439/     826 : [439]                       endif
     439/     826 : 4E                          lda     memAddr
     439/     827 : BB                          phi     R11
     439/     828 : 0E                          ldn     memAddr
     439/     829 : AB                          plo     R11
     440/     82A : (MACRO)             	shrU2I R11,8
     440/     82A :                             rept    8
     440/     82A :                             shrU2   R11
     440/     82A :                             endm
     440/     82A :  (MACRO-2)                  shrU2   R11
     440/     82A : 9B                          ghi     R11
     440/     82B : F6                          shr
     440/     82C : BB                          phi     R11
     440/     82D : 8B                          glo     R11
     440/     82E : 76                          shrc
     440/     82F : AB                          plo     R11
     440/     830 :  (MACRO-2)                  shrU2   R11
     440/     830 : 9B                          ghi     R11
     440/     831 : F6                          shr
     440/     832 : BB                          phi     R11
     440/     833 : 8B                          glo     R11
     440/     834 : 76                          shrc
     440/     835 : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 44 - 2/23/2013 7:47:57


     440/     836 :  (MACRO-2)                  shrU2   R11
     440/     836 : 9B                          ghi     R11
     440/     837 : F6                          shr
     440/     838 : BB                          phi     R11
     440/     839 : 8B                          glo     R11
     440/     83A : 76                          shrc
     440/     83B : AB                          plo     R11
     440/     83C :  (MACRO-2)                  shrU2   R11
     440/     83C : 9B                          ghi     R11
     440/     83D : F6                          shr
     440/     83E : BB                          phi     R11
     440/     83F : 8B                          glo     R11
     440/     840 : 76                          shrc
     440/     841 : AB                          plo     R11
     440/     842 :  (MACRO-2)                  shrU2   R11
     440/     842 : 9B                          ghi     R11
     440/     843 : F6                          shr
     440/     844 : BB                          phi     R11
     440/     845 : 8B                          glo     R11
     440/     846 : 76                          shrc
     440/     847 : AB                          plo     R11
     440/     848 :  (MACRO-2)                  shrU2   R11
     440/     848 : 9B                          ghi     R11
     440/     849 : F6                          shr
     440/     84A : BB                          phi     R11
     440/     84B : 8B                          glo     R11
     440/     84C : 76                          shrc
     440/     84D : AB                          plo     R11
     440/     84E :  (MACRO-2)                  shrU2   R11
     440/     84E : 9B                          ghi     R11
     440/     84F : F6                          shr
     440/     850 : BB                          phi     R11
     440/     851 : 8B                          glo     R11
     440/     852 : 76                          shrc
     440/     853 : AB                          plo     R11
     440/     854 :  (MACRO-2)                  shrU2   R11
     440/     854 : 9B                          ghi     R11
     440/     855 : F6                          shr
     440/     856 : BB                          phi     R11
     440/     857 : 8B                          glo     R11
     440/     858 : 76                          shrc
     440/     859 : AB                          plo     R11
     441/     85A : (MACRO)             	cpy1 R12,R11
     441/     85A : 8B                          glo     R11
     441/     85B : AC                          plo     R12
     442/     85C : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     442/     85C : F8 00                       ldi     0
     442/     85E : BC                          phi     12
     443/     85F : (MACRO)             	Ccall _putx
     443/     85F : D4                          sep     RCALL
     443/     860 : 05 46                       dw      _PUTX
     444/     862 :                     ;					putx(((unsigned int) *this++)&255);
     445/     862 : (MACRO)             	cpy2 R11,R1
     445/     862 : 81                          glo     R1
     445/     863 : AB                          plo     R11
     445/     864 : 91                          ghi     R1
     445/     865 : BB                          phi     R11
     446/     866 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     446/     866 : =>TRUE                      if      ('O'='O')
     446/     866 :  (MACRO-2)                          ldAX    R1,R11,(2)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 45 - 2/23/2013 7:47:57


     446/     866 : 8B                          glo     R11
     446/     867 : FC 02                       adi     ((2))#256
     446/     869 : A1                          plo     R1
     446/     86A : 9B                          ghi     R11
     446/     86B : 7C 00                       adci    ((2))>>8; was/256
     446/     86D : B1                          phi     R1
     446/     86E : =>FALSE                     else
     446/     86E :                                     ldAD    R1,R11
     446/     86E : [446]                       endif
     447/     86E : (MACRO)             	ld2 R11,'O',R11,0
     447/     86E : =>TRUE                      if      ('O'='O')
     447/     86E :  (MACRO-2)                          ldAX    memAddr,R11,0
     447/     86E : 8B                          glo     R11
     447/     86F : FC 00                       adi     (0)#256
     447/     871 : AE                          plo     MEMADDR
     447/     872 : 9B                          ghi     R11
     447/     873 : 7C 00                       adci    (0)>>8; was/256
     447/     875 : BE                          phi     MEMADDR
     447/     876 : =>FALSE                     else
     447/     876 :                                     ldAD    memAddr,R11
     447/     876 : [447]                       endif
     447/     876 : 4E                          lda     memAddr
     447/     877 : BB                          phi     R11
     447/     878 : 0E                          ldn     memAddr
     447/     879 : AB                          plo     R11
     448/     87A : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     448/     87A : 8B                          glo     R11
     448/     87B : FA FF                       ANI     (255)#256
     448/     87D : AB                          plo     R11
     448/     87E : 9B                          ghi     R11
     448/     87F : FA 00                       ANI     (255)>>8; was/256
     448/     881 : BB                          phi     R11
     449/     882 : (MACRO)             	cpy1 R12,R11
     449/     882 : 8B                          glo     R11
     449/     883 : AC                          plo     R12
     450/     884 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     450/     884 : F8 00                       ldi     0
     450/     886 : BC                          phi     12
     451/     887 : (MACRO)             	Ccall _putx
     451/     887 : D4                          sep     RCALL
     451/     888 : 05 46                       dw      _PUTX
     452/     88A :                     ;					argslot+=1; //next argument slot
     453/     88A : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     453/     88A : =>TRUE                      if      ('O'='O')
     453/     88A :  (MACRO-2)                          ldAX    R0,R0,(1)
     453/     88A : 80                          glo     R0
     453/     88B : FC 01                       adi     ((1))#256
     453/     88D : A0                          plo     R0
     453/     88E : 90                          ghi     R0
     453/     88F : 7C 00                       adci    ((1))>>8; was/256
     453/     891 : B0                          phi     R0
     453/     892 : =>FALSE                     else
     453/     892 :                                     ldAD    R0,R0
     453/     892 : [453]                       endif
     454/     892 :                     ;					break;
     455/     892 : C0 0A 3E            	lbr L48
     456/     895 :                     L54:
     457/     895 :                     ;					if (*ptr){ //as long as there's something there
     458/     895 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     458/     895 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 46 - 2/23/2013 7:47:57


     458/     895 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     458/     895 : 82                          glo     SP
     458/     896 : FC 10                       adi     ((0+16))#256
     458/     898 : AE                          plo     MEMADDR
     458/     899 : 92                          ghi     SP
     458/     89A : 7C 00                       adci    ((0+16))>>8; was/256
     458/     89C : BE                          phi     MEMADDR
     458/     89D : =>FALSE                     else
     458/     89D :                                     ldAD    memAddr,SP
     458/     89D : [458]                       endif
     458/     89D : 4E                          lda     memAddr
     458/     89E : BB                          phi     R11
     458/     89F : 0E                          ldn     memAddr
     458/     8A0 : AB                          plo     R11
     459/     8A1 : (MACRO)             	ld1 R11,'O',R11,0
     459/     8A1 : =>TRUE                      if      ('O'='O')
     459/     8A1 :  (MACRO-2)                          ldAX    memAddr,R11,0
     459/     8A1 : 8B                          glo     R11
     459/     8A2 : FC 00                       adi     (0)#256
     459/     8A4 : AE                          plo     MEMADDR
     459/     8A5 : 9B                          ghi     R11
     459/     8A6 : 7C 00                       adci    (0)>>8; was/256
     459/     8A8 : BE                          phi     MEMADDR
     459/     8A9 : =>FALSE                     else
     459/     8A9 :                                     ldAD    memAddr,R11
     459/     8A9 : [459]                       endif
     459/     8A9 : 0E                          ldn     memAddr
     459/     8AA : AB                          plo     R11
     460/     8AB : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     460/     8AB : F8 00                       ldi     0
     460/     8AD : BB                          phi     11
     461/     8AE : (MACRO)             	jeqU2I r11,0,L55
     461/     8AE : 8B                          glo     R11
     461/     8AF : FF 00                       smi     (0)#256
     461/     8B1 : CA 08 BA                    lbnz    $$nobr
     461/     8B4 : 9B                          ghi     R11
     461/     8B5 : 7F 00                       smbi    (0)>>8; was/256
     461/     8B7 : C2 0A 2D                    lbz     L55
     461/     8BA :                     $$nobr:
     462/     8BA :                     ;						xord=*ptr++;
     463/     8BA : (MACRO)             	ld2 R11,'O',sp,(0+16)
     463/     8BA : =>TRUE                      if      ('O'='O')
     463/     8BA :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     463/     8BA : 82                          glo     SP
     463/     8BB : FC 10                       adi     ((0+16))#256
     463/     8BD : AE                          plo     MEMADDR
     463/     8BE : 92                          ghi     SP
     463/     8BF : 7C 00                       adci    ((0+16))>>8; was/256
     463/     8C1 : BE                          phi     MEMADDR
     463/     8C2 : =>FALSE                     else
     463/     8C2 :                                     ldAD    memAddr,SP
     463/     8C2 : [463]                       endif
     463/     8C2 : 4E                          lda     memAddr
     463/     8C3 : BB                          phi     R11
     463/     8C4 : 0E                          ldn     memAddr
     463/     8C5 : AB                          plo     R11
     464/     8C6 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     464/     8C6 : =>TRUE                      if      ('O'='O')
     464/     8C6 :  (MACRO-2)                          ldAX    R10,R11,(1)
     464/     8C6 : 8B                          glo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 47 - 2/23/2013 7:47:57


     464/     8C7 : FC 01                       adi     ((1))#256
     464/     8C9 : AA                          plo     R10
     464/     8CA : 9B                          ghi     R11
     464/     8CB : 7C 00                       adci    ((1))>>8; was/256
     464/     8CD : BA                          phi     R10
     464/     8CE : =>FALSE                     else
     464/     8CE :                                     ldAD    R10,R11
     464/     8CE : [464]                       endif
     465/     8CE : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     465/     8CE : =>TRUE                      if      ('O'='O')
     465/     8CE :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     465/     8CE : 82                          glo     SP
     465/     8CF : FC 10                       adi     ((0+16))#256
     465/     8D1 : AE                          plo     MEMADDR
     465/     8D2 : 92                          ghi     SP
     465/     8D3 : 7C 00                       adci    ((0+16))>>8; was/256
     465/     8D5 : BE                          phi     MEMADDR
     465/     8D6 : =>FALSE                     else
     465/     8D6 :                                     ldAD    memAddr,SP
     465/     8D6 : [465]                       endif
     465/     8D6 : 9A                          ghi     R10
     465/     8D7 : 5E                          str     memAddr
     465/     8D8 : 1E                          inc     memAddr
     465/     8D9 : 8A                          glo     R10
     465/     8DA : 5E                          str     memAddr
     466/     8DB : (MACRO)             	ld1 R11,'O',R11,0
     466/     8DB : =>TRUE                      if      ('O'='O')
     466/     8DB :  (MACRO-2)                          ldAX    memAddr,R11,0
     466/     8DB : 8B                          glo     R11
     466/     8DC : FC 00                       adi     (0)#256
     466/     8DE : AE                          plo     MEMADDR
     466/     8DF : 9B                          ghi     R11
     466/     8E0 : 7C 00                       adci    (0)>>8; was/256
     466/     8E2 : BE                          phi     MEMADDR
     466/     8E3 : =>FALSE                     else
     466/     8E3 :                                     ldAD    memAddr,R11
     466/     8E3 : [466]                       endif
     466/     8E3 : 0E                          ldn     memAddr
     466/     8E4 : AB                          plo     R11
     467/     8E5 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     467/     8E5 : =>TRUE                      if      ('O'='O')
     467/     8E5 :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
     467/     8E5 : 82                          glo     SP
     467/     8E6 : FC 0D                       adi     ((-3+16))#256
     467/     8E8 : AE                          plo     MEMADDR
     467/     8E9 : 92                          ghi     SP
     467/     8EA : 7C 00                       adci    ((-3+16))>>8; was/256
     467/     8EC : BE                          phi     MEMADDR
     467/     8ED : =>FALSE                     else
     467/     8ED :                                     ldAD    memAddr,SP
     467/     8ED : [467]                       endif
     467/     8ED : 8B                          glo     R11
     467/     8EE : 5E                          str     memAddr
     468/     8EF :                     ;						if (argslot&1) {
     469/     8EF : (MACRO)             	alu2I R11,R0,1,ani,ani
     469/     8EF : 80                          glo     R0
     469/     8F0 : FA 01                       ANI     (1)#256
     469/     8F2 : AB                          plo     R11
     469/     8F3 : 90                          ghi     R0
     469/     8F4 : FA 00                       ANI     (1)>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 48 - 2/23/2013 7:47:57


     469/     8F6 : BB                          phi     R11
     470/     8F7 :                     	;removed ?	cpy2 R11,R0
     471/     8F7 : (MACRO)             	jeqU2I r11,0,L57
     471/     8F7 : 8B                          glo     R11
     471/     8F8 : FF 00                       smi     (0)#256
     471/     8FA : CA 09 03                    lbnz    $$nobr
     471/     8FD : 9B                          ghi     R11
     471/     8FE : 7F 00                       smbi    (0)>>8; was/256
     471/     900 : C2 09 13                    lbz     L57
     471/     903 :                     $$nobr:
     472/     903 :                     ;							this++;
     473/     903 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     473/     903 : =>TRUE                      if      ('O'='O')
     473/     903 :  (MACRO-2)                          ldAX    R1,R1,(2)
     473/     903 : 81                          glo     R1
     473/     904 : FC 02                       adi     ((2))#256
     473/     906 : A1                          plo     R1
     473/     907 : 91                          ghi     R1
     473/     908 : 7C 00                       adci    ((2))>>8; was/256
     473/     90A : B1                          phi     R1
     473/     90B : =>FALSE                     else
     473/     90B :                                     ldAD    R1,R1
     473/     90B : [473]                       endif
     474/     90B :                     ;							argslot++;
     475/     90B : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     475/     90B : =>TRUE                      if      ('O'='O')
     475/     90B :  (MACRO-2)                          ldAX    R0,R0,(1)
     475/     90B : 80                          glo     R0
     475/     90C : FC 01                       adi     ((1))#256
     475/     90E : A0                          plo     R0
     475/     90F : 90                          ghi     R0
     475/     910 : 7C 00                       adci    ((1))>>8; was/256
     475/     912 : B0                          phi     R0
     475/     913 : =>FALSE                     else
     475/     913 :                                     ldAD    R0,R0
     475/     913 : [475]                       endif
     476/     913 :                     ;						}
     477/     913 :                     L57:
     478/     913 :                     ;						if(xord=='d'){
     479/     913 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     479/     913 : =>TRUE                      if      ('O'='O')
     479/     913 :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
     479/     913 : 82                          glo     SP
     479/     914 : FC 0D                       adi     ((-3+16))#256
     479/     916 : AE                          plo     MEMADDR
     479/     917 : 92                          ghi     SP
     479/     918 : 7C 00                       adci    ((-3+16))>>8; was/256
     479/     91A : BE                          phi     MEMADDR
     479/     91B : =>FALSE                     else
     479/     91B :                                     ldAD    memAddr,SP
     479/     91B : [479]                       endif
     479/     91B : 0E                          ldn     memAddr
     479/     91C : AB                          plo     R11
     480/     91D : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     480/     91D : F8 00                       ldi     0
     480/     91F : BB                          phi     11
     481/     920 : (MACRO)             	jneU2I r11,100,L59; NE
     481/     920 : 8B                          glo     R11
     481/     921 : FF 64                       smi     (100)#256
     481/     923 : CA 09 4A                    lbnz    L59
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 49 - 2/23/2013 7:47:57


     481/     926 : 9B                          ghi     R11
     481/     927 : 7F 00                       smbi    (100)>>8; was/256
     481/     929 : CA 09 4A                    lbnz    L59
     482/     92C :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     483/     92C : (MACRO)             	ld4 Rp1p2,'O',R1,0
     483/     92C : =>TRUE                      if      ('O'='O')
     483/     92C :  (MACRO-2)                          ldAX    memAddr,R1,0
     483/     92C : 81                          glo     R1
     483/     92D : FC 00                       adi     (0)#256
     483/     92F : AE                          plo     MEMADDR
     483/     930 : 91                          ghi     R1
     483/     931 : 7C 00                       adci    (0)>>8; was/256
     483/     933 : BE                          phi     MEMADDR
     483/     934 : =>FALSE                     else
     483/     934 :                                     ldAD    memAddr,R1
     483/     934 : [483]                       endif
     483/     934 : 4E                          lda     memAddr
     483/     935 : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     483/     936 : 4E                          lda     memAddr ;but load and store start with the 1st
     483/     937 : AC                          plo     RP1P2-1
     483/     938 : 4E                          lda     memAddr
     483/     939 : BD                          phi     RP1P2
     483/     93A : 0E                          ldn     memAddr
     483/     93B : AD                          plo     RP1P2
     484/     93C : (MACRO)             	Ccall _printlint
     484/     93C : D4                          sep     RCALL
     484/     93D : 04 4D                       dw      _PRINTLINT
     485/     93F :                     ;							this+=2;				// and advances it 4 bytes
     486/     93F : (MACRO)             	ldA2 R1,'O',R1,(4); reg:addr
     486/     93F : =>TRUE                      if      ('O'='O')
     486/     93F :  (MACRO-2)                          ldAX    R1,R1,(4)
     486/     93F : 81                          glo     R1
     486/     940 : FC 04                       adi     ((4))#256
     486/     942 : A1                          plo     R1
     486/     943 : 91                          ghi     R1
     486/     944 : 7C 00                       adci    ((4))>>8; was/256
     486/     946 : B1                          phi     R1
     486/     947 : =>FALSE                     else
     486/     947 :                                     ldAD    R1,R1
     486/     947 : [486]                       endif
     487/     947 :                     ;						} else{
     488/     947 : C0 0A 22            	lbr L60
     489/     94A :                     L59:
     490/     94A :                     ;							putx(((unsigned int) *this)>>8);
     491/     94A : (MACRO)             	ld2 R11,'O',R1,0
     491/     94A : =>TRUE                      if      ('O'='O')
     491/     94A :  (MACRO-2)                          ldAX    memAddr,R1,0
     491/     94A : 81                          glo     R1
     491/     94B : FC 00                       adi     (0)#256
     491/     94D : AE                          plo     MEMADDR
     491/     94E : 91                          ghi     R1
     491/     94F : 7C 00                       adci    (0)>>8; was/256
     491/     951 : BE                          phi     MEMADDR
     491/     952 : =>FALSE                     else
     491/     952 :                                     ldAD    memAddr,R1
     491/     952 : [491]                       endif
     491/     952 : 4E                          lda     memAddr
     491/     953 : BB                          phi     R11
     491/     954 : 0E                          ldn     memAddr
     491/     955 : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 50 - 2/23/2013 7:47:57


     492/     956 : (MACRO)             	shrU2I R11,8
     492/     956 :                             rept    8
     492/     956 :                             shrU2   R11
     492/     956 :                             endm
     492/     956 :  (MACRO-2)                  shrU2   R11
     492/     956 : 9B                          ghi     R11
     492/     957 : F6                          shr
     492/     958 : BB                          phi     R11
     492/     959 : 8B                          glo     R11
     492/     95A : 76                          shrc
     492/     95B : AB                          plo     R11
     492/     95C :  (MACRO-2)                  shrU2   R11
     492/     95C : 9B                          ghi     R11
     492/     95D : F6                          shr
     492/     95E : BB                          phi     R11
     492/     95F : 8B                          glo     R11
     492/     960 : 76                          shrc
     492/     961 : AB                          plo     R11
     492/     962 :  (MACRO-2)                  shrU2   R11
     492/     962 : 9B                          ghi     R11
     492/     963 : F6                          shr
     492/     964 : BB                          phi     R11
     492/     965 : 8B                          glo     R11
     492/     966 : 76                          shrc
     492/     967 : AB                          plo     R11
     492/     968 :  (MACRO-2)                  shrU2   R11
     492/     968 : 9B                          ghi     R11
     492/     969 : F6                          shr
     492/     96A : BB                          phi     R11
     492/     96B : 8B                          glo     R11
     492/     96C : 76                          shrc
     492/     96D : AB                          plo     R11
     492/     96E :  (MACRO-2)                  shrU2   R11
     492/     96E : 9B                          ghi     R11
     492/     96F : F6                          shr
     492/     970 : BB                          phi     R11
     492/     971 : 8B                          glo     R11
     492/     972 : 76                          shrc
     492/     973 : AB                          plo     R11
     492/     974 :  (MACRO-2)                  shrU2   R11
     492/     974 : 9B                          ghi     R11
     492/     975 : F6                          shr
     492/     976 : BB                          phi     R11
     492/     977 : 8B                          glo     R11
     492/     978 : 76                          shrc
     492/     979 : AB                          plo     R11
     492/     97A :  (MACRO-2)                  shrU2   R11
     492/     97A : 9B                          ghi     R11
     492/     97B : F6                          shr
     492/     97C : BB                          phi     R11
     492/     97D : 8B                          glo     R11
     492/     97E : 76                          shrc
     492/     97F : AB                          plo     R11
     492/     980 :  (MACRO-2)                  shrU2   R11
     492/     980 : 9B                          ghi     R11
     492/     981 : F6                          shr
     492/     982 : BB                          phi     R11
     492/     983 : 8B                          glo     R11
     492/     984 : 76                          shrc
     492/     985 : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 51 - 2/23/2013 7:47:57


     493/     986 : (MACRO)             	cpy1 R12,R11
     493/     986 : 8B                          glo     R11
     493/     987 : AC                          plo     R12
     494/     988 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     494/     988 : F8 00                       ldi     0
     494/     98A : BC                          phi     12
     495/     98B : (MACRO)             	Ccall _putx
     495/     98B : D4                          sep     RCALL
     495/     98C : 05 46                       dw      _PUTX
     496/     98E :                     ;							putx(((unsigned int) *this++)&255);
     497/     98E : (MACRO)             	cpy2 R11,R1
     497/     98E : 81                          glo     R1
     497/     98F : AB                          plo     R11
     497/     990 : 91                          ghi     R1
     497/     991 : BB                          phi     R11
     498/     992 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     498/     992 : =>TRUE                      if      ('O'='O')
     498/     992 :  (MACRO-2)                          ldAX    R1,R11,(2)
     498/     992 : 8B                          glo     R11
     498/     993 : FC 02                       adi     ((2))#256
     498/     995 : A1                          plo     R1
     498/     996 : 9B                          ghi     R11
     498/     997 : 7C 00                       adci    ((2))>>8; was/256
     498/     999 : B1                          phi     R1
     498/     99A : =>FALSE                     else
     498/     99A :                                     ldAD    R1,R11
     498/     99A : [498]                       endif
     499/     99A : (MACRO)             	ld2 R11,'O',R11,0
     499/     99A : =>TRUE                      if      ('O'='O')
     499/     99A :  (MACRO-2)                          ldAX    memAddr,R11,0
     499/     99A : 8B                          glo     R11
     499/     99B : FC 00                       adi     (0)#256
     499/     99D : AE                          plo     MEMADDR
     499/     99E : 9B                          ghi     R11
     499/     99F : 7C 00                       adci    (0)>>8; was/256
     499/     9A1 : BE                          phi     MEMADDR
     499/     9A2 : =>FALSE                     else
     499/     9A2 :                                     ldAD    memAddr,R11
     499/     9A2 : [499]                       endif
     499/     9A2 : 4E                          lda     memAddr
     499/     9A3 : BB                          phi     R11
     499/     9A4 : 0E                          ldn     memAddr
     499/     9A5 : AB                          plo     R11
     500/     9A6 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     500/     9A6 : 8B                          glo     R11
     500/     9A7 : FA FF                       ANI     (255)#256
     500/     9A9 : AB                          plo     R11
     500/     9AA : 9B                          ghi     R11
     500/     9AB : FA 00                       ANI     (255)>>8; was/256
     500/     9AD : BB                          phi     R11
     501/     9AE : (MACRO)             	cpy1 R12,R11
     501/     9AE : 8B                          glo     R11
     501/     9AF : AC                          plo     R12
     502/     9B0 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     502/     9B0 : F8 00                       ldi     0
     502/     9B2 : BC                          phi     12
     503/     9B3 : (MACRO)             	Ccall _putx
     503/     9B3 : D4                          sep     RCALL
     503/     9B4 : 05 46                       dw      _PUTX
     504/     9B6 :                     ;							putx(((unsigned int) *this)>>8);
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 52 - 2/23/2013 7:47:57


     505/     9B6 : (MACRO)             	ld2 R11,'O',R1,0
     505/     9B6 : =>TRUE                      if      ('O'='O')
     505/     9B6 :  (MACRO-2)                          ldAX    memAddr,R1,0
     505/     9B6 : 81                          glo     R1
     505/     9B7 : FC 00                       adi     (0)#256
     505/     9B9 : AE                          plo     MEMADDR
     505/     9BA : 91                          ghi     R1
     505/     9BB : 7C 00                       adci    (0)>>8; was/256
     505/     9BD : BE                          phi     MEMADDR
     505/     9BE : =>FALSE                     else
     505/     9BE :                                     ldAD    memAddr,R1
     505/     9BE : [505]                       endif
     505/     9BE : 4E                          lda     memAddr
     505/     9BF : BB                          phi     R11
     505/     9C0 : 0E                          ldn     memAddr
     505/     9C1 : AB                          plo     R11
     506/     9C2 : (MACRO)             	shrU2I R11,8
     506/     9C2 :                             rept    8
     506/     9C2 :                             shrU2   R11
     506/     9C2 :                             endm
     506/     9C2 :  (MACRO-2)                  shrU2   R11
     506/     9C2 : 9B                          ghi     R11
     506/     9C3 : F6                          shr
     506/     9C4 : BB                          phi     R11
     506/     9C5 : 8B                          glo     R11
     506/     9C6 : 76                          shrc
     506/     9C7 : AB                          plo     R11
     506/     9C8 :  (MACRO-2)                  shrU2   R11
     506/     9C8 : 9B                          ghi     R11
     506/     9C9 : F6                          shr
     506/     9CA : BB                          phi     R11
     506/     9CB : 8B                          glo     R11
     506/     9CC : 76                          shrc
     506/     9CD : AB                          plo     R11
     506/     9CE :  (MACRO-2)                  shrU2   R11
     506/     9CE : 9B                          ghi     R11
     506/     9CF : F6                          shr
     506/     9D0 : BB                          phi     R11
     506/     9D1 : 8B                          glo     R11
     506/     9D2 : 76                          shrc
     506/     9D3 : AB                          plo     R11
     506/     9D4 :  (MACRO-2)                  shrU2   R11
     506/     9D4 : 9B                          ghi     R11
     506/     9D5 : F6                          shr
     506/     9D6 : BB                          phi     R11
     506/     9D7 : 8B                          glo     R11
     506/     9D8 : 76                          shrc
     506/     9D9 : AB                          plo     R11
     506/     9DA :  (MACRO-2)                  shrU2   R11
     506/     9DA : 9B                          ghi     R11
     506/     9DB : F6                          shr
     506/     9DC : BB                          phi     R11
     506/     9DD : 8B                          glo     R11
     506/     9DE : 76                          shrc
     506/     9DF : AB                          plo     R11
     506/     9E0 :  (MACRO-2)                  shrU2   R11
     506/     9E0 : 9B                          ghi     R11
     506/     9E1 : F6                          shr
     506/     9E2 : BB                          phi     R11
     506/     9E3 : 8B                          glo     R11
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 53 - 2/23/2013 7:47:57


     506/     9E4 : 76                          shrc
     506/     9E5 : AB                          plo     R11
     506/     9E6 :  (MACRO-2)                  shrU2   R11
     506/     9E6 : 9B                          ghi     R11
     506/     9E7 : F6                          shr
     506/     9E8 : BB                          phi     R11
     506/     9E9 : 8B                          glo     R11
     506/     9EA : 76                          shrc
     506/     9EB : AB                          plo     R11
     506/     9EC :  (MACRO-2)                  shrU2   R11
     506/     9EC : 9B                          ghi     R11
     506/     9ED : F6                          shr
     506/     9EE : BB                          phi     R11
     506/     9EF : 8B                          glo     R11
     506/     9F0 : 76                          shrc
     506/     9F1 : AB                          plo     R11
     507/     9F2 : (MACRO)             	cpy1 R12,R11
     507/     9F2 : 8B                          glo     R11
     507/     9F3 : AC                          plo     R12
     508/     9F4 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     508/     9F4 : F8 00                       ldi     0
     508/     9F6 : BC                          phi     12
     509/     9F7 : (MACRO)             	Ccall _putx
     509/     9F7 : D4                          sep     RCALL
     509/     9F8 : 05 46                       dw      _PUTX
     510/     9FA :                     ;							putx(((unsigned int) *this++)&255);
     511/     9FA : (MACRO)             	cpy2 R11,R1
     511/     9FA : 81                          glo     R1
     511/     9FB : AB                          plo     R11
     511/     9FC : 91                          ghi     R1
     511/     9FD : BB                          phi     R11
     512/     9FE : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     512/     9FE : =>TRUE                      if      ('O'='O')
     512/     9FE :  (MACRO-2)                          ldAX    R1,R11,(2)
     512/     9FE : 8B                          glo     R11
     512/     9FF : FC 02                       adi     ((2))#256
     512/     A01 : A1                          plo     R1
     512/     A02 : 9B                          ghi     R11
     512/     A03 : 7C 00                       adci    ((2))>>8; was/256
     512/     A05 : B1                          phi     R1
     512/     A06 : =>FALSE                     else
     512/     A06 :                                     ldAD    R1,R11
     512/     A06 : [512]                       endif
     513/     A06 : (MACRO)             	ld2 R11,'O',R11,0
     513/     A06 : =>TRUE                      if      ('O'='O')
     513/     A06 :  (MACRO-2)                          ldAX    memAddr,R11,0
     513/     A06 : 8B                          glo     R11
     513/     A07 : FC 00                       adi     (0)#256
     513/     A09 : AE                          plo     MEMADDR
     513/     A0A : 9B                          ghi     R11
     513/     A0B : 7C 00                       adci    (0)>>8; was/256
     513/     A0D : BE                          phi     MEMADDR
     513/     A0E : =>FALSE                     else
     513/     A0E :                                     ldAD    memAddr,R11
     513/     A0E : [513]                       endif
     513/     A0E : 4E                          lda     memAddr
     513/     A0F : BB                          phi     R11
     513/     A10 : 0E                          ldn     memAddr
     513/     A11 : AB                          plo     R11
     514/     A12 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 54 - 2/23/2013 7:47:57


     514/     A12 : 8B                          glo     R11
     514/     A13 : FA FF                       ANI     (255)#256
     514/     A15 : AB                          plo     R11
     514/     A16 : 9B                          ghi     R11
     514/     A17 : FA 00                       ANI     (255)>>8; was/256
     514/     A19 : BB                          phi     R11
     515/     A1A : (MACRO)             	cpy1 R12,R11
     515/     A1A : 8B                          glo     R11
     515/     A1B : AC                          plo     R12
     516/     A1C : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     516/     A1C : F8 00                       ldi     0
     516/     A1E : BC                          phi     12
     517/     A1F : (MACRO)             	Ccall _putx
     517/     A1F : D4                          sep     RCALL
     517/     A20 : 05 46                       dw      _PUTX
     518/     A22 :                     ;						}
     519/     A22 :                     L60:
     520/     A22 :                     ;						argslot+=2;
     521/     A22 : (MACRO)             	ldA2 R0,'O',R0,(2); reg:addr
     521/     A22 : =>TRUE                      if      ('O'='O')
     521/     A22 :  (MACRO-2)                          ldAX    R0,R0,(2)
     521/     A22 : 80                          glo     R0
     521/     A23 : FC 02                       adi     ((2))#256
     521/     A25 : A0                          plo     R0
     521/     A26 : 90                          ghi     R0
     521/     A27 : 7C 00                       adci    ((2))>>8; was/256
     521/     A29 : B0                          phi     R0
     521/     A2A : =>FALSE                     else
     521/     A2A :                                     ldAD    R0,R0
     521/     A2A : [521]                       endif
     522/     A2A :                     ;						break;
     523/     A2A : C0 0A 3E            	lbr L48
     524/     A2D :                     L55:
     525/     A2D :                     L47:
     526/     A2D :                     ;					putc('%');putc(c);
     527/     A2D : (MACRO)             	ldaD R12,37
     527/     A2D : F8 25                       ldi     (37)&255
     527/     A2F : AC                          plo     R12
     527/     A30 : F8 00                       ldi     (37)>>8; was/256
     527/     A32 : BC                          phi     R12
     528/     A33 : (MACRO)             	Ccall _putc
     528/     A33 : D4                          sep     RCALL
     528/     A34 : 10 40                       dw      _PUTC
     529/     A36 : (MACRO)             	cpy1 R12,R7
     529/     A36 : 87                          glo     R7
     529/     A37 : AC                          plo     R12
     530/     A38 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     530/     A38 : F8 00                       ldi     0
     530/     A3A : BC                          phi     12
     531/     A3B : (MACRO)             	Ccall _putc
     531/     A3B : D4                          sep     RCALL
     531/     A3C : 10 40                       dw      _PUTC
     532/     A3E :                     ;			} //switch
     533/     A3E :                     L48:
     534/     A3E :                     ;		} //%
     535/     A3E :                     L46:
     536/     A3E :                     ;	} //while
     537/     A3E :                     L43:
     538/     A3E :                     ;    while(*ptr) {
     539/     A3E : (MACRO)             	ld2 R11,'O',sp,(0+16)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 55 - 2/23/2013 7:47:57


     539/     A3E : =>TRUE                      if      ('O'='O')
     539/     A3E :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     539/     A3E : 82                          glo     SP
     539/     A3F : FC 10                       adi     ((0+16))#256
     539/     A41 : AE                          plo     MEMADDR
     539/     A42 : 92                          ghi     SP
     539/     A43 : 7C 00                       adci    ((0+16))>>8; was/256
     539/     A45 : BE                          phi     MEMADDR
     539/     A46 : =>FALSE                     else
     539/     A46 :                                     ldAD    memAddr,SP
     539/     A46 : [539]                       endif
     539/     A46 : 4E                          lda     memAddr
     539/     A47 : BB                          phi     R11
     539/     A48 : 0E                          ldn     memAddr
     539/     A49 : AB                          plo     R11
     540/     A4A : (MACRO)             	ld1 R11,'O',R11,0
     540/     A4A : =>TRUE                      if      ('O'='O')
     540/     A4A :  (MACRO-2)                          ldAX    memAddr,R11,0
     540/     A4A : 8B                          glo     R11
     540/     A4B : FC 00                       adi     (0)#256
     540/     A4D : AE                          plo     MEMADDR
     540/     A4E : 9B                          ghi     R11
     540/     A4F : 7C 00                       adci    (0)>>8; was/256
     540/     A51 : BE                          phi     MEMADDR
     540/     A52 : =>FALSE                     else
     540/     A52 :                                     ldAD    memAddr,R11
     540/     A52 : [540]                       endif
     540/     A52 : 0E                          ldn     memAddr
     540/     A53 : AB                          plo     R11
     541/     A54 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     541/     A54 : F8 00                       ldi     0
     541/     A56 : BB                          phi     11
     542/     A57 : (MACRO)             	jneU2I r11,0,L42; NE
     542/     A57 : 8B                          glo     R11
     542/     A58 : FF 00                       smi     (0)#256
     542/     A5A : CA 06 29                    lbnz    L42
     542/     A5D : 9B                          ghi     R11
     542/     A5E : 7F 00                       smbi    (0)>>8; was/256
     542/     A60 : CA 06 29                    lbnz    L42
     543/     A63 :                     ;} //prtf
     544/     A63 :                     L41:
     545/     A63 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     545/     A63 : 82                          glo     SP
     545/     A64 : FC 04                       ADI     ((4))#256
     545/     A66 : AE                          plo     MEMADDR
     545/     A67 : 92                          ghi     SP
     545/     A68 : 7C 00                       ADCI     ((4))>>8; was/256
     545/     A6A : BE                          phi     MEMADDR
     546/     A6B : (MACRO)             	rldmi r7,memaddr
     546/     A6B : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     546/     A6C : B7                          phi     R7
     546/     A6D : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     546/     A6E : A7                          plo     R7
     547/     A6F : (MACRO)             	rldmi r1,memaddr
     547/     A6F : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     547/     A70 : B1                          phi     R1
     547/     A71 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     547/     A72 : A1                          plo     R1
     548/     A73 : (MACRO)             	rldmi r0,memaddr
     548/     A73 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 56 - 2/23/2013 7:47:57


     548/     A74 : B0                          phi     R0
     548/     A75 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     548/     A76 : A0                          plo     R0
     549/     A77 : (MACRO)             	release 14
     549/     A77 :                     ;for release we adjust the low byte first 
     549/     A77 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     549/     A77 :  (MACRO-2)                  alu2i sp,sp,14,adi,adci
     549/     A77 : 82                          glo     SP
     549/     A78 : FC 0E                       ADI     (14)#256
     549/     A7A : A2                          plo     SP
     549/     A7B : 92                          ghi     SP
     549/     A7C : 7C 00                       ADCI     (14)>>8; was/256
     549/     A7E : B2                          phi     SP
     550/     A7F : (MACRO)             	Cretn
     550/     A7F : D5                          sep     RRET
     551/     A80 :                     
     552/     A80 :                     _exit:
     553/     A80 : (MACRO)             	reserve 4
     553/     A80 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     553/     A80 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     553/     A80 : 82                          glo sp          ;grab low byte of stack pointer
     553/     A81 : FF 04                       smi 4&255 ;claculate new low byte
     553/     A83 : AE                          plo memAddr     ;save it for a moment
     553/     A84 : 92                          ghi sp          ;grab high byte
     553/     A85 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     553/     A87 : B2                          phi sp          ;adjust page first
     553/     A88 : 8E                          glo memAddr     ;get new low byte
     553/     A89 : A2                          plo sp          ;finish adjusting the stack pointer
     554/     A8A : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     554/     A8A : =>TRUE                      if      ('O'='O')
     554/     A8A :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     554/     A8A : 82                          glo     SP
     554/     A8B : FC 06                       adi     ((6))#256
     554/     A8D : AE                          plo     MEMADDR
     554/     A8E : 92                          ghi     SP
     554/     A8F : 7C 00                       adci    ((6))>>8; was/256
     554/     A91 : BE                          phi     MEMADDR
     554/     A92 : =>FALSE                     else
     554/     A92 :                                     ldAD    memAddr,SP
     554/     A92 : [554]                       endif
     554/     A92 : 9C                          ghi     R12
     554/     A93 : 5E                          str     memAddr
     554/     A94 : 1E                          inc     memAddr
     554/     A95 : 8C                          glo     R12
     554/     A96 : 5E                          str     memAddr
     555/     A97 :                     ;void exit(int code){
     556/     A97 :                     ;	printf("exit %d\n",code);
     557/     A97 : (MACRO)             	ldaD R12,L66
     557/     A97 : F8 68                       ldi     (L66)&255
     557/     A99 : AC                          plo     R12
     557/     A9A : F8 0C                       ldi     (L66)>>8; was/256
     557/     A9C : BC                          phi     R12
     558/     A9D : (MACRO)             	ld2 R13,'O',sp,(0+6)
     558/     A9D : =>TRUE                      if      ('O'='O')
     558/     A9D :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     558/     A9D : 82                          glo     SP
     558/     A9E : FC 06                       adi     ((0+6))#256
     558/     AA0 : AE                          plo     MEMADDR
     558/     AA1 : 92                          ghi     SP
     558/     AA2 : 7C 00                       adci    ((0+6))>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 57 - 2/23/2013 7:47:57


     558/     AA4 : BE                          phi     MEMADDR
     558/     AA5 : =>FALSE                     else
     558/     AA5 :                                     ldAD    memAddr,SP
     558/     AA5 : [558]                       endif
     558/     AA5 : 4E                          lda     memAddr
     558/     AA6 : BD                          phi     R13
     558/     AA7 : 0E                          ldn     memAddr
     558/     AA8 : AD                          plo     R13
     559/     AA9 : (MACRO)             	Ccall _printf
     559/     AA9 : D4                          sep     RCALL
     559/     AAA : 05 CE                       dw      _PRINTF
     560/     AAC :                     L67:
     561/     AAC :                     ;	while(1);
     562/     AAC :                     L68:
     563/     AAC : C0 0A AC            	lbr L67
     564/     AAF :                     ;}
     565/     AAF :                     L65:
     566/     AAF : (MACRO)             	release 4
     566/     AAF :                     ;for release we adjust the low byte first 
     566/     AAF :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     566/     AAF :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     566/     AAF : 82                          glo     SP
     566/     AB0 : FC 04                       ADI     (4)#256
     566/     AB2 : A2                          plo     SP
     566/     AB3 : 92                          ghi     SP
     566/     AB4 : 7C 00                       ADCI     (4)>>8; was/256
     566/     AB6 : B2                          phi     SP
     567/     AB7 : (MACRO)             	Cretn
     567/     AB7 : D5                          sep     RRET
     568/     AB8 :                     
     569/     AB8 :                     _delay:
     570/     AB8 : (MACRO)             	reserve 8
     570/     AB8 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     570/     AB8 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     570/     AB8 : 82                          glo sp          ;grab low byte of stack pointer
     570/     AB9 : FF 08                       smi 8&255 ;claculate new low byte
     570/     ABB : AE                          plo memAddr     ;save it for a moment
     570/     ABC : 92                          ghi sp          ;grab high byte
     570/     ABD : 7F 00                       smbi (8>>8)&255 ;calculate the new page
     570/     ABF : B2                          phi sp          ;adjust page first
     570/     AC0 : 8E                          glo memAddr     ;get new low byte
     570/     AC1 : A2                          plo sp          ;finish adjusting the stack pointer
     571/     AC2 : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
     571/     AC2 : 82                          glo     SP
     571/     AC3 : FC 07                       ADI     ((7))#256
     571/     AC5 : AE                          plo     MEMADDR
     571/     AC6 : 92                          ghi     SP
     571/     AC7 : 7C 00                       ADCI     ((7))>>8; was/256
     571/     AC9 : BE                          phi     MEMADDR
     572/     ACA : EE                  	sex	memaddr
     573/     ACB : (MACRO)             	savmi r1
     573/     ACB : 81                          glo     R1
     573/     ACC : 73                          stxd            ;R1 x is primed to the spot to start the saves
     573/     ACD : 91                          ghi     R1
     573/     ACE : 73                          stxd            ;and it end up where needed to do the next one
     574/     ACF : (MACRO)             	savmi r7
     574/     ACF : 87                          glo     R7
     574/     AD0 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     574/     AD1 : 97                          ghi     R7
     574/     AD2 : 73                          stxd            ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 58 - 2/23/2013 7:47:57


     575/     AD3 : E2                  	sex sp
     576/     AD4 : (MACRO)             	cpy2 r7,r12; function(2054) 1
     576/     AD4 : 8C                          glo     R12
     576/     AD5 : A7                          plo     R7
     576/     AD6 : 9C                          ghi     R12
     576/     AD7 : B7                          phi     R7
     577/     AD8 :                     ;void delay(unsigned int howlong){
     578/     AD8 :                     ;	for (i=1;i!=howlong;i++){
     579/     AD8 : (MACRO)             	ldaD R1,1
     579/     AD8 : F8 01                       ldi     (1)&255
     579/     ADA : A1                          plo     R1
     579/     ADB : F8 00                       ldi     (1)>>8; was/256
     579/     ADD : B1                          phi     R1
     580/     ADE : C0 0A E5            	lbr L74
     581/     AE1 :                     L71:
     582/     AE1 :                     ;		oneMs();
     583/     AE1 : (MACRO)             	Ccall _oneMs
     583/     AE1 : D4                          sep     RCALL
     583/     AE2 : 0D 1C                       dw      _ONEMS
     584/     AE4 :                     ;	}
     585/     AE4 :                     L72:
     586/     AE4 :                     ;	for (i=1;i!=howlong;i++){
     587/     AE4 : 11                  	inc R1
     588/     AE5 :                     L74:
     589/     AE5 : (MACRO)             	jneU2 r1,r7,L71; NE
     589/     AE5 : 22                          dec     sp
     589/     AE6 : 87                          glo     R7
     589/     AE7 : 52                          str     sp
     589/     AE8 : 81                          glo     R1
     589/     AE9 : F7                          sm
     589/     AEA : 12                          inc     sp
     589/     AEB : CA 0A E1                    lbnz    L71
     589/     AEE : 22                          dec     sp
     589/     AEF : 97                          ghi     R7
     589/     AF0 : 52                          str     sp
     589/     AF1 : 91                          ghi     R1
     589/     AF2 : 77                          smb
     589/     AF3 : 12                          inc     sp
     589/     AF4 : CA 0A E1                    lbnz    L71
     590/     AF7 :                     ;}
     591/     AF7 :                     L70:
     592/     AF7 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     592/     AF7 : 82                          glo     SP
     592/     AF8 : FC 04                       ADI     ((4))#256
     592/     AFA : AE                          plo     MEMADDR
     592/     AFB : 92                          ghi     SP
     592/     AFC : 7C 00                       ADCI     ((4))>>8; was/256
     592/     AFE : BE                          phi     MEMADDR
     593/     AFF : (MACRO)             	rldmi r7,memaddr
     593/     AFF : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     593/     B00 : B7                          phi     R7
     593/     B01 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     593/     B02 : A7                          plo     R7
     594/     B03 : (MACRO)             	rldmi r1,memaddr
     594/     B03 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     594/     B04 : B1                          phi     R1
     594/     B05 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     594/     B06 : A1                          plo     R1
     595/     B07 : (MACRO)             	release 8
     595/     B07 :                     ;for release we adjust the low byte first 
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 59 - 2/23/2013 7:47:57


     595/     B07 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     595/     B07 :  (MACRO-2)                  alu2i sp,sp,8,adi,adci
     595/     B07 : 82                          glo     SP
     595/     B08 : FC 08                       ADI     (8)#256
     595/     B0A : A2                          plo     SP
     595/     B0B : 92                          ghi     SP
     595/     B0C : 7C 00                       ADCI     (8)>>8; was/256
     595/     B0E : B2                          phi     SP
     596/     B0F : (MACRO)             	Cretn
     596/     B0F : D5                          sep     RRET
     597/     B10 :                     
     598/     B10 :                     _digitalWrite:
     599/     B10 : (MACRO)             	reserve 4
     599/     B10 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     599/     B10 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     599/     B10 : 82                          glo sp          ;grab low byte of stack pointer
     599/     B11 : FF 04                       smi 4&255 ;claculate new low byte
     599/     B13 : AE                          plo memAddr     ;save it for a moment
     599/     B14 : 92                          ghi sp          ;grab high byte
     599/     B15 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     599/     B17 : B2                          phi sp          ;adjust page first
     599/     B18 : 8E                          glo memAddr     ;get new low byte
     599/     B19 : A2                          plo sp          ;finish adjusting the stack pointer
     600/     B1A : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     600/     B1A : =>TRUE                      if      ('O'='O')
     600/     B1A :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     600/     B1A : 82                          glo     SP
     600/     B1B : FC 06                       adi     ((6))#256
     600/     B1D : AE                          plo     MEMADDR
     600/     B1E : 92                          ghi     SP
     600/     B1F : 7C 00                       adci    ((6))>>8; was/256
     600/     B21 : BE                          phi     MEMADDR
     600/     B22 : =>FALSE                     else
     600/     B22 :                                     ldAD    memAddr,SP
     600/     B22 : [600]                       endif
     600/     B22 : 9C                          ghi     R12
     600/     B23 : 5E                          str     memAddr
     600/     B24 : 1E                          inc     memAddr
     600/     B25 : 8C                          glo     R12
     600/     B26 : 5E                          str     memAddr
     601/     B27 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     601/     B27 : =>TRUE                      if      ('O'='O')
     601/     B27 :  (MACRO-2)                          ldAX    memAddr,SP,(8)
     601/     B27 : 82                          glo     SP
     601/     B28 : FC 08                       adi     ((8))#256
     601/     B2A : AE                          plo     MEMADDR
     601/     B2B : 92                          ghi     SP
     601/     B2C : 7C 00                       adci    ((8))>>8; was/256
     601/     B2E : BE                          phi     MEMADDR
     601/     B2F : =>FALSE                     else
     601/     B2F :                                     ldAD    memAddr,SP
     601/     B2F : [601]                       endif
     601/     B2F : 9D                          ghi     R13
     601/     B30 : 5E                          str     memAddr
     601/     B31 : 1E                          inc     memAddr
     601/     B32 : 8D                          glo     R13
     601/     B33 : 5E                          str     memAddr
     602/     B34 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     602/     B34 : =>TRUE                      if      ('O'='O')
     602/     B34 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 60 - 2/23/2013 7:47:57


     602/     B34 : 82                          glo     SP
     602/     B35 : FC 06                       adi     ((0+6))#256
     602/     B37 : AE                          plo     MEMADDR
     602/     B38 : 92                          ghi     SP
     602/     B39 : 7C 00                       adci    ((0+6))>>8; was/256
     602/     B3B : BE                          phi     MEMADDR
     602/     B3C : =>FALSE                     else
     602/     B3C :                                     ldAD    memAddr,SP
     602/     B3C : [602]                       endif
     602/     B3C : 4E                          lda     memAddr
     602/     B3D : BB                          phi     R11
     602/     B3E : 0E                          ldn     memAddr
     602/     B3F : AB                          plo     R11
     603/     B40 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     603/     B40 : =>TRUE                      if      ('O'='O')
     603/     B40 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     603/     B40 : 82                          glo     SP
     603/     B41 : FC 06                       adi     ((0+6))#256
     603/     B43 : AE                          plo     MEMADDR
     603/     B44 : 92                          ghi     SP
     603/     B45 : 7C 00                       adci    ((0+6))>>8; was/256
     603/     B47 : BE                          phi     MEMADDR
     603/     B48 : =>FALSE                     else
     603/     B48 :                                     ldAD    memAddr,SP
     603/     B48 : [603]                       endif
     603/     B48 : 8B                          glo     R11
     603/     B49 : 5E                          str     memAddr
     604/     B4A : (MACRO)             	ld2 R11,'O',sp,(2+6)
     604/     B4A : =>TRUE                      if      ('O'='O')
     604/     B4A :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     604/     B4A : 82                          glo     SP
     604/     B4B : FC 08                       adi     ((2+6))#256
     604/     B4D : AE                          plo     MEMADDR
     604/     B4E : 92                          ghi     SP
     604/     B4F : 7C 00                       adci    ((2+6))>>8; was/256
     604/     B51 : BE                          phi     MEMADDR
     604/     B52 : =>FALSE                     else
     604/     B52 :                                     ldAD    memAddr,SP
     604/     B52 : [604]                       endif
     604/     B52 : 4E                          lda     memAddr
     604/     B53 : BB                          phi     R11
     604/     B54 : 0E                          ldn     memAddr
     604/     B55 : AB                          plo     R11
     605/     B56 : (MACRO)             	st1 R11,'O',sp,(2+6); ASGNU1
     605/     B56 : =>TRUE                      if      ('O'='O')
     605/     B56 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     605/     B56 : 82                          glo     SP
     605/     B57 : FC 08                       adi     ((2+6))#256
     605/     B59 : AE                          plo     MEMADDR
     605/     B5A : 92                          ghi     SP
     605/     B5B : 7C 00                       adci    ((2+6))>>8; was/256
     605/     B5D : BE                          phi     MEMADDR
     605/     B5E : =>FALSE                     else
     605/     B5E :                                     ldAD    memAddr,SP
     605/     B5E : [605]                       endif
     605/     B5E : 8B                          glo     R11
     605/     B5F : 5E                          str     memAddr
     606/     B60 :                     ;void digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
     607/     B60 :                     ;    if (LOW==hilo){ //turn it off
     608/     B60 : (MACRO)             	ld1 R11,'O',sp,(2+6)
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 61 - 2/23/2013 7:47:57


     608/     B60 : =>TRUE                      if      ('O'='O')
     608/     B60 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     608/     B60 : 82                          glo     SP
     608/     B61 : FC 08                       adi     ((2+6))#256
     608/     B63 : AE                          plo     MEMADDR
     608/     B64 : 92                          ghi     SP
     608/     B65 : 7C 00                       adci    ((2+6))>>8; was/256
     608/     B67 : BE                          phi     MEMADDR
     608/     B68 : =>FALSE                     else
     608/     B68 :                                     ldAD    memAddr,SP
     608/     B68 : [608]                       endif
     608/     B68 : 0E                          ldn     memAddr
     608/     B69 : AB                          plo     R11
     609/     B6A : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     609/     B6A : F8 00                       ldi     0
     609/     B6C : BB                          phi     11
     610/     B6D : (MACRO)             	jneU2I r11,0,L76; NE
     610/     B6D : 8B                          glo     R11
     610/     B6E : FF 00                       smi     (0)#256
     610/     B70 : CA 0B C6                    lbnz    L76
     610/     B73 : 9B                          ghi     R11
     610/     B74 : 7F 00                       smbi    (0)>>8; was/256
     610/     B76 : CA 0B C6                    lbnz    L76
     611/     B79 :                     ;        PIN4= PIN4 & ~ (1<<n); //with AND
     612/     B79 : (MACRO)             	ld1 R11,'D',(_PIN4),0
     612/     B79 : =>FALSE                     if      ('D'='O')
     612/     B79 :                                     ldAX    memAddr,(_PIN4),0
     612/     B79 : =>TRUE                      else
     612/     B79 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     612/     B79 : F8 03                       ldi     ((_PIN4))&255
     612/     B7B : AE                          plo     MEMADDR
     612/     B7C : F8 00                       ldi     ((_PIN4))>>8; was/256
     612/     B7E : BE                          phi     MEMADDR
     612/     B7F : [612]                       endif
     612/     B7F : 0E                          ldn     memAddr
     612/     B80 : AB                          plo     R11
     613/     B81 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     613/     B81 : F8 00                       ldi     0
     613/     B83 : BB                          phi     11
     614/     B84 : (MACRO)             	ldaD R10,1
     614/     B84 : F8 01                       ldi     (1)&255
     614/     B86 : AA                          plo     R10
     614/     B87 : F8 00                       ldi     (1)>>8; was/256
     614/     B89 : BA                          phi     R10
     615/     B8A : (MACRO)             	ld1 R9,'O',sp,(0+6)
     615/     B8A : =>TRUE                      if      ('O'='O')
     615/     B8A :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     615/     B8A : 82                          glo     SP
     615/     B8B : FC 06                       adi     ((0+6))#256
     615/     B8D : AE                          plo     MEMADDR
     615/     B8E : 92                          ghi     SP
     615/     B8F : 7C 00                       adci    ((0+6))>>8; was/256
     615/     B91 : BE                          phi     MEMADDR
     615/     B92 : =>FALSE                     else
     615/     B92 :                                     ldAD    memAddr,SP
     615/     B92 : [615]                       endif
     615/     B92 : 0E                          ldn     memAddr
     615/     B93 : A9                          plo     R9
     616/     B94 : (MACRO)             	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
     616/     B94 : F8 00                       ldi     0
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 62 - 2/23/2013 7:47:57


     616/     B96 : B9                          phi     9
     617/     B97 : (MACRO)             	shl2R R10,R9; lshi2(r,r)
     617/     B97 : 89                          glo     R9            ;the + and - are nameless temporary symbols
     617/     B98 : C2 0B A7                    lbz     +
     617/     B9B : AE                          plo     memaddr
     617/     B9C :  (MACRO-2)          -       shl2    R10
     617/     B9C : 8A                          glo     R10
     617/     B9D : FE                          shl
     617/     B9E : AA                          plo     R10
     617/     B9F : 9A                          ghi     R10
     617/     BA0 : 7E                          shlc
     617/     BA1 : BA                          phi     R10
     617/     BA2 : 2E                          dec     memaddr
     617/     BA3 : 8E                          glo     memaddr
     617/     BA4 : CA 0B 9C                    lbnz    -
     617/     BA7 :                     +
     618/     BA7 : (MACRO)             	alu2I R10,R10,-1,xri,xri; was?	cpy2 R10,R10+xor2I R10,-1
     618/     BA7 : 8A                          glo     R10
     618/     BA8 : FB FF                       XRI     (-1)#256
     618/     BAA : AA                          plo     R10
     618/     BAB : 9A                          ghi     R10
     618/     BAC : FB FF                       XRI     (-1)>>8; was/256
     618/     BAE : BA                          phi     R10
     619/     BAF : (MACRO)             	alu2 R11,R11,R10,and,and
     619/     BAF : 22                          dec     sp ;make a work ares
     619/     BB0 : 8A                          glo     R10
     619/     BB1 : 52                          str     sp
     619/     BB2 : 8B                          glo     R11
     619/     BB3 : F2                          AND             ;calculate the low order byte
     619/     BB4 : AB                          plo     R11
     619/     BB5 : 9A                          ghi     R10
     619/     BB6 : 52                          str     sp
     619/     BB7 : 9B                          ghi     R11
     619/     BB8 : F2                          AND             ;calculate the high byte
     619/     BB9 : BB                          phi     R11
     619/     BBA : 12                          inc     sp      ;release the work area
     620/     BBB : (MACRO)             	st1 R11,'D',(_PIN4),0; ASGNU1
     620/     BBB : =>FALSE                     if      ('D'='O')
     620/     BBB :                                     ldAX    memAddr,(_PIN4),0
     620/     BBB : =>TRUE                      else
     620/     BBB :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     620/     BBB : F8 03                       ldi     ((_PIN4))&255
     620/     BBD : AE                          plo     MEMADDR
     620/     BBE : F8 00                       ldi     ((_PIN4))>>8; was/256
     620/     BC0 : BE                          phi     MEMADDR
     620/     BC1 : [620]                       endif
     620/     BC1 : 8B                          glo     R11
     620/     BC2 : 5E                          str     memAddr
     621/     BC3 :                     ;    } else { //turn it on
     622/     BC3 : C0 0C 08            	lbr L77
     623/     BC6 :                     L76:
     624/     BC6 :                     ;        PIN4=PIN4|(1<<n); //with OR
     625/     BC6 : (MACRO)             	ld1 R11,'D',(_PIN4),0
     625/     BC6 : =>FALSE                     if      ('D'='O')
     625/     BC6 :                                     ldAX    memAddr,(_PIN4),0
     625/     BC6 : =>TRUE                      else
     625/     BC6 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     625/     BC6 : F8 03                       ldi     ((_PIN4))&255
     625/     BC8 : AE                          plo     MEMADDR
     625/     BC9 : F8 00                       ldi     ((_PIN4))>>8; was/256
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 63 - 2/23/2013 7:47:57


     625/     BCB : BE                          phi     MEMADDR
     625/     BCC : [625]                       endif
     625/     BCC : 0E                          ldn     memAddr
     625/     BCD : AB                          plo     R11
     626/     BCE : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     626/     BCE : F8 00                       ldi     0
     626/     BD0 : BB                          phi     11
     627/     BD1 : (MACRO)             	ldaD R10,1
     627/     BD1 : F8 01                       ldi     (1)&255
     627/     BD3 : AA                          plo     R10
     627/     BD4 : F8 00                       ldi     (1)>>8; was/256
     627/     BD6 : BA                          phi     R10
     628/     BD7 : (MACRO)             	ld1 R9,'O',sp,(0+6)
     628/     BD7 : =>TRUE                      if      ('O'='O')
     628/     BD7 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     628/     BD7 : 82                          glo     SP
     628/     BD8 : FC 06                       adi     ((0+6))#256
     628/     BDA : AE                          plo     MEMADDR
     628/     BDB : 92                          ghi     SP
     628/     BDC : 7C 00                       adci    ((0+6))>>8; was/256
     628/     BDE : BE                          phi     MEMADDR
     628/     BDF : =>FALSE                     else
     628/     BDF :                                     ldAD    memAddr,SP
     628/     BDF : [628]                       endif
     628/     BDF : 0E                          ldn     memAddr
     628/     BE0 : A9                          plo     R9
     629/     BE1 : (MACRO)             	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
     629/     BE1 : F8 00                       ldi     0
     629/     BE3 : B9                          phi     9
     630/     BE4 : (MACRO)             	shl2R R10,R9; lshi2(r,r)
     630/     BE4 : 89                          glo     R9            ;the + and - are nameless temporary symbols
     630/     BE5 : C2 0B F4                    lbz     +
     630/     BE8 : AE                          plo     memaddr
     630/     BE9 :  (MACRO-2)          -       shl2    R10
     630/     BE9 : 8A                          glo     R10
     630/     BEA : FE                          shl
     630/     BEB : AA                          plo     R10
     630/     BEC : 9A                          ghi     R10
     630/     BED : 7E                          shlc
     630/     BEE : BA                          phi     R10
     630/     BEF : 2E                          dec     memaddr
     630/     BF0 : 8E                          glo     memaddr
     630/     BF1 : CA 0B E9                    lbnz    -
     630/     BF4 :                     +
     631/     BF4 : (MACRO)             	alu2 R11,R11,R10,or,or
     631/     BF4 : 22                          dec     sp ;make a work ares
     631/     BF5 : 8A                          glo     R10
     631/     BF6 : 52                          str     sp
     631/     BF7 : 8B                          glo     R11
     631/     BF8 : F1                          OR             ;calculate the low order byte
     631/     BF9 : AB                          plo     R11
     631/     BFA : 9A                          ghi     R10
     631/     BFB : 52                          str     sp
     631/     BFC : 9B                          ghi     R11
     631/     BFD : F1                          OR             ;calculate the high byte
     631/     BFE : BB                          phi     R11
     631/     BFF : 12                          inc     sp      ;release the work area
     632/     C00 : (MACRO)             	st1 R11,'D',(_PIN4),0; ASGNU1
     632/     C00 : =>FALSE                     if      ('D'='O')
     632/     C00 :                                     ldAX    memAddr,(_PIN4),0
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 64 - 2/23/2013 7:47:57


     632/     C00 : =>TRUE                      else
     632/     C00 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     632/     C00 : F8 03                       ldi     ((_PIN4))&255
     632/     C02 : AE                          plo     MEMADDR
     632/     C03 : F8 00                       ldi     ((_PIN4))>>8; was/256
     632/     C05 : BE                          phi     MEMADDR
     632/     C06 : [632]                       endif
     632/     C06 : 8B                          glo     R11
     632/     C07 : 5E                          str     memAddr
     633/     C08 :                     ;    }
     634/     C08 :                     L77:
     635/     C08 :                     ;    OUT4(PIN4); //
     636/     C08 : (MACRO)             	ld1 R12,'D',(_PIN4),0
     636/     C08 : =>FALSE                     if      ('D'='O')
     636/     C08 :                                     ldAX    memAddr,(_PIN4),0
     636/     C08 : =>TRUE                      else
     636/     C08 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     636/     C08 : F8 03                       ldi     ((_PIN4))&255
     636/     C0A : AE                          plo     MEMADDR
     636/     C0B : F8 00                       ldi     ((_PIN4))>>8; was/256
     636/     C0D : BE                          phi     MEMADDR
     636/     C0E : [636]                       endif
     636/     C0E : 0E                          ldn     memAddr
     636/     C0F : AC                          plo     R12
     637/     C10 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     637/     C10 : F8 00                       ldi     0
     637/     C12 : BC                          phi     12
     638/     C13 : (MACRO)             	Ccall _OUT4
     638/     C13 : D4                          sep     RCALL
     638/     C14 : 0C B5                       dw      _OUT4
     639/     C16 :                     ;}
     640/     C16 :                     L75:
     641/     C16 : (MACRO)             	release 4
     641/     C16 :                     ;for release we adjust the low byte first 
     641/     C16 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     641/     C16 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     641/     C16 : 82                          glo     SP
     641/     C17 : FC 04                       ADI     (4)#256
     641/     C19 : A2                          plo     SP
     641/     C1A : 92                          ghi     SP
     641/     C1B : 7C 00                       ADCI     (4)>>8; was/256
     641/     C1D : B2                          phi     SP
     642/     C1E : (MACRO)             	Cretn
     642/     C1E : D5                          sep     RRET
     643/     C1F :                     
     644/     C1F :                     _olduinoincluder:
     645/     C1F :                     ;void olduinoincluder(){
     646/     C1F :                     ;	asm("\tinclude olduino.inc\n");
     647/     C1F :                     	include olduino.inc
(1)    1/     C1F :                     ;Feb 8 2013, first version of assembler routines for olduino support
(1)    2/     C1F :                     	align 64	;needed to make sure all on same page
(1)    3/     C40 :                     	
(1)    4/     C40 :                     ;digitalWrite2(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    5/     C40 :                     _digitalWrite2:
(1)    6/     C40 : 8C                  	glo regArg1	;get the bit number
(1)    7/     C41 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/     C43 : AE                  	plo memaddr
(1)    9/     C44 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     C45 : BE                  	phi memaddr	
(1)   11/     C46 : 0E                  	ldn memaddr	;pick up the bit pattern
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(olduino.inc) - page 65 - 2/23/2013 7:47:57


(1)   12/     C47 : A8                  	plo rt1		;save it in a temp
(1)   13/     C48 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   13/     C48 : =>FALSE                     if      (_PIN4='O')
(1)   13/     C48 :                                     ldAX    MEMADDR,,
(1)   13/     C48 : =>TRUE                      else
(1)   13/     C48 :  (MACRO-2)                          ldAD    MEMADDR,
(1)   13/     C48 : F8 00                       ldi     ()&255
(1)   13/     C4A : AE                          plo     MEMADDR
(1)   13/     C4B : F8 00                       ldi     ()>>8; was/256
(1)   13/     C4D : BE                          phi     MEMADDR
(1)   13/     C4E : [13]                        endif
(1)   14/     C4E : EE                  	sex memaddr	;prepare to change it
(1)   15/     C4F : 8D                  	glo regArg2	;get on/off switch
(1)   16/     C50 : 32 57               	bz $$setbitoff
(1)   17/     C52 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     C52 : 88                  	glo rt1		;get the bit value back
(1)   19/     C53 : F1                  	or		;apply it
(1)   20/     C54 : 5E                  	str memaddr	;and save it
(1)   21/     C55 : 30 5C               	br $$outit	;go fnish up
(1)   22/     C57 :                     $$setbitoff:
(1)   23/     C57 : 88                  	glo rt1		;get the bit pattern
(1)   24/     C58 : FB FF               	xri 0xff	;reverse it
(1)   25/     C5A : F2                  	and		;combine it with the existing pin value
(1)   26/     C5B : 5E                  	str memaddr	;and save it
(1)   27/     C5C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     C5C :                     $$outit:
(1)   29/     C5C : 64                  	out 4		;X was already set to memaddr
(1)   30/     C5D : E2                  	sex sp		;reset X
(1)   31/     C5E : (MACRO)             	cretn
(1)   31/     C5E : D5                          sep     RRET
(1)   32/     C5F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     C67 :                     
(1)   34/     C67 :                     _digitalWriteBV
(1)   35/     C67 :                     ;digitalwrite where the pin number is supplies as a bit mask
     648/     C67 :                     ;}
     649/     C67 :                     L78:
     650/     C67 : (MACRO)             	Cretn
     650/     C67 : D5                          sep     RRET
     651/     C68 :                     
     652/     C68 :                     L66:
     653/     C68 : 65                  	db 101
     654/     C69 : 78                  	db 120
     655/     C6A : 69                  	db 105
     656/     C6B : 74                  	db 116
     657/     C6C : 20                  	db 32
     658/     C6D : 25                  	db 37
     659/     C6E : 64                  	db 100
     660/     C6F : 0A                  	db 10
     661/     C70 : 00                  	db 0
     662/     C71 :                     L4:
     663/     C71 : 68                  	db 104
     664/     C72 : 65                  	db 101
     665/     C73 : 6C                  	db 108
     666/     C74 : 6C                  	db 108
     667/     C75 : 6F                  	db 111
     668/     C76 : 20                  	db 32
     669/     C77 : 57                  	db 87
     670/     C78 : 6F                  	db 111
     671/     C79 : 72                  	db 114
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 66 - 2/23/2013 7:47:57


     672/     C7A : 6C                  	db 108
     673/     C7B : 64                  	db 100
     674/     C7C : 21                  	db 33
     675/     C7D : 0A                  	db 10
     676/     C7E : 00                  	db 0
     677/     C7F :                     	include lcc1802EpiloNG.inc
(1)    1/     C7F :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     C7F :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     C7F :                     ;this is the version published with the lcc1802121229 release
(1)    4/     C7F :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     C7F :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     C7F :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     C7F :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     C7F :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     C7F :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     C7F :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     C7F : =EH                 rwork	equ	memAddr	;work register
(1)   12/     C7F :                     lcc1802init:	
(1)   13/     C7F : (MACRO)             	ldiReg	RCALL,_call
(1)   13/     C7F : F8 01                       ldi     (_CALL)&255
(1)   13/     C81 : A4                          plo     RCALL
(1)   13/     C82 : F8 0D                       ldi     (_CALL)>>8; was/256
(1)   13/     C84 : B4                          phi     RCALL
(1)   14/     C85 : (MACRO)             	ldiReg	RRET,_return
(1)   14/     C85 : F8 12                       ldi     (_RETURN)&255
(1)   14/     C87 : A5                          plo     RRET
(1)   14/     C88 : F8 0D                       ldi     (_RETURN)>>8; was/256
(1)   14/     C8A : B5                          phi     RRET
(1)   15/     C8B : (MACRO)             	ldiReg	SP,0x3fff	;wjr jan 1 start stack at 16K-1
(1)   15/     C8B : F8 FF                       ldi     (0X3FFF)&255
(1)   15/     C8D : A2                          plo     SP
(1)   15/     C8E : F8 3F                       ldi     (0X3FFF)>>8; was/256
(1)   15/     C90 : B2                          phi     SP
(1)   16/     C91 : E2                  	sex	SP
(1)   17/     C92 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   17/     C92 : F8 99                       ldi     ($$_00000)&255
(1)   17/     C94 : A3                          plo     RPC
(1)   17/     C95 : F8 0C                       ldi     ($$_00000)>>8; was/256
(1)   17/     C97 : B3                          phi     RPC
(1)   18/     C98 : D3                  	sep	RPC
(1)   19/     C99 :                     $$_00000:
(1)   20/     C99 : (MACRO)             	Ccall _main	;call the main routine
(1)   20/     C99 : D4                          sep     RCALL
(1)   20/     C9A : 00 06                       dw      _MAIN
(1)   21/     C9C : C0 0C 9C            $$_die:	lbr	$$_die		;loop here when main returns
(1)   22/     C9F : DE AD               	db	0xde,0xad
(1)   23/     CA1 :                     
(1)   24/     CA1 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   25/     CA1 :                     _setqOn:
(1)   26/     CA1 : 7B                  	seq
(1)   27/     CA2 : (MACRO)             	Cretn
(1)   27/     CA2 : D5                          sep     RRET
(1)   28/     CA3 :                     _setqOff:
(1)   29/     CA3 : 7A                  	req
(1)   30/     CA4 : (MACRO)             	Cretn
(1)   30/     CA4 : D5                          sep     RRET
(1)   31/     CA5 :                     
(1)   32/     CA5 :                     _modU2:	;16 bit unsigned remainder
(1)   33/     CA5 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   34/     CA5 : (MACRO)                 Ccall _divU2
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 67 - 2/23/2013 7:47:57


(1)   34/     CA5 : D4                          sep     RCALL
(1)   34/     CA6 : 0D 49                       dw      _DIVU2
(1)   35/     CA8 : 8D                      glo regArg2
(1)   36/     CA9 : AF                      plo retVal
(1)   37/     CAA : 9D                      ghi regArg2
(1)   38/     CAB : BF                      phi retVal
(1)   39/     CAC : (MACRO)                 Cretn
(1)   39/     CAC : D5                          sep     RRET
(1)   40/     CAD :                         
(1)   41/     CAD :                     _modI2:	;16 bit signed remainder
(1)   42/     CAD :                     	; just calls the 16 bit division then puts remainder into return value
(1)   43/     CAD : (MACRO)                 Ccall _divI2
(1)   43/     CAD : D4                          sep     RCALL
(1)   43/     CAE : 0D A4                       dw      _DIVI2
(1)   44/     CB0 : 8D                      glo regArg2
(1)   45/     CB1 : AF                      plo retVal
(1)   46/     CB2 : 9D                      ghi regArg2
(1)   47/     CB3 : BF                      phi retVal
(1)   48/     CB4 : (MACRO)                 Cretn
(1)   48/     CB4 : D5                          sep     RRET
(1)   49/     CB5 :                     
(1)   50/     CB5 :                     _out4:	
(1)   51/     CB5 : 8C                  	glo	regArg1
(1)   52/     CB6 : 22                  	dec	sp
(1)   53/     CB7 : 52                  	str	sp
(1)   54/     CB8 : 64                  	out	4
(1)   55/     CB9 : (MACRO)             	Cretn
(1)   55/     CB9 : D5                          sep     RRET
(1)   56/     CBA :                     
(1)   57/     CBA :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   58/     CBA :                     	align 256
(1)   59/     D00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   60/     D00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   61/     D00 : D3                  	sep     R3 ;go to subroutine
(1)   62/     D01 : E2                  _call	sex	SP ;make sure X=SP
(1)   63/     D02 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   64/     D03 : 22                  	dec	sp
(1)   65/     D04 : 73                  	stxd
(1)   66/     D05 : 86                  	glo	retAddr
(1)   67/     D06 : 52                  	str	sp	
(1)   68/     D07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   69/     D08 : A6                  	plo	retAddr
(1)   70/     D09 : 93                  	ghi	RPC
(1)   71/     D0A : B6                  	phi	retAddr
(1)   72/     D0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   73/     D0C : B3                  	phi	RPC
(1)   74/     D0D : 46                  	lda	retAddr
(1)   75/     D0E : A3                  	plo	RPC
(1)   76/     D0F : 30 00               	br	_call-1
(1)   77/     D11 :                     
(1)   78/     D11 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   79/     D11 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   80/     D11 : D3                  	sep	RPC	;return to the original program
(1)   81/     D12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   82/     D13 : A3                  	plo	RPC
(1)   83/     D14 : 96                  	ghi	retAddr
(1)   84/     D15 : B3                  	phi	RPC
(1)   85/     D16 : 42                  	lda	SP	;pick up old return address
(1)   86/     D17 : A6                  	plo	retAddr
(1)   87/     D18 : 42                  	lda	SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 68 - 2/23/2013 7:47:57


(1)   88/     D19 : B6                  	phi	retAddr
(1)   89/     D1A : 30 11               	br	_return-1
(1)   90/     D1C :                     
(1)   91/     D1C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   92/     D1C : F8 24               	ldi	(100-15-10-2)/2
(1)   93/     D1E : FF 01               $$mslp:	smi	1
(1)   94/     D20 : 3A 1E               	bnz	$$mslp
(1)   95/     D22 : (MACRO)             	Cretn
(1)   95/     D22 : D5                          sep     RRET
(1)   96/     D23 :                     
(1)   97/     D23 :                     
(1)   98/     D23 :                     	
(1)   99/     D23 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  100/     D23 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  101/     D23 :                     _mulu2:		
(1)  102/     D23 : 22                      dec sp
(1)  103/     D24 : F8 10                   ldi 16
(1)  104/     D26 : AE                      plo	rwork	;bit count
(1)  105/     D27 : F8 00                   ldi 0
(1)  106/     D29 : BF                      phi	retVal	;quotient
(1)  107/     D2A : AF                      plo retVal
(1)  108/     D2B :                     $$MultLoop16_16:
(1)  109/     D2B : 9C                      ghi regArg1
(1)  110/     D2C : F6                      shr
(1)  111/     D2D : BC                      phi regArg1
(1)  112/     D2E : 8C                      glo regArg1
(1)  113/     D2F : 76                      shrc
(1)  114/     D30 : AC                      plo regArg1
(1)  115/     D31 : 3B 3D                   bnf $$MultSkip16_16
(1)  116/     D33 : 8D                      glo regArg2
(1)  117/     D34 : 52                      str sp
(1)  118/     D35 : 8F                      glo retVal
(1)  119/     D36 : F4                      add 
(1)  120/     D37 : AF                      plo retVal
(1)  121/     D38 : 9D                      ghi regArg2
(1)  122/     D39 : 52                      str sp
(1)  123/     D3A : 9F                      ghi retVal
(1)  124/     D3B : 74                      adc
(1)  125/     D3C : BF                      phi retVal
(1)  126/     D3D :                     $$MultSkip16_16:
(1)  127/     D3D : 8D                      glo regArg2
(1)  128/     D3E : FE                      shl
(1)  129/     D3F : AD                      plo regArg2
(1)  130/     D40 : 9D                      ghi regArg2
(1)  131/     D41 : 7E                      shlc
(1)  132/     D42 : BD                      phi regArg2
(1)  133/     D43 : 2E                      dec rwork
(1)  134/     D44 : 8E                      glo rwork
(1)  135/     D45 : 3A 2B                   bnz $$MultLoop16_16
(1)  136/     D47 : 12                      inc sp
(1)  137/     D48 : D5                      sep 5
(1)  138/     D49 :                     
(1)  139/     D49 :                     
(1)  140/     D49 :                     _divU2:
(1)  141/     D49 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  142/     D49 :                     	; This is really an unsigned 23 bit divide
(1)  143/     D49 :                     	;thanks to Ted Rossin
(1)  144/     D49 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  145/     D49 : 22                      dec sp
(1)  146/     D4A : F8 10                   ldi 16
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 69 - 2/23/2013 7:47:57


(1)  147/     D4C : AE                      plo rwork
(1)  148/     D4D : F8 00                   ldi 0
(1)  149/     D4F : BF                      phi retVal
(1)  150/     D50 : AF                      plo retVal
(1)  151/     D51 : BE                      phi rwork
(1)  152/     D52 :                     $$DivLoop16_16:
(1)  153/     D52 : 8C                      glo regArg1
(1)  154/     D53 : FE                      shl
(1)  155/     D54 : AC                      plo regArg1
(1)  156/     D55 : 9C                      ghi regArg1
(1)  157/     D56 : 7E                      shlc
(1)  158/     D57 : BC                      phi regArg1
(1)  159/     D58 : 8F                      glo retVal
(1)  160/     D59 : 7E                      shlc
(1)  161/     D5A : AF                      plo retVal
(1)  162/     D5B : 9F                      ghi retVal
(1)  163/     D5C : 7E                      shlc
(1)  164/     D5D : BF                      phi retVal
(1)  165/     D5E : 9E                      ghi rwork
(1)  166/     D5F : 7E                      shlc
(1)  167/     D60 : BE                      phi rwork
(1)  168/     D61 : 3B 73                   bnf $$DivSub16_16
(1)  169/     D63 : 8D                      glo regArg2
(1)  170/     D64 : 52                      str sp
(1)  171/     D65 : 8F                      glo retVal
(1)  172/     D66 : F4                      add 
(1)  173/     D67 : AF                      plo retVal
(1)  174/     D68 : 9D                      ghi regArg2
(1)  175/     D69 : 52                      str sp
(1)  176/     D6A : 9F                      ghi retVal
(1)  177/     D6B : 74                      adc 
(1)  178/     D6C : BF                      phi retVal
(1)  179/     D6D : 9E                      ghi rwork
(1)  180/     D6E : 7C 00                   adci 0
(1)  181/     D70 : BE                      phi rwork
(1)  182/     D71 : 30 81                   br $$DivSkip16_16
(1)  183/     D73 :                     $$DivSub16_16:
(1)  184/     D73 : 8D                      glo regArg2
(1)  185/     D74 : 52                      str sp
(1)  186/     D75 : 8F                      glo retVal
(1)  187/     D76 : F7                      sm
(1)  188/     D77 : AF                      plo retVal
(1)  189/     D78 : 9D                      ghi regArg2
(1)  190/     D79 : 52                      str sp
(1)  191/     D7A : 9F                      ghi retVal
(1)  192/     D7B : 77                      smb 
(1)  193/     D7C : BF                      phi retVal
(1)  194/     D7D : 9E                      ghi rwork
(1)  195/     D7E : 7F 00                   smbi 0
(1)  196/     D80 : BE                      phi rwork 
(1)  197/     D81 :                     $$DivSkip16_16:
(1)  198/     D81 : FE                      shl
(1)  199/     D82 : 33 88                   bdf $$DivSkipClear16_16
(1)  200/     D84 :                     $$DivSetBit16_16:
(1)  201/     D84 : 8C                      glo regArg1
(1)  202/     D85 : F9 01                   ori  0x01
(1)  203/     D87 : AC                      plo regArg1
(1)  204/     D88 :                     $$DivSkipClear16_16:
(1)  205/     D88 : 2E                      dec rwork
(1)  206/     D89 : 8E                      glo rwork
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 70 - 2/23/2013 7:47:57


(1)  207/     D8A : 3A 52                   bnz $$DivLoop16_16
(1)  208/     D8C : 9E                      ghi rwork
(1)  209/     D8D : FE                      shl
(1)  210/     D8E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  211/     D90 : 8D                      glo regArg2
(1)  212/     D91 : 52                      str sp
(1)  213/     D92 : 8F                      glo retVal
(1)  214/     D93 : F4                      add
(1)  215/     D94 : AF                      plo retVal
(1)  216/     D95 : 9D                      ghi regArg2
(1)  217/     D96 : 52                      str sp
(1)  218/     D97 : 9F                      ghi retVal
(1)  219/     D98 : 74                      adc
(1)  220/     D99 : BF                      phi retVal
(1)  221/     D9A :                     $$DivSkipFinalAdd16_16:
(1)  222/     D9A : 12                      inc sp
(1)  223/     D9B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  224/     D9B : 8F                      glo retVal
(1)  225/     D9C : AD                      plo regArg2
(1)  226/     D9D : 9F                      ghi retVal
(1)  227/     D9E : BD                      phi regArg2
(1)  228/     D9F : 8C                      glo regArg1
(1)  229/     DA0 : AF                      plo retVal
(1)  230/     DA1 : 9C                      ghi regArg1
(1)  231/     DA2 : BF                      phi retVal
(1)  232/     DA3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  233/     DA3 : D5                      sep 5
(1)  234/     DA4 :                     
(1)  235/     DA4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  236/     DA4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  237/     DA4 :                     _divI2:
(1)  238/     DA4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  239/     DA4 : 22                      dec	sp	;leave a work area available
(1)  240/     DA5 : 9C                      ghi regArg1
(1)  241/     DA6 : 52                      str sp	;save the sign of the 1st arg
(1)  242/     DA7 : FE                      shl
(1)  243/     DA8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  244/     DAA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  244/     DAA : 8C                          glo     REGARG1                     ;(flip all the bits and add 1)
(1)  244/     DAB : FB FF                       xri     0xff
(1)  244/     DAD : AC                          plo     REGARG1
(1)  244/     DAE : 9C                          ghi     REGARG1
(1)  244/     DAF : FB FF                       xri     0xff
(1)  244/     DB1 : BC                          phi     REGARG1
(1)  244/     DB2 : 1C                          inc     REGARG1
(1)  245/     DB3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  246/     DB3 : 9D                      ghi regArg2
(1)  247/     DB4 : F3                      xor	
(1)  248/     DB5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  249/     DB6 : 9D                      ghi regArg2
(1)  250/     DB7 : FE                      shl
(1)  251/     DB8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  252/     DBA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  252/     DBA : 8D                          glo     REGARG2                     ;(flip all the bits and add 1)
(1)  252/     DBB : FB FF                       xri     0xff
(1)  252/     DBD : AD                          plo     REGARG2
(1)  252/     DBE : 9D                          ghi     REGARG2
(1)  252/     DBF : FB FF                       xri     0xff
(1)  252/     DC1 : BD                          phi     REGARG2
(1)  252/     DC2 : 1D                          inc     REGARG2
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 71 - 2/23/2013 7:47:57


(1)  253/     DC3 :                     $$pos2: ; both args now +v
(1)  254/     DC3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  254/     DC3 : D4                          sep     RCALL
(1)  254/     DC4 : 0D 49                       dw      _DIVU2
(1)  255/     DC6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  256/     DC6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  257/     DC7 : FE                      shl
(1)  258/     DC8 : 3B D3                   bnf $$done ;if the signs were different
(1)  259/     DCA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  259/     DCA : 8F                          glo     RETVAL                     ;(flip all the bits and add 1)
(1)  259/     DCB : FB FF                       xri     0xff
(1)  259/     DCD : AF                          plo     RETVAL
(1)  259/     DCE : 9F                          ghi     RETVAL
(1)  259/     DCF : FB FF                       xri     0xff
(1)  259/     DD1 : BF                          phi     RETVAL
(1)  259/     DD2 : 1F                          inc     RETVAL
(1)  260/     DD3 :                     $$done:
(1)  261/     DD3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  262/     DD3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  262/     DD3 : D5                          sep     RRET
(1)  263/     DD4 :                     
(1)  264/     DD4 :                     
(1)  265/     DD4 :                     	align 256    ;32 bit operations follow
(1)  266/     E00 :                     _divu4:
(1)  267/     E00 :                     ;This is an unsigned 32 bit restoring division
(1)  268/     E00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  269/     E00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  270/     E00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  271/     E00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  272/     E00 :                     
(1)  273/     E00 : F8 20               	ldi 32		;set loop count
(1)  274/     E02 : AE                  	plo memaddr	;in temp register
(1)  275/     E03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  275/     E03 : F8 00                       ldi     (0)&255
(1)  275/     E05 : AD                          plo     RP1P2
(1)  275/     E06 : F8 00                       ldi     ((0)>>8)&255; 
(1)  275/     E08 : BD                          phi     RP1P2
(1)  275/     E09 : F8 00                       ldi     ((0)>>16)&255; 
(1)  275/     E0B : AC                          plo     RP1P2-1
(1)  275/     E0C : F8 00                       ldi     ((0)>>24)&255; 
(1)  275/     E0E : BC                          phi     RP1P2-1
(1)  276/     E0F :                     $$loop:
(1)  277/     E0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  277/     E0F : 89                          glo     RL8     ;start with low byte of second register
(1)  277/     E10 : FE                          shl             ;shift left once
(1)  277/     E11 : A9                          plo     RL8     ; save it
(1)  277/     E12 : 99                          ghi     RL8     ;high byte of second RL8
(1)  277/     E13 : 7E                          shlc            ;shift one bit carrying
(1)  277/     E14 : B9                          phi     RL8     ;save it
(1)  277/     E15 : 88                          glo     RL8-1   ;now the bottom byte of top RL8
(1)  277/     E16 : 7E                          shlc
(1)  277/     E17 : A8                          plo     RL8-1
(1)  277/     E18 : 98                          ghi     RL8-1   ;finally the top byte of the high order RL8
(1)  277/     E19 : 7E                          shlc            ;gets the last shift
(1)  277/     E1A : B8                          phi     RL8-1   ;and we're done
(1)  278/     E1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  278/     E1B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  278/     E1C : 7E                          shlc            ;shift left once continuing carry
(1)  278/     E1D : AD                          plo     RP1P2     ; save it
(1)  278/     E1E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 72 - 2/23/2013 7:47:57


(1)  278/     E1F : 7E                          shlc            ;shift one bit carrying
(1)  278/     E20 : BD                          phi     RP1P2     ;save it
(1)  278/     E21 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  278/     E22 : 7E                          shlc
(1)  278/     E23 : AC                          plo     RP1P2-1
(1)  278/     E24 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  278/     E25 : 7E                          shlc            ;gets the last shift
(1)  278/     E26 : BC                          phi     RP1P2-1   ;and we're done
(1)  279/     E27 :                     
(1)  280/     E27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  280/     E27 : 22                          dec     sp ;make a work ares
(1)  280/     E28 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  280/     E29 : 52                          str     sp      ;so arithmetic operations start there
(1)  280/     E2A : 8D                          glo     RP1P2
(1)  280/     E2B : F7                          SM             ;calculate the low order byte
(1)  280/     E2C : AD                          plo     RP1P2
(1)  280/     E2D : 9B                          ghi     RL10
(1)  280/     E2E : 52                          str     sp
(1)  280/     E2F : 9D                          ghi     RP1P2
(1)  280/     E30 : 77                          SMB             ;calculate the second byte
(1)  280/     E31 : BD                          phi     RP1P2
(1)  280/     E32 : 8A                          glo     RL10-1
(1)  280/     E33 : 52                          str     sp
(1)  280/     E34 : 8C                          glo     RP1P2-1
(1)  280/     E35 : 77                          SMB             ;calculate the third byte
(1)  280/     E36 : AC                          plo     RP1P2-1
(1)  280/     E37 : 9A                          ghi     RL10-1
(1)  280/     E38 : 52                          str     sp
(1)  280/     E39 : 9C                          ghi     RP1P2-1
(1)  280/     E3A : 77                          SMB             ;calculate the high byte
(1)  280/     E3B : BC                          phi     RP1P2-1
(1)  280/     E3C : 12                          inc     sp      ;release the work area
(1)  281/     E3D :                     
(1)  282/     E3D : FA 80               	ani 0x80	;check the top bit
(1)  283/     E3F : 32 5D               	bz $$norestore	;if it's 0
(1)  284/     E41 : 89                  		glo RL8
(1)  285/     E42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  286/     E44 : A9                  		plo RL8
(1)  287/     E45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  287/     E45 : 22                          dec     sp ;make a work ares
(1)  287/     E46 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  287/     E47 : 52                          str     sp      ;so arithmetic operations start there
(1)  287/     E48 : 8D                          glo     RP1P2
(1)  287/     E49 : F4                          ADD             ;calculate the low order byte
(1)  287/     E4A : AD                          plo     RP1P2
(1)  287/     E4B : 9B                          ghi     RL10
(1)  287/     E4C : 52                          str     sp
(1)  287/     E4D : 9D                          ghi     RP1P2
(1)  287/     E4E : 74                          ADC             ;calculate the second byte
(1)  287/     E4F : BD                          phi     RP1P2
(1)  287/     E50 : 8A                          glo     RL10-1
(1)  287/     E51 : 52                          str     sp
(1)  287/     E52 : 8C                          glo     RP1P2-1
(1)  287/     E53 : 74                          ADC             ;calculate the third byte
(1)  287/     E54 : AC                          plo     RP1P2-1
(1)  287/     E55 : 9A                          ghi     RL10-1
(1)  287/     E56 : 52                          str     sp
(1)  287/     E57 : 9C                          ghi     RP1P2-1
(1)  287/     E58 : 74                          ADC             ;calculate the high byte
(1)  287/     E59 : BC                          phi     RP1P2-1
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 73 - 2/23/2013 7:47:57


(1)  287/     E5A : 12                          inc     sp      ;release the work area
(1)  288/     E5B : 30 61               	br $$endlp 	;else
(1)  289/     E5D :                     $$norestore:
(1)  290/     E5D : 89                  		glo RL8
(1)  291/     E5E : F9 01               		ori 1	;turn on the bottom bit
(1)  292/     E60 : A9                  		plo RL8
(1)  293/     E61 :                     	;end if
(1)  294/     E61 :                     $$endlp:
(1)  295/     E61 : 2E                  	dec memaddr	;check the cycle count
(1)  296/     E62 : 8E                  	glo memaddr
(1)  297/     E63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  298/     E65 :                     	
(1)  299/     E65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  299/     E65 : D5                          sep     RRET
(1)  300/     E66 :                     		
(1)  301/     E66 :                     
(1)  302/     E66 :                     _mulu4:
(1)  303/     E66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  304/     E66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  305/     E66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  306/     E66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  307/     E66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  308/     E66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  309/     E66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  310/     E66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  311/     E66 :                     	;for 10 we subtract and shift
(1)  312/     E66 :                     	;for 00 and 11 we just shift
(1)  313/     E66 :                     
(1)  314/     E66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  314/     E66 : F8 00                       ldi     (0)&255
(1)  314/     E68 : AD                          plo     RP1P2
(1)  314/     E69 : F8 00                       ldi     ((0)>>8)&255; 
(1)  314/     E6B : BD                          phi     RP1P2
(1)  314/     E6C : F8 00                       ldi     ((0)>>16)&255; 
(1)  314/     E6E : AC                          plo     RP1P2-1
(1)  314/     E6F : F8 00                       ldi     ((0)>>24)&255; 
(1)  314/     E71 : BC                          phi     RP1P2-1
(1)  315/     E72 : F8 20                   ldi 32
(1)  316/     E74 : AE                      plo memaddr		;cycle count
(1)  317/     E75 : FC 00                   adi 0		;clear df
(1)  318/     E77 :                     $$mloop:
(1)  319/     E77 : 89                      glo RL8
(1)  320/     E78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  321/     E7A : 3B 96                   bnf	$$check_sub	;
(1)  322/     E7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  323/     E7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  324/     E7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  324/     E7E : 22                          dec     sp ;make a work ares
(1)  324/     E7F : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  324/     E80 : 52                          str     sp      ;so arithmetic operations start there
(1)  324/     E81 : 8D                          glo     RP1P2
(1)  324/     E82 : F4                          ADD             ;calculate the low order byte
(1)  324/     E83 : AD                          plo     RP1P2
(1)  324/     E84 : 9B                          ghi     RL10
(1)  324/     E85 : 52                          str     sp
(1)  324/     E86 : 9D                          ghi     RP1P2
(1)  324/     E87 : 74                          ADC             ;calculate the second byte
(1)  324/     E88 : BD                          phi     RP1P2
(1)  324/     E89 : 8A                          glo     RL10-1
(1)  324/     E8A : 52                          str     sp
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 74 - 2/23/2013 7:47:57


(1)  324/     E8B : 8C                          glo     RP1P2-1
(1)  324/     E8C : 74                          ADC             ;calculate the third byte
(1)  324/     E8D : AC                          plo     RP1P2-1
(1)  324/     E8E : 9A                          ghi     RL10-1
(1)  324/     E8F : 52                          str     sp
(1)  324/     E90 : 9C                          ghi     RP1P2-1
(1)  324/     E91 : 74                          ADC             ;calculate the high byte
(1)  324/     E92 : BC                          phi     RP1P2-1
(1)  324/     E93 : 12                          inc     sp      ;release the work area
(1)  325/     E94 : 30 AE                   br $$shift
(1)  326/     E96 :                     $$check_sub:
(1)  327/     E96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  328/     E98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  329/     E98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  329/     E98 : 22                          dec     sp ;make a work ares
(1)  329/     E99 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  329/     E9A : 52                          str     sp      ;so arithmetic operations start there
(1)  329/     E9B : 8D                          glo     RP1P2
(1)  329/     E9C : F7                          SM             ;calculate the low order byte
(1)  329/     E9D : AD                          plo     RP1P2
(1)  329/     E9E : 9B                          ghi     RL10
(1)  329/     E9F : 52                          str     sp
(1)  329/     EA0 : 9D                          ghi     RP1P2
(1)  329/     EA1 : 77                          SMB             ;calculate the second byte
(1)  329/     EA2 : BD                          phi     RP1P2
(1)  329/     EA3 : 8A                          glo     RL10-1
(1)  329/     EA4 : 52                          str     sp
(1)  329/     EA5 : 8C                          glo     RP1P2-1
(1)  329/     EA6 : 77                          SMB             ;calculate the third byte
(1)  329/     EA7 : AC                          plo     RP1P2-1
(1)  329/     EA8 : 9A                          ghi     RL10-1
(1)  329/     EA9 : 52                          str     sp
(1)  329/     EAA : 9C                          ghi     RP1P2-1
(1)  329/     EAB : 77                          SMB             ;calculate the high byte
(1)  329/     EAC : BC                          phi     RP1P2-1
(1)  329/     EAD : 12                          inc     sp      ;release the work area
(1)  330/     EAE :                     $$shift:
(1)  331/     EAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  331/     EAE : 9C                          ghi     RP1P2-1   ;long RP1P2 pairs start at RP1P2-1
(1)  331/     EAF : FE                          shl             ;set DF to the sign
(1)  331/     EB0 : 9C                          ghi     RP1P2-1   ;get the top byte back
(1)  331/     EB1 : 76                          shrc            ;shift one bit extending the sign
(1)  331/     EB2 : BC                          phi     RP1P2-1
(1)  331/     EB3 : 8C                          glo     RP1P2-1
(1)  331/     EB4 : 76                          shrc
(1)  331/     EB5 : AC                          plo     RP1P2-1
(1)  331/     EB6 : 9D                          ghi     RP1P2     ;get the top byte of the low order RP1P2
(1)  331/     EB7 : 76                          shrc            ;shift one bit extending the sign
(1)  331/     EB8 : BD                          phi     RP1P2
(1)  331/     EB9 : 8D                          glo     RP1P2     ;finish with the low byte of the 2nd RP1P2 of the pair
(1)  331/     EBA : 76                          shrc
(1)  331/     EBB : AD                          plo     RP1P2
(1)  332/     EBC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  332/     EBC : 98                          ghi     RL8-1   ;long RL8 pairs start at RL8-1
(1)  332/     EBD : 76                          shrc            ;shift one bit extending the sign
(1)  332/     EBE : B8                          phi     RL8-1
(1)  332/     EBF : 88                          glo     RL8-1
(1)  332/     EC0 : 76                          shrc
(1)  332/     EC1 : A8                          plo     RL8-1
(1)  332/     EC2 : 99                          ghi     RL8     ;get the top byte of the low order RL8
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 75 - 2/23/2013 7:47:57


(1)  332/     EC3 : 76                          shrc            ;shift one bit extending the sign
(1)  332/     EC4 : B9                          phi     RL8
(1)  332/     EC5 : 89                          glo     RL8     ;finish with the low byte of the 2nd RL8 of the pair
(1)  332/     EC6 : 76                          shrc
(1)  332/     EC7 : A9                          plo     RL8
(1)  333/     EC8 :                     
(1)  334/     EC8 : 2E                      dec memaddr		;cycle count
(1)  335/     EC9 : 8E                      glo memaddr
(1)  336/     ECA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  337/     ECC :                         
(1)  338/     ECC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  338/     ECC : D5                          sep     RRET
(1)  339/     ECD :                     
(1)  340/     ECD :                     	align 256
(1)  341/     F00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  342/     F00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  343/     F00 :                     _divI4:
(1)  344/     F00 : 22                      dec	sp	;leave a work area available
(1)  345/     F01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  346/     F02 : 52                      str sp	;save the sign of the 1st arg
(1)  347/     F03 : FE                      shl
(1)  348/     F04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  349/     F06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  349/     F06 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  349/     F06 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/     F07 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  349/     F09 : A9                          plo     RL8
(1)  349/     F0A : 99                          ghi     RL8
(1)  349/     F0B : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  349/     F0D : B9                          phi     RL8
(1)  349/     F0E : 88                          glo     RL8-1
(1)  349/     F0F : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  349/     F11 : A8                          plo     RL8-1
(1)  349/     F12 : 98                          ghi     RL8-1
(1)  349/     F13 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  349/     F15 : B8                          phi     RL8-1
(1)  349/     F16 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  349/     F16 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/     F17 : FC 01                       ADI     (1)&255
(1)  349/     F19 : A9                          plo     RL8
(1)  349/     F1A : 99                          ghi     RL8
(1)  349/     F1B : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  349/     F1D : B9                          phi     RL8
(1)  349/     F1E : 88                          glo     RL8-1
(1)  349/     F1F : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  349/     F21 : A8                          plo     RL8-1
(1)  349/     F22 : 98                          ghi     RL8-1
(1)  349/     F23 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  349/     F25 : B8                          phi     RL8-1
(1)  350/     F26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  351/     F26 : 9A                      ghi RL10-1
(1)  352/     F27 : F3                      xor	
(1)  353/     F28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  354/     F29 : 9A                      ghi RL10-1
(1)  355/     F2A : FE                      shl
(1)  356/     F2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  357/     F2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  357/     F2D :  (MACRO-2)                  alu4I   RL10,RL10,0xffffffff,xri,xri      ;flip all the bits
(1)  357/     F2D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/     F2E : FB FF                       XRI     (0XFFFFFFFF)&255
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 76 - 2/23/2013 7:47:57


(1)  357/     F30 : AB                          plo     RL10
(1)  357/     F31 : 9B                          ghi     RL10
(1)  357/     F32 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  357/     F34 : BB                          phi     RL10
(1)  357/     F35 : 8A                          glo     RL10-1
(1)  357/     F36 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  357/     F38 : AA                          plo     RL10-1
(1)  357/     F39 : 9A                          ghi     RL10-1
(1)  357/     F3A : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  357/     F3C : BA                          phi     RL10-1
(1)  357/     F3D :  (MACRO-2)                  alu4i   RL10,RL10,1,adi,adci              ;and add 1
(1)  357/     F3D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/     F3E : FC 01                       ADI     (1)&255
(1)  357/     F40 : AB                          plo     RL10
(1)  357/     F41 : 9B                          ghi     RL10
(1)  357/     F42 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  357/     F44 : BB                          phi     RL10
(1)  357/     F45 : 8A                          glo     RL10-1
(1)  357/     F46 : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  357/     F48 : AA                          plo     RL10-1
(1)  357/     F49 : 9A                          ghi     RL10-1
(1)  357/     F4A : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  357/     F4C : BA                          phi     RL10-1
(1)  358/     F4D :                     $$pos2: ; both args now +v
(1)  359/     F4D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  359/     F4D : D4                          sep     RCALL
(1)  359/     F4E : 0E 00                       dw      _DIVU4
(1)  360/     F50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  361/     F50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  362/     F51 : FE                      shl
(1)  363/     F52 : 3B 74                   bnf $$done ;if the signs were different
(1)  364/     F54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  364/     F54 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  364/     F54 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/     F55 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  364/     F57 : A9                          plo     RL8
(1)  364/     F58 : 99                          ghi     RL8
(1)  364/     F59 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  364/     F5B : B9                          phi     RL8
(1)  364/     F5C : 88                          glo     RL8-1
(1)  364/     F5D : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  364/     F5F : A8                          plo     RL8-1
(1)  364/     F60 : 98                          ghi     RL8-1
(1)  364/     F61 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  364/     F63 : B8                          phi     RL8-1
(1)  364/     F64 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  364/     F64 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/     F65 : FC 01                       ADI     (1)&255
(1)  364/     F67 : A9                          plo     RL8
(1)  364/     F68 : 99                          ghi     RL8
(1)  364/     F69 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  364/     F6B : B9                          phi     RL8
(1)  364/     F6C : 88                          glo     RL8-1
(1)  364/     F6D : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  364/     F6F : A8                          plo     RL8-1
(1)  364/     F70 : 98                          ghi     RL8-1
(1)  364/     F71 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  364/     F73 : B8                          phi     RL8-1
(1)  365/     F74 :                     $$done:
(1)  366/     F74 : (MACRO)                 Cretn ;and we're done - I hope!
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 77 - 2/23/2013 7:47:57


(1)  366/     F74 : D5                          sep     RRET
(1)  367/     F75 :                     
(1)  368/     F75 :                     _dubdabx:	
(1)  369/     F75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  370/     F75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  371/     F75 :                     ;long interger is passed in rp1p2
(1)  372/     F75 :                     ;buffer pointer is passed at sp+2+4
(1)  373/     F75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  374/     F75 :                     ;r8-11 are used as temps
(1)  375/     F75 :                     ;r8 is the working pointer
(1)  376/     F75 :                     ;r9.0 is bit count(32)
(1)  377/     F75 :                     ;r10.0 is digit count
(1)  378/     F75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  378/     F75 : =>TRUE                      if      ('O'='O')
(1)  378/     F75 :  (MACRO-2)                          ldAX    memAddr,SP,(2+4)
(1)  378/     F75 : 82                          glo     SP
(1)  378/     F76 : FC 06                       adi     ((2+4))#256
(1)  378/     F78 : AE                          plo     MEMADDR
(1)  378/     F79 : 92                          ghi     SP
(1)  378/     F7A : 7C 00                       adci    ((2+4))>>8; was/256
(1)  378/     F7C : BE                          phi     MEMADDR
(1)  378/     F7D : =>FALSE                     else
(1)  378/     F7D :                                     ldAD    memAddr,SP
(1)  378/     F7D : [378]                       endif
(1)  378/     F7D : 4E                          lda     memAddr
(1)  378/     F7E : B8                          phi     R8
(1)  378/     F7F : 0E                          ldn     memAddr
(1)  378/     F80 : A8                          plo     R8
(1)  379/     F81 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  379/     F81 : 88                          glo     R8
(1)  379/     F82 : AF                          plo     R15
(1)  379/     F83 : 98                          ghi     R8
(1)  379/     F84 : BF                          phi     R15
(1)  380/     F85 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  381/     F87 : A9                  	plo r9
(1)  382/     F88 :                     $$clrlp:	;clear the passed buffer
(1)  383/     F88 : F8 00               	ldi 0	
(1)  384/     F8A : 58                  	str r8	;clear a byte
(1)  385/     F8B : 18                  	inc r8
(1)  386/     F8C : 29                  	dec r9
(1)  387/     F8D : 89                  	glo r9	;check the count
(1)  388/     F8E : 3A 88               	bnz $$clrlp ;back for more
(1)  389/     F90 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  389/     F90 : 8F                          glo     R15
(1)  389/     F91 : A8                          plo     R8
(1)  389/     F92 : 9F                          ghi     R15
(1)  389/     F93 : B8                          phi     R8
(1)  390/     F94 :                     
(1)  391/     F94 : F8 20               	ldi 32	;bit count
(1)  392/     F96 : AF                  	plo r15
(1)  393/     F97 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  394/     F97 :                     $$cktop:
(1)  395/     F97 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  396/     F98 : FE                  	shl		;check for a 1
(1)  397/     F99 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  398/     F9B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  398/     F9B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  398/     F9C : FE                          shl             ;shift left once
(1)  398/     F9D : AD                          plo     RP1P2     ; save it
(1)  398/     F9E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 78 - 2/23/2013 7:47:57


(1)  398/     F9F : 7E                          shlc            ;shift one bit carrying
(1)  398/     FA0 : BD                          phi     RP1P2     ;save it
(1)  398/     FA1 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  398/     FA2 : 7E                          shlc
(1)  398/     FA3 : AC                          plo     RP1P2-1
(1)  398/     FA4 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  398/     FA5 : 7E                          shlc            ;gets the last shift
(1)  398/     FA6 : BC                          phi     RP1P2-1   ;and we're done
(1)  399/     FA7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  400/     FA8 : 8F                  	glo r15
(1)  401/     FA9 : 3A 97               	bnz $$cktop	;
(1)  402/     FAB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  403/     FAC :                     $$bitloop:
(1)  404/     FAC : F8 0A               	ldi 10	;digit count
(1)  405/     FAE : A9                  	plo r9
(1)  406/     FAF :                     $$dcklp:
(1)  407/     FAF : 08                  	ldn r8 	;pick up a digit
(1)  408/     FB0 : FF 05               	smi 5	;see if it's greater than 4
(1)  409/     FB2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  410/     FB4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  411/     FB6 : 58                  	str r8	;put it back
(1)  412/     FB7 :                     $$dnoadd:
(1)  413/     FB7 : 18                  	inc r8
(1)  414/     FB8 : 29                  	dec r9	;decrement digit count
(1)  415/     FB9 : 89                  	glo r9
(1)  416/     FBA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  417/     FBC :                     	
(1)  418/     FBC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  418/     FBC : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  418/     FBD : FE                          shl             ;shift left once
(1)  418/     FBE : AD                          plo     RP1P2     ; save it
(1)  418/     FBF : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  418/     FC0 : 7E                          shlc            ;shift one bit carrying
(1)  418/     FC1 : BD                          phi     RP1P2     ;save it
(1)  418/     FC2 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  418/     FC3 : 7E                          shlc
(1)  418/     FC4 : AC                          plo     RP1P2-1
(1)  418/     FC5 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  418/     FC6 : 7E                          shlc            ;gets the last shift
(1)  418/     FC7 : BC                          phi     RP1P2-1   ;and we're done
(1)  419/     FC8 :                     	
(1)  420/     FC8 : F8 0A               	ldi 10	;load the digit count again
(1)  421/     FCA : A9                  	plo r9
(1)  422/     FCB :                     ;r8 is now just past the units location and ready to walk back
(1)  423/     FCB :                     $$dshlp:
(1)  424/     FCB : 28                  	dec r8	;walk back from 0's position
(1)  425/     FCC : 08                  	ldn r8	;get the digit back
(1)  426/     FCD : 7E                  	shlc	;continue the shift
(1)  427/     FCE : BF                  	phi r15 ;save it for the carry test
(1)  428/     FCF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  429/     FD1 : 58                  	str r8	;put the digit back
(1)  430/     FD2 : 9F                  	ghi r15	;now test for carry
(1)  431/     FD3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  432/     FD5 : 29                  	dec r9	;decrement the digit count
(1)  433/     FD6 : 89                  	glo r9
(1)  434/     FD7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  435/     FD9 :                     	
(1)  436/     FD9 : 2F                  	dec r15
(1)  437/     FDA : 8F                  	glo r15
(1)  438/     FDB : 3A AC               	bnz $$bitloop
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 79 - 2/23/2013 7:47:57


(1)  439/     FDD :                     	
(1)  440/     FDD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     FDD : 88                          glo     R8
(1)  440/     FDE : AF                          plo     R15
(1)  440/     FDF : 98                          ghi     R8
(1)  440/     FE0 : BF                          phi     R15
(1)  441/     FE1 : F8 0A               	ldi 10		;digit count again
(1)  442/     FE3 : A9                  	plo r9
(1)  443/     FE4 :                     $$upnxt:
(1)  444/     FE4 : 08                  	ldn r8		;get digit
(1)  445/     FE5 : F9 30               	ori 0x30	;make ascii
(1)  446/     FE7 : 58                  	str r8		;put it back
(1)  447/     FE8 : 18                  	inc r8		;next digit
(1)  448/     FE9 : 29                  	dec r9		;counter
(1)  449/     FEA : 89                  	glo r9
(1)  450/     FEB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  451/     FED :                     	
(1)  452/     FED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  453/     FEF : A9                  	plo r9
(1)  454/     FF0 :                     $$cknext:
(1)  455/     FF0 : 0F                  	ldn r15		;check digit
(1)  456/     FF1 : FF 30               	smi 0x30	;for '0'
(1)  457/     FF3 : 3A FA               	bnz $$done
(1)  458/     FF5 : 1F                  	inc r15		;next digit
(1)  459/     FF6 : 29                  	dec r9		;reduce count
(1)  460/     FF7 : 89                  	glo r9
(1)  461/     FF8 : 3A F0               	bnz $$cknext
(1)  462/     FFA :                     $$done:
(1)  463/     FFA : (MACRO)             	cretn
(1)  463/     FFA : D5                          sep     RRET
(1)  464/     FFB :                     	
(1)  465/     FFB :                     	
(1)  466/     FFB :                     _modU4:	;32 bit unsigned remainder
(1)  467/     FFB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  468/     FFB : (MACRO)                 Ccall _divU4
(1)  468/     FFB : D4                          sep     RCALL
(1)  468/     FFC : 0E 00                       dw      _DIVU4
(1)  469/     FFE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  469/     FFE :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  469/     FFE : 8D                          glo     RP1P2
(1)  469/     FFF : A9                          plo     RL8
(1)  469/    1000 : 9D                          ghi     RP1P2
(1)  469/    1001 : B9                          phi     RL8
(1)  469/    1002 :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  469/    1002 : 8C                          glo     RP1P2-1
(1)  469/    1003 : A8                          plo     RL8-1
(1)  469/    1004 : 9C                          ghi     RP1P2-1
(1)  469/    1005 : B8                          phi     RL8-1
(1)  470/    1006 : (MACRO)                 Cretn
(1)  470/    1006 : D5                          sep     RRET
(1)  471/    1007 :                         
(1)  472/    1007 :                     _modI4:	;32 bit signed remainder
(1)  473/    1007 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/    1007 : (MACRO)                 Ccall _divI4
(1)  474/    1007 : D4                          sep     RCALL
(1)  474/    1008 : 0F 00                       dw      _DIVI4
(1)  475/    100A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  475/    100A :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  475/    100A : 8D                          glo     RP1P2
(1)  475/    100B : A9                          plo     RL8
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(lcc1802EpiloNG.inc) - page 80 - 2/23/2013 7:47:57


(1)  475/    100C : 9D                          ghi     RP1P2
(1)  475/    100D : B9                          phi     RL8
(1)  475/    100E :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  475/    100E : 8C                          glo     RP1P2-1
(1)  475/    100F : A8                          plo     RL8-1
(1)  475/    1010 : 9C                          ghi     RP1P2-1
(1)  475/    1011 : B8                          phi     RL8-1
(1)  476/    1012 : (MACRO)                 Cretn
(1)  476/    1012 : D5                          sep     RRET
(1)  477/    1013 :                         
(1)  478/    1013 :                     	
(1)  479/    1013 :                      
     678/    1013 :                     	include IO1802.inc
(1)    1/    1013 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1013 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1013 :                     	align 64
(1)    4/    1040 :                     _putc:
(1)    5/    1040 :                     _out5:	
(1)    6/    1040 : 8C                  	glo	regArg1
(1)    7/    1041 : 22                  	dec	sp
(1)    8/    1042 : 52                  	str	sp
(1)    9/    1043 : 65                  	out	5
(1)   10/    1044 : (MACRO)             	Cretn
(1)   10/    1044 : D5                          sep     RRET
(1)   11/    1045 :                     _inp:		;raw port input
(1)   12/    1045 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    1045 : 22                  	dec	sp	;work backwards
(1)   14/    1046 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    1048 : 73                  	stxd		
(1)   16/    1049 : 8C                  	glo	regarg1	;get the port number
(1)   17/    104A : FA 07               	ani	0x07	;clean it
(1)   18/    104C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    104E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    1050 : 73                  	stxd		;store it for execution
(1)   21/    1051 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   21/    1051 : 82                          glo     SP
(1)   21/    1052 : A8                          plo     RT1
(1)   21/    1053 : 92                          ghi     SP
(1)   21/    1054 : B8                          phi     RT1
(1)   22/    1055 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    1056 : D8                  	sep	rt1	;execute it
(1)   24/    1057 :                     ;we will come back to here with the input byte in D
(1)   25/    1057 : 12                  	inc	sp	;step over the work area
(1)   26/    1058 : AF                  	plo	retVal	;save it to return
(1)   27/    1059 : F8 00               	ldi	0
(1)   28/    105B : BF                  	phi	retval	;clear top byte
(1)   29/    105C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    105D : 12                  	inc	sp	;and the D3
(1)   31/    105E : (MACRO)             	Cretn		;and we're done
(1)   31/    105E : D5                          sep     RRET
(1)   32/    105F :                     	
(1)   33/    105F :                     _out:		;raw port output
(1)   34/    105F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    105F : 22                  	dec	sp	;work backwards
(1)   36/    1060 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    1062 : 73                  	stxd		
(1)   38/    1063 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   38/    1063 : 82                          glo     SP
(1)   38/    1064 : A8                          plo     RT1
(1)   38/    1065 : 92                          ghi     SP
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm(IO1802.inc) - page 81 - 2/23/2013 7:47:57


(1)   38/    1066 : B8                          phi     RT1
(1)   39/    1067 : 8C                  	glo	regarg1	;get the port number
(1)   40/    1068 : FA 07               	ani	0x07	;clean it
(1)   41/    106A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    106C : 73                  	stxd		;store it for execution
(1)   43/    106D : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    106E : 52                  	str	sp	;store it where sp points
(1)   45/    106F : D8                  	sep	rt1	;execute it
(1)   46/    1070 :                     ;we will come back to here with sp stepped up by one
(1)   47/    1070 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    1071 : 12                  	inc	sp	;and the D3
(1)   49/    1072 : (MACRO)             	Cretn		;and we're done
(1)   49/    1072 : D5                          sep     RRET
(1)   50/    1073 :                     	
(1)   51/    1073 :                     	
     679/    1073 :                     
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 82 - 2/23/2013 7:47:57


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP138 :                   FAC C | *BRANCHEXT :                      0 - |
 BVTABLE117 :                   C5F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB136 :                 E96 C |  CKNEXT138 :                    FF0 C |
 CKTOP138 :                     F97 C |  CLRLP138 :                     F88 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   2/23/2013 - |
 DCKLP138 :                     FAF C |  DIVLOOP16_16133 :              D52 C |
*DIVSETBIT16_16133 :            D84 C |  DIVSKIP16_16133 :              D81 C |
 DIVSKIPCLEAR16_16133 :         D88 C |  DIVSKIPFINALADD16_16133 :      D9A C |
 DIVSUB16_16133 :               D73 C |  DNOADD138 :                    FB7 C |
 DONE134 :                      DD3 C |  DONE137 :                      F74 C |
 DONE138 :                      FFA C |  DSHLP138 :                     FCB C |
 ENDLP135 :                     E61 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                             5 C |  L10 :                           58 C |
*L11 :                           58 C |  L13 :                           76 C |
*L14 :                          10A C |  L15 :                           CF C |
 L16 :                           F1 C | *L18 :                          306 C |
 L19 :                          1F9 C |  L20 :                          209 C |
 L21 :                          212 C |  L22 :                          2D6 C |
 L24 :                          219 C | *L25 :                          219 C |
 L27 :                          226 C |  L28 :                          2C5 C |
*L3 :                            35 C |  L31 :                          273 C |
*L32 :                          3EE C |  L33 :                          3BB C |
*L35 :                          444 C | *L36 :                          4A4 C |
*L37 :                          53D C |  L38 :                          518 C |
 L39 :                          53D C |  L4 :                           C71 C |
*L40 :                          5C5 C | *L41 :                          A63 C |
 L42 :                          629 C |  L43 :                          A3E C |
 L45 :                          670 C |  L46 :                          A3E C |
 L47 :                          A2D C |  L48 :                          A3E C |
 L5 :                            1C C |  L50 :                          7A3 C |
 L51 :                          7C9 C |  L52 :                          7F3 C |
 L53 :                          81E C |  L54 :                          895 C |
 L55 :                          A2D C |  L57 :                          913 C |
 L59 :                          94A C |  L6 :                            32 C |
 L60 :                          A22 C | *L61 :                          6F1 C |
 L62 :                          750 C | *L63 :                          729 C |
*L64 :                          788 C | *L65 :                          AAF C |
 L66 :                          C68 C |  L67 :                          AAC C |
*L68 :                          AAC C | *L70 :                          AF7 C |
 L71 :                          AE1 C | *L72 :                          AE4 C |
 L74 :                          AE5 C | *L75 :                          C16 C |
 L76 :                          BC6 C |  L77 :                          C08 C |
*L78 :                          C67 C | *L9 :                            A7 C |
 LCC1802INIT :                  C7F C | *LISTON :                         1 - |
 LOOP135 :                      E0F C | *MACEXP :                         1 - |
 MEMADDR :                        E - |  MLOOP136 :                     E77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP131 :                      D1E C |  MULTLOOP16_16132 :             D2B C |
 MULTSKIP16_16132 :             D3D C | *NESTMAX :                      100 - |
 NORESTORE135 :                 E5D C |  OUTIT117 :                     C5C C |
*PACKING :                        0 - | *PADDING :                        1 - |
 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 83 - 2/23/2013 7:47:57


 POS1134 :                      DB3 C |  POS1137 :                      F26 C |
 POS2134 :                      DC3 C |  POS2137 :                      F4D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SETBITOFF117 :                 C57 C |  SHIFT136 :                     EAE C |
 SP :                             2 - | *TIME :                     7:47:56 - |
*TRUE :                           1 - |  UPNXT138 :                     FE4 C |
*VERSION :                     142F - |  _00000123 :                    C99 C |
 _CALL :                        D01 C |  _DELAY :                       AB8 C |
 _DIE123 :                      C9C C | *_DIGITALWRITE :                B10 C |
*_DIGITALWRITE2 :               C40 C | *_DIGITALWRITEBV :              C67 C |
 _DIVI2 :                       DA4 C |  _DIVI4 :                       F00 C |
 _DIVU2 :                       D49 C |  _DIVU4 :                       E00 C |
 _DUBDABX :                     F75 C | *_EXIT :                        A80 C |
*_INP :                        1045 C |  _ITOA :                        11F C |
 _LTOA :                        323 C |  _MAIN :                          6 C |
*_MODI2 :                       CAD C | *_MODI4 :                      1007 C |
*_MODU2 :                       CA5 C | *_MODU4 :                       FFB C |
*_MULU2 :                       D23 C | *_MULU4 :                       E66 C |
*_OLDUINOINCLUDER :             C1F C |  _ONEMS :                       D1C C |
 _OUT :                        105F C |  _OUT4 :                        CB5 C |
*_OUT5 :                       1040 C |  _PIN4 :                          3 C |
 _PRINTF :                      5CE C |  _PRINTINT :                    40B C |
 _PRINTLINT :                   44D C |  _PRINTSTR :                     B0 C |
 _PUTC :                       1040 C |  _PUTX :                        546 C |
 _PUTXN :                       4AD C |  _RETURN :                      D12 C |
*_SETQOFF :                     CA3 C | *_SETQON :                      CA1 C |
 _STRCPY :                       3E C |  _TURNQOFF :                      4 C |
 __FORW2 :                     105C C | *__FORW3 :                     1070 C |

    200 symbols
     73 unused symbols

 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 84 - 2/23/2013 7:47:57


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
INC4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RESERVE                               | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
ZEXT                                  | ZEXT4                                

     70 macros

 AS V1.42 Beta [Bld 86] - source file asmdemo.asm - page 85 - 2/23/2013 7:47:57


  codepages:
  ----------

STANDARD (0 changed characters)


0.18 seconds assembly time

   2003 lines source file
   5573 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
