 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 1 - 3/26/2013 8:07:32


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Tue Mar 26 08:07:25 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  812/       0 :                     	listing	on
(1)  813/       0 : C0 12 BC            	lbr	lcc1802Init
(1)  814/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     	align 4
      13/       4 :                     _f0:
      14/       4 : 00 00 00 00         	dd 0x0
      15/       8 :                     	align 4
      16/       8 :                     _f1:
      17/       8 : 3F 80 00 00         	dd 0x3f800000
      18/       C :                     	align 4
      19/       C :                     _f2:
      20/       C : 40 00 00 00         	dd 0x40000000
      21/      10 :                     	align 4
      22/      10 :                     _f3:
      23/      10 : 40 40 00 00         	dd 0x40400000
      24/      14 :                     	align 4
      25/      14 :                     _f6:
      26/      14 : 40 C0 00 00         	dd 0x40c00000
      27/      18 :                     	align 4
      28/      18 :                     _fbigone:
      29/      18 : 4A B7 1B 00         	dd 0x4ab71b00
      30/      1C :                     	align 4
      31/      1C :                     _l0:
      32/      1C : 00 00 00 00         	dd 0
      33/      20 :                     	align 4
      34/      20 :                     _l1:
      35/      20 : 00 00 00 01         	dd 1
      36/      24 :                     	align 4
      37/      24 :                     _l2:
      38/      24 : 00 00 00 02         	dd 2
      39/      28 :                     	align 4
      40/      28 :                     _l3:
      41/      28 : 00 00 00 03         	dd 3
      42/      2C :                     _fsp:
      43/      2C : (MACRO)             	reserve 0; save room for local variables
      44/      2C : (MACRO)             	pushr r7
      45/      31 : (MACRO)             	reserve 12; save room for outgoing arguments
      46/      3B : (MACRO)             	st2 r12,'O',sp,(16); flag1 
      47/      48 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
      48/      55 :                     ;void fsp(float f1){
      49/      55 :                     ;	fsplit.uf=f1;
      50/      55 : (MACRO)             	ld4 RL10,'O',sp,(0+16);INDIRF4(addr)
      51/      65 : (MACRO)             	st4 RL10,'D',(_fsplit),0; ASGNF4(addr,reg)
      52/      76 :                     ;	printf("fsplit.uc[1]&&0x80=%x\n",fsplit.uc[1]&&0x80);
      53/      76 : (MACRO)             	ldaD R12,L3; reg:acon
      54/      7C : (MACRO)             	ld1 R11,'D',(_fsplit+1),0
      55/      84 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      56/      87 : (MACRO)             	jzU2 r11,L6; EQ 0
      57/      8F : (MACRO)             	ldaD R7,1; reg:acon
      58/      95 : C0 00 9C            	lbr L7
      59/      98 :                     L6:
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 2 - 3/26/2013 8:07:32


      60/      98 : (MACRO)             	ld2z R7
      61/      9C :                     L7:
      62/      9C : (MACRO)             	cpy2 R13,R7 ;LOADI2(reg)
      63/      A0 : (MACRO)             	Ccall _printf
      64/      A3 :                     ;	printf("fsplit.uf=%lx,fsplit.uc[0]=%x\n",fsplit.uf,fsplit.uc[0]);
      65/      A3 : (MACRO)             	ldaD R12,L8; reg:acon
      66/      A9 : (MACRO)             	ld4 RL10,'D',(_fsplit),0;INDIRF4(addr)
      67/      B7 : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
      68/      CA : (MACRO)             	ld1 R11,'D',(_fsplit),0
      69/      D2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      70/      D5 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
      71/      E2 : (MACRO)             	Ccall _printf
      72/      E5 :                     ;	fsign=fsplit.uc[0]&0x80;
      73/      E5 : (MACRO)             	ld1 R11,'D',(_fsplit),0
      74/      ED : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      75/      F0 : (MACRO)             	alu2I R11,R11,128,ani,ani
      76/      F8 :                     	;removed ?	cpy2 R11,R11
      77/      F8 : (MACRO)             	st2 R11,'D',(_fsign),0
      78/     103 :                     ;	fexp=fsplit.uc[0]<<1;
      79/     103 : (MACRO)             	ld1 R11,'D',(_fsplit),0
      80/     10B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      81/     10E : (MACRO)             	shl2I R11,1
      82/     114 : (MACRO)             	st2 R11,'D',(_fexp),0
      83/     11F :                     ;	if (fsplit.uc[1]&0x80) fexp+=1;
      84/     11F : (MACRO)             	ld1 R11,'D',(_fsplit+1),0
      85/     127 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      86/     12A : (MACRO)             	alu2I R11,R11,128,ani,ani
      87/     132 :                     	;removed ?	cpy2 R11,R11
      88/     132 : (MACRO)             	jzU2 r11,L9; EQ 0
      89/     13A : (MACRO)             	ld2 R11,'D',(_fexp),0 ;reg:INDIRI2(addr)
      90/     144 : (MACRO)             	incm R11,1
      91/     145 : (MACRO)             	st2 R11,'D',(_fexp),0
      92/     150 :                     L9:
      93/     150 :                     ;	fsplit.uc[0]=0; fsplit.uc[1]|=0x80;
      94/     150 : (MACRO)             	ldaD R11,0; reg:acon
      95/     156 : (MACRO)             	st1 R11,'D',(_fsplit),0; ASGNU1
      96/     15E : (MACRO)             	ldaD R11,_fsplit+1; reg:acon
      97/     164 : (MACRO)             	ld1 R10,'D',(_fsplit+1),0
      98/     16C : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
      99/     16F : (MACRO)             	alu2I R10,R10,128,ori,ori ;removed copy
     100/     177 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     101/     179 :                     ;	printf("fsplit.uf=%lx,fsplit.uc[0]=%x\n",fsplit.uf,fsplit.uc[0]);
     102/     179 : (MACRO)             	ldaD R12,L8; reg:acon
     103/     17F : (MACRO)             	ld4 RL10,'D',(_fsplit),0;INDIRF4(addr)
     104/     18D : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     105/     1A0 : (MACRO)             	ld1 R11,'D',(_fsplit),0
     106/     1A8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     107/     1AB : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     108/     1B8 : (MACRO)             	Ccall _printf
     109/     1BB :                     ;	printf("sign=%d,exponent=%d,mantissa=%ld\n",fsign,fexp,fsplit.ul);
     110/     1BB : (MACRO)             	ldaD R12,L13; reg:acon
     111/     1C1 : (MACRO)             	ld2 R13,'D',(_fsign),0 ;reg:INDIRI2(addr)
     112/     1CB : (MACRO)             	ld2 R11,'D',(_fexp),0 ;reg:INDIRI2(addr)
     113/     1D5 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     114/     1E2 : (MACRO)             	ld4 RL10,'D',(_fsplit),0
     115/     1F0 : (MACRO)             	st4 RL10,'O',sp,(8); arg+f**
     116/     203 : (MACRO)             	Ccall _printf
     117/     206 :                     ;	shifto=23-(fexp-127);
     118/     206 : (MACRO)             	ldaD R11,23; reg:acon
     119/     20C : (MACRO)             	ld2 R10,'D',(_fexp),0 ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 3 - 3/26/2013 8:07:32


     120/     216 : (MACRO)             	alu2I R10,R10,127,smi,smbi
     121/     21E : (MACRO)             	alu2 R11,R11,R10,sm,smb
     122/     22A : (MACRO)             	st2 R11,'D',(_shifto),0
     123/     235 :                     ;	l1=fsplit.ul>>shifto;
     124/     235 : (MACRO)             	ld4 RL10,'D',(_fsplit),0
     125/     243 : (MACRO)             	ld2 R9,'D',(_shifto),0 ;reg:INDIRI2(addr)
     126/     24D : (MACRO)             	shRU4R RL10,R9
     127/     263 : (MACRO)             	st4 RL10,'D',(_l1),0
     128/     274 :                     ;	printf("shifto=%d,whole part=%ld\n",shifto,l1);
     129/     274 : (MACRO)             	ldaD R12,L14; reg:acon
     130/     27A : (MACRO)             	ld2 R13,'D',(_shifto),0 ;reg:INDIRI2(addr)
     131/     284 : (MACRO)             	ld4 RL10,'D',(_l1),0
     132/     292 : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     133/     2A5 : (MACRO)             	Ccall _printf
     134/     2A8 :                     ;}
     135/     2A8 :                     L2:
     136/     2A8 : (MACRO)             	release 12; release room for outgoing arguments
     137/     2B0 : (MACRO)             	popr r7
     138/     2B4 : (MACRO)             	release 0; release room for local variables 
     139/     2B4 : (MACRO)             	Cretn
     140/     2B5 :                     
     141/     2B5 :                     _fpdis:
     142/     2B5 : (MACRO)             	reserve 8
     143/     2BD :                     ;void fpdis(funion f){
     144/     2BD :                     ;	S=f.ui&0x8000; //sign
     145/     2BD : (MACRO)             	ld2 RL10,'O',R12,0
     146/     2C9 : (MACRO)             	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
     147/     2CD : (MACRO)             	ldI4 RL8,32768 ;loading a long integer constant
     148/     2D9 : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     149/     2EF : (MACRO)             	cpy2 R11,RL10 ;LOADI2(reg)
     150/     2F3 : (MACRO)             	st2 R11,'O',sp,(-10+10)
     151/     300 :                     ;	M=f.ul&0x007fffff;
     152/     300 : (MACRO)             	ld4 RL10,'O',R12,0
     153/     310 : (MACRO)             	ldI4 RL8,0x7fffff ;loading a long unsigned constant
     154/     31C : (MACRO)             	alu4 RL10,RL10,RL8,and,and
     155/     332 : (MACRO)             	st4 RL10,'O',sp,(-8+10)
     156/     345 :                     ;	E=f.uc[0]<<1;
     157/     345 : (MACRO)             	ld1 R11,'O',R12,0
     158/     34F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     159/     352 : (MACRO)             	shl2I R11,1
     160/     358 : (MACRO)             	st2 R11,'O',sp,(-4+10)
     161/     365 :                     ;	if (f.uc[1]&0x80) E+=1;
     162/     365 : (MACRO)             	ld1 R11,'O',R12,(1)
     163/     36F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     164/     372 : (MACRO)             	alu2I R11,R11,128,ani,ani
     165/     37A :                     	;removed ?	cpy2 R11,R11
     166/     37A : (MACRO)             	jzU2 r11,L16; EQ 0
     167/     382 : (MACRO)             	ld2 R11,'O',sp,(-4+10) ;reg:INDIRI2(addr)
     168/     38E : (MACRO)             	incm R11,1
     169/     38F : (MACRO)             	st2 R11,'O',sp,(-4+10)
     170/     39C :                     L16:
     171/     39C :                     ;}
     172/     39C :                     L15:
     173/     39C : (MACRO)             	release 8
     174/     3A4 : (MACRO)             	Cretn
     175/     3A5 :                     
     176/     3A5 :                     _fpnorm:
     177/     3A5 : (MACRO)             	reserve 8; save room for local variables
     178/     3AD : (MACRO)             	pushr r0
     179/     3B2 : (MACRO)             	pushr r1
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 4 - 3/26/2013 8:07:32


     180/     3B7 : (MACRO)             	pushr r7
     181/     3BC : (MACRO)             	reserve 16; save room for outgoing arguments
     182/     3C6 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     183/     3CE :                     ;float fpnorm(long L){
     184/     3CE :                     ;	funion u; int E=150,S=0;
     185/     3CE : (MACRO)             	ldaD R7,150; reg:acon
     186/     3D4 : (MACRO)             	ld2z R11
     187/     3D8 : (MACRO)             	st2 R11,'O',sp,(-10+32)
     188/     3E5 :                     ;	u.ul=L;
     189/     3E5 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
     190/     3ED : (MACRO)             	st4 RL10,'O',sp,(-8+32); ASGNU4
     191/     400 :                     ;	if (L){
     192/     400 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     193/     40C : (MACRO)             	jeqI4 rL0,rL10,L19
     194/     430 :                     ;		u.ul=L;
     195/     430 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
     196/     438 : (MACRO)             	st4 RL10,'O',sp,(-8+32); ASGNU4
     197/     44B :                     ;		if (u.sl<0){
     198/     44B : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     199/     45B : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
     200/     467 : (MACRO)             	jcI4 RL10,RL8,lbdf,L24; GE is flipped test from LT
     201/     483 :                     ;			u.sl=-u.sl;
     202/     483 : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     203/     493 : (MACRO)             	negI4 RL10,RL10 ;was alu4I RL10,RL10,0,sdi,sdbi
     204/     4B3 : (MACRO)             	st4 RL10,'O',sp,(-8+32)
     205/     4C6 :                     ;			S=1;
     206/     4C6 : (MACRO)             	ldaD R11,1; reg:acon
     207/     4CC : (MACRO)             	st2 R11,'O',sp,(-10+32)
     208/     4D9 :                     ;		}
     209/     4D9 : C0 05 15            	lbr L24
     210/     4DC :                     L23:
     211/     4DC :                     ;		while(u.uc[0]){
     212/     4DC :                     ;			printf(">> ");
     213/     4DC : (MACRO)             	ldaD R12,L26; reg:acon
     214/     4E2 : (MACRO)             	Ccall _printf
     215/     4E5 :                     ;			u.ul>>=1;
     216/     4E5 : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     217/     4F5 : (MACRO)             	shrU4I RL10,1
     218/     501 : (MACRO)             	st4 RL10,'O',sp,(-8+32); ASGNU4
     219/     514 :                     ;			E++;
     220/     514 : (MACRO)             	incm R7,1
     221/     515 :                     ;		}
     222/     515 :                     L24:
     223/     515 :                     ;		while(u.uc[0]){
     224/     515 : (MACRO)             	ld1 R11,'O',sp,(-8+32)
     225/     51F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     226/     522 : (MACRO)             	jnzU2 r11,L23; NE 0
     227/     52A : C0 05 66            	lbr L28
     228/     52D :                     L27:
     229/     52D :                     ;		while(!(u.uc[1]&0x80)){
     230/     52D :                     ;			printf("<< ");
     231/     52D : (MACRO)             	ldaD R12,L31; reg:acon
     232/     533 : (MACRO)             	Ccall _printf
     233/     536 :                     ;			u.ul<<=1;
     234/     536 : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     235/     546 : (MACRO)             	shl4I RL10,1; LSHU4(reg,con)
     236/     552 : (MACRO)             	st4 RL10,'O',sp,(-8+32); ASGNU4
     237/     565 :                     ;			E--;
     238/     565 : (MACRO)             	decm R7,1
     239/     566 :                     ;		}
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 5 - 3/26/2013 8:07:32


     240/     566 :                     L28:
     241/     566 :                     ;		while(!(u.uc[1]&0x80)){
     242/     566 : (MACRO)             	ld1 R11,'O',sp,(-7+32)
     243/     570 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     244/     573 : (MACRO)             	alu2I R11,R11,128,ani,ani
     245/     57B :                     	;removed ?	cpy2 R11,R11
     246/     57B : (MACRO)             	jzU2 r11,L27; EQ 0
     247/     583 :                     ;		printf("\nFor %ld, mantissa is %ld, exp is %d, sign is %d\n",L,u.ul,E,S);
     248/     583 : (MACRO)             	ldaD R12,L32; reg:acon
     249/     589 : (MACRO)             	st4 RL0,'O',sp,(4); arg+f**
     250/     59C : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     251/     5AC : (MACRO)             	st4 RL10,'O',sp,(8); arg+f**
     252/     5BF : (MACRO)             	st2 r7,'O',sp,(12); arg+f**
     253/     5CC : (MACRO)             	ld2 R11,'O',sp,(-10+32) ;reg:INDIRI2(addr)
     254/     5D8 : (MACRO)             	st2 r11,'O',sp,(14); arg+f**
     255/     5E5 : (MACRO)             	Ccall _printf
     256/     5E8 :                     ;		u.uc[0]=E>>1;
     257/     5E8 : (MACRO)             	cpy2 R11,R7
     258/     5EC : (MACRO)             	shrI2I R11,1
     259/     5F4 : (MACRO)             	st1 R11,'O',sp,(-8+32); ASGNU1
     260/     5FE :                     ;		if (!(E&1)){
     261/     5FE : (MACRO)             	alu2I R11,R7,1,ani,ani
     262/     606 :                     	;removed ?	cpy2 R11,R7
     263/     606 : (MACRO)             	jnzU2 r11,L33; NE 0
     264/     60E :                     ;			u.uc[1]&=0x7f;
     265/     60E : (MACRO)             	ld1 R11,'O',sp,(-7+32)
     266/     618 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     267/     61B : (MACRO)             	alu2I R11,R11,127,ani,ani
     268/     623 :                     	;removed ?	cpy2 R11,R11
     269/     623 : (MACRO)             	st1 R11,'O',sp,(-7+32); ASGNU1
     270/     62D :                     ;		}
     271/     62D :                     L33:
     272/     62D :                     ;		if (S){
     273/     62D : (MACRO)             	ld2 R11,'O',sp,(-10+32) ;reg:INDIRI2(addr)
     274/     639 : (MACRO)             	jzU2 r11,L20; EQ 0
     275/     641 :                     ;			u.uc[0]|=0x80;
     276/     641 : (MACRO)             	ld1 R11,'O',sp,(-8+32)
     277/     64B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     278/     64E : (MACRO)             	alu2I R11,R11,128,ori,ori ;removed copy
     279/     656 : (MACRO)             	st1 R11,'O',sp,(-8+32); ASGNU1
     280/     660 :                     ;		}
     281/     660 :                     ;	} else{
     282/     660 : C0 06 84            	lbr L20
     283/     663 :                     L19:
     284/     663 :                     ;		u.uf=0;
     285/     663 : (MACRO)             	ld4 RL10,'D',(L38),0;INDIRF4(addr)
     286/     671 : (MACRO)             	st4 RL10,'O',sp,(-8+32); ASGNF4(addr,reg)
     287/     684 :                     ;	}
     288/     684 :                     L20:
     289/     684 :                     ;	printf("Hex return is %lx\n",u.ul);
     290/     684 : (MACRO)             	ldaD R12,L39; reg:acon
     291/     68A : (MACRO)             	ld4 RL10,'O',sp,(-8+32)
     292/     69A : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     293/     6AD : (MACRO)             	Ccall _printf
     294/     6B0 :                     ;	return u.uf;
     295/     6B0 : (MACRO)             	ld4 RL10,'O',sp,(-8+32);INDIRF4(addr)
     296/     6C0 : (MACRO)             	cpy4 rp1p2,RL10
     297/     6C8 :                     L18:
     298/     6C8 : (MACRO)             	release 16; release room for outgoing arguments
     299/     6D0 : (MACRO)             	popr r7
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 6 - 3/26/2013 8:07:32


     300/     6D4 : (MACRO)             	popr r1
     301/     6D8 : (MACRO)             	popr r0
     302/     6DC : (MACRO)             	release 8; release room for local variables 
     303/     6E4 : (MACRO)             	Cretn
     304/     6E5 :                     
     305/     6E5 :                     _main:
     306/     6E5 : (MACRO)             	reserve 8
     307/     6ED :                     ;{
     308/     6ED :                     ;	printstr("hello World!\n");
     309/     6ED : (MACRO)             	ldaD R12,L41; reg:acon
     310/     6F3 : (MACRO)             	Ccall _printstr
     311/     6F6 :                     ;	printf("cvif4(1)=%lx\n",(float)l1);
     312/     6F6 : (MACRO)             	ldaD R12,L42; reg:acon
     313/     6FC : (MACRO)             	ld4 RL8,'D',(_l1),0
     314/     70A : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     315/     70D : (MACRO)             	st4 RL8,'O',sp,(4); arg+f**
     316/     720 : (MACRO)             	Ccall _printf
     317/     723 :                     ;	printf("cvif4(2)=%lx\n",(float)l2);
     318/     723 : (MACRO)             	ldaD R12,L43; reg:acon
     319/     729 : (MACRO)             	ld4 RL8,'D',(_l2),0
     320/     737 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     321/     73A : (MACRO)             	st4 RL8,'O',sp,(4); arg+f**
     322/     74D : (MACRO)             	Ccall _printf
     323/     750 :                     ;}
     324/     750 :                     L40:
     325/     750 : (MACRO)             	release 8
     326/     758 : (MACRO)             	Cretn
     327/     759 :                     
     328/     759 :                     _strcpy:
     329/     759 : (MACRO)             	reserve 2
     330/     75B :                     ;{
     331/     75B :                     ;	char *save = to;
     332/     75B : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     333/     768 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     334/     768 : C0 07 6D            	lbr L48
     335/     76B :                     L45:
     336/     76B :                     L46:
     337/     76B : (MACRO)             	incm R13,1
     338/     76C : (MACRO)             	incm R12,1
     339/     76D :                     L48:
     340/     76D : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
     341/     76F : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
     342/     771 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     343/     774 : (MACRO)             	jnzU2 r11,L45; NE 0
     344/     77C :                     ;	return(save);
     345/     77C : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
     346/     788 :                     L44:
     347/     788 : (MACRO)             	release 2
     348/     78A : (MACRO)             	Cretn
     349/     78B :                     
     350/     78B :                     _printstr:
     351/     78B : (MACRO)             	reserve 0; save room for local variables
     352/     78B : (MACRO)             	pushr r7
     353/     790 : (MACRO)             	reserve 4; save room for outgoing arguments
     354/     794 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     355/     798 :                     ;void printstr(char *ptr){
     356/     798 : C0 07 BA            	lbr L51
     357/     79B :                     L50:
     358/     79B :                     ;    while(*ptr) out(5,*ptr++);
     359/     79B : (MACRO)             	ldaD R12,5; reg:acon
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 7 - 3/26/2013 8:07:32


     360/     7A1 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     361/     7A5 : (MACRO)             	cpy2 R7,R11
     362/     7A9 : (MACRO)             	incm R7,1
     363/     7AA : (MACRO)             	ld1 R13,'O',R11,0
     364/     7B4 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     365/     7B7 : (MACRO)             	Ccall _out
     366/     7BA :                     L51:
     367/     7BA : (MACRO)             	ld1 R11,'O',R7,0
     368/     7C4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     369/     7C7 : (MACRO)             	jnzU2 r11,L50; NE 0
     370/     7CF :                     ;}
     371/     7CF :                     L49:
     372/     7CF : (MACRO)             	release 4; release room for outgoing arguments
     373/     7D3 : (MACRO)             	popr r7
     374/     7D7 : (MACRO)             	release 0; release room for local variables 
     375/     7D7 : (MACRO)             	Cretn
     376/     7D8 :                     
     377/     7D8 :                     _itoa:
     378/     7D8 : (MACRO)             	reserve 4; save room for local variables
     379/     7DC : (MACRO)             	pushr r0
     380/     7E1 : (MACRO)             	pushr r1
     381/     7E6 : (MACRO)             	pushr r7
     382/     7EB : (MACRO)             	reserve 4; save room for outgoing arguments
     383/     7EF : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     384/     7FC : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     385/     809 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     386/     809 :                     ;	unsigned int flag=0;
     387/     809 : (MACRO)             	ld2z R11
     388/     80D : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     389/     81A :                     ;	char * bptr; bptr=buffer;
     390/     81A : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
     391/     826 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     392/     833 :                     ;	if (s<0){
     393/     833 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     394/     83F : (MACRO)             	jcI2I r11,0,lbdf,L54; GE is flipped test from LT
     395/     850 :                     ;		*bptr='-';bptr++;
     396/     850 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     397/     85C : (MACRO)             	ldaD R10,45; reg:acon
     398/     862 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     399/     864 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     400/     870 : (MACRO)             	incm R11,1
     401/     871 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     402/     87E :                     ;		n=-s;
     403/     87E : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     404/     88A : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     405/     893 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     406/     897 :                     ;	} else{
     407/     897 : C0 08 AA            	lbr L55
     408/     89A :                     L54:
     409/     89A :                     ;		n=s;
     410/     89A : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     411/     8A6 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     412/     8AA :                     ;	}
     413/     8AA :                     L55:
     414/     8AA :                     ;	k=10000;
     415/     8AA : (MACRO)             	ldaD R7,10000; reg:acon
     416/     8B0 : C0 09 54            	lbr L57
     417/     8B3 :                     L56:
     418/     8B3 :                     ;	while(k>0){
     419/     8B3 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 8 - 3/26/2013 8:07:32


     420/     8B3 : (MACRO)             	ld2z R0
     421/     8B7 : C0 08 C7            	lbr L62
     422/     8BA :                     L59:
     423/     8BA :                     L60:
     424/     8BA : (MACRO)             	incm R0,1
     425/     8BB : (MACRO)             	alu2 R1,R1,R7,sm,smb
     426/     8C7 :                     L62:
     427/     8C7 : (MACRO)             	jcU2 r1,r7,lbdf,L59 ;LE is flipped test & operands
     428/     8D4 :                     ;		if (flag || r>0||k==1){
     429/     8D4 : (MACRO)             	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
     430/     8E0 : (MACRO)             	jnzU2 r11,L66; NE 0
     431/     8E8 : (MACRO)             	jnzU2 r0,L66; NE 0
     432/     8F0 : (MACRO)             	jneU2I r7,1,L63; NE
     433/     8FC :                     L66:
     434/     8FC :                     ;			*bptr=('0'+r);bptr++;
     435/     8FC : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     436/     908 : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     437/     910 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     438/     912 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     439/     91E : (MACRO)             	incm R11,1
     440/     91F : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     441/     92C :                     ;			flag='y';
     442/     92C : (MACRO)             	ldaD R11,121; reg:acon
     443/     932 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     444/     93F :                     ;		}
     445/     93F :                     L63:
     446/     93F :                     ;		k=k/10;
     447/     93F : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
     448/     943 : (MACRO)             	ldaD R13,10; reg:acon
     449/     949 : (MACRO)             	Ccall _divu2
     450/     94C : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     451/     950 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
     452/     954 :                     ;	}
     453/     954 :                     L57:
     454/     954 :                     ;	while(k>0){
     455/     954 : (MACRO)             	jnzU2 r7,L56; NE 0
     456/     95C :                     ;	*bptr='\0';
     457/     95C : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     458/     968 : (MACRO)             	ldaD R10,0; reg:acon
     459/     96E : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     460/     970 :                     ;	return buffer;
     461/     970 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
     462/     97C :                     L53:
     463/     97C : (MACRO)             	release 4; release room for outgoing arguments
     464/     980 : (MACRO)             	popr r7
     465/     984 : (MACRO)             	popr r1
     466/     988 : (MACRO)             	popr r0
     467/     98C : (MACRO)             	release 4; release room for local variables 
     468/     990 : (MACRO)             	Cretn
     469/     991 :                     
     470/     991 :                     _ltoa:
     471/     991 : (MACRO)             	reserve 0; save room for local variables
     472/     991 : (MACRO)             	pushr r0
     473/     996 : (MACRO)             	pushr r1
     474/     99B : (MACRO)             	pushr r7
     475/     9A0 : (MACRO)             	reserve 6; save room for outgoing arguments
     476/     9A6 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     477/     9AE :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     478/     9AE :                     ;	char* bptr=buffer;
     479/     9AE : (MACRO)             	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 9 - 3/26/2013 8:07:32


     480/     9BA :                     ;	if (s<0){
     481/     9BA : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     482/     9C6 : (MACRO)             	jcI4 RL0,RL10,lbdf,L68; GE is flipped test from LT
     483/     9E2 :                     ;		*bptr++='-';
     484/     9E2 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     485/     9E6 : (MACRO)             	cpy2 R7,R11
     486/     9EA : (MACRO)             	incm R7,1
     487/     9EB : (MACRO)             	ldaD R10,45; reg:acon
     488/     9F1 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     489/     9F3 :                     ;		s=-s;
     490/     9F3 : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     491/     A13 :                     ;	}
     492/     A13 :                     L68:
     493/     A13 :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     494/     A13 : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     495/     A1B : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     496/     A28 : (MACRO)             	Ccall _dubdabx
     497/     A2B : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     498/     A2F : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
     499/     A33 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     500/     A37 : (MACRO)             	Ccall _strcpy
     501/     A3A :                     ;	return buffer;
     502/     A3A : (MACRO)             	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
     503/     A46 :                     L67:
     504/     A46 : (MACRO)             	release 6; release room for outgoing arguments
     505/     A4C : (MACRO)             	popr r7
     506/     A50 : (MACRO)             	popr r1
     507/     A54 : (MACRO)             	popr r0
     508/     A58 : (MACRO)             	release 0; release room for local variables 
     509/     A58 : (MACRO)             	Cretn
     510/     A59 :                     
     511/     A59 :                     _printint:
     512/     A59 : (MACRO)             	reserve 12
     513/     A63 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     514/     A70 :                     ;void printint(int s){ //print an integer
     515/     A70 :                     ;	itoa(s,buffer);
     516/     A70 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
     517/     A7C : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     518/     A84 : (MACRO)             	Ccall _itoa
     519/     A87 :                     ;	printstr(buffer);
     520/     A87 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     521/     A8F : (MACRO)             	Ccall _printstr
     522/     A92 :                     ;}
     523/     A92 :                     L70:
     524/     A92 : (MACRO)             	release 12
     525/     A9A : (MACRO)             	Cretn
     526/     A9B :                     
     527/     A9B :                     _printlint:
     528/     A9B : (MACRO)             	reserve 18
     529/     AA5 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     530/     AB2 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     531/     ABF :                     ;void printlint(long s){ //print a long integer
     532/     ABF :                     ;	printstr(ltoa(s,buffer));
     533/     ABF : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20)
     534/     ACF : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     535/     AD7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     536/     AE4 : (MACRO)             	Ccall _ltoa
     537/     AE7 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     538/     AEB : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     539/     AEF : (MACRO)             	Ccall _printstr
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 10 - 3/26/2013 8:07:32


     540/     AF2 :                     ;}
     541/     AF2 :                     L71:
     542/     AF2 : (MACRO)             	release 18
     543/     AFA : (MACRO)             	Cretn
     544/     AFB :                     
     545/     AFB :                     _putxn:
     546/     AFB : (MACRO)             	reserve 4
     547/     AFF : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     548/     B0C : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     549/     B18 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     550/     B22 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     551/     B22 :                     ;	if (x<10){
     552/     B22 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     553/     B2C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     554/     B2F : (MACRO)             	jcI2I r11,10,lbdf,L73; GE is flipped test from LT
     555/     B40 :                     ;		putc(x+'0');
     556/     B40 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     557/     B4A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     558/     B4D : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     559/     B55 : (MACRO)             	cpy1 R12,R11
     560/     B57 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     561/     B5A : (MACRO)             	Ccall _putc
     562/     B5D :                     ;	} else {
     563/     B5D : C0 0B 85            	lbr L74
     564/     B60 :                     L73:
     565/     B60 :                     ;		putc(x+'A'-10);
     566/     B60 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     567/     B6A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     568/     B6D : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     569/     B75 : (MACRO)             	alu2I R11,R11,10,smi,smbi
     570/     B7D : (MACRO)             	cpy1 R12,R11
     571/     B7F : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     572/     B82 : (MACRO)             	Ccall _putc
     573/     B85 :                     ;	}
     574/     B85 :                     L74:
     575/     B85 :                     ;}
     576/     B85 :                     L72:
     577/     B85 : (MACRO)             	release 4
     578/     B89 : (MACRO)             	Cretn
     579/     B8A :                     
     580/     B8A :                     _putx:
     581/     B8A : (MACRO)             	reserve 4
     582/     B8E : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     583/     B9B : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     584/     BA7 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     585/     BB1 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     586/     BB1 :                     ;	putxn(x>>4);
     587/     BB1 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     588/     BBB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     589/     BBE : (MACRO)             	shrI2I R11,4
     590/     BDE : (MACRO)             	cpy1 R12,R11
     591/     BE0 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     592/     BE3 : (MACRO)             	Ccall _putxn
     593/     BE6 :                     ;	putxn(x & 0x0F);
     594/     BE6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     595/     BF0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     596/     BF3 : (MACRO)             	alu2I R11,R11,15,ani,ani
     597/     BFB :                     	;removed ?	cpy2 R11,R11
     598/     BFB : (MACRO)             	cpy1 R12,R11
     599/     BFD : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 11 - 3/26/2013 8:07:32


     600/     C00 : (MACRO)             	Ccall _putxn
     601/     C03 :                     ;}
     602/     C03 :                     L75:
     603/     C03 : (MACRO)             	release 4
     604/     C07 : (MACRO)             	Cretn
     605/     C08 :                     
     606/     C08 :                     _printf:
     607/     C08 : (MACRO)             	reserve 4; save room for local variables
     608/     C0C : (MACRO)             	pushr r0
     609/     C11 : (MACRO)             	pushr r1
     610/     C16 : (MACRO)             	pushr r7
     611/     C1B : (MACRO)             	reserve 4; save room for outgoing arguments
     612/     C1F : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     613/     C2C : (MACRO)             	st2 r13,'O',sp,(18); flag2
     614/     C39 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     615/     C39 :                     ;	int argslot=0;	//used to align longs
     616/     C39 : (MACRO)             	ld2z R0
     617/     C3D :                     ;	int * this=(int *)&ptr;
     618/     C3D : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     619/     C45 :                     ;	this++; argslot++; //advance argument pointer and slot #
     620/     C45 : (MACRO)             	incm R1,2
     621/     C47 : (MACRO)             	incm R0,1
     622/     C48 : C0 0F F8            	lbr L78
     623/     C4B :                     L77:
     624/     C4B :                     ;    while(*ptr) {
     625/     C4B :                     ;		c=*ptr++;
     626/     C4B : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     627/     C57 : (MACRO)             	cpy2 R10,R11
     628/     C5B : (MACRO)             	incm R10,1
     629/     C5C : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     630/     C69 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     631/     C6B :                     ;		if (c!='%'){
     632/     C6B : (MACRO)             	cpy1 R11,R7
     633/     C6D : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     634/     C70 : (MACRO)             	jeqU2I r11,37,L80;EQI2(reg,con)
     635/     C7C :                     ;			putc(c);
     636/     C7C : (MACRO)             	cpy1 R12,R7
     637/     C7E : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     638/     C81 : (MACRO)             	Ccall _putc
     639/     C84 :                     ;		} else{
     640/     C84 : C0 0F F8            	lbr L81
     641/     C87 :                     L80:
     642/     C87 :                     ;			c=*ptr++;
     643/     C87 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     644/     C93 : (MACRO)             	cpy2 R10,R11
     645/     C97 : (MACRO)             	incm R10,1
     646/     C98 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     647/     CA5 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     648/     CA7 :                     ;			switch (c){
     649/     CA7 : (MACRO)             	cpy1 R11,R7
     650/     CA9 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     651/     CAC : (MACRO)             	st2 R11,'O',sp,(-5+16)
     652/     CB9 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     653/     CC5 : (MACRO)             	jeqU2I r11,105,L85;EQI2(reg,con)
     654/     CD1 : (MACRO)             	ldaD R10,108; reg:acon
     655/     CD7 : (MACRO)             	jeqI2 r11,r10,L89; EQI2(reg,reg)
     656/     CE9 : (MACRO)             	jcI2 r10,r11,lbnf,L97 ;GT is reversed operands from LT
     657/     CFD :                     L96:
     658/     CFD : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     659/     D09 : (MACRO)             	ldaD R10,88; reg:acon
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 12 - 3/26/2013 8:07:32


     660/     D0F : (MACRO)             	jeqI2 r11,r10,L88; EQI2(reg,reg)
     661/     D21 : (MACRO)             	jcI2 r11,r10,lbnf,L82; LT=lbnf i.e. subtract B from A and jump if borrow 
     662/     D35 :                     L98:
     663/     D35 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     664/     D41 : (MACRO)             	jeqU2I r11,99,L87;EQI2(reg,con)
     665/     D4D : (MACRO)             	jeqU2I r11,100,L85;EQI2(reg,con)
     666/     D59 : C0 0F E7            	lbr L82
     667/     D5C :                     L97:
     668/     D5C : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     669/     D68 : (MACRO)             	ldaD R10,115; reg:acon
     670/     D6E : (MACRO)             	jeqI2 r11,r10,L86; EQI2(reg,reg)
     671/     D80 : (MACRO)             	jcI2 r11,r10,lbnf,L82; LT=lbnf i.e. subtract B from A and jump if borrow 
     672/     D94 :                     L99:
     673/     D94 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     674/     DA0 : (MACRO)             	jeqU2I r11,120,L88;EQI2(reg,con)
     675/     DAC : C0 0F E7            	lbr L82
     676/     DAF :                     L85:
     677/     DAF :                     ;					printint(*this++);
     678/     DAF : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     679/     DB3 : (MACRO)             	cpy2 R1,R11
     680/     DB7 : (MACRO)             	incm R1,2
     681/     DB9 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
     682/     DC5 : (MACRO)             	Ccall _printint
     683/     DC8 :                     ;					argslot+=1; //next argument slot
     684/     DC8 : (MACRO)             	incm R0,1
     685/     DC9 :                     ;					break;
     686/     DC9 : C0 0F F8            	lbr L83
     687/     DCC :                     L86:
     688/     DCC :                     ;					printstr((char*) *this++);
     689/     DCC : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     690/     DD0 : (MACRO)             	cpy2 R1,R11
     691/     DD4 : (MACRO)             	incm R1,2
     692/     DD6 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     693/     DE2 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     694/     DE6 : (MACRO)             	Ccall _printstr
     695/     DE9 :                     ;					argslot+=1; //next argument slot
     696/     DE9 : (MACRO)             	incm R0,1
     697/     DEA :                     ;					break;
     698/     DEA : C0 0F F8            	lbr L83
     699/     DED :                     L87:
     700/     DED :                     ;					putc((unsigned int) *this++);
     701/     DED : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     702/     DF1 : (MACRO)             	cpy2 R1,R11
     703/     DF5 : (MACRO)             	incm R1,2
     704/     DF7 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     705/     E03 : (MACRO)             	cpy1 R12,R11
     706/     E05 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     707/     E08 : (MACRO)             	Ccall _putc
     708/     E0B :                     ;					argslot+=1; //next argument slot
     709/     E0B : (MACRO)             	incm R0,1
     710/     E0C :                     ;					break;
     711/     E0C : C0 0F F8            	lbr L83
     712/     E0F :                     L88:
     713/     E0F :                     ;					putx(((unsigned int) *this)>>8);
     714/     E0F : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     715/     E1B : (MACRO)             	shrU2I R11,8
     716/     E4B : (MACRO)             	cpy1 R12,R11
     717/     E4D : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     718/     E50 : (MACRO)             	Ccall _putx
     719/     E53 :                     ;					putx(((unsigned int) *this++)&255);
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 13 - 3/26/2013 8:07:32


     720/     E53 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     721/     E57 : (MACRO)             	cpy2 R1,R11
     722/     E5B : (MACRO)             	incm R1,2
     723/     E5D : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     724/     E69 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     725/     E71 : (MACRO)             	cpy1 R12,R11
     726/     E73 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     727/     E76 : (MACRO)             	Ccall _putx
     728/     E79 :                     ;					argslot+=1; //next argument slot
     729/     E79 : (MACRO)             	incm R0,1
     730/     E7A :                     ;					break;
     731/     E7A : C0 0F F8            	lbr L83
     732/     E7D :                     L89:
     733/     E7D :                     ;					if (*ptr){ //as long as there's something there
     734/     E7D : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     735/     E89 : (MACRO)             	ld1 R11,'O',R11,0
     736/     E93 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     737/     E96 : (MACRO)             	jzU2 r11,L90; EQ 0
     738/     E9E :                     ;						xord=*ptr++;
     739/     E9E : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     740/     EAA : (MACRO)             	cpy2 R10,R11
     741/     EAE : (MACRO)             	incm R10,1
     742/     EAF : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     743/     EBC : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     744/     EBE : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     745/     EC8 :                     ;						if (argslot&1) {
     746/     EC8 : (MACRO)             	alu2I R11,R0,1,ani,ani
     747/     ED0 :                     	;removed ?	cpy2 R11,R0
     748/     ED0 : (MACRO)             	jzU2 r11,L92; EQ 0
     749/     ED8 :                     ;							this++;
     750/     ED8 : (MACRO)             	incm R1,2
     751/     EDA :                     ;							argslot++;
     752/     EDA : (MACRO)             	incm R0,1
     753/     EDB :                     ;						}
     754/     EDB :                     L92:
     755/     EDB :                     ;						if(xord=='d'){
     756/     EDB : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     757/     EE5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     758/     EE8 : (MACRO)             	jneU2I r11,100,L94; NE
     759/     EF4 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     760/     EF4 : (MACRO)             	ld4 Rp1p2,'O',R1,0
     761/     F04 : (MACRO)             	Ccall _printlint
     762/     F07 :                     ;							this+=2;				// and advances it 4 bytes
     763/     F07 : (MACRO)             	incm R1,4
     764/     F0B :                     ;						} else{
     765/     F0B : C0 0F E2            	lbr L95
     766/     F0E :                     L94:
     767/     F0E :                     ;							putx(((unsigned int) *this)>>8);
     768/     F0E : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     769/     F1A : (MACRO)             	shrU2I R11,8
     770/     F4A : (MACRO)             	cpy1 R12,R11
     771/     F4C : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     772/     F4F : (MACRO)             	Ccall _putx
     773/     F52 :                     ;							putx(((unsigned int) *this++)&255);
     774/     F52 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     775/     F56 : (MACRO)             	cpy2 R1,R11
     776/     F5A : (MACRO)             	incm R1,2
     777/     F5C : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     778/     F68 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     779/     F70 : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 14 - 3/26/2013 8:07:32


     780/     F72 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     781/     F75 : (MACRO)             	Ccall _putx
     782/     F78 :                     ;							putx(((unsigned int) *this)>>8);
     783/     F78 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     784/     F84 : (MACRO)             	shrU2I R11,8
     785/     FB4 : (MACRO)             	cpy1 R12,R11
     786/     FB6 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     787/     FB9 : (MACRO)             	Ccall _putx
     788/     FBC :                     ;							putx(((unsigned int) *this++)&255);
     789/     FBC : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     790/     FC0 : (MACRO)             	cpy2 R1,R11
     791/     FC4 : (MACRO)             	incm R1,2
     792/     FC6 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     793/     FD2 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     794/     FDA : (MACRO)             	cpy1 R12,R11
     795/     FDC : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     796/     FDF : (MACRO)             	Ccall _putx
     797/     FE2 :                     ;						}
     798/     FE2 :                     L95:
     799/     FE2 :                     ;						argslot+=2;
     800/     FE2 : (MACRO)             	incm R0,2
     801/     FE4 :                     ;						break;
     802/     FE4 : C0 0F F8            	lbr L83
     803/     FE7 :                     L90:
     804/     FE7 :                     L82:
     805/     FE7 :                     ;					putc('%');putc(c);
     806/     FE7 : (MACRO)             	ldaD R12,37; reg:acon
     807/     FED : (MACRO)             	Ccall _putc
     808/     FF0 : (MACRO)             	cpy1 R12,R7
     809/     FF2 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     810/     FF5 : (MACRO)             	Ccall _putc
     811/     FF8 :                     ;			} //switch
     812/     FF8 :                     L83:
     813/     FF8 :                     ;		} //%
     814/     FF8 :                     L81:
     815/     FF8 :                     ;	} //while
     816/     FF8 :                     L78:
     817/     FF8 :                     ;    while(*ptr) {
     818/     FF8 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     819/    1004 : (MACRO)             	ld1 R11,'O',R11,0
     820/    100E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     821/    1011 : (MACRO)             	jnzU2 r11,L77; NE 0
     822/    1019 :                     ;} //prtf
     823/    1019 :                     L76:
     824/    1019 : (MACRO)             	release 4; release room for outgoing arguments
     825/    101D : (MACRO)             	popr r7
     826/    1021 : (MACRO)             	popr r1
     827/    1025 : (MACRO)             	popr r0
     828/    1029 : (MACRO)             	release 4; release room for local variables 
     829/    102D : (MACRO)             	Cretn
     830/    102E :                     
     831/    102E :                     _exit:
     832/    102E : (MACRO)             	reserve 4
     833/    1032 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     834/    103F :                     ;void exit(int code){
     835/    103F :                     ;	printf("exit %d\n",code);
     836/    103F : (MACRO)             	ldaD R12,L101; reg:acon
     837/    1045 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
     838/    1051 : (MACRO)             	Ccall _printf
     839/    1054 :                     L102:
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 15 - 3/26/2013 8:07:32


     840/    1054 :                     ;	while(1);
     841/    1054 :                     L103:
     842/    1054 : C0 10 54            	lbr L102
     843/    1057 :                     ;}
     844/    1057 :                     L100:
     845/    1057 : (MACRO)             	release 4
     846/    105B : (MACRO)             	Cretn
     847/    105C :                     
     848/    105C :                     _memcmp:
     849/    105C : (MACRO)             	reserve 2; save room for local variables
     850/    105E : (MACRO)             	pushr r0
     851/    1063 : (MACRO)             	pushr r1
     852/    1068 : (MACRO)             	pushr r7
     853/    106D : (MACRO)             	reserve 0; save room for outgoing arguments
     854/    106D : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
     855/    1079 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     856/    1079 :                     ;    int v = 0;
     857/    1079 : (MACRO)             	ld2z R1
     858/    107D :                     ;    p1 = (unsigned char *)Ptr1;
     859/    107D : (MACRO)             	cpy2 R0,R12 ;LOADP2(reg)
     860/    1081 :                     ;    p2 = (unsigned char *)Ptr2;
     861/    1081 : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
     862/    108E : C0 10 DE            	lbr L107
     863/    1091 :                     L106:
     864/    1091 :                     ;    while(Count-- > 0 && v == 0) {
     865/    1091 :                     ;        v = *(p1++) - *(p2++);
     866/    1091 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
     867/    1095 : (MACRO)             	cpy2 R0,R11
     868/    1099 : (MACRO)             	incm R0,1
     869/    109A : (MACRO)             	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
     870/    10A6 : (MACRO)             	cpy2 R9,R10
     871/    10AA : (MACRO)             	incm R9,1
     872/    10AB : (MACRO)             	st2 R9,'O',sp,(-4+10); ASGNP2
     873/    10B8 : (MACRO)             	ld1 R11,'O',R11,0
     874/    10C2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     875/    10C5 : (MACRO)             	ld1 R10,'O',R10,0
     876/    10CF : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     877/    10D2 : (MACRO)             	alu2 R1,R11,R10,sm,smb
     878/    10DE :                     ;    }
     879/    10DE :                     L107:
     880/    10DE :                     ;    while(Count-- > 0 && v == 0) {
     881/    10DE : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     882/    10E2 : (MACRO)             	cpy2 R7,R11
     883/    10E6 : (MACRO)             	decm R7,1
     884/    10E7 : (MACRO)             	jeqU2I r11,0,L109;EQU2(reg,con)
     885/    10F3 : (MACRO)             	jzU2 r1,L106; EQ 0
     886/    10FB :                     L109:
     887/    10FB :                     ;    return v;
     888/    10FB : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)
     889/    10FF :                     L105:
     890/    10FF : (MACRO)             	release 0; release room for outgoing arguments
     891/    10FF : (MACRO)             	popr r7
     892/    1103 : (MACRO)             	popr r1
     893/    1107 : (MACRO)             	popr r0
     894/    110B : (MACRO)             	release 2; release room for local variables 
     895/    110D : (MACRO)             	Cretn
     896/    110E :                     
     897/    110E :                     _memcpy:
     898/    110E : (MACRO)             	reserve 0; save room for local variables
     899/    110E : (MACRO)             	pushr r0
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 16 - 3/26/2013 8:07:32


     900/    1113 : (MACRO)             	pushr r1
     901/    1118 : (MACRO)             	pushr r7
     902/    111D : (MACRO)             	reserve 0; save room for outgoing arguments
     903/    111D : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
     904/    1129 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     905/    1129 :                     ;        char* dst8 = (char*)dest;
     906/    1129 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
     907/    112D :                     ;        char* src8 = (char*)src;
     908/    112D : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
     909/    1131 : C0 11 4A            	lbr L112
     910/    1134 :                     L111:
     911/    1134 :                     ;        while (count--) {
     912/    1134 :                     ;            *dst8++ = *src8++;
     913/    1134 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     914/    1138 : (MACRO)             	cpy2 R1,R11
     915/    113C : (MACRO)             	incm R1,1
     916/    113D : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
     917/    1141 : (MACRO)             	cpy2 R0,R10
     918/    1145 : (MACRO)             	incm R0,1
     919/    1146 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     920/    1148 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     921/    114A :                     ;        }
     922/    114A :                     L112:
     923/    114A :                     ;        while (count--) {
     924/    114A : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     925/    114E : (MACRO)             	cpy2 R7,R11
     926/    1152 : (MACRO)             	decm R7,1
     927/    1153 : (MACRO)             	jnzU2 r11,L111; NE 0
     928/    115B :                     ;        return dest;
     929/    115B : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     930/    115F :                     L110:
     931/    115F : (MACRO)             	release 0; release room for outgoing arguments
     932/    115F : (MACRO)             	popr r7
     933/    1163 : (MACRO)             	popr r1
     934/    1167 : (MACRO)             	popr r0
     935/    116B : (MACRO)             	release 0; release room for local variables 
     936/    116B : (MACRO)             	Cretn
     937/    116C :                     
     938/    116C :                     _memset:
     939/    116C : (MACRO)             	reserve 0; save room for local variables
     940/    116C : (MACRO)             	pushr r1
     941/    1171 : (MACRO)             	pushr r7
     942/    1176 : (MACRO)             	reserve 0; save room for outgoing arguments
     943/    1176 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
     944/    1182 :                     ;{
     945/    1182 :                     ;    unsigned char* p=s;
     946/    1182 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
     947/    1186 : C0 11 98            	lbr L116
     948/    1189 :                     L115:
     949/    1189 :                     ;        *p++ = (unsigned char)c;
     950/    1189 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     951/    118D : (MACRO)             	cpy2 R1,R11
     952/    1191 : (MACRO)             	incm R1,1
     953/    1192 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
     954/    1196 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     955/    1198 :                     L116:
     956/    1198 :                     ;    while(n--)
     957/    1198 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     958/    119C : (MACRO)             	cpy2 R7,R11
     959/    11A0 : (MACRO)             	decm R7,1
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 17 - 3/26/2013 8:07:32


     960/    11A1 : (MACRO)             	jnzU2 r11,L115; NE 0
     961/    11A9 :                     ;    return s;
     962/    11A9 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     963/    11AD :                     L114:
     964/    11AD : (MACRO)             	release 0; release room for outgoing arguments
     965/    11AD : (MACRO)             	popr r7
     966/    11B1 : (MACRO)             	popr r1
     967/    11B5 : (MACRO)             	release 0; release room for local variables 
     968/    11B5 : (MACRO)             	Cretn
     969/    11B6 :                     
     970/    11B6 :                     _i1:
     971/    11B6 : 00 00               	db 2 dup (0); zerofill global
     972/    11B8 :                     _shifto:
     973/    11B8 : 00 00               	db 2 dup (0); zerofill global
     974/    11BA :                     _fexp:
     975/    11BA : 00 00               	db 2 dup (0); zerofill global
     976/    11BC :                     _fsign:
     977/    11BC : 00 00               	db 2 dup (0); zerofill global
     978/    11BE :                     	align 4
     979/    11C0 :                     _fsplit:
     980/    11C0 : 00 00 00 00         	db 4 dup (0); zerofill global
     981/    11C4 :                     L101:
     982/    11C4 : 65                  	db 101
     983/    11C5 : 78                  	db 120
     984/    11C6 : 69                  	db 105
     985/    11C7 : 74                  	db 116
     986/    11C8 : 20                  	db 32
     987/    11C9 : 25                  	db 37
     988/    11CA : 64                  	db 100
     989/    11CB : 0A                  	db 10
     990/    11CC : 00                  	db 0
     991/    11CD :                     L43:
     992/    11CD : 63                  	db 99
     993/    11CE : 76                  	db 118
     994/    11CF : 69                  	db 105
     995/    11D0 : 66                  	db 102
     996/    11D1 : 34                  	db 52
     997/    11D2 : 28                  	db 40
     998/    11D3 : 32                  	db 50
     999/    11D4 : 29                  	db 41
    1000/    11D5 : 3D                  	db 61
    1001/    11D6 : 25                  	db 37
    1002/    11D7 : 6C                  	db 108
    1003/    11D8 : 78                  	db 120
    1004/    11D9 : 0A                  	db 10
    1005/    11DA : 00                  	db 0
    1006/    11DB :                     L42:
    1007/    11DB : 63                  	db 99
    1008/    11DC : 76                  	db 118
    1009/    11DD : 69                  	db 105
    1010/    11DE : 66                  	db 102
    1011/    11DF : 34                  	db 52
    1012/    11E0 : 28                  	db 40
    1013/    11E1 : 31                  	db 49
    1014/    11E2 : 29                  	db 41
    1015/    11E3 : 3D                  	db 61
    1016/    11E4 : 25                  	db 37
    1017/    11E5 : 6C                  	db 108
    1018/    11E6 : 78                  	db 120
    1019/    11E7 : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 18 - 3/26/2013 8:07:32


    1020/    11E8 : 00                  	db 0
    1021/    11E9 :                     L41:
    1022/    11E9 : 68                  	db 104
    1023/    11EA : 65                  	db 101
    1024/    11EB : 6C                  	db 108
    1025/    11EC : 6C                  	db 108
    1026/    11ED : 6F                  	db 111
    1027/    11EE : 20                  	db 32
    1028/    11EF : 57                  	db 87
    1029/    11F0 : 6F                  	db 111
    1030/    11F1 : 72                  	db 114
    1031/    11F2 : 6C                  	db 108
    1032/    11F3 : 64                  	db 100
    1033/    11F4 : 21                  	db 33
    1034/    11F5 : 0A                  	db 10
    1035/    11F6 : 00                  	db 0
    1036/    11F7 :                     L39:
    1037/    11F7 : 48                  	db 72
    1038/    11F8 : 65                  	db 101
    1039/    11F9 : 78                  	db 120
    1040/    11FA : 20                  	db 32
    1041/    11FB : 72                  	db 114
    1042/    11FC : 65                  	db 101
    1043/    11FD : 74                  	db 116
    1044/    11FE : 75                  	db 117
    1045/    11FF : 72                  	db 114
    1046/    1200 : 6E                  	db 110
    1047/    1201 : 20                  	db 32
    1048/    1202 : 69                  	db 105
    1049/    1203 : 73                  	db 115
    1050/    1204 : 20                  	db 32
    1051/    1205 : 25                  	db 37
    1052/    1206 : 6C                  	db 108
    1053/    1207 : 78                  	db 120
    1054/    1208 : 0A                  	db 10
    1055/    1209 : 00                  	db 0
    1056/    120A :                     	align 4
    1057/    120C :                     L38:
    1058/    120C : 00 00 00 00         	dd 0x0
    1059/    1210 :                     L32:
    1060/    1210 : 0A                  	db 10
    1061/    1211 : 46                  	db 70
    1062/    1212 : 6F                  	db 111
    1063/    1213 : 72                  	db 114
    1064/    1214 : 20                  	db 32
    1065/    1215 : 25                  	db 37
    1066/    1216 : 6C                  	db 108
    1067/    1217 : 64                  	db 100
    1068/    1218 : 2C                  	db 44
    1069/    1219 : 20                  	db 32
    1070/    121A : 6D                  	db 109
    1071/    121B : 61                  	db 97
    1072/    121C : 6E                  	db 110
    1073/    121D : 74                  	db 116
    1074/    121E : 69                  	db 105
    1075/    121F : 73                  	db 115
    1076/    1220 : 73                  	db 115
    1077/    1221 : 61                  	db 97
    1078/    1222 : 20                  	db 32
    1079/    1223 : 69                  	db 105
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 19 - 3/26/2013 8:07:32


    1080/    1224 : 73                  	db 115
    1081/    1225 : 20                  	db 32
    1082/    1226 : 25                  	db 37
    1083/    1227 : 6C                  	db 108
    1084/    1228 : 64                  	db 100
    1085/    1229 : 2C                  	db 44
    1086/    122A : 20                  	db 32
    1087/    122B : 65                  	db 101
    1088/    122C : 78                  	db 120
    1089/    122D : 70                  	db 112
    1090/    122E : 20                  	db 32
    1091/    122F : 69                  	db 105
    1092/    1230 : 73                  	db 115
    1093/    1231 : 20                  	db 32
    1094/    1232 : 25                  	db 37
    1095/    1233 : 64                  	db 100
    1096/    1234 : 2C                  	db 44
    1097/    1235 : 20                  	db 32
    1098/    1236 : 73                  	db 115
    1099/    1237 : 69                  	db 105
    1100/    1238 : 67                  	db 103
    1101/    1239 : 6E                  	db 110
    1102/    123A : 20                  	db 32
    1103/    123B : 69                  	db 105
    1104/    123C : 73                  	db 115
    1105/    123D : 20                  	db 32
    1106/    123E : 25                  	db 37
    1107/    123F : 64                  	db 100
    1108/    1240 : 0A                  	db 10
    1109/    1241 : 00                  	db 0
    1110/    1242 :                     L31:
    1111/    1242 : 3C                  	db 60
    1112/    1243 : 3C                  	db 60
    1113/    1244 : 20                  	db 32
    1114/    1245 : 00                  	db 0
    1115/    1246 :                     L26:
    1116/    1246 : 3E                  	db 62
    1117/    1247 : 3E                  	db 62
    1118/    1248 : 20                  	db 32
    1119/    1249 : 00                  	db 0
    1120/    124A :                     L14:
    1121/    124A : 73                  	db 115
    1122/    124B : 68                  	db 104
    1123/    124C : 69                  	db 105
    1124/    124D : 66                  	db 102
    1125/    124E : 74                  	db 116
    1126/    124F : 6F                  	db 111
    1127/    1250 : 3D                  	db 61
    1128/    1251 : 25                  	db 37
    1129/    1252 : 64                  	db 100
    1130/    1253 : 2C                  	db 44
    1131/    1254 : 77                  	db 119
    1132/    1255 : 68                  	db 104
    1133/    1256 : 6F                  	db 111
    1134/    1257 : 6C                  	db 108
    1135/    1258 : 65                  	db 101
    1136/    1259 : 20                  	db 32
    1137/    125A : 70                  	db 112
    1138/    125B : 61                  	db 97
    1139/    125C : 72                  	db 114
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 20 - 3/26/2013 8:07:32


    1140/    125D : 74                  	db 116
    1141/    125E : 3D                  	db 61
    1142/    125F : 25                  	db 37
    1143/    1260 : 6C                  	db 108
    1144/    1261 : 64                  	db 100
    1145/    1262 : 0A                  	db 10
    1146/    1263 : 00                  	db 0
    1147/    1264 :                     L13:
    1148/    1264 : 73                  	db 115
    1149/    1265 : 69                  	db 105
    1150/    1266 : 67                  	db 103
    1151/    1267 : 6E                  	db 110
    1152/    1268 : 3D                  	db 61
    1153/    1269 : 25                  	db 37
    1154/    126A : 64                  	db 100
    1155/    126B : 2C                  	db 44
    1156/    126C : 65                  	db 101
    1157/    126D : 78                  	db 120
    1158/    126E : 70                  	db 112
    1159/    126F : 6F                  	db 111
    1160/    1270 : 6E                  	db 110
    1161/    1271 : 65                  	db 101
    1162/    1272 : 6E                  	db 110
    1163/    1273 : 74                  	db 116
    1164/    1274 : 3D                  	db 61
    1165/    1275 : 25                  	db 37
    1166/    1276 : 64                  	db 100
    1167/    1277 : 2C                  	db 44
    1168/    1278 : 6D                  	db 109
    1169/    1279 : 61                  	db 97
    1170/    127A : 6E                  	db 110
    1171/    127B : 74                  	db 116
    1172/    127C : 69                  	db 105
    1173/    127D : 73                  	db 115
    1174/    127E : 73                  	db 115
    1175/    127F : 61                  	db 97
    1176/    1280 : 3D                  	db 61
    1177/    1281 : 25                  	db 37
    1178/    1282 : 6C                  	db 108
    1179/    1283 : 64                  	db 100
    1180/    1284 : 0A                  	db 10
    1181/    1285 : 00                  	db 0
    1182/    1286 :                     L8:
    1183/    1286 : 66                  	db 102
    1184/    1287 : 73                  	db 115
    1185/    1288 : 70                  	db 112
    1186/    1289 : 6C                  	db 108
    1187/    128A : 69                  	db 105
    1188/    128B : 74                  	db 116
    1189/    128C : 2E                  	db 46
    1190/    128D : 75                  	db 117
    1191/    128E : 66                  	db 102
    1192/    128F : 3D                  	db 61
    1193/    1290 : 25                  	db 37
    1194/    1291 : 6C                  	db 108
    1195/    1292 : 78                  	db 120
    1196/    1293 : 2C                  	db 44
    1197/    1294 : 66                  	db 102
    1198/    1295 : 73                  	db 115
    1199/    1296 : 70                  	db 112
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 21 - 3/26/2013 8:07:32


    1200/    1297 : 6C                  	db 108
    1201/    1298 : 69                  	db 105
    1202/    1299 : 74                  	db 116
    1203/    129A : 2E                  	db 46
    1204/    129B : 75                  	db 117
    1205/    129C : 63                  	db 99
    1206/    129D : 5B                  	db 91
    1207/    129E : 30                  	db 48
    1208/    129F : 5D                  	db 93
    1209/    12A0 : 3D                  	db 61
    1210/    12A1 : 25                  	db 37
    1211/    12A2 : 78                  	db 120
    1212/    12A3 : 0A                  	db 10
    1213/    12A4 : 00                  	db 0
    1214/    12A5 :                     L3:
    1215/    12A5 : 66                  	db 102
    1216/    12A6 : 73                  	db 115
    1217/    12A7 : 70                  	db 112
    1218/    12A8 : 6C                  	db 108
    1219/    12A9 : 69                  	db 105
    1220/    12AA : 74                  	db 116
    1221/    12AB : 2E                  	db 46
    1222/    12AC : 75                  	db 117
    1223/    12AD : 63                  	db 99
    1224/    12AE : 5B                  	db 91
    1225/    12AF : 31                  	db 49
    1226/    12B0 : 5D                  	db 93
    1227/    12B1 : 26                  	db 38
    1228/    12B2 : 26                  	db 38
    1229/    12B3 : 30                  	db 48
    1230/    12B4 : 78                  	db 120
    1231/    12B5 : 38                  	db 56
    1232/    12B6 : 30                  	db 48
    1233/    12B7 : 3D                  	db 61
    1234/    12B8 : 25                  	db 37
    1235/    12B9 : 78                  	db 120
    1236/    12BA : 0A                  	db 10
    1237/    12BB : 00                  	db 0
    1238/    12BC :                     	include lcc1802EpiloNO.inc
(1)    1/    12BC :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    12BC :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    12BC :                     ;this is the version published with the lcc1802121229 release
(1)    4/    12BC :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    12BC :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    12BC :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    12BC :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    12BC :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    12BC :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    12BC :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    12BC :                     ;feb 27 changed stack to start at 7fff
(1)   12/    12BC :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    12BC : =EH                 rwork	equ	memAddr	;work register
(1)   14/    12BC :                     lcc1802init:	
(1)   15/    12BC : (MACRO)             	ldiReg	RCALL,_call
(1)   16/    12C2 : (MACRO)             	ldiReg	RRET,_return
(1)   17/    12C8 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   18/    12CE : E2                  	sex	SP
(1)   19/    12CF : (MACRO)             	ldiReg	RPC,$$_00000
(1)   20/    12D5 : D3                  	sep	RPC
(1)   21/    12D6 :                     $$_00000:
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 22 - 3/26/2013 8:07:32


(1)   22/    12D6 : (MACRO)             	Ccall _main	;call the main routine
(1)   23/    12D9 : C0 12 D9            $$_die:	lbr	$$_die		;loop here when main returns
(1)   24/    12DC : DE AD               	db	0xde,0xad
(1)   25/    12DE :                     
(1)   26/    12DE :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   27/    12DE :                     _setqOn:
(1)   28/    12DE : 7B                  	seq
(1)   29/    12DF : (MACRO)             	Cretn
(1)   30/    12E0 :                     _setqOff:
(1)   31/    12E0 : 7A                  	req
(1)   32/    12E1 : (MACRO)             	Cretn
(1)   33/    12E2 :                     
(1)   34/    12E2 :                     _modU2:	;16 bit unsigned remainder
(1)   35/    12E2 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   36/    12E2 : (MACRO)                 Ccall _divU2
(1)   37/    12E5 : 8D                      glo regArg2
(1)   38/    12E6 : AF                      plo retVal
(1)   39/    12E7 : 9D                      ghi regArg2
(1)   40/    12E8 : BF                      phi retVal
(1)   41/    12E9 : (MACRO)                 Cretn
(1)   42/    12EA :                         
(1)   43/    12EA :                     _modI2:	;16 bit signed remainder
(1)   44/    12EA :                     	; just calls the 16 bit division then puts remainder into return value
(1)   45/    12EA : (MACRO)                 Ccall _divI2
(1)   46/    12ED : 8D                      glo regArg2
(1)   47/    12EE : AF                      plo retVal
(1)   48/    12EF : 9D                      ghi regArg2
(1)   49/    12F0 : BF                      phi retVal
(1)   50/    12F1 : (MACRO)                 Cretn
(1)   51/    12F2 :                     
(1)   52/    12F2 :                     _out4:	
(1)   53/    12F2 : 8C                  	glo	regArg1
(1)   54/    12F3 : 22                  	dec	sp
(1)   55/    12F4 : 52                  	str	sp
(1)   56/    12F5 : 64                  	out	4
(1)   57/    12F6 : (MACRO)             	Cretn
(1)   58/    12F7 :                     
(1)   59/    12F7 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   60/    12F7 :                     	align 256
(1)   61/    1300 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   62/    1300 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   63/    1300 : D3                  	sep     R3 ;go to subroutine
(1)   64/    1301 : E2                  _call	sex	SP ;make sure X=SP
(1)   65/    1302 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   66/    1303 : 22                  	dec	sp
(1)   67/    1304 : 73                  	stxd
(1)   68/    1305 : 86                  	glo	retAddr
(1)   69/    1306 : 52                  	str	sp	
(1)   70/    1307 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   71/    1308 : A6                  	plo	retAddr
(1)   72/    1309 : 93                  	ghi	RPC
(1)   73/    130A : B6                  	phi	retAddr
(1)   74/    130B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   75/    130C : B3                  	phi	RPC
(1)   76/    130D : 46                  	lda	retAddr
(1)   77/    130E : A3                  	plo	RPC
(1)   78/    130F : 30 00               	br	_call-1
(1)   79/    1311 :                     
(1)   80/    1311 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   81/    1311 :                     ;requires programs to save the return address if they destroy it (by using call for example)
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 23 - 3/26/2013 8:07:32


(1)   82/    1311 : D3                  	sep	RPC	;return to the original program
(1)   83/    1312 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   84/    1313 : A3                  	plo	RPC
(1)   85/    1314 : 96                  	ghi	retAddr
(1)   86/    1315 : B3                  	phi	RPC
(1)   87/    1316 : 42                  	lda	SP	;pick up old return address
(1)   88/    1317 : A6                  	plo	retAddr
(1)   89/    1318 : 42                  	lda	SP
(1)   90/    1319 : B6                  	phi	retAddr
(1)   91/    131A : 30 11               	br	_return-1
(1)   92/    131C :                     
(1)   93/    131C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   94/    131C : F8 24               	ldi	(100-15-10-2)/2
(1)   95/    131E : FF 01               $$mslp:	smi	1
(1)   96/    1320 : 3A 1E               	bnz	$$mslp
(1)   97/    1322 : (MACRO)             	Cretn
(1)   98/    1323 :                     
(1)   99/    1323 :                     
(1)  100/    1323 :                     	
(1)  101/    1323 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  102/    1323 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  103/    1323 :                     _mulu2:		
(1)  104/    1323 : 22                      dec sp
(1)  105/    1324 : F8 10                   ldi 16
(1)  106/    1326 : AE                      plo	rwork	;bit count
(1)  107/    1327 : F8 00                   ldi 0
(1)  108/    1329 : BF                      phi	retVal	;quotient
(1)  109/    132A : AF                      plo retVal
(1)  110/    132B :                     $$MultLoop16_16:
(1)  111/    132B : 9C                      ghi regArg1
(1)  112/    132C : F6                      shr
(1)  113/    132D : BC                      phi regArg1
(1)  114/    132E : 8C                      glo regArg1
(1)  115/    132F : 76                      shrc
(1)  116/    1330 : AC                      plo regArg1
(1)  117/    1331 : 3B 3D                   bnf $$MultSkip16_16
(1)  118/    1333 : 8D                      glo regArg2
(1)  119/    1334 : 52                      str sp
(1)  120/    1335 : 8F                      glo retVal
(1)  121/    1336 : F4                      add 
(1)  122/    1337 : AF                      plo retVal
(1)  123/    1338 : 9D                      ghi regArg2
(1)  124/    1339 : 52                      str sp
(1)  125/    133A : 9F                      ghi retVal
(1)  126/    133B : 74                      adc
(1)  127/    133C : BF                      phi retVal
(1)  128/    133D :                     $$MultSkip16_16:
(1)  129/    133D : 8D                      glo regArg2
(1)  130/    133E : FE                      shl
(1)  131/    133F : AD                      plo regArg2
(1)  132/    1340 : 9D                      ghi regArg2
(1)  133/    1341 : 7E                      shlc
(1)  134/    1342 : BD                      phi regArg2
(1)  135/    1343 : 2E                      dec rwork
(1)  136/    1344 : 8E                      glo rwork
(1)  137/    1345 : 3A 2B                   bnz $$MultLoop16_16
(1)  138/    1347 : 12                      inc sp
(1)  139/    1348 : D5                      sep 5
(1)  140/    1349 :                     
(1)  141/    1349 :                     
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 24 - 3/26/2013 8:07:32


(1)  142/    1349 :                     _divU2:
(1)  143/    1349 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  144/    1349 :                     	; This is really an unsigned 23 bit divide
(1)  145/    1349 :                     	;thanks to Ted Rossin
(1)  146/    1349 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  147/    1349 : 22                      dec sp
(1)  148/    134A : F8 10                   ldi 16
(1)  149/    134C : AE                      plo rwork
(1)  150/    134D : F8 00                   ldi 0
(1)  151/    134F : BF                      phi retVal
(1)  152/    1350 : AF                      plo retVal
(1)  153/    1351 : BE                      phi rwork
(1)  154/    1352 :                     $$DivLoop16_16:
(1)  155/    1352 : 8C                      glo regArg1
(1)  156/    1353 : FE                      shl
(1)  157/    1354 : AC                      plo regArg1
(1)  158/    1355 : 9C                      ghi regArg1
(1)  159/    1356 : 7E                      shlc
(1)  160/    1357 : BC                      phi regArg1
(1)  161/    1358 : 8F                      glo retVal
(1)  162/    1359 : 7E                      shlc
(1)  163/    135A : AF                      plo retVal
(1)  164/    135B : 9F                      ghi retVal
(1)  165/    135C : 7E                      shlc
(1)  166/    135D : BF                      phi retVal
(1)  167/    135E : 9E                      ghi rwork
(1)  168/    135F : 7E                      shlc
(1)  169/    1360 : BE                      phi rwork
(1)  170/    1361 : 3B 73                   bnf $$DivSub16_16
(1)  171/    1363 : 8D                      glo regArg2
(1)  172/    1364 : 52                      str sp
(1)  173/    1365 : 8F                      glo retVal
(1)  174/    1366 : F4                      add 
(1)  175/    1367 : AF                      plo retVal
(1)  176/    1368 : 9D                      ghi regArg2
(1)  177/    1369 : 52                      str sp
(1)  178/    136A : 9F                      ghi retVal
(1)  179/    136B : 74                      adc 
(1)  180/    136C : BF                      phi retVal
(1)  181/    136D : 9E                      ghi rwork
(1)  182/    136E : 7C 00                   adci 0
(1)  183/    1370 : BE                      phi rwork
(1)  184/    1371 : 30 81                   br $$DivSkip16_16
(1)  185/    1373 :                     $$DivSub16_16:
(1)  186/    1373 : 8D                      glo regArg2
(1)  187/    1374 : 52                      str sp
(1)  188/    1375 : 8F                      glo retVal
(1)  189/    1376 : F7                      sm
(1)  190/    1377 : AF                      plo retVal
(1)  191/    1378 : 9D                      ghi regArg2
(1)  192/    1379 : 52                      str sp
(1)  193/    137A : 9F                      ghi retVal
(1)  194/    137B : 77                      smb 
(1)  195/    137C : BF                      phi retVal
(1)  196/    137D : 9E                      ghi rwork
(1)  197/    137E : 7F 00                   smbi 0
(1)  198/    1380 : BE                      phi rwork 
(1)  199/    1381 :                     $$DivSkip16_16:
(1)  200/    1381 : FE                      shl
(1)  201/    1382 : 33 88                   bdf $$DivSkipClear16_16
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 25 - 3/26/2013 8:07:32


(1)  202/    1384 :                     $$DivSetBit16_16:
(1)  203/    1384 : 8C                      glo regArg1
(1)  204/    1385 : F9 01                   ori  0x01
(1)  205/    1387 : AC                      plo regArg1
(1)  206/    1388 :                     $$DivSkipClear16_16:
(1)  207/    1388 : 2E                      dec rwork
(1)  208/    1389 : 8E                      glo rwork
(1)  209/    138A : 3A 52                   bnz $$DivLoop16_16
(1)  210/    138C : 9E                      ghi rwork
(1)  211/    138D : FE                      shl
(1)  212/    138E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  213/    1390 : 8D                      glo regArg2
(1)  214/    1391 : 52                      str sp
(1)  215/    1392 : 8F                      glo retVal
(1)  216/    1393 : F4                      add
(1)  217/    1394 : AF                      plo retVal
(1)  218/    1395 : 9D                      ghi regArg2
(1)  219/    1396 : 52                      str sp
(1)  220/    1397 : 9F                      ghi retVal
(1)  221/    1398 : 74                      adc
(1)  222/    1399 : BF                      phi retVal
(1)  223/    139A :                     $$DivSkipFinalAdd16_16:
(1)  224/    139A : 12                      inc sp
(1)  225/    139B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  226/    139B : 8F                      glo retVal
(1)  227/    139C : AD                      plo regArg2
(1)  228/    139D : 9F                      ghi retVal
(1)  229/    139E : BD                      phi regArg2
(1)  230/    139F : 8C                      glo regArg1
(1)  231/    13A0 : AF                      plo retVal
(1)  232/    13A1 : 9C                      ghi regArg1
(1)  233/    13A2 : BF                      phi retVal
(1)  234/    13A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  235/    13A3 : D5                      sep 5
(1)  236/    13A4 :                     
(1)  237/    13A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  238/    13A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  239/    13A4 :                     _divI2:
(1)  240/    13A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  241/    13A4 : 22                      dec	sp	;leave a work area available
(1)  242/    13A5 : 9C                      ghi regArg1
(1)  243/    13A6 : 52                      str sp	;save the sign of the 1st arg
(1)  244/    13A7 : FE                      shl
(1)  245/    13A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  246/    13AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  247/    13B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  248/    13B3 : 9D                      ghi regArg2
(1)  249/    13B4 : F3                      xor	
(1)  250/    13B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  251/    13B6 : 9D                      ghi regArg2
(1)  252/    13B7 : FE                      shl
(1)  253/    13B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  254/    13BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  255/    13C3 :                     $$pos2: ; both args now +v
(1)  256/    13C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  257/    13C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  258/    13C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  259/    13C7 : FE                      shl
(1)  260/    13C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  261/    13CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 26 - 3/26/2013 8:07:32


(1)  262/    13D3 :                     $$done:
(1)  263/    13D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  264/    13D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  265/    13D4 :                     
(1)  266/    13D4 :                     
(1)  267/    13D4 :                     	align 256    ;32 bit operations follow
(1)  268/    1400 :                     _divu4:
(1)  269/    1400 :                     ;This is an unsigned 32 bit restoring division
(1)  270/    1400 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  271/    1400 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  272/    1400 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  273/    1400 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  274/    1400 :                     
(1)  275/    1400 : F8 20               	ldi 32		;set loop count
(1)  276/    1402 : AE                  	plo memaddr	;in temp register
(1)  277/    1403 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  278/    140F :                     $$loop:
(1)  279/    140F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  280/    141B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  281/    1427 :                     
(1)  282/    1427 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  283/    143D :                     
(1)  284/    143D : FA 80               	ani 0x80	;check the top bit
(1)  285/    143F : 32 5D               	bz $$norestore	;if it's 0
(1)  286/    1441 : 89                  		glo RL8
(1)  287/    1442 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  288/    1444 : A9                  		plo RL8
(1)  289/    1445 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  290/    145B : 30 61               	br $$endlp 	;else
(1)  291/    145D :                     $$norestore:
(1)  292/    145D : 89                  		glo RL8
(1)  293/    145E : F9 01               		ori 1	;turn on the bottom bit
(1)  294/    1460 : A9                  		plo RL8
(1)  295/    1461 :                     	;end if
(1)  296/    1461 :                     $$endlp:
(1)  297/    1461 : 2E                  	dec memaddr	;check the cycle count
(1)  298/    1462 : 8E                  	glo memaddr
(1)  299/    1463 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  300/    1465 :                     	
(1)  301/    1465 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  302/    1466 :                     		
(1)  303/    1466 :                     
(1)  304/    1466 :                     _mulu4:
(1)  305/    1466 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  306/    1466 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  307/    1466 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  308/    1466 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  309/    1466 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  310/    1466 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  311/    1466 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  312/    1466 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  313/    1466 :                     	;for 10 we subtract and shift
(1)  314/    1466 :                     	;for 00 and 11 we just shift
(1)  315/    1466 :                     
(1)  316/    1466 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  317/    1472 : F8 20                   ldi 32
(1)  318/    1474 : AE                      plo memaddr		;cycle count
(1)  319/    1475 : FC 00                   adi 0		;clear df
(1)  320/    1477 :                     $$mloop:
(1)  321/    1477 : 89                      glo RL8
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 27 - 3/26/2013 8:07:32


(1)  322/    1478 : FA 01                   ani 1		;isolate bottom bit of result
(1)  323/    147A : 3B 96                   bnf	$$check_sub	;
(1)  324/    147C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  325/    147E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  326/    147E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  327/    1494 : 30 AE                   br $$shift
(1)  328/    1496 :                     $$check_sub:
(1)  329/    1496 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  330/    1498 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  331/    1498 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  332/    14AE :                     $$shift:
(1)  333/    14AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  334/    14BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  335/    14C8 :                     
(1)  336/    14C8 : 2E                      dec memaddr		;cycle count
(1)  337/    14C9 : 8E                      glo memaddr
(1)  338/    14CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  339/    14CC :                         
(1)  340/    14CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  341/    14CD :                     
(1)  342/    14CD :                     	align 256
(1)  343/    1500 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  344/    1500 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  345/    1500 :                     _divI4:
(1)  346/    1500 : 22                      dec	sp	;leave a work area available
(1)  347/    1501 : 98                      ghi RL8-1	;get the top of the dividend
(1)  348/    1502 : 52                      str sp	;save the sign of the 1st arg
(1)  349/    1503 : FE                      shl
(1)  350/    1504 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  351/    1506 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  352/    1526 :                     $$pos1: ;1st is now +v, check 2nd
(1)  353/    1526 : 9A                      ghi RL10-1
(1)  354/    1527 : F3                      xor	
(1)  355/    1528 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  356/    1529 : 9A                      ghi RL10-1
(1)  357/    152A : FE                      shl
(1)  358/    152B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  359/    152D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  360/    154D :                     $$pos2: ; both args now +v
(1)  361/    154D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  362/    1550 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  363/    1550 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  364/    1551 : FE                      shl
(1)  365/    1552 : 3B 74                   bnf $$done ;if the signs were different
(1)  366/    1554 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  367/    1574 :                     $$done:
(1)  368/    1574 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  369/    1575 :                     
(1)  370/    1575 :                     _dubdabx:	
(1)  371/    1575 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  372/    1575 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  373/    1575 :                     ;long interger is passed in rp1p2
(1)  374/    1575 :                     ;buffer pointer is passed at sp+2+4
(1)  375/    1575 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  376/    1575 :                     ;r8-11 are used as temps
(1)  377/    1575 :                     ;r8 is the working pointer
(1)  378/    1575 :                     ;r9.0 is bit count(32)
(1)  379/    1575 :                     ;r10.0 is digit count
(1)  380/    1575 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  381/    1581 : (MACRO)             	cpy2 r15,r8 ;save it for now
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 28 - 3/26/2013 8:07:32


(1)  382/    1585 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  383/    1587 : A9                  	plo r9
(1)  384/    1588 :                     $$clrlp:	;clear the passed buffer
(1)  385/    1588 : F8 00               	ldi 0	
(1)  386/    158A : 58                  	str r8	;clear a byte
(1)  387/    158B : 18                  	inc r8
(1)  388/    158C : 29                  	dec r9
(1)  389/    158D : 89                  	glo r9	;check the count
(1)  390/    158E : 3A 88               	bnz $$clrlp ;back for more
(1)  391/    1590 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  392/    1594 :                     
(1)  393/    1594 : F8 20               	ldi 32	;bit count
(1)  394/    1596 : AF                  	plo r15
(1)  395/    1597 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  396/    1597 :                     $$cktop:
(1)  397/    1597 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  398/    1598 : FE                  	shl		;check for a 1
(1)  399/    1599 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  400/    159B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  401/    15A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  402/    15A8 : 8F                  	glo r15
(1)  403/    15A9 : 3A 97               	bnz $$cktop	;
(1)  404/    15AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  405/    15AC :                     $$bitloop:
(1)  406/    15AC : F8 0A               	ldi 10	;digit count
(1)  407/    15AE : A9                  	plo r9
(1)  408/    15AF :                     $$dcklp:
(1)  409/    15AF : 08                  	ldn r8 	;pick up a digit
(1)  410/    15B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  411/    15B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  412/    15B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  413/    15B6 : 58                  	str r8	;put it back
(1)  414/    15B7 :                     $$dnoadd:
(1)  415/    15B7 : 18                  	inc r8
(1)  416/    15B8 : 29                  	dec r9	;decrement digit count
(1)  417/    15B9 : 89                  	glo r9
(1)  418/    15BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  419/    15BC :                     	
(1)  420/    15BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  421/    15C8 :                     	
(1)  422/    15C8 : F8 0A               	ldi 10	;load the digit count again
(1)  423/    15CA : A9                  	plo r9
(1)  424/    15CB :                     ;r8 is now just past the units location and ready to walk back
(1)  425/    15CB :                     $$dshlp:
(1)  426/    15CB : 28                  	dec r8	;walk back from 0's position
(1)  427/    15CC : 08                  	ldn r8	;get the digit back
(1)  428/    15CD : 7E                  	shlc	;continue the shift
(1)  429/    15CE : BF                  	phi r15 ;save it for the carry test
(1)  430/    15CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  431/    15D1 : 58                  	str r8	;put the digit back
(1)  432/    15D2 : 9F                  	ghi r15	;now test for carry
(1)  433/    15D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  434/    15D5 : 29                  	dec r9	;decrement the digit count
(1)  435/    15D6 : 89                  	glo r9
(1)  436/    15D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  437/    15D9 :                     	
(1)  438/    15D9 : 2F                  	dec r15
(1)  439/    15DA : 8F                  	glo r15
(1)  440/    15DB : 3A AC               	bnz $$bitloop
(1)  441/    15DD :                     	
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(lcc1802EpiloNO.inc) - page 29 - 3/26/2013 8:07:32


(1)  442/    15DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  443/    15E1 : F8 0A               	ldi 10		;digit count again
(1)  444/    15E3 : A9                  	plo r9
(1)  445/    15E4 :                     $$upnxt:
(1)  446/    15E4 : 08                  	ldn r8		;get digit
(1)  447/    15E5 : F9 30               	ori 0x30	;make ascii
(1)  448/    15E7 : 58                  	str r8		;put it back
(1)  449/    15E8 : 18                  	inc r8		;next digit
(1)  450/    15E9 : 29                  	dec r9		;counter
(1)  451/    15EA : 89                  	glo r9
(1)  452/    15EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  453/    15ED :                     	
(1)  454/    15ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  455/    15EF : A9                  	plo r9
(1)  456/    15F0 :                     $$cknext:
(1)  457/    15F0 : 0F                  	ldn r15		;check digit
(1)  458/    15F1 : FF 30               	smi 0x30	;for '0'
(1)  459/    15F3 : 3A FA               	bnz $$done
(1)  460/    15F5 : 1F                  	inc r15		;next digit
(1)  461/    15F6 : 29                  	dec r9		;reduce count
(1)  462/    15F7 : 89                  	glo r9
(1)  463/    15F8 : 3A F0               	bnz $$cknext
(1)  464/    15FA :                     $$done:
(1)  465/    15FA : (MACRO)             	cretn
(1)  466/    15FB :                     	
(1)  467/    15FB :                     	
(1)  468/    15FB :                     _modU4:	;32 bit unsigned remainder
(1)  469/    15FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  470/    15FB : (MACRO)                 Ccall _divU4
(1)  471/    15FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  472/    1606 : (MACRO)                 Cretn
(1)  473/    1607 :                         
(1)  474/    1607 :                     _modI4:	;32 bit signed remainder
(1)  475/    1607 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  476/    1607 : (MACRO)                 Ccall _divI4
(1)  477/    160A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  478/    1612 : (MACRO)                 Cretn
(1)  479/    1613 :                         
(1)  480/    1613 :                     	
(1)  481/    1613 :                      
    1239/    1613 :                     	include LCC1802fp.inc
(1)    1/    1613 :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    1613 :                     ;maybe originally from RCA
(1)    3/    1613 :                     ;these routines use ALL the registers from 6-15!
(1)    4/    1613 :                     ;8-15 were more or less available to start with
(1)    5/    1613 :                     ;it saves 6 when it uses it
(1)    6/    1613 :                     ;I save 7 on entry and restore on exit
(1)    7/    1613 :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    1613 : =BH                 FB	equ	11	;was R9
(1)    9/    1613 : =9H                 F9	equ	9	;was R7
(1)   10/    1613 : =7H                 F7	equ	7	;was RB
(1)   11/    1613 :                     
(1)   12/    1613 :                     ; *** Convert signed long to float
(1)   13/    1613 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    1613 :                     ; *** result in same register
(1)   15/    1613 :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    1613 :                     	align 256
(1)   17/    1700 : F8 00               cvif4:	ldi	0
(1)   18/    1702 : BE                  	phi	memaddr	;sign
(1)   19/    1703 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 30 - 3/26/2013 8:07:32


(1)   20/    1705 : AE                  	plo	memaddr	;
(1)   21/    1706 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    1707 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    1709 : FE                  	shl		;sign bit to df
(1)   24/    170A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    170C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    170D : BE                  	phi	memaddr	;save it
(1)   27/    170E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    172E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    1730 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    1731 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    1733 : 99                  	ghi	RL8	;next byte
(1)   32/    1734 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    1736 : 89                  	glo	RL8	;last byte
(1)   34/    1737 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    1739 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    173A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    173C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    173D : (MACRO)             	shru4	RL8
(1)   39/    1749 : 30 39               	br	$$sgnpos
(1)   40/    174B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    174C : FA 80               	ani	0x80	;isolate it
(1)   42/    174E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    1750 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    1751 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    175D : 30 4B               	br	$$shl
(1)   46/    175F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    1760 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    1761 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    1762 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    1764 : 88                  	glo	RL8-1	;get the byte
(1)   51/    1765 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    1767 : A8                  	plo	RL8-1	;put it back
(1)   53/    1768 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    1769 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    176B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    176C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    176E : B8                  	phi	RL8-1	;place it
(1)   58/    176F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    1770 :                     	
(1)   60/    1770 :                     
(1)   61/    1770 :                     
(1)   62/    1770 :                     ; *** Convert float to signed long
(1)   63/    1770 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    1770 :                     ; *** result in same register
(1)   65/    1770 :                     	align 256
(1)   66/    1800 :                     cvfi4:
(1)   67/    1800 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    1801 : BE                  	phi	memaddr ;save for later
(1)   69/    1802 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    1803 : FE                  	shl		;shift to df
(1)   71/    1804 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    1805 : 7E                  	shlc		;combine with 0
(1)   73/    1806 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    1806 : 22                  	dec	sp
(1)   75/    1807 : 52                  	str	sp
(1)   76/    1808 : F8 96               	ldi	150
(1)   77/    180A : F7                  	sm		;calculate shift count needed
(1)   78/    180B :                     ;*******note - the df flag set here is tested later
(1)   79/    180B : AE                  	plo	memaddr
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 31 - 3/26/2013 8:07:32


(1)   80/    180C : 12                  	inc	sp	;release work area
(1)   81/    180D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    180D : F8 00               	ldi	0
(1)   83/    180F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    1810 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    1811 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    1813 : A8                  	plo	RL8-1	;put it back
(1)   87/    1814 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    1815 : 32 3B               	bz	$$sign
(1)   89/    1817 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    1817 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    1819 :                     
(1)   92/    1819 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    1825 : 2E                  	dec	memaddr	;check shift count
(1)   94/    1826 : 8E                  	glo	memaddr
(1)   95/    1827 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    1829 : 30 3B               	br	$$sign
(1)   97/    182B :                     
(1)   98/    182B :                     ;handle negative shift as best I can - gigo
(1)   99/    182B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    1837 : 1E                  	inc	memaddr
(1)  101/    1838 : 8E                  	glo	memaddr
(1)  102/    1839 : 3A 2B               	bnz	$$lsh	
(1)  103/    183B :                     	
(1)  104/    183B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    183C : FE                  	shl		;shift sign bit into df
(1)  106/    183D : 3B 61               	bnf	$$done
(1)  107/    183F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    185F : 30 61               	br	$$done	; and return
(1)  109/    1861 :                     
(1)  110/    1861 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    1862 :                     
(1)  112/    1862 :                     ; *** Check if character is numeric
(1)  113/    1862 :                     ; *** D - char to check
(1)  114/    1862 :                     ; *** Returns DF=1 if numeric
(1)  115/    1862 :                     ; ***         DF=0 if not
(1)  116/    1862 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    1863 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    1865 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    1867 : FF 0A                          smi     10                  ; see if above
(1)  120/    1869 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    186B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    186D : C8                             lskp
(1)  123/    186E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    1870 : 8E                             glo     r14                 ; recover character
(1)  125/    1871 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    1872 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    1872 :                     ; *******************************
(1)  128/    1872 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    1873 : F6                             shr
(1)  130/    1874 : B8                             phi   r8
(1)  131/    1875 : 88                             glo   r8
(1)  132/    1876 : 76                             shrc
(1)  133/    1877 : A8                             plo   r8
(1)  134/    1878 : 99                             ghi   F9                    ; shift low word right
(1)  135/    1879 : 76                             shrc
(1)  136/    187A : B9                             phi   F9
(1)  137/    187B : 89                             glo   F9
(1)  138/    187C : 76                             shrc
(1)  139/    187D : A9                             plo   F9
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 32 - 3/26/2013 8:07:32


(1)  140/    187E : (MACRO)                        Cretn
(1)  141/    187F :                     
(1)  142/    187F :                     ; ******************************
(1)  143/    187F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    187F :                     ; ******************************
(1)  145/    187F : 89                  fp_shl_1:  glo   F9
(1)  146/    1880 : FE                             shl
(1)  147/    1881 : A9                             plo   F9
(1)  148/    1882 : 99                             ghi   F9
(1)  149/    1883 : 7E                             shlc
(1)  150/    1884 : B9                             phi   F9
(1)  151/    1885 : 88                             glo   r8
(1)  152/    1886 : 7E                             shlc
(1)  153/    1887 : A8                             plo   r8
(1)  154/    1888 : 98                             ghi   r8
(1)  155/    1889 : 7E                             shlc
(1)  156/    188A : B8                             phi   r8
(1)  157/    188B : D5                             sep   RRET
(1)  158/    188C :                     
(1)  159/    188C :                     ; **********************
(1)  160/    188C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    188C :                     ; **********************
(1)  162/    188C : 8B                  fp_add_12: glo   FB
(1)  163/    188D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    188E : 52                             str   r2
(1)  165/    188F : 89                             glo   F9
(1)  166/    1890 : F4                             add
(1)  167/    1891 : A9                             plo   F9
(1)  168/    1892 : 9B                             ghi   FB
(1)  169/    1893 : 52                             str   r2
(1)  170/    1894 : 99                             ghi   F9
(1)  171/    1895 : 74                             adc
(1)  172/    1896 : B9                             phi   F9
(1)  173/    1897 : 8A                             glo   R10
(1)  174/    1898 : 52                             str   r2
(1)  175/    1899 : 88                             glo   r8
(1)  176/    189A : 74                             adc
(1)  177/    189B : A8                             plo   r8
(1)  178/    189C : 9A                             ghi   R10
(1)  179/    189D : 52                             str   r2
(1)  180/    189E : 98                             ghi   r8
(1)  181/    189F : 74                             adc
(1)  182/    18A0 : B8                             phi   r8
(1)  183/    18A1 : 12                             inc	r2	;wjr - release work area
(1)  184/    18A2 : (MACRO)                        Cretn
(1)  185/    18A3 :                     
(1)  186/    18A3 :                     ; *******************************
(1)  187/    18A3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    18A3 :                     ; *******************************
(1)  189/    18A3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    18A4 : F6                             shr
(1)  191/    18A5 : BF                             phi   R15
(1)  192/    18A6 : 8F                             glo   R15
(1)  193/    18A7 : 76                             shrc
(1)  194/    18A8 : AF                             plo   R15
(1)  195/    18A9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    18AA : 76                             shrc
(1)  197/    18AB : BD                             phi   R13
(1)  198/    18AC : 8D                             glo   R13
(1)  199/    18AD : 76                             shrc
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 33 - 3/26/2013 8:07:32


(1)  200/    18AE : AD                             plo   R13
(1)  201/    18AF : (MACRO)                        Cretn
(1)  202/    18B0 :                     
(1)  203/    18B0 :                     ; *************************************
(1)  204/    18B0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    18B0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    18B0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    18B0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    18B0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    18B0 :                     ; *************************************
(1)  210/    18B0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    18B1 : FA 80                          ani   080h                  ; check it
(1)  212/    18B3 : CA 18 C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    18B6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    18B9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    18BA : FF 01                          smi   1                     ; minus 1
(1)  216/    18BC : BF                             phi   R15                    ; and put it back
(1)  217/    18BD : C0 18 B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    18C0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    18C1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    18C2 : A8                             plo   r8                    ; set aside
(1)  221/    18C3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    18C4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    18C5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    18C6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    18C7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    18C8 : A8                             plo   r8                    ; and put it back
(1)  227/    18C9 : 87                             glo   F7                   ; get signs
(1)  228/    18CA : F6                             shr                         ; get sign 1
(1)  229/    18CB : 98                             ghi   r8                    ; recover exponent
(1)  230/    18CC : 76                             shrc                        ; shift in sign
(1)  231/    18CD : B8                             phi   r8                    ; put it back
(1)  232/    18CE : 12                             inc	r2	;wjr release work area
(1)  233/    18CF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    18D3 : (MACRO)             	   popr R12	;wjr
(1)  235/    18D7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    18DB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    18DC :                     
(1)  238/    18DC :                     ; ************************************
(1)  239/    18DC :                     ; *** Get exponenst from arguments ***
(1)  240/    18DC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    18DC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    18DC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    18DC :                     ; ***          RF.0 - exp2         ***
(1)  244/    18DC :                     ; ************************************
(1)  245/    18DC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    18DD : FE                             shl                         ; shift it into DF
(1)  247/    18DE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    18DF : 7E                             shlc                        ; shift in first bit
(1)  249/    18E0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    18E1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    18E1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    18E2 : FE                             shl                         ; shift it into DF
(1)  253/    18E3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    18E4 : 7E                             shlc                        ; shift in first bit
(1)  255/    18E5 : AF                             plo   R15                    ; put into RF
(1)  256/    18E6 : D5                             sep   RRET                  ; return to caller
(1)  257/    18E7 :                     
(1)  258/    18E7 :                     ; ************************************
(1)  259/    18E7 :                     ; *** Get signs from arguments     ***
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 34 - 3/26/2013 8:07:32


(1)  260/    18E7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    18E7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    18E7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    18E7 :                     ; ************************************
(1)  264/    18E7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    18E8 : FE                             shl                         ; shift into DF
(1)  266/    18E9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    18EA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    18EB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    18EC : A7                             plo   F7                    ; save them
(1)  270/    18ED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    18EE :                     
(1)  272/    18EE :                     ; ***************************************
(1)  273/    18EE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    18EE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    18EE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    18EE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    18EE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    18EE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    18EE :                     ; ***        F7.0 - signs        ***
(1)  280/    18EE :                     ; ***************************************
(1)  281/    18EE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    18EF : CA 19 07                       lbnz  add_a1nz
(1)  283/    18F2 : 88                             glo   r8
(1)  284/    18F3 : CA 19 07                       lbnz  add_a1nz
(1)  285/    18F6 : 99                             ghi   F9
(1)  286/    18F7 : CA 19 07                       lbnz  add_a1nz
(1)  287/    18FA : 89                             glo   F9
(1)  288/    18FB : CA 19 07                       lbnz  add_a1nz
(1)  289/    18FE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    18FF : B8                             phi   r8
(1)  291/    1900 : 8A                             glo   R10
(1)  292/    1901 : A8                             plo   r8
(1)  293/    1902 : 9B                             ghi   FB
(1)  294/    1903 : B9                             phi   F9
(1)  295/    1904 : 8B                             glo   FB
(1)  296/    1905 : A9                             plo   F9
(1)  297/    1906 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    1907 :                     
(1)  299/    1907 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    1908 : CA 19 18                       lbnz  add_a2nz
(1)  301/    190B : 8A                             glo   R10
(1)  302/    190C : CA 19 18                       lbnz  add_a2nz
(1)  303/    190F : 9B                             ghi   FB
(1)  304/    1910 : CA 19 18                       lbnz  add_a2nz
(1)  305/    1913 : 8B                             glo   FB
(1)  306/    1914 : CA 19 18                       lbnz  add_a2nz
(1)  307/    1917 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    1918 :                                
(1)  309/    1918 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    191D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    1922 : (MACRO)             	   pushr R13	;wjr
(1)  312/    1927 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    1928 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    192B : 9F                             ghi   R15
(1)  315/    192C : 52                             str   r2
(1)  316/    192D : 8F                             glo   R15
(1)  317/    192E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    192F : CB 19 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    1932 :                     
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 35 - 3/26/2013 8:07:32


(1)  320/    1932 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    1933 : AE                             plo   R14
(1)  322/    1934 : 9A                             ghi   R10
(1)  323/    1935 : B8                             phi   r8
(1)  324/    1936 : 8E                             glo   R14
(1)  325/    1937 : BA                             phi   R10
(1)  326/    1938 : 88                             glo   r8
(1)  327/    1939 : AE                             plo   R14
(1)  328/    193A : 8A                             glo   R10
(1)  329/    193B : A8                             plo   r8
(1)  330/    193C : 8E                             glo   R14
(1)  331/    193D : AA                             plo   R10
(1)  332/    193E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    193F : AE                             plo   R14
(1)  334/    1940 : 9B                             ghi   FB
(1)  335/    1941 : B9                             phi   F9
(1)  336/    1942 : 8E                             glo   R14
(1)  337/    1943 : BB                             phi   FB
(1)  338/    1944 : 89                             glo   F9
(1)  339/    1945 : AE                             plo   R14
(1)  340/    1946 : 8B                             glo   FB
(1)  341/    1947 : A9                             plo   F9
(1)  342/    1948 : 8E                             glo   R14
(1)  343/    1949 : AB                             plo   FB
(1)  344/    194A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    194B : AE                             plo   R14
(1)  346/    194C : 8F                             glo   R15
(1)  347/    194D : BF                             phi   R15
(1)  348/    194E : 8E                             glo   R14
(1)  349/    194F : AF                             plo   R15
(1)  350/    1950 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    1953 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    1955 : B8                             phi   r8
(1)  353/    1956 : BA                             phi   R10
(1)  354/    1957 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    1959 : 52                             str   r2
(1)  356/    195A : 88                             glo   r8
(1)  357/    195B : F1                             or
(1)  358/    195C : A8                             plo   r8
(1)  359/    195D : 8A                             glo   R10
(1)  360/    195E : F1                             or
(1)  361/    195F : AA                             plo   R10
(1)  362/    1960 : 9F                             ghi   R15                    ; get exp1
(1)  363/    1961 : 52                             str   r2                    ; place into memory
(1)  364/    1962 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    1963 : F7                             sm                          ; see if match to exp1
(1)  366/    1964 : C2 19 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    1967 : 8F                             glo   R15                    ; need to increase it
(1)  368/    1968 : FC 01                          adi   1
(1)  369/    196A : AF                             plo   R15
(1)  370/    196B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    196C : F6                             shr
(1)  372/    196D : AA                             plo   R10
(1)  373/    196E : 9B                             ghi   FB
(1)  374/    196F : 76                             shrc
(1)  375/    1970 : BB                             phi   FB
(1)  376/    1971 : 8B                             glo   FB
(1)  377/    1972 : 76                             shrc
(1)  378/    1973 : AB                             plo   FB
(1)  379/    1974 : C0 19 62                       lbr   add_lp1               ; keep shifting until exponents match
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 36 - 3/26/2013 8:07:32


(1)  380/    1977 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    1978 : 52                             str   r2
(1)  382/    1979 : F6                             shr
(1)  383/    197A : F3                             xor
(1)  384/    197B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    197D : CA 19 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    1980 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    1983 : C0 19 BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    1986 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    1987 : 52                             str   r2
(1)  390/    1988 : 89                             glo   F9
(1)  391/    1989 : F7                             sm
(1)  392/    198A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    198B : 9B                             ghi   FB
(1)  394/    198C : 52                             str   r2
(1)  395/    198D : 99                             ghi   F9
(1)  396/    198E : 77                             smb
(1)  397/    198F : BC                             phi   R12
(1)  398/    1990 : 8A                             glo   R10
(1)  399/    1991 : 52                             str   r2
(1)  400/    1992 : 88                             glo   r8
(1)  401/    1993 : 77                             smb
(1)  402/    1994 : AD                             plo   R13
(1)  403/    1995 : 9A                             ghi   R10
(1)  404/    1996 : 52                             str   r2
(1)  405/    1997 : 98                             ghi   r8
(1)  406/    1998 : 77                             smb
(1)  407/    1999 : BD                             phi   R13
(1)  408/    199A : CB 19 A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    199D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    199E : B8                             phi   r8
(1)  411/    199F : 8D                             glo   R13
(1)  412/    19A0 : A8                             plo   r8
(1)  413/    19A1 : 9C                             ghi   R12
(1)  414/    19A2 : B9                             phi   F9
(1)  415/    19A3 : 8C                             glo   R12
(1)  416/    19A4 : A9                             plo   F9
(1)  417/    19A5 : C0 19 BF                       lbr   add_fnl               ; finalize
(1)  418/    19A8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    19A9 : 52                             str   r2
(1)  420/    19AA : 8B                             glo   FB
(1)  421/    19AB : F7                             sm
(1)  422/    19AC : A9                             plo   F9
(1)  423/    19AD : 99                             ghi   F9
(1)  424/    19AE : 52                             str   r2
(1)  425/    19AF : 9B                             ghi   FB
(1)  426/    19B0 : 77                             smb
(1)  427/    19B1 : B9                             phi   F9
(1)  428/    19B2 : 88                             glo   r8
(1)  429/    19B3 : 52                             str   r2
(1)  430/    19B4 : 8A                             glo   R10
(1)  431/    19B5 : 77                             smb
(1)  432/    19B6 : A8                             plo   r8
(1)  433/    19B7 : 98                             ghi   r8
(1)  434/    19B8 : 52                             str   r2
(1)  435/    19B9 : 9A                             ghi   R10
(1)  436/    19BA : 77                             smb
(1)  437/    19BB : B8                             phi   r8
(1)  438/    19BC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    19BD : FE                             shl
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 37 - 3/26/2013 8:07:32


(1)  440/    19BE : A7                             plo   F7
(1)  441/    19BF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    19C0 : CA 19 D0                       lbnz  add_nz                ; jump if not
(1)  443/    19C3 : 88                             glo   r8
(1)  444/    19C4 : CA 19 D0                       lbnz  add_nz
(1)  445/    19C7 : 99                             ghi   F9
(1)  446/    19C8 : CA 19 D0                       lbnz  add_nz
(1)  447/    19CB : 89                             glo   F9
(1)  448/    19CC : CA 19 D0                       lbnz  add_nz
(1)  449/    19CF : (MACRO)                        Cretn                       ; return the zero
(1)  450/    19D0 : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  451/    19D1 : C2 19 DE                       lbz   add_nx                ; jump if not
(1)  452/    19D4 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  453/    19D7 : 9F                             ghi   R15                    ; get exp1
(1)  454/    19D8 : FC 01                          adi   1                     ; increment it
(1)  455/    19DA : BF                             phi   R15                    ; and put it back
(1)  456/    19DB : C0 19 D0                       lbr   add_nz                ; keep going until not > 24 bits
(1)  457/    19DE :                     
(1)  458/    19DE : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  459/    19DF : F6                             shr
(1)  460/    19E0 : A7                             plo   F7
(1)  461/    19E1 : C0 18 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  462/    19E4 :                     
(1)  463/    19E4 :                     ; ***************************************
(1)  464/    19E4 :                     ; *** sub 2 SP floating point numbers ***
(1)  465/    19E4 :                     ; *** R8:F9 - Arg 1                   ***
(1)  466/    19E4 :                     ; *** RA:FB - Arg 2                   ***
(1)  467/    19E4 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  468/    19E4 :                     ; ***************************************
(1)  469/    19E4 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  470/    19E5 : FB 80                          xri   080h
(1)  471/    19E7 : BA                             phi   R10                    ; and put it back
(1)  472/    19E8 : C0 18 EE                       lbr   fp_add                ; now just add
(1)  473/    19EB :                     
(1)  474/    19EB :                     ; ***************************************
(1)  475/    19EB :                     ; *** Div 2 SP floating point numbers ***
(1)  476/    19EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  477/    19EB :                     ; *** RA:FB - Arg 2                   ***
(1)  478/    19EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  479/    19EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  480/    19EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  481/    19EB :                     ; ***        F7.0 - signs        ***
(1)  482/    19EB :                     ; ***************************************
(1)  483/    19EB : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  484/    19EC : CA 19 FC                       lbnz  div_a1nz
(1)  485/    19EF : 88                             glo   r8
(1)  486/    19F0 : CA 19 FC                       lbnz  div_a1nz
(1)  487/    19F3 : 99                             ghi   F9
(1)  488/    19F4 : CA 19 FC                       lbnz  div_a1nz
(1)  489/    19F7 : 89                             glo   F9
(1)  490/    19F8 : CA 19 FC                       lbnz  div_a1nz
(1)  491/    19FB : (MACRO)                        Cretn	                ; just return the zero
(1)  492/    19FC : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  493/    19FD : CA 1A 1A                       lbnz  div_a2nz
(1)  494/    1A00 : 8A                             glo   R10
(1)  495/    1A01 : CA 1A 1A                       lbnz  div_a2nz
(1)  496/    1A04 : 9B                             ghi   FB
(1)  497/    1A05 : CA 1A 1A                       lbnz  div_a2nz
(1)  498/    1A08 : 8B                             glo   FB
(1)  499/    1A09 : CA 1A 1A                       lbnz  div_a2nz
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 38 - 3/26/2013 8:07:32


(1)  500/    1A0C : 98                             ghi   r8                    ; need sign of arg1
(1)  501/    1A0D : FA 80                          ani   080h                  ; want only sign
(1)  502/    1A0F : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  503/    1A11 : B8                             phi   r8                    ; put into answer
(1)  504/    1A12 : F8 80                          ldi   080h                  ; build rest of answer
(1)  505/    1A14 : A8                             plo   r8 
(1)  506/    1A15 : F8 00                          ldi   0
(1)  507/    1A17 : B9                             phi   F9
(1)  508/    1A18 : A9                             plo   F9
(1)  509/    1A19 : (MACRO)                        Cretn                  	; and return to caller
(1)  510/    1A1A :                     
(1)  511/    1A1A : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  512/    1A1F : (MACRO)             	   pushr R12	;wjr save param regs
(1)  513/    1A24 : (MACRO)             	   pushr R13	;wjr
(1)  514/    1A29 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  515/    1A2A :                     
(1)  516/    1A2A : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  517/    1A2D : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  518/    1A30 : 8F                             glo   R15                    ; get exp2
(1)  519/    1A31 : FF 7F                          smi   127                   ; remove bias
(1)  520/    1A33 : 52                             str   r2                    ; place into memory
(1)  521/    1A34 : 9F                             ghi   R15                    ; get exp1
(1)  522/    1A35 : FF 7F                          smi   127                   ; remove bias
(1)  523/    1A37 : F7                             sm                          ; perform exp1 - exp2
(1)  524/    1A38 : FC 7F                          adi   127                   ; put bias back in
(1)  525/    1A3A : 73                             stxd                        ; save onto stack
(1)  526/    1A3B : 87                             glo   F7                    ; determine sign for answer
(1)  527/    1A3C : 52                             str   r2
(1)  528/    1A3D : F6                             shr
(1)  529/    1A3E : F3                             xor
(1)  530/    1A3F : 73                             stxd                        ; place onto stack
(1)  531/    1A40 : F8 00                          ldi   0                     ; setup man
(1)  532/    1A42 : BA                             phi   R10
(1)  533/    1A43 : 8A                             glo   R10
(1)  534/    1A44 : F9 80                          ori   080h
(1)  535/    1A46 : AA                             plo   R10
(1)  536/    1A47 : F8 00                          ldi   0                     ; setup div
(1)  537/    1A49 : B8                             phi   r8
(1)  538/    1A4A : 88                             glo   r8
(1)  539/    1A4B : F9 80                          ori   080h
(1)  540/    1A4D : A8                             plo   r8
(1)  541/    1A4E : F8 00                          ldi   0                     ; setup result
(1)  542/    1A50 : BC                             phi   R12
(1)  543/    1A51 : AC                             plo   R12
(1)  544/    1A52 : B7                             phi   F7
(1)  545/    1A53 : A7                             plo   F7
(1)  546/    1A54 : AF                             plo   R15                    ; setup quotient
(1)  547/    1A55 : BF                             phi   R15
(1)  548/    1A56 : BD                             phi   R13
(1)  549/    1A57 : AD                             plo   R13
(1)  550/    1A58 : F8 80                          ldi   080h
(1)  551/    1A5A : AF                             plo   R15
(1)  552/    1A5B : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  553/    1A5C : CA 1A 6E                       lbnz  div_go1
(1)  554/    1A5F : 88                             glo   r8
(1)  555/    1A60 : CA 1A 6E                       lbnz  div_go1
(1)  556/    1A63 : 99                             ghi   F9
(1)  557/    1A64 : CA 1A 6E                       lbnz  div_go1
(1)  558/    1A67 : 89                             glo   F9
(1)  559/    1A68 : CA 1A 6E                       lbnz  div_go1
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 39 - 3/26/2013 8:07:32


(1)  560/    1A6B : C0 1A CE                       lbr   div_z
(1)  561/    1A6E : 9A                  div_go1:   ghi   R10
(1)  562/    1A6F : CA 1A 81                       lbnz  div_go
(1)  563/    1A72 : 8A                             glo   R10
(1)  564/    1A73 : CA 1A 81                       lbnz  div_go
(1)  565/    1A76 : 9B                             ghi   FB
(1)  566/    1A77 : CA 1A 81                       lbnz  div_go
(1)  567/    1A7A : 8B                             glo   FB
(1)  568/    1A7B : CA 1A 81                       lbnz  div_go
(1)  569/    1A7E : C0 1A CE                       lbr   div_z                 ; nothing more to do
(1)  570/    1A81 : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  571/    1A82 : 52                             str   r2
(1)  572/    1A83 : 89                             glo   F9
(1)  573/    1A84 : F7                             sm
(1)  574/    1A85 : 9B                             ghi   FB
(1)  575/    1A86 : 52                             str   r2
(1)  576/    1A87 : 99                             ghi   F9
(1)  577/    1A88 : 77                             smb
(1)  578/    1A89 : 8A                             glo   R10
(1)  579/    1A8A : 52                             str   r2
(1)  580/    1A8B : 88                             glo   r8
(1)  581/    1A8C : 77                             smb
(1)  582/    1A8D : 9A                             ghi   R10
(1)  583/    1A8E : 52                             str   r2
(1)  584/    1A8F : 98                             ghi   r8
(1)  585/    1A90 : 77                             smb
(1)  586/    1A91 : CB 1A BC                       lbnf  div_nope              ; jump if div was smaller
(1)  587/    1A94 : 8B                             glo   FB                    ; div -= man
(1)  588/    1A95 : 52                             str   r2
(1)  589/    1A96 : 89                             glo   F9
(1)  590/    1A97 : F7                             sm
(1)  591/    1A98 : A9                             plo   F9
(1)  592/    1A99 : 9B                             ghi   FB
(1)  593/    1A9A : 52                             str   r2
(1)  594/    1A9B : 99                             ghi   F9
(1)  595/    1A9C : 77                             smb
(1)  596/    1A9D : B9                             phi   F9
(1)  597/    1A9E : 8A                             glo   R10
(1)  598/    1A9F : 52                             str   r2
(1)  599/    1AA0 : 88                             glo   r8
(1)  600/    1AA1 : 77                             smb
(1)  601/    1AA2 : A8                             plo   r8
(1)  602/    1AA3 : 9A                             ghi   R10
(1)  603/    1AA4 : 52                             str   r2
(1)  604/    1AA5 : 98                             ghi   r8
(1)  605/    1AA6 : 77                             smb
(1)  606/    1AA7 : B8                             phi   r8
(1)  607/    1AA8 : 9F                             ghi   R15                    ; merge quotient into result
(1)  608/    1AA9 : 52                             str   r2
(1)  609/    1AAA : 9C                             ghi   R12
(1)  610/    1AAB : F1                             or
(1)  611/    1AAC : BC                             phi   R12
(1)  612/    1AAD : 8F                             glo   R15
(1)  613/    1AAE : 52                             str   r2
(1)  614/    1AAF : 8C                             glo   R12
(1)  615/    1AB0 : F1                             or
(1)  616/    1AB1 : AC                             plo   R12
(1)  617/    1AB2 : 9D                             ghi   R13
(1)  618/    1AB3 : 52                             str   r2
(1)  619/    1AB4 : 97                             ghi   F7
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 40 - 3/26/2013 8:07:32


(1)  620/    1AB5 : F1                             or
(1)  621/    1AB6 : B7                             phi   F7
(1)  622/    1AB7 : 8D                             glo   R13
(1)  623/    1AB8 : 52                             str   r2
(1)  624/    1AB9 : 87                             glo   F7
(1)  625/    1ABA : F1                             or
(1)  626/    1ABB : A7                             plo   F7
(1)  627/    1ABC : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  628/    1ABD : 18 A3                          dw    fp_shr_fd
(1)  629/    1ABF : 9A                             ghi   R10                    ; shift divisor right
(1)  630/    1AC0 : F6                             shr
(1)  631/    1AC1 : BA                             phi   R10
(1)  632/    1AC2 : 8A                             glo   R10
(1)  633/    1AC3 : 76                             shrc
(1)  634/    1AC4 : AA                             plo   R10
(1)  635/    1AC5 : 9B                             ghi   FB
(1)  636/    1AC6 : 76                             shrc
(1)  637/    1AC7 : BB                             phi   FB
(1)  638/    1AC8 : 8B                             glo   FB
(1)  639/    1AC9 : 76                             shrc
(1)  640/    1ACA : AB                             plo   FB
(1)  641/    1ACB : C0 1A 5B                       lbr   div_lp                ; loop back until done
(1)  642/    1ACE : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  643/    1ACF : B8                             phi   r8
(1)  644/    1AD0 : 8C                             glo   R12
(1)  645/    1AD1 : A8                             plo   r8
(1)  646/    1AD2 : 97                             ghi   F7
(1)  647/    1AD3 : B9                             phi   F9
(1)  648/    1AD4 : 87                             glo   F7
(1)  649/    1AD5 : A9                             plo   F9
(1)  650/    1AD6 : 60                             irx                         ; recover sign
(1)  651/    1AD7 : 72                             ldxa
(1)  652/    1AD8 : A7                             plo   F7
(1)  653/    1AD9 : F0                             ldx                         ; recover answer exponent
(1)  654/    1ADA : BF                             phi   R15
(1)  655/    1ADB : C0 18 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  656/    1ADE :                     
(1)  657/    1ADE :                     ; ***************************************
(1)  658/    1ADE :                     ; *** Mul 2 SP floating point numbers ***
(1)  659/    1ADE :                     ; *** R8:F9 - Arg 1                   ***
(1)  660/    1ADE :                     ; *** RA:FB - Arg 2                   ***
(1)  661/    1ADE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  662/    1ADE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  663/    1ADE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  664/    1ADE :                     ; ***        F7.0 - signs             ***
(1)  665/    1ADE :                     ; ***************************************
(1)  666/    1ADE : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  667/    1AE3 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  668/    1AE8 : (MACRO)             	   pushr R13	;wjr
(1)  669/    1AED : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  670/    1AEE :                     
(1)  671/    1AEE : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  672/    1AF1 : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  673/    1AF4 : 8F                             glo   R15                    ; get exp2
(1)  674/    1AF5 : FF 7F                          smi   127                   ; remove bias
(1)  675/    1AF7 : 52                             str   r2                    ; place into memory
(1)  676/    1AF8 : 9F                             ghi   R15                    ; get exp1
(1)  677/    1AF9 : FF 7F                          smi   127                   ; remove bias
(1)  678/    1AFB : F4                             add                         ; add in exponent 2
(1)  679/    1AFC : FC 7F                          adi   127                   ; put bias back in
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 41 - 3/26/2013 8:07:32


(1)  680/    1AFE : 73                             stxd                        ; place onto stack
(1)  681/    1AFF : 87                             glo   F7                    ; determine sign for answer
(1)  682/    1B00 : 52                             str   r2
(1)  683/    1B01 : F6                             shr
(1)  684/    1B02 : F3                             xor
(1)  685/    1B03 : 73                             stxd                        ; place onto stack
(1)  686/    1B04 : 9E                             ghi   R14                    ; get baud constant
(1)  687/    1B05 : 73                             stxd                        ; save on stack
(1)  688/    1B06 : 96                             ghi   r6                    ; save return position on stack
(1)  689/    1B07 : 73                             stxd
(1)  690/    1B08 : 86                             glo   r6
(1)  691/    1B09 : 73                             stxd
(1)  692/    1B0A : F8 00                          ldi   0                     ; initial value of ct
(1)  693/    1B0C : 73                             stxd
(1)  694/    1B0D : BE                             phi   R14                    ; set mulH to 0
(1)  695/    1B0E : AE                             plo   R14
(1)  696/    1B0F : B6                             phi   r6
(1)  697/    1B10 : A6                             plo   r6
(1)  698/    1B11 : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  699/    1B12 : 88                             glo   r8                    ; be sure high bit is set
(1)  700/    1B13 : F9 80                          ori   080h
(1)  701/    1B15 : A8                             plo   r8
(1)  702/    1B16 : F8 00                          ldi   0
(1)  703/    1B18 : BC                             phi   R12                    ; set result to 0
(1)  704/    1B19 : AC                             plo   R12
(1)  705/    1B1A : B7                             phi   F7
(1)  706/    1B1B : A7                             plo   F7
(1)  707/    1B1C : BF                             phi   R15
(1)  708/    1B1D : AF                             plo   R15
(1)  709/    1B1E : BD                             phi   R13
(1)  710/    1B1F : AD                             plo   R13
(1)  711/    1B20 : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  712/    1B21 : 8A                             glo   R10                    ; be sure high bit is set
(1)  713/    1B22 : F9 80                          ori   080h
(1)  714/    1B24 : AA                             plo   R10
(1)  715/    1B25 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  716/    1B26 : CA 1B 35                       lbnz  mul_go1               ; jump if not zero
(1)  717/    1B29 : 9B                             ghi   FB
(1)  718/    1B2A : CA 1B 35                       lbnz  mul_go1
(1)  719/    1B2D : 8A                             glo   R10
(1)  720/    1B2E : CA 1B 35                       lbnz  mul_go1
(1)  721/    1B31 : 9A                             ghi   R10
(1)  722/    1B32 : C2 1B AD                       lbz   mul_dn                ; jump if muliplier is zero
(1)  723/    1B35 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  724/    1B36 : F6                             shr
(1)  725/    1B37 : BA                             phi   R10
(1)  726/    1B38 : 8A                             glo   R10
(1)  727/    1B39 : 76                             shrc
(1)  728/    1B3A : AA                             plo   R10
(1)  729/    1B3B : 9B                             ghi   FB
(1)  730/    1B3C : 76                             shrc
(1)  731/    1B3D : BB                             phi   FB
(1)  732/    1B3E : 8B                             glo   FB
(1)  733/    1B3F : 76                             shrc
(1)  734/    1B40 : AB                             plo   FB
(1)  735/    1B41 : CB 1B 82                       lbnf  mul_no                ; jump if low bit was zero
(1)  736/    1B44 : 89                             glo   F9                    ; res += mul
(1)  737/    1B45 : 52                             str   r2
(1)  738/    1B46 : 87                             glo   F7
(1)  739/    1B47 : F4                             add
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 42 - 3/26/2013 8:07:32


(1)  740/    1B48 : A7                             plo   F7
(1)  741/    1B49 : 99                             ghi   F9
(1)  742/    1B4A : 52                             str   r2
(1)  743/    1B4B : 97                             ghi   F7
(1)  744/    1B4C : 74                             adc
(1)  745/    1B4D : B7                             phi   F7
(1)  746/    1B4E : 88                             glo   r8
(1)  747/    1B4F : 52                             str   r2
(1)  748/    1B50 : 8C                             glo   R12
(1)  749/    1B51 : 74                             adc
(1)  750/    1B52 : AC                             plo   R12
(1)  751/    1B53 : 98                             ghi   r8
(1)  752/    1B54 : 52                             str   r2
(1)  753/    1B55 : 9C                             ghi   R12
(1)  754/    1B56 : 74                             adc
(1)  755/    1B57 : BC                             phi   R12
(1)  756/    1B58 : 86                             glo   r6                    ; now high 32 bits
(1)  757/    1B59 : 52                             str   r2
(1)  758/    1B5A : 8D                             glo   R13
(1)  759/    1B5B : F4                             add
(1)  760/    1B5C : AD                             plo   R13
(1)  761/    1B5D : 96                             ghi   r6
(1)  762/    1B5E : 52                             str   r2
(1)  763/    1B5F : 96                             ghi   r6
(1)  764/    1B60 : 52                             str   r2
(1)  765/    1B61 : 9D                             ghi   R13
(1)  766/    1B62 : 74                             adc
(1)  767/    1B63 : BD                             phi   R13
(1)  768/    1B64 : 8E                             glo   R14
(1)  769/    1B65 : 52                             str   r2
(1)  770/    1B66 : 8F                             glo   R15
(1)  771/    1B67 : 74                             adc
(1)  772/    1B68 : AF                             plo   R15
(1)  773/    1B69 : 9E                             ghi   R14
(1)  774/    1B6A : 52                             str   r2
(1)  775/    1B6B : 9F                             ghi   R15
(1)  776/    1B6C : 74                             adc
(1)  777/    1B6D : BF                             phi   R15
(1)  778/    1B6E : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  779/    1B6F : C2 1B 82                       lbz   mul_no                ; jump if no carry is needed
(1)  780/    1B72 : 8D                             glo   R13                    ; move the carry on over
(1)  781/    1B73 : FC 01                          adi   1
(1)  782/    1B75 : AD                             plo   R13
(1)  783/    1B76 : 9D                             ghi   R13
(1)  784/    1B77 : 7C 00                          adci  0
(1)  785/    1B79 : BD                             phi   R13
(1)  786/    1B7A : 8F                             glo   R15
(1)  787/    1B7B : 7C 00                          adci  0
(1)  788/    1B7D : AF                             plo   R15
(1)  789/    1B7E : 9F                             ghi   R15
(1)  790/    1B7F : 7C 00                          adci  0
(1)  791/    1B81 : BF                             phi   R15
(1)  792/    1B82 : 60                  mul_no:    irx                         ; recover ct
(1)  793/    1B83 : F0                             ldx
(1)  794/    1B84 : FC 01                          adi   1                     ; increment by 1
(1)  795/    1B86 : 73                             stxd                        ; and put it back
(1)  796/    1B87 : 89                             glo   F9                    ; shift mulL left
(1)  797/    1B88 : FE                             shl
(1)  798/    1B89 : A9                             plo   F9
(1)  799/    1B8A : 99                             ghi   F9
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 43 - 3/26/2013 8:07:32


(1)  800/    1B8B : 7E                             shlc
(1)  801/    1B8C : B9                             phi   F9
(1)  802/    1B8D : 88                             glo   r8
(1)  803/    1B8E : 7E                             shlc
(1)  804/    1B8F : A8                             plo   r8
(1)  805/    1B90 : 98                             ghi   r8
(1)  806/    1B91 : 7E                             shlc
(1)  807/    1B92 : B8                             phi   r8
(1)  808/    1B93 : 86                             glo   r6                    ; shift mulH left
(1)  809/    1B94 : FE                             shl
(1)  810/    1B95 : A6                             plo   r6
(1)  811/    1B96 : 96                             ghi   r6
(1)  812/    1B97 : 7E                             shlc
(1)  813/    1B98 : B6                             phi   r6
(1)  814/    1B99 : 8E                             glo   R14
(1)  815/    1B9A : 7E                             shlc
(1)  816/    1B9B : AE                             plo   R14
(1)  817/    1B9C : 9E                             ghi   R14
(1)  818/    1B9D : 7E                             shlc
(1)  819/    1B9E : BE                             phi   R14
(1)  820/    1B9F : 98                             ghi   r8                    ; see if a carry is needed
(1)  821/    1BA0 : C2 1B 25                       lbz   mul_lp1               ; jump if not
(1)  822/    1BA3 : F8 00                          ldi   0                     ; zero the high byte
(1)  823/    1BA5 : B8                             phi   r8
(1)  824/    1BA6 : 86                             glo   r6                    ; add in the carry
(1)  825/    1BA7 : F9 01                          ori   1
(1)  826/    1BA9 : A6                             plo   r6
(1)  827/    1BAA : C0 1B 25                       lbr   mul_lp1               ; loop back for more
(1)  828/    1BAD : 60                  mul_dn:    irx                         ; recover ct
(1)  829/    1BAE : 72                             ldxa
(1)  830/    1BAF : AE                             plo   R14                    ; set aside
(1)  831/    1BB0 : 72                             ldxa
(1)  832/    1BB1 : A6                             plo   r6
(1)  833/    1BB2 : 72                             ldxa
(1)  834/    1BB3 : B6                             phi   r6
(1)  835/    1BB4 : F0                             ldx
(1)  836/    1BB5 : BE                             phi   R14
(1)  837/    1BB6 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  838/    1BB7 : B8                             phi   r8
(1)  839/    1BB8 : 8C                             glo   R12
(1)  840/    1BB9 : A8                             plo   r8
(1)  841/    1BBA : 97                             ghi   F7
(1)  842/    1BBB : B9                             phi   F9
(1)  843/    1BBC : 87                             glo   F7
(1)  844/    1BBD : A9                             plo   F9
(1)  845/    1BBE : 8E                             glo   R14
(1)  846/    1BBF : AC                             plo   R12                    ; put ct into RC.0
(1)  847/    1BC0 : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  848/    1BC1 : FF 02                          smi   2                     ; see if <2
(1)  849/    1BC3 : CB 1B D7                       lbnf  mul_nxt1              ; jump if so
(1)  850/    1BC6 : D4                             sep   RCALL                 ; shift answer to the right
(1)  851/    1BC7 : 18 72                          dw    fp_shr_1
(1)  852/    1BC9 : D4                             sep   RCALL                 ; shift resH right
(1)  853/    1BCA : 18 A3                          dw    fp_shr_fd
(1)  854/    1BCC : CB 1B D3                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  855/    1BCF : 88                             glo   r8                    ; set high bit
(1)  856/    1BD0 : F9 80                          ori   080h
(1)  857/    1BD2 : A8                             plo   r8
(1)  858/    1BD3 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  859/    1BD4 : C0 1B C0                       lbr   mul_lp2               ; loop back to keep checking
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 44 - 3/26/2013 8:07:32


(1)  860/    1BD7 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  861/    1BD8 : 72                             ldxa
(1)  862/    1BD9 : A7                             plo   F7
(1)  863/    1BDA : F0                             ldx                         ; recover answer exponent
(1)  864/    1BDB : AC                             plo   R12
(1)  865/    1BDC : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  866/    1BDD : CA 1B EF                       lbnz  mul_lp3a
(1)  867/    1BE0 : 8F                             glo   R15
(1)  868/    1BE1 : CA 1B EF                       lbnz  mul_lp3a
(1)  869/    1BE4 : 9D                             ghi   R13
(1)  870/    1BE5 : CA 1B EF                       lbnz  mul_lp3a
(1)  871/    1BE8 : 8D                             glo   R13
(1)  872/    1BE9 : CA 1B EF                       lbnz  mul_lp3a
(1)  873/    1BEC : C0 1C 00                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  874/    1BEF : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  875/    1BF0 : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  876/    1BF3 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  877/    1BF6 : CB 1B DC                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  878/    1BF9 : 88                             glo   r8                    ; set high bit
(1)  879/    1BFA : F9 80                          ori   080h
(1)  880/    1BFC : A8                             plo   r8
(1)  881/    1BFD : C0 1B DC                       lbr   mul_lp3
(1)  882/    1C00 : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  883/    1C01 : BF                             phi   R15                    ; to high R15
(1)  884/    1C02 : C0 18 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  885/    1C05 :                     
(1)  886/    1C05 :                     ; ***************************************
(1)  887/    1C05 :                     ; *** Convert ascii to floating point ***
(1)  888/    1C05 :                     ; *** RF - buffer to ascii text       ***
(1)  889/    1C05 :                     ; *** Returns: R8:F9 - number         ***
(1)  890/    1C05 :                     ; ***************************************
(1)  891/    1C05 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  892/    1C06 : FF 20                          smi   ' '                   ; check for space
(1)  893/    1C08 : C2 1C 05                       lbz   fp_atof               ; move past any spaces
(1)  894/    1C0B : 2F                             dec   R15                    ; point back to nonspace chara
(1)  895/    1C0C : 0F                             ldn   R15                    ; check for possible sign
(1)  896/    1C0D : FF 2D                          smi   '-'                   ; first check for minus
(1)  897/    1C0F : CA 1C 19                       lbnz   atof_nm              ; jump if not minus
(1)  898/    1C12 : F8 80                          ldi   080h                  ; high bit set for minus
(1)  899/    1C14 : 73                             stxd                        ; place onto stack
(1)  900/    1C15 : 1F                             inc   R15                    ; move past sign
(1)  901/    1C16 : C0 1C 23                       lbr   atof_go1              ; and continue
(1)  902/    1C19 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  903/    1C1B : 73                             stxd                        ; place onto stack
(1)  904/    1C1C : 0F                             ldn   R15                    ; now check for + sign
(1)  905/    1C1D : FF 2B                          smi   '+'
(1)  906/    1C1F : CA 1C 23                       lbnz  atof_go1              ; jump if not plus
(1)  907/    1C22 : 1F                             inc   R15                    ; move past plus sign
(1)  908/    1C23 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  909/    1C25 : B8                             phi   r8
(1)  910/    1C26 : A8                             plo   r8
(1)  911/    1C27 : B9                             phi   F9
(1)  912/    1C28 : A9                             plo   F9
(1)  913/    1C29 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  914/    1C2A : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  915/    1C2D : CB 1C 5A                       lbnf  atof_no1              ; jump if not
(1)  916/    1C30 : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  917/    1C31 : BA                             phi   R10
(1)  918/    1C32 : 88                             glo   r8
(1)  919/    1C33 : AA                             plo   R10
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 45 - 3/26/2013 8:07:32


(1)  920/    1C34 : 99                             ghi   F9
(1)  921/    1C35 : BB                             phi   FB
(1)  922/    1C36 : 89                             glo   F9
(1)  923/    1C37 : AB                             plo   FB
(1)  924/    1C38 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  925/    1C3B : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  926/    1C3E : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  927/    1C41 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  928/    1C44 : 4F                             lda   R15                    ; get number
(1)  929/    1C45 : FF 30                          smi   '0'                   ; convert to binary
(1)  930/    1C47 : 52                             str   r2                    ; setup for add
(1)  931/    1C48 : 89                             glo   F9                    ; add in next digit
(1)  932/    1C49 : F4                             add
(1)  933/    1C4A : A9                             plo   F9
(1)  934/    1C4B : 99                             ghi   F9                    ; propagate carry
(1)  935/    1C4C : 7C 00                          adci  0
(1)  936/    1C4E : B9                             phi   F9
(1)  937/    1C4F : 88                             glo   r8
(1)  938/    1C50 : 7C 00                          adci  0
(1)  939/    1C52 : A8                             plo   r8
(1)  940/    1C53 : 98                             ghi   r8
(1)  941/    1C54 : 7C 00                          adci  0
(1)  942/    1C56 : B8                             phi   r8
(1)  943/    1C57 : C0 1C 29                       lbr   atof_lp1              ; loop until no more digits
(1)  944/    1C5A : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  945/    1C5B : FF 2E                          smi   '.'
(1)  946/    1C5D : CA 1C 61                       lbnz  atof_ndp              ; jump if none
(1)  947/    1C60 : 1F                             inc   R15                    ; move past decimal
(1)  948/    1C61 : F8 1D               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  949/    1C63 : BA                             phi   R10
(1)  950/    1C64 : F8 96                          ldi   scratch&255
(1)  951/    1C66 : AA                             plo   R10
(1)  952/    1C67 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  953/    1C69 : AC                             plo   R12
(1)  954/    1C6A : F8 00               atof_lpx:  ldi   0
(1)  955/    1C6C : 5A                             str   R10
(1)  956/    1C6D : 1A                             inc   R10
(1)  957/    1C6E : 2C                             dec   R12
(1)  958/    1C6F : 8C                             glo   R12
(1)  959/    1C70 : CA 1C 6A                       lbnz  atof_lpx
(1)  960/    1C73 : F8 1D                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  961/    1C75 : BA                             phi   R10
(1)  962/    1C76 : F8 97                          ldi   (scratch+1)&255
(1)  963/    1C78 : AA                             plo   R10
(1)  964/    1C79 : F8 01                          ldi   1                     ; setup count
(1)  965/    1C7B : AC                             plo   R12
(1)  966/    1C7C : F8 00                          ldi   0                     ; setup exp flag
(1)  967/    1C7E : BC                             phi   R12
(1)  968/    1C7F : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  969/    1C80 : FF 11                          smi   17
(1)  970/    1C82 : C2 1C 9B                       lbz   atof_dn3              ; jump if so
(1)  971/    1C85 : 0F                             ldn   R15                    ; get character
(1)  972/    1C86 : D4                             sep   RCALL                 ; is it numeric
(1)  973/    1C87 : 18 62                          dw    f_isnum
(1)  974/    1C89 : CB 1C 9B                       lbnf  atof_dn3              ; jump if not
(1)  975/    1C8C : 4F                             lda   R15                    ; get character
(1)  976/    1C8D : FF 30                          smi   '0'                   ; converto to binary
(1)  977/    1C8F : 5A                             str   R10                    ; write into bcd area
(1)  978/    1C90 : 1A                             inc   R10
(1)  979/    1C91 : 1C                             inc   R12                    ; increment count
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 46 - 3/26/2013 8:07:32


(1)  980/    1C92 : CA 1C 7F                       lbnz  atof_lp2              ; loop back until done
(1)  981/    1C95 : F8 01                          ldi   1                     ; set non zero flag
(1)  982/    1C97 : BC                             phi   R12
(1)  983/    1C98 : C0 1C 7F                       lbr   atof_lp2
(1)  984/    1C9B : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  985/    1C9C : CA 1C B5                       lbnz  atof_nz
(1)  986/    1C9F : 98                             ghi   r8                    ; check for non-zero integer
(1)  987/    1CA0 : CA 1C B5                       lbnz  atof_nz
(1)  988/    1CA3 : 88                             glo   r8
(1)  989/    1CA4 : CA 1C B5                       lbnz  atof_nz
(1)  990/    1CA7 : 99                             ghi   F9
(1)  991/    1CA8 : CA 1C B5                       lbnz  atof_nz
(1)  992/    1CAB : 89                             glo   F9
(1)  993/    1CAC : CA 1C B5                       lbnz  atof_nz
(1)  994/    1CAF : 60                             irx                         ; recover sign
(1)  995/    1CB0 : F0                             ldx
(1)  996/    1CB1 : B8                             phi   r8                    ; put in high of zero
(1)  997/    1CB2 : C0 1D 88                       lbr	atof_end               ; and return
(1)  998/    1CB5 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1)  999/    1CB7 : BC                             phi   R12
(1) 1000/    1CB8 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1001/    1CB9 : FA 80                          ani   080h
(1) 1002/    1CBB : CA 1D 05                       lbnz  atof_dn4              ; jump if so
(1) 1003/    1CBE : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1004/    1CC1 : F8 1D                          ldi   scratch>>8          ; point to bcd number
(1) 1005/    1CC3 : BA                             phi   R10
(1) 1006/    1CC4 : F8 96                          ldi   255&scratch
(1) 1007/    1CC6 : AA                             plo   R10
(1) 1008/    1CC7 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1009/    1CC9 : 5A                             str   R10
(1) 1010/    1CCA : F8 1D                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1011/    1CCC : BA                             phi   R10
(1) 1012/    1CCD : F8 A5                          ldi   255&(scratch+15)
(1) 1013/    1CCF : AA                             plo   R10
(1) 1014/    1CD0 : F8 00                          ldi   0                     ; set carry forward
(1) 1015/    1CD2 : AE                             plo   R14
(1) 1016/    1CD3 : F8 10                          ldi   16                    ; setup count
(1) 1017/    1CD5 : AC                             plo   R12
(1) 1018/    1CD6 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1019/    1CD7 : 52                             str   r2                    ; in memory for add
(1) 1020/    1CD8 : 0A                             ldn   R10                    ; get bcd digit
(1) 1021/    1CD9 : F4                             add                         ; add in carry
(1) 1022/    1CDA : 52                             str   r2                    ; place into memory
(1) 1023/    1CDB : 0A                             ldn   R10                    ; recover bcd digit
(1) 1024/    1CDC : F4                             add                         ; digit now doubled with carry
(1) 1025/    1CDD : 5A                             str   R10                    ; put it back
(1) 1026/    1CDE : FF 0A                          smi   10
(1) 1027/    1CE0 : CB 1C E7                       lbnf  atof_no4              ; jump if below 10
(1) 1028/    1CE3 : 5A                             str   R10                    ; store value - 10
(1) 1029/    1CE4 : F8 01                          ldi   1                     ; carry set to 1
(1) 1030/    1CE6 : C8                             lskp                        ; skip next instruction
(1) 1031/    1CE7 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1032/    1CE9 : AE                             plo   R14
(1) 1033/    1CEA : 2A                             dec   R10                    ; move to previous digit
(1) 1034/    1CEB : 2C                             dec   R12                    ; decrement digit count
(1) 1035/    1CEC : 8C                             glo   R12                    ; see if done
(1) 1036/    1CED : CA 1C D6                       lbnz  atof_lp4              ; jump if not
(1) 1037/    1CF0 : F8 1D                          ldi   scratch>>8	       ; point to first digit
(1) 1038/    1CF2 : BA                             phi   R10
(1) 1039/    1CF3 : F8 96                          ldi   255&scratch
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 47 - 3/26/2013 8:07:32


(1) 1040/    1CF5 : AA                             plo   R10
(1) 1041/    1CF6 : 0A                             ldn   R10                    ; retrieve it
(1) 1042/    1CF7 : C2 1C FE                       lbz   atof_nc4              ; jump if no carry
(1) 1043/    1CFA : 89                             glo   F9                    ; add in the carry
(1) 1044/    1CFB : F9 01                          ori   1
(1) 1045/    1CFD : A9                             plo   F9
(1) 1046/    1CFE : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1047/    1CFF : FC 01                          adi   1
(1) 1048/    1D01 : BC                             phi   R12
(1) 1049/    1D02 : C0 1C B8                       lbr   atof_lp3              ; loop until full
(1) 1050/    1D05 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1051/    1D06 : 52                             str   r2                    ; into memory
(1) 1052/    1D07 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1053/    1D09 : F7                             sm
(1) 1054/    1D0A : FC 7F                          adi   127                   ; add in bias
(1) 1055/    1D0C : BD                             phi   R13                    ; set aside
(1) 1056/    1D0D : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1057/    1D0E : A9                             plo   F9
(1) 1058/    1D0F : 88                             glo   r8
(1) 1059/    1D10 : B9                             phi   F9
(1) 1060/    1D11 : 98                             ghi   r8
(1) 1061/    1D12 : FE                             shl                         ; shift out high bit
(1) 1062/    1D13 : A8                             plo   r8
(1) 1063/    1D14 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1064/    1D15 : F6                             shr
(1) 1065/    1D16 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1066/    1D17 : 88                             glo   r8                    ; get mantissa
(1) 1067/    1D18 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1068/    1D19 : A8                             plo   r8                    ; and write it
(1) 1069/    1D1A : 60                             irx                         ; point to sign
(1) 1070/    1D1B : 98                             ghi   r8                    ; high byte
(1) 1071/    1D1C : F1                             or                          ; set sign
(1) 1072/    1D1D : B8                             phi   r8                    ; done with base conversion
(1) 1073/    1D1E : 0F                             ldn   R15                    ; get next byte
(1) 1074/    1D1F : FF 65                          smi   'e'                   ; check for exponents
(1) 1075/    1D21 : C2 1D 2A                       lbz   atof_exp
(1) 1076/    1D24 : 0F                             ldn   R15
(1) 1077/    1D25 : FF 45                          smi   'E'
(1) 1078/    1D27 : CA 1D 88                       lbnz  atof_end
(1) 1079/    1D2A : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1080/    1D2B : 0F                             ldn   R15                    ; check for sign
(1) 1081/    1D2C : FF 2D                          smi   '-'
(1) 1082/    1D2E : C2 1D 3B                       lbz   atof_n
(1) 1083/    1D31 : 0F                             ldn   R15
(1) 1084/    1D32 : FF 2B                          smi   '+'
(1) 1085/    1D34 : C2 1D 38                       lbz   atof_p
(1) 1086/    1D37 : 2F                             dec   R15                    ; positive if no sign
(1) 1087/    1D38 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1088/    1D3A : C8                             lskp
(1) 1089/    1D3B : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1090/    1D3D : BC                             phi   R12                    ; place into sign variable
(1) 1091/    1D3E : 1F                             inc   R15                    ; move past sign
(1) 1092/    1D3F : F8 00                          ldi   0                     ; setup intial count
(1) 1093/    1D41 : AC                             plo   R12
(1) 1094/    1D42 : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1095/    1D43 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1096/    1D46 : CB 1D 58                       lbnf  atof_dn5              ; jump if not
(1) 1097/    1D49 : 8C                             glo   R12                    ; make copy of exponent
(1) 1098/    1D4A : 52                             str   r2
(1) 1099/    1D4B : F6                             shr                         ; multiply by 2
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(LCC1802fp.inc) - page 48 - 3/26/2013 8:07:32


(1) 1100/    1D4C : F6                             shr                         ; by 4
(1) 1101/    1D4D : F4                             add                         ; by 5
(1) 1102/    1D4E : F6                             shr                         ; by 10
(1) 1103/    1D4F : 52                             str   r2                    ; put here for add
(1) 1104/    1D50 : 4F                             lda   R15                    ; recover number
(1) 1105/    1D51 : FF 30                          smi   '0'                   ; convert to binary
(1) 1106/    1D53 : F4                             add                         ; add with total
(1) 1107/    1D54 : AC                             plo   R12                    ; copy back to R12
(1) 1108/    1D55 : C0 1D 42                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1109/    1D58 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1110/    1D59 : C2 1D 88                       lbz   atof_end              ; jump if so
(1) 1111/    1D5C : 2C                             dec   R12                    ; otherwise decrement count
(1) 1112/    1D5D : 8C                             glo   R12                    ; save count
(1) 1113/    1D5E : 73                             stxd
(1) 1114/    1D5F : 9C                             ghi   R12                    ; save sign
(1) 1115/    1D60 : 73                             stxd
(1) 1116/    1D61 : 8F                             glo   R15
(1) 1117/    1D62 : 73                             stxd
(1) 1118/    1D63 : 9F                             ghi   R15
(1) 1119/    1D64 : 73                             stxd
(1) 1120/    1D65 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1121/    1D67 : BA                             phi   R10
(1) 1122/    1D68 : F8 20                          ldi   020h
(1) 1123/    1D6A : AA                             plo   R10
(1) 1124/    1D6B : F8 00                          ldi   0
(1) 1125/    1D6D : BB                             phi   FB
(1) 1126/    1D6E : AB                             plo   FB
(1) 1127/    1D6F : 9C                             ghi   R12
(1) 1128/    1D70 : C2 1D 79                       lbz   atof_div              ; jump if negative
(1) 1129/    1D73 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1130/    1D76 : C0 1D 7C                       lbr   atof_go5              ; clean up call
(1) 1131/    1D79 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1132/    1D7C : 60                  atof_go5:  irx                         ; recover variables
(1) 1133/    1D7D : 72                             ldxa
(1) 1134/    1D7E : BF                             phi   R15
(1) 1135/    1D7F : 72                             ldxa
(1) 1136/    1D80 : AF                             plo   R15
(1) 1137/    1D81 : 72                             ldxa
(1) 1138/    1D82 : BC                             phi   R12
(1) 1139/    1D83 : F0                             ldx
(1) 1140/    1D84 : AC                             plo   R12
(1) 1141/    1D85 : C0 1D 58                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1142/    1D88 :                     atof_end:
(1) 1143/    1D88 : 12                  	   inc	r2	;wjr release work area
(1) 1144/    1D89 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1145/    1D8D : (MACRO)             	   popr R12	;wjr
(1) 1146/    1D91 : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1147/    1D95 : (MACRO)             	   Cretn
(1) 1148/    1D96 : 00 00               scratch:   db	00,00
    1240/    1D98 :                     	include IO1802.inc
(1)    1/    1D98 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1D98 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1D98 :                     	align 64
(1)    4/    1DC0 :                     _putc:
(1)    5/    1DC0 :                     _out5:	
(1)    6/    1DC0 : 8C                  	glo	regArg1
(1)    7/    1DC1 : 22                  	dec	sp
(1)    8/    1DC2 : 52                  	str	sp
(1)    9/    1DC3 : 65                  	out	5
(1)   10/    1DC4 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm(IO1802.inc) - page 49 - 3/26/2013 8:07:32


(1)   11/    1DC5 :                     _inp:		;raw port input
(1)   12/    1DC5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    1DC5 : 22                  	dec	sp	;work backwards
(1)   14/    1DC6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    1DC8 : 73                  	stxd		
(1)   16/    1DC9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    1DCA : FA 07               	ani	0x07	;clean it
(1)   18/    1DCC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    1DCE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    1DD0 : 73                  	stxd		;store it for execution
(1)   21/    1DD1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    1DD5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    1DD6 : D8                  	sep	rt1	;execute it
(1)   24/    1DD7 :                     ;we will come back to here with the input byte in D
(1)   25/    1DD7 : 12                  	inc	sp	;step over the work area
(1)   26/    1DD8 : AF                  	plo	retVal	;save it to return
(1)   27/    1DD9 : F8 00               	ldi	0
(1)   28/    1DDB : BF                  	phi	retval	;clear top byte
(1)   29/    1DDC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    1DDD : 12                  	inc	sp	;and the D3
(1)   31/    1DDE : (MACRO)             	Cretn		;and we're done
(1)   32/    1DDF :                     	
(1)   33/    1DDF :                     _out:		;raw port output
(1)   34/    1DDF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    1DDF : 22                  	dec	sp	;work backwards
(1)   36/    1DE0 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    1DE2 : 73                  	stxd		
(1)   38/    1DE3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    1DE7 : 8C                  	glo	regarg1	;get the port number
(1)   40/    1DE8 : FA 07               	ani	0x07	;clean it
(1)   41/    1DEA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    1DEC : 73                  	stxd		;store it for execution
(1)   43/    1DED : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    1DEE : 52                  	str	sp	;store it where sp points
(1)   45/    1DEF : D8                  	sep	rt1	;execute it
(1)   46/    1DF0 :                     ;we will come back to here with sp stepped up by one
(1)   47/    1DF0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    1DF1 : 12                  	inc	sp	;and the D3
(1)   49/    1DF2 : (MACRO)             	Cretn		;and we're done
(1)   50/    1DF3 :                     	
(1)   51/    1DF3 :                     	
    1241/    1DF3 :                     
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 50 - 3/26/2013 8:07:32


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    1907 C |  ADD_A2NZ :                    1918 C |
 ADD_FNL :                     19BF C |  ADD_LP1 :                     1962 C |
 ADD_LP1DN :                   1977 C |  ADD_NM :                      1986 C |
 ADD_NO :                      19A8 C |  ADD_NS :                      1950 C |
 ADD_NX :                      19DE C |  ADD_NZ :                      19D0 C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    1D79 C |
 ATOF_DN3 :                    1C9B C |  ATOF_DN4 :                    1D05 C |
 ATOF_DN5 :                    1D58 C |  ATOF_END :                    1D88 C |
 ATOF_EXP :                    1D2A C |  ATOF_GO1 :                    1C23 C |
 ATOF_GO5 :                    1D7C C |  ATOF_LP1 :                    1C29 C |
 ATOF_LP2 :                    1C7F C |  ATOF_LP3 :                    1CB8 C |
 ATOF_LP4 :                    1CD6 C |  ATOF_LP5 :                    1D42 C |
 ATOF_LPX :                    1C6A C |  ATOF_N :                      1D3B C |
 ATOF_NC4 :                    1CFE C |  ATOF_NDP :                    1C61 C |
 ATOF_NM :                     1C19 C |  ATOF_NO1 :                    1C5A C |
 ATOF_NO4 :                    1CE7 C |  ATOF_NZ :                     1CB5 C |
 ATOF_P :                      1D38 C | *BIGENDIAN :                      0 - |
 BITLOOP183 :                  15AC C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB181 :                1496 C |
 CKNEXT183 :                   15F0 C |  CKTOP183 :                    1597 C |
 CLRLP183 :                    1588 C | *CONSTPI :        3.141592653589793 - |
*CVFI4 :                       1800 C |  CVIF4 :                       1700 C |
*DATE :                   3/26/2013 - |  DCKLP183 :                    15AF C |
 DIVLOOP16_16178 :             1352 C | *DIVSETBIT16_16178 :           1384 C |
 DIVSKIP16_16178 :             1381 C |  DIVSKIPCLEAR16_16178 :        1388 C |
 DIVSKIPFINALADD16_16178 :     139A C |  DIVSUB16_16178 :              1373 C |
 DIV_A1NZ :                    19FC C |  DIV_A2NZ :                    1A1A C |
 DIV_GO :                      1A81 C |  DIV_GO1 :                     1A6E C |
 DIV_LP :                      1A5B C |  DIV_NOPE :                    1ABC C |
 DIV_Z :                       1ACE C |  DNOADD183 :                   15B7 C |
 DONE179 :                     13D3 C |  DONE182 :                     1574 C |
 DONE183 :                     15FA C |  DONE189 :                     176F C |
 DONE190 :                     1861 C |  DSHLP183 :                    15CB C |
 ENDLP180 :                    1461 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       186E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      18EE C |  FP_ADD_12 :                   188C C |
 FP_ATOF :                     1C05 C |  FP_DIV :                      19EB C |
 FP_GETEXP :                   18DC C |  FP_GETSGN :                   18E7 C |
 FP_MUL :                      1ADE C |  FP_SC_CLN :                   18C0 C |
 FP_SC_UP :                    18B0 C |  FP_SHL_1 :                    187F C |
 FP_SHR_1 :                    1872 C |  FP_SHR_FD :                   18A3 C |
*FP_SUB :                      19E4 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     1862 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L100 :                        1057 C |  L101 :                        11C4 C |
 L102 :                        1054 C | *L103 :                        1054 C |
*L105 :                        10FF C |  L106 :                        1091 C |
 L107 :                        10DE C |  L109 :                        10FB C |
*L110 :                        115F C |  L111 :                        1134 C |
 L112 :                        114A C | *L114 :                        11AD C |
 L115 :                        1189 C |  L116 :                        1198 C |
 L13 :                         1264 C |  L14 :                         124A C |
*L15 :                          39C C |  L16 :                          39C C |
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 51 - 3/26/2013 8:07:32


*L18 :                          6C8 C |  L19 :                          663 C |
*L2 :                           2A8 C |  L20 :                          684 C |
 L23 :                          4DC C |  L24 :                          515 C |
 L26 :                         1246 C |  L27 :                          52D C |
 L28 :                          566 C |  L3 :                          12A5 C |
 L31 :                         1242 C |  L32 :                         1210 C |
 L33 :                          62D C |  L38 :                         120C C |
 L39 :                         11F7 C | *L40 :                          750 C |
 L41 :                         11E9 C |  L42 :                         11DB C |
 L43 :                         11CD C | *L44 :                          788 C |
 L45 :                          76B C | *L46 :                          76B C |
 L48 :                          76D C | *L49 :                          7CF C |
 L50 :                          79B C |  L51 :                          7BA C |
*L53 :                          97C C |  L54 :                          89A C |
 L55 :                          8AA C |  L56 :                          8B3 C |
 L57 :                          954 C |  L59 :                          8BA C |
 L6 :                            98 C | *L60 :                          8BA C |
 L62 :                          8C7 C |  L63 :                          93F C |
 L66 :                          8FC C | *L67 :                          A46 C |
 L68 :                          A13 C |  L7 :                            9C C |
*L70 :                          A92 C | *L71 :                          AF2 C |
*L72 :                          B85 C |  L73 :                          B60 C |
 L74 :                          B85 C | *L75 :                          C03 C |
*L76 :                         1019 C |  L77 :                          C4B C |
 L78 :                          FF8 C |  L8 :                          1286 C |
 L80 :                          C87 C |  L81 :                          FF8 C |
 L82 :                          FE7 C |  L83 :                          FF8 C |
 L85 :                          DAF C |  L86 :                          DCC C |
 L87 :                          DED C |  L88 :                          E0F C |
 L89 :                          E7D C |  L9 :                           150 C |
 L90 :                          FE7 C |  L92 :                          EDB C |
 L94 :                          F0E C |  L95 :                          FE2 C |
*L96 :                          CFD C |  L97 :                          D5C C |
*L98 :                          D35 C | *L99 :                          D94 C |
 LCC1802INIT :                 12BC C | *LISTON :                         1 - |
 LOOP180 :                     140F C |  LSH190 :                      182B C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP181 :                    1477 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP176 :                     131E C |
 MULTLOOP16_16177 :            132B C |  MULTSKIP16_16177 :            133D C |
 MUL_DN :                      1BAD C |  MUL_GO1 :                     1B35 C |
 MUL_LP1 :                     1B25 C |  MUL_LP2 :                     1BC0 C |
 MUL_LP2A :                    1BD3 C |  MUL_LP3 :                     1BDC C |
 MUL_LP3A :                    1BEF C |  MUL_LP4 :                     1C00 C |
 MUL_NO :                      1B82 C |  MUL_NXT1 :                    1BD7 C |
*NESTMAX :                      100 - |  NORESTORE180 :                145D C |
 NXT189 :                      1730 C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      186B C |
 POS1179 :                     13B3 C |  POS1182 :                     1526 C |
 POS2179 :                     13C3 C |  POS2182 :                     154D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 52 - 3/26/2013 8:07:32


 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SCRATCH :                     1D96 C |  SETSGN189 :                   1768 C |
 SGNPOS189 :                   1739 C |  SHDN189 :                     175F C |
 SHIFT181 :                    14AE C |  SHL189 :                      174B C |
 SHR190 :                      1819 C |  SIGN190 :                     183B C |
 SP :                             2 - | *TIME :                     8:07:32 - |
*TRUE :                           1 - |  UPNXT183 :                    15E4 C |
*VERSION :                     142F - |  _00000168 :                   12D6 C |
 _CALL :                       1301 C |  _DIE168 :                     12D9 C |
 _DIVI2 :                      13A4 C |  _DIVI4 :                      1500 C |
 _DIVU2 :                      1349 C |  _DIVU4 :                      1400 C |
 _DUBDABX :                    1575 C | *_EXIT :                       102E C |
*_F0 :                            4 C | *_F1 :                            8 C |
*_F2 :                            C C | *_F3 :                           10 C |
*_F6 :                           14 C | *_FBIGONE :                      18 C |
 _FEXP :                       11BA C | *_FPDIS :                       2B5 C |
*_FPNORM :                      3A5 C |  _FSIGN :                      11BC C |
*_FSP :                          2C C |  _FSPLIT :                     11C0 C |
*_I1 :                         11B6 C | *_INP :                        1DC5 C |
 _ITOA :                        7D8 C | *_L0 :                           1C C |
 _L1 :                           20 C |  _L2 :                           24 C |
*_L3 :                           28 C |  _LTOA :                        991 C |
 _MAIN :                        6E5 C | *_MEMCMP :                     105C C |
*_MEMCPY :                     110E C | *_MEMSET :                     116C C |
*_MODI2 :                      12EA C | *_MODI4 :                      1607 C |
*_MODU2 :                      12E2 C | *_MODU4 :                      15FB C |
*_MULU2 :                      1323 C | *_MULU4 :                      1466 C |
*_ONEMS :                      131C C |  _OUT :                        1DDF C |
*_OUT4 :                       12F2 C | *_OUT5 :                       1DC0 C |
 _PRINTF :                      C08 C |  _PRINTINT :                    A59 C |
 _PRINTLINT :                   A9B C |  _PRINTSTR :                    78B C |
 _PUTC :                       1DC0 C |  _PUTX :                        B8A C |
 _PUTXN :                       AFB C |  _RETURN :                     1312 C |
*_SETQOFF :                    12E0 C | *_SETQON :                     12DE C |
 _SHIFTO :                     11B8 C |  _STRCPY :                      759 C |
*__FORW10 :                    1DF0 C |  __FORW9 :                     1DDC C |

    316 symbols
     87 unused symbols

 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 53 - 3/26/2013 8:07:32


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     79 macros

 AS V1.42 Beta [Bld 87] - source file helloworldFloat.asm - page 54 - 3/26/2013 8:07:32


  codepages:
  ----------

STANDARD (0 changed characters)


0.07 seconds assembly time

   3735 lines source file
   9471 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
