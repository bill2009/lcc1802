; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Fri Apr 12 16:28:40 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloFL.inc
	listing on
_fcomparulator:
	reserve 10; save room for local variables
	pushr r0
	pushr r1
	reserve 12; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked&floaty
	cpy4 RL8,RL0; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-8+28)
	ld4 RL8,'O',sp,(4+28);INDIRF4(addr)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-12+28)
	ldaD R12,L2; reg:acon
	ld4 RL10,'O',sp,(-8+28);reg:  INDIRI4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	ld4 RL10,'O',sp,(-12+28);reg:  INDIRI4(addr)
	st4 RL10,'O',sp,(8); arg+f**
	Ccall _printf
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jcF4 RL0,RL10,lbdf,L3;GEF4(reg,reg) - reverse test
	ldaD R12,L5; reg:acon
	Ccall _printf
L3:
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jcF4 RL10,RL0,lbnf,L6;GTF4(reg,reg) - reverse operands
	ldaD R12,L8; reg:acon
	Ccall _printf
L6:
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jneU4 RL0,RL10,L9; NEF4(reg,reg)
	ldaD R12,L11; reg:acon
	Ccall _printf
L9:
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jeqI4 RL0,RL10,L12; EQF4(reg,reg)
	ldaD R12,L14; reg:acon
	Ccall _printf
L12:
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jcF4 RL10,RL0,lbdf,L15; LEF4(reg,reg) - reverse test and operands
	ldaD R12,L17; reg:acon
	Ccall _printf
L15:
	ld4 RL10,'O',sp,(4+28);INDIRF4(addr)
	jcF4 RL0,RL10,lbnf,L18;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
	ldaD R12,L20; reg:acon
	Ccall _printf
L18:
	ldaD R12,L21; reg:acon
	Ccall _printf
L1:
	release 12; release room for outgoing arguments
	popr r1
	popr r0
	release 10; release room for local variables 
	Cretn

_comparulator:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	reserve 6; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
	st2 RL0,'O',sp,(-4+16); ASGNU2(addr,LOADU2(reg))*
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	st2 RL10,'O',sp,(-6+16); ASGNU2(addr,LOADU2(reg))*
	ldaD R12,L23; reg:acon
	ld2 R13,'O',sp,(-4+16); reg:INDIRU2(addr)
	ld2 R11,'O',sp,(-6+16); reg:INDIRU2(addr)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _printf
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jcU4 RL0,RL10,lbdf,L24; GE is flipped test from LT
	ldaD R12,L5; reg:acon
	Ccall _printf
L24:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jcU4 rL10,rL0,lbnf,L26 ;GT same as LT but operands reversed
	ldaD R12,L8; reg:acon
	Ccall _printf
L26:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jneU4 rL0,rL10,L28; NE
	ldaD R12,L11; reg:acon
	Ccall _printf
L28:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jeqI4 rL0,rL10,L30
	ldaD R12,L14; reg:acon
	Ccall _printf
L30:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jcU4 rL10,rL0,lbdf,L32 ;LE is flipped test & operands
	ldaD R12,L17; reg:acon
	Ccall _printf
L32:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRU4(addr)
	jcU4 rL0,rL10,lbnf,L34; LT=lbnf i.e. subtract B from A and jump if borrow 
	ldaD R12,L20; reg:acon
	Ccall _printf
L34:
	ldaD R12,L21; reg:acon
	Ccall _printf
L22:
	release 6; release room for outgoing arguments
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_scomparulator:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	reserve 6; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
	st2 RL0,'O',sp,(-4+16); ASGNI2(addr,LOADI2(reg)) wjrtest
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	st2 RL10,'O',sp,(-6+16); ASGNI2(addr,LOADI2(reg)) wjrtest
	ldaD R12,L37; reg:acon
	ld2 R13,'O',sp,(-4+16) ;reg:INDIRI2(addr)
	ld2 R11,'O',sp,(-6+16) ;reg:INDIRI2(addr)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _printf
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jcI4 RL0,RL10,lbdf,L38; GE is flipped test from LT
	ldaD R12,L5; reg:acon
	Ccall _printf
L38:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jcI4 rL10,rL0,lbnf,L40 ;GT is reveresed operands from LT
	ldaD R12,L8; reg:acon
	Ccall _printf
L40:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jneU4 rL0,rL10,L42; NE
	ldaD R12,L11; reg:acon
	Ccall _printf
L42:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jeqI4 rL0,rL10,L44
	ldaD R12,L14; reg:acon
	Ccall _printf
L44:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jcI4 rL10,rL0,lbdf,L46 ;LE is flipped test & operands
	ldaD R12,L17; reg:acon
	Ccall _printf
L46:
	ld4 RL10,'O',sp,(4+16);reg:  INDIRI4(addr)
	jcI4 rL0,rL10,lbnf,L48; LT=lbnf i.e. subtract B from A and jump if borrow 
	ldaD R12,L20; reg:acon
	Ccall _printf
L48:
	ldaD R12,L21; reg:acon
	Ccall _printf
L36:
	release 6; release room for outgoing arguments
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_main:
	reserve 8
	ld4 Rp1p2,'D',(L51),0;INDIRF4(addr)
	ld4 RL10,'D',(L52),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 RL10,'D',(L51),0;INDIRF4(addr)
	cpy4 Rp1p2,RL10; LOADU4(reg)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L52),0;INDIRF4(addr)
	ld4 RL10,'D',(L51),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L53),0;INDIRF4(addr)
	ld4 RL10,'D',(L51),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L51),0;INDIRF4(addr)
	ld4 RL10,'D',(L53),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L53),0;INDIRF4(addr)
	ld4 RL10,'D',(L54),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L54),0;INDIRF4(addr)
	ld4 RL10,'D',(L52),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L51),0;INDIRF4(addr)
	ld4 RL10,'D',(L52),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
	ld4 Rp1p2,'D',(L55),0;INDIRF4(addr)
	ld4 RL10,'D',(L52),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _fcomparulator
L50:
	release 8
	Cretn

_strcpy:
	reserve 2
	st2 R12,'O',sp,(-4+4); ASGNP2
	lbr L60
L57:
L58:
	incm R13,1
	incm R12,1
L60:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L57; NE 0
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L56:
	release 2
	Cretn

_strlen:
	reserve 0; save room for local variables
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2z R7
	lbr L63
L62:
	incm R7,1
	incm R12,1
L63:
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L62; NE 0
	cpy2 R15,R7 ;LOADU2(reg)*
L61:
	release 0; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_printstr:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	lbr L67
L66:
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L67:
	ld1 R11,'O',R7,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L66; NE 0
L65:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:
	reserve 22; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked&floaty
	ld2 R7,'O',sp,(6+38); reg:INDIRU2(addr)
	ld2 R11,'O',sp,(4+38);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-4+38); ASGNP2
	ld4 RL10,'D',(L72),0;INDIRF4(addr)
	jcF4 RL0,RL10,lbdf,L70;GEF4(reg,reg) - reverse test
	ld2 R11,'O',sp,(-4+38);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+38); ASGNP2
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld4 RL8,'D',(L73),0;INDIRF4(addr)
	cpy4 RL10,RL0; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL0,RL8; LOADU4(reg)
	lbr L71
L70:
	lbr L74
	ld2 R11,'O',sp,(-4+38);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+38); ASGNP2
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
L74:
L71:
	jcI2I r7,8,lbdf,L76; GE is flipped test from LT
	cpy4 RL8,RL0; LOADU4(reg)
	cpy2 R11,R7
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL0,RL8; LOADU4(reg)
L76:
	cpy2 R11,R7
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(-12+38); ASGNF4(addr,reg)
	cpy4 RL8,RL0; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-8+38)
	ld4 RL10,'O',sp,(-8+38);reg:  INDIRI4(addr)
	st4 RL10,'O',sp,(-24+38)
	cpy4 RL8,RL0; LOADU4(reg)
	st4 RL8,'O',sp,(-20+38); ASGNF4(addr,reg)
	cpy4 RL8,RL10; LOADI4*
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(-20+38);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(-12+38);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(-16+38)
	ld4 RL10,'O',sp,(-24+38);reg:  INDIRI4(addr)
	cpy4 Rp1p2,RL10; LOADI4*
	ld2 R11,'O',sp,(-4+38);reg:  INDIRP2(addr)
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	ld2 R12,'O',sp,(-4+38);reg:  INDIRP2(addr)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
	ld2 R12,'O',sp,(-4+38);reg:  INDIRP2(addr)
	Ccall _strlen;CALLU2(ar)*
	cpy2 R11,R15 ;LOADU2(reg)*
	ld2 R10,'O',sp,(-4+38);reg:  INDIRP2(addr)
	alu2 R11,R11,R10,add,adc
	st2 R11,'O',sp,(-4+38); ASGNP2
	jeqU2I r7,0,L78;EQU2(reg,con)
	ld2 R11,'O',sp,(-4+38);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(-4+38); ASGNP2
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld4 Rp1p2,'O',sp,(-16+38);reg:  INDIRI4(addr)
	ld2 R11,'O',sp,(-4+38);reg:  INDIRP2(addr)
	st2 r11,'O',sp,(4); arg+f**
	cpy2 R11,R7 ;LOADI2(reg)*
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	ld2 R12,'O',sp,(-4+38);reg:  INDIRP2(addr)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
L78:
	ld2 R15,'O',sp,(4+38);reg:  INDIRP2(addr)
L69:
	release 8; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 22; release room for local variables 
	Cretn

_itoa:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-6+16); ASGNP2
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L81; GE is flipped test from LT
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11 ;LOADU2(reg)*
	lbr L82
L81:
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R1,R11 ;LOADU2(reg)*
L82:
	ldaD R7,10000; reg:acon
	lbr L84
L83:
	ld2z R0
	lbr L89
L86:
L87:
	incm R0,1
	alu2 R1,R1,R7,sm,smb
L89:
	jcU2 r1,r7,lbdf,L86 ;LE is flipped test & operands
	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
	jnzU2 r11,L93; NE 0
	jnzU2 r0,L93; NE 0
	jneU2I r7,1,L90; NE
L93:
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R0,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
	ldaD R11,121; reg:acon
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
L90:
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R7,R11 ;LOADU2(reg)*
L84:
	jnzU2 r7,L83; NE 0
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L80:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_ltoa:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
	ld2 R7,'O',sp,(4+16);reg:  INDIRP2(addr)
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L95; GE is flipped test from LT
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
L95:
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R7 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
L94:
	release 8; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
L97:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
L98:
	release 18
	Cretn

_printflt:
	reserve 28
	st2 r12,'O',sp,(30); flag1 
	st2 r13,'O',sp,(32); flag1 
	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
	ldA2 R11,'O',sp,(-22+30); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
L99:
	release 28
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L101; GE is flipped test from LT
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
	lbr L102
L101:
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
L102:
L100:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
L103:
	release 4
	Cretn

_printf:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
	ld2z R0
	ldA2 R1,'O',sp,(0+16); reg:addr
	incm R1,2
	incm R0,1
	lbr L106
L105:
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L108;EQI2(reg,con)
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
	lbr L109
L108:
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-5+16); ASGNI2(addr,reg)*;
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jcI2I r11,99,lbnf,L129  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r11,108,lbnf,L130; GT reverse  the subtraction
	shl2I R11,1
	ld2 R11,'O',R11,(L131-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L131:
	dw L115
	dw L113
	dw L110
	dw L124
	dw L110
	dw L110
	dw L113
	dw L110
	dw L110
	dw L117
L129:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,88,L116;EQI2(reg,con)
	lbr L110
L130:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,115; reg:acon
	jeqI2 r11,r10,L114; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L110; LT=lbnf i.e. subtract B from A and jump if borrow 
L133:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,120,L116;EQI2(reg,con)
	lbr L110
L113:
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
	incm R0,1
	lbr L111
L114:
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
	incm R0,1
	lbr L111
L115:
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
	incm R0,1
	lbr L111
L116:
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
	incm R0,1
	lbr L111
L117:
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L118; EQ 0
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L120; EQ 0
	incm R1,2
	incm R0,1
L120:
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L122; NE
	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
	Ccall _printlint
	incm R1,4
	lbr L123
L122:
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
L123:
	incm R0,2
	lbr L111
L118:
L124:
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L125; EQ 0
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L127; EQ 0
	incm R1,2
	incm R0,1
L127:
	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
	Ccall _printflt
	incm R1,4
	incm R0,2
	lbr L111
L125:
L110:
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
L111:
L109:
L106:
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L105; NE 0
L104:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ldaD R12,L135; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L136:
L137:
	lbr L136
L134:
	release 4
	Cretn

_memcmp:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
	ld2z R1
	cpy2 R0,R12 ;LOADP2(reg)
	st2 R13,'O',sp,(-4+10); ASGNP2
	lbr L141
L140:
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
	cpy2 R9,R10
	incm R9,1
	st2 R9,'O',sp,(-4+10); ASGNP2
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R1,R11,R10,sm,smb
L141:
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jeqU2I r11,0,L143;EQU2(reg,con)
	jzU2 r1,L140; EQ 0
L143:
	cpy2 R15,R1 ;LOADI2(reg)*
L139:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_memcpy:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
	cpy2 R1,R12 ;LOADP2(reg)
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L146
L145:
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	incm R0,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
L146:
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L145; NE 0
	cpy2 R15,R12 ;LOADP2(reg)
L144:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_memset:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
	cpy2 R1,R12 ;LOADP2(reg)
	lbr L150
L149:
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L150:
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L149; NE 0
	cpy2 R15,R12 ;LOADP2(reg)
L148:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

L135:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L73:
	dd 0xbf800000
	align 4
L72:
	dd 0x0
	align 4
L55:
	dd 0x4b7fffff
	align 4
L54:
	dd 0xbf800000
	align 4
L53:
	dd 0x0
	align 4
L52:
	dd 0xc1200000
	align 4
L51:
	dd 0x41200000
L37:
	db 102
	db 111
	db 114
	db 32
	db 37
	db 100
	db 58
	db 37
	db 100
	db 32
	db 115
	db 99
	db 111
	db 109
	db 112
	db 97
	db 114
	db 117
	db 108
	db 97
	db 116
	db 111
	db 114
	db 32
	db 115
	db 101
	db 122
	db 32
	db 0
L23:
	db 102
	db 111
	db 114
	db 32
	db 37
	db 100
	db 58
	db 37
	db 100
	db 32
	db 99
	db 111
	db 109
	db 112
	db 97
	db 114
	db 117
	db 108
	db 97
	db 116
	db 111
	db 114
	db 32
	db 115
	db 101
	db 122
	db 32
	db 0
L21:
	db 10
	db 0
L20:
	db 32
	db 62
	db 61
	db 0
L17:
	db 32
	db 62
	db 0
L14:
	db 32
	db 33
	db 61
	db 0
L11:
	db 32
	db 61
	db 0
L8:
	db 32
	db 60
	db 61
	db 0
L5:
	db 32
	db 60
	db 0
L2:
	db 102
	db 111
	db 114
	db 32
	db 37
	db 108
	db 100
	db 58
	db 37
	db 108
	db 100
	db 32
	db 115
	db 99
	db 111
	db 109
	db 112
	db 97
	db 114
	db 117
	db 108
	db 97
	db 116
	db 111
	db 114
	db 32
	db 115
	db 101
	db 122
	db 32
	db 0
	include lcc1802Epilofl.inc
	include LCC1802fp.inc
	include IO1802.inc
