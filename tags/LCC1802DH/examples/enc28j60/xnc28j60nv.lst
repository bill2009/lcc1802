 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 1 - 4/25/2013 10:34:17


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Wed Apr 24 16:37:56 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  830/       0 :                     	listing	on
(1)  831/       0 : C0 3C 23            	lbr	lcc1802Init
(1)  832/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _mymac:
      15/       4 : 74                  	db 116
      16/       5 : 69                  	db 105
      17/       6 : 69                  	db 105
      18/       7 : 2D                  	db 45
      19/       8 : 30                  	db 48
      20/       9 : 31                  	db 49
      21/       A :                     _myip:
      22/       A : C0                  	db 192
      23/       B : A8                  	db 168
      24/       C : 01                  	db 1
      25/       D : BF                  	db 191
      26/       E :                     _hisport:
      27/       E : 00 50               	dw 80
      28/      10 :                     _setup:
      29/      10 : (MACRO)             	reserve 8
      30/      18 :                     ;void setup () {
      31/      18 :                     ;  printf("\nEnc28j60 first try\n");
      32/      18 : (MACRO)             	ldaD R12,L2; reg:acon
      33/      1E : (MACRO)             	Ccall _printf
      34/      21 :                     ;  printf("MAC & IP ");
      35/      21 : (MACRO)             	ldaD R12,L3; reg:acon
      36/      27 : (MACRO)             	Ccall _printf
      37/      2A :                     ;  hexDump(mymac,6);
      38/      2A : (MACRO)             	ldaD R12,_mymac; reg:acon
      39/      30 : (MACRO)             	ldaD R13,6; reg:acon
      40/      36 : (MACRO)             	Ccall _hexDump
      41/      39 :                     ;  hexDump(myip,4);
      42/      39 : (MACRO)             	ldaD R12,_myip; reg:acon
      43/      3F : (MACRO)             	ldaD R13,4; reg:acon
      44/      45 : (MACRO)             	Ccall _hexDump
      45/      48 :                     ;  if (ethbegin(700) == 0)
      46/      48 : (MACRO)             	ldaD R12,700; reg:acon
      47/      4E : (MACRO)             	Ccall _ethbegin
      48/      51 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      49/      55 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      50/      58 : (MACRO)             	jnzU2 r11,L4; NE 0
      51/      60 :                     ;    printf( "Failed to access Ethernet controller\n");
      52/      60 : (MACRO)             	ldaD R12,L6; reg:acon
      53/      66 : (MACRO)             	Ccall _printf
      54/      69 :                     L4:
      55/      69 :                     ;  printf("readRegByte(ECON1) returns: %x\n",readRegByte(ECON1));
      56/      69 : (MACRO)             	ldaD R12,31; reg:acon
      57/      6F : (MACRO)             	Ccall _readRegByte
      58/      72 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      59/      76 : (MACRO)             	ldaD R12,L7; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 2 - 4/25/2013 10:34:17


      60/      7C : (MACRO)             	cpy1 R13,R11
      61/      7E : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      62/      81 : (MACRO)             	Ccall _printf
      63/      84 :                     ;  printf("readRegByte(EREVID) returns: %x\n",readRegByte(EREVID));
      64/      84 : (MACRO)             	ldaD R12,114; reg:acon
      65/      8A : (MACRO)             	Ccall _readRegByte
      66/      8D : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      67/      91 : (MACRO)             	ldaD R12,L8; reg:acon
      68/      97 : (MACRO)             	cpy1 R13,R11
      69/      99 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      70/      9C : (MACRO)             	Ccall _printf
      71/      9F :                     ;  printf("readRegByte(ESTAT) returns: %x\n",readRegByte(ESTAT));
      72/      9F : (MACRO)             	ldaD R12,29; reg:acon
      73/      A5 : (MACRO)             	Ccall _readRegByte
      74/      A8 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      75/      AC : (MACRO)             	ldaD R12,L9; reg:acon
      76/      B2 : (MACRO)             	cpy1 R13,R11
      77/      B4 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      78/      B7 : (MACRO)             	Ccall _printf
      79/      BA :                     ;  printf("MACtail readback: %x:%x\n",readRegByte(MAADR1),readRegByte(MAADR0));
      80/      BA : (MACRO)             	ldaD R12,224; reg:acon
      81/      C0 : (MACRO)             	Ccall _readRegByte
      82/      C3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      83/      C7 : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNI2(addr,reg)*;
      84/      D4 : (MACRO)             	ldaD R12,225; reg:acon
      85/      DA : (MACRO)             	Ccall _readRegByte
      86/      DD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
      87/      E1 : (MACRO)             	ldaD R12,L10; reg:acon
      88/      E7 : (MACRO)             	ld2 R10,'O',sp,(-4+10) ;reg:INDIRI2(addr)
      89/      F3 : (MACRO)             	cpy1 R13,R10
      90/      F5 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      91/      F8 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
      92/      FB : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
      93/     108 : (MACRO)             	Ccall _printf
      94/     10B :                     ;  printf("and we're done\n");
      95/     10B : (MACRO)             	ldaD R12,L11; reg:acon
      96/     111 : (MACRO)             	Ccall _printf
      97/     114 :                     ;}
      98/     114 :                     L1:
      99/     114 : (MACRO)             	release 8
     100/     11C : (MACRO)             	Cretn
     101/     11D :                     
     102/     11D :                     _loop:
     103/     11D : (MACRO)             	reserve 8
     104/     125 :                     ;void loop () {
     105/     125 :                     ;  len = encpacketReceive();
     106/     125 : (MACRO)             	Ccall _encpacketReceive;CALLU2(ar)*
     107/     128 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     108/     12C : (MACRO)             	st2 R11,'O',sp,(-4+10); ASGNU2(addr,reg)*
     109/     139 :                     ;  pos = tcppacketLoop(len);
     110/     139 : (MACRO)             	ld2 R12,'O',sp,(-4+10); reg:INDIRU2(addr)
     111/     145 : (MACRO)             	Ccall _tcppacketLoop;CALLU2(ar)*
     112/     148 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     113/     14C : (MACRO)             	st2 R11,'O',sp,(-6+10); ASGNU2(addr,reg)*
     114/     159 :                     ;}
     115/     159 :                     L12:
     116/     159 : (MACRO)             	release 8
     117/     161 : (MACRO)             	Cretn
     118/     162 :                     
     119/     162 :                     _main:
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 3 - 4/25/2013 10:34:17


     120/     162 : (MACRO)             	reserve 4
     121/     166 :                     ;void main(){
     122/     166 :                     ;	asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     123/     166 :                     ;	printf("encmule - watch my Q!\n");
     124/     166 : 7B                  	seq	;1 on Q de-activates ethernet chip
     125/     167 : (MACRO)             	ldaD R12,L15; reg:acon
     126/     16D : (MACRO)             	Ccall _printf
     127/     170 :                     ;	setup();
     128/     170 : (MACRO)             	Ccall _setup
     129/     173 : C0 01 79            	lbr L17
     130/     176 :                     L16:
     131/     176 :                     ;	while(1){
     132/     176 :                     ;		loop();
     133/     176 : (MACRO)             	Ccall _loop
     134/     179 :                     ;	}
     135/     179 :                     L17:
     136/     179 :                     ;	while(1){
     137/     179 : C0 01 76            	lbr L16
     138/     17C :                     ;}
     139/     17C :                     L13:
     140/     17C : (MACRO)             	release 4
     141/     180 : (MACRO)             	Cretn
     142/     181 :                     
     143/     181 :                     _enableChip:
     144/     181 : (MACRO)             	reserve 4
     145/     185 :                     ; void enableChip () {
     146/     185 :                     ;  digitalWrite(sck,LOW); //make sure the clock is low
     147/     185 : (MACRO)             	ldaD R12,5; reg:acon
     148/     18B : (MACRO)             	ld2z R13
     149/     18F : (MACRO)             	Ccall _digitalWrite
     150/     192 :                     ;  asm("	req	;0 on Q activates ethernet chip\n"); //digitalWrite(encss,LOW); //activate the chip select
     151/     192 : 7A                  	req	;0 on Q activates ethernet chip
     152/     193 :                     ;}
     153/     193 :                     L19:
     154/     193 : (MACRO)             	release 4
     155/     197 : (MACRO)             	Cretn
     156/     198 :                     
     157/     198 :                     _disableChip:
     158/     198 :                     ; void disableChip () {
     159/     198 :                     ;  asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     160/     198 : 7B                  	seq	;1 on Q de-activates ethernet chip
     161/     199 :                     ;}
     162/     199 :                     L21:
     163/     199 : (MACRO)             	Cretn
     164/     19A :                     
     165/     19A :                     _SetBank:
     166/     19A : (MACRO)             	reserve 6
     167/     1A0 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     168/     1AD : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     169/     1B9 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     170/     1C3 :                     ; void SetBank (uint8_t address) {
     171/     1C3 :                     ;  if ((address & BANK_MASK) != Enc28j60Bank) {
     172/     1C3 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     173/     1CD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     174/     1D0 : (MACRO)             	alu2I R11,R11,96,ani,ani
     175/     1D8 :                     	;removed ?	cpy2 R11,R11
     176/     1D8 : (MACRO)             	ld1 R10,'D',(_Enc28j60Bank),0
     177/     1E0 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     178/     1E3 : (MACRO)             	jeqI2 r11,r10,L24; EQI2(reg,reg)
     179/     1F5 :                     ;    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 4 - 4/25/2013 10:34:17


     180/     1F5 : (MACRO)             	ldaD R12,160; reg:acon
     181/     1FB : (MACRO)             	ldaD R13,31; reg:acon
     182/     201 : (MACRO)             	ldaD R11,3; reg:acon
     183/     207 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     184/     214 : (MACRO)             	Ccall _writeOp
     185/     217 :                     ;    Enc28j60Bank = address & BANK_MASK;
     186/     217 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     187/     221 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     188/     224 : (MACRO)             	alu2I R11,R11,96,ani,ani
     189/     22C :                     	;removed ?	cpy2 R11,R11
     190/     22C : (MACRO)             	st1 R11,'D',(_Enc28j60Bank),0; ASGNU1
     191/     234 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     192/     234 : (MACRO)             	ldaD R12,128; reg:acon
     193/     23A : (MACRO)             	ldaD R13,31; reg:acon
     194/     240 : (MACRO)             	ld1 R11,'D',(_Enc28j60Bank),0
     195/     248 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     196/     24B : (MACRO)             	shrI2I R11,5
     197/     273 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     198/     276 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     199/     283 : (MACRO)             	Ccall _writeOp
     200/     286 :                     ;  }
     201/     286 :                     L24:
     202/     286 :                     ;}
     203/     286 :                     L23:
     204/     286 : (MACRO)             	release 6
     205/     28C : (MACRO)             	Cretn
     206/     28D :                     
     207/     28D :                     _xferSPI:
     208/     28D : (MACRO)             	reserve 0; save room for local variables
     209/     28D : (MACRO)             	pushr r1
     210/     292 : (MACRO)             	pushr r7
     211/     297 : (MACRO)             	reserve 4; save room for outgoing arguments
     212/     29B : (MACRO)             	cpy2 r7,r12; function(1030) 1
     213/     29F :                     ;uint8_t xferSPI(uint8_t value){
     214/     29F :                     ;  for(i=0;i<8;i++){
     215/     29F : (MACRO)             	ld2z R1
     216/     2A3 :                     L27:
     217/     2A3 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
     218/     2A3 : (MACRO)             	ldaD R12,7; reg:acon
     219/     2A9 : (MACRO)             	cpy1 R11,R7
     220/     2AB : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     221/     2AE : (MACRO)             	alu2I R11,R11,128,ani,ani
     222/     2B6 :                     	;removed ?	cpy2 R11,R11
     223/     2B6 : (MACRO)             	cpy1 R13,R11
     224/     2B8 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     225/     2BB : (MACRO)             	Ccall _digitalWrite
     226/     2BE :                     ;    value=(value<<1)|digitalRead(miso);;
     227/     2BE : (MACRO)             	ldaD R12,15; reg:acon
     228/     2C4 : (MACRO)             	Ccall _digitalRead
     229/     2C7 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     230/     2CB : (MACRO)             	cpy1 R10,R7
     231/     2CD : (MACRO)             	zExt R10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     232/     2D0 : (MACRO)             	shl2I R10,1
     233/     2D6 : (MACRO)             	alu2 R11,R10,R11,or,or
     234/     2E2 : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
     235/     2E4 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
     236/     2E4 : (MACRO)             	ldaD R12,5; reg:acon
     237/     2EA : (MACRO)             	ldaD R13,1; reg:acon
     238/     2F0 : (MACRO)             	Ccall _digitalWrite
     239/     2F3 :                     ;    digitalWrite(sck,LOW);
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 5 - 4/25/2013 10:34:17


     240/     2F3 : (MACRO)             	ldaD R12,5; reg:acon
     241/     2F9 : (MACRO)             	ld2z R13
     242/     2FD : (MACRO)             	Ccall _digitalWrite
     243/     300 :                     ;  }
     244/     300 :                     L28:
     245/     300 :                     ;  for(i=0;i<8;i++){
     246/     300 : (MACRO)             	incm R1,1
     247/     301 : (MACRO)             	jcI2I r1,8,lbnf,L27  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     248/     312 :                     ;  return value;
     249/     312 : (MACRO)             	cpy1 R15,R7
     250/     314 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     251/     317 :                     L26:
     252/     317 : (MACRO)             	release 4; release room for outgoing arguments
     253/     31B : (MACRO)             	popr r7
     254/     31F : (MACRO)             	popr r1
     255/     323 : (MACRO)             	release 0; release room for local variables 
     256/     323 : (MACRO)             	Cretn
     257/     324 :                     
     258/     324 :                     _readOp:
     259/     324 : (MACRO)             	reserve 6
     260/     32A : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     261/     337 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     262/     344 : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     263/     350 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     264/     35A : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     265/     366 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     266/     370 :                     ;uint8_t readOp(uint8_t op,uint8_t address){
     267/     370 :                     ;  enableChip();
     268/     370 : (MACRO)             	Ccall _enableChip
     269/     373 :                     ;  xferSPI(op | (address & ADDR_MASK));
     270/     373 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     271/     37D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     272/     380 : (MACRO)             	ld1 R10,'O',sp,(2+8)
     273/     38A : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     274/     38D : (MACRO)             	alu2I R10,R10,31,ani,ani
     275/     395 :                     	;removed ?	cpy2 R10,R10
     276/     395 : (MACRO)             	alu2 R11,R11,R10,or,or
     277/     3A1 : (MACRO)             	cpy1 R12,R11
     278/     3A3 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     279/     3A6 : (MACRO)             	Ccall _xferSPI
     280/     3A9 :                     ;  if (address & 0x80)
     281/     3A9 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     282/     3B3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     283/     3B6 : (MACRO)             	alu2I R11,R11,128,ani,ani
     284/     3BE :                     	;removed ?	cpy2 R11,R11
     285/     3BE : (MACRO)             	jzU2 r11,L32; EQ 0
     286/     3C6 :                     ;    result=xferSPI(00);  //dummy byte if needed
     287/     3C6 : (MACRO)             	ld2z R12
     288/     3CA : (MACRO)             	Ccall _xferSPI
     289/     3CD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     290/     3D1 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     291/     3DB :                     L32:
     292/     3DB :                     ;  result=xferSPI(0x00); //then read the result
     293/     3DB : (MACRO)             	ld2z R12
     294/     3DF : (MACRO)             	Ccall _xferSPI
     295/     3E2 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     296/     3E6 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     297/     3F0 :                     ;  disableChip();
     298/     3F0 : (MACRO)             	Ccall _disableChip
     299/     3F3 :                     ;  return result;
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 6 - 4/25/2013 10:34:17


     300/     3F3 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
     301/     3FD : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
     302/     400 :                     L31:
     303/     400 : (MACRO)             	release 6
     304/     406 : (MACRO)             	Cretn
     305/     407 :                     
     306/     407 :                     _writeOp:
     307/     407 : (MACRO)             	reserve 8
     308/     40F : (MACRO)             	st2 r12,'O',sp,(10); flag1 
     309/     41C : (MACRO)             	st2 r13,'O',sp,(12); flag1 
     310/     429 : (MACRO)             	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
     311/     435 : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
     312/     43F : (MACRO)             	ld2 R11,'O',sp,(2+10) ;reg:INDIRI2(addr)
     313/     44B : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
     314/     455 : (MACRO)             	ld2 R11,'O',sp,(4+10) ;reg:INDIRI2(addr)
     315/     461 : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
     316/     46B :                     ;void writeOp(uint8_t op, uint8_t address, uint8_t data){
     317/     46B :                     ;  enableChip();
     318/     46B : (MACRO)             	Ccall _enableChip
     319/     46E :                     ;  xferSPI(op|(address& ADDR_MASK));
     320/     46E : (MACRO)             	ld1 R11,'O',sp,(0+10)
     321/     478 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     322/     47B : (MACRO)             	ld1 R10,'O',sp,(2+10)
     323/     485 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     324/     488 : (MACRO)             	alu2I R10,R10,31,ani,ani
     325/     490 :                     	;removed ?	cpy2 R10,R10
     326/     490 : (MACRO)             	alu2 R11,R11,R10,or,or
     327/     49C : (MACRO)             	cpy1 R12,R11
     328/     49E : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     329/     4A1 : (MACRO)             	Ccall _xferSPI
     330/     4A4 :                     ;  xferSPI(data);
     331/     4A4 : (MACRO)             	ld1 R12,'O',sp,(4+10)
     332/     4AE : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     333/     4B1 : (MACRO)             	Ccall _xferSPI
     334/     4B4 :                     ;  disableChip();
     335/     4B4 : (MACRO)             	Ccall _disableChip
     336/     4B7 :                     ;}
     337/     4B7 :                     L34:
     338/     4B7 : (MACRO)             	release 8
     339/     4BF : (MACRO)             	Cretn
     340/     4C0 :                     
     341/     4C0 :                     _readRegByte:
     342/     4C0 : (MACRO)             	reserve 4
     343/     4C4 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     344/     4D1 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     345/     4DD : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     346/     4E7 :                     ; uint8_t readRegByte (uint8_t address) {
     347/     4E7 :                     ;    SetBank(address);
     348/     4E7 : (MACRO)             	ld1 R12,'O',sp,(0+6)
     349/     4F1 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     350/     4F4 : (MACRO)             	Ccall _SetBank
     351/     4F7 :                     ;    return readOp(ENC28J60_READ_CTRL_REG, address);
     352/     4F7 : (MACRO)             	ld2z R12
     353/     4FB : (MACRO)             	ld1 R13,'O',sp,(0+6)
     354/     505 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     355/     508 : (MACRO)             	Ccall _readOp
     356/     50B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     357/     50F : (MACRO)             	cpy1 R15,R11
     358/     511 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     359/     514 :                     L35:
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 7 - 4/25/2013 10:34:17


     360/     514 : (MACRO)             	release 4
     361/     518 : (MACRO)             	Cretn
     362/     519 :                     
     363/     519 :                     _writeRegByte:
     364/     519 : (MACRO)             	reserve 6
     365/     51F : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     366/     52C : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     367/     539 : (MACRO)             	ld2 R11,'O',sp,(0+8) ;reg:INDIRI2(addr)
     368/     545 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     369/     54F : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
     370/     55B : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     371/     565 :                     ; void writeRegByte (uint8_t address, uint8_t data) {
     372/     565 :                     ;    SetBank(address);
     373/     565 : (MACRO)             	ld1 R12,'O',sp,(0+8)
     374/     56F : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     375/     572 : (MACRO)             	Ccall _SetBank
     376/     575 :                     ;    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
     377/     575 : (MACRO)             	ldaD R12,64; reg:acon
     378/     57B : (MACRO)             	ld1 R13,'O',sp,(0+8)
     379/     585 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     380/     588 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     381/     592 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     382/     595 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     383/     5A2 : (MACRO)             	Ccall _writeOp
     384/     5A5 :                     ;}
     385/     5A5 :                     L36:
     386/     5A5 : (MACRO)             	release 6
     387/     5AB : (MACRO)             	Cretn
     388/     5AC :                     
     389/     5AC :                     _writeReg:
     390/     5AC : (MACRO)             	reserve 4
     391/     5B0 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     392/     5BD : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     393/     5CA : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     394/     5D6 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     395/     5E0 :                     ; void writeReg(uint8_t address, uint16_t data) {
     396/     5E0 :                     ;    writeRegByte(address, data);
     397/     5E0 : (MACRO)             	ld1 R12,'O',sp,(0+6)
     398/     5EA : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     399/     5ED : (MACRO)             	ld2 R11,'O',sp,(2+6); reg:INDIRU2(addr)
     400/     5F9 : (MACRO)             	cpy1 R13,R11
     401/     5FB : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     402/     5FE : (MACRO)             	Ccall _writeRegByte
     403/     601 :                     ;    writeRegByte(address + 1, data >> 8);
     404/     601 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     405/     60B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     406/     60E : (MACRO)             	incm R11,1
     407/     60F : (MACRO)             	cpy1 R12,R11
     408/     611 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     409/     614 : (MACRO)             	ld2 R11,'O',sp,(2+6); reg:INDIRU2(addr)
     410/     620 : (MACRO)             	shrU2I R11,8
     411/     650 : (MACRO)             	cpy1 R13,R11
     412/     652 : (MACRO)             	zExt R13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     413/     655 : (MACRO)             	Ccall _writeRegByte
     414/     658 :                     ;}
     415/     658 :                     L37:
     416/     658 : (MACRO)             	release 4
     417/     65C : (MACRO)             	Cretn
     418/     65D :                     
     419/     65D :                     _writePhy:
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 8 - 4/25/2013 10:34:17


     420/     65D : (MACRO)             	reserve 4
     421/     661 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     422/     66E : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     423/     67B : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     424/     687 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     425/     691 :                     ; void writePhy (uint8_t address, uint16_t data) {
     426/     691 :                     ;    writeRegByte(MIREGADR, address);
     427/     691 : (MACRO)             	ldaD R12,212; reg:acon
     428/     697 : (MACRO)             	ld1 R13,'O',sp,(0+6)
     429/     6A1 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     430/     6A4 : (MACRO)             	Ccall _writeRegByte
     431/     6A7 :                     ;    writeReg(MIWR, data);
     432/     6A7 : (MACRO)             	ldaD R12,214; reg:acon
     433/     6AD : (MACRO)             	ld2 R13,'O',sp,(2+6); reg:INDIRU2(addr)
     434/     6B9 : (MACRO)             	Ccall _writeReg
     435/     6BC :                     L39:
     436/     6BC :                     ;        ;
     437/     6BC :                     L40:
     438/     6BC :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
     439/     6BC : (MACRO)             	ldaD R12,234; reg:acon
     440/     6C2 : (MACRO)             	Ccall _readRegByte
     441/     6C5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     442/     6C9 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     443/     6CC : (MACRO)             	alu2I R11,R11,1,ani,ani
     444/     6D4 :                     	;removed ?	cpy2 R11,R11
     445/     6D4 : (MACRO)             	jnzU2 r11,L39; NE 0
     446/     6DC :                     ;}
     447/     6DC :                     L38:
     448/     6DC : (MACRO)             	release 4
     449/     6E0 : (MACRO)             	Cretn
     450/     6E1 :                     
     451/     6E1 :                     _ethbegin:
     452/     6E1 : (MACRO)             	reserve 4
     453/     6E5 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     454/     6F2 : (MACRO)             	ld2 R11,'O',sp,(0+6); reg:INDIRU2(addr)
     455/     6FE : (MACRO)             	st2 R11,'O',sp,(0+6); ASGNU2(addr,reg)*
     456/     70B :                     ;uint8_t ethbegin (const uint16_t size) {
     457/     70B :                     ;  return encinitialize(size, mymac);
     458/     70B : (MACRO)             	ld2 R12,'O',sp,(0+6); reg:INDIRU2(addr)
     459/     717 : (MACRO)             	ldaD R13,_mymac; reg:acon
     460/     71D : (MACRO)             	Ccall _encinitialize
     461/     720 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     462/     724 : (MACRO)             	cpy1 R15,R11
     463/     726 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     464/     729 :                     L42:
     465/     729 : (MACRO)             	release 4
     466/     72D : (MACRO)             	Cretn
     467/     72E :                     
     468/     72E :                     _encinitSPI:
     469/     72E : (MACRO)             	reserve 4
     470/     732 :                     ;void encinitSPI () {
     471/     732 :                     ;    digitalWrite(mosi, HIGH);
     472/     732 : (MACRO)             	ldaD R12,7; reg:acon
     473/     738 : (MACRO)             	ldaD R13,1; reg:acon
     474/     73E : (MACRO)             	Ccall _digitalWrite
     475/     741 :                     ;    digitalWrite(mosi, LOW);
     476/     741 : (MACRO)             	ldaD R12,7; reg:acon
     477/     747 : (MACRO)             	ld2z R13
     478/     74B : (MACRO)             	Ccall _digitalWrite
     479/     74E :                     ;    digitalWrite(sck, LOW);
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 9 - 4/25/2013 10:34:17


     480/     74E : (MACRO)             	ldaD R12,5; reg:acon
     481/     754 : (MACRO)             	ld2z R13
     482/     758 : (MACRO)             	Ccall _digitalWrite
     483/     75B :                     ;}
     484/     75B :                     L43:
     485/     75B : (MACRO)             	release 4
     486/     75F : (MACRO)             	Cretn
     487/     760 :                     
     488/     760 :                     _encinitialize:
     489/     760 : (MACRO)             	reserve 0; save room for local variables
     490/     760 : (MACRO)             	pushr r1
     491/     765 : (MACRO)             	pushr r7
     492/     76A : (MACRO)             	reserve 6; save room for outgoing arguments
     493/     770 : (MACRO)             	st2 r12,'O',sp,(12); flag1 
     494/     77D : (MACRO)             	cpy2 r7,r13; function(2055) 1
     495/     781 :                     ;uint8_t encinitialize (uint16_t size, const uint8_t* macaddr) {
     496/     781 :                     ;    bufferSize = size;
     497/     781 : (MACRO)             	ld2 R11,'O',sp,(0+12); reg:INDIRU2(addr)
     498/     78D : (MACRO)             	st2 R11,'D',(_bufferSize),0; ASGNU2(addr,reg)*
     499/     798 :                     ;    encinitSPI();
     500/     798 : (MACRO)             	Ccall _encinitSPI
     501/     79B :                     ;    disableChip();
     502/     79B : (MACRO)             	Ccall _disableChip
     503/     79E :                     ;    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     504/     79E : (MACRO)             	ldaD R11,255; reg:acon
     505/     7A4 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
     506/     7A8 : (MACRO)             	ld2z R13
     507/     7AC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     508/     7B9 : (MACRO)             	Ccall _writeOp
     509/     7BC :                     L45:
     510/     7BC :                     ;        ;
     511/     7BC :                     L46:
     512/     7BC :                     ;    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
     513/     7BC : (MACRO)             	ld2z R12
     514/     7C0 : (MACRO)             	ldaD R13,29; reg:acon
     515/     7C6 : (MACRO)             	Ccall _readOp
     516/     7C9 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     517/     7CD : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     518/     7D0 : (MACRO)             	jnzU2 r11,L49; NE 0
     519/     7D8 : (MACRO)             	ldaD R1,1; reg:acon
     520/     7DE : C0 07 E5            	lbr L50
     521/     7E1 :                     L49:
     522/     7E1 : (MACRO)             	ld2z R1
     523/     7E5 :                     L50:
     524/     7E5 : (MACRO)             	alu2I R11,R1,1,ani,ani
     525/     7ED :                     	;removed ?	cpy2 R11,R1
     526/     7ED : (MACRO)             	jnzU2 r11,L45; NE 0
     527/     7F5 :                     ;    gNextPacketPtr = RXSTART_INIT;
     528/     7F5 : (MACRO)             	ld2z R11
     529/     7F9 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0; ASGNI2(addr,reg)*;
     530/     804 :                     ;    writeReg(ERXST, RXSTART_INIT);
     531/     804 : (MACRO)             	ldaD R12,8; reg:acon
     532/     80A : (MACRO)             	ld2z R13
     533/     80E : (MACRO)             	Ccall _writeReg
     534/     811 :                     ;    writeReg(ERXRDPT, RXSTART_INIT);
     535/     811 : (MACRO)             	ldaD R12,12; reg:acon
     536/     817 : (MACRO)             	ld2z R13
     537/     81B : (MACRO)             	Ccall _writeReg
     538/     81E :                     ;    writeReg(ERXND, RXSTOP_INIT);
     539/     81E : (MACRO)             	ldaD R12,10; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 10 - 4/25/2013 10:34:17


     540/     824 : (MACRO)             	ldaD R13,3071; reg:acon
     541/     82A : (MACRO)             	Ccall _writeReg
     542/     82D :                     ;    writeReg(ETXST, TXSTART_INIT);
     543/     82D : (MACRO)             	ldaD R12,4; reg:acon
     544/     833 : (MACRO)             	ldaD R13,3072; reg:acon
     545/     839 : (MACRO)             	Ccall _writeReg
     546/     83C :                     ;    writeReg(ETXND, TXSTOP_INIT);
     547/     83C : (MACRO)             	ldaD R12,6; reg:acon
     548/     842 : (MACRO)             	ldaD R13,4607; reg:acon
     549/     848 : (MACRO)             	Ccall _writeReg
     550/     84B :                     ;    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     551/     84B : (MACRO)             	ldaD R12,56; reg:acon
     552/     851 : (MACRO)             	ldaD R13,176; reg:acon
     553/     857 : (MACRO)             	Ccall _writeRegByte
     554/     85A :                     ;    writeReg(EPMM0, 0x303f);
     555/     85A : (MACRO)             	ldaD R12,40; reg:acon
     556/     860 : (MACRO)             	ldaD R13,12351; reg:acon
     557/     866 : (MACRO)             	Ccall _writeReg
     558/     869 :                     ;    writeReg(EPMCS, 0xf7f9);
     559/     869 : (MACRO)             	ldaD R12,48; reg:acon
     560/     86F : (MACRO)             	ldaD R13,0xf7f9; reg:acon
     561/     875 : (MACRO)             	Ccall _writeReg
     562/     878 :                     ;    writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     563/     878 : (MACRO)             	ldaD R12,192; reg:acon
     564/     87E : (MACRO)             	ldaD R13,13; reg:acon
     565/     884 : (MACRO)             	Ccall _writeRegByte
     566/     887 :                     ;    writeRegByte(MACON2, 0x00);
     567/     887 : (MACRO)             	ldaD R12,193; reg:acon
     568/     88D : (MACRO)             	ld2z R13
     569/     891 : (MACRO)             	Ccall _writeRegByte
     570/     894 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
     571/     894 : (MACRO)             	ldaD R12,128; reg:acon
     572/     89A : (MACRO)             	ldaD R13,194; reg:acon
     573/     8A0 : (MACRO)             	ldaD R11,50; reg:acon
     574/     8A6 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     575/     8B3 : (MACRO)             	Ccall _writeOp
     576/     8B6 :                     ;    writeReg(MAIPG, 0x0C12);
     577/     8B6 : (MACRO)             	ldaD R12,198; reg:acon
     578/     8BC : (MACRO)             	ldaD R13,3090; reg:acon
     579/     8C2 : (MACRO)             	Ccall _writeReg
     580/     8C5 :                     ;    writeRegByte(MABBIPG, 0x12);
     581/     8C5 : (MACRO)             	ldaD R12,196; reg:acon
     582/     8CB : (MACRO)             	ldaD R13,18; reg:acon
     583/     8D1 : (MACRO)             	Ccall _writeRegByte
     584/     8D4 :                     ;    writeReg(MAMXFL, MAX_FRAMELEN);
     585/     8D4 : (MACRO)             	ldaD R12,202; reg:acon
     586/     8DA : (MACRO)             	ldaD R13,1500; reg:acon
     587/     8E0 : (MACRO)             	Ccall _writeReg
     588/     8E3 :                     ;    writeRegByte(MAADR5, macaddr[0]);
     589/     8E3 : (MACRO)             	ldaD R12,228; reg:acon
     590/     8E9 : (MACRO)             	ld1 R13,'O',R7,0
     591/     8F3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     592/     8F6 : (MACRO)             	Ccall _writeRegByte
     593/     8F9 :                     ;    writeRegByte(MAADR4, macaddr[1]);
     594/     8F9 : (MACRO)             	ldaD R12,229; reg:acon
     595/     8FF : (MACRO)             	ld1 R13,'O',R7,(1)
     596/     909 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     597/     90C : (MACRO)             	Ccall _writeRegByte
     598/     90F :                     ;    writeRegByte(MAADR3, macaddr[2]);
     599/     90F : (MACRO)             	ldaD R12,226; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 11 - 4/25/2013 10:34:17


     600/     915 : (MACRO)             	ld1 R13,'O',R7,(2)
     601/     91F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     602/     922 : (MACRO)             	Ccall _writeRegByte
     603/     925 :                     ;    writeRegByte(MAADR2, macaddr[3]);
     604/     925 : (MACRO)             	ldaD R12,227; reg:acon
     605/     92B : (MACRO)             	ld1 R13,'O',R7,(3)
     606/     935 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     607/     938 : (MACRO)             	Ccall _writeRegByte
     608/     93B :                     ;    writeRegByte(MAADR1, macaddr[4]);
     609/     93B : (MACRO)             	ldaD R12,224; reg:acon
     610/     941 : (MACRO)             	ld1 R13,'O',R7,(4)
     611/     94B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     612/     94E : (MACRO)             	Ccall _writeRegByte
     613/     951 :                     ;    writeRegByte(MAADR0, macaddr[5]);
     614/     951 : (MACRO)             	ldaD R12,225; reg:acon
     615/     957 : (MACRO)             	ld1 R13,'O',R7,(5)
     616/     961 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     617/     964 : (MACRO)             	Ccall _writeRegByte
     618/     967 :                     ;    writePhy(PHCON2, PHCON2_HDLDIS);
     619/     967 : (MACRO)             	ldaD R12,16; reg:acon
     620/     96D : (MACRO)             	ldaD R13,256; reg:acon
     621/     973 : (MACRO)             	Ccall _writePhy
     622/     976 :                     ;    SetBank(ECON1);
     623/     976 : (MACRO)             	ldaD R12,31; reg:acon
     624/     97C : (MACRO)             	Ccall _SetBank
     625/     97F :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     626/     97F : (MACRO)             	ldaD R12,128; reg:acon
     627/     985 : (MACRO)             	ldaD R13,27; reg:acon
     628/     98B : (MACRO)             	ldaD R11,192; reg:acon
     629/     991 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     630/     99E : (MACRO)             	Ccall _writeOp
     631/     9A1 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     632/     9A1 : (MACRO)             	ldaD R12,128; reg:acon
     633/     9A7 : (MACRO)             	ldaD R13,31; reg:acon
     634/     9AD : (MACRO)             	ldaD R11,4; reg:acon
     635/     9B3 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     636/     9C0 : (MACRO)             	Ccall _writeOp
     637/     9C3 :                     ;    return readRegByte(EREVID);
     638/     9C3 : (MACRO)             	ldaD R12,114; reg:acon
     639/     9C9 : (MACRO)             	Ccall _readRegByte
     640/     9CC : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     641/     9D0 : (MACRO)             	cpy1 R15,R11
     642/     9D2 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     643/     9D5 :                     L44:
     644/     9D5 : (MACRO)             	release 6; release room for outgoing arguments
     645/     9DB : (MACRO)             	popr r7
     646/     9DF : (MACRO)             	popr r1
     647/     9E3 : (MACRO)             	release 0; release room for local variables 
     648/     9E3 : (MACRO)             	Cretn
     649/     9E4 :                     
     650/     9E4 :                     _encpacketReceive:
     651/     9E4 : (MACRO)             	reserve 10; save room for local variables
     652/     9EE : (MACRO)             	pushr r7
     653/     9F3 : (MACRO)             	reserve 6; save room for outgoing arguments
     654/     9F9 :                     ;uint16_t encpacketReceive() {
     655/     9F9 :                     ;    uint16_t len = 0;
     656/     9F9 : (MACRO)             	ld2z R7
     657/     9FD :                     ;    if (readRegByte(EPKTCNT) > 0) {
     658/     9FD : (MACRO)             	ldaD R12,57; reg:acon
     659/     A03 : (MACRO)             	Ccall _readRegByte
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 12 - 4/25/2013 10:34:17


     660/     A06 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     661/     A0A : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     662/     A0D : (MACRO)             	jnI2I r11,0,lbdf,L53 ;LEI2 0 11 L53; LE is flipped test & subtraction
     663/     A1E :                     ;        writeReg(ERDPT, gNextPacketPtr);
     664/     A1E : (MACRO)             	ld2z R12
     665/     A22 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     666/     A2C : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     667/     A30 : (MACRO)             	Ccall _writeReg
     668/     A33 :                     ;        readBuf(sizeof header, (uint8_t*) &header);
     669/     A33 : (MACRO)             	ldaD R12,6; reg:acon
     670/     A39 : (MACRO)             	ldA2 R13,'O',sp,(-8+20); reg:addr
     671/     A41 : (MACRO)             	Ccall _readBuf
     672/     A44 :                     ;        headernextPacket=header.nextPacketL+(header.nextPacketH<<8); //assemble next packet pointer
     673/     A44 : (MACRO)             	ld1 R11,'O',sp,(-8+20)
     674/     A4E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     675/     A51 : (MACRO)             	ld1 R10,'O',sp,(-7+20)
     676/     A5B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     677/     A5E : (MACRO)             	shl2I R10,8
     678/     A8E : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
     679/     A9A : (MACRO)             	st2 R11,'O',sp,(-10+20); ASGNU2(addr,LOADU2(reg))*
     680/     AA7 :                     ;        headerbyteCount=header.byteCountL+(header.byteCountH<<8); //assemble byte count
     681/     AA7 : (MACRO)             	ld1 R11,'O',sp,(-6+20)
     682/     AB1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     683/     AB4 : (MACRO)             	ld1 R10,'O',sp,(-5+20)
     684/     ABE : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     685/     AC1 : (MACRO)             	shl2I R10,8
     686/     AF1 : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
     687/     AFD : (MACRO)             	st2 R11,'O',sp,(-12+20); ASGNU2(addr,LOADU2(reg))*
     688/     B0A :                     ;        gNextPacketPtr  = headernextPacket;
     689/     B0A : (MACRO)             	ld2 R11,'O',sp,(-10+20); reg:INDIRU2(addr)
     690/     B16 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0; ASGNI2(addr,LOADI2(reg)) wjrtest
     691/     B21 :                     ;        len = headerbyteCount - 4; //remove the CRC count
     692/     B21 : (MACRO)             	ld2 R11,'O',sp,(-12+20); reg:INDIRU2(addr)
     693/     B2D : (MACRO)             	cpy2 R7,R11
     694/     B31 : (MACRO)             	decm R7,4
     695/     B35 :                     ;        if (len>bufferSize-1)
     696/     B35 : (MACRO)             	ld2 R11,'D',(_bufferSize),0; reg:INDIRU2(addr)
     697/     B3F : (MACRO)             	decm R11,1
     698/     B40 : (MACRO)             	jcU2 r11,r7,lbdf,L58 ;LE is flipped test & operands
     699/     B4D :                     ;            len=bufferSize-1;
     700/     B4D : (MACRO)             	ld2 R11,'D',(_bufferSize),0; reg:INDIRU2(addr)
     701/     B57 : (MACRO)             	cpy2 R7,R11
     702/     B5B : (MACRO)             	decm R7,1
     703/     B5C :                     L58:
     704/     B5C :                     ;        if ((header.statusL & 0x80)==0)
     705/     B5C : (MACRO)             	ld1 R11,'O',sp,(-4+20)
     706/     B66 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     707/     B69 : (MACRO)             	alu2I R11,R11,128,ani,ani
     708/     B71 :                     	;removed ?	cpy2 R11,R11
     709/     B71 : (MACRO)             	jnzU2 r11,L60; NE 0
     710/     B79 :                     ;            len = 0;
     711/     B79 : (MACRO)             	ld2z R7
     712/     B7D : C0 0B 8D            	lbr L61
     713/     B80 :                     L60:
     714/     B80 :                     ;            readBuf(len, buffer);
     715/     B80 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
     716/     B84 : (MACRO)             	ldaD R13,_buffer; reg:acon
     717/     B8A : (MACRO)             	Ccall _readBuf
     718/     B8D :                     L61:
     719/     B8D :                     ;        buffer[len] = 0;
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 13 - 4/25/2013 10:34:17


     720/     B8D : (MACRO)             	ldaD R11,0; reg:acon
     721/     B93 : (MACRO)             	st1 R11,'O',R7,(_buffer); ASGNU1
     722/     B9D :                     ;        if (gNextPacketPtr - 1 > RXSTOP_INIT)
     723/     B9D : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     724/     BA7 : (MACRO)             	decm R11,1
     725/     BA8 : (MACRO)             	jnI2I r11,3071,lbdf,L63 ;LEI2 3071 11 L63; LE is flipped test & subtraction
     726/     BB9 :                     ;            writeReg(ERXRDPT, RXSTOP_INIT);
     727/     BB9 : (MACRO)             	ldaD R12,12; reg:acon
     728/     BBF : (MACRO)             	ldaD R13,3071; reg:acon
     729/     BC5 : (MACRO)             	Ccall _writeReg
     730/     BC8 : C0 0B E3            	lbr L64
     731/     BCB :                     L63:
     732/     BCB :                     ;            writeReg(ERXRDPT, gNextPacketPtr - 1);
     733/     BCB : (MACRO)             	ldaD R12,12; reg:acon
     734/     BD1 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0 ;reg:INDIRI2(addr)
     735/     BDB : (MACRO)             	decm R11,1
     736/     BDC : (MACRO)             	cpy2 R13,R11 ;LOADU2(reg)*
     737/     BE0 : (MACRO)             	Ccall _writeReg
     738/     BE3 :                     L64:
     739/     BE3 :                     ;        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     740/     BE3 : (MACRO)             	ldaD R12,128; reg:acon
     741/     BE9 : (MACRO)             	ldaD R13,30; reg:acon
     742/     BEF : (MACRO)             	ldaD R11,64; reg:acon
     743/     BF5 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     744/     C02 : (MACRO)             	Ccall _writeOp
     745/     C05 :                     ;    }
     746/     C05 :                     L53:
     747/     C05 :                     ;    return len;
     748/     C05 : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
     749/     C09 :                     L51:
     750/     C09 : (MACRO)             	release 6; release room for outgoing arguments
     751/     C0F : (MACRO)             	popr r7
     752/     C13 : (MACRO)             	release 10; release room for local variables 
     753/     C1B : (MACRO)             	Cretn
     754/     C1C :                     
     755/     C1C :                     _readBuf:
     756/     C1C : (MACRO)             	reserve 0; save room for local variables
     757/     C1C : (MACRO)             	pushr r0
     758/     C21 : (MACRO)             	pushr r1
     759/     C26 : (MACRO)             	pushr r7
     760/     C2B : (MACRO)             	reserve 4; save room for outgoing arguments
     761/     C2F : (MACRO)             	cpy2 r7,r12; function(2054) 1
     762/     C33 : (MACRO)             	cpy2 r1,r13; function(2055) 1
     763/     C37 :                     ; void readBuf(uint16_t len, uint8_t* data) {
     764/     C37 :                     ;    enableChip();
     765/     C37 : (MACRO)             	Ccall _enableChip
     766/     C3A :                     ;    xferSPI(ENC28J60_READ_BUF_MEM);
     767/     C3A : (MACRO)             	ldaD R12,58; reg:acon
     768/     C40 : (MACRO)             	Ccall _xferSPI
     769/     C43 : C0 0C 5E            	lbr L67
     770/     C46 :                     L66:
     771/     C46 :                     ;    while (len--) {
     772/     C46 :                     ;        x=xferSPI(0x00);
     773/     C46 : (MACRO)             	ld2z R12
     774/     C4A : (MACRO)             	Ccall _xferSPI
     775/     C4D : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     776/     C51 : (MACRO)             	cpy1 R0,R11;LOADU1(reg)
     777/     C53 :                     ;        *data++ = x;
     778/     C53 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     779/     C57 : (MACRO)             	cpy2 R1,R11
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 14 - 4/25/2013 10:34:17


     780/     C5B : (MACRO)             	incm R1,1
     781/     C5C : (MACRO)             	str1 R0,R11; ASGNU1(indaddr,reg)
     782/     C5E :                     ;    }
     783/     C5E :                     L67:
     784/     C5E :                     ;    while (len--) {
     785/     C5E : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     786/     C62 : (MACRO)             	cpy2 R7,R11
     787/     C66 : (MACRO)             	decm R7,1
     788/     C67 : (MACRO)             	jnzU2 r11,L66; NE 0
     789/     C6F :                     ;    disableChip();
     790/     C6F : (MACRO)             	Ccall _disableChip
     791/     C72 :                     ;}
     792/     C72 :                     L65:
     793/     C72 : (MACRO)             	release 4; release room for outgoing arguments
     794/     C76 : (MACRO)             	popr r7
     795/     C7A : (MACRO)             	popr r1
     796/     C7E : (MACRO)             	popr r0
     797/     C82 : (MACRO)             	release 0; release room for local variables 
     798/     C82 : (MACRO)             	Cretn
     799/     C83 :                     
     800/     C83 :                     _writeBuf:
     801/     C83 : (MACRO)             	reserve 0; save room for local variables
     802/     C83 : (MACRO)             	pushr r1
     803/     C88 : (MACRO)             	pushr r7
     804/     C8D : (MACRO)             	reserve 4; save room for outgoing arguments
     805/     C91 : (MACRO)             	cpy2 r7,r12; function(2054) 1
     806/     C95 : (MACRO)             	cpy2 r1,r13; function(2055) 1
     807/     C99 :                     ; void writeBuf(uint16_t len, const uint8_t* data) {
     808/     C99 :                     ;    enableChip();
     809/     C99 : (MACRO)             	Ccall _enableChip
     810/     C9C :                     ;    xferSPI(ENC28J60_WRITE_BUF_MEM);
     811/     C9C : (MACRO)             	ldaD R12,122; reg:acon
     812/     CA2 : (MACRO)             	Ccall _xferSPI
     813/     CA5 : C0 0C C1            	lbr L71
     814/     CA8 :                     L70:
     815/     CA8 :                     ;        xferSPI(*data++);
     816/     CA8 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     817/     CAC : (MACRO)             	cpy2 R1,R11
     818/     CB0 : (MACRO)             	incm R1,1
     819/     CB1 : (MACRO)             	ld1 R12,'O',R11,0
     820/     CBB : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
     821/     CBE : (MACRO)             	Ccall _xferSPI
     822/     CC1 :                     L71:
     823/     CC1 :                     ;    while (len--)
     824/     CC1 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     825/     CC5 : (MACRO)             	cpy2 R7,R11
     826/     CC9 : (MACRO)             	decm R7,1
     827/     CCA : (MACRO)             	jnzU2 r11,L70; NE 0
     828/     CD2 :                     ;    disableChip();
     829/     CD2 : (MACRO)             	Ccall _disableChip
     830/     CD5 :                     ;}
     831/     CD5 :                     L69:
     832/     CD5 : (MACRO)             	release 4; release room for outgoing arguments
     833/     CD9 : (MACRO)             	popr r7
     834/     CDD : (MACRO)             	popr r1
     835/     CE1 : (MACRO)             	release 0; release room for local variables 
     836/     CE1 : (MACRO)             	Cretn
     837/     CE2 :                     
     838/     CE2 :                     _encpacketSend:
     839/     CE2 : (MACRO)             	reserve 6
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 15 - 4/25/2013 10:34:17


     840/     CE8 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     841/     CF5 :                     ;void encpacketSend(uint16_t len) {
     842/     CF5 : C0 0D 5A            	lbr L75
     843/     CF8 :                     L74:
     844/     CF8 :                     ;        if (readRegByte(EIR) & EIR_TXERIF) {
     845/     CF8 : (MACRO)             	ldaD R12,28; reg:acon
     846/     CFE : (MACRO)             	Ccall _readRegByte
     847/     D01 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     848/     D05 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     849/     D08 : (MACRO)             	alu2I R11,R11,2,ani,ani
     850/     D10 :                     	;removed ?	cpy2 R11,R11
     851/     D10 : (MACRO)             	jzU2 r11,L77; EQ 0
     852/     D18 :                     ;            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     853/     D18 : (MACRO)             	ldaD R11,128; reg:acon
     854/     D1E : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
     855/     D22 : (MACRO)             	ldaD R13,31; reg:acon
     856/     D28 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     857/     D35 : (MACRO)             	Ccall _writeOp
     858/     D38 :                     ;            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     859/     D38 : (MACRO)             	ldaD R12,160; reg:acon
     860/     D3E : (MACRO)             	ldaD R13,31; reg:acon
     861/     D44 : (MACRO)             	ldaD R11,128; reg:acon
     862/     D4A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     863/     D57 : (MACRO)             	Ccall _writeOp
     864/     D5A :                     ;        }
     865/     D5A :                     L77:
     866/     D5A :                     L75:
     867/     D5A :                     ;    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     868/     D5A : (MACRO)             	ld2z R12
     869/     D5E : (MACRO)             	ldaD R13,31; reg:acon
     870/     D64 : (MACRO)             	Ccall _readOp
     871/     D67 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     872/     D6B : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     873/     D6E : (MACRO)             	alu2I R11,R11,8,ani,ani
     874/     D76 :                     	;removed ?	cpy2 R11,R11
     875/     D76 : (MACRO)             	jnzU2 r11,L74; NE 0
     876/     D7E :                     ;    writeReg(EWRPT, TXSTART_INIT);
     877/     D7E : (MACRO)             	ldaD R12,2; reg:acon
     878/     D84 : (MACRO)             	ldaD R13,3072; reg:acon
     879/     D8A : (MACRO)             	Ccall _writeReg
     880/     D8D :                     ;    writeReg(ETXND, TXSTART_INIT+len);
     881/     D8D : (MACRO)             	ldaD R12,6; reg:acon
     882/     D93 : (MACRO)             	ld2 R11,'O',sp,(0+8); reg:INDIRU2(addr)
     883/     D9F : (MACRO)             	ldA2 R13,'O',R11,(3072); reg:addr
     884/     DA7 : (MACRO)             	Ccall _writeReg
     885/     DAA :                     ;    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     886/     DAA : (MACRO)             	ldaD R12,122; reg:acon
     887/     DB0 : (MACRO)             	ld2z R11
     888/     DB4 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
     889/     DB8 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     890/     DC5 : (MACRO)             	Ccall _writeOp
     891/     DC8 :                     ;    writeBuf(len, buffer);
     892/     DC8 : (MACRO)             	ld2 R12,'O',sp,(0+8); reg:INDIRU2(addr)
     893/     DD4 : (MACRO)             	ldaD R13,_buffer; reg:acon
     894/     DDA : (MACRO)             	Ccall _writeBuf
     895/     DDD :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     896/     DDD : (MACRO)             	ldaD R12,128; reg:acon
     897/     DE3 : (MACRO)             	ldaD R13,31; reg:acon
     898/     DE9 : (MACRO)             	ldaD R11,8; reg:acon
     899/     DEF : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 16 - 4/25/2013 10:34:17


     900/     DFC : (MACRO)             	Ccall _writeOp
     901/     DFF :                     ;}
     902/     DFF :                     L73:
     903/     DFF : (MACRO)             	release 6
     904/     E05 : (MACRO)             	Cretn
     905/     E06 :                     
     906/     E06 :                     _isLinkUp:
     907/     E06 : (MACRO)             	reserve 4
     908/     E0A :                     ;int isLinkUp() {
     909/     E0A :                     ;    return (readPhyByte(PHSTAT2) >> 2) & 1;
     910/     E0A : (MACRO)             	ldaD R12,17; reg:acon
     911/     E10 : (MACRO)             	Ccall _readPhyByte;CALLU2(ar)*
     912/     E13 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     913/     E17 : (MACRO)             	shrU2I R11,2
     914/     E23 : (MACRO)             	alu2I R11,R11,1,ani,ani ;removed copy;BANDU2(reg,con)  
     915/     E2B : (MACRO)             	cpy2 R15,R11 ;LOADI2(reg)*
     916/     E2F :                     L79:
     917/     E2F : (MACRO)             	release 4
     918/     E33 : (MACRO)             	Cretn
     919/     E34 :                     
     920/     E34 :                     _readPhyByte:
     921/     E34 : (MACRO)             	reserve 4
     922/     E38 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     923/     E45 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     924/     E51 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     925/     E5B :                     ; uint16_t readPhyByte (uint8_t address) {
     926/     E5B :                     ;    writeRegByte(MIREGADR, address);
     927/     E5B : (MACRO)             	ldaD R12,212; reg:acon
     928/     E61 : (MACRO)             	ld1 R13,'O',sp,(0+6)
     929/     E6B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     930/     E6E : (MACRO)             	Ccall _writeRegByte
     931/     E71 :                     ;    writeRegByte(MICMD, MICMD_MIIRD);
     932/     E71 : (MACRO)             	ldaD R12,210; reg:acon
     933/     E77 : (MACRO)             	ldaD R13,1; reg:acon
     934/     E7D : (MACRO)             	Ccall _writeRegByte
     935/     E80 :                     L81:
     936/     E80 :                     ;        ;
     937/     E80 :                     L82:
     938/     E80 :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
     939/     E80 : (MACRO)             	ldaD R12,234; reg:acon
     940/     E86 : (MACRO)             	Ccall _readRegByte
     941/     E89 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     942/     E8D : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     943/     E90 : (MACRO)             	alu2I R11,R11,1,ani,ani
     944/     E98 :                     	;removed ?	cpy2 R11,R11
     945/     E98 : (MACRO)             	jnzU2 r11,L81; NE 0
     946/     EA0 :                     ;    writeRegByte(MICMD, 0x00);
     947/     EA0 : (MACRO)             	ldaD R12,210; reg:acon
     948/     EA6 : (MACRO)             	ld2z R13
     949/     EAA : (MACRO)             	Ccall _writeRegByte
     950/     EAD :                     ;    return readRegByte(MIRD+1);
     951/     EAD : (MACRO)             	ldaD R12,217; reg:acon
     952/     EB3 : (MACRO)             	Ccall _readRegByte
     953/     EB6 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
     954/     EBA : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     955/     EBD : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     956/     EC1 :                     L80:
     957/     EC1 : (MACRO)             	release 4
     958/     EC5 : (MACRO)             	Cretn
     959/     EC6 :                     
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 17 - 4/25/2013 10:34:17


     960/     EC6 :                     _tcpclient_src_port_l:
     961/     EC6 : 01                  	db 1
     962/     EC7 :                     _delaycnt:
     963/     EC7 : 00 01               	dw 1
     964/     EC9 :                     _seqnum:
     965/     EC9 : 0A                  	db 10
     966/     ECA :                     _arpreqhdr:
     967/     ECA : 00                  	db 0
     968/     ECB : 01                  	db 1
     969/     ECC : 08                  	db 8
     970/     ECD : 00                  	db 0
     971/     ECE : 06                  	db 6
     972/     ECF : 04                  	db 4
     973/     ED0 : 00                  	db 0
     974/     ED1 : 01                  	db 1
     975/     ED2 :                     _iphdr:
     976/     ED2 : 45                  	db 69
     977/     ED3 : 00                  	db 0
     978/     ED4 : 00                  	db 0
     979/     ED5 : 82                  	db 130
     980/     ED6 : 00                  	db 0
     981/     ED7 : 00                  	db 0
     982/     ED8 : 40                  	db 64
     983/     ED9 : 00                  	db 0
     984/     EDA : 20                  	db 32
     985/     EDB :                     _ntpreqhdr:
     986/     EDB : E3                  	db 227
     987/     EDC : 00                  	db 0
     988/     EDD : 04                  	db 4
     989/     EDE : FA                  	db 250
     990/     EDF : 00                  	db 0
     991/     EE0 : 01                  	db 1
     992/     EE1 : 00                  	db 0
     993/     EE2 : 00                  	db 0
     994/     EE3 : 00                  	db 0
     995/     EE4 : 01                  	db 1
     996/     EE5 :                     _allOnes:
     997/     EE5 : FF                  	db 255
     998/     EE6 : FF                  	db 255
     999/     EE7 : FF                  	db 255
    1000/     EE8 : FF                  	db 255
    1001/     EE9 : FF                  	db 255
    1002/     EEA : FF                  	db 255
    1003/     EEB :                     _tcppacketLoop:
    1004/     EEB : (MACRO)             	reserve 8; save room for local variables
    1005/     EF3 : (MACRO)             	pushr r7
    1006/     EF8 : (MACRO)             	reserve 8; save room for outgoing arguments
    1007/     F00 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1008/     F04 :                     ;word tcppacketLoop (word plen) {
    1009/     F04 :                     ;  if (plen==0) {
    1010/     F04 : (MACRO)             	jnzU2 r7,L85; NE 0
    1011/     F0C :                     ;    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1012/     F0C : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1013/     F14 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1014/     F17 : (MACRO)             	alu2I R10,R11,1,ani,ani
    1015/     F1F :                     	;removed ?	cpy2 R10,R11
    1016/     F1F : (MACRO)             	jnzU2 r10,L89; NE 0
    1017/     F27 : (MACRO)             	alu2I R11,R11,4,ani,ani
    1018/     F2F :                     	;removed ?	cpy2 R11,R11
    1019/     F2F : (MACRO)             	jzU2 r11,L87; EQ 0
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 18 - 4/25/2013 10:34:17


    1020/     F37 :                     L89:
    1021/     F37 : (MACRO)             	ld2 R11,'D',(_delaycnt),0 ;reg:INDIRI2(addr)
    1022/     F41 : (MACRO)             	jnzU2 r11,L87; NE 0
    1023/     F49 : (MACRO)             	Ccall _isLinkUp
    1024/     F4C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1025/     F50 : (MACRO)             	jzU2 r11,L87; EQ 0
    1026/     F58 :                     ;      client_arp_whohas(gwip);
    1027/     F58 : (MACRO)             	ldaD R12,_gwip; reg:acon
    1028/     F5E : (MACRO)             	Ccall _client_arp_whohas
    1029/     F61 :                     L87:
    1030/     F61 :                     ;    delaycnt++;
    1031/     F61 : (MACRO)             	ld2 R11,'D',(_delaycnt),0 ;reg:INDIRI2(addr)
    1032/     F6B : (MACRO)             	incm R11,1
    1033/     F6C : (MACRO)             	st2 R11,'D',(_delaycnt),0; ASGNI2(addr,reg)*;
    1034/     F77 :                     ;    if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1035/     F77 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1036/     F7F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1037/     F82 : (MACRO)             	jneU2I r11,1,L90; NE
    1038/     F8E : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1039/     F96 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1040/     F99 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1041/     FA1 :                     	;removed ?	cpy2 R11,R11
    1042/     FA1 : (MACRO)             	jzU2 r11,L90; EQ 0
    1043/     FA9 :                     ;      tcp_client_state = 2;
    1044/     FA9 : (MACRO)             	ldaD R11,2; reg:acon
    1045/     FAF : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1046/     FB7 :                     ;      tcpclient_src_port_l++; // allocate a new port
    1047/     FB7 : (MACRO)             	ldaD R11,_tcpclient_src_port_l; reg:acon
    1048/     FBD : (MACRO)             	ld1 R10,'D',(_tcpclient_src_port_l),0
    1049/     FC5 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1050/     FC8 : (MACRO)             	incm R10,1
    1051/     FC9 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1052/     FCB :                     ;      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1053/     FCB : (MACRO)             	ld1 R11,'D',(_tcp_fd),0
    1054/     FD3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1055/     FD6 : (MACRO)             	shl2I R11,5
    1056/     FF4 : (MACRO)             	ld1 R10,'D',(_tcpclient_src_port_l),0
    1057/     FFC : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1058/     FFF : (MACRO)             	alu2I R10,R10,31,ani,ani
    1059/    1007 :                     	;removed ?	cpy2 R10,R10
    1060/    1007 : (MACRO)             	alu2 R11,R11,R10,or,or
    1061/    1013 : (MACRO)             	cpy1 R12,R11
    1062/    1015 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1063/    1018 : (MACRO)             	ld1 R13,'D',(_tcp_client_port_h),0
    1064/    1020 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1065/    1023 : (MACRO)             	ld1 R11,'D',(_tcp_client_port_l),0
    1066/    102B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1067/    102E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1068/    103B : (MACRO)             	Ccall _client_syn
    1069/    103E :                     ;    }
    1070/    103E :                     L90:
    1071/    103E :                     ;    return 0;
    1072/    103E : (MACRO)             	ld2z R15
    1073/    1042 : C0 18 3A            	lbr L84
    1074/    1045 :                     L85:
    1075/    1045 :                     ;  if (eth_type_is_arp_and_my_ip(plen)) {
    1076/    1045 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1077/    1049 : (MACRO)             	Ccall _eth_type_is_arp_and_my_ip
    1078/    104C : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1079/    1050 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 19 - 4/25/2013 10:34:17


    1080/    1053 : (MACRO)             	jzU2 r11,L92; EQ 0
    1081/    105B :                     ;    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1082/    105B : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1083/    1063 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1084/    1066 : (MACRO)             	jneU2I r11,1,L94; NE
    1085/    1072 :                     ;        make_arp_answer_from_request();
    1086/    1072 : (MACRO)             	Ccall _make_arp_answer_from_request
    1087/    1075 :                     ;    }
    1088/    1075 :                     L94:
    1089/    1075 :                     ;    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac()){
    1090/    1075 : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1091/    107D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1092/    1080 : (MACRO)             	alu2I R11,R11,8,ani,ani
    1093/    1088 :                     	;removed ?	cpy2 R11,R11
    1094/    1088 : (MACRO)             	jzU2 r11,L97; EQ 0
    1095/    1090 : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1096/    1098 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1097/    109B : (MACRO)             	jneU2I r11,2,L97; NE
    1098/    10A7 : (MACRO)             	Ccall _client_store_gw_mac
    1099/    10AA : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1100/    10AE : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1101/    10B1 : (MACRO)             	jzU2 r11,L97; EQ 0
    1102/    10B9 :                     ;		waitgwmac = WGW_HAVE_GW_MAC;
    1103/    10B9 : (MACRO)             	ldaD R11,2; reg:acon
    1104/    10BF : (MACRO)             	st1 R11,'D',(_waitgwmac),0; ASGNU1
    1105/    10C7 :                     ;	}
    1106/    10C7 :                     L97:
    1107/    10C7 :                     ;    return 0;
    1108/    10C7 : (MACRO)             	ld2z R15
    1109/    10CB : C0 18 3A            	lbr L84
    1110/    10CE :                     L92:
    1111/    10CE :                     ;  if (eth_type_is_ip_and_my_ip(plen)==0){
    1112/    10CE : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1113/    10D2 : (MACRO)             	Ccall _eth_type_is_ip_and_my_ip
    1114/    10D5 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1115/    10D9 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1116/    10DC : (MACRO)             	jnzU2 r11,L100; NE 0
    1117/    10E4 :                     ;    return 0;
    1118/    10E4 : (MACRO)             	ld2z R15
    1119/    10E8 : C0 18 3A            	lbr L84
    1120/    10EB :                     L100:
    1121/    10EB :                     ;  if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V) {
    1122/    10EB : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1123/    10F3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1124/    10F6 : (MACRO)             	jneU2I r11,1,L102; NE
    1125/    1102 : (MACRO)             	ld1 R11,'D',(_buffer+34),0
    1126/    110A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1127/    110D : (MACRO)             	jneU2I r11,8,L102; NE
    1128/    1119 :                     ;    if (icmp_cb)
    1129/    1119 : (MACRO)             	ld2 R11,'D',(_icmp_cb),0;reg:  INDIRP2(addr)
    1130/    1123 : (MACRO)             	jeqU2I r11,0,L106;EQU2(reg,con)
    1131/    112F :                     ;      (*icmp_cb)(&(gPB[IP_SRC_P]));
    1132/    112F : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    1133/    1135 : (MACRO)             	ld2 R11,'D',(_icmp_cb),0;reg:  INDIRP2(addr)
    1134/    113F : (MACRO)             	Ccall r11
    1135/    1142 :                     L106:
    1136/    1142 :                     ;    make_echo_reply_from_request(plen);
    1137/    1142 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    1138/    1146 : (MACRO)             	Ccall _make_echo_reply_from_request
    1139/    1149 :                     ;    return 0;
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 20 - 4/25/2013 10:34:17


    1140/    1149 : (MACRO)             	ld2z R15
    1141/    114D : C0 18 3A            	lbr L84
    1142/    1150 :                     L102:
    1143/    1150 :                     ;  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    1144/    1150 : (MACRO)             	jcI2I r7,54,lbdf,L109; GE is flipped test from LT
    1145/    1161 : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1146/    1169 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1147/    116C : (MACRO)             	jeqU2I r11,6,L109;EQI2(reg,con)
    1148/    1178 :                     ;    return 0;
    1149/    1178 : (MACRO)             	ld2z R15
    1150/    117C : C0 18 3A            	lbr L84
    1151/    117F :                     L109:
    1152/    117F :                     ;  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
    1153/    117F : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    1154/    1187 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1155/    118A : (MACRO)             	jneU2I r11,11,L112; NE
    1156/    1196 :                     ;    if (check_ip_message_is_from(hisip)==0)
    1157/    1196 : (MACRO)             	ldaD R12,_hisip; reg:acon
    1158/    119C : (MACRO)             	Ccall _check_ip_message_is_from
    1159/    119F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1160/    11A3 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1161/    11A6 : (MACRO)             	jnzU2 r11,L115; NE 0
    1162/    11AE :                     ;      return 0;
    1163/    11AE : (MACRO)             	ld2z R15
    1164/    11B2 : C0 18 3A            	lbr L84
    1165/    11B5 :                     L115:
    1166/    11B5 :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) {
    1167/    11B5 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1168/    11BD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1169/    11C0 : (MACRO)             	alu2I R11,R11,4,ani,ani
    1170/    11C8 :                     	;removed ?	cpy2 R11,R11
    1171/    11C8 : (MACRO)             	jzU2 r11,L117; EQ 0
    1172/    11D0 :                     ;      if (client_tcp_result_cb)
    1173/    11D0 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1174/    11DA : (MACRO)             	jeqU2I r11,0,L120;EQU2(reg,con)
    1175/    11E6 :                     ;(*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1176/    11E6 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    1177/    11EE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1178/    11F1 : (MACRO)             	shrI2I R11,5
    1179/    1219 : (MACRO)             	alu2I R11,R11,7,ani,ani
    1180/    1221 :                     	;removed ?	cpy2 R11,R11
    1181/    1221 : (MACRO)             	cpy1 R12,R11
    1182/    1223 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1183/    1226 : (MACRO)             	ldaD R13,3; reg:acon
    1184/    122C : (MACRO)             	ld2z R11
    1185/    1230 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1186/    123D : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1187/    124A : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1188/    1254 : (MACRO)             	Ccall r11
    1189/    1257 :                     L120:
    1190/    1257 :                     ;      tcp_client_state = 5;
    1191/    1257 : (MACRO)             	ldaD R11,5; reg:acon
    1192/    125D : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1193/    1265 :                     ;      return 0;
    1194/    1265 : (MACRO)             	ld2z R15
    1195/    1269 : C0 18 3A            	lbr L84
    1196/    126C :                     L117:
    1197/    126C :                     ;    len = get_tcp_data_len();
    1198/    126C : (MACRO)             	Ccall _get_tcp_data_len;CALLU2(ar)*
    1199/    126F : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 21 - 4/25/2013 10:34:17


    1200/    1273 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1201/    1280 :                     ;    if (tcp_client_state==2) {
    1202/    1280 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1203/    1288 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1204/    128B : (MACRO)             	jneU2I r11,2,L123; NE
    1205/    1297 :                     ;      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)) {
    1206/    1297 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1207/    129F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1208/    12A2 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1209/    12AA :                     	;removed ?	cpy2 R11,R11
    1210/    12AA : (MACRO)             	jzU2 r11,L125; EQ 0
    1211/    12B2 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1212/    12BA : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1213/    12BD : (MACRO)             	alu2I R11,R11,16,ani,ani
    1214/    12C5 :                     	;removed ?	cpy2 R11,R11
    1215/    12C5 : (MACRO)             	jzU2 r11,L125; EQ 0
    1216/    12CD :                     ;        make_tcp_ack_from_any(0,0);
    1217/    12CD : (MACRO)             	ld2z R11
    1218/    12D1 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1219/    12D5 : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1220/    12D9 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1221/    12DC :                     ;        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1222/    12DC : (MACRO)             	ldaD R11,24; reg:acon
    1223/    12E2 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1224/    12EA :                     ;        if (client_tcp_datafill_cb)
    1225/    12EA : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0;reg:  INDIRP2(addr)
    1226/    12F4 : (MACRO)             	jeqU2I r11,0,L130;EQU2(reg,con)
    1227/    1300 :                     ;          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    1228/    1300 : (MACRO)             	ld1 R11,'D',(_buffer+35),0
    1229/    1308 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1230/    130B : (MACRO)             	shrI2I R11,5
    1231/    1333 : (MACRO)             	alu2I R11,R11,7,ani,ani
    1232/    133B :                     	;removed ?	cpy2 R11,R11
    1233/    133B : (MACRO)             	cpy1 R12,R11
    1234/    133D : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1235/    1340 : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0;reg:  INDIRP2(addr)
    1236/    134A : (MACRO)             	Ccall r11;CALLU2(ar)*
    1237/    134D : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1238/    1351 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1239/    135E : C0 13 72            	lbr L131
    1240/    1361 :                     L130:
    1241/    1361 :                     ;          len = 0;
    1242/    1361 : (MACRO)             	ld2z R11
    1243/    1365 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1244/    1372 :                     L131:
    1245/    1372 :                     ;        tcp_client_state = 3;
    1246/    1372 : (MACRO)             	ldaD R11,3; reg:acon
    1247/    1378 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1248/    1380 :                     ;        make_tcp_ack_with_data_noflags(len);
    1249/    1380 : (MACRO)             	ld2 R12,'O',sp,(-4+20); reg:INDIRU2(addr)
    1250/    138C : (MACRO)             	Ccall _make_tcp_ack_with_data_noflags
    1251/    138F :                     ;      }else{
    1252/    138F : C0 13 FF            	lbr L126
    1253/    1392 :                     L125:
    1254/    1392 :                     ;        tcp_client_state = 1; // retry
    1255/    1392 : (MACRO)             	ldaD R11,1; reg:acon
    1256/    1398 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1257/    13A0 :                     ;        len++;
    1258/    13A0 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1259/    13AC : (MACRO)             	incm R11,1
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 22 - 4/25/2013 10:34:17


    1260/    13AD : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1261/    13BA :                     ;        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1262/    13BA : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1263/    13C2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1264/    13C5 : (MACRO)             	alu2I R11,R11,16,ani,ani
    1265/    13CD :                     	;removed ?	cpy2 R11,R11
    1266/    13CD : (MACRO)             	jzU2 r11,L133; EQ 0
    1267/    13D5 :                     ;          len = 0;
    1268/    13D5 : (MACRO)             	ld2z R11
    1269/    13D9 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1270/    13E6 :                     L133:
    1271/    13E6 :                     ;        make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    1272/    13E6 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1273/    13F2 : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1274/    13F6 : (MACRO)             	ldaD R13,4; reg:acon
    1275/    13FC : (MACRO)             	Ccall _make_tcp_ack_from_any
    1276/    13FF :                     ;      }
    1277/    13FF :                     L126:
    1278/    13FF :                     ;      return 0;
    1279/    13FF : (MACRO)             	ld2z R15
    1280/    1403 : C0 18 3A            	lbr L84
    1281/    1406 :                     L123:
    1282/    1406 :                     ;    if (tcp_client_state==3 && len>0) {
    1283/    1406 : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1284/    140E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1285/    1411 : (MACRO)             	jneU2I r11,3,L136; NE
    1286/    141D : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1287/    1429 : (MACRO)             	jeqU2I r11,0,L136;EQU2(reg,con)
    1288/    1435 :                     ;      tcp_client_state = 4;
    1289/    1435 : (MACRO)             	ldaD R11,4; reg:acon
    1290/    143B : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1291/    1443 :                     ;      if (client_tcp_result_cb) {
    1292/    1443 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1293/    144D : (MACRO)             	jeqU2I r11,0,L138;EQU2(reg,con)
    1294/    1459 :                     ;        word tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    1295/    1459 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1296/    1461 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1297/    1464 : (MACRO)             	shrI2I R11,4
    1298/    1484 : (MACRO)             	shl2I R11,2
    1299/    1490 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    1300/    1498 : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)*
    1301/    14A5 :                     ;        if (tcpstart>plen-8)
    1302/    14A5 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1303/    14B1 : (MACRO)             	alu2I R10,R7,8,smi,smbi
    1304/    14B9 : (MACRO)             	jcU2 r10,r11,lbdf,L141 ;LE is flipped test & operands
    1305/    14C6 :                     ;          tcpstart = plen-8; // dummy but save
    1306/    14C6 : (MACRO)             	alu2I R11,R7,8,smi,smbi
    1307/    14CE : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)*
    1308/    14DB :                     L141:
    1309/    14DB :                     ;        save_len = len;
    1310/    14DB : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1311/    14E7 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
    1312/    14F4 :                     ;        if (tcpstart+len>plen)
    1313/    14F4 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1314/    1500 : (MACRO)             	ld2 R10,'O',sp,(-4+20); reg:INDIRU2(addr)
    1315/    150C : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDU2(r,r)
    1316/    1518 : (MACRO)             	jcU2 r7,r11,lbdf,L143 ;LE is flipped test & operands
    1317/    1525 :                     ;          save_len = plen-tcpstart;
    1318/    1525 : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1319/    1531 : (MACRO)             	alu2 R11,R7,R11,sm,smb
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 23 - 4/25/2013 10:34:17


    1320/    153D : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)*
    1321/    154A :                     L143:
    1322/    154A :                     ;        send_fin = (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1323/    154A : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    1324/    1552 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1325/    1555 : (MACRO)             	shrI2I R11,5
    1326/    157D : (MACRO)             	alu2I R11,R11,7,ani,ani
    1327/    1585 :                     	;removed ?	cpy2 R11,R11
    1328/    1585 : (MACRO)             	cpy1 R12,R11
    1329/    1587 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1330/    158A : (MACRO)             	ld2z R13
    1331/    158E : (MACRO)             	ld2 R11,'O',sp,(-9+20); reg:INDIRU2(addr)
    1332/    159A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1333/    15A7 : (MACRO)             	ld2 R11,'O',sp,(-6+20); reg:INDIRU2(addr)
    1334/    15B3 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1335/    15C0 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0;reg:  INDIRP2(addr)
    1336/    15CA : (MACRO)             	Ccall r11
    1337/    15CD : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1338/    15D1 : (MACRO)             	st1 R11,'O',sp,(-7+20); ASGNU1
    1339/    15DB :                     ;        if (send_fin) {
    1340/    15DB : (MACRO)             	ld1 R11,'O',sp,(-7+20)
    1341/    15E5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1342/    15E8 : (MACRO)             	jzU2 r11,L146; EQ 0
    1343/    15F0 :                     ;          make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1344/    15F0 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1345/    15FC : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1346/    1600 : (MACRO)             	ldaD R13,9; reg:acon
    1347/    1606 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1348/    1609 :                     ;          tcp_client_state = 5;
    1349/    1609 : (MACRO)             	ldaD R11,5; reg:acon
    1350/    160F : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1351/    1617 :                     ;          return 0;
    1352/    1617 : (MACRO)             	ld2z R15
    1353/    161B : C0 18 3A            	lbr L84
    1354/    161E :                     L146:
    1355/    161E :                     ;      }
    1356/    161E :                     L138:
    1357/    161E :                     ;    }
    1358/    161E :                     L136:
    1359/    161E :                     ;    if (tcp_client_state != 5) {
    1360/    161E : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1361/    1626 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1362/    1629 : (MACRO)             	jeqU2I r11,5,L148;EQI2(reg,con)
    1363/    1635 :                     ;      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    1364/    1635 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1365/    163D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1366/    1640 : (MACRO)             	alu2I R11,R11,1,ani,ani
    1367/    1648 :                     	;removed ?	cpy2 R11,R11
    1368/    1648 : (MACRO)             	jzU2 r11,L150; EQ 0
    1369/    1650 :                     ;        make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1370/    1650 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1371/    165C : (MACRO)             	incm R11,1
    1372/    165D : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1373/    1661 : (MACRO)             	ldaD R13,9; reg:acon
    1374/    1667 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1375/    166A :                     ;        tcp_client_state = 5; // connection terminated
    1376/    166A : (MACRO)             	ldaD R11,5; reg:acon
    1377/    1670 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1378/    1678 :                     ;      } else if (len>0)
    1379/    1678 : C0 16 AA            	lbr L151
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 24 - 4/25/2013 10:34:17


    1380/    167B :                     L150:
    1381/    167B : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1382/    1687 : (MACRO)             	jeqU2I r11,0,L153;EQU2(reg,con)
    1383/    1693 :                     ;        make_tcp_ack_from_any(len,0);
    1384/    1693 : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
    1385/    169F : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1386/    16A3 : (MACRO)             	ld2z R13
    1387/    16A7 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1388/    16AA :                     L153:
    1389/    16AA :                     L151:
    1390/    16AA :                     ;    }
    1391/    16AA :                     L148:
    1392/    16AA :                     ;    return 0;
    1393/    16AA : (MACRO)             	ld2z R15
    1394/    16AE : C0 18 3A            	lbr L84
    1395/    16B1 :                     L112:
    1396/    16B1 :                     ;  if (gPB[TCP_DST_PORT_H_P] == (hisport >> 8) &&
    1397/    16B1 : (MACRO)             	ld2 R11,'D',(_hisport),0; reg:INDIRU2(addr)
    1398/    16BB : (MACRO)             	ld1 R10,'D',(_buffer+36),0
    1399/    16C3 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1400/    16C6 : (MACRO)             	cpy2 R9,R11
    1401/    16CA : (MACRO)             	shrU2I R9,8
    1402/    16FA : (MACRO)             	jneU2 r10,r9,L155; NE
    1403/    170C : (MACRO)             	ld1 R10,'D',(_buffer+37),0
    1404/    1714 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1405/    1717 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1406/    171A : (MACRO)             	jneU2 r10,r11,L155; NE
    1407/    172C :                     ;      gPB[TCP_DST_PORT_L_P] == ((byte) hisport)) {
    1408/    172C :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    1409/    172C : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1410/    1734 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1411/    1737 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1412/    173F :                     	;removed ?	cpy2 R11,R11
    1413/    173F : (MACRO)             	jzU2 r11,L159; EQ 0
    1414/    1747 :                     ;      make_tcp_synack_from_syn();
    1415/    1747 : (MACRO)             	Ccall _make_tcp_synack_from_syn
    1416/    174A : C0 18 36            	lbr L160
    1417/    174D :                     L159:
    1418/    174D :                     ;    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
    1419/    174D : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1420/    1755 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1421/    1758 : (MACRO)             	alu2I R11,R11,16,ani,ani
    1422/    1760 :                     	;removed ?	cpy2 R11,R11
    1423/    1760 : (MACRO)             	jzU2 r11,L162; EQ 0
    1424/    1768 :                     ;      info_data_len = get_tcp_data_len();
    1425/    1768 : (MACRO)             	Ccall _get_tcp_data_len;CALLU2(ar)*
    1426/    176B : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    1427/    176F : (MACRO)             	st2 R11,'D',(_info_data_len),0; ASGNU2(addr,reg)*
    1428/    177A :                     ;      if (info_data_len > 0) {
    1429/    177A : (MACRO)             	ld2 R11,'D',(_info_data_len),0; reg:INDIRU2(addr)
    1430/    1784 : (MACRO)             	jeqU2I r11,0,L165;EQU2(reg,con)
    1431/    1790 :                     ;        len = TCP_DATA_START; // TCP_DATA_START is a formula
    1432/    1790 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1433/    1798 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1434/    179B : (MACRO)             	shrI2I R11,4
    1435/    17BB : (MACRO)             	shl2I R11,2
    1436/    17C7 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    1437/    17CF : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)*
    1438/    17DC :                     ;        if (len <= plen - 8)
    1439/    17DC : (MACRO)             	ld2 R11,'O',sp,(-4+20); reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 25 - 4/25/2013 10:34:17


    1440/    17E8 : (MACRO)             	alu2I R10,R7,8,smi,smbi
    1441/    17F0 : (MACRO)             	jcU2 r10,r11,lbnf,L166 ;GT same as LT but operands reversed
    1442/    17FD :                     ;          return len;
    1443/    17FD : (MACRO)             	ld2 R15,'O',sp,(-4+20); reg:INDIRU2(addr)
    1444/    1809 : C0 18 3A            	lbr L84
    1445/    180C :                     ;      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    1446/    180C :                     L165:
    1447/    180C : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1448/    1814 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1449/    1817 : (MACRO)             	alu2I R11,R11,1,ani,ani
    1450/    181F :                     	;removed ?	cpy2 R11,R11
    1451/    181F : (MACRO)             	jzU2 r11,L170; EQ 0
    1452/    1827 :                     ;        make_tcp_ack_from_any(0,0);
    1453/    1827 : (MACRO)             	ld2z R11
    1454/    182B : (MACRO)             	cpy2 R12,R11 ;LOADI2(reg)*
    1455/    182F : (MACRO)             	cpy2 R13,R11 ;LOADI2(reg)*
    1456/    1833 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1457/    1836 :                     L170:
    1458/    1836 :                     L166:
    1459/    1836 :                     ;    }
    1460/    1836 :                     L162:
    1461/    1836 :                     L160:
    1462/    1836 :                     ;  }
    1463/    1836 :                     L155:
    1464/    1836 :                     ;  return 0;
    1465/    1836 : (MACRO)             	ld2z R15
    1466/    183A :                     L84:
    1467/    183A : (MACRO)             	release 8; release room for outgoing arguments
    1468/    1842 : (MACRO)             	popr r7
    1469/    1846 : (MACRO)             	release 8; release room for local variables 
    1470/    184E : (MACRO)             	Cretn
    1471/    184F :                     
    1472/    184F :                     _step_seq:
    1473/    184F : (MACRO)             	reserve 0; save room for local variables
    1474/    184F : (MACRO)             	pushr r1
    1475/    1854 : (MACRO)             	pushr r7
    1476/    1859 : (MACRO)             	reserve 0; save room for outgoing arguments
    1477/    1859 :                     ; void step_seq(word rel_ack_num,byte cp_seq) {
    1478/    1859 :                     ;  i = 4;
    1479/    1859 : (MACRO)             	ldaD R7,4; reg:acon
    1480/    185F : C0 19 0C            	lbr L175
    1481/    1862 :                     L174:
    1482/    1862 :                     ;  while(i>0) {
    1483/    1862 :                     ;    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
    1484/    1862 : (MACRO)             	cpy1 R11,R7
    1485/    1864 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1486/    1867 : (MACRO)             	ld1 R11,'O',R11,(_buffer-1+38)
    1487/    1871 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1488/    1874 : (MACRO)             	alu2 R12,R11,R12,add,adc; ADDU2(r,r)
    1489/    1880 :                     ;    tseq = gPB[TCP_SEQACK_H_P+i-1];
    1490/    1880 : (MACRO)             	cpy1 R11,R7
    1491/    1882 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1492/    1885 : (MACRO)             	ld1 R1,'O',R11,(_buffer-1+42)
    1493/    188F :                     ;    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
    1494/    188F : (MACRO)             	cpy1 R11,R7
    1495/    1891 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1496/    1894 : (MACRO)             	cpy1 R10,R12;LOADU1(reg)
    1497/    1896 : (MACRO)             	st1 R10,'O',R11,(_buffer-1+42); ASGNU1
    1498/    18A0 :                     ;    if (cp_seq)
    1499/    18A0 : (MACRO)             	cpy1 R11,R13
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 26 - 4/25/2013 10:34:17


    1500/    18A2 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1501/    18A5 : (MACRO)             	jzU2 r11,L183; EQ 0
    1502/    18AD :                     ;      gPB[TCP_SEQ_H_P+i-1] = tseq;
    1503/    18AD : (MACRO)             	cpy1 R11,R7
    1504/    18AF : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1505/    18B2 : (MACRO)             	st1 R1,'O',R11,(_buffer-1+38); ASGNU1
    1506/    18BC : C0 18 D4            	lbr L184
    1507/    18BF :                     L183:
    1508/    18BF :                     ;      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
    1509/    18BF : (MACRO)             	cpy1 R11,R7
    1510/    18C1 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1511/    18C4 : (MACRO)             	ldaD R10,0; reg:acon
    1512/    18CA : (MACRO)             	st1 R10,'O',R11,(_buffer-1+38); ASGNU1
    1513/    18D4 :                     L184:
    1514/    18D4 :                     ;    rel_ack_num = rel_ack_num>>8;
    1515/    18D4 : (MACRO)             	shrU2I R12,8
    1516/    1904 :                     ;    i--;
    1517/    1904 : (MACRO)             	cpy1 R11,R7
    1518/    1906 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1519/    1909 : (MACRO)             	decm R11,1
    1520/    190A : (MACRO)             	cpy1 R7,R11;LOADU1(reg)
    1521/    190C :                     ;  }
    1522/    190C :                     L175:
    1523/    190C :                     ;  while(i>0) {
    1524/    190C : (MACRO)             	cpy1 R11,R7
    1525/    190E : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1526/    1911 : (MACRO)             	jnI2I r11,0,lbnf,L174; GT reverse  the subtraction
    1527/    1922 :                     ;}
    1528/    1922 :                     L173:
    1529/    1922 : (MACRO)             	release 0; release room for outgoing arguments
    1530/    1922 : (MACRO)             	popr r7
    1531/    1926 : (MACRO)             	popr r1
    1532/    192A : (MACRO)             	release 0; release room for local variables 
    1533/    192A : (MACRO)             	Cretn
    1534/    192B :                     
    1535/    192B :                     _make_tcphead:
    1536/    192B : (MACRO)             	reserve 6
    1537/    1931 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    1538/    193E : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    1539/    194B : (MACRO)             	ld2 R11,'O',sp,(2+8) ;reg:INDIRI2(addr)
    1540/    1957 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
    1541/    1961 :                     ; void make_tcphead(word rel_ack_num,byte cp_seq) {
    1542/    1961 :                     ;  byte i = gPB[TCP_DST_PORT_H_P];
    1543/    1961 : (MACRO)             	ldaD R11,_buffer+36; reg:acon
    1544/    1967 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1545/    1969 : (MACRO)             	st1 R11,'O',sp,(-4+8); ASGNU1
    1546/    1973 :                     ;  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
    1547/    1973 : (MACRO)             	ldaD R11,_buffer+34; reg:acon
    1548/    1979 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1549/    197B : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    1550/    1983 :                     ;  gPB[TCP_SRC_PORT_H_P] = i;
    1551/    1983 : (MACRO)             	ld1 R11,'O',sp,(-4+8)
    1552/    198D : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    1553/    1995 :                     ;  j = gPB[TCP_DST_PORT_L_P];
    1554/    1995 : (MACRO)             	ldaD R11,_buffer+37; reg:acon
    1555/    199B : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1556/    199D : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
    1557/    19A7 :                     ;  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
    1558/    19A7 : (MACRO)             	ldaD R11,_buffer+35; reg:acon
    1559/    19AD : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 27 - 4/25/2013 10:34:17


    1560/    19AF : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    1561/    19B7 :                     ;  gPB[TCP_SRC_PORT_L_P] = j;
    1562/    19B7 : (MACRO)             	ld1 R11,'O',sp,(-3+8)
    1563/    19C1 : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
    1564/    19C9 :                     ;  step_seq(rel_ack_num,cp_seq);
    1565/    19C9 : (MACRO)             	ld2 R12,'O',sp,(0+8); reg:INDIRU2(addr)
    1566/    19D5 : (MACRO)             	ld1 R13,'O',sp,(2+8)
    1567/    19DF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1568/    19E2 : (MACRO)             	Ccall _step_seq
    1569/    19E5 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    1570/    19E5 : (MACRO)             	ldaD R11,0; reg:acon
    1571/    19EB : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    1572/    19F3 :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    1573/    19F3 : (MACRO)             	ldaD R11,0; reg:acon
    1574/    19F9 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    1575/    1A01 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x50;
    1576/    1A01 : (MACRO)             	ldaD R11,80; reg:acon
    1577/    1A07 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    1578/    1A0F :                     ;}
    1579/    1A0F :                     L189:
    1580/    1A0F : (MACRO)             	release 6
    1581/    1A15 : (MACRO)             	Cretn
    1582/    1A16 :                     
    1583/    1A16 :                     _make_tcp_synack_from_syn:
    1584/    1A16 : (MACRO)             	reserve 8
    1585/    1A1E :                     ; void make_tcp_synack_from_syn() {
    1586/    1A1E :                     ;  gPB[IP_TOTLEN_H_P] = 0;
    1587/    1A1E : (MACRO)             	ldaD R11,0; reg:acon
    1588/    1A24 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1589/    1A2C :                     ;  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    1590/    1A2C : (MACRO)             	ldaD R11,44; reg:acon
    1591/    1A32 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1592/    1A3A :                     ;  make_eth_ip();
    1593/    1A3A : (MACRO)             	Ccall _make_eth_ip
    1594/    1A3D :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    1595/    1A3D : (MACRO)             	ldaD R11,18; reg:acon
    1596/    1A43 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1597/    1A4B :                     ;  make_tcphead(1,0);
    1598/    1A4B : (MACRO)             	ldaD R12,1; reg:acon
    1599/    1A51 : (MACRO)             	ld2z R13
    1600/    1A55 : (MACRO)             	Ccall _make_tcphead
    1601/    1A58 :                     ;  gPB[TCP_SEQ_H_P+0] = 0;
    1602/    1A58 : (MACRO)             	ldaD R11,0; reg:acon
    1603/    1A5E : (MACRO)             	st1 R11,'D',(_buffer+38),0; ASGNU1
    1604/    1A66 :                     ;  gPB[TCP_SEQ_H_P+1] = 0;
    1605/    1A66 : (MACRO)             	ldaD R11,0; reg:acon
    1606/    1A6C : (MACRO)             	st1 R11,'D',(_buffer+39),0; ASGNU1
    1607/    1A74 :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    1608/    1A74 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    1609/    1A7A : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    1610/    1A7C : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    1611/    1A84 :                     ;  gPB[TCP_SEQ_H_P+3] = 0;
    1612/    1A84 : (MACRO)             	ldaD R11,0; reg:acon
    1613/    1A8A : (MACRO)             	st1 R11,'D',(_buffer+41),0; ASGNU1
    1614/    1A92 :                     ;  seqnum += 3;
    1615/    1A92 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    1616/    1A98 : (MACRO)             	ld1 R10,'D',(_seqnum),0
    1617/    1AA0 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1618/    1AA3 : (MACRO)             	incm R10,3
    1619/    1AA6 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 28 - 4/25/2013 10:34:17


    1620/    1AA8 :                     ;  gPB[TCP_OPTIONS_P] = 2;
    1621/    1AA8 : (MACRO)             	ldaD R11,2; reg:acon
    1622/    1AAE : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    1623/    1AB6 :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    1624/    1AB6 : (MACRO)             	ldaD R11,4; reg:acon
    1625/    1ABC : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    1626/    1AC4 :                     ;  gPB[TCP_OPTIONS_P+2] = 0x05;
    1627/    1AC4 : (MACRO)             	ldaD R11,5; reg:acon
    1628/    1ACA : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    1629/    1AD2 :                     ;  gPB[TCP_OPTIONS_P+3] = 0x0;
    1630/    1AD2 : (MACRO)             	ldaD R11,0; reg:acon
    1631/    1AD8 : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    1632/    1AE0 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60;
    1633/    1AE0 : (MACRO)             	ldaD R11,96; reg:acon
    1634/    1AE6 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    1635/    1AEE :                     ;  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    1636/    1AEE : (MACRO)             	ldaD R11,5; reg:acon
    1637/    1AF4 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    1638/    1AFC :                     ;  gPB[TCP_WIN_SIZE+1] = 0x78;
    1639/    1AFC : (MACRO)             	ldaD R11,120; reg:acon
    1640/    1B02 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    1641/    1B0A :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    1642/    1B0A : (MACRO)             	ldaD R12,50; reg:acon
    1643/    1B10 : (MACRO)             	ldaD R13,26; reg:acon
    1644/    1B16 : (MACRO)             	ldaD R11,32; reg:acon
    1645/    1B1C : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1646/    1B29 : (MACRO)             	ldaD R11,2; reg:acon
    1647/    1B2F : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1648/    1B3C : (MACRO)             	Ccall _fill_checksum
    1649/    1B3F :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    1650/    1B3F : (MACRO)             	ldaD R12,58; reg:acon
    1651/    1B45 : (MACRO)             	Ccall _encpacketSend
    1652/    1B48 :                     ;}
    1653/    1B48 :                     L201:
    1654/    1B48 : (MACRO)             	release 8
    1655/    1B50 : (MACRO)             	Cretn
    1656/    1B51 :                     
    1657/    1B51 :                     _eth_type_is_ip_and_my_ip:
    1658/    1B51 : (MACRO)             	reserve 0; save room for local variables
    1659/    1B51 : (MACRO)             	pushr r7
    1660/    1B56 : (MACRO)             	reserve 6; save room for outgoing arguments
    1661/    1B5C : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1662/    1B69 :                     ; byte eth_type_is_ip_and_my_ip(word len) {
    1663/    1B69 :                     ;  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    1664/    1B69 : (MACRO)             	ld2 R11,'O',sp,(0+10); reg:INDIRU2(addr)
    1665/    1B75 : (MACRO)             	jcU2I r11,42,lbnf,L222 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1666/    1B7E : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    1667/    1B86 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1668/    1B89 : (MACRO)             	jneU2I r11,8,L222; NE
    1669/    1B95 : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    1670/    1B9D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1671/    1BA0 : (MACRO)             	jnzU2 r11,L222; NE 0
    1672/    1BA8 : (MACRO)             	ld1 R11,'D',(_buffer+14),0
    1673/    1BB0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1674/    1BB3 : (MACRO)             	jneU2I r11,69,L222; NE
    1675/    1BBF : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    1676/    1BC5 : (MACRO)             	ldaD R13,_myip; reg:acon
    1677/    1BCB : (MACRO)             	ldaD R11,4; reg:acon
    1678/    1BD1 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1679/    1BDE : (MACRO)             	Ccall _memcmp
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 29 - 4/25/2013 10:34:17


    1680/    1BE1 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1681/    1BE5 : (MACRO)             	jnzU2 r11,L222; NE 0
    1682/    1BED : (MACRO)             	ldaD R7,1; reg:acon
    1683/    1BF3 : C0 1B FA            	lbr L223
    1684/    1BF6 :                     L222:
    1685/    1BF6 : (MACRO)             	ld2z R7
    1686/    1BFA :                     L223:
    1687/    1BFA : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1688/    1BFE : (MACRO)             	cpy1 R15,R11
    1689/    1C00 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1690/    1C03 :                     L216:
    1691/    1C03 : (MACRO)             	release 6; release room for outgoing arguments
    1692/    1C09 : (MACRO)             	popr r7
    1693/    1C0D : (MACRO)             	release 0; release room for local variables 
    1694/    1C0D : (MACRO)             	Cretn
    1695/    1C0E :                     
    1696/    1C0E :                     _eth_type_is_arp_and_my_ip:
    1697/    1C0E : (MACRO)             	reserve 0; save room for local variables
    1698/    1C0E : (MACRO)             	pushr r7
    1699/    1C13 : (MACRO)             	reserve 6; save room for outgoing arguments
    1700/    1C19 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1701/    1C26 :                     ; byte eth_type_is_arp_and_my_ip(word len) {
    1702/    1C26 :                     ;  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    1703/    1C26 : (MACRO)             	ld2 R11,'O',sp,(0+10); reg:INDIRU2(addr)
    1704/    1C32 : (MACRO)             	jcU2I r11,41,lbnf,L229 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    1705/    1C3B : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    1706/    1C43 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1707/    1C46 : (MACRO)             	jneU2I r11,8,L229; NE
    1708/    1C52 : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    1709/    1C5A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1710/    1C5D : (MACRO)             	jneU2I r11,6,L229; NE
    1711/    1C69 : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    1712/    1C6F : (MACRO)             	ldaD R13,_myip; reg:acon
    1713/    1C75 : (MACRO)             	ldaD R11,4; reg:acon
    1714/    1C7B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1715/    1C88 : (MACRO)             	Ccall _memcmp
    1716/    1C8B : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1717/    1C8F : (MACRO)             	jnzU2 r11,L229; NE 0
    1718/    1C97 : (MACRO)             	ldaD R7,1; reg:acon
    1719/    1C9D : C0 1C A4            	lbr L230
    1720/    1CA0 :                     L229:
    1721/    1CA0 : (MACRO)             	ld2z R7
    1722/    1CA4 :                     L230:
    1723/    1CA4 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1724/    1CA8 : (MACRO)             	cpy1 R15,R11
    1725/    1CAA : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1726/    1CAD :                     L224:
    1727/    1CAD : (MACRO)             	release 6; release room for outgoing arguments
    1728/    1CB3 : (MACRO)             	popr r7
    1729/    1CB7 : (MACRO)             	release 0; release room for local variables 
    1730/    1CB7 : (MACRO)             	Cretn
    1731/    1CB8 :                     
    1732/    1CB8 :                     _make_arp_answer_from_request:
    1733/    1CB8 : (MACRO)             	reserve 4
    1734/    1CBC :                     ; void make_arp_answer_from_request() {
    1735/    1CBC :                     ;  setMACs(gPB + ETH_SRC_MAC);
    1736/    1CBC : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    1737/    1CC2 : (MACRO)             	Ccall _setMACs
    1738/    1CC5 :                     ;  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1739/    1CC5 : (MACRO)             	ldaD R11,0; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 30 - 4/25/2013 10:34:17


    1740/    1CCB : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
    1741/    1CD3 :                     ;  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    1742/    1CD3 : (MACRO)             	ldaD R11,2; reg:acon
    1743/    1CD9 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    1744/    1CE1 :                     ;  copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1745/    1CE1 : (MACRO)             	ldaD R12,_buffer+32; reg:acon
    1746/    1CE7 : (MACRO)             	ldaD R13,_buffer+22; reg:acon
    1747/    1CED : (MACRO)             	Ccall _copyMac
    1748/    1CF0 :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    1749/    1CF0 : (MACRO)             	ldaD R12,_buffer+22; reg:acon
    1750/    1CF6 : (MACRO)             	ldaD R13,_mymac; reg:acon
    1751/    1CFC : (MACRO)             	Ccall _copyMac
    1752/    1CFF :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1753/    1CFF : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    1754/    1D05 : (MACRO)             	ldaD R13,_buffer+28; reg:acon
    1755/    1D0B : (MACRO)             	Ccall _copyIp
    1756/    1D0E :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    1757/    1D0E : (MACRO)             	ldaD R12,_buffer+28; reg:acon
    1758/    1D14 : (MACRO)             	ldaD R13,_myip; reg:acon
    1759/    1D1A : (MACRO)             	Ccall _copyIp
    1760/    1D1D :                     ;  encpacketSend(42);
    1761/    1D1D : (MACRO)             	ldaD R12,42; reg:acon
    1762/    1D23 : (MACRO)             	Ccall _encpacketSend
    1763/    1D26 :                     ;}
    1764/    1D26 :                     L231:
    1765/    1D26 : (MACRO)             	release 4
    1766/    1D2A : (MACRO)             	Cretn
    1767/    1D2B :                     
    1768/    1D2B :                     _make_echo_reply_from_request:
    1769/    1D2B : (MACRO)             	reserve 4
    1770/    1D2F : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1771/    1D3C :                     ; void make_echo_reply_from_request(word len) {
    1772/    1D3C :                     ;  make_eth_ip();
    1773/    1D3C : (MACRO)             	Ccall _make_eth_ip
    1774/    1D3F :                     ;  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1775/    1D3F : (MACRO)             	ldaD R11,0; reg:acon
    1776/    1D45 : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    1777/    1D4D :                     ;  if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1778/    1D4D : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    1779/    1D55 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1780/    1D58 : (MACRO)             	jnI2I r11,247,lbdf,L243 ;LEI2 247 11 L243; LE is flipped test & subtraction
    1781/    1D69 :                     ;      gPB[ICMP_CHECKSUM_P+1]++;
    1782/    1D69 : (MACRO)             	ldaD R11,_buffer+37; reg:acon
    1783/    1D6F : (MACRO)             	ld1 R10,'D',(_buffer+37),0
    1784/    1D77 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1785/    1D7A : (MACRO)             	incm R10,1
    1786/    1D7B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1787/    1D7D :                     L243:
    1788/    1D7D :                     ;  gPB[ICMP_CHECKSUM_P] += 0x08;
    1789/    1D7D : (MACRO)             	ldaD R11,_buffer+36; reg:acon
    1790/    1D83 : (MACRO)             	ld1 R10,'D',(_buffer+36),0
    1791/    1D8B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1792/    1D8E : (MACRO)             	ldA2 R10,'O',R10,(8); reg:addr
    1793/    1D96 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1794/    1D98 :                     ;  encpacketSend(len);
    1795/    1D98 : (MACRO)             	ld2 R12,'O',sp,(0+6); reg:INDIRU2(addr)
    1796/    1DA4 : (MACRO)             	Ccall _encpacketSend
    1797/    1DA7 :                     ;}
    1798/    1DA7 :                     L241:
    1799/    1DA7 : (MACRO)             	release 4
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 31 - 4/25/2013 10:34:17


    1800/    1DAB : (MACRO)             	Cretn
    1801/    1DAC :                     
    1802/    1DAC :                     _make_tcp_ack_from_any:
    1803/    1DAC : (MACRO)             	reserve 0; save room for local variables
    1804/    1DAC : (MACRO)             	pushr r7
    1805/    1DB1 : (MACRO)             	reserve 8; save room for outgoing arguments
    1806/    1DB9 : (MACRO)             	st2 r12,'O',sp,(12); flag1 
    1807/    1DC6 : (MACRO)             	st2 r13,'O',sp,(14); flag1 
    1808/    1DD3 : (MACRO)             	ld2 R11,'O',sp,(2+12) ;reg:INDIRI2(addr)
    1809/    1DDF : (MACRO)             	st1 R11,'O',sp,(2+12); ASGNU1
    1810/    1DE9 :                     ; void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
    1811/    1DE9 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
    1812/    1DE9 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    1813/    1DF3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1814/    1DF6 : (MACRO)             	alu2I R11,R11,16,ori,ori ;removed copy
    1815/    1DFE : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1816/    1E06 :                     ;  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
    1817/    1E06 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    1818/    1E10 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1819/    1E13 : (MACRO)             	jeqU2I r11,4,L250;EQI2(reg,con)
    1820/    1E1F : (MACRO)             	ld2 R11,'O',sp,(0+12) ;reg:INDIRI2(addr)
    1821/    1E2B : (MACRO)             	jnzU2 r11,L250; NE 0
    1822/    1E33 :                     ;    datlentoack = 1;
    1823/    1E33 : (MACRO)             	ldaD R11,1; reg:acon
    1824/    1E39 : (MACRO)             	st2 R11,'O',sp,(0+12); ASGNI2(addr,reg)*;
    1825/    1E46 :                     L250:
    1826/    1E46 :                     ;  make_tcphead(datlentoack,1); // no options
    1827/    1E46 : (MACRO)             	ld2 R11,'O',sp,(0+12) ;reg:INDIRI2(addr)
    1828/    1E52 : (MACRO)             	cpy2 R12,R11 ;LOADU2(reg)*
    1829/    1E56 : (MACRO)             	ldaD R13,1; reg:acon
    1830/    1E5C : (MACRO)             	Ccall _make_tcphead
    1831/    1E5F :                     ;  j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
    1832/    1E5F : (MACRO)             	ldaD R7,40; reg:acon
    1833/    1E65 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    1834/    1E65 : (MACRO)             	cpy2 R11,R7
    1835/    1E69 : (MACRO)             	shrU2I R11,8
    1836/    1E99 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1837/    1EA1 :                     ;  gPB[IP_TOTLEN_L_P] = j;
    1838/    1EA1 : (MACRO)             	cpy1 R11,R7;LOADU1(reg)
    1839/    1EA3 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1840/    1EAB :                     ;  make_eth_ip();
    1841/    1EAB : (MACRO)             	Ccall _make_eth_ip
    1842/    1EAE :                     ;  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
    1843/    1EAE : (MACRO)             	ldaD R11,4; reg:acon
    1844/    1EB4 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    1845/    1EBC :                     ;  gPB[TCP_WIN_SIZE+1] = 0;
    1846/    1EBC : (MACRO)             	ldaD R11,0; reg:acon
    1847/    1EC2 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    1848/    1ECA :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
    1849/    1ECA : (MACRO)             	ldaD R12,50; reg:acon
    1850/    1ED0 : (MACRO)             	ldaD R13,26; reg:acon
    1851/    1ED6 : (MACRO)             	ldaD R11,28; reg:acon
    1852/    1EDC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1853/    1EE9 : (MACRO)             	ldaD R11,2; reg:acon
    1854/    1EEF : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1855/    1EFC : (MACRO)             	Ccall _fill_checksum
    1856/    1EFF :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
    1857/    1EFF : (MACRO)             	ldaD R12,54; reg:acon
    1858/    1F05 : (MACRO)             	Ccall _encpacketSend
    1859/    1F08 :                     ;}
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 32 - 4/25/2013 10:34:17


    1860/    1F08 :                     L248:
    1861/    1F08 : (MACRO)             	release 8; release room for outgoing arguments
    1862/    1F10 : (MACRO)             	popr r7
    1863/    1F14 : (MACRO)             	release 0; release room for local variables 
    1864/    1F14 : (MACRO)             	Cretn
    1865/    1F15 :                     
    1866/    1F15 :                     _make_tcp_ack_with_data_noflags:
    1867/    1F15 : (MACRO)             	reserve 0; save room for local variables
    1868/    1F15 : (MACRO)             	pushr r1
    1869/    1F1A : (MACRO)             	pushr r7
    1870/    1F1F : (MACRO)             	reserve 8; save room for outgoing arguments
    1871/    1F27 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1872/    1F2B :                     ; void make_tcp_ack_with_data_noflags(word dlen) {
    1873/    1F2B :                     ;  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    1874/    1F2B : (MACRO)             	ldA2 R1,'O',R7,(40); reg:addr
    1875/    1F33 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    1876/    1F33 : (MACRO)             	cpy2 R11,R1
    1877/    1F37 : (MACRO)             	shrU2I R11,8
    1878/    1F67 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    1879/    1F6F :                     ;  gPB[IP_TOTLEN_L_P] = j;
    1880/    1F6F : (MACRO)             	cpy1 R11,R1;LOADU1(reg)
    1881/    1F71 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    1882/    1F79 :                     ;  fill_ip_hdr_checksum();
    1883/    1F79 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    1884/    1F7C :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    1885/    1F7C : (MACRO)             	ldaD R11,0; reg:acon
    1886/    1F82 : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    1887/    1F8A :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    1888/    1F8A : (MACRO)             	ldaD R11,0; reg:acon
    1889/    1F90 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    1890/    1F98 :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    1891/    1F98 : (MACRO)             	ldaD R12,50; reg:acon
    1892/    1F9E : (MACRO)             	ldaD R13,26; reg:acon
    1893/    1FA4 : (MACRO)             	ldA2 R11,'O',R7,(28); reg:addr
    1894/    1FAC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1895/    1FB9 : (MACRO)             	ldaD R11,2; reg:acon
    1896/    1FBF : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1897/    1FCC : (MACRO)             	Ccall _fill_checksum
    1898/    1FCF :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
    1899/    1FCF : (MACRO)             	ldA2 R11,'O',R7,(40); reg:addr
    1900/    1FD7 : (MACRO)             	ldA2 R12,'O',R11,(14); reg:addr
    1901/    1FDF : (MACRO)             	Ccall _encpacketSend
    1902/    1FE2 :                     ;}
    1903/    1FE2 :                     L256:
    1904/    1FE2 : (MACRO)             	release 8; release room for outgoing arguments
    1905/    1FEA : (MACRO)             	popr r7
    1906/    1FEE : (MACRO)             	popr r1
    1907/    1FF2 : (MACRO)             	release 0; release room for local variables 
    1908/    1FF2 : (MACRO)             	Cretn
    1909/    1FF3 :                     
    1910/    1FF3 :                     _get_tcp_data_len:
    1911/    1FF3 : (MACRO)             	reserve 0; save room for local variables
    1912/    1FF3 : (MACRO)             	pushr r7
    1913/    1FF8 : (MACRO)             	reserve 0; save room for outgoing arguments
    1914/    1FF8 :                     ; word get_tcp_data_len() {
    1915/    1FF8 :                     ;  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    1916/    1FF8 : (MACRO)             	ld1 R11,'D',(_buffer+16),0
    1917/    2000 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1918/    2003 : (MACRO)             	shl2I R11,8
    1919/    2033 : (MACRO)             	ld1 R10,'D',(_buffer+17),0
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 33 - 4/25/2013 10:34:17


    1920/    203B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1921/    203E : (MACRO)             	alu2 R7,R11,R10,or,or
    1922/    204A :                     ;  i -= IP_HEADER_LEN;
    1923/    204A : (MACRO)             	alu2I R7,R7,20,smi,smbi
    1924/    2052 :                     ;  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1925/    2052 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1926/    205A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1927/    205D : (MACRO)             	shrI2I R11,4
    1928/    207D : (MACRO)             	shl2I R11,2
    1929/    2089 : (MACRO)             	alu2 R7,R7,R11,sm,smb
    1930/    2095 :                     ;  if (i<=0)
    1931/    2095 : (MACRO)             	jnI2I r7,0,lbnf,L265; GT reverse  the subtraction
    1932/    20A6 :                     ;    i = 0;
    1933/    20A6 : (MACRO)             	ld2z R7
    1934/    20AA :                     L265:
    1935/    20AA :                     ;  return (word)i;
    1936/    20AA : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    1937/    20AE :                     L261:
    1938/    20AE : (MACRO)             	release 0; release room for outgoing arguments
    1939/    20AE : (MACRO)             	popr r7
    1940/    20B2 : (MACRO)             	release 0; release room for local variables 
    1941/    20B2 : (MACRO)             	Cretn
    1942/    20B3 :                     
    1943/    20B3 :                     _check_ip_message_is_from:
    1944/    20B3 : (MACRO)             	reserve 0; save room for local variables
    1945/    20B3 : (MACRO)             	pushr r7
    1946/    20B8 : (MACRO)             	reserve 6; save room for outgoing arguments
    1947/    20BE : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    1948/    20CB :                     ; byte check_ip_message_is_from(const byte *ip) {
    1949/    20CB :                     ;  return memcmp(gPB + IP_SRC_P, ip, 4) == 0;
    1950/    20CB : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    1951/    20D1 : (MACRO)             	ld2 R13,'O',sp,(0+10);reg:  INDIRP2(addr)
    1952/    20DD : (MACRO)             	ldaD R11,4; reg:acon
    1953/    20E3 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1954/    20F0 : (MACRO)             	Ccall _memcmp
    1955/    20F3 : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    1956/    20F7 : (MACRO)             	jnzU2 r11,L270; NE 0
    1957/    20FF : (MACRO)             	ldaD R7,1; reg:acon
    1958/    2105 : C0 21 0C            	lbr L271
    1959/    2108 :                     L270:
    1960/    2108 : (MACRO)             	ld2z R7
    1961/    210C :                     L271:
    1962/    210C : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1963/    2110 : (MACRO)             	cpy1 R15,R11
    1964/    2112 : (MACRO)             	zExt R15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1965/    2115 :                     L267:
    1966/    2115 : (MACRO)             	release 6; release room for outgoing arguments
    1967/    211B : (MACRO)             	popr r7
    1968/    211F : (MACRO)             	release 0; release room for local variables 
    1969/    211F : (MACRO)             	Cretn
    1970/    2120 :                     
    1971/    2120 :                     _fill_checksum:
    1972/    2120 : (MACRO)             	reserve 8; save room for local variables
    1973/    2128 : (MACRO)             	pushr r0
    1974/    212D : (MACRO)             	pushr r1
    1975/    2132 : (MACRO)             	pushr r7
    1976/    2137 : (MACRO)             	reserve 0; save room for outgoing arguments
    1977/    2137 : (MACRO)             	ld2 R7,'O',sp,(4+16); reg:INDIRU2(addr)
    1978/    2143 : (MACRO)             	ld2 R11,'O',sp,(6+16) ;reg:INDIRI2(addr)
    1979/    214F : (MACRO)             	st1 R11,'O',sp,(6+16); ASGNU1
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 34 - 4/25/2013 10:34:17


    1980/    2159 :                     ; void fill_checksum(byte dest, byte off, word len,byte type) {
    1981/    2159 :                     ;  const byte* ptr = gPB + off;
    1982/    2159 : (MACRO)             	cpy1 R11,R13
    1983/    215B : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1984/    215E : (MACRO)             	ldA2 R11,'O',R11,(_buffer); reg:addr
    1985/    2166 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    1986/    2173 :                     ; long sum = type==1 ? IP_PROTO_UDP_V+len-8 :
    1987/    2173 : (MACRO)             	ld1 R11,'O',sp,(6+16)
    1988/    217D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1989/    2180 : (MACRO)             	jneU2I r11,1,L275; NE
    1990/    218C : (MACRO)             	ldA2 R11,'O',R7,(17); reg:addr
    1991/    2194 : (MACRO)             	alu2I R11,R11,8,smi,smbi
    1992/    219C : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)*
    1993/    21A9 : C0 22 0F            	lbr L276
    1994/    21AC :                     L275:
    1995/    21AC : (MACRO)             	ld1 R11,'O',sp,(6+16)
    1996/    21B6 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1997/    21B9 : (MACRO)             	jneU2I r11,2,L277; NE
    1998/    21C5 : (MACRO)             	ldA2 R11,'O',R7,(6); reg:addr
    1999/    21CD : (MACRO)             	alu2I R11,R11,8,smi,smbi
    2000/    21D5 : (MACRO)             	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)*
    2001/    21E2 : C0 21 F6            	lbr L278
    2002/    21E5 :                     L277:
    2003/    21E5 : (MACRO)             	ld2z R11
    2004/    21E9 : (MACRO)             	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)*
    2005/    21F6 :                     L278:
    2006/    21F6 : (MACRO)             	ld2 R11,'O',sp,(-10+16); reg:INDIRU2(addr)
    2007/    2202 : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)*
    2008/    220F :                     L276:
    2009/    220F : (MACRO)             	ld2 RL0,'O',sp,(-8+16)
    2010/    221B : (MACRO)             	zext4 RL0 ;CVUI4: widen unsigned int to signed long (zero extend)
    2011/    221F : C0 23 1B            	lbr L280
    2012/    2222 :                     L279:
    2013/    2222 :                     ;  while(len >1) {
    2014/    2222 :                     ;    sum += (word) (((unsigned long)*ptr<<8)|*(ptr+1));
    2015/    2222 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2016/    222E : (MACRO)             	ld1 R10,'O',R11,0
    2017/    2238 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2018/    223B : (MACRO)             	cpy2 RL8,R10
    2019/    223F : (MACRO)             	sext4 RL8; CVIU4
    2020/    224A : (MACRO)             	shl4I RL8,8; LSHU4(reg,con)
    2021/    22AA : (MACRO)             	ld1 R11,'O',R11,(1)
    2022/    22B4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2023/    22B7 : (MACRO)             	cpy2 RL10,R11
    2024/    22BB : (MACRO)             	sext4 RL10; CVIU4
    2025/    22C6 : (MACRO)             	alu4 RL10,RL8,RL10,or,or
    2026/    22DC : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
    2027/    22E0 : (MACRO)             	cpy2 RL10,R11
    2028/    22E4 : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2029/    22E8 : (MACRO)             	alu4 RL0,RL0,RL10,add,adc
    2030/    22FE :                     ;    ptr+=2;
    2031/    22FE : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2032/    230A : (MACRO)             	incm R11,2
    2033/    230C : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2034/    2319 :                     ;    len-=2;
    2035/    2319 : (MACRO)             	decm R7,2
    2036/    231B :                     ;  }
    2037/    231B :                     L280:
    2038/    231B :                     ;  while(len >1) {
    2039/    231B : (MACRO)             	jnU2I r7,1,lbnf,L279; GT reverse the subtraction
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 35 - 4/25/2013 10:34:17


    2040/    2324 :                     ;  if (len)
    2041/    2324 : (MACRO)             	jeqU2I r7,0,L285;EQU2(reg,con)
    2042/    2330 :                     ;    sum += ((unsigned long)*ptr)<<8;
    2043/    2330 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
    2044/    2338 : (MACRO)             	ld2 R9,'O',sp,(-4+16);reg:  INDIRP2(addr)
    2045/    2344 : (MACRO)             	ld1 R9,'O',R9,0
    2046/    234E : (MACRO)             	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
    2047/    2351 : (MACRO)             	cpy2 RL8,R9
    2048/    2355 : (MACRO)             	sext4 RL8; CVIU4
    2049/    2360 : (MACRO)             	shl4I RL8,8; LSHU4(reg,con)
    2050/    23C0 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    2051/    23D6 : (MACRO)             	cpy4 RL0,RL10; LOADI4*
    2052/    23DE : C0 24 EB            	lbr L285
    2053/    23E1 :                     L284:
    2054/    23E1 :                     ;    sum = (word) sum + (sum >> 16);
    2055/    23E1 : (MACRO)             	cpy2 R11,RL0 ;LOADU2(reg)*
    2056/    23E5 : (MACRO)             	cpy2 RL10,R11
    2057/    23E9 : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2058/    23ED : (MACRO)             	cpy4 RL8,RL0
    2059/    23F5 : (MACRO)             	shrI4I RL8,16
    2060/    24D5 : (MACRO)             	alu4 RL0,RL10,RL8,add,adc
    2061/    24EB :                     L285:
    2062/    24EB :                     ;  while (sum>>16)
    2063/    24EB : (MACRO)             	cpy4 RL10,RL0
    2064/    24F3 : (MACRO)             	shrI4I RL10,16
    2065/    25D3 : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
    2066/    25DF : (MACRO)             	jneU4 rL10,rL8,L284; NE
    2067/    2606 :                     ;  ck = ~ (word) sum;
    2068/    2606 : (MACRO)             	cpy2 R11,RL0 ;LOADU2(reg)*
    2069/    260A : (MACRO)             	alu2I R11,R11,-1,xri,xri; was?	cpy2 R11,R11+xor2I R11,-1
    2070/    2612 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNU2(addr,reg)*
    2071/    261F :                     ;  gPB[dest] = ck>>8;
    2072/    261F : (MACRO)             	cpy1 R11,R12
    2073/    2621 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2074/    2624 : (MACRO)             	ld2 R10,'O',sp,(-6+16); reg:INDIRU2(addr)
    2075/    2630 : (MACRO)             	shrU2I R10,8
    2076/    2660 : (MACRO)             	st1 R10,'O',R11,(_buffer); ASGNU1
    2077/    266A :                     ;  gPB[dest+1] = ck;
    2078/    266A : (MACRO)             	cpy1 R11,R12
    2079/    266C : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2080/    266F : (MACRO)             	ld2 R10,'O',sp,(-6+16); reg:INDIRU2(addr)
    2081/    267B : (MACRO)             	st1 R10,'O',R11,(_buffer+1); ASGNU1
    2082/    2685 :                     ;}
    2083/    2685 :                     L272:
    2084/    2685 : (MACRO)             	release 0; release room for outgoing arguments
    2085/    2685 : (MACRO)             	popr r7
    2086/    2689 : (MACRO)             	popr r1
    2087/    268D : (MACRO)             	popr r0
    2088/    2691 : (MACRO)             	release 8; release room for local variables 
    2089/    2699 : (MACRO)             	Cretn
    2090/    269A :                     
    2091/    269A :                     _fill_ip_hdr_checksum:
    2092/    269A : (MACRO)             	reserve 8
    2093/    26A2 :                     ; void fill_ip_hdr_checksum() {
    2094/    26A2 :                     ;  gPB[IP_CHECKSUM_P] = 0;
    2095/    26A2 : (MACRO)             	ldaD R11,0; reg:acon
    2096/    26A8 : (MACRO)             	st1 R11,'D',(_buffer+24),0; ASGNU1
    2097/    26B0 :                     ;  gPB[IP_CHECKSUM_P+1] = 0;
    2098/    26B0 : (MACRO)             	ldaD R11,0; reg:acon
    2099/    26B6 : (MACRO)             	st1 R11,'D',(_buffer+25),0; ASGNU1
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 36 - 4/25/2013 10:34:17


    2100/    26BE :                     ;  gPB[IP_FLAGS_P] = 0x40; // don't fragment
    2101/    26BE : (MACRO)             	ldaD R11,64; reg:acon
    2102/    26C4 : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
    2103/    26CC :                     ;  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
    2104/    26CC : (MACRO)             	ldaD R11,0; reg:acon
    2105/    26D2 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    2106/    26DA :                     ;  gPB[IP_TTL_P] = 64; // ttl
    2107/    26DA : (MACRO)             	ldaD R11,64; reg:acon
    2108/    26E0 : (MACRO)             	st1 R11,'D',(_buffer+22),0; ASGNU1
    2109/    26E8 :                     ;  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
    2110/    26E8 : (MACRO)             	ldaD R12,24; reg:acon
    2111/    26EE : (MACRO)             	ldaD R13,14; reg:acon
    2112/    26F4 : (MACRO)             	ldaD R11,20; reg:acon
    2113/    26FA : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2114/    2707 : (MACRO)             	ld2z R11
    2115/    270B : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2116/    2718 : (MACRO)             	Ccall _fill_checksum
    2117/    271B :                     ;}
    2118/    271B :                     L288:
    2119/    271B : (MACRO)             	release 8
    2120/    2723 : (MACRO)             	Cretn
    2121/    2724 :                     
    2122/    2724 :                     _make_eth_ip:
    2123/    2724 : (MACRO)             	reserve 4
    2124/    2728 :                     ; void make_eth_ip() {
    2125/    2728 :                     ;  setMACs(gPB + ETH_SRC_MAC);
    2126/    2728 : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    2127/    272E : (MACRO)             	Ccall _setMACs
    2128/    2731 :                     ;  copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
    2129/    2731 : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    2130/    2737 : (MACRO)             	ldaD R13,_buffer+26; reg:acon
    2131/    273D : (MACRO)             	Ccall _copyIp
    2132/    2740 :                     ;  copyIp(gPB + IP_SRC_P, myip);
    2133/    2740 : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    2134/    2746 : (MACRO)             	ldaD R13,_myip; reg:acon
    2135/    274C : (MACRO)             	Ccall _copyIp
    2136/    274F :                     ;  fill_ip_hdr_checksum();
    2137/    274F : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2138/    2752 :                     ;}
    2139/    2752 :                     L294:
    2140/    2752 : (MACRO)             	release 4
    2141/    2756 : (MACRO)             	Cretn
    2142/    2757 :                     
    2143/    2757 :                     _client_store_gw_mac:
    2144/    2757 : (MACRO)             	reserve 6
    2145/    275D :                     ; byte client_store_gw_mac() {
    2146/    275D :                     ;  if (memcmp(gPB + ETH_ARP_SRC_IP_P, gwip, 4) != 0)
    2147/    275D : (MACRO)             	ldaD R12,_buffer+28; reg:acon
    2148/    2763 : (MACRO)             	ldaD R13,_gwip; reg:acon
    2149/    2769 : (MACRO)             	ldaD R11,4; reg:acon
    2150/    276F : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2151/    277C : (MACRO)             	Ccall _memcmp
    2152/    277F : (MACRO)             	cpy2 R11,R15 ;LOADI2(reg)*
    2153/    2783 : (MACRO)             	jzU2 r11,L300; EQ 0
    2154/    278B :                     ;    return 0;
    2155/    278B : (MACRO)             	ld2z R15
    2156/    278F : C0 27 A7            	lbr L299
    2157/    2792 :                     L300:
    2158/    2792 :                     ;  copyMac(gwmacaddr, gPB + ETH_ARP_SRC_MAC_P);
    2159/    2792 : (MACRO)             	ldaD R12,_gwmacaddr; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 37 - 4/25/2013 10:34:17


    2160/    2798 : (MACRO)             	ldaD R13,_buffer+22; reg:acon
    2161/    279E : (MACRO)             	Ccall _copyMac
    2162/    27A1 :                     ;  return 1;
    2163/    27A1 : (MACRO)             	ldaD R15,1; reg:acon
    2164/    27A7 :                     L299:
    2165/    27A7 : (MACRO)             	release 6
    2166/    27AD : (MACRO)             	Cretn
    2167/    27AE :                     
    2168/    27AE :                     _setMACs:
    2169/    27AE : (MACRO)             	reserve 4
    2170/    27B2 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2171/    27BF :                     ; void setMACs (const byte *mac) {
    2172/    27BF :                     ;  copyMac(gPB + ETH_DST_MAC, mac);
    2173/    27BF : (MACRO)             	ldaD R12,_buffer; reg:acon
    2174/    27C5 : (MACRO)             	ld2 R13,'O',sp,(0+6);reg:  INDIRP2(addr)
    2175/    27D1 : (MACRO)             	Ccall _copyMac
    2176/    27D4 :                     ;  copyMac(gPB + ETH_SRC_MAC, mymac);
    2177/    27D4 : (MACRO)             	ldaD R12,_buffer+6; reg:acon
    2178/    27DA : (MACRO)             	ldaD R13,_mymac; reg:acon
    2179/    27E0 : (MACRO)             	Ccall _copyMac
    2180/    27E3 :                     ;}
    2181/    27E3 :                     L304:
    2182/    27E3 : (MACRO)             	release 4
    2183/    27E7 : (MACRO)             	Cretn
    2184/    27E8 :                     
    2185/    27E8 :                     _client_arp_whohas:
    2186/    27E8 : (MACRO)             	reserve 6
    2187/    27EE : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2188/    27FB :                     ; void client_arp_whohas(byte *ip_we_search) {
    2189/    27FB :                     ;  setMACs(allOnes);
    2190/    27FB : (MACRO)             	ldaD R12,_allOnes; reg:acon
    2191/    2801 : (MACRO)             	Ccall _setMACs
    2192/    2804 :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    2193/    2804 : (MACRO)             	ldaD R11,8; reg:acon
    2194/    280A : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2195/    2812 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    2196/    2812 : (MACRO)             	ldaD R11,6; reg:acon
    2197/    2818 : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2198/    2820 :                     ;  memcpy(gPB + ETH_ARP_P,arpreqhdr,8);
    2199/    2820 : (MACRO)             	ldaD R12,_buffer+14; reg:acon
    2200/    2826 : (MACRO)             	ldaD R13,_arpreqhdr; reg:acon
    2201/    282C : (MACRO)             	ldaD R11,8; reg:acon
    2202/    2832 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2203/    283F : (MACRO)             	Ccall _memcpy
    2204/    2842 :                     ;  memset(gPB + ETH_ARP_DST_MAC_P, 0, 6);
    2205/    2842 : (MACRO)             	ldaD R12,_buffer+32; reg:acon
    2206/    2848 : (MACRO)             	ld2z R13
    2207/    284C : (MACRO)             	ldaD R11,6; reg:acon
    2208/    2852 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2209/    285F : (MACRO)             	Ccall _memset
    2210/    2862 :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    2211/    2862 : (MACRO)             	ldaD R12,_buffer+22; reg:acon
    2212/    2868 : (MACRO)             	ldaD R13,_mymac; reg:acon
    2213/    286E : (MACRO)             	Ccall _copyMac
    2214/    2871 :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
    2215/    2871 : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    2216/    2877 : (MACRO)             	ld2 R13,'O',sp,(0+8);reg:  INDIRP2(addr)
    2217/    2883 : (MACRO)             	Ccall _copyIp
    2218/    2886 :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    2219/    2886 : (MACRO)             	ldaD R12,_buffer+28; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 38 - 4/25/2013 10:34:17


    2220/    288C : (MACRO)             	ldaD R13,_myip; reg:acon
    2221/    2892 : (MACRO)             	Ccall _copyIp
    2222/    2895 :                     ;  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    2223/    2895 : (MACRO)             	ldaD R11,_waitgwmac; reg:acon
    2224/    289B : (MACRO)             	ld1 R10,'D',(_waitgwmac),0
    2225/    28A3 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2226/    28A6 : (MACRO)             	alu2I R10,R10,8,ori,ori ;removed copy
    2227/    28AE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2228/    28B0 :                     ;  encpacketSend(42);
    2229/    28B0 : (MACRO)             	ldaD R12,42; reg:acon
    2230/    28B6 : (MACRO)             	Ccall _encpacketSend
    2231/    28B9 :                     ;}
    2232/    28B9 :                     L306:
    2233/    28B9 : (MACRO)             	release 6
    2234/    28BF : (MACRO)             	Cretn
    2235/    28C0 :                     
    2236/    28C0 :                     _client_syn:
    2237/    28C0 : (MACRO)             	reserve 8
    2238/    28C8 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2239/    28D5 : (MACRO)             	st2 r13,'O',sp,(12); flag1 
    2240/    28E2 : (MACRO)             	ld2 R11,'O',sp,(0+10) ;reg:INDIRI2(addr)
    2241/    28EE : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
    2242/    28F8 : (MACRO)             	ld2 R11,'O',sp,(2+10) ;reg:INDIRI2(addr)
    2243/    2904 : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
    2244/    290E : (MACRO)             	ld2 R11,'O',sp,(4+10) ;reg:INDIRI2(addr)
    2245/    291A : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
    2246/    2924 :                     ; void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
    2247/    2924 :                     ;  setMACandIPs(gwmacaddr, hisip);
    2248/    2924 : (MACRO)             	ldaD R12,_gwmacaddr; reg:acon
    2249/    292A : (MACRO)             	ldaD R13,_hisip; reg:acon
    2250/    2930 : (MACRO)             	Ccall _setMACandIPs
    2251/    2933 :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    2252/    2933 : (MACRO)             	ldaD R11,8; reg:acon
    2253/    2939 : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2254/    2941 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    2255/    2941 : (MACRO)             	ldaD R11,0; reg:acon
    2256/    2947 : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2257/    294F :                     ;  memcpy(gPB + IP_P,iphdr,9);
    2258/    294F : (MACRO)             	ldaD R12,_buffer+14; reg:acon
    2259/    2955 : (MACRO)             	ldaD R13,_iphdr; reg:acon
    2260/    295B : (MACRO)             	ldaD R11,9; reg:acon
    2261/    2961 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2262/    296E : (MACRO)             	Ccall _memcpy
    2263/    2971 :                     ;  gPB[IP_TOTLEN_L_P] = 44; // good for syn
    2264/    2971 : (MACRO)             	ldaD R11,44; reg:acon
    2265/    2977 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2266/    297F :                     ;  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    2267/    297F : (MACRO)             	ldaD R11,6; reg:acon
    2268/    2985 : (MACRO)             	st1 R11,'D',(_buffer+23),0; ASGNU1
    2269/    298D :                     ;  fill_ip_hdr_checksum();
    2270/    298D : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2271/    2990 :                     ;  gPB[TCP_DST_PORT_H_P] = dstport_h;
    2272/    2990 : (MACRO)             	ld1 R11,'O',sp,(2+10)
    2273/    299A : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    2274/    29A2 :                     ;  gPB[TCP_DST_PORT_L_P] = dstport_l;
    2275/    29A2 : (MACRO)             	ld1 R11,'O',sp,(4+10)
    2276/    29AC : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    2277/    29B4 :                     ;  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    2278/    29B4 : (MACRO)             	ldaD R11,11; reg:acon
    2279/    29BA : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 39 - 4/25/2013 10:34:17


    2280/    29C2 :                     ;  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    2281/    29C2 : (MACRO)             	ld1 R11,'O',sp,(0+10)
    2282/    29CC : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
    2283/    29D4 :                     ;  memset(gPB + TCP_SEQ_H_P, 0, 8);
    2284/    29D4 : (MACRO)             	ldaD R12,_buffer+38; reg:acon
    2285/    29DA : (MACRO)             	ld2z R13
    2286/    29DE : (MACRO)             	ldaD R11,8; reg:acon
    2287/    29E4 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2288/    29F1 : (MACRO)             	Ccall _memset
    2289/    29F4 :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    2290/    29F4 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    2291/    29FA : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2292/    29FC : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    2293/    2A04 :                     ;  seqnum += 3;
    2294/    2A04 : (MACRO)             	ldaD R11,_seqnum; reg:acon
    2295/    2A0A : (MACRO)             	ld1 R10,'D',(_seqnum),0
    2296/    2A12 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2297/    2A15 : (MACRO)             	incm R10,3
    2298/    2A18 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2299/    2A1A :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    2300/    2A1A : (MACRO)             	ldaD R11,96; reg:acon
    2301/    2A20 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    2302/    2A28 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    2303/    2A28 : (MACRO)             	ldaD R11,2; reg:acon
    2304/    2A2E : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    2305/    2A36 :                     ;  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    2306/    2A36 : (MACRO)             	ldaD R11,3; reg:acon
    2307/    2A3C : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    2308/    2A44 :                     ;  gPB[TCP_WIN_SIZE+1] = 0x0;
    2309/    2A44 : (MACRO)             	ldaD R11,0; reg:acon
    2310/    2A4A : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    2311/    2A52 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    2312/    2A52 : (MACRO)             	ldaD R11,0; reg:acon
    2313/    2A58 : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    2314/    2A60 :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    2315/    2A60 : (MACRO)             	ldaD R11,0; reg:acon
    2316/    2A66 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    2317/    2A6E :                     ;  gPB[TCP_CHECKSUM_L_P+1] = 0;
    2318/    2A6E : (MACRO)             	ldaD R11,0; reg:acon
    2319/    2A74 : (MACRO)             	st1 R11,'D',(_buffer+52),0; ASGNU1
    2320/    2A7C :                     ;  gPB[TCP_CHECKSUM_L_P+2] = 0;
    2321/    2A7C : (MACRO)             	ldaD R11,0; reg:acon
    2322/    2A82 : (MACRO)             	st1 R11,'D',(_buffer+53),0; ASGNU1
    2323/    2A8A :                     ;  gPB[TCP_OPTIONS_P] = 2;
    2324/    2A8A : (MACRO)             	ldaD R11,2; reg:acon
    2325/    2A90 : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    2326/    2A98 :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    2327/    2A98 : (MACRO)             	ldaD R11,4; reg:acon
    2328/    2A9E : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    2329/    2AA6 :                     ;  gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    2330/    2AA6 : (MACRO)             	ldaD R11,2; reg:acon
    2331/    2AAC : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    2332/    2AB4 :                     ;  gPB[TCP_OPTIONS_P+3] = (byte) CLIENTMSS;
    2333/    2AB4 : (MACRO)             	ldaD R11,550; reg:acon
    2334/    2ABA : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    2335/    2AC2 :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    2336/    2AC2 : (MACRO)             	ldaD R12,50; reg:acon
    2337/    2AC8 : (MACRO)             	ldaD R13,26; reg:acon
    2338/    2ACE : (MACRO)             	ldaD R11,32; reg:acon
    2339/    2AD4 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 40 - 4/25/2013 10:34:17


    2340/    2AE1 : (MACRO)             	ldaD R11,2; reg:acon
    2341/    2AE7 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2342/    2AF4 : (MACRO)             	Ccall _fill_checksum
    2343/    2AF7 :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    2344/    2AF7 : (MACRO)             	ldaD R12,58; reg:acon
    2345/    2AFD : (MACRO)             	Ccall _encpacketSend
    2346/    2B00 :                     ;}
    2347/    2B00 :                     L314:
    2348/    2B00 : (MACRO)             	release 8
    2349/    2B08 : (MACRO)             	Cretn
    2350/    2B09 :                     
    2351/    2B09 :                     _setMACandIPs:
    2352/    2B09 : (MACRO)             	reserve 4
    2353/    2B0D : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2354/    2B1A : (MACRO)             	st2 r13,'O',sp,(8); flag1 
    2355/    2B27 :                     ; void setMACandIPs (const byte *mac, const byte *dst) {
    2356/    2B27 :                     ;  setMACs(mac);
    2357/    2B27 : (MACRO)             	ld2 R12,'O',sp,(0+6);reg:  INDIRP2(addr)
    2358/    2B33 : (MACRO)             	Ccall _setMACs
    2359/    2B36 :                     ;  copyIp(gPB + IP_DST_P, dst);
    2360/    2B36 : (MACRO)             	ldaD R12,_buffer+30; reg:acon
    2361/    2B3C : (MACRO)             	ld2 R13,'O',sp,(2+6);reg:  INDIRP2(addr)
    2362/    2B48 : (MACRO)             	Ccall _copyIp
    2363/    2B4B :                     ;  copyIp(gPB + IP_SRC_P, myip);
    2364/    2B4B : (MACRO)             	ldaD R12,_buffer+26; reg:acon
    2365/    2B51 : (MACRO)             	ldaD R13,_myip; reg:acon
    2366/    2B57 : (MACRO)             	Ccall _copyIp
    2367/    2B5A :                     ;}
    2368/    2B5A :                     L338:
    2369/    2B5A : (MACRO)             	release 4
    2370/    2B5E : (MACRO)             	Cretn
    2371/    2B5F :                     
    2372/    2B5F :                     _hexDump:
    2373/    2B5F : (MACRO)             	reserve 2; save room for local variables
    2374/    2B61 : (MACRO)             	pushr r0
    2375/    2B66 : (MACRO)             	pushr r1
    2376/    2B6B : (MACRO)             	pushr r7
    2377/    2B70 : (MACRO)             	reserve 4; save room for outgoing arguments
    2378/    2B74 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    2379/    2B78 : (MACRO)             	cpy2 r1,r13; function(2054) 1
    2380/    2B7C :                     ;void hexDump(uint8_t *data, uint16_t len) {
    2381/    2B7C :                     ;  uint8_t cnt = 0;
    2382/    2B7C : (MACRO)             	ldaD R0,0; reg:acon
    2383/    2B82 :                     ;  printf("dumping %d\n",len);
    2384/    2B82 : (MACRO)             	ldaD R12,L342; reg:acon
    2385/    2B88 : (MACRO)             	cpy2 R13,R1 ;LOADU2(reg)*
    2386/    2B8C : (MACRO)             	Ccall _printf
    2387/    2B8F :                     ;  for (i = 0; i < len; i++) {
    2388/    2B8F : (MACRO)             	ld2z R11
    2389/    2B93 : (MACRO)             	st2 R11,'O',sp,(-4+14); ASGNI2(addr,reg)*;
    2390/    2BA0 : C0 2C 27            	lbr L346
    2391/    2BA3 :                     L343:
    2392/    2BA3 :                     ;    putx(data[i]);
    2393/    2BA3 : (MACRO)             	ld2 R11,'O',sp,(-4+14) ;reg:INDIRI2(addr)
    2394/    2BAF : (MACRO)             	alu2 R11,R11,R7,add,adc
    2395/    2BBB : (MACRO)             	ld1 R12,'O',R11,0
    2396/    2BC5 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    2397/    2BC8 : (MACRO)             	Ccall _putx
    2398/    2BCB :                     ;    cnt++;
    2399/    2BCB : (MACRO)             	cpy1 R11,R0
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 41 - 4/25/2013 10:34:17


    2400/    2BCD : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2401/    2BD0 : (MACRO)             	incm R11,1
    2402/    2BD1 : (MACRO)             	cpy1 R0,R11;LOADU1(reg)
    2403/    2BD3 :                     ;    if (cnt == 8) {
    2404/    2BD3 : (MACRO)             	cpy1 R11,R0
    2405/    2BD5 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2406/    2BD8 : (MACRO)             	jneU2I r11,8,L347; NE
    2407/    2BE4 :                     ;      putc(' ');
    2408/    2BE4 : (MACRO)             	ldaD R12,32; reg:acon
    2409/    2BEA : (MACRO)             	Ccall _putc
    2410/    2BED :                     ;    }
    2411/    2BED :                     L347:
    2412/    2BED :                     ;    if (cnt == 16) {
    2413/    2BED : (MACRO)             	cpy1 R11,R0
    2414/    2BEF : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2415/    2BF2 : (MACRO)             	jneU2I r11,16,L349; NE
    2416/    2BFE :                     ;      printf("\n");
    2417/    2BFE : (MACRO)             	ldaD R12,L351; reg:acon
    2418/    2C04 : (MACRO)             	Ccall _printf
    2419/    2C07 :                     ;      cnt = 0;
    2420/    2C07 : (MACRO)             	ldaD R0,0; reg:acon
    2421/    2C0D :                     ;    }
    2422/    2C0D :                     L349:
    2423/    2C0D :                     ;  }
    2424/    2C0D :                     L344:
    2425/    2C0D :                     ;  for (i = 0; i < len; i++) {
    2426/    2C0D : (MACRO)             	ld2 R11,'O',sp,(-4+14) ;reg:INDIRI2(addr)
    2427/    2C19 : (MACRO)             	incm R11,1
    2428/    2C1A : (MACRO)             	st2 R11,'O',sp,(-4+14); ASGNI2(addr,reg)*;
    2429/    2C27 :                     L346:
    2430/    2C27 : (MACRO)             	ld2 R11,'O',sp,(-4+14) ;reg:INDIRI2(addr)
    2431/    2C33 : (MACRO)             	jcU2 r11,r1,lbnf,L343; LT=lbnf i.e. subtract B from A and jump if borrow 
    2432/    2C40 :                     ;  if (cnt != 0) {
    2433/    2C40 : (MACRO)             	cpy1 R11,R0
    2434/    2C42 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2435/    2C45 : (MACRO)             	jzU2 r11,L352; EQ 0
    2436/    2C4D :                     ;    printf("\n");
    2437/    2C4D : (MACRO)             	ldaD R12,L351; reg:acon
    2438/    2C53 : (MACRO)             	Ccall _printf
    2439/    2C56 :                     ;  }
    2440/    2C56 :                     L352:
    2441/    2C56 :                     ;}
    2442/    2C56 :                     L341:
    2443/    2C56 : (MACRO)             	release 4; release room for outgoing arguments
    2444/    2C5A : (MACRO)             	popr r7
    2445/    2C5E : (MACRO)             	popr r1
    2446/    2C62 : (MACRO)             	popr r0
    2447/    2C66 : (MACRO)             	release 2; release room for local variables 
    2448/    2C68 : (MACRO)             	Cretn
    2449/    2C69 :                     
    2450/    2C69 :                     _copyIp:
    2451/    2C69 : (MACRO)             	reserve 6
    2452/    2C6F : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2453/    2C7C : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    2454/    2C89 :                     ;void copyIp (byte *dst, const byte *src) {
    2455/    2C89 :                     ;    memcpy(dst, src, 4);
    2456/    2C89 : (MACRO)             	ld2 R12,'O',sp,(0+8);reg:  INDIRP2(addr)
    2457/    2C95 : (MACRO)             	ld2 R13,'O',sp,(2+8);reg:  INDIRP2(addr)
    2458/    2CA1 : (MACRO)             	ldaD R11,4; reg:acon
    2459/    2CA7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 42 - 4/25/2013 10:34:17


    2460/    2CB4 : (MACRO)             	Ccall _memcpy
    2461/    2CB7 :                     ;}
    2462/    2CB7 :                     L354:
    2463/    2CB7 : (MACRO)             	release 6
    2464/    2CBD : (MACRO)             	Cretn
    2465/    2CBE :                     
    2466/    2CBE :                     _copyMac:
    2467/    2CBE : (MACRO)             	reserve 6
    2468/    2CC4 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2469/    2CD1 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    2470/    2CDE :                     ;void copyMac (byte *dst, const byte *src) {
    2471/    2CDE :                     ;    memcpy(dst, src, 6);
    2472/    2CDE : (MACRO)             	ld2 R12,'O',sp,(0+8);reg:  INDIRP2(addr)
    2473/    2CEA : (MACRO)             	ld2 R13,'O',sp,(2+8);reg:  INDIRP2(addr)
    2474/    2CF6 : (MACRO)             	ldaD R11,6; reg:acon
    2475/    2CFC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2476/    2D09 : (MACRO)             	Ccall _memcpy
    2477/    2D0C :                     ;}
    2478/    2D0C :                     L355:
    2479/    2D0C : (MACRO)             	release 6
    2480/    2D12 : (MACRO)             	Cretn
    2481/    2D13 :                     
    2482/    2D13 :                     _strcpy:
    2483/    2D13 : (MACRO)             	reserve 2
    2484/    2D15 :                     ;{
    2485/    2D15 :                     ;	char *save = to;
    2486/    2D15 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
    2487/    2D22 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
    2488/    2D22 : C0 2D 27            	lbr L360
    2489/    2D25 :                     L357:
    2490/    2D25 :                     L358:
    2491/    2D25 : (MACRO)             	incm R13,1
    2492/    2D26 : (MACRO)             	incm R12,1
    2493/    2D27 :                     L360:
    2494/    2D27 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
    2495/    2D29 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
    2496/    2D2B : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2497/    2D2E : (MACRO)             	jnzU2 r11,L357; NE 0
    2498/    2D36 :                     ;	return(save);
    2499/    2D36 : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
    2500/    2D42 :                     L356:
    2501/    2D42 : (MACRO)             	release 2
    2502/    2D44 : (MACRO)             	Cretn
    2503/    2D45 :                     
    2504/    2D45 :                     _strlen:
    2505/    2D45 : (MACRO)             	reserve 0; save room for local variables
    2506/    2D45 : (MACRO)             	pushr r7
    2507/    2D4A : (MACRO)             	reserve 0; save room for outgoing arguments
    2508/    2D4A :                     ;{
    2509/    2D4A :                     ;	unsigned int slen = 0 ;
    2510/    2D4A : (MACRO)             	ld2z R7
    2511/    2D4E : C0 2D 53            	lbr L363
    2512/    2D51 :                     L362:
    2513/    2D51 :                     ;	while (*str != 0) {
    2514/    2D51 :                     ;      slen++ ;
    2515/    2D51 : (MACRO)             	incm R7,1
    2516/    2D52 :                     ;      str++ ;
    2517/    2D52 : (MACRO)             	incm R12,1
    2518/    2D53 :                     ;   }
    2519/    2D53 :                     L363:
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 43 - 4/25/2013 10:34:17


    2520/    2D53 :                     ;	while (*str != 0) {
    2521/    2D53 : (MACRO)             	ld1 R11,'O',R12,0
    2522/    2D5D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2523/    2D60 : (MACRO)             	jnzU2 r11,L362; NE 0
    2524/    2D68 :                     ;   return slen;
    2525/    2D68 : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
    2526/    2D6C :                     L361:
    2527/    2D6C : (MACRO)             	release 0; release room for outgoing arguments
    2528/    2D6C : (MACRO)             	popr r7
    2529/    2D70 : (MACRO)             	release 0; release room for local variables 
    2530/    2D70 : (MACRO)             	Cretn
    2531/    2D71 :                     
    2532/    2D71 :                     _printstr:
    2533/    2D71 : (MACRO)             	reserve 0; save room for local variables
    2534/    2D71 : (MACRO)             	pushr r7
    2535/    2D76 : (MACRO)             	reserve 4; save room for outgoing arguments
    2536/    2D7A : (MACRO)             	cpy2 r7,r12; function(2055) 1
    2537/    2D7E :                     ;void printstr(char *ptr){
    2538/    2D7E : C0 2D A0            	lbr L367
    2539/    2D81 :                     L366:
    2540/    2D81 :                     ;    while(*ptr) out(5,*ptr++);
    2541/    2D81 : (MACRO)             	ldaD R12,5; reg:acon
    2542/    2D87 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2543/    2D8B : (MACRO)             	cpy2 R7,R11
    2544/    2D8F : (MACRO)             	incm R7,1
    2545/    2D90 : (MACRO)             	ld1 R13,'O',R11,0
    2546/    2D9A : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    2547/    2D9D : (MACRO)             	Ccall _out
    2548/    2DA0 :                     L367:
    2549/    2DA0 : (MACRO)             	ld1 R11,'O',R7,0
    2550/    2DAA : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2551/    2DAD : (MACRO)             	jnzU2 r11,L366; NE 0
    2552/    2DB5 :                     ;}
    2553/    2DB5 :                     L365:
    2554/    2DB5 : (MACRO)             	release 4; release room for outgoing arguments
    2555/    2DB9 : (MACRO)             	popr r7
    2556/    2DBD : (MACRO)             	release 0; release room for local variables 
    2557/    2DBD : (MACRO)             	Cretn
    2558/    2DBE :                     
    2559/    2DBE :                     _itoa:
    2560/    2DBE : (MACRO)             	reserve 4; save room for local variables
    2561/    2DC2 : (MACRO)             	pushr r0
    2562/    2DC7 : (MACRO)             	pushr r1
    2563/    2DCC : (MACRO)             	pushr r7
    2564/    2DD1 : (MACRO)             	reserve 4; save room for outgoing arguments
    2565/    2DD5 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2566/    2DE2 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
    2567/    2DEF :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
    2568/    2DEF :                     ;	unsigned int flag=0;
    2569/    2DEF : (MACRO)             	ld2z R11
    2570/    2DF3 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
    2571/    2E00 :                     ;	char * bptr; bptr=buffer;
    2572/    2E00 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
    2573/    2E0C : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    2574/    2E19 :                     ;	if (s<0){
    2575/    2E19 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2576/    2E25 : (MACRO)             	jcI2I r11,0,lbdf,L370; GE is flipped test from LT
    2577/    2E36 :                     ;		*bptr='-';bptr++;
    2578/    2E36 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    2579/    2E42 : (MACRO)             	ldaD R10,45; reg:acon
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 44 - 4/25/2013 10:34:17


    2580/    2E48 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2581/    2E4A : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    2582/    2E56 : (MACRO)             	incm R11,1
    2583/    2E57 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    2584/    2E64 :                     ;		n=-s;
    2585/    2E64 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2586/    2E70 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
    2587/    2E79 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
    2588/    2E7D :                     ;	} else{
    2589/    2E7D : C0 2E 90            	lbr L371
    2590/    2E80 :                     L370:
    2591/    2E80 :                     ;		n=s;
    2592/    2E80 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
    2593/    2E8C : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
    2594/    2E90 :                     ;	}
    2595/    2E90 :                     L371:
    2596/    2E90 :                     ;	k=10000;
    2597/    2E90 : (MACRO)             	ldaD R7,10000; reg:acon
    2598/    2E96 : C0 2F 3A            	lbr L373
    2599/    2E99 :                     L372:
    2600/    2E99 :                     ;	while(k>0){
    2601/    2E99 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
    2602/    2E99 : (MACRO)             	ld2z R0
    2603/    2E9D : C0 2E AD            	lbr L378
    2604/    2EA0 :                     L375:
    2605/    2EA0 :                     L376:
    2606/    2EA0 : (MACRO)             	incm R0,1
    2607/    2EA1 : (MACRO)             	alu2 R1,R1,R7,sm,smb
    2608/    2EAD :                     L378:
    2609/    2EAD : (MACRO)             	jcU2 r1,r7,lbdf,L375 ;LE is flipped test & operands
    2610/    2EBA :                     ;		if (flag || r>0||k==1){
    2611/    2EBA : (MACRO)             	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
    2612/    2EC6 : (MACRO)             	jnzU2 r11,L382; NE 0
    2613/    2ECE : (MACRO)             	jnzU2 r0,L382; NE 0
    2614/    2ED6 : (MACRO)             	jneU2I r7,1,L379; NE
    2615/    2EE2 :                     L382:
    2616/    2EE2 :                     ;			*bptr=('0'+r);bptr++;
    2617/    2EE2 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    2618/    2EEE : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
    2619/    2EF6 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2620/    2EF8 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
    2621/    2F04 : (MACRO)             	incm R11,1
    2622/    2F05 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
    2623/    2F12 :                     ;			flag='y';
    2624/    2F12 : (MACRO)             	ldaD R11,121; reg:acon
    2625/    2F18 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
    2626/    2F25 :                     ;		}
    2627/    2F25 :                     L379:
    2628/    2F25 :                     ;		k=k/10;
    2629/    2F25 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
    2630/    2F29 : (MACRO)             	ldaD R13,10; reg:acon
    2631/    2F2F : (MACRO)             	Ccall _divu2
    2632/    2F32 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
    2633/    2F36 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
    2634/    2F3A :                     ;	}
    2635/    2F3A :                     L373:
    2636/    2F3A :                     ;	while(k>0){
    2637/    2F3A : (MACRO)             	jnzU2 r7,L372; NE 0
    2638/    2F42 :                     ;	*bptr='\0';
    2639/    2F42 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 45 - 4/25/2013 10:34:17


    2640/    2F4E : (MACRO)             	ldaD R10,0; reg:acon
    2641/    2F54 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2642/    2F56 :                     ;	return buffer;
    2643/    2F56 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
    2644/    2F62 :                     L369:
    2645/    2F62 : (MACRO)             	release 4; release room for outgoing arguments
    2646/    2F66 : (MACRO)             	popr r7
    2647/    2F6A : (MACRO)             	popr r1
    2648/    2F6E : (MACRO)             	popr r0
    2649/    2F72 : (MACRO)             	release 4; release room for local variables 
    2650/    2F76 : (MACRO)             	Cretn
    2651/    2F77 :                     
    2652/    2F77 :                     _ltoa:
    2653/    2F77 : (MACRO)             	reserve 0; save room for local variables
    2654/    2F77 : (MACRO)             	pushr r0
    2655/    2F7C : (MACRO)             	pushr r1
    2656/    2F81 : (MACRO)             	pushr r7
    2657/    2F86 : (MACRO)             	reserve 8; save room for outgoing arguments
    2658/    2F8E : (MACRO)             	cpy4 RL0,RL12; halfbaked
    2659/    2F96 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
    2660/    2F96 :                     ;	char* bptr=buffer;
    2661/    2F96 : (MACRO)             	ld2 R7,'O',sp,(4+16);reg:  INDIRP2(addr)
    2662/    2FA2 :                     ;	if (s<0){
    2663/    2FA2 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
    2664/    2FAE : (MACRO)             	jcI4 RL0,RL10,lbdf,L384; GE is flipped test from LT
    2665/    2FCA :                     ;		*bptr++='-';
    2666/    2FCA : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
    2667/    2FCE : (MACRO)             	cpy2 R7,R11
    2668/    2FD2 : (MACRO)             	incm R7,1
    2669/    2FD3 : (MACRO)             	ldaD R10,45; reg:acon
    2670/    2FD9 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    2671/    2FDB :                     ;		s=-s;
    2672/    2FDB : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
    2673/    2FFB :                     ;	}
    2674/    2FFB :                     L384:
    2675/    2FFB :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
    2676/    2FFB : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
    2677/    3003 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
    2678/    3010 : (MACRO)             	ldaD R11,1; reg:acon
    2679/    3016 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2680/    3023 : (MACRO)             	Ccall _dubdabx
    2681/    3026 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    2682/    302A : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
    2683/    302E : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
    2684/    3032 : (MACRO)             	Ccall _strcpy
    2685/    3035 :                     ;	return buffer;
    2686/    3035 : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
    2687/    3041 :                     L383:
    2688/    3041 : (MACRO)             	release 8; release room for outgoing arguments
    2689/    3049 : (MACRO)             	popr r7
    2690/    304D : (MACRO)             	popr r1
    2691/    3051 : (MACRO)             	popr r0
    2692/    3055 : (MACRO)             	release 0; release room for local variables 
    2693/    3055 : (MACRO)             	Cretn
    2694/    3056 :                     
    2695/    3056 :                     _printint:
    2696/    3056 : (MACRO)             	reserve 12
    2697/    3060 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
    2698/    306D :                     ;void printint(int s){ //print an integer
    2699/    306D :                     ;	itoa(s,buffer);
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 46 - 4/25/2013 10:34:17


    2700/    306D : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
    2701/    3079 : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
    2702/    3081 : (MACRO)             	Ccall _itoa
    2703/    3084 :                     ;	printstr(buffer);
    2704/    3084 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
    2705/    308C : (MACRO)             	Ccall _printstr
    2706/    308F :                     ;}
    2707/    308F :                     L386:
    2708/    308F : (MACRO)             	release 12
    2709/    3097 : (MACRO)             	Cretn
    2710/    3098 :                     
    2711/    3098 :                     _printlint:
    2712/    3098 : (MACRO)             	reserve 18
    2713/    30A2 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
    2714/    30AF : (MACRO)             	st2 r13,'O',sp,(22); flag1 
    2715/    30BC :                     ;void printlint(long s){ //print a long integer
    2716/    30BC :                     ;	printstr(ltoa(s,buffer));
    2717/    30BC : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
    2718/    30CC : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
    2719/    30D4 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2720/    30E1 : (MACRO)             	Ccall _ltoa
    2721/    30E4 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
    2722/    30E8 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2723/    30EC : (MACRO)             	Ccall _printstr
    2724/    30EF :                     ;}
    2725/    30EF :                     L387:
    2726/    30EF : (MACRO)             	release 18
    2727/    30F7 : (MACRO)             	Cretn
    2728/    30F8 :                     
    2729/    30F8 :                     _putxn:
    2730/    30F8 : (MACRO)             	reserve 4
    2731/    30FC : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2732/    3109 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2733/    3115 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    2734/    311F :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
    2735/    311F :                     ;	if (x<10){
    2736/    311F : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2737/    3129 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2738/    312C : (MACRO)             	jcI2I r11,10,lbdf,L389; GE is flipped test from LT
    2739/    313D :                     ;		putc(x+'0');
    2740/    313D : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2741/    3147 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2742/    314A : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
    2743/    3152 : (MACRO)             	cpy1 R12,R11
    2744/    3154 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2745/    3157 : (MACRO)             	Ccall _putc
    2746/    315A :                     ;	} else {
    2747/    315A : C0 31 82            	lbr L390
    2748/    315D :                     L389:
    2749/    315D :                     ;		putc(x+'A'-10);
    2750/    315D : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2751/    3167 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2752/    316A : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
    2753/    3172 : (MACRO)             	alu2I R11,R11,10,smi,smbi
    2754/    317A : (MACRO)             	cpy1 R12,R11
    2755/    317C : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2756/    317F : (MACRO)             	Ccall _putc
    2757/    3182 :                     ;	}
    2758/    3182 :                     L390:
    2759/    3182 :                     ;}
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 47 - 4/25/2013 10:34:17


    2760/    3182 :                     L388:
    2761/    3182 : (MACRO)             	release 4
    2762/    3186 : (MACRO)             	Cretn
    2763/    3187 :                     
    2764/    3187 :                     _putx:
    2765/    3187 : (MACRO)             	reserve 4
    2766/    318B : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2767/    3198 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
    2768/    31A4 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    2769/    31AE :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
    2770/    31AE :                     ;	putxn(x>>4);
    2771/    31AE : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2772/    31B8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2773/    31BB : (MACRO)             	shrI2I R11,4
    2774/    31DB : (MACRO)             	cpy1 R12,R11
    2775/    31DD : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2776/    31E0 : (MACRO)             	Ccall _putxn
    2777/    31E3 :                     ;	putxn(x & 0x0F);
    2778/    31E3 : (MACRO)             	ld1 R11,'O',sp,(0+6)
    2779/    31ED : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2780/    31F0 : (MACRO)             	alu2I R11,R11,15,ani,ani
    2781/    31F8 :                     	;removed ?	cpy2 R11,R11
    2782/    31F8 : (MACRO)             	cpy1 R12,R11
    2783/    31FA : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2784/    31FD : (MACRO)             	Ccall _putxn
    2785/    3200 :                     ;}
    2786/    3200 :                     L391:
    2787/    3200 : (MACRO)             	release 4
    2788/    3204 : (MACRO)             	Cretn
    2789/    3205 :                     
    2790/    3205 :                     _printf:
    2791/    3205 : (MACRO)             	reserve 4; save room for local variables
    2792/    3209 : (MACRO)             	pushr r0
    2793/    320E : (MACRO)             	pushr r1
    2794/    3213 : (MACRO)             	pushr r7
    2795/    3218 : (MACRO)             	reserve 4; save room for outgoing arguments
    2796/    321C : (MACRO)             	st2 r12,'O',sp,(16); flag1 
    2797/    3229 : (MACRO)             	st2 r13,'O',sp,(18); flag2
    2798/    3236 :                     ;void printf(char *ptr,...){ //limited implementation of printf
    2799/    3236 :                     ;	int argslot=0;	//used to align longs
    2800/    3236 : (MACRO)             	ld2z R0
    2801/    323A :                     ;	int * this=(int *)&ptr;
    2802/    323A : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
    2803/    3242 :                     ;	this++; argslot++; //advance argument pointer and slot #
    2804/    3242 : (MACRO)             	incm R1,2
    2805/    3244 : (MACRO)             	incm R0,1
    2806/    3245 : C0 35 F5            	lbr L394
    2807/    3248 :                     L393:
    2808/    3248 :                     ;    while(*ptr) {
    2809/    3248 :                     ;		c=*ptr++;
    2810/    3248 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2811/    3254 : (MACRO)             	cpy2 R10,R11
    2812/    3258 : (MACRO)             	incm R10,1
    2813/    3259 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2814/    3266 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2815/    3268 :                     ;		if (c!='%'){
    2816/    3268 : (MACRO)             	cpy1 R11,R7
    2817/    326A : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2818/    326D : (MACRO)             	jeqU2I r11,37,L396;EQI2(reg,con)
    2819/    3279 :                     ;			putc(c);
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 48 - 4/25/2013 10:34:17


    2820/    3279 : (MACRO)             	cpy1 R12,R7
    2821/    327B : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2822/    327E : (MACRO)             	Ccall _putc
    2823/    3281 :                     ;		} else{
    2824/    3281 : C0 35 F5            	lbr L397
    2825/    3284 :                     L396:
    2826/    3284 :                     ;			c=*ptr++;
    2827/    3284 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2828/    3290 : (MACRO)             	cpy2 R10,R11
    2829/    3294 : (MACRO)             	incm R10,1
    2830/    3295 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2831/    32A2 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
    2832/    32A4 :                     ;			switch (c){
    2833/    32A4 : (MACRO)             	cpy1 R11,R7
    2834/    32A6 : (MACRO)             	zExt R11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2835/    32A9 : (MACRO)             	st2 R11,'O',sp,(-5+16); ASGNI2(addr,reg)*;
    2836/    32B6 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    2837/    32C2 : (MACRO)             	jeqU2I r11,105,L401;EQI2(reg,con)
    2838/    32CE : (MACRO)             	ldaD R10,108; reg:acon
    2839/    32D4 : (MACRO)             	jeqI2 r11,r10,L405; EQI2(reg,reg)
    2840/    32E6 : (MACRO)             	jcI2 r10,r11,lbnf,L413 ;GT is reversed operands from LT
    2841/    32FA :                     L412:
    2842/    32FA : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    2843/    3306 : (MACRO)             	ldaD R10,88; reg:acon
    2844/    330C : (MACRO)             	jeqI2 r11,r10,L404; EQI2(reg,reg)
    2845/    331E : (MACRO)             	jcI2 r11,r10,lbnf,L398; LT=lbnf i.e. subtract B from A and jump if borrow 
    2846/    3332 :                     L414:
    2847/    3332 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    2848/    333E : (MACRO)             	jeqU2I r11,99,L403;EQI2(reg,con)
    2849/    334A : (MACRO)             	jeqU2I r11,100,L401;EQI2(reg,con)
    2850/    3356 : C0 35 E4            	lbr L398
    2851/    3359 :                     L413:
    2852/    3359 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    2853/    3365 : (MACRO)             	ldaD R10,115; reg:acon
    2854/    336B : (MACRO)             	jeqI2 r11,r10,L402; EQI2(reg,reg)
    2855/    337D : (MACRO)             	jcI2 r11,r10,lbnf,L398; LT=lbnf i.e. subtract B from A and jump if borrow 
    2856/    3391 :                     L415:
    2857/    3391 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
    2858/    339D : (MACRO)             	jeqU2I r11,120,L404;EQI2(reg,con)
    2859/    33A9 : C0 35 E4            	lbr L398
    2860/    33AC :                     L401:
    2861/    33AC :                     ;					printint(*this++);
    2862/    33AC : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2863/    33B0 : (MACRO)             	cpy2 R1,R11
    2864/    33B4 : (MACRO)             	incm R1,2
    2865/    33B6 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
    2866/    33C2 : (MACRO)             	Ccall _printint
    2867/    33C5 :                     ;					argslot+=1; //next argument slot
    2868/    33C5 : (MACRO)             	incm R0,1
    2869/    33C6 :                     ;					break;
    2870/    33C6 : C0 35 F5            	lbr L399
    2871/    33C9 :                     L402:
    2872/    33C9 :                     ;					printstr((char*) *this++);
    2873/    33C9 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2874/    33CD : (MACRO)             	cpy2 R1,R11
    2875/    33D1 : (MACRO)             	incm R1,2
    2876/    33D3 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2877/    33DF : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
    2878/    33E3 : (MACRO)             	Ccall _printstr
    2879/    33E6 :                     ;					argslot+=1; //next argument slot
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 49 - 4/25/2013 10:34:17


    2880/    33E6 : (MACRO)             	incm R0,1
    2881/    33E7 :                     ;					break;
    2882/    33E7 : C0 35 F5            	lbr L399
    2883/    33EA :                     L403:
    2884/    33EA :                     ;					putc((unsigned int) *this++);
    2885/    33EA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2886/    33EE : (MACRO)             	cpy2 R1,R11
    2887/    33F2 : (MACRO)             	incm R1,2
    2888/    33F4 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2889/    3400 : (MACRO)             	cpy1 R12,R11
    2890/    3402 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2891/    3405 : (MACRO)             	Ccall _putc
    2892/    3408 :                     ;					argslot+=1; //next argument slot
    2893/    3408 : (MACRO)             	incm R0,1
    2894/    3409 :                     ;					break;
    2895/    3409 : C0 35 F5            	lbr L399
    2896/    340C :                     L404:
    2897/    340C :                     ;					putx(((unsigned int) *this)>>8);
    2898/    340C : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    2899/    3418 : (MACRO)             	shrU2I R11,8
    2900/    3448 : (MACRO)             	cpy1 R12,R11
    2901/    344A : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2902/    344D : (MACRO)             	Ccall _putx
    2903/    3450 :                     ;					putx(((unsigned int) *this++)&255);
    2904/    3450 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2905/    3454 : (MACRO)             	cpy2 R1,R11
    2906/    3458 : (MACRO)             	incm R1,2
    2907/    345A : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2908/    3466 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2909/    346E : (MACRO)             	cpy1 R12,R11
    2910/    3470 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2911/    3473 : (MACRO)             	Ccall _putx
    2912/    3476 :                     ;					argslot+=1; //next argument slot
    2913/    3476 : (MACRO)             	incm R0,1
    2914/    3477 :                     ;					break;
    2915/    3477 : C0 35 F5            	lbr L399
    2916/    347A :                     L405:
    2917/    347A :                     ;					if (*ptr){ //as long as there's something there
    2918/    347A : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2919/    3486 : (MACRO)             	ld1 R11,'O',R11,0
    2920/    3490 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2921/    3493 : (MACRO)             	jzU2 r11,L406; EQ 0
    2922/    349B :                     ;						xord=*ptr++;
    2923/    349B : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    2924/    34A7 : (MACRO)             	cpy2 R10,R11
    2925/    34AB : (MACRO)             	incm R10,1
    2926/    34AC : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
    2927/    34B9 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
    2928/    34BB : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
    2929/    34C5 :                     ;						if (argslot&1) {
    2930/    34C5 : (MACRO)             	alu2I R11,R0,1,ani,ani
    2931/    34CD :                     	;removed ?	cpy2 R11,R0
    2932/    34CD : (MACRO)             	jzU2 r11,L408; EQ 0
    2933/    34D5 :                     ;							this++;
    2934/    34D5 : (MACRO)             	incm R1,2
    2935/    34D7 :                     ;							argslot++;
    2936/    34D7 : (MACRO)             	incm R0,1
    2937/    34D8 :                     ;						}
    2938/    34D8 :                     L408:
    2939/    34D8 :                     ;						if(xord=='d'){
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 50 - 4/25/2013 10:34:17


    2940/    34D8 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
    2941/    34E2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2942/    34E5 : (MACRO)             	jneU2I r11,100,L410; NE
    2943/    34F1 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
    2944/    34F1 : (MACRO)             	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
    2945/    3501 : (MACRO)             	Ccall _printlint
    2946/    3504 :                     ;							this+=2;				// and advances it 4 bytes
    2947/    3504 : (MACRO)             	incm R1,4
    2948/    3508 :                     ;						} else{
    2949/    3508 : C0 35 DF            	lbr L411
    2950/    350B :                     L410:
    2951/    350B :                     ;							putx(((unsigned int) *this)>>8);
    2952/    350B : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    2953/    3517 : (MACRO)             	shrU2I R11,8
    2954/    3547 : (MACRO)             	cpy1 R12,R11
    2955/    3549 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2956/    354C : (MACRO)             	Ccall _putx
    2957/    354F :                     ;							putx(((unsigned int) *this++)&255);
    2958/    354F : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2959/    3553 : (MACRO)             	cpy2 R1,R11
    2960/    3557 : (MACRO)             	incm R1,2
    2961/    3559 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2962/    3565 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2963/    356D : (MACRO)             	cpy1 R12,R11
    2964/    356F : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2965/    3572 : (MACRO)             	Ccall _putx
    2966/    3575 :                     ;							putx(((unsigned int) *this)>>8);
    2967/    3575 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
    2968/    3581 : (MACRO)             	shrU2I R11,8
    2969/    35B1 : (MACRO)             	cpy1 R12,R11
    2970/    35B3 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2971/    35B6 : (MACRO)             	Ccall _putx
    2972/    35B9 :                     ;							putx(((unsigned int) *this++)&255);
    2973/    35B9 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    2974/    35BD : (MACRO)             	cpy2 R1,R11
    2975/    35C1 : (MACRO)             	incm R1,2
    2976/    35C3 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    2977/    35CF : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    2978/    35D7 : (MACRO)             	cpy1 R12,R11
    2979/    35D9 : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2980/    35DC : (MACRO)             	Ccall _putx
    2981/    35DF :                     ;						}
    2982/    35DF :                     L411:
    2983/    35DF :                     ;						argslot+=2;
    2984/    35DF : (MACRO)             	incm R0,2
    2985/    35E1 :                     ;						break;
    2986/    35E1 : C0 35 F5            	lbr L399
    2987/    35E4 :                     L406:
    2988/    35E4 :                     L398:
    2989/    35E4 :                     ;					putc('%');putc(c);
    2990/    35E4 : (MACRO)             	ldaD R12,37; reg:acon
    2991/    35EA : (MACRO)             	Ccall _putc
    2992/    35ED : (MACRO)             	cpy1 R12,R7
    2993/    35EF : (MACRO)             	zExt R12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    2994/    35F2 : (MACRO)             	Ccall _putc
    2995/    35F5 :                     ;			} //switch
    2996/    35F5 :                     L399:
    2997/    35F5 :                     ;		} //%
    2998/    35F5 :                     L397:
    2999/    35F5 :                     ;	} //while
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 51 - 4/25/2013 10:34:17


    3000/    35F5 :                     L394:
    3001/    35F5 :                     ;    while(*ptr) {
    3002/    35F5 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    3003/    3601 : (MACRO)             	ld1 R11,'O',R11,0
    3004/    360B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3005/    360E : (MACRO)             	jnzU2 r11,L393; NE 0
    3006/    3616 :                     ;} //prtf
    3007/    3616 :                     L392:
    3008/    3616 : (MACRO)             	release 4; release room for outgoing arguments
    3009/    361A : (MACRO)             	popr r7
    3010/    361E : (MACRO)             	popr r1
    3011/    3622 : (MACRO)             	popr r0
    3012/    3626 : (MACRO)             	release 4; release room for local variables 
    3013/    362A : (MACRO)             	Cretn
    3014/    362B :                     
    3015/    362B :                     _exit:
    3016/    362B : (MACRO)             	reserve 4
    3017/    362F : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    3018/    363C :                     ;void exit(int code){
    3019/    363C :                     ;	printf("exit %d\n",code);
    3020/    363C : (MACRO)             	ldaD R12,L417; reg:acon
    3021/    3642 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    3022/    364E : (MACRO)             	Ccall _printf
    3023/    3651 :                     L418:
    3024/    3651 :                     ;	while(1);
    3025/    3651 :                     L419:
    3026/    3651 : C0 36 51            	lbr L418
    3027/    3654 :                     ;}
    3028/    3654 :                     L416:
    3029/    3654 : (MACRO)             	release 4
    3030/    3658 : (MACRO)             	Cretn
    3031/    3659 :                     
    3032/    3659 :                     _memcmp:
    3033/    3659 : (MACRO)             	reserve 2; save room for local variables
    3034/    365B : (MACRO)             	pushr r0
    3035/    3660 : (MACRO)             	pushr r1
    3036/    3665 : (MACRO)             	pushr r7
    3037/    366A : (MACRO)             	reserve 0; save room for outgoing arguments
    3038/    366A : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    3039/    3676 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    3040/    3676 :                     ;    int v = 0;
    3041/    3676 : (MACRO)             	ld2z R1
    3042/    367A :                     ;    p1 = (unsigned char *)Ptr1;
    3043/    367A : (MACRO)             	cpy2 R0,R12 ;LOADP2(reg)
    3044/    367E :                     ;    p2 = (unsigned char *)Ptr2;
    3045/    367E : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
    3046/    368B : C0 36 DB            	lbr L423
    3047/    368E :                     L422:
    3048/    368E :                     ;    while(Count-- > 0 && v == 0) {
    3049/    368E :                     ;        v = *(p1++) - *(p2++);
    3050/    368E : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
    3051/    3692 : (MACRO)             	cpy2 R0,R11
    3052/    3696 : (MACRO)             	incm R0,1
    3053/    3697 : (MACRO)             	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
    3054/    36A3 : (MACRO)             	cpy2 R9,R10
    3055/    36A7 : (MACRO)             	incm R9,1
    3056/    36A8 : (MACRO)             	st2 R9,'O',sp,(-4+10); ASGNP2
    3057/    36B5 : (MACRO)             	ld1 R11,'O',R11,0
    3058/    36BF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3059/    36C2 : (MACRO)             	ld1 R10,'O',R10,0
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 52 - 4/25/2013 10:34:17


    3060/    36CC : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    3061/    36CF : (MACRO)             	alu2 R1,R11,R10,sm,smb
    3062/    36DB :                     ;    }
    3063/    36DB :                     L423:
    3064/    36DB :                     ;    while(Count-- > 0 && v == 0) {
    3065/    36DB : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    3066/    36DF : (MACRO)             	cpy2 R7,R11
    3067/    36E3 : (MACRO)             	decm R7,1
    3068/    36E4 : (MACRO)             	jeqU2I r11,0,L425;EQU2(reg,con)
    3069/    36F0 : (MACRO)             	jzU2 r1,L422; EQ 0
    3070/    36F8 :                     L425:
    3071/    36F8 :                     ;    return v;
    3072/    36F8 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)*
    3073/    36FC :                     L421:
    3074/    36FC : (MACRO)             	release 0; release room for outgoing arguments
    3075/    36FC : (MACRO)             	popr r7
    3076/    3700 : (MACRO)             	popr r1
    3077/    3704 : (MACRO)             	popr r0
    3078/    3708 : (MACRO)             	release 2; release room for local variables 
    3079/    370A : (MACRO)             	Cretn
    3080/    370B :                     
    3081/    370B :                     _memcpy:
    3082/    370B : (MACRO)             	reserve 0; save room for local variables
    3083/    370B : (MACRO)             	pushr r0
    3084/    3710 : (MACRO)             	pushr r1
    3085/    3715 : (MACRO)             	pushr r7
    3086/    371A : (MACRO)             	reserve 0; save room for outgoing arguments
    3087/    371A : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    3088/    3726 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    3089/    3726 :                     ;        char* dst8 = (char*)dest;
    3090/    3726 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    3091/    372A :                     ;        char* src8 = (char*)src;
    3092/    372A : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    3093/    372E : C0 37 47            	lbr L428
    3094/    3731 :                     L427:
    3095/    3731 :                     ;        while (count--) {
    3096/    3731 :                     ;            *dst8++ = *src8++;
    3097/    3731 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    3098/    3735 : (MACRO)             	cpy2 R1,R11
    3099/    3739 : (MACRO)             	incm R1,1
    3100/    373A : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
    3101/    373E : (MACRO)             	cpy2 R0,R10
    3102/    3742 : (MACRO)             	incm R0,1
    3103/    3743 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    3104/    3745 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    3105/    3747 :                     ;        }
    3106/    3747 :                     L428:
    3107/    3747 :                     ;        while (count--) {
    3108/    3747 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    3109/    374B : (MACRO)             	cpy2 R7,R11
    3110/    374F : (MACRO)             	decm R7,1
    3111/    3750 : (MACRO)             	jnzU2 r11,L427; NE 0
    3112/    3758 :                     ;        return dest;
    3113/    3758 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    3114/    375C :                     L426:
    3115/    375C : (MACRO)             	release 0; release room for outgoing arguments
    3116/    375C : (MACRO)             	popr r7
    3117/    3760 : (MACRO)             	popr r1
    3118/    3764 : (MACRO)             	popr r0
    3119/    3768 : (MACRO)             	release 0; release room for local variables 
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 53 - 4/25/2013 10:34:17


    3120/    3768 : (MACRO)             	Cretn
    3121/    3769 :                     
    3122/    3769 :                     _memset:
    3123/    3769 : (MACRO)             	reserve 0; save room for local variables
    3124/    3769 : (MACRO)             	pushr r1
    3125/    376E : (MACRO)             	pushr r7
    3126/    3773 : (MACRO)             	reserve 0; save room for outgoing arguments
    3127/    3773 : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    3128/    377F :                     ;{
    3129/    377F :                     ;    unsigned char* p=s;
    3130/    377F : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    3131/    3783 : C0 37 95            	lbr L432
    3132/    3786 :                     L431:
    3133/    3786 :                     ;        *p++ = (unsigned char)c;
    3134/    3786 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    3135/    378A : (MACRO)             	cpy2 R1,R11
    3136/    378E : (MACRO)             	incm R1,1
    3137/    378F : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    3138/    3793 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    3139/    3795 :                     L432:
    3140/    3795 :                     ;    while(n--)
    3141/    3795 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    3142/    3799 : (MACRO)             	cpy2 R7,R11
    3143/    379D : (MACRO)             	decm R7,1
    3144/    379E : (MACRO)             	jnzU2 r11,L431; NE 0
    3145/    37A6 :                     ;    return s;
    3146/    37A6 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    3147/    37AA :                     L430:
    3148/    37AA : (MACRO)             	release 0; release room for outgoing arguments
    3149/    37AA : (MACRO)             	popr r7
    3150/    37AE : (MACRO)             	popr r1
    3151/    37B2 : (MACRO)             	release 0; release room for local variables 
    3152/    37B2 : (MACRO)             	Cretn
    3153/    37B3 :                     
    3154/    37B3 :                     _delay:
    3155/    37B3 : (MACRO)             	reserve 0; save room for local variables
    3156/    37B3 : (MACRO)             	pushr r1
    3157/    37B8 : (MACRO)             	pushr r7
    3158/    37BD : (MACRO)             	reserve 4; save room for outgoing arguments
    3159/    37C1 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    3160/    37C5 :                     ;void delay(unsigned int howlong){
    3161/    37C5 :                     ;	for (i=1;i!=howlong;i++){
    3162/    37C5 : (MACRO)             	ldaD R1,1; reg:acon
    3163/    37CB : C0 37 D2            	lbr L438
    3164/    37CE :                     L435:
    3165/    37CE :                     ;		oneMs();
    3166/    37CE : (MACRO)             	Ccall _oneMs
    3167/    37D1 :                     ;	}
    3168/    37D1 :                     L436:
    3169/    37D1 :                     ;	for (i=1;i!=howlong;i++){
    3170/    37D1 : (MACRO)             	incm R1,1
    3171/    37D2 :                     L438:
    3172/    37D2 : (MACRO)             	jneU2 r1,r7,L435; NE
    3173/    37E4 :                     ;}
    3174/    37E4 :                     L434:
    3175/    37E4 : (MACRO)             	release 4; release room for outgoing arguments
    3176/    37E8 : (MACRO)             	popr r7
    3177/    37EC : (MACRO)             	popr r1
    3178/    37F0 : (MACRO)             	release 0; release room for local variables 
    3179/    37F0 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 54 - 4/25/2013 10:34:17


    3180/    37F1 :                     
    3181/    37F1 :                     _olduinoincluder:
    3182/    37F1 :                     ;void olduinoincluder(){
    3183/    37F1 :                     ;	asm("\tinclude olduino.inc\n");
    3184/    37F1 :                     	include olduino.inc
(1)    1/    37F1 :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/    37F1 :                     
(1)    3/    37F1 :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/    37F1 :                     	align 64	;needed to make sure all on same page
(1)    5/    3800 :                     _digitalWrite:
(1)    6/    3800 : 8C                  	glo regArg1	;get the bit number
(1)    7/    3801 : FC 1F               	adi $$bvtable&255	;add the table offset
(1)    8/    3803 : AE                  	plo memaddr
(1)    9/    3804 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/    3805 : BE                  	phi memaddr	
(1)   11/    3806 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/    3807 : A8                  	plo rt1		;save it in a temp
(1)   13/    3808 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   14/    380E : EE                  	sex memaddr	;prepare to change it
(1)   15/    380F : 8D                  	glo regArg2	;get on/off switch
(1)   16/    3810 : 32 17               	bz $$setbitoff
(1)   17/    3812 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/    3812 : 88                  	glo rt1		;get the bit value back
(1)   19/    3813 : F1                  	or		;apply it
(1)   20/    3814 : 5E                  	str memaddr	;and save it
(1)   21/    3815 : 30 1C               	br $$outit	;go fnish up
(1)   22/    3817 :                     $$setbitoff:
(1)   23/    3817 : 88                  	glo rt1		;get the bit pattern
(1)   24/    3818 : FB FF               	xri 0xff	;reverse it
(1)   25/    381A : F2                  	and		;combine it with the existing pin value
(1)   26/    381B : 5E                  	str memaddr	;and save it
(1)   27/    381C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/    381C :                     $$outit:
(1)   29/    381C : 64                  	out 4		;X was already set to memaddr
(1)   30/    381D : E2                  	sex sp		;reset X
(1)   31/    381E : (MACRO)             	cretn
(1)   32/    381F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/    3827 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/    3827 :                     	align 8	;protect jump boundary
(1)   35/    3828 :                     _digitalRead:
(1)   36/    3828 : F8 00               	ldi 0		;default is false
(1)   37/    382A : AF                  	plo R15
(1)   38/    382B : BF                  	phi R15
(1)   39/    382C : 36 2F               	b3 +		;i have to reverse the sense of the external line
(1)   40/    382E : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/    382F : (MACRO)             +	cretn
(1)   42/    3830 :                     
    3185/    3830 :                     ;}
    3186/    3830 :                     L439:
    3187/    3830 : (MACRO)             	Cretn
    3188/    3831 :                     
    3189/    3831 :                     _info_data_len:
    3190/    3831 : 00 00               	db 2 dup (0); zerofill global
    3191/    3833 :                     _waitgwmac:
    3192/    3833 : 00                  	db 1 dup (0); zerofill global
    3193/    3834 :                     _gwmacaddr:
    3194/    3834 : 00 00 00 00 00 00   	db 6 dup (0); zerofill global
    3195/    383A :                     _icmp_cb:
    3196/    383A : 00 00               	db 2 dup (0); zerofill global
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 55 - 4/25/2013 10:34:17


    3197/    383C :                     _client_hoststr:
    3198/    383C : 00 00               	db 2 dup (0); zerofill global
    3199/    383E :                     _client_urlbuf_var:
    3200/    383E : 00 00               	db 2 dup (0); zerofill global
    3201/    3840 :                     _client_urlbuf:
    3202/    3840 : 00 00               	db 2 dup (0); zerofill global
    3203/    3842 :                     _client_postval:
    3204/    3842 : 00 00               	db 2 dup (0); zerofill global
    3205/    3844 :                     _client_additionalheaderline:
    3206/    3844 : 00 00               	db 2 dup (0); zerofill global
    3207/    3846 :                     _client_browser_cb:
    3208/    3846 : 00 00               	db 2 dup (0); zerofill global
    3209/    3848 :                     _www_fd:
    3210/    3848 : 00                  	db 1 dup (0); zerofill global
    3211/    3849 :                     _client_tcp_datafill_cb:
    3212/    3849 : 00 00               	db 2 dup (0); zerofill global
    3213/    384B :                     _client_tcp_result_cb:
    3214/    384B : 00 00               	db 2 dup (0); zerofill global
    3215/    384D :                     _tcp_client_port_l:
    3216/    384D : 00                  	db 1 dup (0); zerofill global
    3217/    384E :                     _tcp_client_port_h:
    3218/    384E : 00                  	db 1 dup (0); zerofill global
    3219/    384F :                     _tcp_client_state:
    3220/    384F : 00                  	db 1 dup (0); zerofill global
    3221/    3850 :                     _tcp_fd:
    3222/    3850 : 00                  	db 1 dup (0); zerofill global
    3223/    3851 :                     _buffer:
    3224/    3851 : 00 00 00 00 00 00   	db 700 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 56 - 4/25/2013 10:34:17


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 57 - 4/25/2013 10:34:17


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 
    3225/    3B0D :                     _hisip:
    3226/    3B0D : 00 00 00 00         	db 4 dup (0); zerofill global
    3227/    3B11 :                     _dnsip:
    3228/    3B11 : 00 00 00 00         	db 4 dup (0); zerofill global
    3229/    3B15 :                     _dhcpip:
    3230/    3B15 : 00 00 00 00         	db 4 dup (0); zerofill global
    3231/    3B19 :                     _gwip:
    3232/    3B19 : 00 00 00 00         	db 4 dup (0); zerofill global
    3233/    3B1D :                     _mymask:
    3234/    3B1D : 00 00 00 00         	db 4 dup (0); zerofill global
    3235/    3B21 :                     _gNextPacketPtr:
    3236/    3B21 : 00 00               	db 2 dup (0); zerofill global
    3237/    3B23 :                     _Enc28j60Bank:
    3238/    3B23 : 00                  	db 1 dup (0); zerofill global
    3239/    3B24 :                     _bufferSize:
    3240/    3B24 : 00 00               	db 2 dup (0); zerofill global
    3241/    3B26 :                     L417:
    3242/    3B26 : 65                  	db 101
    3243/    3B27 : 78                  	db 120
    3244/    3B28 : 69                  	db 105
    3245/    3B29 : 74                  	db 116
    3246/    3B2A : 20                  	db 32
    3247/    3B2B : 25                  	db 37
    3248/    3B2C : 64                  	db 100
    3249/    3B2D : 0A                  	db 10
    3250/    3B2E : 00                  	db 0
    3251/    3B2F :                     L351:
    3252/    3B2F : 0A                  	db 10
    3253/    3B30 : 00                  	db 0
    3254/    3B31 :                     L342:
    3255/    3B31 : 64                  	db 100
    3256/    3B32 : 75                  	db 117
    3257/    3B33 : 6D                  	db 109
    3258/    3B34 : 70                  	db 112
    3259/    3B35 : 69                  	db 105
    3260/    3B36 : 6E                  	db 110
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 58 - 4/25/2013 10:34:17


    3261/    3B37 : 67                  	db 103
    3262/    3B38 : 20                  	db 32
    3263/    3B39 : 25                  	db 37
    3264/    3B3A : 64                  	db 100
    3265/    3B3B : 0A                  	db 10
    3266/    3B3C : 00                  	db 0
    3267/    3B3D :                     L15:
    3268/    3B3D : 65                  	db 101
    3269/    3B3E : 6E                  	db 110
    3270/    3B3F : 63                  	db 99
    3271/    3B40 : 6D                  	db 109
    3272/    3B41 : 75                  	db 117
    3273/    3B42 : 6C                  	db 108
    3274/    3B43 : 65                  	db 101
    3275/    3B44 : 20                  	db 32
    3276/    3B45 : 2D                  	db 45
    3277/    3B46 : 20                  	db 32
    3278/    3B47 : 77                  	db 119
    3279/    3B48 : 61                  	db 97
    3280/    3B49 : 74                  	db 116
    3281/    3B4A : 63                  	db 99
    3282/    3B4B : 68                  	db 104
    3283/    3B4C : 20                  	db 32
    3284/    3B4D : 6D                  	db 109
    3285/    3B4E : 79                  	db 121
    3286/    3B4F : 20                  	db 32
    3287/    3B50 : 51                  	db 81
    3288/    3B51 : 21                  	db 33
    3289/    3B52 : 0A                  	db 10
    3290/    3B53 : 00                  	db 0
    3291/    3B54 :                     L11:
    3292/    3B54 : 61                  	db 97
    3293/    3B55 : 6E                  	db 110
    3294/    3B56 : 64                  	db 100
    3295/    3B57 : 20                  	db 32
    3296/    3B58 : 77                  	db 119
    3297/    3B59 : 65                  	db 101
    3298/    3B5A : 27                  	db 39
    3299/    3B5B : 72                  	db 114
    3300/    3B5C : 65                  	db 101
    3301/    3B5D : 20                  	db 32
    3302/    3B5E : 64                  	db 100
    3303/    3B5F : 6F                  	db 111
    3304/    3B60 : 6E                  	db 110
    3305/    3B61 : 65                  	db 101
    3306/    3B62 : 0A                  	db 10
    3307/    3B63 : 00                  	db 0
    3308/    3B64 :                     L10:
    3309/    3B64 : 4D                  	db 77
    3310/    3B65 : 41                  	db 65
    3311/    3B66 : 43                  	db 67
    3312/    3B67 : 74                  	db 116
    3313/    3B68 : 61                  	db 97
    3314/    3B69 : 69                  	db 105
    3315/    3B6A : 6C                  	db 108
    3316/    3B6B : 20                  	db 32
    3317/    3B6C : 72                  	db 114
    3318/    3B6D : 65                  	db 101
    3319/    3B6E : 61                  	db 97
    3320/    3B6F : 64                  	db 100
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 59 - 4/25/2013 10:34:17


    3321/    3B70 : 62                  	db 98
    3322/    3B71 : 61                  	db 97
    3323/    3B72 : 63                  	db 99
    3324/    3B73 : 6B                  	db 107
    3325/    3B74 : 3A                  	db 58
    3326/    3B75 : 20                  	db 32
    3327/    3B76 : 25                  	db 37
    3328/    3B77 : 78                  	db 120
    3329/    3B78 : 3A                  	db 58
    3330/    3B79 : 25                  	db 37
    3331/    3B7A : 78                  	db 120
    3332/    3B7B : 0A                  	db 10
    3333/    3B7C : 00                  	db 0
    3334/    3B7D :                     L9:
    3335/    3B7D : 72                  	db 114
    3336/    3B7E : 65                  	db 101
    3337/    3B7F : 61                  	db 97
    3338/    3B80 : 64                  	db 100
    3339/    3B81 : 52                  	db 82
    3340/    3B82 : 65                  	db 101
    3341/    3B83 : 67                  	db 103
    3342/    3B84 : 42                  	db 66
    3343/    3B85 : 79                  	db 121
    3344/    3B86 : 74                  	db 116
    3345/    3B87 : 65                  	db 101
    3346/    3B88 : 28                  	db 40
    3347/    3B89 : 45                  	db 69
    3348/    3B8A : 53                  	db 83
    3349/    3B8B : 54                  	db 84
    3350/    3B8C : 41                  	db 65
    3351/    3B8D : 54                  	db 84
    3352/    3B8E : 29                  	db 41
    3353/    3B8F : 20                  	db 32
    3354/    3B90 : 72                  	db 114
    3355/    3B91 : 65                  	db 101
    3356/    3B92 : 74                  	db 116
    3357/    3B93 : 75                  	db 117
    3358/    3B94 : 72                  	db 114
    3359/    3B95 : 6E                  	db 110
    3360/    3B96 : 73                  	db 115
    3361/    3B97 : 3A                  	db 58
    3362/    3B98 : 20                  	db 32
    3363/    3B99 : 25                  	db 37
    3364/    3B9A : 78                  	db 120
    3365/    3B9B : 0A                  	db 10
    3366/    3B9C : 00                  	db 0
    3367/    3B9D :                     L8:
    3368/    3B9D : 72                  	db 114
    3369/    3B9E : 65                  	db 101
    3370/    3B9F : 61                  	db 97
    3371/    3BA0 : 64                  	db 100
    3372/    3BA1 : 52                  	db 82
    3373/    3BA2 : 65                  	db 101
    3374/    3BA3 : 67                  	db 103
    3375/    3BA4 : 42                  	db 66
    3376/    3BA5 : 79                  	db 121
    3377/    3BA6 : 74                  	db 116
    3378/    3BA7 : 65                  	db 101
    3379/    3BA8 : 28                  	db 40
    3380/    3BA9 : 45                  	db 69
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 60 - 4/25/2013 10:34:17


    3381/    3BAA : 52                  	db 82
    3382/    3BAB : 45                  	db 69
    3383/    3BAC : 56                  	db 86
    3384/    3BAD : 49                  	db 73
    3385/    3BAE : 44                  	db 68
    3386/    3BAF : 29                  	db 41
    3387/    3BB0 : 20                  	db 32
    3388/    3BB1 : 72                  	db 114
    3389/    3BB2 : 65                  	db 101
    3390/    3BB3 : 74                  	db 116
    3391/    3BB4 : 75                  	db 117
    3392/    3BB5 : 72                  	db 114
    3393/    3BB6 : 6E                  	db 110
    3394/    3BB7 : 73                  	db 115
    3395/    3BB8 : 3A                  	db 58
    3396/    3BB9 : 20                  	db 32
    3397/    3BBA : 25                  	db 37
    3398/    3BBB : 78                  	db 120
    3399/    3BBC : 0A                  	db 10
    3400/    3BBD : 00                  	db 0
    3401/    3BBE :                     L7:
    3402/    3BBE : 72                  	db 114
    3403/    3BBF : 65                  	db 101
    3404/    3BC0 : 61                  	db 97
    3405/    3BC1 : 64                  	db 100
    3406/    3BC2 : 52                  	db 82
    3407/    3BC3 : 65                  	db 101
    3408/    3BC4 : 67                  	db 103
    3409/    3BC5 : 42                  	db 66
    3410/    3BC6 : 79                  	db 121
    3411/    3BC7 : 74                  	db 116
    3412/    3BC8 : 65                  	db 101
    3413/    3BC9 : 28                  	db 40
    3414/    3BCA : 45                  	db 69
    3415/    3BCB : 43                  	db 67
    3416/    3BCC : 4F                  	db 79
    3417/    3BCD : 4E                  	db 78
    3418/    3BCE : 31                  	db 49
    3419/    3BCF : 29                  	db 41
    3420/    3BD0 : 20                  	db 32
    3421/    3BD1 : 72                  	db 114
    3422/    3BD2 : 65                  	db 101
    3423/    3BD3 : 74                  	db 116
    3424/    3BD4 : 75                  	db 117
    3425/    3BD5 : 72                  	db 114
    3426/    3BD6 : 6E                  	db 110
    3427/    3BD7 : 73                  	db 115
    3428/    3BD8 : 3A                  	db 58
    3429/    3BD9 : 20                  	db 32
    3430/    3BDA : 25                  	db 37
    3431/    3BDB : 78                  	db 120
    3432/    3BDC : 0A                  	db 10
    3433/    3BDD : 00                  	db 0
    3434/    3BDE :                     L6:
    3435/    3BDE : 46                  	db 70
    3436/    3BDF : 61                  	db 97
    3437/    3BE0 : 69                  	db 105
    3438/    3BE1 : 6C                  	db 108
    3439/    3BE2 : 65                  	db 101
    3440/    3BE3 : 64                  	db 100
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 61 - 4/25/2013 10:34:17


    3441/    3BE4 : 20                  	db 32
    3442/    3BE5 : 74                  	db 116
    3443/    3BE6 : 6F                  	db 111
    3444/    3BE7 : 20                  	db 32
    3445/    3BE8 : 61                  	db 97
    3446/    3BE9 : 63                  	db 99
    3447/    3BEA : 63                  	db 99
    3448/    3BEB : 65                  	db 101
    3449/    3BEC : 73                  	db 115
    3450/    3BED : 73                  	db 115
    3451/    3BEE : 20                  	db 32
    3452/    3BEF : 45                  	db 69
    3453/    3BF0 : 74                  	db 116
    3454/    3BF1 : 68                  	db 104
    3455/    3BF2 : 65                  	db 101
    3456/    3BF3 : 72                  	db 114
    3457/    3BF4 : 6E                  	db 110
    3458/    3BF5 : 65                  	db 101
    3459/    3BF6 : 74                  	db 116
    3460/    3BF7 : 20                  	db 32
    3461/    3BF8 : 63                  	db 99
    3462/    3BF9 : 6F                  	db 111
    3463/    3BFA : 6E                  	db 110
    3464/    3BFB : 74                  	db 116
    3465/    3BFC : 72                  	db 114
    3466/    3BFD : 6F                  	db 111
    3467/    3BFE : 6C                  	db 108
    3468/    3BFF : 6C                  	db 108
    3469/    3C00 : 65                  	db 101
    3470/    3C01 : 72                  	db 114
    3471/    3C02 : 0A                  	db 10
    3472/    3C03 : 00                  	db 0
    3473/    3C04 :                     L3:
    3474/    3C04 : 4D                  	db 77
    3475/    3C05 : 41                  	db 65
    3476/    3C06 : 43                  	db 67
    3477/    3C07 : 20                  	db 32
    3478/    3C08 : 26                  	db 38
    3479/    3C09 : 20                  	db 32
    3480/    3C0A : 49                  	db 73
    3481/    3C0B : 50                  	db 80
    3482/    3C0C : 20                  	db 32
    3483/    3C0D : 00                  	db 0
    3484/    3C0E :                     L2:
    3485/    3C0E : 0A                  	db 10
    3486/    3C0F : 45                  	db 69
    3487/    3C10 : 6E                  	db 110
    3488/    3C11 : 63                  	db 99
    3489/    3C12 : 32                  	db 50
    3490/    3C13 : 38                  	db 56
    3491/    3C14 : 6A                  	db 106
    3492/    3C15 : 36                  	db 54
    3493/    3C16 : 30                  	db 48
    3494/    3C17 : 20                  	db 32
    3495/    3C18 : 66                  	db 102
    3496/    3C19 : 69                  	db 105
    3497/    3C1A : 72                  	db 114
    3498/    3C1B : 73                  	db 115
    3499/    3C1C : 74                  	db 116
    3500/    3C1D : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 62 - 4/25/2013 10:34:17


    3501/    3C1E : 74                  	db 116
    3502/    3C1F : 72                  	db 114
    3503/    3C20 : 79                  	db 121
    3504/    3C21 : 0A                  	db 10
    3505/    3C22 : 00                  	db 0
    3506/    3C23 :                     	include lcc1802Epilofl.inc
(1)    1/    3C23 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    3C23 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    3C23 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    3C23 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    3C23 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    3C23 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    3C23 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    3C23 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    3C23 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    3C23 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    3C23 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    3C23 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    3C23 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    3C23 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    3C23 :                     
(1)   16/    3C23 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    3C23 :                     lcc1802init:	
(1)   18/    3C23 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    3C29 : (MACRO)             	ldiReg	RRET,_return
(1)   20/    3C2F : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    3C35 : E2                  	sex	SP
(1)   22/    3C36 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    3C3C : D3                  	sep	RPC
(1)   24/    3C3D :                     $$_00000:
(1)   25/    3C3D : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    3C40 : C0 3C 40            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    3C43 : DE AD               	db	0xde,0xad
(1)   28/    3C45 :                     
(1)   29/    3C45 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    3C45 :                     _setqOn:
(1)   31/    3C45 : 7B                  	seq
(1)   32/    3C46 : (MACRO)             	Cretn
(1)   33/    3C47 :                     _setqOff:
(1)   34/    3C47 : 7A                  	req
(1)   35/    3C48 : (MACRO)             	Cretn
(1)   36/    3C49 :                     
(1)   37/    3C49 :                     _modU2:	;16 bit unsigned remainder
(1)   38/    3C49 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    3C49 : (MACRO)                 Ccall _divU2
(1)   40/    3C4C : 8D                      glo regArg2
(1)   41/    3C4D : AF                      plo retVal
(1)   42/    3C4E : 9D                      ghi regArg2
(1)   43/    3C4F : BF                      phi retVal
(1)   44/    3C50 : (MACRO)                 Cretn
(1)   45/    3C51 :                         
(1)   46/    3C51 :                     _modI2:	;16 bit signed remainder
(1)   47/    3C51 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    3C51 : (MACRO)                 Ccall _divI2
(1)   49/    3C54 : 8D                      glo regArg2
(1)   50/    3C55 : AF                      plo retVal
(1)   51/    3C56 : 9D                      ghi regArg2
(1)   52/    3C57 : BF                      phi retVal
(1)   53/    3C58 : (MACRO)                 Cretn
(1)   54/    3C59 :                     
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 63 - 4/25/2013 10:34:17


(1)   55/    3C59 :                     _out4:	
(1)   56/    3C59 : 8C                  	glo	regArg1
(1)   57/    3C5A : 22                  	dec	sp
(1)   58/    3C5B : 52                  	str	sp
(1)   59/    3C5C : 64                  	out	4
(1)   60/    3C5D : (MACRO)             	Cretn
(1)   61/    3C5E :                     
(1)   62/    3C5E :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    3C5E :                     	align 256
(1)   64/    3D00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    3D00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    3D00 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    3D00 : D3                  	sep     R3 ;go to subroutine
(1)   68/    3D01 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    3D02 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    3D03 : 22                  	dec	sp
(1)   71/    3D04 : 73                  	stxd
(1)   72/    3D05 : 96                  	ghi	retAddr
(1)   73/    3D06 : 52                  	str	sp	
(1)   74/    3D07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    3D08 : A6                  	plo	retAddr
(1)   76/    3D09 : 93                  	ghi	RPC
(1)   77/    3D0A : B6                  	phi	retAddr
(1)   78/    3D0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    3D0C : B3                  	phi	RPC
(1)   80/    3D0D : 46                  	lda	retAddr
(1)   81/    3D0E : A3                  	plo	RPC
(1)   82/    3D0F : 30 00               	br	_call-1
(1)   83/    3D11 :                     
(1)   84/    3D11 :                     ;Standard subroutine return 
(1)   85/    3D11 : D3                  	sep	RPC	;return to the original program
(1)   86/    3D12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    3D13 : A3                  	plo	RPC
(1)   88/    3D14 : 96                  	ghi	retAddr
(1)   89/    3D15 : B3                  	phi	RPC
(1)   90/    3D16 : 42                  	lda	SP	;pick up old return address
(1)   91/    3D17 : B6                  	phi	retAddr
(1)   92/    3D18 : 42                  	lda	SP
(1)   93/    3D19 : A6                  	plo	retAddr
(1)   94/    3D1A : 30 11               	br	_return-1
(1)   95/    3D1C :                     
(1)   96/    3D1C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    3D1C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    3D1E : FF 01               $$mslp:	smi	1
(1)   99/    3D20 : 3A 1E               	bnz	$$mslp
(1)  100/    3D22 : (MACRO)             	Cretn
(1)  101/    3D23 :                     
(1)  102/    3D23 :                     
(1)  103/    3D23 :                     	
(1)  104/    3D23 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    3D23 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    3D23 :                     _mulu2:		
(1)  107/    3D23 : 22                      dec sp
(1)  108/    3D24 : F8 10                   ldi 16
(1)  109/    3D26 : AE                      plo	rwork	;bit count
(1)  110/    3D27 : F8 00                   ldi 0
(1)  111/    3D29 : BF                      phi	retVal	;quotient
(1)  112/    3D2A : AF                      plo retVal
(1)  113/    3D2B :                     $$MultLoop16_16:
(1)  114/    3D2B : 9C                      ghi regArg1
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 64 - 4/25/2013 10:34:17


(1)  115/    3D2C : F6                      shr
(1)  116/    3D2D : BC                      phi regArg1
(1)  117/    3D2E : 8C                      glo regArg1
(1)  118/    3D2F : 76                      shrc
(1)  119/    3D30 : AC                      plo regArg1
(1)  120/    3D31 : 3B 3D                   bnf $$MultSkip16_16
(1)  121/    3D33 : 8D                      glo regArg2
(1)  122/    3D34 : 52                      str sp
(1)  123/    3D35 : 8F                      glo retVal
(1)  124/    3D36 : F4                      add 
(1)  125/    3D37 : AF                      plo retVal
(1)  126/    3D38 : 9D                      ghi regArg2
(1)  127/    3D39 : 52                      str sp
(1)  128/    3D3A : 9F                      ghi retVal
(1)  129/    3D3B : 74                      adc
(1)  130/    3D3C : BF                      phi retVal
(1)  131/    3D3D :                     $$MultSkip16_16:
(1)  132/    3D3D : 8D                      glo regArg2
(1)  133/    3D3E : FE                      shl
(1)  134/    3D3F : AD                      plo regArg2
(1)  135/    3D40 : 9D                      ghi regArg2
(1)  136/    3D41 : 7E                      shlc
(1)  137/    3D42 : BD                      phi regArg2
(1)  138/    3D43 : 2E                      dec rwork
(1)  139/    3D44 : 8E                      glo rwork
(1)  140/    3D45 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    3D47 : 12                      inc sp
(1)  142/    3D48 : D5                      sep 5
(1)  143/    3D49 :                     
(1)  144/    3D49 :                     
(1)  145/    3D49 :                     _divU2:
(1)  146/    3D49 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    3D49 :                     	; This is really an unsigned 23 bit divide
(1)  148/    3D49 :                     	;thanks to Ted Rossin
(1)  149/    3D49 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    3D49 : 22                      dec sp
(1)  151/    3D4A : F8 10                   ldi 16
(1)  152/    3D4C : AE                      plo rwork
(1)  153/    3D4D : F8 00                   ldi 0
(1)  154/    3D4F : BF                      phi retVal
(1)  155/    3D50 : AF                      plo retVal
(1)  156/    3D51 : BE                      phi rwork
(1)  157/    3D52 :                     $$DivLoop16_16:
(1)  158/    3D52 : 8C                      glo regArg1
(1)  159/    3D53 : FE                      shl
(1)  160/    3D54 : AC                      plo regArg1
(1)  161/    3D55 : 9C                      ghi regArg1
(1)  162/    3D56 : 7E                      shlc
(1)  163/    3D57 : BC                      phi regArg1
(1)  164/    3D58 : 8F                      glo retVal
(1)  165/    3D59 : 7E                      shlc
(1)  166/    3D5A : AF                      plo retVal
(1)  167/    3D5B : 9F                      ghi retVal
(1)  168/    3D5C : 7E                      shlc
(1)  169/    3D5D : BF                      phi retVal
(1)  170/    3D5E : 9E                      ghi rwork
(1)  171/    3D5F : 7E                      shlc
(1)  172/    3D60 : BE                      phi rwork
(1)  173/    3D61 : 3B 73                   bnf $$DivSub16_16
(1)  174/    3D63 : 8D                      glo regArg2
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 65 - 4/25/2013 10:34:17


(1)  175/    3D64 : 52                      str sp
(1)  176/    3D65 : 8F                      glo retVal
(1)  177/    3D66 : F4                      add 
(1)  178/    3D67 : AF                      plo retVal
(1)  179/    3D68 : 9D                      ghi regArg2
(1)  180/    3D69 : 52                      str sp
(1)  181/    3D6A : 9F                      ghi retVal
(1)  182/    3D6B : 74                      adc 
(1)  183/    3D6C : BF                      phi retVal
(1)  184/    3D6D : 9E                      ghi rwork
(1)  185/    3D6E : 7C 00                   adci 0
(1)  186/    3D70 : BE                      phi rwork
(1)  187/    3D71 : 30 81                   br $$DivSkip16_16
(1)  188/    3D73 :                     $$DivSub16_16:
(1)  189/    3D73 : 8D                      glo regArg2
(1)  190/    3D74 : 52                      str sp
(1)  191/    3D75 : 8F                      glo retVal
(1)  192/    3D76 : F7                      sm
(1)  193/    3D77 : AF                      plo retVal
(1)  194/    3D78 : 9D                      ghi regArg2
(1)  195/    3D79 : 52                      str sp
(1)  196/    3D7A : 9F                      ghi retVal
(1)  197/    3D7B : 77                      smb 
(1)  198/    3D7C : BF                      phi retVal
(1)  199/    3D7D : 9E                      ghi rwork
(1)  200/    3D7E : 7F 00                   smbi 0
(1)  201/    3D80 : BE                      phi rwork 
(1)  202/    3D81 :                     $$DivSkip16_16:
(1)  203/    3D81 : FE                      shl
(1)  204/    3D82 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    3D84 :                     $$DivSetBit16_16:
(1)  206/    3D84 : 8C                      glo regArg1
(1)  207/    3D85 : F9 01                   ori  0x01
(1)  208/    3D87 : AC                      plo regArg1
(1)  209/    3D88 :                     $$DivSkipClear16_16:
(1)  210/    3D88 : 2E                      dec rwork
(1)  211/    3D89 : 8E                      glo rwork
(1)  212/    3D8A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    3D8C : 9E                      ghi rwork
(1)  214/    3D8D : FE                      shl
(1)  215/    3D8E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    3D90 : 8D                      glo regArg2
(1)  217/    3D91 : 52                      str sp
(1)  218/    3D92 : 8F                      glo retVal
(1)  219/    3D93 : F4                      add
(1)  220/    3D94 : AF                      plo retVal
(1)  221/    3D95 : 9D                      ghi regArg2
(1)  222/    3D96 : 52                      str sp
(1)  223/    3D97 : 9F                      ghi retVal
(1)  224/    3D98 : 74                      adc
(1)  225/    3D99 : BF                      phi retVal
(1)  226/    3D9A :                     $$DivSkipFinalAdd16_16:
(1)  227/    3D9A : 12                      inc sp
(1)  228/    3D9B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    3D9B : 8F                      glo retVal
(1)  230/    3D9C : AD                      plo regArg2
(1)  231/    3D9D : 9F                      ghi retVal
(1)  232/    3D9E : BD                      phi regArg2
(1)  233/    3D9F : 8C                      glo regArg1
(1)  234/    3DA0 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 66 - 4/25/2013 10:34:17


(1)  235/    3DA1 : 9C                      ghi regArg1
(1)  236/    3DA2 : BF                      phi retVal
(1)  237/    3DA3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    3DA3 : D5                      sep 5
(1)  239/    3DA4 :                     
(1)  240/    3DA4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  241/    3DA4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    3DA4 :                     _divI2:
(1)  243/    3DA4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    3DA4 : 22                      dec	sp	;leave a work area available
(1)  245/    3DA5 : 9C                      ghi regArg1
(1)  246/    3DA6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    3DA7 : FE                      shl
(1)  248/    3DA8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    3DAA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    3DB3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    3DB3 : 9D                      ghi regArg2
(1)  252/    3DB4 : F3                      xor	
(1)  253/    3DB5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    3DB6 : 9D                      ghi regArg2
(1)  255/    3DB7 : FE                      shl
(1)  256/    3DB8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    3DBA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    3DC3 :                     $$pos2: ; both args now +v
(1)  259/    3DC3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    3DC6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    3DC6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    3DC7 : FE                      shl
(1)  263/    3DC8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    3DCA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    3DD3 :                     $$done:
(1)  266/    3DD3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    3DD3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    3DD4 :                     
(1)  269/    3DD4 :                     
(1)  270/    3DD4 :                     	align 256    ;32 bit operations follow
(1)  271/    3E00 :                     _divu4:
(1)  272/    3E00 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    3E00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    3E00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    3E00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    3E00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    3E00 :                     
(1)  278/    3E00 : F8 20               	ldi 32		;set loop count
(1)  279/    3E02 : AE                  	plo memaddr	;in temp register
(1)  280/    3E03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    3E0F :                     $$loop:
(1)  282/    3E0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    3E1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    3E27 :                     
(1)  285/    3E27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    3E3D :                     
(1)  287/    3E3D : FA 80               	ani 0x80	;check the top bit
(1)  288/    3E3F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    3E41 : 89                  		glo RL8
(1)  290/    3E42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    3E44 : A9                  		plo RL8
(1)  292/    3E45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    3E5B : 30 61               	br $$endlp 	;else
(1)  294/    3E5D :                     $$norestore:
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 67 - 4/25/2013 10:34:17


(1)  295/    3E5D : 89                  		glo RL8
(1)  296/    3E5E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    3E60 : A9                  		plo RL8
(1)  298/    3E61 :                     	;end if
(1)  299/    3E61 :                     $$endlp:
(1)  300/    3E61 : 2E                  	dec memaddr	;check the cycle count
(1)  301/    3E62 : 8E                  	glo memaddr
(1)  302/    3E63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    3E65 :                     	
(1)  304/    3E65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    3E66 :                     		
(1)  306/    3E66 :                     
(1)  307/    3E66 :                     _mulu4:
(1)  308/    3E66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    3E66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    3E66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    3E66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    3E66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    3E66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    3E66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    3E66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    3E66 :                     	;for 10 we subtract and shift
(1)  317/    3E66 :                     	;for 00 and 11 we just shift
(1)  318/    3E66 :                     
(1)  319/    3E66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    3E72 : F8 20                   ldi 32
(1)  321/    3E74 : AE                      plo memaddr		;cycle count
(1)  322/    3E75 : FC 00                   adi 0		;clear df
(1)  323/    3E77 :                     $$mloop:
(1)  324/    3E77 : 89                      glo RL8
(1)  325/    3E78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    3E7A : 3B 96                   bnf	$$check_sub	;
(1)  327/    3E7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    3E7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    3E7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    3E94 : 30 AE                   br $$shift
(1)  331/    3E96 :                     $$check_sub:
(1)  332/    3E96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    3E98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    3E98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    3EAE :                     $$shift:
(1)  336/    3EAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    3EBC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    3EC8 :                     
(1)  339/    3EC8 : 2E                      dec memaddr		;cycle count
(1)  340/    3EC9 : 8E                      glo memaddr
(1)  341/    3ECA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    3ECC :                         
(1)  343/    3ECC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    3ECD :                     
(1)  345/    3ECD :                     	align 256
(1)  346/    3F00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    3F00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    3F00 :                     _divI4:
(1)  349/    3F00 : 22                      dec	sp	;leave a work area available
(1)  350/    3F01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    3F02 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    3F03 : FE                      shl
(1)  353/    3F04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    3F06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 68 - 4/25/2013 10:34:17


(1)  355/    3F26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    3F26 : 9A                      ghi RL10-1
(1)  357/    3F27 : F3                      xor	
(1)  358/    3F28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    3F29 : 9A                      ghi RL10-1
(1)  360/    3F2A : FE                      shl
(1)  361/    3F2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    3F2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    3F4D :                     $$pos2: ; both args now +v
(1)  364/    3F4D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    3F50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    3F50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    3F51 : FE                      shl
(1)  368/    3F52 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    3F54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    3F74 :                     $$done:
(1)  371/    3F74 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    3F75 :                     
(1)  373/    3F75 :                     _dubdabx:	
(1)  374/    3F75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    3F75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    3F75 :                     ;long interger is passed in rp1p2
(1)  377/    3F75 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    3F75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    3F75 :                     ;r8-11 are used as temps
(1)  380/    3F75 :                     ;r8 is the working pointer
(1)  381/    3F75 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    3F75 :                     ;r9.0 is digit count
(1)  383/    3F75 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    3F75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    3F81 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    3F8D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    3F91 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    3F93 : A9                  	plo r9
(1)  389/    3F94 :                     $$clrlp:	;clear the passed buffer
(1)  390/    3F94 : F8 00               	ldi 0	
(1)  391/    3F96 : 58                  	str r8	;clear a byte
(1)  392/    3F97 : 18                  	inc r8
(1)  393/    3F98 : 29                  	dec r9
(1)  394/    3F99 : 89                  	glo r9	;check the count
(1)  395/    3F9A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    3F9C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    3FA0 :                     
(1)  398/    3FA0 : F8 20               	ldi 32	;bit count
(1)  399/    3FA2 : AF                  	plo r15
(1)  400/    3FA3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    3FA3 :                     $$cktop:
(1)  402/    3FA3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    3FA4 : FE                  	shl		;check for a 1
(1)  404/    3FA5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    3FA7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    3FB3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    3FB4 : 8F                  	glo r15
(1)  408/    3FB5 : 3A A3               	bnz $$cktop	;
(1)  409/    3FB7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    3FB8 :                     $$bitloop:
(1)  411/    3FB8 : F8 0A               	ldi 10	;digit count
(1)  412/    3FBA : A9                  	plo r9
(1)  413/    3FBB :                     $$dcklp:
(1)  414/    3FBB : 08                  	ldn r8 	;pick up a digit
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 69 - 4/25/2013 10:34:17


(1)  415/    3FBC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    3FBE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    3FC0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    3FC2 : 58                  	str r8	;put it back
(1)  419/    3FC3 :                     $$dnoadd:
(1)  420/    3FC3 : 18                  	inc r8
(1)  421/    3FC4 : 29                  	dec r9	;decrement digit count
(1)  422/    3FC5 : 89                  	glo r9
(1)  423/    3FC6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    3FC8 :                     	
(1)  425/    3FC8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    3FD4 :                     	
(1)  427/    3FD4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    3FD6 : A9                  	plo r9
(1)  429/    3FD7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    3FD7 :                     $$dshlp:
(1)  431/    3FD7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    3FD8 : 08                  	ldn r8	;get the digit back
(1)  433/    3FD9 : 7E                  	shlc	;continue the shift
(1)  434/    3FDA : BF                  	phi r15 ;save it for the carry test
(1)  435/    3FDB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    3FDD : 58                  	str r8	;put the digit back
(1)  437/    3FDE : 9F                  	ghi r15	;now test for carry
(1)  438/    3FDF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    3FE1 : 29                  	dec r9	;decrement the digit count
(1)  440/    3FE2 : 89                  	glo r9
(1)  441/    3FE3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    3FE5 :                     	
(1)  443/    3FE5 : 2F                  	dec r15
(1)  444/    3FE6 : 8F                  	glo r15
(1)  445/    3FE7 : 3A B8               	bnz $$bitloop
(1)  446/    3FE9 :                     	
(1)  447/    3FE9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    3FED : F8 0A               	ldi 10		;digit count again
(1)  449/    3FEF : A9                  	plo r9
(1)  450/    3FF0 :                     $$upnxt:
(1)  451/    3FF0 : 08                  	ldn r8		;get digit
(1)  452/    3FF1 : F9 30               	ori 0x30	;make ascii
(1)  453/    3FF3 : 58                  	str r8		;put it back
(1)  454/    3FF4 : 18                  	inc r8		;next digit
(1)  455/    3FF5 : 29                  	dec r9		;counter
(1)  456/    3FF6 : 89                  	glo r9
(1)  457/    3FF7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    3FF9 :                     	
(1)  459/    3FF9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    4001 : EE                  	sex memaddr	;set up
(1)  461/    4002 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    4004 : F7                  	sm		;desired number of digits to skip
(1)  463/    4005 : E2                  	sex sp		;reset index register
(1)  464/    4006 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    4007 :                     $$cknext:
(1)  466/    4007 : 0F                  	ldn r15		;check digit
(1)  467/    4008 : FF 30               	smi 0x30	;for '0'
(1)  468/    400A : 3A 11               	bnz $$done
(1)  469/    400C : 1F                  	inc r15		;next digit
(1)  470/    400D : 29                  	dec r9		;reduce count
(1)  471/    400E : 89                  	glo r9
(1)  472/    400F : 3A 07               	bnz $$cknext
(1)  473/    4011 :                     $$done:
(1)  474/    4011 : (MACRO)             	cretn
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(lcc1802Epilofl.inc) - page 70 - 4/25/2013 10:34:17


(1)  475/    4012 :                     	
(1)  476/    4012 :                     	
(1)  477/    4012 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    4012 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    4012 : (MACRO)                 Ccall _divU4
(1)  480/    4015 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  481/    401D : (MACRO)                 Cretn
(1)  482/    401E :                         
(1)  483/    401E :                     _modI4:	;32 bit signed remainder
(1)  484/    401E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    401E : (MACRO)                 Ccall _divI4
(1)  486/    4021 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    4029 : (MACRO)                 Cretn
(1)  488/    402A :                         
(1)  489/    402A :                     	
(1)  490/    402A :                      
    3507/    402A :                     	include IO1802.inc
(1)    1/    402A :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    402A :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    402A :                     	align 64
(1)    4/    4040 :                     _putc:
(1)    5/    4040 :                     _out5:	
(1)    6/    4040 : 8C                  	glo	regArg1
(1)    7/    4041 : 22                  	dec	sp
(1)    8/    4042 : 52                  	str	sp
(1)    9/    4043 : 65                  	out	5
(1)   10/    4044 : (MACRO)             	Cretn
(1)   11/    4045 :                     _inp:		;raw port input
(1)   12/    4045 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    4045 : 22                  	dec	sp	;work backwards
(1)   14/    4046 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    4048 : 73                  	stxd		
(1)   16/    4049 : 8C                  	glo	regarg1	;get the port number
(1)   17/    404A : FA 07               	ani	0x07	;clean it
(1)   18/    404C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    404E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    4050 : 73                  	stxd		;store it for execution
(1)   21/    4051 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    4055 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    4056 : D8                  	sep	rt1	;execute it
(1)   24/    4057 :                     ;we will come back to here with the input byte in D
(1)   25/    4057 : 12                  	inc	sp	;step over the work area
(1)   26/    4058 : AF                  	plo	retVal	;save it to return
(1)   27/    4059 : F8 00               	ldi	0
(1)   28/    405B : BF                  	phi	retval	;clear top byte
(1)   29/    405C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    405D : 12                  	inc	sp	;and the D3
(1)   31/    405E : (MACRO)             	Cretn		;and we're done
(1)   32/    405F :                     	
(1)   33/    405F :                     _out:		;raw port output
(1)   34/    405F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    405F : 22                  	dec	sp	;work backwards
(1)   36/    4060 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    4062 : 73                  	stxd		
(1)   38/    4063 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    4067 : 8C                  	glo	regarg1	;get the port number
(1)   40/    4068 : FA 07               	ani	0x07	;clean it
(1)   41/    406A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    406C : 73                  	stxd		;store it for execution
(1)   43/    406D : 8D                  	glo	regarg2	;get the byte to be written
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm(IO1802.inc) - page 71 - 4/25/2013 10:34:17


(1)   44/    406E : 52                  	str	sp	;store it where sp points
(1)   45/    406F : D8                  	sep	rt1	;execute it
(1)   46/    4070 :                     ;we will come back to here with sp stepped up by one
(1)   47/    4070 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    4071 : 12                  	inc	sp	;and the D3
(1)   49/    4072 : (MACRO)             	Cretn		;and we're done
(1)   50/    4073 :                     	
(1)   51/    4073 :                     	
    3508/    4073 :                     
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 72 - 4/25/2013 10:34:17


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP396 :                  3FB8 C | *BRANCHEXT :                      0 - |
 BVTABLE338 :                  381F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB394 :                3E96 C |  CKNEXT396 :                   4007 C |
 CKTOP396 :                    3FA3 C |  CLRLP396 :                    3F94 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   4/25/2013 - |
 DCKLP396 :                    3FBB C |  DIVLOOP16_16391 :             3D52 C |
*DIVSETBIT16_16391 :           3D84 C |  DIVSKIP16_16391 :             3D81 C |
 DIVSKIPCLEAR16_16391 :        3D88 C |  DIVSKIPFINALADD16_16391 :     3D9A C |
 DIVSUB16_16391 :              3D73 C |  DNOADD396 :                   3FC3 C |
 DONE392 :                     3DD3 C |  DONE395 :                     3F74 C |
 DONE396 :                     4011 C |  DSHLP396 :                    3FD7 C |
 ENDLP393 :                    3E61 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                           114 C |  L10 :                         3B64 C |
 L100 :                        10EB C |  L102 :                        1150 C |
 L106 :                        1142 C |  L109 :                        117F C |
 L11 :                         3B54 C |  L112 :                        16B1 C |
 L115 :                        11B5 C |  L117 :                        126C C |
*L12 :                          159 C |  L120 :                        1257 C |
 L123 :                        1406 C |  L125 :                        1392 C |
 L126 :                        13FF C | *L13 :                          17C C |
 L130 :                        1361 C |  L131 :                        1372 C |
 L133 :                        13E6 C |  L136 :                        161E C |
 L138 :                        161E C |  L141 :                        14DB C |
 L143 :                        154A C |  L146 :                        161E C |
 L148 :                        16AA C |  L15 :                         3B3D C |
 L150 :                        167B C |  L151 :                        16AA C |
 L153 :                        16AA C |  L155 :                        1836 C |
 L159 :                        174D C |  L16 :                          176 C |
 L160 :                        1836 C |  L162 :                        1836 C |
 L165 :                        180C C |  L166 :                        1836 C |
 L17 :                          179 C |  L170 :                        1836 C |
*L173 :                        1922 C |  L174 :                        1862 C |
 L175 :                        190C C |  L183 :                        18BF C |
 L184 :                        18D4 C | *L189 :                        1A0F C |
*L19 :                          193 C |  L2 :                          3C0E C |
*L201 :                        1B48 C | *L21 :                          199 C |
*L216 :                        1C03 C |  L222 :                        1BF6 C |
 L223 :                        1BFA C | *L224 :                        1CAD C |
 L229 :                        1CA0 C | *L23 :                          286 C |
 L230 :                        1CA4 C | *L231 :                        1D26 C |
 L24 :                          286 C | *L241 :                        1DA7 C |
 L243 :                        1D7D C | *L248 :                        1F08 C |
 L250 :                        1E46 C | *L256 :                        1FE2 C |
*L26 :                          317 C | *L261 :                        20AE C |
 L265 :                        20AA C | *L267 :                        2115 C |
 L27 :                          2A3 C |  L270 :                        2108 C |
 L271 :                        210C C | *L272 :                        2685 C |
 L275 :                        21AC C |  L276 :                        220F C |
 L277 :                        21E5 C |  L278 :                        21F6 C |
 L279 :                        2222 C | *L28 :                          300 C |
 L280 :                        231B C |  L284 :                        23E1 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 73 - 4/25/2013 10:34:17


 L285 :                        24EB C | *L288 :                        271B C |
*L294 :                        2752 C |  L299 :                        27A7 C |
 L3 :                          3C04 C |  L300 :                        2792 C |
*L304 :                        27E3 C | *L306 :                        28B9 C |
*L31 :                          400 C | *L314 :                        2B00 C |
 L32 :                          3DB C | *L338 :                        2B5A C |
*L34 :                          4B7 C | *L341 :                        2C56 C |
 L342 :                        3B31 C |  L343 :                        2BA3 C |
*L344 :                        2C0D C |  L346 :                        2C27 C |
 L347 :                        2BED C |  L349 :                        2C0D C |
*L35 :                          514 C |  L351 :                        3B2F C |
 L352 :                        2C56 C | *L354 :                        2CB7 C |
*L355 :                        2D0C C | *L356 :                        2D42 C |
 L357 :                        2D25 C | *L358 :                        2D25 C |
*L36 :                          5A5 C |  L360 :                        2D27 C |
*L361 :                        2D6C C |  L362 :                        2D51 C |
 L363 :                        2D53 C | *L365 :                        2DB5 C |
 L366 :                        2D81 C |  L367 :                        2DA0 C |
*L369 :                        2F62 C | *L37 :                          658 C |
 L370 :                        2E80 C |  L371 :                        2E90 C |
 L372 :                        2E99 C |  L373 :                        2F3A C |
 L375 :                        2EA0 C | *L376 :                        2EA0 C |
 L378 :                        2EAD C |  L379 :                        2F25 C |
*L38 :                          6DC C |  L382 :                        2EE2 C |
*L383 :                        3041 C |  L384 :                        2FFB C |
*L386 :                        308F C | *L387 :                        30EF C |
*L388 :                        3182 C |  L389 :                        315D C |
 L39 :                          6BC C |  L390 :                        3182 C |
*L391 :                        3200 C | *L392 :                        3616 C |
 L393 :                        3248 C |  L394 :                        35F5 C |
 L396 :                        3284 C |  L397 :                        35F5 C |
 L398 :                        35E4 C |  L399 :                        35F5 C |
 L4 :                            69 C | *L40 :                          6BC C |
 L401 :                        33AC C |  L402 :                        33C9 C |
 L403 :                        33EA C |  L404 :                        340C C |
 L405 :                        347A C |  L406 :                        35E4 C |
 L408 :                        34D8 C |  L410 :                        350B C |
 L411 :                        35DF C | *L412 :                        32FA C |
 L413 :                        3359 C | *L414 :                        3332 C |
*L415 :                        3391 C | *L416 :                        3654 C |
 L417 :                        3B26 C |  L418 :                        3651 C |
*L419 :                        3651 C | *L42 :                          729 C |
*L421 :                        36FC C |  L422 :                        368E C |
 L423 :                        36DB C |  L425 :                        36F8 C |
*L426 :                        375C C |  L427 :                        3731 C |
 L428 :                        3747 C | *L43 :                          75B C |
*L430 :                        37AA C |  L431 :                        3786 C |
 L432 :                        3795 C | *L434 :                        37E4 C |
 L435 :                        37CE C | *L436 :                        37D1 C |
 L438 :                        37D2 C | *L439 :                        3830 C |
*L44 :                          9D5 C |  L45 :                          7BC C |
*L46 :                          7BC C |  L49 :                          7E1 C |
 L50 :                          7E5 C | *L51 :                          C09 C |
 L53 :                          C05 C |  L58 :                          B5C C |
 L6 :                          3BDE C |  L60 :                          B80 C |
 L61 :                          B8D C |  L63 :                          BCB C |
 L64 :                          BE3 C | *L65 :                          C72 C |
 L66 :                          C46 C |  L67 :                          C5E C |
*L69 :                          CD5 C |  L7 :                          3BBE C |
 L70 :                          CA8 C |  L71 :                          CC1 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 74 - 4/25/2013 10:34:17


*L73 :                          DFF C |  L74 :                          CF8 C |
 L75 :                          D5A C |  L77 :                          D5A C |
*L79 :                          E2F C |  L8 :                          3B9D C |
*L80 :                          EC1 C |  L81 :                          E80 C |
*L82 :                          E80 C |  L84 :                         183A C |
 L85 :                         1045 C |  L87 :                          F61 C |
 L89 :                          F37 C |  L9 :                          3B7D C |
 L90 :                         103E C |  L92 :                         10CE C |
 L94 :                         1075 C |  L97 :                         10C7 C |
 LCC1802INIT :                 3C23 C | *LISTON :                         1 - |
 LOOP393 :                     3E0F C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP394 :                    3E77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP389 :                     3D1E C |  MULTLOOP16_16390 :            3D2B C |
 MULTSKIP16_16390 :            3D3D C | *NESTMAX :                      100 - |
 NORESTORE393 :                3E5D C |  OUTIT338 :                    381C C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS1392 :                     3DB3 C |  POS1395 :                     3F26 C |
 POS2392 :                     3DC3 C |  POS2395 :                     3F4D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SETBITOFF338 :                3817 C |  SHIFT394 :                    3EAE C |
 SP :                             2 - | *TIME :                    10:34:17 - |
*TRUE :                           1 - |  UPNXT396 :                    3FF0 C |
*VERSION :                     142F - |  _00000381 :                   3C3D C |
 _ALLONES :                     EE5 C |  _ARPREQHDR :                   ECA C |
 _BUFFER :                     3851 C |  _BUFFERSIZE :                 3B24 C |
 _CALL :                       3D01 C |  _CHECK_IP_MESSAGE_IS_FROM :   20B3 C |
*_CLIENT_ADDITIONALHEADERLINE : 3844 C |
 _CLIENT_ARP_WHOHAS :          27E8 C | *_CLIENT_BROWSER_CB :          3846 C |
*_CLIENT_HOSTSTR :             383C C | *_CLIENT_POSTVAL :             3842 C |
 _CLIENT_STORE_GW_MAC :        2757 C |  _CLIENT_SYN :                 28C0 C |
 _CLIENT_TCP_DATAFILL_CB :     3849 C |  _CLIENT_TCP_RESULT_CB :       384B C |
*_CLIENT_URLBUF :              3840 C | *_CLIENT_URLBUF_VAR :          383E C |
 _COPYIP :                     2C69 C |  _COPYMAC :                    2CBE C |
*_DELAY :                      37B3 C |  _DELAYCNT :                    EC7 C |
*_DHCPIP :                     3B15 C |  _DIE381 :                     3C40 C |
 _DIGITALREAD :                3828 C |  _DIGITALWRITE :               3800 C |
 _DISABLECHIP :                 198 C |  _DIVI2 :                      3DA4 C |
 _DIVI4 :                      3F00 C |  _DIVU2 :                      3D49 C |
 _DIVU4 :                      3E00 C | *_DNSIP :                      3B11 C |
 _DUBDABX :                    3F75 C |  _ENABLECHIP :                  181 C |
 _ENC28J60BANK :               3B23 C |  _ENCINITIALIZE :               760 C |
 _ENCINITSPI :                  72E C |  _ENCPACKETRECEIVE :            9E4 C |
 _ENCPACKETSEND :               CE2 C |  _ETHBEGIN :                    6E1 C |
 _ETH_TYPE_IS_ARP_AND_MY_IP :  1C0E C |  _ETH_TYPE_IS_IP_AND_MY_IP :   1B51 C |
 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 75 - 4/25/2013 10:34:17


*_EXIT :                       362B C |  _FILL_CHECKSUM :              2120 C |
 _FILL_IP_HDR_CHECKSUM :       269A C |  _GET_TCP_DATA_LEN :           1FF3 C |
 _GNEXTPACKETPTR :             3B21 C |  _GWIP :                       3B19 C |
 _GWMACADDR :                  3834 C |  _HEXDUMP :                    2B5F C |
 _HISIP :                      3B0D C |  _HISPORT :                       E C |
 _ICMP_CB :                    383A C |  _INFO_DATA_LEN :              3831 C |
*_INP :                        4045 C |  _IPHDR :                       ED2 C |
 _ISLINKUP :                    E06 C |  _ITOA :                       2DBE C |
 _LOOP :                        11D C |  _LTOA :                       2F77 C |
 _MAIN :                        162 C |
 _MAKE_ARP_ANSWER_FROM_REQUEST :                                       1CB8 C |
 _MAKE_ECHO_REPLY_FROM_REQUEST :                                       1D2B C |
 _MAKE_ETH_IP :                2724 C |  _MAKE_TCPHEAD :               192B C |
 _MAKE_TCP_ACK_FROM_ANY :      1DAC C |
 _MAKE_TCP_ACK_WITH_DATA_NOFLAGS :                                     1F15 C |
 _MAKE_TCP_SYNACK_FROM_SYN :   1A16 C |  _MEMCMP :                     3659 C |
 _MEMCPY :                     370B C |  _MEMSET :                     3769 C |
*_MODI2 :                      3C51 C | *_MODI4 :                      401E C |
*_MODU2 :                      3C49 C | *_MODU4 :                      4012 C |
*_MULU2 :                      3D23 C | *_MULU4 :                      3E66 C |
 _MYIP :                          A C |  _MYMAC :                         4 C |
*_MYMASK :                     3B1D C | *_NTPREQHDR :                   EDB C |
*_OLDUINOINCLUDER :            37F1 C |  _ONEMS :                      3D1C C |
 _OUT :                        405F C | *_OUT4 :                       3C59 C |
*_OUT5 :                       4040 C |  _PIN4 :                          3 C |
 _PRINTF :                     3205 C |  _PRINTINT :                   3056 C |
 _PRINTLINT :                  3098 C |  _PRINTSTR :                   2D71 C |
 _PUTC :                       4040 C |  _PUTX :                       3187 C |
 _PUTXN :                      30F8 C |  _READBUF :                     C1C C |
 _READOP :                      324 C |  _READPHYBYTE :                 E34 C |
 _READREGBYTE :                 4C0 C |  _RETURN :                     3D12 C |
 _SEQNUM :                      EC9 C |  _SETBANK :                     19A C |
 _SETMACANDIPS :               2B09 C |  _SETMACS :                    27AE C |
*_SETQOFF :                    3C47 C | *_SETQON :                     3C45 C |
 _SETUP :                        10 C |  _STEP_SEQ :                   184F C |
 _STRCPY :                     2D13 C | *_STRLEN :                     2D45 C |
 _TCPCLIENT_SRC_PORT_L :        EC6 C |  _TCPPACKETLOOP :               EEB C |
 _TCP_CLIENT_PORT_H :          384E C |  _TCP_CLIENT_PORT_L :          384D C |
 _TCP_CLIENT_STATE :           384F C |  _TCP_FD :                     3850 C |
 _WAITGWMAC :                  3833 C |  _WRITEBUF :                    C83 C |
 _WRITEOP :                     407 C |  _WRITEPHY :                    65D C |
 _WRITEREG :                    5AC C |  _WRITEREGBYTE :                519 C |
*_WWW_FD :                     3848 C |  _XFERSPI :                     28D C |
 __FORW24 :                    382F C |  __FORW25 :                    405C C |
*__FORW26 :                    4070 C |

    437 symbols
    133 unused symbols

 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 76 - 4/25/2013 10:34:17


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | JUMPV                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     81 macros

 AS V1.42 Beta [Bld 87] - source file xnc28j60nv.asm - page 77 - 4/25/2013 10:34:17


  codepages:
  ----------

STANDARD (0 changed characters)


0.43 seconds assembly time

   4923 lines source file
  21045 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
