 AS V1.42 Beta [Bld 87] - source file blink.asm - page 1 - 3/21/2013 10:16:13


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Thu Mar 21 10:15:56 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  812/       0 :                     	listing	on
(1)  813/       0 : C0 00 B1            	lbr	lcc1802Init
(1)  814/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _mysetqOn:
      15/       4 :                     ;void mysetqOn(){
      16/       4 :                     ;	asm("	seq\n");
      17/       4 : 7B                  	seq
      18/       5 :                     ;}
      19/       5 :                     L1:
      20/       5 : (MACRO)             	Cretn
      21/       6 :                     
      22/       6 :                     ;argreg(argno=0,offset=0,ty=6,sz=2  ret 4606576
      23/       6 :                     ;argreg(argno=0,offset=0,ty=6,sz=2  ret 4606576
      24/       6 :                     _main:
      25/       6 : (MACRO)             	reserve 4
      26/       A :                     ;{
      27/       A : C0 00 25            	lbr L5
      28/       D :                     L4:
      29/       D :                     ;	while(1){
      30/       D :                     ;		mysetqOn();
      31/       D : (MACRO)             	Ccall _mysetqOn
      32/      10 :                     ;		delay(500);
      33/      10 : (MACRO)             	ldaD R12,500; reg:acon
      34/      16 :                     ;argreg(argno=0,offset=0,ty=6,sz=2  ret 4606576
      35/      16 : (MACRO)             	Ccall _delay
      36/      19 :                     ;		setqOff();
      37/      19 : (MACRO)             	Ccall _setqOff
      38/      1C :                     ;		delay(500);
      39/      1C : (MACRO)             	ldaD R12,500; reg:acon
      40/      22 :                     ;argreg(argno=0,offset=0,ty=6,sz=2  ret 4606576
      41/      22 : (MACRO)             	Ccall _delay
      42/      25 :                     ;	}
      43/      25 :                     L5:
      44/      25 :                     ;	while(1){
      45/      25 : C0 00 0D            	lbr L4
      46/      28 :                     ;}
      47/      28 :                     L3:
      48/      28 : (MACRO)             	release 4
      49/      2C : (MACRO)             	Cretn
      50/      2D :                     
      51/      2D :                     ;argreg(argno=0,offset=0,ty=6,sz=2  ret 4606576
      52/      2D :                     _delay:
      53/      2D : (MACRO)             	reserve 0; save room for local variables
      54/      2D : (MACRO)             	pushr r1
      55/      32 : (MACRO)             	pushr r7
      56/      37 : (MACRO)             	reserve 4; save room for outgoing arguments
      57/      3B : (MACRO)             	cpy2 r7,r12; function(2054) 1
      58/      3F :                     ;void delay(unsigned int howlong){
      59/      3F :                     ;	for (i=1;i!=howlong;i++){
 AS V1.42 Beta [Bld 87] - source file blink.asm - page 2 - 3/21/2013 10:16:13


      60/      3F : (MACRO)             	ldaD R1,1; reg:acon
      61/      45 : C0 00 4C            	lbr L11
      62/      48 :                     L8:
      63/      48 :                     ;		oneMs();
      64/      48 : (MACRO)             	Ccall _oneMs
      65/      4B :                     ;	}
      66/      4B :                     L9:
      67/      4B :                     ;	for (i=1;i!=howlong;i++){
      68/      4B : (MACRO)             	incm R1,1
      69/      4C :                     L11:
      70/      4C : (MACRO)             	jneU2 r1,r7,L8; NE
      71/      5E :                     ;}
      72/      5E :                     L7:
      73/      5E : (MACRO)             	release 4; release room for outgoing arguments
      74/      62 : (MACRO)             	popr r7
      75/      66 : (MACRO)             	popr r1
      76/      6A : (MACRO)             	release 0; release room for local variables 
      77/      6A : (MACRO)             	Cretn
      78/      6B :                     
      79/      6B :                     _olduinoincluder:
      80/      6B :                     ;void olduinoincluder(){
      81/      6B :                     ;	asm("\tinclude olduino.inc\n");
      82/      6B :                     	include olduino.inc
(1)    1/      6B :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/      6B :                     
(1)    3/      6B :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/      6B :                     	align 64	;needed to make sure all on same page
(1)    5/      80 :                     _digitalWrite:
(1)    6/      80 : 8C                  	glo regArg1	;get the bit number
(1)    7/      81 : FC 9F               	adi $$bvtable&255	;add the table offset
(1)    8/      83 : AE                  	plo memaddr
(1)    9/      84 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/      85 : BE                  	phi memaddr	
(1)   11/      86 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/      87 : A8                  	plo rt1		;save it in a temp
(1)   13/      88 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   14/      8E : EE                  	sex memaddr	;prepare to change it
(1)   15/      8F : 8D                  	glo regArg2	;get on/off switch
(1)   16/      90 : 32 97               	bz $$setbitoff
(1)   17/      92 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/      92 : 88                  	glo rt1		;get the bit value back
(1)   19/      93 : F1                  	or		;apply it
(1)   20/      94 : 5E                  	str memaddr	;and save it
(1)   21/      95 : 30 9C               	br $$outit	;go fnish up
(1)   22/      97 :                     $$setbitoff:
(1)   23/      97 : 88                  	glo rt1		;get the bit pattern
(1)   24/      98 : FB FF               	xri 0xff	;reverse it
(1)   25/      9A : F2                  	and		;combine it with the existing pin value
(1)   26/      9B : 5E                  	str memaddr	;and save it
(1)   27/      9C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/      9C :                     $$outit:
(1)   29/      9C : 64                  	out 4		;X was already set to memaddr
(1)   30/      9D : E2                  	sex sp		;reset X
(1)   31/      9E : (MACRO)             	cretn
(1)   32/      9F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/      A7 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/      A7 :                     	align 8	;protect jump boundary
(1)   35/      A8 :                     _digitalRead:
(1)   36/      A8 : F8 00               	ldi 0		;default is false
 AS V1.42 Beta [Bld 87] - source file blink.asm(olduino.inc) - page 3 - 3/21/2013 10:16:13


(1)   37/      AA : AF                  	plo R15
(1)   38/      AB : BF                  	phi R15
(1)   39/      AC : 36 AF               	b3 +		;i have to reverse the sense of the external line
(1)   40/      AE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/      AF : (MACRO)             +	cretn
(1)   42/      B0 :                     
      83/      B0 :                     ;}
      84/      B0 :                     L12:
      85/      B0 : (MACRO)             	Cretn
      86/      B1 :                     
      87/      B1 :                     	include lcc1802EpiloNO.inc
(1)    1/      B1 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/      B1 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/      B1 :                     ;this is the version published with the lcc1802121229 release
(1)    4/      B1 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/      B1 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/      B1 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/      B1 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/      B1 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/      B1 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/      B1 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/      B1 :                     ;feb 27 changed stack to start at 7fff
(1)   12/      B1 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/      B1 : =EH                 rwork	equ	memAddr	;work register
(1)   14/      B1 :                     lcc1802init:	
(1)   15/      B1 : (MACRO)             	ldiReg	RCALL,_call
(1)   16/      B7 : (MACRO)             	ldiReg	RRET,_return
(1)   17/      BD : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   18/      C3 : E2                  	sex	SP
(1)   19/      C4 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   20/      CA : D3                  	sep	RPC
(1)   21/      CB :                     $$_00000:
(1)   22/      CB : (MACRO)             	Ccall _main	;call the main routine
(1)   23/      CE : C0 00 CE            $$_die:	lbr	$$_die		;loop here when main returns
(1)   24/      D1 : DE AD               	db	0xde,0xad
(1)   25/      D3 :                     
(1)   26/      D3 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   27/      D3 :                     _setqOn:
(1)   28/      D3 : 7B                  	seq
(1)   29/      D4 : (MACRO)             	Cretn
(1)   30/      D5 :                     _setqOff:
(1)   31/      D5 : 7A                  	req
(1)   32/      D6 : (MACRO)             	Cretn
(1)   33/      D7 :                     
(1)   34/      D7 :                     _modU2:	;16 bit unsigned remainder
(1)   35/      D7 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   36/      D7 : (MACRO)                 Ccall _divU2
(1)   37/      DA : 8D                      glo regArg2
(1)   38/      DB : AF                      plo retVal
(1)   39/      DC : 9D                      ghi regArg2
(1)   40/      DD : BF                      phi retVal
(1)   41/      DE : (MACRO)                 Cretn
(1)   42/      DF :                         
(1)   43/      DF :                     _modI2:	;16 bit signed remainder
(1)   44/      DF :                     	; just calls the 16 bit division then puts remainder into return value
(1)   45/      DF : (MACRO)                 Ccall _divI2
(1)   46/      E2 : 8D                      glo regArg2
(1)   47/      E3 : AF                      plo retVal
(1)   48/      E4 : 9D                      ghi regArg2
(1)   49/      E5 : BF                      phi retVal
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 4 - 3/21/2013 10:16:13


(1)   50/      E6 : (MACRO)                 Cretn
(1)   51/      E7 :                     
(1)   52/      E7 :                     _out4:	
(1)   53/      E7 : 8C                  	glo	regArg1
(1)   54/      E8 : 22                  	dec	sp
(1)   55/      E9 : 52                  	str	sp
(1)   56/      EA : 64                  	out	4
(1)   57/      EB : (MACRO)             	Cretn
(1)   58/      EC :                     
(1)   59/      EC :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   60/      EC :                     	align 256
(1)   61/     100 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   62/     100 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   63/     100 : D3                  	sep     R3 ;go to subroutine
(1)   64/     101 : E2                  _call	sex	SP ;make sure X=SP
(1)   65/     102 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   66/     103 : 22                  	dec	sp
(1)   67/     104 : 73                  	stxd
(1)   68/     105 : 86                  	glo	retAddr
(1)   69/     106 : 52                  	str	sp	
(1)   70/     107 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   71/     108 : A6                  	plo	retAddr
(1)   72/     109 : 93                  	ghi	RPC
(1)   73/     10A : B6                  	phi	retAddr
(1)   74/     10B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   75/     10C : B3                  	phi	RPC
(1)   76/     10D : 46                  	lda	retAddr
(1)   77/     10E : A3                  	plo	RPC
(1)   78/     10F : 30 00               	br	_call-1
(1)   79/     111 :                     
(1)   80/     111 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   81/     111 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   82/     111 : D3                  	sep	RPC	;return to the original program
(1)   83/     112 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   84/     113 : A3                  	plo	RPC
(1)   85/     114 : 96                  	ghi	retAddr
(1)   86/     115 : B3                  	phi	RPC
(1)   87/     116 : 42                  	lda	SP	;pick up old return address
(1)   88/     117 : A6                  	plo	retAddr
(1)   89/     118 : 42                  	lda	SP
(1)   90/     119 : B6                  	phi	retAddr
(1)   91/     11A : 30 11               	br	_return-1
(1)   92/     11C :                     
(1)   93/     11C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   94/     11C : F8 24               	ldi	(100-15-10-2)/2
(1)   95/     11E : FF 01               $$mslp:	smi	1
(1)   96/     120 : 3A 1E               	bnz	$$mslp
(1)   97/     122 : (MACRO)             	Cretn
(1)   98/     123 :                     
(1)   99/     123 :                     
(1)  100/     123 :                     	
(1)  101/     123 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  102/     123 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  103/     123 :                     _mulu2:		
(1)  104/     123 : 22                      dec sp
(1)  105/     124 : F8 10                   ldi 16
(1)  106/     126 : AE                      plo	rwork	;bit count
(1)  107/     127 : F8 00                   ldi 0
(1)  108/     129 : BF                      phi	retVal	;quotient
(1)  109/     12A : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 5 - 3/21/2013 10:16:13


(1)  110/     12B :                     $$MultLoop16_16:
(1)  111/     12B : 9C                      ghi regArg1
(1)  112/     12C : F6                      shr
(1)  113/     12D : BC                      phi regArg1
(1)  114/     12E : 8C                      glo regArg1
(1)  115/     12F : 76                      shrc
(1)  116/     130 : AC                      plo regArg1
(1)  117/     131 : 3B 3D                   bnf $$MultSkip16_16
(1)  118/     133 : 8D                      glo regArg2
(1)  119/     134 : 52                      str sp
(1)  120/     135 : 8F                      glo retVal
(1)  121/     136 : F4                      add 
(1)  122/     137 : AF                      plo retVal
(1)  123/     138 : 9D                      ghi regArg2
(1)  124/     139 : 52                      str sp
(1)  125/     13A : 9F                      ghi retVal
(1)  126/     13B : 74                      adc
(1)  127/     13C : BF                      phi retVal
(1)  128/     13D :                     $$MultSkip16_16:
(1)  129/     13D : 8D                      glo regArg2
(1)  130/     13E : FE                      shl
(1)  131/     13F : AD                      plo regArg2
(1)  132/     140 : 9D                      ghi regArg2
(1)  133/     141 : 7E                      shlc
(1)  134/     142 : BD                      phi regArg2
(1)  135/     143 : 2E                      dec rwork
(1)  136/     144 : 8E                      glo rwork
(1)  137/     145 : 3A 2B                   bnz $$MultLoop16_16
(1)  138/     147 : 12                      inc sp
(1)  139/     148 : D5                      sep 5
(1)  140/     149 :                     
(1)  141/     149 :                     
(1)  142/     149 :                     _divU2:
(1)  143/     149 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  144/     149 :                     	; This is really an unsigned 23 bit divide
(1)  145/     149 :                     	;thanks to Ted Rossin
(1)  146/     149 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  147/     149 : 22                      dec sp
(1)  148/     14A : F8 10                   ldi 16
(1)  149/     14C : AE                      plo rwork
(1)  150/     14D : F8 00                   ldi 0
(1)  151/     14F : BF                      phi retVal
(1)  152/     150 : AF                      plo retVal
(1)  153/     151 : BE                      phi rwork
(1)  154/     152 :                     $$DivLoop16_16:
(1)  155/     152 : 8C                      glo regArg1
(1)  156/     153 : FE                      shl
(1)  157/     154 : AC                      plo regArg1
(1)  158/     155 : 9C                      ghi regArg1
(1)  159/     156 : 7E                      shlc
(1)  160/     157 : BC                      phi regArg1
(1)  161/     158 : 8F                      glo retVal
(1)  162/     159 : 7E                      shlc
(1)  163/     15A : AF                      plo retVal
(1)  164/     15B : 9F                      ghi retVal
(1)  165/     15C : 7E                      shlc
(1)  166/     15D : BF                      phi retVal
(1)  167/     15E : 9E                      ghi rwork
(1)  168/     15F : 7E                      shlc
(1)  169/     160 : BE                      phi rwork
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 6 - 3/21/2013 10:16:13


(1)  170/     161 : 3B 73                   bnf $$DivSub16_16
(1)  171/     163 : 8D                      glo regArg2
(1)  172/     164 : 52                      str sp
(1)  173/     165 : 8F                      glo retVal
(1)  174/     166 : F4                      add 
(1)  175/     167 : AF                      plo retVal
(1)  176/     168 : 9D                      ghi regArg2
(1)  177/     169 : 52                      str sp
(1)  178/     16A : 9F                      ghi retVal
(1)  179/     16B : 74                      adc 
(1)  180/     16C : BF                      phi retVal
(1)  181/     16D : 9E                      ghi rwork
(1)  182/     16E : 7C 00                   adci 0
(1)  183/     170 : BE                      phi rwork
(1)  184/     171 : 30 81                   br $$DivSkip16_16
(1)  185/     173 :                     $$DivSub16_16:
(1)  186/     173 : 8D                      glo regArg2
(1)  187/     174 : 52                      str sp
(1)  188/     175 : 8F                      glo retVal
(1)  189/     176 : F7                      sm
(1)  190/     177 : AF                      plo retVal
(1)  191/     178 : 9D                      ghi regArg2
(1)  192/     179 : 52                      str sp
(1)  193/     17A : 9F                      ghi retVal
(1)  194/     17B : 77                      smb 
(1)  195/     17C : BF                      phi retVal
(1)  196/     17D : 9E                      ghi rwork
(1)  197/     17E : 7F 00                   smbi 0
(1)  198/     180 : BE                      phi rwork 
(1)  199/     181 :                     $$DivSkip16_16:
(1)  200/     181 : FE                      shl
(1)  201/     182 : 33 88                   bdf $$DivSkipClear16_16
(1)  202/     184 :                     $$DivSetBit16_16:
(1)  203/     184 : 8C                      glo regArg1
(1)  204/     185 : F9 01                   ori  0x01
(1)  205/     187 : AC                      plo regArg1
(1)  206/     188 :                     $$DivSkipClear16_16:
(1)  207/     188 : 2E                      dec rwork
(1)  208/     189 : 8E                      glo rwork
(1)  209/     18A : 3A 52                   bnz $$DivLoop16_16
(1)  210/     18C : 9E                      ghi rwork
(1)  211/     18D : FE                      shl
(1)  212/     18E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  213/     190 : 8D                      glo regArg2
(1)  214/     191 : 52                      str sp
(1)  215/     192 : 8F                      glo retVal
(1)  216/     193 : F4                      add
(1)  217/     194 : AF                      plo retVal
(1)  218/     195 : 9D                      ghi regArg2
(1)  219/     196 : 52                      str sp
(1)  220/     197 : 9F                      ghi retVal
(1)  221/     198 : 74                      adc
(1)  222/     199 : BF                      phi retVal
(1)  223/     19A :                     $$DivSkipFinalAdd16_16:
(1)  224/     19A : 12                      inc sp
(1)  225/     19B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  226/     19B : 8F                      glo retVal
(1)  227/     19C : AD                      plo regArg2
(1)  228/     19D : 9F                      ghi retVal
(1)  229/     19E : BD                      phi regArg2
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 7 - 3/21/2013 10:16:13


(1)  230/     19F : 8C                      glo regArg1
(1)  231/     1A0 : AF                      plo retVal
(1)  232/     1A1 : 9C                      ghi regArg1
(1)  233/     1A2 : BF                      phi retVal
(1)  234/     1A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  235/     1A3 : D5                      sep 5
(1)  236/     1A4 :                     
(1)  237/     1A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  238/     1A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  239/     1A4 :                     _divI2:
(1)  240/     1A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  241/     1A4 : 22                      dec	sp	;leave a work area available
(1)  242/     1A5 : 9C                      ghi regArg1
(1)  243/     1A6 : 52                      str sp	;save the sign of the 1st arg
(1)  244/     1A7 : FE                      shl
(1)  245/     1A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  246/     1AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  247/     1B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  248/     1B3 : 9D                      ghi regArg2
(1)  249/     1B4 : F3                      xor	
(1)  250/     1B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  251/     1B6 : 9D                      ghi regArg2
(1)  252/     1B7 : FE                      shl
(1)  253/     1B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  254/     1BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  255/     1C3 :                     $$pos2: ; both args now +v
(1)  256/     1C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  257/     1C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  258/     1C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  259/     1C7 : FE                      shl
(1)  260/     1C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  261/     1CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  262/     1D3 :                     $$done:
(1)  263/     1D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  264/     1D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  265/     1D4 :                     
(1)  266/     1D4 :                     
(1)  267/     1D4 :                     	align 256    ;32 bit operations follow
(1)  268/     200 :                     _divu4:
(1)  269/     200 :                     ;This is an unsigned 32 bit restoring division
(1)  270/     200 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  271/     200 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  272/     200 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  273/     200 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  274/     200 :                     
(1)  275/     200 : F8 20               	ldi 32		;set loop count
(1)  276/     202 : AE                  	plo memaddr	;in temp register
(1)  277/     203 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  278/     20F :                     $$loop:
(1)  279/     20F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  280/     21B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  281/     227 :                     
(1)  282/     227 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  283/     23D :                     
(1)  284/     23D : FA 80               	ani 0x80	;check the top bit
(1)  285/     23F : 32 5D               	bz $$norestore	;if it's 0
(1)  286/     241 : 89                  		glo RL8
(1)  287/     242 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  288/     244 : A9                  		plo RL8
(1)  289/     245 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 8 - 3/21/2013 10:16:13


(1)  290/     25B : 30 61               	br $$endlp 	;else
(1)  291/     25D :                     $$norestore:
(1)  292/     25D : 89                  		glo RL8
(1)  293/     25E : F9 01               		ori 1	;turn on the bottom bit
(1)  294/     260 : A9                  		plo RL8
(1)  295/     261 :                     	;end if
(1)  296/     261 :                     $$endlp:
(1)  297/     261 : 2E                  	dec memaddr	;check the cycle count
(1)  298/     262 : 8E                  	glo memaddr
(1)  299/     263 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  300/     265 :                     	
(1)  301/     265 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  302/     266 :                     		
(1)  303/     266 :                     
(1)  304/     266 :                     _mulu4:
(1)  305/     266 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  306/     266 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  307/     266 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  308/     266 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  309/     266 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  310/     266 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  311/     266 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  312/     266 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  313/     266 :                     	;for 10 we subtract and shift
(1)  314/     266 :                     	;for 00 and 11 we just shift
(1)  315/     266 :                     
(1)  316/     266 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  317/     272 : F8 20                   ldi 32
(1)  318/     274 : AE                      plo memaddr		;cycle count
(1)  319/     275 : FC 00                   adi 0		;clear df
(1)  320/     277 :                     $$mloop:
(1)  321/     277 : 89                      glo RL8
(1)  322/     278 : FA 01                   ani 1		;isolate bottom bit of result
(1)  323/     27A : 3B 96                   bnf	$$check_sub	;
(1)  324/     27C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  325/     27E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  326/     27E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  327/     294 : 30 AE                   br $$shift
(1)  328/     296 :                     $$check_sub:
(1)  329/     296 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  330/     298 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  331/     298 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  332/     2AE :                     $$shift:
(1)  333/     2AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  334/     2BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  335/     2C8 :                     
(1)  336/     2C8 : 2E                      dec memaddr		;cycle count
(1)  337/     2C9 : 8E                      glo memaddr
(1)  338/     2CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  339/     2CC :                         
(1)  340/     2CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  341/     2CD :                     
(1)  342/     2CD :                     	align 256
(1)  343/     300 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  344/     300 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  345/     300 :                     _divI4:
(1)  346/     300 : 22                      dec	sp	;leave a work area available
(1)  347/     301 : 98                      ghi RL8-1	;get the top of the dividend
(1)  348/     302 : 52                      str sp	;save the sign of the 1st arg
(1)  349/     303 : FE                      shl
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 9 - 3/21/2013 10:16:13


(1)  350/     304 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  351/     306 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  352/     326 :                     $$pos1: ;1st is now +v, check 2nd
(1)  353/     326 : 9A                      ghi RL10-1
(1)  354/     327 : F3                      xor	
(1)  355/     328 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  356/     329 : 9A                      ghi RL10-1
(1)  357/     32A : FE                      shl
(1)  358/     32B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  359/     32D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  360/     34D :                     $$pos2: ; both args now +v
(1)  361/     34D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  362/     350 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  363/     350 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  364/     351 : FE                      shl
(1)  365/     352 : 3B 74                   bnf $$done ;if the signs were different
(1)  366/     354 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  367/     374 :                     $$done:
(1)  368/     374 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  369/     375 :                     
(1)  370/     375 :                     _dubdabx:	
(1)  371/     375 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  372/     375 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  373/     375 :                     ;long interger is passed in rp1p2
(1)  374/     375 :                     ;buffer pointer is passed at sp+2+4
(1)  375/     375 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  376/     375 :                     ;r8-11 are used as temps
(1)  377/     375 :                     ;r8 is the working pointer
(1)  378/     375 :                     ;r9.0 is bit count(32)
(1)  379/     375 :                     ;r10.0 is digit count
(1)  380/     375 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  381/     381 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  382/     385 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  383/     387 : A9                  	plo r9
(1)  384/     388 :                     $$clrlp:	;clear the passed buffer
(1)  385/     388 : F8 00               	ldi 0	
(1)  386/     38A : 58                  	str r8	;clear a byte
(1)  387/     38B : 18                  	inc r8
(1)  388/     38C : 29                  	dec r9
(1)  389/     38D : 89                  	glo r9	;check the count
(1)  390/     38E : 3A 88               	bnz $$clrlp ;back for more
(1)  391/     390 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  392/     394 :                     
(1)  393/     394 : F8 20               	ldi 32	;bit count
(1)  394/     396 : AF                  	plo r15
(1)  395/     397 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  396/     397 :                     $$cktop:
(1)  397/     397 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  398/     398 : FE                  	shl		;check for a 1
(1)  399/     399 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  400/     39B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  401/     3A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  402/     3A8 : 8F                  	glo r15
(1)  403/     3A9 : 3A 97               	bnz $$cktop	;
(1)  404/     3AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  405/     3AC :                     $$bitloop:
(1)  406/     3AC : F8 0A               	ldi 10	;digit count
(1)  407/     3AE : A9                  	plo r9
(1)  408/     3AF :                     $$dcklp:
(1)  409/     3AF : 08                  	ldn r8 	;pick up a digit
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 10 - 3/21/2013 10:16:13


(1)  410/     3B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  411/     3B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  412/     3B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  413/     3B6 : 58                  	str r8	;put it back
(1)  414/     3B7 :                     $$dnoadd:
(1)  415/     3B7 : 18                  	inc r8
(1)  416/     3B8 : 29                  	dec r9	;decrement digit count
(1)  417/     3B9 : 89                  	glo r9
(1)  418/     3BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  419/     3BC :                     	
(1)  420/     3BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  421/     3C8 :                     	
(1)  422/     3C8 : F8 0A               	ldi 10	;load the digit count again
(1)  423/     3CA : A9                  	plo r9
(1)  424/     3CB :                     ;r8 is now just past the units location and ready to walk back
(1)  425/     3CB :                     $$dshlp:
(1)  426/     3CB : 28                  	dec r8	;walk back from 0's position
(1)  427/     3CC : 08                  	ldn r8	;get the digit back
(1)  428/     3CD : 7E                  	shlc	;continue the shift
(1)  429/     3CE : BF                  	phi r15 ;save it for the carry test
(1)  430/     3CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  431/     3D1 : 58                  	str r8	;put the digit back
(1)  432/     3D2 : 9F                  	ghi r15	;now test for carry
(1)  433/     3D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  434/     3D5 : 29                  	dec r9	;decrement the digit count
(1)  435/     3D6 : 89                  	glo r9
(1)  436/     3D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  437/     3D9 :                     	
(1)  438/     3D9 : 2F                  	dec r15
(1)  439/     3DA : 8F                  	glo r15
(1)  440/     3DB : 3A AC               	bnz $$bitloop
(1)  441/     3DD :                     	
(1)  442/     3DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  443/     3E1 : F8 0A               	ldi 10		;digit count again
(1)  444/     3E3 : A9                  	plo r9
(1)  445/     3E4 :                     $$upnxt:
(1)  446/     3E4 : 08                  	ldn r8		;get digit
(1)  447/     3E5 : F9 30               	ori 0x30	;make ascii
(1)  448/     3E7 : 58                  	str r8		;put it back
(1)  449/     3E8 : 18                  	inc r8		;next digit
(1)  450/     3E9 : 29                  	dec r9		;counter
(1)  451/     3EA : 89                  	glo r9
(1)  452/     3EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  453/     3ED :                     	
(1)  454/     3ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  455/     3EF : A9                  	plo r9
(1)  456/     3F0 :                     $$cknext:
(1)  457/     3F0 : 0F                  	ldn r15		;check digit
(1)  458/     3F1 : FF 30               	smi 0x30	;for '0'
(1)  459/     3F3 : 3A FA               	bnz $$done
(1)  460/     3F5 : 1F                  	inc r15		;next digit
(1)  461/     3F6 : 29                  	dec r9		;reduce count
(1)  462/     3F7 : 89                  	glo r9
(1)  463/     3F8 : 3A F0               	bnz $$cknext
(1)  464/     3FA :                     $$done:
(1)  465/     3FA : (MACRO)             	cretn
(1)  466/     3FB :                     	
(1)  467/     3FB :                     	
(1)  468/     3FB :                     _modU4:	;32 bit unsigned remainder
(1)  469/     3FB :                     	; just calls the 32 bit division then puts remainder into return value
 AS V1.42 Beta [Bld 87] - source file blink.asm(lcc1802EpiloNO.inc) - page 11 - 3/21/2013 10:16:13


(1)  470/     3FB : (MACRO)                 Ccall _divU4
(1)  471/     3FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  472/     406 : (MACRO)                 Cretn
(1)  473/     407 :                         
(1)  474/     407 :                     _modI4:	;32 bit signed remainder
(1)  475/     407 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  476/     407 : (MACRO)                 Ccall _divI4
(1)  477/     40A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  478/     412 : (MACRO)                 Cretn
(1)  479/     413 :                         
(1)  480/     413 :                     	
(1)  481/     413 :                      
      88/     413 :                     	include IO1802.inc
(1)    1/     413 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/     413 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/     413 :                     	align 64
(1)    4/     440 :                     _putc:
(1)    5/     440 :                     _out5:	
(1)    6/     440 : 8C                  	glo	regArg1
(1)    7/     441 : 22                  	dec	sp
(1)    8/     442 : 52                  	str	sp
(1)    9/     443 : 65                  	out	5
(1)   10/     444 : (MACRO)             	Cretn
(1)   11/     445 :                     _inp:		;raw port input
(1)   12/     445 :                     		;stores a small tailored program on the stack and executes it
(1)   13/     445 : 22                  	dec	sp	;work backwards
(1)   14/     446 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/     448 : 73                  	stxd		
(1)   16/     449 : 8C                  	glo	regarg1	;get the port number
(1)   17/     44A : FA 07               	ani	0x07	;clean it
(1)   18/     44C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/     44E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/     450 : 73                  	stxd		;store it for execution
(1)   21/     451 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/     455 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/     456 : D8                  	sep	rt1	;execute it
(1)   24/     457 :                     ;we will come back to here with the input byte in D
(1)   25/     457 : 12                  	inc	sp	;step over the work area
(1)   26/     458 : AF                  	plo	retVal	;save it to return
(1)   27/     459 : F8 00               	ldi	0
(1)   28/     45B : BF                  	phi	retval	;clear top byte
(1)   29/     45C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/     45D : 12                  	inc	sp	;and the D3
(1)   31/     45E : (MACRO)             	Cretn		;and we're done
(1)   32/     45F :                     	
(1)   33/     45F :                     _out:		;raw port output
(1)   34/     45F :                     		;stores a small tailored program on the stack and executes it
(1)   35/     45F : 22                  	dec	sp	;work backwards
(1)   36/     460 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/     462 : 73                  	stxd		
(1)   38/     463 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/     467 : 8C                  	glo	regarg1	;get the port number
(1)   40/     468 : FA 07               	ani	0x07	;clean it
(1)   41/     46A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/     46C : 73                  	stxd		;store it for execution
(1)   43/     46D : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/     46E : 52                  	str	sp	;store it where sp points
(1)   45/     46F : D8                  	sep	rt1	;execute it
(1)   46/     470 :                     ;we will come back to here with sp stepped up by one
(1)   47/     470 : 12                  +	inc	sp	;need to get rid of the 6x instruction
 AS V1.42 Beta [Bld 87] - source file blink.asm(IO1802.inc) - page 12 - 3/21/2013 10:16:13


(1)   48/     471 : 12                  	inc	sp	;and the D3
(1)   49/     472 : (MACRO)             	Cretn		;and we're done
(1)   50/     473 :                     	
(1)   51/     473 :                     	
      89/     473 :                     
 AS V1.42 Beta [Bld 87] - source file blink.asm - page 13 - 3/21/2013 10:16:13


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP72 :                    3AC C | *BRANCHEXT :                      0 - |
 BVTABLE52 :                     9F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB70 :                  296 C |  CKNEXT72 :                     3F0 C |
 CKTOP72 :                      397 C |  CLRLP72 :                      388 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   3/21/2013 - |
 DCKLP72 :                      3AF C |  DIVLOOP16_1667 :               152 C |
*DIVSETBIT16_1667 :             184 C |  DIVSKIP16_1667 :               181 C |
 DIVSKIPCLEAR16_1667 :          188 C |  DIVSKIPFINALADD16_1667 :       19A C |
 DIVSUB16_1667 :                173 C |  DNOADD72 :                     3B7 C |
 DONE68 :                       1D3 C |  DONE71 :                       374 C |
 DONE72 :                       3FA C |  DSHLP72 :                      3CB C |
 ENDLP69 :                      261 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                             5 C |  L11 :                           4C C |
*L12 :                           B0 C | *L3 :                            28 C |
 L4 :                             D C |  L5 :                            25 C |
*L7 :                            5E C |  L8 :                            48 C |
*L9 :                            4B C |  LCC1802INIT :                   B1 C |
*LISTON :                         1 - |  LOOP69 :                       20F C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP70 :                      277 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP65 :                       11E C |
 MULTLOOP16_1666 :              12B C |  MULTSKIP16_1666 :              13D C |
*NESTMAX :                      100 - |  NORESTORE69 :                  25D C |
 OUTIT52 :                       9C C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS168 :                       1B3 C |
 POS171 :                       326 C |  POS268 :                       1C3 C |
 POS271 :                       34D C | *R0 :                             0 - |
 R1 :                             1 - | *R10 :                            A - |
*R11 :                            B - |  R12 :                            C - |
*R13 :                            D - | *R14 :                            E - |
 R15 :                            F - | *R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - | *RL0 :                            1 - |
 RL10 :                           B - | *RL12 :                           D - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SETBITOFF52 :                   97 C |
 SHIFT70 :                      2AE C |  SP :                             2 - |
*TIME :                    10:16:13 - | *TRUE :                           1 - |
 UPNXT72 :                      3E4 C | *VERSION :                     142F - |
 _0000057 :                      CB C |  _CALL :                        101 C |
 _DELAY :                        2D C |  _DIE57 :                        CE C |
*_DIGITALREAD :                  A8 C | *_DIGITALWRITE :                 80 C |
 _DIVI2 :                       1A4 C |  _DIVI4 :                       300 C |
 _DIVU2 :                       149 C |  _DIVU4 :                       200 C |
 AS V1.42 Beta [Bld 87] - source file blink.asm - page 14 - 3/21/2013 10:16:13


*_DUBDABX :                     375 C | *_INP :                         445 C |
 _MAIN :                          6 C | *_MODI2 :                        DF C |
*_MODI4 :                       407 C | *_MODU2 :                        D7 C |
*_MODU4 :                       3FB C | *_MULU2 :                       123 C |
*_MULU4 :                       266 C |  _MYSETQON :                      4 C |
*_OLDUINOINCLUDER :              6B C |  _ONEMS :                       11C C |
*_OUT :                         45F C | *_OUT4 :                         E7 C |
*_OUT5 :                        440 C |  _PIN4 :                          3 C |
*_PUTC :                        440 C |  _RETURN :                      112 C |
 _SETQOFF :                      D5 C | *_SETQON :                       D3 C |
 __FORW0 :                       AF C |  __FORW1 :                      45C C |
*__FORW2 :                      470 C |

    137 symbols
     63 unused symbols

 AS V1.42 Beta [Bld 87] - source file blink.asm - page 15 - 3/21/2013 10:16:13


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     79 macros

 AS V1.42 Beta [Bld 87] - source file blink.asm - page 16 - 3/21/2013 10:16:13


  codepages:
  ----------

STANDARD (0 changed characters)


0.07 seconds assembly time

   1477 lines source file
   1996 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
