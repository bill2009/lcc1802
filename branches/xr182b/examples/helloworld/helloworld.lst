 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 1 - 2/27/2013 14:03:17


       1/       0 :                     ; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Wed Feb 27 14:03:11 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  757/       0 :                     	listing	on
(1)  758/       0 : C0 0C BC            	lbr	lcc1802Init
(1)  759/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _main:
      13/       3 : (MACRO)             	reserve 4
      13/       3 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      13/       3 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      13/       3 : 82                          glo sp          ;grab low byte of stack pointer
      13/       4 : FF 04                       smi 4&255 ;claculate new low byte
      13/       6 : AE                          plo memAddr     ;save it for a moment
      13/       7 : 92                          ghi sp          ;grab high byte
      13/       8 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
      13/       A : B2                          phi sp          ;adjust page first
      13/       B : 8E                          glo memAddr     ;get new low byte
      13/       C : A2                          plo sp          ;finish adjusting the stack pointer
      14/       D :                     ;{
      15/       D :                     ;	printstr("hello World!\n");
      16/       D : (MACRO)             	ldaD R12,L2
      16/       D : F8 AE                       ldi     (L2)&255
      16/       F : AC                          plo     R12
      16/      10 : F8 0C                       ldi     (L2)>>8; was/256
      16/      12 : BC                          phi     R12
      17/      13 : (MACRO)             	Ccall _printstr
      17/      13 : D4                          sep     RCALL
      17/      14 : 00 91                       dw      _PRINTSTR
      18/      16 :                     ;}
      19/      16 :                     L1:
      20/      16 : (MACRO)             	release 4
      20/      16 :                     ;for release we adjust the low byte first 
      20/      16 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      20/      16 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
      20/      16 : 82                          glo     SP
      20/      17 : FC 04                       ADI     (4)#256
      20/      19 : A2                          plo     SP
      20/      1A : 92                          ghi     SP
      20/      1B : 7C 00                       ADCI     (4)>>8; was/256
      20/      1D : B2                          phi     SP
      21/      1E : (MACRO)             	Cretn
      21/      1E : D5                          sep     RRET
      22/      1F :                     
      23/      1F :                     _strcpy:
      24/      1F : (MACRO)             	reserve 2
      24/      1F :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      24/      1F :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      24/      1F : 82                          glo sp          ;grab low byte of stack pointer
      24/      20 : FF 02                       smi 2&255 ;claculate new low byte
      24/      22 : AE                          plo memAddr     ;save it for a moment
      24/      23 : 92                          ghi sp          ;grab high byte
      24/      24 : 7F 00                       smbi (2>>8)&255 ;calculate the new page
      24/      26 : B2                          phi sp          ;adjust page first
      24/      27 : 8E                          glo memAddr     ;get new low byte
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 2 - 2/27/2013 14:03:17


      24/      28 : A2                          plo sp          ;finish adjusting the stack pointer
      25/      29 :                     ;{
      26/      29 :                     ;	char *save = to;
      27/      29 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
      27/      29 : =>TRUE                      if      ('O'='O')
      27/      29 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
      27/      29 : 82                          glo     SP
      27/      2A : FC 00                       adi     ((-4+4))#256
      27/      2C : AE                          plo     MEMADDR
      27/      2D : 92                          ghi     SP
      27/      2E : 7C 00                       adci    ((-4+4))>>8; was/256
      27/      30 : BE                          phi     MEMADDR
      27/      31 : =>FALSE                     else
      27/      31 :                                     ldAD    memAddr,SP
      27/      31 : [27]                        endif
      27/      31 : 9C                          ghi     R12
      27/      32 : 5E                          str     memAddr
      27/      33 : 1E                          inc     memAddr
      27/      34 : 8C                          glo     R12
      27/      35 : 5E                          str     memAddr
      28/      36 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
      29/      36 : C0 00 57            	lbr L7
      30/      39 :                     L4:
      31/      39 :                     L5:
      32/      39 : (MACRO)             	ldaD R11,1
      32/      39 : F8 01                       ldi     (1)&255
      32/      3B : AB                          plo     R11
      32/      3C : F8 00                       ldi     (1)>>8; was/256
      32/      3E : BB                          phi     R11
      33/      3F : (MACRO)             	alu2 R13,R13,R11,add,adc
      33/      3F : 22                          dec     sp ;make a work ares
      33/      40 : 8B                          glo     R11
      33/      41 : 52                          str     sp
      33/      42 : 8D                          glo     R13
      33/      43 : F4                          ADD             ;calculate the low order byte
      33/      44 : AD                          plo     R13
      33/      45 : 9B                          ghi     R11
      33/      46 : 52                          str     sp
      33/      47 : 9D                          ghi     R13
      33/      48 : 74                          ADC             ;calculate the high byte
      33/      49 : BD                          phi     R13
      33/      4A : 12                          inc     sp      ;release the work area
      34/      4B : (MACRO)             	alu2 R12,R12,R11,add,adc
      34/      4B : 22                          dec     sp ;make a work ares
      34/      4C : 8B                          glo     R11
      34/      4D : 52                          str     sp
      34/      4E : 8C                          glo     R12
      34/      4F : F4                          ADD             ;calculate the low order byte
      34/      50 : AC                          plo     R12
      34/      51 : 9B                          ghi     R11
      34/      52 : 52                          str     sp
      34/      53 : 9C                          ghi     R12
      34/      54 : 74                          ADC             ;calculate the high byte
      34/      55 : BC                          phi     R12
      34/      56 : 12                          inc     sp      ;release the work area
      35/      57 :                     L7:
      36/      57 : (MACRO)             	ld1 R11,'O',R13,0
      36/      57 : =>TRUE                      if      ('O'='O')
      36/      57 :  (MACRO-2)                          ldAX    memAddr,R13,0
      36/      57 : 8D                          glo     R13
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 3 - 2/27/2013 14:03:17


      36/      58 : FC 00                       adi     (0)#256
      36/      5A : AE                          plo     MEMADDR
      36/      5B : 9D                          ghi     R13
      36/      5C : 7C 00                       adci    (0)>>8; was/256
      36/      5E : BE                          phi     MEMADDR
      36/      5F : =>FALSE                     else
      36/      5F :                                     ldAD    memAddr,R13
      36/      5F : [36]                        endif
      36/      5F : 0E                          ldn     memAddr
      36/      60 : AB                          plo     R11
      37/      61 : (MACRO)             	st1 R11,'O',R12,0; ASGNU1
      37/      61 : =>TRUE                      if      ('O'='O')
      37/      61 :  (MACRO-2)                          ldAX    memAddr,R12,0
      37/      61 : 8C                          glo     R12
      37/      62 : FC 00                       adi     (0)#256
      37/      64 : AE                          plo     MEMADDR
      37/      65 : 9C                          ghi     R12
      37/      66 : 7C 00                       adci    (0)>>8; was/256
      37/      68 : BE                          phi     MEMADDR
      37/      69 : =>FALSE                     else
      37/      69 :                                     ldAD    memAddr,R12
      37/      69 : [37]                        endif
      37/      69 : 8B                          glo     R11
      37/      6A : 5E                          str     memAddr
      38/      6B : (MACRO)             	cpy1 R11,R11
      38/      6B : 8B                          glo     R11
      38/      6C : AB                          plo     R11
      39/      6D : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      39/      6D : F8 00                       ldi     0
      39/      6F : BB                          phi     11
      40/      70 : (MACRO)             	jneU2I r11,0,L4; NE
      40/      70 : 8B                          glo     R11
      40/      71 : FF 00                       smi     (0)#256
      40/      73 : CA 00 39                    lbnz    L4
      40/      76 : 9B                          ghi     R11
      40/      77 : 7F 00                       smbi    (0)>>8; was/256
      40/      79 : CA 00 39                    lbnz    L4
      41/      7C :                     ;	return(save);
      42/      7C : (MACRO)             	ld2 R15,'O',sp,(-4+4)
      42/      7C : =>TRUE                      if      ('O'='O')
      42/      7C :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
      42/      7C : 82                          glo     SP
      42/      7D : FC 00                       adi     ((-4+4))#256
      42/      7F : AE                          plo     MEMADDR
      42/      80 : 92                          ghi     SP
      42/      81 : 7C 00                       adci    ((-4+4))>>8; was/256
      42/      83 : BE                          phi     MEMADDR
      42/      84 : =>FALSE                     else
      42/      84 :                                     ldAD    memAddr,SP
      42/      84 : [42]                        endif
      42/      84 : 4E                          lda     memAddr
      42/      85 : BF                          phi     R15
      42/      86 : 0E                          ldn     memAddr
      42/      87 : AF                          plo     R15
      43/      88 :                     L3:
      44/      88 : (MACRO)             	release 2
      44/      88 :                     ;for release we adjust the low byte first 
      44/      88 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      44/      88 :  (MACRO-2)                  alu2i sp,sp,2,adi,adci
      44/      88 : 82                          glo     SP
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 4 - 2/27/2013 14:03:17


      44/      89 : FC 02                       ADI     (2)#256
      44/      8B : A2                          plo     SP
      44/      8C : 92                          ghi     SP
      44/      8D : 7C 00                       ADCI     (2)>>8; was/256
      44/      8F : B2                          phi     SP
      45/      90 : (MACRO)             	Cretn
      45/      90 : D5                          sep     RRET
      46/      91 :                     
      47/      91 :                     _printstr:
      48/      91 : (MACRO)             	reserve 6
      48/      91 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      48/      91 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      48/      91 : 82                          glo sp          ;grab low byte of stack pointer
      48/      92 : FF 06                       smi 6&255 ;claculate new low byte
      48/      94 : AE                          plo memAddr     ;save it for a moment
      48/      95 : 92                          ghi sp          ;grab high byte
      48/      96 : 7F 00                       smbi (6>>8)&255 ;calculate the new page
      48/      98 : B2                          phi sp          ;adjust page first
      48/      99 : 8E                          glo memAddr     ;get new low byte
      48/      9A : A2                          plo sp          ;finish adjusting the stack pointer
      49/      9B : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
      49/      9B : 82                          glo     SP
      49/      9C : FC 05                       ADI     ((5))#256
      49/      9E : AE                          plo     MEMADDR
      49/      9F : 92                          ghi     SP
      49/      A0 : 7C 00                       ADCI     ((5))>>8; was/256
      49/      A2 : BE                          phi     MEMADDR
      50/      A3 : EE                  	sex	memaddr
      51/      A4 : (MACRO)             	savmi r7
      51/      A4 : 87                          glo     R7
      51/      A5 : 73                          stxd            ;R7 x is primed to the spot to start the saves
      51/      A6 : 97                          ghi     R7
      51/      A7 : 73                          stxd            ;and it end up where needed to do the next one
      52/      A8 : E2                  	sex sp
      53/      A9 : (MACRO)             	cpy2 r7,r12; function(2055) 1
      53/      A9 : 8C                          glo     R12
      53/      AA : A7                          plo     R7
      53/      AB : 9C                          ghi     R12
      53/      AC : B7                          phi     R7
      54/      AD :                     ;void printstr(char *ptr){
      55/      AD : C0 00 D2            	lbr L10
      56/      B0 :                     L9:
      57/      B0 :                     ;    while(*ptr) out(5,*ptr++);
      58/      B0 : (MACRO)             	ldaD R12,5
      58/      B0 : F8 05                       ldi     (5)&255
      58/      B2 : AC                          plo     R12
      58/      B3 : F8 00                       ldi     (5)>>8; was/256
      58/      B5 : BC                          phi     R12
      59/      B6 : (MACRO)             	cpy2 R11,R7
      59/      B6 : 87                          glo     R7
      59/      B7 : AB                          plo     R11
      59/      B8 : 97                          ghi     R7
      59/      B9 : BB                          phi     R11
      60/      BA : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
      60/      BA : =>TRUE                      if      ('O'='O')
      60/      BA :  (MACRO-2)                          ldAX    R7,R11,(1)
      60/      BA : 8B                          glo     R11
      60/      BB : FC 01                       adi     ((1))#256
      60/      BD : A7                          plo     R7
      60/      BE : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 5 - 2/27/2013 14:03:17


      60/      BF : 7C 00                       adci    ((1))>>8; was/256
      60/      C1 : B7                          phi     R7
      60/      C2 : =>FALSE                     else
      60/      C2 :                                     ldAD    R7,R11
      60/      C2 : [60]                        endif
      61/      C2 : (MACRO)             	ld1 R13,'O',R11,0
      61/      C2 : =>TRUE                      if      ('O'='O')
      61/      C2 :  (MACRO-2)                          ldAX    memAddr,R11,0
      61/      C2 : 8B                          glo     R11
      61/      C3 : FC 00                       adi     (0)#256
      61/      C5 : AE                          plo     MEMADDR
      61/      C6 : 9B                          ghi     R11
      61/      C7 : 7C 00                       adci    (0)>>8; was/256
      61/      C9 : BE                          phi     MEMADDR
      61/      CA : =>FALSE                     else
      61/      CA :                                     ldAD    memAddr,R11
      61/      CA : [61]                        endif
      61/      CA : 0E                          ldn     memAddr
      61/      CB : AD                          plo     R13
      62/      CC : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
      62/      CC : F8 00                       ldi     0
      62/      CE : BD                          phi     R13
      63/      CF : (MACRO)             	Ccall _out
      63/      CF : D4                          sep     RCALL
      63/      D0 : 10 5F                       dw      _OUT
      64/      D2 :                     L10:
      65/      D2 : (MACRO)             	ld1 R11,'O',R7,0
      65/      D2 : =>TRUE                      if      ('O'='O')
      65/      D2 :  (MACRO-2)                          ldAX    memAddr,R7,0
      65/      D2 : 87                          glo     R7
      65/      D3 : FC 00                       adi     (0)#256
      65/      D5 : AE                          plo     MEMADDR
      65/      D6 : 97                          ghi     R7
      65/      D7 : 7C 00                       adci    (0)>>8; was/256
      65/      D9 : BE                          phi     MEMADDR
      65/      DA : =>FALSE                     else
      65/      DA :                                     ldAD    memAddr,R7
      65/      DA : [65]                        endif
      65/      DA : 0E                          ldn     memAddr
      65/      DB : AB                          plo     R11
      66/      DC : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      66/      DC : F8 00                       ldi     0
      66/      DE : BB                          phi     R11
      67/      DF : (MACRO)             	jneU2I r11,0,L9; NE
      67/      DF : 8B                          glo     R11
      67/      E0 : FF 00                       smi     (0)#256
      67/      E2 : CA 00 B0                    lbnz    L9
      67/      E5 : 9B                          ghi     R11
      67/      E6 : 7F 00                       smbi    (0)>>8; was/256
      67/      E8 : CA 00 B0                    lbnz    L9
      68/      EB :                     ;}
      69/      EB :                     L8:
      70/      EB : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
      70/      EB : 82                          glo     SP
      70/      EC : FC 04                       ADI     ((4))#256
      70/      EE : AE                          plo     MEMADDR
      70/      EF : 92                          ghi     SP
      70/      F0 : 7C 00                       ADCI     ((4))>>8; was/256
      70/      F2 : BE                          phi     MEMADDR
      71/      F3 : (MACRO)             	rldmi r7,memaddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 6 - 2/27/2013 14:03:17


      71/      F3 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
      71/      F4 : B7                          phi     R7
      71/      F5 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
      71/      F6 : A7                          plo     R7
      72/      F7 : (MACRO)             	release 6
      72/      F7 :                     ;for release we adjust the low byte first 
      72/      F7 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      72/      F7 :  (MACRO-2)                  alu2i sp,sp,6,adi,adci
      72/      F7 : 82                          glo     SP
      72/      F8 : FC 06                       ADI     (6)#256
      72/      FA : A2                          plo     SP
      72/      FB : 92                          ghi     SP
      72/      FC : 7C 00                       ADCI     (6)>>8; was/256
      72/      FE : B2                          phi     SP
      73/      FF : (MACRO)             	Cretn
      73/      FF : D5                          sep     RRET
      74/     100 :                     
      75/     100 :                     _itoa:
      76/     100 : (MACRO)             	reserve 14
      76/     100 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
      76/     100 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
      76/     100 : 82                          glo sp          ;grab low byte of stack pointer
      76/     101 : FF 0E                       smi 14&255 ;claculate new low byte
      76/     103 : AE                          plo memAddr     ;save it for a moment
      76/     104 : 92                          ghi sp          ;grab high byte
      76/     105 : 7F 00                       smbi (14>>8)&255 ;calculate the new page
      76/     107 : B2                          phi sp          ;adjust page first
      76/     108 : 8E                          glo memAddr     ;get new low byte
      76/     109 : A2                          plo sp          ;finish adjusting the stack pointer
      77/     10A : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
      77/     10A : 82                          glo     SP
      77/     10B : FC 09                       ADI     ((9))#256
      77/     10D : AE                          plo     MEMADDR
      77/     10E : 92                          ghi     SP
      77/     10F : 7C 00                       ADCI     ((9))>>8; was/256
      77/     111 : BE                          phi     MEMADDR
      78/     112 : EE                  	sex	memaddr
      79/     113 : (MACRO)             	savmi r0
      79/     113 : 80                          glo     R0
      79/     114 : 73                          stxd            ;R0 x is primed to the spot to start the saves
      79/     115 : 90                          ghi     R0
      79/     116 : 73                          stxd            ;and it end up where needed to do the next one
      80/     117 : (MACRO)             	savmi r1
      80/     117 : 81                          glo     R1
      80/     118 : 73                          stxd            ;R1 x is primed to the spot to start the saves
      80/     119 : 91                          ghi     R1
      80/     11A : 73                          stxd            ;and it end up where needed to do the next one
      81/     11B : (MACRO)             	savmi r7
      81/     11B : 87                          glo     R7
      81/     11C : 73                          stxd            ;R7 x is primed to the spot to start the saves
      81/     11D : 97                          ghi     R7
      81/     11E : 73                          stxd            ;and it end up where needed to do the next one
      82/     11F : E2                  	sex sp
      83/     120 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
      83/     120 : =>TRUE                      if      ('O'='O')
      83/     120 :  (MACRO-2)                          ldAX    memAddr,SP,(16)
      83/     120 : 82                          glo     SP
      83/     121 : FC 10                       adi     ((16))#256
      83/     123 : AE                          plo     MEMADDR
      83/     124 : 92                          ghi     SP
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 7 - 2/27/2013 14:03:17


      83/     125 : 7C 00                       adci    ((16))>>8; was/256
      83/     127 : BE                          phi     MEMADDR
      83/     128 : =>FALSE                     else
      83/     128 :                                     ldAD    memAddr,SP
      83/     128 : [83]                        endif
      83/     128 : 9C                          ghi     R12
      83/     129 : 5E                          str     memAddr
      83/     12A : 1E                          inc     memAddr
      83/     12B : 8C                          glo     R12
      83/     12C : 5E                          str     memAddr
      84/     12D : (MACRO)             	st2 r13,'O',sp,(18); flag1 
      84/     12D : =>TRUE                      if      ('O'='O')
      84/     12D :  (MACRO-2)                          ldAX    memAddr,SP,(18)
      84/     12D : 82                          glo     SP
      84/     12E : FC 12                       adi     ((18))#256
      84/     130 : AE                          plo     MEMADDR
      84/     131 : 92                          ghi     SP
      84/     132 : 7C 00                       adci    ((18))>>8; was/256
      84/     134 : BE                          phi     MEMADDR
      84/     135 : =>FALSE                     else
      84/     135 :                                     ldAD    memAddr,SP
      84/     135 : [84]                        endif
      84/     135 : 9D                          ghi     R13
      84/     136 : 5E                          str     memAddr
      84/     137 : 1E                          inc     memAddr
      84/     138 : 8D                          glo     R13
      84/     139 : 5E                          str     memAddr
      85/     13A :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
      86/     13A :                     ;	unsigned int flag=0;
      87/     13A : (MACRO)             	ld2z R11
      87/     13A : F8 00                       ldi     0
      87/     13C : AB                          plo     R11
      87/     13D : BB                          phi     R11
      88/     13E : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
      88/     13E : =>TRUE                      if      ('O'='O')
      88/     13E :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
      88/     13E : 82                          glo     SP
      88/     13F : FC 0C                       adi     ((-4+16))#256
      88/     141 : AE                          plo     MEMADDR
      88/     142 : 92                          ghi     SP
      88/     143 : 7C 00                       adci    ((-4+16))>>8; was/256
      88/     145 : BE                          phi     MEMADDR
      88/     146 : =>FALSE                     else
      88/     146 :                                     ldAD    memAddr,SP
      88/     146 : [88]                        endif
      88/     146 : 9B                          ghi     R11
      88/     147 : 5E                          str     memAddr
      88/     148 : 1E                          inc     memAddr
      88/     149 : 8B                          glo     R11
      88/     14A : 5E                          str     memAddr
      89/     14B :                     ;	char * bptr; bptr=buffer;
      90/     14B : (MACRO)             	ld2 R11,'O',sp,(2+16)
      90/     14B : =>TRUE                      if      ('O'='O')
      90/     14B :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
      90/     14B : 82                          glo     SP
      90/     14C : FC 12                       adi     ((2+16))#256
      90/     14E : AE                          plo     MEMADDR
      90/     14F : 92                          ghi     SP
      90/     150 : 7C 00                       adci    ((2+16))>>8; was/256
      90/     152 : BE                          phi     MEMADDR
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 8 - 2/27/2013 14:03:17


      90/     153 : =>FALSE                     else
      90/     153 :                                     ldAD    memAddr,SP
      90/     153 : [90]                        endif
      90/     153 : 4E                          lda     memAddr
      90/     154 : BB                          phi     R11
      90/     155 : 0E                          ldn     memAddr
      90/     156 : AB                          plo     R11
      91/     157 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
      91/     157 : =>TRUE                      if      ('O'='O')
      91/     157 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
      91/     157 : 82                          glo     SP
      91/     158 : FC 0A                       adi     ((-6+16))#256
      91/     15A : AE                          plo     MEMADDR
      91/     15B : 92                          ghi     SP
      91/     15C : 7C 00                       adci    ((-6+16))>>8; was/256
      91/     15E : BE                          phi     MEMADDR
      91/     15F : =>FALSE                     else
      91/     15F :                                     ldAD    memAddr,SP
      91/     15F : [91]                        endif
      91/     15F : 9B                          ghi     R11
      91/     160 : 5E                          str     memAddr
      91/     161 : 1E                          inc     memAddr
      91/     162 : 8B                          glo     R11
      91/     163 : 5E                          str     memAddr
      92/     164 :                     ;	if (s<0){
      93/     164 : (MACRO)             	ld2 R11,'O',sp,(0+16)
      93/     164 : =>TRUE                      if      ('O'='O')
      93/     164 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
      93/     164 : 82                          glo     SP
      93/     165 : FC 10                       adi     ((0+16))#256
      93/     167 : AE                          plo     MEMADDR
      93/     168 : 92                          ghi     SP
      93/     169 : 7C 00                       adci    ((0+16))>>8; was/256
      93/     16B : BE                          phi     MEMADDR
      93/     16C : =>FALSE                     else
      93/     16C :                                     ldAD    memAddr,SP
      93/     16C : [93]                        endif
      93/     16C : 4E                          lda     memAddr
      93/     16D : BB                          phi     R11
      93/     16E : 0E                          ldn     memAddr
      93/     16F : AB                          plo     R11
      94/     170 : (MACRO)             	jcI2I r11,0,lbdf,L13; GE is flipped test from LT
      94/     170 : 8B                          glo     R11
      94/     171 : FF 00                       smi     (0)#256
      94/     173 : 9B                          ghi     R11
      94/     174 : 7F 00                       smbi    (0)>>8; was/256      ;that's a standard signed subtraction
      94/     176 : 9B                          ghi     R11 ;
      94/     177 : FB 00                       xri     (0)>>8; was/256      ;sets the top bit if the signs are different
      94/     179 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
      94/     17A : C7                          lsnf    ;bypass the df flip if signs were the same
      94/     17B : FB 01                       xri     01     ;invert original df if signs were different
      94/     17D : 76                          shrc           ;put it back in df
      94/     17E : C3 01 DA                    LBDF    L13  ;execute 
      95/     181 :                     ;		*bptr='-';bptr++;
      96/     181 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
      96/     181 : =>TRUE                      if      ('O'='O')
      96/     181 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
      96/     181 : 82                          glo     SP
      96/     182 : FC 0A                       adi     ((-6+16))#256
      96/     184 : AE                          plo     MEMADDR
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 9 - 2/27/2013 14:03:17


      96/     185 : 92                          ghi     SP
      96/     186 : 7C 00                       adci    ((-6+16))>>8; was/256
      96/     188 : BE                          phi     MEMADDR
      96/     189 : =>FALSE                     else
      96/     189 :                                     ldAD    memAddr,SP
      96/     189 : [96]                        endif
      96/     189 : 4E                          lda     memAddr
      96/     18A : BB                          phi     R11
      96/     18B : 0E                          ldn     memAddr
      96/     18C : AB                          plo     R11
      97/     18D : (MACRO)             	ldaD R10,45
      97/     18D : F8 2D                       ldi     (45)&255
      97/     18F : AA                          plo     R10
      97/     190 : F8 00                       ldi     (45)>>8; was/256
      97/     192 : BA                          phi     R10
      98/     193 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
      98/     193 : =>TRUE                      if      ('O'='O')
      98/     193 :  (MACRO-2)                          ldAX    memAddr,R11,0
      98/     193 : 8B                          glo     R11
      98/     194 : FC 00                       adi     (0)#256
      98/     196 : AE                          plo     MEMADDR
      98/     197 : 9B                          ghi     R11
      98/     198 : 7C 00                       adci    (0)>>8; was/256
      98/     19A : BE                          phi     MEMADDR
      98/     19B : =>FALSE                     else
      98/     19B :                                     ldAD    memAddr,R11
      98/     19B : [98]                        endif
      98/     19B : 8A                          glo     R10
      98/     19C : 5E                          str     memAddr
      99/     19D : (MACRO)             	ld2 R11,'O',sp,(-6+16)
      99/     19D : =>TRUE                      if      ('O'='O')
      99/     19D :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
      99/     19D : 82                          glo     SP
      99/     19E : FC 0A                       adi     ((-6+16))#256
      99/     1A0 : AE                          plo     MEMADDR
      99/     1A1 : 92                          ghi     SP
      99/     1A2 : 7C 00                       adci    ((-6+16))>>8; was/256
      99/     1A4 : BE                          phi     MEMADDR
      99/     1A5 : =>FALSE                     else
      99/     1A5 :                                     ldAD    memAddr,SP
      99/     1A5 : [99]                        endif
      99/     1A5 : 4E                          lda     memAddr
      99/     1A6 : BB                          phi     R11
      99/     1A7 : 0E                          ldn     memAddr
      99/     1A8 : AB                          plo     R11
     100/     1A9 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     100/     1A9 : =>TRUE                      if      ('O'='O')
     100/     1A9 :  (MACRO-2)                          ldAX    R11,R11,(1)
     100/     1A9 : 8B                          glo     R11
     100/     1AA : FC 01                       adi     ((1))#256
     100/     1AC : AB                          plo     R11
     100/     1AD : 9B                          ghi     R11
     100/     1AE : 7C 00                       adci    ((1))>>8; was/256
     100/     1B0 : BB                          phi     R11
     100/     1B1 : =>FALSE                     else
     100/     1B1 :                                     ldAD    R11,R11
     100/     1B1 : [100]                       endif
     101/     1B1 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     101/     1B1 : =>TRUE                      if      ('O'='O')
     101/     1B1 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 10 - 2/27/2013 14:03:17


     101/     1B1 : 82                          glo     SP
     101/     1B2 : FC 0A                       adi     ((-6+16))#256
     101/     1B4 : AE                          plo     MEMADDR
     101/     1B5 : 92                          ghi     SP
     101/     1B6 : 7C 00                       adci    ((-6+16))>>8; was/256
     101/     1B8 : BE                          phi     MEMADDR
     101/     1B9 : =>FALSE                     else
     101/     1B9 :                                     ldAD    memAddr,SP
     101/     1B9 : [101]                       endif
     101/     1B9 : 9B                          ghi     R11
     101/     1BA : 5E                          str     memAddr
     101/     1BB : 1E                          inc     memAddr
     101/     1BC : 8B                          glo     R11
     101/     1BD : 5E                          str     memAddr
     102/     1BE :                     ;		n=-s;
     103/     1BE : (MACRO)             	ld2 R11,'O',sp,(0+16)
     103/     1BE : =>TRUE                      if      ('O'='O')
     103/     1BE :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     103/     1BE : 82                          glo     SP
     103/     1BF : FC 10                       adi     ((0+16))#256
     103/     1C1 : AE                          plo     MEMADDR
     103/     1C2 : 92                          ghi     SP
     103/     1C3 : 7C 00                       adci    ((0+16))>>8; was/256
     103/     1C5 : BE                          phi     MEMADDR
     103/     1C6 : =>FALSE                     else
     103/     1C6 :                                     ldAD    memAddr,SP
     103/     1C6 : [103]                       endif
     103/     1C6 : 4E                          lda     memAddr
     103/     1C7 : BB                          phi     R11
     103/     1C8 : 0E                          ldn     memAddr
     103/     1C9 : AB                          plo     R11
     104/     1CA : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     104/     1CA : 8B                          glo     R11                     ;(flip all the bits and add 1)
     104/     1CB : FB FF                       xri     0xff
     104/     1CD : AB                          plo     R11
     104/     1CE : 9B                          ghi     R11
     104/     1CF : FB FF                       xri     0xff
     104/     1D1 : BB                          phi     R11
     104/     1D2 : 1B                          inc     R11
     105/     1D3 : (MACRO)             	cpy2 R1,R11
     105/     1D3 : 8B                          glo     R11
     105/     1D4 : A1                          plo     R1
     105/     1D5 : 9B                          ghi     R11
     105/     1D6 : B1                          phi     R1
     106/     1D7 :                     ;	} else{
     107/     1D7 : C0 01 EA            	lbr L14
     108/     1DA :                     L13:
     109/     1DA :                     ;		n=s;
     110/     1DA : (MACRO)             	ld2 R11,'O',sp,(0+16)
     110/     1DA : =>TRUE                      if      ('O'='O')
     110/     1DA :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     110/     1DA : 82                          glo     SP
     110/     1DB : FC 10                       adi     ((0+16))#256
     110/     1DD : AE                          plo     MEMADDR
     110/     1DE : 92                          ghi     SP
     110/     1DF : 7C 00                       adci    ((0+16))>>8; was/256
     110/     1E1 : BE                          phi     MEMADDR
     110/     1E2 : =>FALSE                     else
     110/     1E2 :                                     ldAD    memAddr,SP
     110/     1E2 : [110]                       endif
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 11 - 2/27/2013 14:03:17


     110/     1E2 : 4E                          lda     memAddr
     110/     1E3 : BB                          phi     R11
     110/     1E4 : 0E                          ldn     memAddr
     110/     1E5 : AB                          plo     R11
     111/     1E6 : (MACRO)             	cpy2 R1,R11
     111/     1E6 : 8B                          glo     R11
     111/     1E7 : A1                          plo     R1
     111/     1E8 : 9B                          ghi     R11
     111/     1E9 : B1                          phi     R1
     112/     1EA :                     ;	}
     113/     1EA :                     L14:
     114/     1EA :                     ;	k=10000;
     115/     1EA : (MACRO)             	ldaD R7,10000
     115/     1EA : F8 10                       ldi     (10000)&255
     115/     1EC : A7                          plo     R7
     115/     1ED : F8 27                       ldi     (10000)>>8; was/256
     115/     1EF : B7                          phi     R7
     116/     1F0 : C0 02 B7            	lbr L16
     117/     1F3 :                     L15:
     118/     1F3 :                     ;	while(k>0){
     119/     1F3 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     120/     1F3 : (MACRO)             	ld2z R0
     120/     1F3 : F8 00                       ldi     0
     120/     1F5 : A0                          plo     R0
     120/     1F6 : B0                          phi     R0
     121/     1F7 : C0 02 07            	lbr L21
     122/     1FA :                     L18:
     123/     1FA :                     L19:
     124/     1FA : 10                  	inc R0
     125/     1FB : (MACRO)             	alu2 R1,R1,R7,sm,smb
     125/     1FB : 22                          dec     sp ;make a work ares
     125/     1FC : 87                          glo     R7
     125/     1FD : 52                          str     sp
     125/     1FE : 81                          glo     R1
     125/     1FF : F7                          SM             ;calculate the low order byte
     125/     200 : A1                          plo     R1
     125/     201 : 97                          ghi     R7
     125/     202 : 52                          str     sp
     125/     203 : 91                          ghi     R1
     125/     204 : 77                          SMB             ;calculate the high byte
     125/     205 : B1                          phi     R1
     125/     206 : 12                          inc     sp      ;release the work area
     126/     207 :                     L21:
     127/     207 : (MACRO)             	jcU2 r1,r7,lbdf,L18 ;LE is flipped test & operands
     127/     207 : 22                          dec     sp
     127/     208 : 87                          glo     R7
     127/     209 : 52                          str     sp
     127/     20A : 81                          glo     R1
     127/     20B : F7                          sm
     127/     20C : 97                          ghi     R7
     127/     20D : 52                          str     sp
     127/     20E : 91                          ghi     R1
     127/     20F : 77                          smb
     127/     210 : 12                          inc     sp
     127/     211 : C3 01 FA                    LBDF    L18
     128/     214 :                     ;		if (flag || r>0||k==1){
     129/     214 : (MACRO)             	ld2z R11
     129/     214 : F8 00                       ldi     0
     129/     216 : AB                          plo     R11
     129/     217 : BB                          phi     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 12 - 2/27/2013 14:03:17


     130/     218 : (MACRO)             	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
     130/     218 : =>TRUE                      if      ('O'='O')
     130/     218 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     130/     218 : 82                          glo     SP
     130/     219 : FC 0C                       adi     ((-4+16))#256
     130/     21B : AE                          plo     MEMADDR
     130/     21C : 92                          ghi     SP
     130/     21D : 7C 00                       adci    ((-4+16))>>8; was/256
     130/     21F : BE                          phi     MEMADDR
     130/     220 : =>FALSE                     else
     130/     220 :                                     ldAD    memAddr,SP
     130/     220 : [130]                       endif
     130/     220 : 4E                          lda     memAddr
     130/     221 : BA                          phi     R10
     130/     222 : 0E                          ldn     memAddr
     130/     223 : AA                          plo     R10
     131/     224 : (MACRO)             	jneU2 r10,r11,L25; NE
     131/     224 : 22                          dec     sp
     131/     225 : 8B                          glo     R11
     131/     226 : 52                          str     sp
     131/     227 : 8A                          glo     R10
     131/     228 : F7                          sm
     131/     229 : 12                          inc     sp
     131/     22A : CA 02 54                    lbnz    L25
     131/     22D : 22                          dec     sp
     131/     22E : 9B                          ghi     R11
     131/     22F : 52                          str     sp
     131/     230 : 9A                          ghi     R10
     131/     231 : 77                          smb
     131/     232 : 12                          inc     sp
     131/     233 : CA 02 54                    lbnz    L25
     132/     236 : (MACRO)             	jneU2 r0,r11,L25; NE
     132/     236 : 22                          dec     sp
     132/     237 : 8B                          glo     R11
     132/     238 : 52                          str     sp
     132/     239 : 80                          glo     R0
     132/     23A : F7                          sm
     132/     23B : 12                          inc     sp
     132/     23C : CA 02 54                    lbnz    L25
     132/     23F : 22                          dec     sp
     132/     240 : 9B                          ghi     R11
     132/     241 : 52                          str     sp
     132/     242 : 90                          ghi     R0
     132/     243 : 77                          smb
     132/     244 : 12                          inc     sp
     132/     245 : CA 02 54                    lbnz    L25
     133/     248 : (MACRO)             	jneU2I r7,1,L22; NE
     133/     248 : 87                          glo     R7
     133/     249 : FF 01                       smi     (1)#256
     133/     24B : CA 02 A6                    lbnz    L22
     133/     24E : 97                          ghi     R7
     133/     24F : 7F 00                       smbi    (1)>>8; was/256
     133/     251 : CA 02 A6                    lbnz    L22
     134/     254 :                     L25:
     135/     254 :                     ;			*bptr=('0'+r);bptr++;
     136/     254 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     136/     254 : =>TRUE                      if      ('O'='O')
     136/     254 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     136/     254 : 82                          glo     SP
     136/     255 : FC 0A                       adi     ((-6+16))#256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 13 - 2/27/2013 14:03:17


     136/     257 : AE                          plo     MEMADDR
     136/     258 : 92                          ghi     SP
     136/     259 : 7C 00                       adci    ((-6+16))>>8; was/256
     136/     25B : BE                          phi     MEMADDR
     136/     25C : =>FALSE                     else
     136/     25C :                                     ldAD    memAddr,SP
     136/     25C : [136]                       endif
     136/     25C : 4E                          lda     memAddr
     136/     25D : BB                          phi     R11
     136/     25E : 0E                          ldn     memAddr
     136/     25F : AB                          plo     R11
     137/     260 : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     137/     260 : =>TRUE                      if      ('O'='O')
     137/     260 :  (MACRO-2)                          ldAX    R10,R0,(48)
     137/     260 : 80                          glo     R0
     137/     261 : FC 30                       adi     ((48))#256
     137/     263 : AA                          plo     R10
     137/     264 : 90                          ghi     R0
     137/     265 : 7C 00                       adci    ((48))>>8; was/256
     137/     267 : BA                          phi     R10
     137/     268 : =>FALSE                     else
     137/     268 :                                     ldAD    R10,R0
     137/     268 : [137]                       endif
     138/     268 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     138/     268 : =>TRUE                      if      ('O'='O')
     138/     268 :  (MACRO-2)                          ldAX    memAddr,R11,0
     138/     268 : 8B                          glo     R11
     138/     269 : FC 00                       adi     (0)#256
     138/     26B : AE                          plo     MEMADDR
     138/     26C : 9B                          ghi     R11
     138/     26D : 7C 00                       adci    (0)>>8; was/256
     138/     26F : BE                          phi     MEMADDR
     138/     270 : =>FALSE                     else
     138/     270 :                                     ldAD    memAddr,R11
     138/     270 : [138]                       endif
     138/     270 : 8A                          glo     R10
     138/     271 : 5E                          str     memAddr
     139/     272 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     139/     272 : =>TRUE                      if      ('O'='O')
     139/     272 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     139/     272 : 82                          glo     SP
     139/     273 : FC 0A                       adi     ((-6+16))#256
     139/     275 : AE                          plo     MEMADDR
     139/     276 : 92                          ghi     SP
     139/     277 : 7C 00                       adci    ((-6+16))>>8; was/256
     139/     279 : BE                          phi     MEMADDR
     139/     27A : =>FALSE                     else
     139/     27A :                                     ldAD    memAddr,SP
     139/     27A : [139]                       endif
     139/     27A : 4E                          lda     memAddr
     139/     27B : BB                          phi     R11
     139/     27C : 0E                          ldn     memAddr
     139/     27D : AB                          plo     R11
     140/     27E : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     140/     27E : =>TRUE                      if      ('O'='O')
     140/     27E :  (MACRO-2)                          ldAX    R11,R11,(1)
     140/     27E : 8B                          glo     R11
     140/     27F : FC 01                       adi     ((1))#256
     140/     281 : AB                          plo     R11
     140/     282 : 9B                          ghi     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 14 - 2/27/2013 14:03:17


     140/     283 : 7C 00                       adci    ((1))>>8; was/256
     140/     285 : BB                          phi     R11
     140/     286 : =>FALSE                     else
     140/     286 :                                     ldAD    R11,R11
     140/     286 : [140]                       endif
     141/     286 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     141/     286 : =>TRUE                      if      ('O'='O')
     141/     286 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     141/     286 : 82                          glo     SP
     141/     287 : FC 0A                       adi     ((-6+16))#256
     141/     289 : AE                          plo     MEMADDR
     141/     28A : 92                          ghi     SP
     141/     28B : 7C 00                       adci    ((-6+16))>>8; was/256
     141/     28D : BE                          phi     MEMADDR
     141/     28E : =>FALSE                     else
     141/     28E :                                     ldAD    memAddr,SP
     141/     28E : [141]                       endif
     141/     28E : 9B                          ghi     R11
     141/     28F : 5E                          str     memAddr
     141/     290 : 1E                          inc     memAddr
     141/     291 : 8B                          glo     R11
     141/     292 : 5E                          str     memAddr
     142/     293 :                     ;			flag='y';
     143/     293 : (MACRO)             	ldaD R11,121
     143/     293 : F8 79                       ldi     (121)&255
     143/     295 : AB                          plo     R11
     143/     296 : F8 00                       ldi     (121)>>8; was/256
     143/     298 : BB                          phi     R11
     144/     299 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     144/     299 : =>TRUE                      if      ('O'='O')
     144/     299 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     144/     299 : 82                          glo     SP
     144/     29A : FC 0C                       adi     ((-4+16))#256
     144/     29C : AE                          plo     MEMADDR
     144/     29D : 92                          ghi     SP
     144/     29E : 7C 00                       adci    ((-4+16))>>8; was/256
     144/     2A0 : BE                          phi     MEMADDR
     144/     2A1 : =>FALSE                     else
     144/     2A1 :                                     ldAD    memAddr,SP
     144/     2A1 : [144]                       endif
     144/     2A1 : 9B                          ghi     R11
     144/     2A2 : 5E                          str     memAddr
     144/     2A3 : 1E                          inc     memAddr
     144/     2A4 : 8B                          glo     R11
     144/     2A5 : 5E                          str     memAddr
     145/     2A6 :                     ;		}
     146/     2A6 :                     L22:
     147/     2A6 :                     ;		k=k/10;
     148/     2A6 : (MACRO)             	cpy2 R12,R7
     148/     2A6 : 87                          glo     R7
     148/     2A7 : AC                          plo     R12
     148/     2A8 : 97                          ghi     R7
     148/     2A9 : BC                          phi     R12
     149/     2AA : (MACRO)             	ldaD R13,10
     149/     2AA : F8 0A                       ldi     (10)&255
     149/     2AC : AD                          plo     R13
     149/     2AD : F8 00                       ldi     (10)>>8; was/256
     149/     2AF : BD                          phi     R13
     150/     2B0 : (MACRO)             	Ccall _divu2
     150/     2B0 : D4                          sep     RCALL
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 15 - 2/27/2013 14:03:17


     150/     2B1 : 0D 49                       dw      _DIVU2
     151/     2B3 : (MACRO)             	cpy2 R7,R15
     151/     2B3 : 8F                          glo     R15
     151/     2B4 : A7                          plo     R7
     151/     2B5 : 9F                          ghi     R15
     151/     2B6 : B7                          phi     R7
     152/     2B7 :                     ;	}
     153/     2B7 :                     L16:
     154/     2B7 :                     ;	while(k>0){
     155/     2B7 : (MACRO)             	jnzU2 r7,L15; NE 0
     155/     2B7 : 87                          glo     R7
     155/     2B8 : CA 01 F3                    lbnz    L15
     155/     2BB : 97                          ghi     R7
     155/     2BC : CA 01 F3                    lbnz    L15
     156/     2BF :                     ;	*bptr='\0';
     157/     2BF : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     157/     2BF : =>TRUE                      if      ('O'='O')
     157/     2BF :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     157/     2BF : 82                          glo     SP
     157/     2C0 : FC 0A                       adi     ((-6+16))#256
     157/     2C2 : AE                          plo     MEMADDR
     157/     2C3 : 92                          ghi     SP
     157/     2C4 : 7C 00                       adci    ((-6+16))>>8; was/256
     157/     2C6 : BE                          phi     MEMADDR
     157/     2C7 : =>FALSE                     else
     157/     2C7 :                                     ldAD    memAddr,SP
     157/     2C7 : [157]                       endif
     157/     2C7 : 4E                          lda     memAddr
     157/     2C8 : BB                          phi     R11
     157/     2C9 : 0E                          ldn     memAddr
     157/     2CA : AB                          plo     R11
     158/     2CB : (MACRO)             	ldaD R10,0
     158/     2CB : F8 00                       ldi     (0)&255
     158/     2CD : AA                          plo     R10
     158/     2CE : F8 00                       ldi     (0)>>8; was/256
     158/     2D0 : BA                          phi     R10
     159/     2D1 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     159/     2D1 : =>TRUE                      if      ('O'='O')
     159/     2D1 :  (MACRO-2)                          ldAX    memAddr,R11,0
     159/     2D1 : 8B                          glo     R11
     159/     2D2 : FC 00                       adi     (0)#256
     159/     2D4 : AE                          plo     MEMADDR
     159/     2D5 : 9B                          ghi     R11
     159/     2D6 : 7C 00                       adci    (0)>>8; was/256
     159/     2D8 : BE                          phi     MEMADDR
     159/     2D9 : =>FALSE                     else
     159/     2D9 :                                     ldAD    memAddr,R11
     159/     2D9 : [159]                       endif
     159/     2D9 : 8A                          glo     R10
     159/     2DA : 5E                          str     memAddr
     160/     2DB :                     ;	return buffer;
     161/     2DB : (MACRO)             	ld2 R15,'O',sp,(2+16)
     161/     2DB : =>TRUE                      if      ('O'='O')
     161/     2DB :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
     161/     2DB : 82                          glo     SP
     161/     2DC : FC 12                       adi     ((2+16))#256
     161/     2DE : AE                          plo     MEMADDR
     161/     2DF : 92                          ghi     SP
     161/     2E0 : 7C 00                       adci    ((2+16))>>8; was/256
     161/     2E2 : BE                          phi     MEMADDR
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 16 - 2/27/2013 14:03:17


     161/     2E3 : =>FALSE                     else
     161/     2E3 :                                     ldAD    memAddr,SP
     161/     2E3 : [161]                       endif
     161/     2E3 : 4E                          lda     memAddr
     161/     2E4 : BF                          phi     R15
     161/     2E5 : 0E                          ldn     memAddr
     161/     2E6 : AF                          plo     R15
     162/     2E7 :                     L12:
     163/     2E7 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     163/     2E7 : 82                          glo     SP
     163/     2E8 : FC 04                       ADI     ((4))#256
     163/     2EA : AE                          plo     MEMADDR
     163/     2EB : 92                          ghi     SP
     163/     2EC : 7C 00                       ADCI     ((4))>>8; was/256
     163/     2EE : BE                          phi     MEMADDR
     164/     2EF : (MACRO)             	rldmi r7,memaddr
     164/     2EF : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     164/     2F0 : B7                          phi     R7
     164/     2F1 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     164/     2F2 : A7                          plo     R7
     165/     2F3 : (MACRO)             	rldmi r1,memaddr
     165/     2F3 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     165/     2F4 : B1                          phi     R1
     165/     2F5 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     165/     2F6 : A1                          plo     R1
     166/     2F7 : (MACRO)             	rldmi r0,memaddr
     166/     2F7 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     166/     2F8 : B0                          phi     R0
     166/     2F9 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     166/     2FA : A0                          plo     R0
     167/     2FB : (MACRO)             	release 14
     167/     2FB :                     ;for release we adjust the low byte first 
     167/     2FB :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     167/     2FB :  (MACRO-2)                  alu2i sp,sp,14,adi,adci
     167/     2FB : 82                          glo     SP
     167/     2FC : FC 0E                       ADI     (14)#256
     167/     2FE : A2                          plo     SP
     167/     2FF : 92                          ghi     SP
     167/     300 : 7C 00                       ADCI     (14)>>8; was/256
     167/     302 : B2                          phi     SP
     168/     303 : (MACRO)             	Cretn
     168/     303 : D5                          sep     RRET
     169/     304 :                     
     170/     304 :                     _ltoa:
     171/     304 : (MACRO)             	reserve 12
     171/     304 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     171/     304 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     171/     304 : 82                          glo sp          ;grab low byte of stack pointer
     171/     305 : FF 0C                       smi 12&255 ;claculate new low byte
     171/     307 : AE                          plo memAddr     ;save it for a moment
     171/     308 : 92                          ghi sp          ;grab high byte
     171/     309 : 7F 00                       smbi (12>>8)&255 ;calculate the new page
     171/     30B : B2                          phi sp          ;adjust page first
     171/     30C : 8E                          glo memAddr     ;get new low byte
     171/     30D : A2                          plo sp          ;finish adjusting the stack pointer
     172/     30E : (MACRO)             	alu2I memaddr,sp,(11),adi,adci
     172/     30E : 82                          glo     SP
     172/     30F : FC 0B                       ADI     ((11))#256
     172/     311 : AE                          plo     MEMADDR
     172/     312 : 92                          ghi     SP
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 17 - 2/27/2013 14:03:17


     172/     313 : 7C 00                       ADCI     ((11))>>8; was/256
     172/     315 : BE                          phi     MEMADDR
     173/     316 : EE                  	sex	memaddr
     174/     317 : (MACRO)             	savmi r0
     174/     317 : 80                          glo     R0
     174/     318 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     174/     319 : 90                          ghi     R0
     174/     31A : 73                          stxd            ;and it end up where needed to do the next one
     175/     31B : (MACRO)             	savmi r1
     175/     31B : 81                          glo     R1
     175/     31C : 73                          stxd            ;R1 x is primed to the spot to start the saves
     175/     31D : 91                          ghi     R1
     175/     31E : 73                          stxd            ;and it end up where needed to do the next one
     176/     31F : (MACRO)             	savmi r7
     176/     31F : 87                          glo     R7
     176/     320 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     176/     321 : 97                          ghi     R7
     176/     322 : 73                          stxd            ;and it end up where needed to do the next one
     177/     323 : E2                  	sex sp
     178/     324 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     178/     324 :  (MACRO-2)                  cpy2    RL0,RL12 ;long reg pairs are addressed as the low order pair
     178/     324 : 8D                          glo     RL12
     178/     325 : A1                          plo     RL0
     178/     326 : 9D                          ghi     RL12
     178/     327 : B1                          phi     RL0
     178/     328 :  (MACRO-2)                  cpy2    RL0-1,RL12-1
     178/     328 : 8C                          glo     RL12-1
     178/     329 : A0                          plo     RL0-1
     178/     32A : 9C                          ghi     RL12-1
     178/     32B : B0                          phi     RL0-1
     179/     32C :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     180/     32C :                     ;	char* bptr=buffer;
     181/     32C : (MACRO)             	ld2 R7,'O',sp,(4+14)
     181/     32C : =>TRUE                      if      ('O'='O')
     181/     32C :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     181/     32C : 82                          glo     SP
     181/     32D : FC 12                       adi     ((4+14))#256
     181/     32F : AE                          plo     MEMADDR
     181/     330 : 92                          ghi     SP
     181/     331 : 7C 00                       adci    ((4+14))>>8; was/256
     181/     333 : BE                          phi     MEMADDR
     181/     334 : =>FALSE                     else
     181/     334 :                                     ldAD    memAddr,SP
     181/     334 : [181]                       endif
     181/     334 : 4E                          lda     memAddr
     181/     335 : B7                          phi     R7
     181/     336 : 0E                          ldn     memAddr
     181/     337 : A7                          plo     R7
     182/     338 :                     ;	if (s<0){
     183/     338 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     183/     338 : F8 00                       ldi     (0)&255
     183/     33A : AB                          plo     RL10
     183/     33B : F8 00                       ldi     ((0)>>8)&255; 
     183/     33D : BB                          phi     RL10
     183/     33E : F8 00                       ldi     ((0)>>16)&255; 
     183/     340 : AA                          plo     RL10-1
     183/     341 : F8 00                       ldi     ((0)>>24)&255; 
     183/     343 : BA                          phi     RL10-1
     184/     344 : (MACRO)             	jcI4 RL0,RL10,lbdf,L27; GE is flipped test from LT
     184/     344 : 22                          dec     sp ;make a work area
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 18 - 2/27/2013 14:03:17


     184/     345 : 8B                          glo     RL10    ;lowest order byte
     184/     346 : 52                          str     sp 
     184/     347 : 81                          glo     RL0
     184/     348 : F7                          sm
     184/     349 : 9B                          ghi     RL10
     184/     34A : 52                          str     sp
     184/     34B : 91                          ghi     RL0
     184/     34C : 77                          smb          ;that's a standard signed subtraction of one reg
     184/     34D : 8A                          glo     RL10-1  ;lowest order byte of the top register
     184/     34E : 52                          str     sp 
     184/     34F : 80                          glo     RL0-1
     184/     350 : 77                          smb
     184/     351 : 9A                          ghi     RL10-1
     184/     352 : 52                          str     sp
     184/     353 : 90                          ghi     RL0-1
     184/     354 : 77                          smb          ;that's a standard signed subtraction of a double register
     184/     355 : 90                          ghi     RL0-1 ;
     184/     356 : F3                          xor           ;sets the top bit if the signs are different
     184/     357 : 12                          inc     sp ;release the work area
     184/     358 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     184/     359 : C7                          lsnf    ;bypass the flip if signs were the same
     184/     35A : FB 01                       xri     01     ;invert original df if signs were different
     184/     35C : 76                          shrc           ;put it back in df
     184/     35D : C3 03 9C                    LBDF    L27  ;execute 
     185/     360 :                     ;		*bptr++='-';
     186/     360 : (MACRO)             	cpy2 R11,R7
     186/     360 : 87                          glo     R7
     186/     361 : AB                          plo     R11
     186/     362 : 97                          ghi     R7
     186/     363 : BB                          phi     R11
     187/     364 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     187/     364 : =>TRUE                      if      ('O'='O')
     187/     364 :  (MACRO-2)                          ldAX    R7,R11,(1)
     187/     364 : 8B                          glo     R11
     187/     365 : FC 01                       adi     ((1))#256
     187/     367 : A7                          plo     R7
     187/     368 : 9B                          ghi     R11
     187/     369 : 7C 00                       adci    ((1))>>8; was/256
     187/     36B : B7                          phi     R7
     187/     36C : =>FALSE                     else
     187/     36C :                                     ldAD    R7,R11
     187/     36C : [187]                       endif
     188/     36C : (MACRO)             	ldaD R10,45
     188/     36C : F8 2D                       ldi     (45)&255
     188/     36E : AA                          plo     R10
     188/     36F : F8 00                       ldi     (45)>>8; was/256
     188/     371 : BA                          phi     R10
     189/     372 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     189/     372 : =>TRUE                      if      ('O'='O')
     189/     372 :  (MACRO-2)                          ldAX    memAddr,R11,0
     189/     372 : 8B                          glo     R11
     189/     373 : FC 00                       adi     (0)#256
     189/     375 : AE                          plo     MEMADDR
     189/     376 : 9B                          ghi     R11
     189/     377 : 7C 00                       adci    (0)>>8; was/256
     189/     379 : BE                          phi     MEMADDR
     189/     37A : =>FALSE                     else
     189/     37A :                                     ldAD    memAddr,R11
     189/     37A : [189]                       endif
     189/     37A : 8A                          glo     R10
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 19 - 2/27/2013 14:03:17


     189/     37B : 5E                          str     memAddr
     190/     37C :                     ;		s=-s;
     191/     37C : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     191/     37C :  (MACRO-2)                  alu4I   RL0,RL0,0xffffffff,xri,xri      ;flip all the bits
     191/     37C : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
     191/     37D : FB FF                       XRI     (0XFFFFFFFF)&255
     191/     37F : A1                          plo     RL0
     191/     380 : 91                          ghi     RL0
     191/     381 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
     191/     383 : B1                          phi     RL0
     191/     384 : 80                          glo     RL0-1
     191/     385 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
     191/     387 : A0                          plo     RL0-1
     191/     388 : 90                          ghi     RL0-1
     191/     389 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
     191/     38B : B0                          phi     RL0-1
     191/     38C :  (MACRO-2)                  alu4i   RL0,RL0,1,adi,adci              ;and add 1
     191/     38C : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
     191/     38D : FC 01                       ADI     (1)&255
     191/     38F : A1                          plo     RL0
     191/     390 : 91                          ghi     RL0
     191/     391 : 7C 00                       ADCI     ((1)>>8)&255; 
     191/     393 : B1                          phi     RL0
     191/     394 : 80                          glo     RL0-1
     191/     395 : 7C 00                       ADCI     ((1)>>16)&255; 
     191/     397 : A0                          plo     RL0-1
     191/     398 : 90                          ghi     RL0-1
     191/     399 : 7C 00                       ADCI     ((1)>>24)&255; 
     191/     39B : B0                          phi     RL0-1
     192/     39C :                     ;	}
     193/     39C :                     L27:
     194/     39C :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     195/     39C : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     195/     39C :  (MACRO-2)                  cpy2    RP1P2,RL0 ;long reg pairs are addressed as the low order pair
     195/     39C : 81                          glo     RL0
     195/     39D : AD                          plo     RP1P2
     195/     39E : 91                          ghi     RL0
     195/     39F : BD                          phi     RP1P2
     195/     3A0 :  (MACRO-2)                  cpy2    RP1P2-1,RL0-1
     195/     3A0 : 80                          glo     RL0-1
     195/     3A1 : AC                          plo     RP1P2-1
     195/     3A2 : 90                          ghi     RL0-1
     195/     3A3 : BC                          phi     RP1P2-1
     196/     3A4 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     196/     3A4 : =>TRUE                      if      ('O'='O')
     196/     3A4 :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     196/     3A4 : 82                          glo     SP
     196/     3A5 : FC 04                       adi     ((4))#256
     196/     3A7 : AE                          plo     MEMADDR
     196/     3A8 : 92                          ghi     SP
     196/     3A9 : 7C 00                       adci    ((4))>>8; was/256
     196/     3AB : BE                          phi     MEMADDR
     196/     3AC : =>FALSE                     else
     196/     3AC :                                     ldAD    memAddr,SP
     196/     3AC : [196]                       endif
     196/     3AC : 97                          ghi     R7
     196/     3AD : 5E                          str     memAddr
     196/     3AE : 1E                          inc     memAddr
     196/     3AF : 87                          glo     R7
     196/     3B0 : 5E                          str     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 20 - 2/27/2013 14:03:17


     197/     3B1 : (MACRO)             	Ccall _dubdabx
     197/     3B1 : D4                          sep     RCALL
     197/     3B2 : 0F 75                       dw      _DUBDABX
     198/     3B4 : (MACRO)             	cpy2 R11,R15
     198/     3B4 : 8F                          glo     R15
     198/     3B5 : AB                          plo     R11
     198/     3B6 : 9F                          ghi     R15
     198/     3B7 : BB                          phi     R11
     199/     3B8 : (MACRO)             	cpy2 R12,R7
     199/     3B8 : 87                          glo     R7
     199/     3B9 : AC                          plo     R12
     199/     3BA : 97                          ghi     R7
     199/     3BB : BC                          phi     R12
     200/     3BC : (MACRO)             	cpy2 R13,R11
     200/     3BC : 8B                          glo     R11
     200/     3BD : AD                          plo     R13
     200/     3BE : 9B                          ghi     R11
     200/     3BF : BD                          phi     R13
     201/     3C0 : (MACRO)             	Ccall _strcpy
     201/     3C0 : D4                          sep     RCALL
     201/     3C1 : 00 1F                       dw      _STRCPY
     202/     3C3 :                     ;	return buffer;
     203/     3C3 : (MACRO)             	ld2 R15,'O',sp,(4+14)
     203/     3C3 : =>TRUE                      if      ('O'='O')
     203/     3C3 :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     203/     3C3 : 82                          glo     SP
     203/     3C4 : FC 12                       adi     ((4+14))#256
     203/     3C6 : AE                          plo     MEMADDR
     203/     3C7 : 92                          ghi     SP
     203/     3C8 : 7C 00                       adci    ((4+14))>>8; was/256
     203/     3CA : BE                          phi     MEMADDR
     203/     3CB : =>FALSE                     else
     203/     3CB :                                     ldAD    memAddr,SP
     203/     3CB : [203]                       endif
     203/     3CB : 4E                          lda     memAddr
     203/     3CC : BF                          phi     R15
     203/     3CD : 0E                          ldn     memAddr
     203/     3CE : AF                          plo     R15
     204/     3CF :                     L26:
     205/     3CF : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
     205/     3CF : 82                          glo     SP
     205/     3D0 : FC 06                       ADI     ((6))#256
     205/     3D2 : AE                          plo     MEMADDR
     205/     3D3 : 92                          ghi     SP
     205/     3D4 : 7C 00                       ADCI     ((6))>>8; was/256
     205/     3D6 : BE                          phi     MEMADDR
     206/     3D7 : (MACRO)             	rldmi r7,memaddr
     206/     3D7 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     206/     3D8 : B7                          phi     R7
     206/     3D9 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     206/     3DA : A7                          plo     R7
     207/     3DB : (MACRO)             	rldmi r1,memaddr
     207/     3DB : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     207/     3DC : B1                          phi     R1
     207/     3DD : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     207/     3DE : A1                          plo     R1
     208/     3DF : (MACRO)             	rldmi r0,memaddr
     208/     3DF : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     208/     3E0 : B0                          phi     R0
     208/     3E1 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 21 - 2/27/2013 14:03:17


     208/     3E2 : A0                          plo     R0
     209/     3E3 : (MACRO)             	release 12
     209/     3E3 :                     ;for release we adjust the low byte first 
     209/     3E3 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     209/     3E3 :  (MACRO-2)                  alu2i sp,sp,12,adi,adci
     209/     3E3 : 82                          glo     SP
     209/     3E4 : FC 0C                       ADI     (12)#256
     209/     3E6 : A2                          plo     SP
     209/     3E7 : 92                          ghi     SP
     209/     3E8 : 7C 00                       ADCI     (12)>>8; was/256
     209/     3EA : B2                          phi     SP
     210/     3EB : (MACRO)             	Cretn
     210/     3EB : D5                          sep     RRET
     211/     3EC :                     
     212/     3EC :                     _printint:
     213/     3EC : (MACRO)             	reserve 12
     213/     3EC :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     213/     3EC :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     213/     3EC : 82                          glo sp          ;grab low byte of stack pointer
     213/     3ED : FF 0C                       smi 12&255 ;claculate new low byte
     213/     3EF : AE                          plo memAddr     ;save it for a moment
     213/     3F0 : 92                          ghi sp          ;grab high byte
     213/     3F1 : 7F 00                       smbi (12>>8)&255 ;calculate the new page
     213/     3F3 : B2                          phi sp          ;adjust page first
     213/     3F4 : 8E                          glo memAddr     ;get new low byte
     213/     3F5 : A2                          plo sp          ;finish adjusting the stack pointer
     214/     3F6 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     214/     3F6 : =>TRUE                      if      ('O'='O')
     214/     3F6 :  (MACRO-2)                          ldAX    memAddr,SP,(14)
     214/     3F6 : 82                          glo     SP
     214/     3F7 : FC 0E                       adi     ((14))#256
     214/     3F9 : AE                          plo     MEMADDR
     214/     3FA : 92                          ghi     SP
     214/     3FB : 7C 00                       adci    ((14))>>8; was/256
     214/     3FD : BE                          phi     MEMADDR
     214/     3FE : =>FALSE                     else
     214/     3FE :                                     ldAD    memAddr,SP
     214/     3FE : [214]                       endif
     214/     3FE : 9C                          ghi     R12
     214/     3FF : 5E                          str     memAddr
     214/     400 : 1E                          inc     memAddr
     214/     401 : 8C                          glo     R12
     214/     402 : 5E                          str     memAddr
     215/     403 :                     ;void printint(int s){ //print an integer
     216/     403 :                     ;	itoa(s,buffer);
     217/     403 : (MACRO)             	ld2 R12,'O',sp,(0+14)
     217/     403 : =>TRUE                      if      ('O'='O')
     217/     403 :  (MACRO-2)                          ldAX    memAddr,SP,(0+14)
     217/     403 : 82                          glo     SP
     217/     404 : FC 0E                       adi     ((0+14))#256
     217/     406 : AE                          plo     MEMADDR
     217/     407 : 92                          ghi     SP
     217/     408 : 7C 00                       adci    ((0+14))>>8; was/256
     217/     40A : BE                          phi     MEMADDR
     217/     40B : =>FALSE                     else
     217/     40B :                                     ldAD    memAddr,SP
     217/     40B : [217]                       endif
     217/     40B : 4E                          lda     memAddr
     217/     40C : BC                          phi     R12
     217/     40D : 0E                          ldn     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 22 - 2/27/2013 14:03:17


     217/     40E : AC                          plo     R12
     218/     40F : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     218/     40F : =>TRUE                      if      ('O'='O')
     218/     40F :  (MACRO-2)                          ldAX    R13,SP,(-10+14)
     218/     40F : 82                          glo     SP
     218/     410 : FC 04                       adi     ((-10+14))#256
     218/     412 : AD                          plo     R13
     218/     413 : 92                          ghi     SP
     218/     414 : 7C 00                       adci    ((-10+14))>>8; was/256
     218/     416 : BD                          phi     R13
     218/     417 : =>FALSE                     else
     218/     417 :                                     ldAD    R13,SP
     218/     417 : [218]                       endif
     219/     417 : (MACRO)             	Ccall _itoa
     219/     417 : D4                          sep     RCALL
     219/     418 : 01 00                       dw      _ITOA
     220/     41A :                     ;	printstr(buffer);
     221/     41A : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     221/     41A : =>TRUE                      if      ('O'='O')
     221/     41A :  (MACRO-2)                          ldAX    R12,SP,(-10+14)
     221/     41A : 82                          glo     SP
     221/     41B : FC 04                       adi     ((-10+14))#256
     221/     41D : AC                          plo     R12
     221/     41E : 92                          ghi     SP
     221/     41F : 7C 00                       adci    ((-10+14))>>8; was/256
     221/     421 : BC                          phi     R12
     221/     422 : =>FALSE                     else
     221/     422 :                                     ldAD    R12,SP
     221/     422 : [221]                       endif
     222/     422 : (MACRO)             	Ccall _printstr
     222/     422 : D4                          sep     RCALL
     222/     423 : 00 91                       dw      _PRINTSTR
     223/     425 :                     ;}
     224/     425 :                     L29:
     225/     425 : (MACRO)             	release 12
     225/     425 :                     ;for release we adjust the low byte first 
     225/     425 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     225/     425 :  (MACRO-2)                  alu2i sp,sp,12,adi,adci
     225/     425 : 82                          glo     SP
     225/     426 : FC 0C                       ADI     (12)#256
     225/     428 : A2                          plo     SP
     225/     429 : 92                          ghi     SP
     225/     42A : 7C 00                       ADCI     (12)>>8; was/256
     225/     42C : B2                          phi     SP
     226/     42D : (MACRO)             	Cretn
     226/     42D : D5                          sep     RRET
     227/     42E :                     
     228/     42E :                     _printlint:
     229/     42E : (MACRO)             	reserve 18
     229/     42E :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     229/     42E :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     229/     42E : 82                          glo sp          ;grab low byte of stack pointer
     229/     42F : FF 12                       smi 18&255 ;claculate new low byte
     229/     431 : AE                          plo memAddr     ;save it for a moment
     229/     432 : 92                          ghi sp          ;grab high byte
     229/     433 : 7F 00                       smbi (18>>8)&255 ;calculate the new page
     229/     435 : B2                          phi sp          ;adjust page first
     229/     436 : 8E                          glo memAddr     ;get new low byte
     229/     437 : A2                          plo sp          ;finish adjusting the stack pointer
     230/     438 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 23 - 2/27/2013 14:03:17


     230/     438 : =>TRUE                      if      ('O'='O')
     230/     438 :  (MACRO-2)                          ldAX    memAddr,SP,(20)
     230/     438 : 82                          glo     SP
     230/     439 : FC 14                       adi     ((20))#256
     230/     43B : AE                          plo     MEMADDR
     230/     43C : 92                          ghi     SP
     230/     43D : 7C 00                       adci    ((20))>>8; was/256
     230/     43F : BE                          phi     MEMADDR
     230/     440 : =>FALSE                     else
     230/     440 :                                     ldAD    memAddr,SP
     230/     440 : [230]                       endif
     230/     440 : 9C                          ghi     R12
     230/     441 : 5E                          str     memAddr
     230/     442 : 1E                          inc     memAddr
     230/     443 : 8C                          glo     R12
     230/     444 : 5E                          str     memAddr
     231/     445 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     231/     445 : =>TRUE                      if      ('O'='O')
     231/     445 :  (MACRO-2)                          ldAX    memAddr,SP,(22)
     231/     445 : 82                          glo     SP
     231/     446 : FC 16                       adi     ((22))#256
     231/     448 : AE                          plo     MEMADDR
     231/     449 : 92                          ghi     SP
     231/     44A : 7C 00                       adci    ((22))>>8; was/256
     231/     44C : BE                          phi     MEMADDR
     231/     44D : =>FALSE                     else
     231/     44D :                                     ldAD    memAddr,SP
     231/     44D : [231]                       endif
     231/     44D : 9D                          ghi     R13
     231/     44E : 5E                          str     memAddr
     231/     44F : 1E                          inc     memAddr
     231/     450 : 8D                          glo     R13
     231/     451 : 5E                          str     memAddr
     232/     452 :                     ;void printlint(long s){ //print a long integer
     233/     452 :                     ;	printstr(ltoa(s,buffer));
     234/     452 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20)
     234/     452 : =>TRUE                      if      ('O'='O')
     234/     452 :  (MACRO-2)                          ldAX    memAddr,SP,(0+20)
     234/     452 : 82                          glo     SP
     234/     453 : FC 14                       adi     ((0+20))#256
     234/     455 : AE                          plo     MEMADDR
     234/     456 : 92                          ghi     SP
     234/     457 : 7C 00                       adci    ((0+20))>>8; was/256
     234/     459 : BE                          phi     MEMADDR
     234/     45A : =>FALSE                     else
     234/     45A :                                     ldAD    memAddr,SP
     234/     45A : [234]                       endif
     234/     45A : 4E                          lda     memAddr
     234/     45B : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     234/     45C : 4E                          lda     memAddr ;but load and store start with the 1st
     234/     45D : AC                          plo     RP1P2-1
     234/     45E : 4E                          lda     memAddr
     234/     45F : BD                          phi     RP1P2
     234/     460 : 0E                          ldn     memAddr
     234/     461 : AD                          plo     RP1P2
     235/     462 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     235/     462 : =>TRUE                      if      ('O'='O')
     235/     462 :  (MACRO-2)                          ldAX    R11,SP,(-14+20)
     235/     462 : 82                          glo     SP
     235/     463 : FC 06                       adi     ((-14+20))#256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 24 - 2/27/2013 14:03:17


     235/     465 : AB                          plo     R11
     235/     466 : 92                          ghi     SP
     235/     467 : 7C 00                       adci    ((-14+20))>>8; was/256
     235/     469 : BB                          phi     R11
     235/     46A : =>FALSE                     else
     235/     46A :                                     ldAD    R11,SP
     235/     46A : [235]                       endif
     236/     46A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     236/     46A : =>TRUE                      if      ('O'='O')
     236/     46A :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     236/     46A : 82                          glo     SP
     236/     46B : FC 04                       adi     ((4))#256
     236/     46D : AE                          plo     MEMADDR
     236/     46E : 92                          ghi     SP
     236/     46F : 7C 00                       adci    ((4))>>8; was/256
     236/     471 : BE                          phi     MEMADDR
     236/     472 : =>FALSE                     else
     236/     472 :                                     ldAD    memAddr,SP
     236/     472 : [236]                       endif
     236/     472 : 9B                          ghi     R11
     236/     473 : 5E                          str     memAddr
     236/     474 : 1E                          inc     memAddr
     236/     475 : 8B                          glo     R11
     236/     476 : 5E                          str     memAddr
     237/     477 : (MACRO)             	Ccall _ltoa
     237/     477 : D4                          sep     RCALL
     237/     478 : 03 04                       dw      _LTOA
     238/     47A : (MACRO)             	cpy2 R11,R15
     238/     47A : 8F                          glo     R15
     238/     47B : AB                          plo     R11
     238/     47C : 9F                          ghi     R15
     238/     47D : BB                          phi     R11
     239/     47E : (MACRO)             	cpy2 R12,R11
     239/     47E : 8B                          glo     R11
     239/     47F : AC                          plo     R12
     239/     480 : 9B                          ghi     R11
     239/     481 : BC                          phi     R12
     240/     482 : (MACRO)             	Ccall _printstr
     240/     482 : D4                          sep     RCALL
     240/     483 : 00 91                       dw      _PRINTSTR
     241/     485 :                     ;}
     242/     485 :                     L30:
     243/     485 : (MACRO)             	release 18
     243/     485 :                     ;for release we adjust the low byte first 
     243/     485 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     243/     485 :  (MACRO-2)                  alu2i sp,sp,18,adi,adci
     243/     485 : 82                          glo     SP
     243/     486 : FC 12                       ADI     (18)#256
     243/     488 : A2                          plo     SP
     243/     489 : 92                          ghi     SP
     243/     48A : 7C 00                       ADCI     (18)>>8; was/256
     243/     48C : B2                          phi     SP
     244/     48D : (MACRO)             	Cretn
     244/     48D : D5                          sep     RRET
     245/     48E :                     
     246/     48E :                     _putxn:
     247/     48E : (MACRO)             	reserve 4
     247/     48E :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     247/     48E :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     247/     48E : 82                          glo sp          ;grab low byte of stack pointer
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 25 - 2/27/2013 14:03:17


     247/     48F : FF 04                       smi 4&255 ;claculate new low byte
     247/     491 : AE                          plo memAddr     ;save it for a moment
     247/     492 : 92                          ghi sp          ;grab high byte
     247/     493 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     247/     495 : B2                          phi sp          ;adjust page first
     247/     496 : 8E                          glo memAddr     ;get new low byte
     247/     497 : A2                          plo sp          ;finish adjusting the stack pointer
     248/     498 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     248/     498 : =>TRUE                      if      ('O'='O')
     248/     498 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     248/     498 : 82                          glo     SP
     248/     499 : FC 06                       adi     ((6))#256
     248/     49B : AE                          plo     MEMADDR
     248/     49C : 92                          ghi     SP
     248/     49D : 7C 00                       adci    ((6))>>8; was/256
     248/     49F : BE                          phi     MEMADDR
     248/     4A0 : =>FALSE                     else
     248/     4A0 :                                     ldAD    memAddr,SP
     248/     4A0 : [248]                       endif
     248/     4A0 : 9C                          ghi     R12
     248/     4A1 : 5E                          str     memAddr
     248/     4A2 : 1E                          inc     memAddr
     248/     4A3 : 8C                          glo     R12
     248/     4A4 : 5E                          str     memAddr
     249/     4A5 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     249/     4A5 : =>TRUE                      if      ('O'='O')
     249/     4A5 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     249/     4A5 : 82                          glo     SP
     249/     4A6 : FC 06                       adi     ((0+6))#256
     249/     4A8 : AE                          plo     MEMADDR
     249/     4A9 : 92                          ghi     SP
     249/     4AA : 7C 00                       adci    ((0+6))>>8; was/256
     249/     4AC : BE                          phi     MEMADDR
     249/     4AD : =>FALSE                     else
     249/     4AD :                                     ldAD    memAddr,SP
     249/     4AD : [249]                       endif
     249/     4AD : 4E                          lda     memAddr
     249/     4AE : BB                          phi     R11
     249/     4AF : 0E                          ldn     memAddr
     249/     4B0 : AB                          plo     R11
     250/     4B1 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     250/     4B1 : =>TRUE                      if      ('O'='O')
     250/     4B1 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     250/     4B1 : 82                          glo     SP
     250/     4B2 : FC 06                       adi     ((0+6))#256
     250/     4B4 : AE                          plo     MEMADDR
     250/     4B5 : 92                          ghi     SP
     250/     4B6 : 7C 00                       adci    ((0+6))>>8; was/256
     250/     4B8 : BE                          phi     MEMADDR
     250/     4B9 : =>FALSE                     else
     250/     4B9 :                                     ldAD    memAddr,SP
     250/     4B9 : [250]                       endif
     250/     4B9 : 8B                          glo     R11
     250/     4BA : 5E                          str     memAddr
     251/     4BB :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     252/     4BB :                     ;	if (x<10){
     253/     4BB : (MACRO)             	ld1 R11,'O',sp,(0+6)
     253/     4BB : =>TRUE                      if      ('O'='O')
     253/     4BB :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     253/     4BB : 82                          glo     SP
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 26 - 2/27/2013 14:03:17


     253/     4BC : FC 06                       adi     ((0+6))#256
     253/     4BE : AE                          plo     MEMADDR
     253/     4BF : 92                          ghi     SP
     253/     4C0 : 7C 00                       adci    ((0+6))>>8; was/256
     253/     4C2 : BE                          phi     MEMADDR
     253/     4C3 : =>FALSE                     else
     253/     4C3 :                                     ldAD    memAddr,SP
     253/     4C3 : [253]                       endif
     253/     4C3 : 0E                          ldn     memAddr
     253/     4C4 : AB                          plo     R11
     254/     4C5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     254/     4C5 : F8 00                       ldi     0
     254/     4C7 : BB                          phi     R11
     255/     4C8 : (MACRO)             	jcI2I r11,10,lbdf,L32; GE is flipped test from LT
     255/     4C8 : 8B                          glo     R11
     255/     4C9 : FF 0A                       smi     (10)#256
     255/     4CB : 9B                          ghi     R11
     255/     4CC : 7F 00                       smbi    (10)>>8; was/256      ;that's a standard signed subtraction
     255/     4CE : 9B                          ghi     R11 ;
     255/     4CF : FB 00                       xri     (10)>>8; was/256      ;sets the top bit if the signs are different
     255/     4D1 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     255/     4D2 : C7                          lsnf    ;bypass the df flip if signs were the same
     255/     4D3 : FB 01                       xri     01     ;invert original df if signs were different
     255/     4D5 : 76                          shrc           ;put it back in df
     255/     4D6 : C3 04 F9                    LBDF    L32  ;execute 
     256/     4D9 :                     ;		putc(x+'0');
     257/     4D9 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     257/     4D9 : =>TRUE                      if      ('O'='O')
     257/     4D9 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     257/     4D9 : 82                          glo     SP
     257/     4DA : FC 06                       adi     ((0+6))#256
     257/     4DC : AE                          plo     MEMADDR
     257/     4DD : 92                          ghi     SP
     257/     4DE : 7C 00                       adci    ((0+6))>>8; was/256
     257/     4E0 : BE                          phi     MEMADDR
     257/     4E1 : =>FALSE                     else
     257/     4E1 :                                     ldAD    memAddr,SP
     257/     4E1 : [257]                       endif
     257/     4E1 : 0E                          ldn     memAddr
     257/     4E2 : AB                          plo     R11
     258/     4E3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     258/     4E3 : F8 00                       ldi     0
     258/     4E5 : BB                          phi     R11
     259/     4E6 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     259/     4E6 : =>TRUE                      if      ('O'='O')
     259/     4E6 :  (MACRO-2)                          ldAX    R11,R11,(48)
     259/     4E6 : 8B                          glo     R11
     259/     4E7 : FC 30                       adi     ((48))#256
     259/     4E9 : AB                          plo     R11
     259/     4EA : 9B                          ghi     R11
     259/     4EB : 7C 00                       adci    ((48))>>8; was/256
     259/     4ED : BB                          phi     R11
     259/     4EE : =>FALSE                     else
     259/     4EE :                                     ldAD    R11,R11
     259/     4EE : [259]                       endif
     260/     4EE : (MACRO)             	cpy1 R12,R11
     260/     4EE : 8B                          glo     R11
     260/     4EF : AC                          plo     R12
     261/     4F0 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     261/     4F0 : F8 00                       ldi     0
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 27 - 2/27/2013 14:03:17


     261/     4F2 : BC                          phi     12
     262/     4F3 : (MACRO)             	Ccall _putc
     262/     4F3 : D4                          sep     RCALL
     262/     4F4 : 10 40                       dw      _PUTC
     263/     4F6 :                     ;	} else {
     264/     4F6 : C0 05 1E            	lbr L33
     265/     4F9 :                     L32:
     266/     4F9 :                     ;		putc(x+'A'-10);
     267/     4F9 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     267/     4F9 : =>TRUE                      if      ('O'='O')
     267/     4F9 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     267/     4F9 : 82                          glo     SP
     267/     4FA : FC 06                       adi     ((0+6))#256
     267/     4FC : AE                          plo     MEMADDR
     267/     4FD : 92                          ghi     SP
     267/     4FE : 7C 00                       adci    ((0+6))>>8; was/256
     267/     500 : BE                          phi     MEMADDR
     267/     501 : =>FALSE                     else
     267/     501 :                                     ldAD    memAddr,SP
     267/     501 : [267]                       endif
     267/     501 : 0E                          ldn     memAddr
     267/     502 : AB                          plo     R11
     268/     503 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     268/     503 : F8 00                       ldi     0
     268/     505 : BB                          phi     R11
     269/     506 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     269/     506 : =>TRUE                      if      ('O'='O')
     269/     506 :  (MACRO-2)                          ldAX    R11,R11,(65)
     269/     506 : 8B                          glo     R11
     269/     507 : FC 41                       adi     ((65))#256
     269/     509 : AB                          plo     R11
     269/     50A : 9B                          ghi     R11
     269/     50B : 7C 00                       adci    ((65))>>8; was/256
     269/     50D : BB                          phi     R11
     269/     50E : =>FALSE                     else
     269/     50E :                                     ldAD    R11,R11
     269/     50E : [269]                       endif
     270/     50E : (MACRO)             	alu2I R11,R11,10,smi,smbi
     270/     50E : 8B                          glo     R11
     270/     50F : FF 0A                       SMI     (10)#256
     270/     511 : AB                          plo     R11
     270/     512 : 9B                          ghi     R11
     270/     513 : 7F 00                       SMBI     (10)>>8; was/256
     270/     515 : BB                          phi     R11
     271/     516 : (MACRO)             	cpy1 R12,R11
     271/     516 : 8B                          glo     R11
     271/     517 : AC                          plo     R12
     272/     518 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     272/     518 : F8 00                       ldi     0
     272/     51A : BC                          phi     12
     273/     51B : (MACRO)             	Ccall _putc
     273/     51B : D4                          sep     RCALL
     273/     51C : 10 40                       dw      _PUTC
     274/     51E :                     ;	}
     275/     51E :                     L33:
     276/     51E :                     ;}
     277/     51E :                     L31:
     278/     51E : (MACRO)             	release 4
     278/     51E :                     ;for release we adjust the low byte first 
     278/     51E :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 28 - 2/27/2013 14:03:17


     278/     51E :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     278/     51E : 82                          glo     SP
     278/     51F : FC 04                       ADI     (4)#256
     278/     521 : A2                          plo     SP
     278/     522 : 92                          ghi     SP
     278/     523 : 7C 00                       ADCI     (4)>>8; was/256
     278/     525 : B2                          phi     SP
     279/     526 : (MACRO)             	Cretn
     279/     526 : D5                          sep     RRET
     280/     527 :                     
     281/     527 :                     _putx:
     282/     527 : (MACRO)             	reserve 4
     282/     527 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     282/     527 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     282/     527 : 82                          glo sp          ;grab low byte of stack pointer
     282/     528 : FF 04                       smi 4&255 ;claculate new low byte
     282/     52A : AE                          plo memAddr     ;save it for a moment
     282/     52B : 92                          ghi sp          ;grab high byte
     282/     52C : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     282/     52E : B2                          phi sp          ;adjust page first
     282/     52F : 8E                          glo memAddr     ;get new low byte
     282/     530 : A2                          plo sp          ;finish adjusting the stack pointer
     283/     531 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     283/     531 : =>TRUE                      if      ('O'='O')
     283/     531 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     283/     531 : 82                          glo     SP
     283/     532 : FC 06                       adi     ((6))#256
     283/     534 : AE                          plo     MEMADDR
     283/     535 : 92                          ghi     SP
     283/     536 : 7C 00                       adci    ((6))>>8; was/256
     283/     538 : BE                          phi     MEMADDR
     283/     539 : =>FALSE                     else
     283/     539 :                                     ldAD    memAddr,SP
     283/     539 : [283]                       endif
     283/     539 : 9C                          ghi     R12
     283/     53A : 5E                          str     memAddr
     283/     53B : 1E                          inc     memAddr
     283/     53C : 8C                          glo     R12
     283/     53D : 5E                          str     memAddr
     284/     53E : (MACRO)             	ld2 R11,'O',sp,(0+6)
     284/     53E : =>TRUE                      if      ('O'='O')
     284/     53E :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     284/     53E : 82                          glo     SP
     284/     53F : FC 06                       adi     ((0+6))#256
     284/     541 : AE                          plo     MEMADDR
     284/     542 : 92                          ghi     SP
     284/     543 : 7C 00                       adci    ((0+6))>>8; was/256
     284/     545 : BE                          phi     MEMADDR
     284/     546 : =>FALSE                     else
     284/     546 :                                     ldAD    memAddr,SP
     284/     546 : [284]                       endif
     284/     546 : 4E                          lda     memAddr
     284/     547 : BB                          phi     R11
     284/     548 : 0E                          ldn     memAddr
     284/     549 : AB                          plo     R11
     285/     54A : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     285/     54A : =>TRUE                      if      ('O'='O')
     285/     54A :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     285/     54A : 82                          glo     SP
     285/     54B : FC 06                       adi     ((0+6))#256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 29 - 2/27/2013 14:03:17


     285/     54D : AE                          plo     MEMADDR
     285/     54E : 92                          ghi     SP
     285/     54F : 7C 00                       adci    ((0+6))>>8; was/256
     285/     551 : BE                          phi     MEMADDR
     285/     552 : =>FALSE                     else
     285/     552 :                                     ldAD    memAddr,SP
     285/     552 : [285]                       endif
     285/     552 : 8B                          glo     R11
     285/     553 : 5E                          str     memAddr
     286/     554 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     287/     554 :                     ;	putxn(x>>4);
     288/     554 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     288/     554 : =>TRUE                      if      ('O'='O')
     288/     554 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     288/     554 : 82                          glo     SP
     288/     555 : FC 06                       adi     ((0+6))#256
     288/     557 : AE                          plo     MEMADDR
     288/     558 : 92                          ghi     SP
     288/     559 : 7C 00                       adci    ((0+6))>>8; was/256
     288/     55B : BE                          phi     MEMADDR
     288/     55C : =>FALSE                     else
     288/     55C :                                     ldAD    memAddr,SP
     288/     55C : [288]                       endif
     288/     55C : 0E                          ldn     memAddr
     288/     55D : AB                          plo     R11
     289/     55E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     289/     55E : F8 00                       ldi     0
     289/     560 : BB                          phi     R11
     290/     561 : (MACRO)             	shrI2I R11,4
     290/     561 :                             rept    4
     290/     561 :                             shrI2   R11
     290/     561 :                             endm
     290/     561 :  (MACRO-2)                  shrI2   R11
     290/     561 : 9B                          ghi     R11
     290/     562 : FE                          shl             ;set DF to the sign
     290/     563 : 9B                          ghi     R11     ;get the top byte back
     290/     564 : 76                          shrc            ;shift one bit extending the sign
     290/     565 : BB                          phi     R11
     290/     566 : 8B                          glo     R11
     290/     567 : 76                          shrc
     290/     568 : AB                          plo     R11
     290/     569 :  (MACRO-2)                  shrI2   R11
     290/     569 : 9B                          ghi     R11
     290/     56A : FE                          shl             ;set DF to the sign
     290/     56B : 9B                          ghi     R11     ;get the top byte back
     290/     56C : 76                          shrc            ;shift one bit extending the sign
     290/     56D : BB                          phi     R11
     290/     56E : 8B                          glo     R11
     290/     56F : 76                          shrc
     290/     570 : AB                          plo     R11
     290/     571 :  (MACRO-2)                  shrI2   R11
     290/     571 : 9B                          ghi     R11
     290/     572 : FE                          shl             ;set DF to the sign
     290/     573 : 9B                          ghi     R11     ;get the top byte back
     290/     574 : 76                          shrc            ;shift one bit extending the sign
     290/     575 : BB                          phi     R11
     290/     576 : 8B                          glo     R11
     290/     577 : 76                          shrc
     290/     578 : AB                          plo     R11
     290/     579 :  (MACRO-2)                  shrI2   R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 30 - 2/27/2013 14:03:17


     290/     579 : 9B                          ghi     R11
     290/     57A : FE                          shl             ;set DF to the sign
     290/     57B : 9B                          ghi     R11     ;get the top byte back
     290/     57C : 76                          shrc            ;shift one bit extending the sign
     290/     57D : BB                          phi     R11
     290/     57E : 8B                          glo     R11
     290/     57F : 76                          shrc
     290/     580 : AB                          plo     R11
     291/     581 : (MACRO)             	cpy1 R12,R11
     291/     581 : 8B                          glo     R11
     291/     582 : AC                          plo     R12
     292/     583 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     292/     583 : F8 00                       ldi     0
     292/     585 : BC                          phi     12
     293/     586 : (MACRO)             	Ccall _putxn
     293/     586 : D4                          sep     RCALL
     293/     587 : 04 8E                       dw      _PUTXN
     294/     589 :                     ;	putxn(x & 0x0F);
     295/     589 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     295/     589 : =>TRUE                      if      ('O'='O')
     295/     589 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     295/     589 : 82                          glo     SP
     295/     58A : FC 06                       adi     ((0+6))#256
     295/     58C : AE                          plo     MEMADDR
     295/     58D : 92                          ghi     SP
     295/     58E : 7C 00                       adci    ((0+6))>>8; was/256
     295/     590 : BE                          phi     MEMADDR
     295/     591 : =>FALSE                     else
     295/     591 :                                     ldAD    memAddr,SP
     295/     591 : [295]                       endif
     295/     591 : 0E                          ldn     memAddr
     295/     592 : AB                          plo     R11
     296/     593 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     296/     593 : F8 00                       ldi     0
     296/     595 : BB                          phi     R11
     297/     596 : (MACRO)             	alu2I R11,R11,15,ani,ani
     297/     596 : 8B                          glo     R11
     297/     597 : FA 0F                       ANI     (15)#256
     297/     599 : AB                          plo     R11
     297/     59A : 9B                          ghi     R11
     297/     59B : FA 00                       ANI     (15)>>8; was/256
     297/     59D : BB                          phi     R11
     298/     59E :                     	;removed ?	cpy2 R11,R11
     299/     59E : (MACRO)             	cpy1 R12,R11
     299/     59E : 8B                          glo     R11
     299/     59F : AC                          plo     R12
     300/     5A0 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     300/     5A0 : F8 00                       ldi     0
     300/     5A2 : BC                          phi     12
     301/     5A3 : (MACRO)             	Ccall _putxn
     301/     5A3 : D4                          sep     RCALL
     301/     5A4 : 04 8E                       dw      _PUTXN
     302/     5A6 :                     ;}
     303/     5A6 :                     L34:
     304/     5A6 : (MACRO)             	release 4
     304/     5A6 :                     ;for release we adjust the low byte first 
     304/     5A6 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     304/     5A6 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     304/     5A6 : 82                          glo     SP
     304/     5A7 : FC 04                       ADI     (4)#256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 31 - 2/27/2013 14:03:17


     304/     5A9 : A2                          plo     SP
     304/     5AA : 92                          ghi     SP
     304/     5AB : 7C 00                       ADCI     (4)>>8; was/256
     304/     5AD : B2                          phi     SP
     305/     5AE : (MACRO)             	Cretn
     305/     5AE : D5                          sep     RRET
     306/     5AF :                     
     307/     5AF :                     _printf:
     308/     5AF : (MACRO)             	reserve 14
     308/     5AF :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     308/     5AF :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     308/     5AF : 82                          glo sp          ;grab low byte of stack pointer
     308/     5B0 : FF 0E                       smi 14&255 ;claculate new low byte
     308/     5B2 : AE                          plo memAddr     ;save it for a moment
     308/     5B3 : 92                          ghi sp          ;grab high byte
     308/     5B4 : 7F 00                       smbi (14>>8)&255 ;calculate the new page
     308/     5B6 : B2                          phi sp          ;adjust page first
     308/     5B7 : 8E                          glo memAddr     ;get new low byte
     308/     5B8 : A2                          plo sp          ;finish adjusting the stack pointer
     309/     5B9 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     309/     5B9 : 82                          glo     SP
     309/     5BA : FC 09                       ADI     ((9))#256
     309/     5BC : AE                          plo     MEMADDR
     309/     5BD : 92                          ghi     SP
     309/     5BE : 7C 00                       ADCI     ((9))>>8; was/256
     309/     5C0 : BE                          phi     MEMADDR
     310/     5C1 : EE                  	sex	memaddr
     311/     5C2 : (MACRO)             	savmi r0
     311/     5C2 : 80                          glo     R0
     311/     5C3 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     311/     5C4 : 90                          ghi     R0
     311/     5C5 : 73                          stxd            ;and it end up where needed to do the next one
     312/     5C6 : (MACRO)             	savmi r1
     312/     5C6 : 81                          glo     R1
     312/     5C7 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     312/     5C8 : 91                          ghi     R1
     312/     5C9 : 73                          stxd            ;and it end up where needed to do the next one
     313/     5CA : (MACRO)             	savmi r7
     313/     5CA : 87                          glo     R7
     313/     5CB : 73                          stxd            ;R7 x is primed to the spot to start the saves
     313/     5CC : 97                          ghi     R7
     313/     5CD : 73                          stxd            ;and it end up where needed to do the next one
     314/     5CE : E2                  	sex sp
     315/     5CF : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     315/     5CF : =>TRUE                      if      ('O'='O')
     315/     5CF :  (MACRO-2)                          ldAX    memAddr,SP,(16)
     315/     5CF : 82                          glo     SP
     315/     5D0 : FC 10                       adi     ((16))#256
     315/     5D2 : AE                          plo     MEMADDR
     315/     5D3 : 92                          ghi     SP
     315/     5D4 : 7C 00                       adci    ((16))>>8; was/256
     315/     5D6 : BE                          phi     MEMADDR
     315/     5D7 : =>FALSE                     else
     315/     5D7 :                                     ldAD    memAddr,SP
     315/     5D7 : [315]                       endif
     315/     5D7 : 9C                          ghi     R12
     315/     5D8 : 5E                          str     memAddr
     315/     5D9 : 1E                          inc     memAddr
     315/     5DA : 8C                          glo     R12
     315/     5DB : 5E                          str     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 32 - 2/27/2013 14:03:17


     316/     5DC : (MACRO)             	st2 r13,'O',sp,(18); flag2
     316/     5DC : =>TRUE                      if      ('O'='O')
     316/     5DC :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     316/     5DC : 82                          glo     SP
     316/     5DD : FC 12                       adi     ((18))#256
     316/     5DF : AE                          plo     MEMADDR
     316/     5E0 : 92                          ghi     SP
     316/     5E1 : 7C 00                       adci    ((18))>>8; was/256
     316/     5E3 : BE                          phi     MEMADDR
     316/     5E4 : =>FALSE                     else
     316/     5E4 :                                     ldAD    memAddr,SP
     316/     5E4 : [316]                       endif
     316/     5E4 : 9D                          ghi     R13
     316/     5E5 : 5E                          str     memAddr
     316/     5E6 : 1E                          inc     memAddr
     316/     5E7 : 8D                          glo     R13
     316/     5E8 : 5E                          str     memAddr
     317/     5E9 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     318/     5E9 :                     ;	int argslot=0;	//used to align longs
     319/     5E9 : (MACRO)             	ldaD R0,0
     319/     5E9 : F8 00                       ldi     (0)&255
     319/     5EB : A0                          plo     R0
     319/     5EC : F8 00                       ldi     (0)>>8; was/256
     319/     5EE : B0                          phi     R0
     320/     5EF :                     ;	int * this=(int *)&ptr;
     321/     5EF : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     321/     5EF : =>TRUE                      if      ('O'='O')
     321/     5EF :  (MACRO-2)                          ldAX    R1,SP,(0+16)
     321/     5EF : 82                          glo     SP
     321/     5F0 : FC 10                       adi     ((0+16))#256
     321/     5F2 : A1                          plo     R1
     321/     5F3 : 92                          ghi     SP
     321/     5F4 : 7C 00                       adci    ((0+16))>>8; was/256
     321/     5F6 : B1                          phi     R1
     321/     5F7 : =>FALSE                     else
     321/     5F7 :                                     ldAD    R1,SP
     321/     5F7 : [321]                       endif
     322/     5F7 :                     ;	this++; argslot++; //advance argument pointer and slot #
     323/     5F7 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     323/     5F7 : =>TRUE                      if      ('O'='O')
     323/     5F7 :  (MACRO-2)                          ldAX    R1,R1,(2)
     323/     5F7 : 81                          glo     R1
     323/     5F8 : FC 02                       adi     ((2))#256
     323/     5FA : A1                          plo     R1
     323/     5FB : 91                          ghi     R1
     323/     5FC : 7C 00                       adci    ((2))>>8; was/256
     323/     5FE : B1                          phi     R1
     323/     5FF : =>FALSE                     else
     323/     5FF :                                     ldAD    R1,R1
     323/     5FF : [323]                       endif
     324/     5FF : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     324/     5FF : =>TRUE                      if      ('O'='O')
     324/     5FF :  (MACRO-2)                          ldAX    R0,R0,(1)
     324/     5FF : 80                          glo     R0
     324/     600 : FC 01                       adi     ((1))#256
     324/     602 : A0                          plo     R0
     324/     603 : 90                          ghi     R0
     324/     604 : 7C 00                       adci    ((1))>>8; was/256
     324/     606 : B0                          phi     R0
     324/     607 : =>FALSE                     else
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 33 - 2/27/2013 14:03:17


     324/     607 :                                     ldAD    R0,R0
     324/     607 : [324]                       endif
     325/     607 : C0 0A 1F            	lbr L37
     326/     60A :                     L36:
     327/     60A :                     ;    while(*ptr) {
     328/     60A :                     ;		c=*ptr++;
     329/     60A : (MACRO)             	ld2 R11,'O',sp,(0+16)
     329/     60A : =>TRUE                      if      ('O'='O')
     329/     60A :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     329/     60A : 82                          glo     SP
     329/     60B : FC 10                       adi     ((0+16))#256
     329/     60D : AE                          plo     MEMADDR
     329/     60E : 92                          ghi     SP
     329/     60F : 7C 00                       adci    ((0+16))>>8; was/256
     329/     611 : BE                          phi     MEMADDR
     329/     612 : =>FALSE                     else
     329/     612 :                                     ldAD    memAddr,SP
     329/     612 : [329]                       endif
     329/     612 : 4E                          lda     memAddr
     329/     613 : BB                          phi     R11
     329/     614 : 0E                          ldn     memAddr
     329/     615 : AB                          plo     R11
     330/     616 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     330/     616 : =>TRUE                      if      ('O'='O')
     330/     616 :  (MACRO-2)                          ldAX    R10,R11,(1)
     330/     616 : 8B                          glo     R11
     330/     617 : FC 01                       adi     ((1))#256
     330/     619 : AA                          plo     R10
     330/     61A : 9B                          ghi     R11
     330/     61B : 7C 00                       adci    ((1))>>8; was/256
     330/     61D : BA                          phi     R10
     330/     61E : =>FALSE                     else
     330/     61E :                                     ldAD    R10,R11
     330/     61E : [330]                       endif
     331/     61E : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     331/     61E : =>TRUE                      if      ('O'='O')
     331/     61E :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     331/     61E : 82                          glo     SP
     331/     61F : FC 10                       adi     ((0+16))#256
     331/     621 : AE                          plo     MEMADDR
     331/     622 : 92                          ghi     SP
     331/     623 : 7C 00                       adci    ((0+16))>>8; was/256
     331/     625 : BE                          phi     MEMADDR
     331/     626 : =>FALSE                     else
     331/     626 :                                     ldAD    memAddr,SP
     331/     626 : [331]                       endif
     331/     626 : 9A                          ghi     R10
     331/     627 : 5E                          str     memAddr
     331/     628 : 1E                          inc     memAddr
     331/     629 : 8A                          glo     R10
     331/     62A : 5E                          str     memAddr
     332/     62B : (MACRO)             	ld1 R7,'O',R11,0
     332/     62B : =>TRUE                      if      ('O'='O')
     332/     62B :  (MACRO-2)                          ldAX    memAddr,R11,0
     332/     62B : 8B                          glo     R11
     332/     62C : FC 00                       adi     (0)#256
     332/     62E : AE                          plo     MEMADDR
     332/     62F : 9B                          ghi     R11
     332/     630 : 7C 00                       adci    (0)>>8; was/256
     332/     632 : BE                          phi     MEMADDR
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 34 - 2/27/2013 14:03:17


     332/     633 : =>FALSE                     else
     332/     633 :                                     ldAD    memAddr,R11
     332/     633 : [332]                       endif
     332/     633 : 0E                          ldn     memAddr
     332/     634 : A7                          plo     R7
     333/     635 :                     ;		if (c!='%'){
     334/     635 : (MACRO)             	cpy1 R11,R7
     334/     635 : 87                          glo     R7
     334/     636 : AB                          plo     R11
     335/     637 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     335/     637 : F8 00                       ldi     0
     335/     639 : BB                          phi     11
     336/     63A : (MACRO)             	jeqU2I r11,37,L39
     336/     63A : 8B                          glo     R11
     336/     63B : FF 25                       smi     (37)#256
     336/     63D : CA 06 46                    lbnz    $$nobr
     336/     640 : 9B                          ghi     R11
     336/     641 : 7F 00                       smbi    (37)>>8; was/256
     336/     643 : C2 06 51                    lbz     L39
     336/     646 :                     $$nobr:
     337/     646 :                     ;			putc(c);
     338/     646 : (MACRO)             	cpy1 R12,R7
     338/     646 : 87                          glo     R7
     338/     647 : AC                          plo     R12
     339/     648 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     339/     648 : F8 00                       ldi     0
     339/     64A : BC                          phi     12
     340/     64B : (MACRO)             	Ccall _putc
     340/     64B : D4                          sep     RCALL
     340/     64C : 10 40                       dw      _PUTC
     341/     64E :                     ;		} else{
     342/     64E : C0 0A 1F            	lbr L40
     343/     651 :                     L39:
     344/     651 :                     ;			c=*ptr++;
     345/     651 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     345/     651 : =>TRUE                      if      ('O'='O')
     345/     651 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     345/     651 : 82                          glo     SP
     345/     652 : FC 10                       adi     ((0+16))#256
     345/     654 : AE                          plo     MEMADDR
     345/     655 : 92                          ghi     SP
     345/     656 : 7C 00                       adci    ((0+16))>>8; was/256
     345/     658 : BE                          phi     MEMADDR
     345/     659 : =>FALSE                     else
     345/     659 :                                     ldAD    memAddr,SP
     345/     659 : [345]                       endif
     345/     659 : 4E                          lda     memAddr
     345/     65A : BB                          phi     R11
     345/     65B : 0E                          ldn     memAddr
     345/     65C : AB                          plo     R11
     346/     65D : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     346/     65D : =>TRUE                      if      ('O'='O')
     346/     65D :  (MACRO-2)                          ldAX    R10,R11,(1)
     346/     65D : 8B                          glo     R11
     346/     65E : FC 01                       adi     ((1))#256
     346/     660 : AA                          plo     R10
     346/     661 : 9B                          ghi     R11
     346/     662 : 7C 00                       adci    ((1))>>8; was/256
     346/     664 : BA                          phi     R10
     346/     665 : =>FALSE                     else
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 35 - 2/27/2013 14:03:17


     346/     665 :                                     ldAD    R10,R11
     346/     665 : [346]                       endif
     347/     665 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     347/     665 : =>TRUE                      if      ('O'='O')
     347/     665 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     347/     665 : 82                          glo     SP
     347/     666 : FC 10                       adi     ((0+16))#256
     347/     668 : AE                          plo     MEMADDR
     347/     669 : 92                          ghi     SP
     347/     66A : 7C 00                       adci    ((0+16))>>8; was/256
     347/     66C : BE                          phi     MEMADDR
     347/     66D : =>FALSE                     else
     347/     66D :                                     ldAD    memAddr,SP
     347/     66D : [347]                       endif
     347/     66D : 9A                          ghi     R10
     347/     66E : 5E                          str     memAddr
     347/     66F : 1E                          inc     memAddr
     347/     670 : 8A                          glo     R10
     347/     671 : 5E                          str     memAddr
     348/     672 : (MACRO)             	ld1 R7,'O',R11,0
     348/     672 : =>TRUE                      if      ('O'='O')
     348/     672 :  (MACRO-2)                          ldAX    memAddr,R11,0
     348/     672 : 8B                          glo     R11
     348/     673 : FC 00                       adi     (0)#256
     348/     675 : AE                          plo     MEMADDR
     348/     676 : 9B                          ghi     R11
     348/     677 : 7C 00                       adci    (0)>>8; was/256
     348/     679 : BE                          phi     MEMADDR
     348/     67A : =>FALSE                     else
     348/     67A :                                     ldAD    memAddr,R11
     348/     67A : [348]                       endif
     348/     67A : 0E                          ldn     memAddr
     348/     67B : A7                          plo     R7
     349/     67C :                     ;			switch (c){
     350/     67C : (MACRO)             	cpy1 R11,R7
     350/     67C : 87                          glo     R7
     350/     67D : AB                          plo     R11
     351/     67E : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     351/     67E : F8 00                       ldi     0
     351/     680 : BB                          phi     11
     352/     681 : (MACRO)             	st2 R11,'O',sp,(-5+16)
     352/     681 : =>TRUE                      if      ('O'='O')
     352/     681 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     352/     681 : 82                          glo     SP
     352/     682 : FC 0B                       adi     ((-5+16))#256
     352/     684 : AE                          plo     MEMADDR
     352/     685 : 92                          ghi     SP
     352/     686 : 7C 00                       adci    ((-5+16))>>8; was/256
     352/     688 : BE                          phi     MEMADDR
     352/     689 : =>FALSE                     else
     352/     689 :                                     ldAD    memAddr,SP
     352/     689 : [352]                       endif
     352/     689 : 9B                          ghi     R11
     352/     68A : 5E                          str     memAddr
     352/     68B : 1E                          inc     memAddr
     352/     68C : 8B                          glo     R11
     352/     68D : 5E                          str     memAddr
     353/     68E : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     353/     68E : =>TRUE                      if      ('O'='O')
     353/     68E :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 36 - 2/27/2013 14:03:17


     353/     68E : 82                          glo     SP
     353/     68F : FC 0B                       adi     ((-5+16))#256
     353/     691 : AE                          plo     MEMADDR
     353/     692 : 92                          ghi     SP
     353/     693 : 7C 00                       adci    ((-5+16))>>8; was/256
     353/     695 : BE                          phi     MEMADDR
     353/     696 : =>FALSE                     else
     353/     696 :                                     ldAD    memAddr,SP
     353/     696 : [353]                       endif
     353/     696 : 4E                          lda     memAddr
     353/     697 : BB                          phi     R11
     353/     698 : 0E                          ldn     memAddr
     353/     699 : AB                          plo     R11
     354/     69A : (MACRO)             	jeqU2I r11,105,L44
     354/     69A : 8B                          glo     R11
     354/     69B : FF 69                       smi     (105)#256
     354/     69D : CA 06 A6                    lbnz    $$nobr
     354/     6A0 : 9B                          ghi     R11
     354/     6A1 : 7F 00                       smbi    (105)>>8; was/256
     354/     6A3 : C2 07 84                    lbz     L44
     354/     6A6 :                     $$nobr:
     355/     6A6 : (MACRO)             	ldaD R10,108
     355/     6A6 : F8 6C                       ldi     (108)&255
     355/     6A8 : AA                          plo     R10
     355/     6A9 : F8 00                       ldi     (108)>>8; was/256
     355/     6AB : BA                          phi     R10
     356/     6AC : (MACRO)             	jeqI2 r11,r10,L48
     356/     6AC : 22                          dec     sp
     356/     6AD : 8A                          glo     R10
     356/     6AE : 52                          str     sp
     356/     6AF : 8B                          glo     R11
     356/     6B0 : F7                          sm
     356/     6B1 : 12                          inc     sp
     356/     6B2 : CA 06 BE                    lbnz    $$nobr
     356/     6B5 : 22                          dec     sp
     356/     6B6 : 9A                          ghi     R10
     356/     6B7 : 52                          str     sp
     356/     6B8 : 9B                          ghi     R11
     356/     6B9 : 77                          smb
     356/     6BA : 12                          inc     sp
     356/     6BB : C2 08 76                    lbz     L48
     356/     6BE :                     $$nobr:
     357/     6BE : (MACRO)             	jcI2 r10,r11,lbnf,L56 ;GT is reversed operands from LT
     357/     6BE : 22                          dec     sp ;make a work area
     357/     6BF : 8B                          glo     R11
     357/     6C0 : 52                          str     sp 
     357/     6C1 : 8A                          glo     R10
     357/     6C2 : F7                          sm
     357/     6C3 : 9B                          ghi     R11
     357/     6C4 : 52                          str     sp
     357/     6C5 : 9A                          ghi     R10
     357/     6C6 : 77                          smb          ;that's a standard signed subtraction
     357/     6C7 : 9A                          ghi     R10 ;
     357/     6C8 : F3                          xor           ;sets the top bit if the signs are different
     357/     6C9 : 12                          inc     sp ;release the work area
     357/     6CA : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     357/     6CB : C7                          lsnf    ;bypass the flip if signs were the same
     357/     6CC : FB 01                       xri     01     ;invert original df if signs were different
     357/     6CE : 76                          shrc           ;put it back in df
     357/     6CF : CB 07 31                    LBNF    L56  ;execute 
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 37 - 2/27/2013 14:03:17


     358/     6D2 :                     L55:
     359/     6D2 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     359/     6D2 : =>TRUE                      if      ('O'='O')
     359/     6D2 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     359/     6D2 : 82                          glo     SP
     359/     6D3 : FC 0B                       adi     ((-5+16))#256
     359/     6D5 : AE                          plo     MEMADDR
     359/     6D6 : 92                          ghi     SP
     359/     6D7 : 7C 00                       adci    ((-5+16))>>8; was/256
     359/     6D9 : BE                          phi     MEMADDR
     359/     6DA : =>FALSE                     else
     359/     6DA :                                     ldAD    memAddr,SP
     359/     6DA : [359]                       endif
     359/     6DA : 4E                          lda     memAddr
     359/     6DB : BB                          phi     R11
     359/     6DC : 0E                          ldn     memAddr
     359/     6DD : AB                          plo     R11
     360/     6DE : (MACRO)             	ldaD R10,88
     360/     6DE : F8 58                       ldi     (88)&255
     360/     6E0 : AA                          plo     R10
     360/     6E1 : F8 00                       ldi     (88)>>8; was/256
     360/     6E3 : BA                          phi     R10
     361/     6E4 : (MACRO)             	jeqI2 r11,r10,L47
     361/     6E4 : 22                          dec     sp
     361/     6E5 : 8A                          glo     R10
     361/     6E6 : 52                          str     sp
     361/     6E7 : 8B                          glo     R11
     361/     6E8 : F7                          sm
     361/     6E9 : 12                          inc     sp
     361/     6EA : CA 06 F6                    lbnz    $$nobr
     361/     6ED : 22                          dec     sp
     361/     6EE : 9A                          ghi     R10
     361/     6EF : 52                          str     sp
     361/     6F0 : 9B                          ghi     R11
     361/     6F1 : 77                          smb
     361/     6F2 : 12                          inc     sp
     361/     6F3 : C2 07 FF                    lbz     L47
     361/     6F6 :                     $$nobr:
     362/     6F6 : (MACRO)             	jcI2 r11,r10,lbnf,L41; LT=lbnf i.e. subtract B from A and jump if borrow 
     362/     6F6 : 22                          dec     sp ;make a work area
     362/     6F7 : 8A                          glo     R10
     362/     6F8 : 52                          str     sp 
     362/     6F9 : 8B                          glo     R11
     362/     6FA : F7                          sm
     362/     6FB : 9A                          ghi     R10
     362/     6FC : 52                          str     sp
     362/     6FD : 9B                          ghi     R11
     362/     6FE : 77                          smb          ;that's a standard signed subtraction
     362/     6FF : 9B                          ghi     R11 ;
     362/     700 : F3                          xor           ;sets the top bit if the signs are different
     362/     701 : 12                          inc     sp ;release the work area
     362/     702 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     362/     703 : C7                          lsnf    ;bypass the flip if signs were the same
     362/     704 : FB 01                       xri     01     ;invert original df if signs were different
     362/     706 : 76                          shrc           ;put it back in df
     362/     707 : CB 0A 0E                    LBNF    L41  ;execute 
     363/     70A :                     L57:
     364/     70A : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     364/     70A : =>TRUE                      if      ('O'='O')
     364/     70A :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 38 - 2/27/2013 14:03:17


     364/     70A : 82                          glo     SP
     364/     70B : FC 0B                       adi     ((-5+16))#256
     364/     70D : AE                          plo     MEMADDR
     364/     70E : 92                          ghi     SP
     364/     70F : 7C 00                       adci    ((-5+16))>>8; was/256
     364/     711 : BE                          phi     MEMADDR
     364/     712 : =>FALSE                     else
     364/     712 :                                     ldAD    memAddr,SP
     364/     712 : [364]                       endif
     364/     712 : 4E                          lda     memAddr
     364/     713 : BB                          phi     R11
     364/     714 : 0E                          ldn     memAddr
     364/     715 : AB                          plo     R11
     365/     716 : (MACRO)             	jeqU2I r11,99,L46
     365/     716 : 8B                          glo     R11
     365/     717 : FF 63                       smi     (99)#256
     365/     719 : CA 07 22                    lbnz    $$nobr
     365/     71C : 9B                          ghi     R11
     365/     71D : 7F 00                       smbi    (99)>>8; was/256
     365/     71F : C2 07 D4                    lbz     L46
     365/     722 :                     $$nobr:
     366/     722 : (MACRO)             	jeqU2I r11,100,L44
     366/     722 : 8B                          glo     R11
     366/     723 : FF 64                       smi     (100)#256
     366/     725 : CA 07 2E                    lbnz    $$nobr
     366/     728 : 9B                          ghi     R11
     366/     729 : 7F 00                       smbi    (100)>>8; was/256
     366/     72B : C2 07 84                    lbz     L44
     366/     72E :                     $$nobr:
     367/     72E : C0 0A 0E            	lbr L41
     368/     731 :                     L56:
     369/     731 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     369/     731 : =>TRUE                      if      ('O'='O')
     369/     731 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     369/     731 : 82                          glo     SP
     369/     732 : FC 0B                       adi     ((-5+16))#256
     369/     734 : AE                          plo     MEMADDR
     369/     735 : 92                          ghi     SP
     369/     736 : 7C 00                       adci    ((-5+16))>>8; was/256
     369/     738 : BE                          phi     MEMADDR
     369/     739 : =>FALSE                     else
     369/     739 :                                     ldAD    memAddr,SP
     369/     739 : [369]                       endif
     369/     739 : 4E                          lda     memAddr
     369/     73A : BB                          phi     R11
     369/     73B : 0E                          ldn     memAddr
     369/     73C : AB                          plo     R11
     370/     73D : (MACRO)             	ldaD R10,115
     370/     73D : F8 73                       ldi     (115)&255
     370/     73F : AA                          plo     R10
     370/     740 : F8 00                       ldi     (115)>>8; was/256
     370/     742 : BA                          phi     R10
     371/     743 : (MACRO)             	jeqI2 r11,r10,L45
     371/     743 : 22                          dec     sp
     371/     744 : 8A                          glo     R10
     371/     745 : 52                          str     sp
     371/     746 : 8B                          glo     R11
     371/     747 : F7                          sm
     371/     748 : 12                          inc     sp
     371/     749 : CA 07 55                    lbnz    $$nobr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 39 - 2/27/2013 14:03:17


     371/     74C : 22                          dec     sp
     371/     74D : 9A                          ghi     R10
     371/     74E : 52                          str     sp
     371/     74F : 9B                          ghi     R11
     371/     750 : 77                          smb
     371/     751 : 12                          inc     sp
     371/     752 : C2 07 AA                    lbz     L45
     371/     755 :                     $$nobr:
     372/     755 : (MACRO)             	jcI2 r11,r10,lbnf,L41; LT=lbnf i.e. subtract B from A and jump if borrow 
     372/     755 : 22                          dec     sp ;make a work area
     372/     756 : 8A                          glo     R10
     372/     757 : 52                          str     sp 
     372/     758 : 8B                          glo     R11
     372/     759 : F7                          sm
     372/     75A : 9A                          ghi     R10
     372/     75B : 52                          str     sp
     372/     75C : 9B                          ghi     R11
     372/     75D : 77                          smb          ;that's a standard signed subtraction
     372/     75E : 9B                          ghi     R11 ;
     372/     75F : F3                          xor           ;sets the top bit if the signs are different
     372/     760 : 12                          inc     sp ;release the work area
     372/     761 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     372/     762 : C7                          lsnf    ;bypass the flip if signs were the same
     372/     763 : FB 01                       xri     01     ;invert original df if signs were different
     372/     765 : 76                          shrc           ;put it back in df
     372/     766 : CB 0A 0E                    LBNF    L41  ;execute 
     373/     769 :                     L58:
     374/     769 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     374/     769 : =>TRUE                      if      ('O'='O')
     374/     769 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     374/     769 : 82                          glo     SP
     374/     76A : FC 0B                       adi     ((-5+16))#256
     374/     76C : AE                          plo     MEMADDR
     374/     76D : 92                          ghi     SP
     374/     76E : 7C 00                       adci    ((-5+16))>>8; was/256
     374/     770 : BE                          phi     MEMADDR
     374/     771 : =>FALSE                     else
     374/     771 :                                     ldAD    memAddr,SP
     374/     771 : [374]                       endif
     374/     771 : 4E                          lda     memAddr
     374/     772 : BB                          phi     R11
     374/     773 : 0E                          ldn     memAddr
     374/     774 : AB                          plo     R11
     375/     775 : (MACRO)             	jeqU2I r11,120,L47
     375/     775 : 8B                          glo     R11
     375/     776 : FF 78                       smi     (120)#256
     375/     778 : CA 07 81                    lbnz    $$nobr
     375/     77B : 9B                          ghi     R11
     375/     77C : 7F 00                       smbi    (120)>>8; was/256
     375/     77E : C2 07 FF                    lbz     L47
     375/     781 :                     $$nobr:
     376/     781 : C0 0A 0E            	lbr L41
     377/     784 :                     L44:
     378/     784 :                     ;					printint(*this++);
     379/     784 : (MACRO)             	cpy2 R11,R1
     379/     784 : 81                          glo     R1
     379/     785 : AB                          plo     R11
     379/     786 : 91                          ghi     R1
     379/     787 : BB                          phi     R11
     380/     788 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 40 - 2/27/2013 14:03:17


     380/     788 : =>TRUE                      if      ('O'='O')
     380/     788 :  (MACRO-2)                          ldAX    R1,R11,(2)
     380/     788 : 8B                          glo     R11
     380/     789 : FC 02                       adi     ((2))#256
     380/     78B : A1                          plo     R1
     380/     78C : 9B                          ghi     R11
     380/     78D : 7C 00                       adci    ((2))>>8; was/256
     380/     78F : B1                          phi     R1
     380/     790 : =>FALSE                     else
     380/     790 :                                     ldAD    R1,R11
     380/     790 : [380]                       endif
     381/     790 : (MACRO)             	ld2 R12,'O',R11,0
     381/     790 : =>TRUE                      if      ('O'='O')
     381/     790 :  (MACRO-2)                          ldAX    memAddr,R11,0
     381/     790 : 8B                          glo     R11
     381/     791 : FC 00                       adi     (0)#256
     381/     793 : AE                          plo     MEMADDR
     381/     794 : 9B                          ghi     R11
     381/     795 : 7C 00                       adci    (0)>>8; was/256
     381/     797 : BE                          phi     MEMADDR
     381/     798 : =>FALSE                     else
     381/     798 :                                     ldAD    memAddr,R11
     381/     798 : [381]                       endif
     381/     798 : 4E                          lda     memAddr
     381/     799 : BC                          phi     R12
     381/     79A : 0E                          ldn     memAddr
     381/     79B : AC                          plo     R12
     382/     79C : (MACRO)             	Ccall _printint
     382/     79C : D4                          sep     RCALL
     382/     79D : 03 EC                       dw      _PRINTINT
     383/     79F :                     ;					argslot+=1; //next argument slot
     384/     79F : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     384/     79F : =>TRUE                      if      ('O'='O')
     384/     79F :  (MACRO-2)                          ldAX    R0,R0,(1)
     384/     79F : 80                          glo     R0
     384/     7A0 : FC 01                       adi     ((1))#256
     384/     7A2 : A0                          plo     R0
     384/     7A3 : 90                          ghi     R0
     384/     7A4 : 7C 00                       adci    ((1))>>8; was/256
     384/     7A6 : B0                          phi     R0
     384/     7A7 : =>FALSE                     else
     384/     7A7 :                                     ldAD    R0,R0
     384/     7A7 : [384]                       endif
     385/     7A7 :                     ;					break;
     386/     7A7 : C0 0A 1F            	lbr L42
     387/     7AA :                     L45:
     388/     7AA :                     ;					printstr((char*) *this++);
     389/     7AA : (MACRO)             	cpy2 R11,R1
     389/     7AA : 81                          glo     R1
     389/     7AB : AB                          plo     R11
     389/     7AC : 91                          ghi     R1
     389/     7AD : BB                          phi     R11
     390/     7AE : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     390/     7AE : =>TRUE                      if      ('O'='O')
     390/     7AE :  (MACRO-2)                          ldAX    R1,R11,(2)
     390/     7AE : 8B                          glo     R11
     390/     7AF : FC 02                       adi     ((2))#256
     390/     7B1 : A1                          plo     R1
     390/     7B2 : 9B                          ghi     R11
     390/     7B3 : 7C 00                       adci    ((2))>>8; was/256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 41 - 2/27/2013 14:03:17


     390/     7B5 : B1                          phi     R1
     390/     7B6 : =>FALSE                     else
     390/     7B6 :                                     ldAD    R1,R11
     390/     7B6 : [390]                       endif
     391/     7B6 : (MACRO)             	ld2 R11,'O',R11,0
     391/     7B6 : =>TRUE                      if      ('O'='O')
     391/     7B6 :  (MACRO-2)                          ldAX    memAddr,R11,0
     391/     7B6 : 8B                          glo     R11
     391/     7B7 : FC 00                       adi     (0)#256
     391/     7B9 : AE                          plo     MEMADDR
     391/     7BA : 9B                          ghi     R11
     391/     7BB : 7C 00                       adci    (0)>>8; was/256
     391/     7BD : BE                          phi     MEMADDR
     391/     7BE : =>FALSE                     else
     391/     7BE :                                     ldAD    memAddr,R11
     391/     7BE : [391]                       endif
     391/     7BE : 4E                          lda     memAddr
     391/     7BF : BB                          phi     R11
     391/     7C0 : 0E                          ldn     memAddr
     391/     7C1 : AB                          plo     R11
     392/     7C2 : (MACRO)             	cpy2 R12,R11
     392/     7C2 : 8B                          glo     R11
     392/     7C3 : AC                          plo     R12
     392/     7C4 : 9B                          ghi     R11
     392/     7C5 : BC                          phi     R12
     393/     7C6 : (MACRO)             	Ccall _printstr
     393/     7C6 : D4                          sep     RCALL
     393/     7C7 : 00 91                       dw      _PRINTSTR
     394/     7C9 :                     ;					argslot+=1; //next argument slot
     395/     7C9 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     395/     7C9 : =>TRUE                      if      ('O'='O')
     395/     7C9 :  (MACRO-2)                          ldAX    R0,R0,(1)
     395/     7C9 : 80                          glo     R0
     395/     7CA : FC 01                       adi     ((1))#256
     395/     7CC : A0                          plo     R0
     395/     7CD : 90                          ghi     R0
     395/     7CE : 7C 00                       adci    ((1))>>8; was/256
     395/     7D0 : B0                          phi     R0
     395/     7D1 : =>FALSE                     else
     395/     7D1 :                                     ldAD    R0,R0
     395/     7D1 : [395]                       endif
     396/     7D1 :                     ;					break;
     397/     7D1 : C0 0A 1F            	lbr L42
     398/     7D4 :                     L46:
     399/     7D4 :                     ;					putc((unsigned int) *this++);
     400/     7D4 : (MACRO)             	cpy2 R11,R1
     400/     7D4 : 81                          glo     R1
     400/     7D5 : AB                          plo     R11
     400/     7D6 : 91                          ghi     R1
     400/     7D7 : BB                          phi     R11
     401/     7D8 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     401/     7D8 : =>TRUE                      if      ('O'='O')
     401/     7D8 :  (MACRO-2)                          ldAX    R1,R11,(2)
     401/     7D8 : 8B                          glo     R11
     401/     7D9 : FC 02                       adi     ((2))#256
     401/     7DB : A1                          plo     R1
     401/     7DC : 9B                          ghi     R11
     401/     7DD : 7C 00                       adci    ((2))>>8; was/256
     401/     7DF : B1                          phi     R1
     401/     7E0 : =>FALSE                     else
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 42 - 2/27/2013 14:03:17


     401/     7E0 :                                     ldAD    R1,R11
     401/     7E0 : [401]                       endif
     402/     7E0 : (MACRO)             	ld2 R11,'O',R11,0
     402/     7E0 : =>TRUE                      if      ('O'='O')
     402/     7E0 :  (MACRO-2)                          ldAX    memAddr,R11,0
     402/     7E0 : 8B                          glo     R11
     402/     7E1 : FC 00                       adi     (0)#256
     402/     7E3 : AE                          plo     MEMADDR
     402/     7E4 : 9B                          ghi     R11
     402/     7E5 : 7C 00                       adci    (0)>>8; was/256
     402/     7E7 : BE                          phi     MEMADDR
     402/     7E8 : =>FALSE                     else
     402/     7E8 :                                     ldAD    memAddr,R11
     402/     7E8 : [402]                       endif
     402/     7E8 : 4E                          lda     memAddr
     402/     7E9 : BB                          phi     R11
     402/     7EA : 0E                          ldn     memAddr
     402/     7EB : AB                          plo     R11
     403/     7EC : (MACRO)             	cpy1 R12,R11
     403/     7EC : 8B                          glo     R11
     403/     7ED : AC                          plo     R12
     404/     7EE : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     404/     7EE : F8 00                       ldi     0
     404/     7F0 : BC                          phi     12
     405/     7F1 : (MACRO)             	Ccall _putc
     405/     7F1 : D4                          sep     RCALL
     405/     7F2 : 10 40                       dw      _PUTC
     406/     7F4 :                     ;					argslot+=1; //next argument slot
     407/     7F4 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     407/     7F4 : =>TRUE                      if      ('O'='O')
     407/     7F4 :  (MACRO-2)                          ldAX    R0,R0,(1)
     407/     7F4 : 80                          glo     R0
     407/     7F5 : FC 01                       adi     ((1))#256
     407/     7F7 : A0                          plo     R0
     407/     7F8 : 90                          ghi     R0
     407/     7F9 : 7C 00                       adci    ((1))>>8; was/256
     407/     7FB : B0                          phi     R0
     407/     7FC : =>FALSE                     else
     407/     7FC :                                     ldAD    R0,R0
     407/     7FC : [407]                       endif
     408/     7FC :                     ;					break;
     409/     7FC : C0 0A 1F            	lbr L42
     410/     7FF :                     L47:
     411/     7FF :                     ;					putx(((unsigned int) *this)>>8);
     412/     7FF : (MACRO)             	ld2 R11,'O',R1,0
     412/     7FF : =>TRUE                      if      ('O'='O')
     412/     7FF :  (MACRO-2)                          ldAX    memAddr,R1,0
     412/     7FF : 81                          glo     R1
     412/     800 : FC 00                       adi     (0)#256
     412/     802 : AE                          plo     MEMADDR
     412/     803 : 91                          ghi     R1
     412/     804 : 7C 00                       adci    (0)>>8; was/256
     412/     806 : BE                          phi     MEMADDR
     412/     807 : =>FALSE                     else
     412/     807 :                                     ldAD    memAddr,R1
     412/     807 : [412]                       endif
     412/     807 : 4E                          lda     memAddr
     412/     808 : BB                          phi     R11
     412/     809 : 0E                          ldn     memAddr
     412/     80A : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 43 - 2/27/2013 14:03:17


     413/     80B : (MACRO)             	shrU2I R11,8
     413/     80B :                             rept    8
     413/     80B :                             shrU2   R11
     413/     80B :                             endm
     413/     80B :  (MACRO-2)                  shrU2   R11
     413/     80B : 9B                          ghi     R11
     413/     80C : F6                          shr
     413/     80D : BB                          phi     R11
     413/     80E : 8B                          glo     R11
     413/     80F : 76                          shrc
     413/     810 : AB                          plo     R11
     413/     811 :  (MACRO-2)                  shrU2   R11
     413/     811 : 9B                          ghi     R11
     413/     812 : F6                          shr
     413/     813 : BB                          phi     R11
     413/     814 : 8B                          glo     R11
     413/     815 : 76                          shrc
     413/     816 : AB                          plo     R11
     413/     817 :  (MACRO-2)                  shrU2   R11
     413/     817 : 9B                          ghi     R11
     413/     818 : F6                          shr
     413/     819 : BB                          phi     R11
     413/     81A : 8B                          glo     R11
     413/     81B : 76                          shrc
     413/     81C : AB                          plo     R11
     413/     81D :  (MACRO-2)                  shrU2   R11
     413/     81D : 9B                          ghi     R11
     413/     81E : F6                          shr
     413/     81F : BB                          phi     R11
     413/     820 : 8B                          glo     R11
     413/     821 : 76                          shrc
     413/     822 : AB                          plo     R11
     413/     823 :  (MACRO-2)                  shrU2   R11
     413/     823 : 9B                          ghi     R11
     413/     824 : F6                          shr
     413/     825 : BB                          phi     R11
     413/     826 : 8B                          glo     R11
     413/     827 : 76                          shrc
     413/     828 : AB                          plo     R11
     413/     829 :  (MACRO-2)                  shrU2   R11
     413/     829 : 9B                          ghi     R11
     413/     82A : F6                          shr
     413/     82B : BB                          phi     R11
     413/     82C : 8B                          glo     R11
     413/     82D : 76                          shrc
     413/     82E : AB                          plo     R11
     413/     82F :  (MACRO-2)                  shrU2   R11
     413/     82F : 9B                          ghi     R11
     413/     830 : F6                          shr
     413/     831 : BB                          phi     R11
     413/     832 : 8B                          glo     R11
     413/     833 : 76                          shrc
     413/     834 : AB                          plo     R11
     413/     835 :  (MACRO-2)                  shrU2   R11
     413/     835 : 9B                          ghi     R11
     413/     836 : F6                          shr
     413/     837 : BB                          phi     R11
     413/     838 : 8B                          glo     R11
     413/     839 : 76                          shrc
     413/     83A : AB                          plo     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 44 - 2/27/2013 14:03:17


     414/     83B : (MACRO)             	cpy1 R12,R11
     414/     83B : 8B                          glo     R11
     414/     83C : AC                          plo     R12
     415/     83D : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     415/     83D : F8 00                       ldi     0
     415/     83F : BC                          phi     12
     416/     840 : (MACRO)             	Ccall _putx
     416/     840 : D4                          sep     RCALL
     416/     841 : 05 27                       dw      _PUTX
     417/     843 :                     ;					putx(((unsigned int) *this++)&255);
     418/     843 : (MACRO)             	cpy2 R11,R1
     418/     843 : 81                          glo     R1
     418/     844 : AB                          plo     R11
     418/     845 : 91                          ghi     R1
     418/     846 : BB                          phi     R11
     419/     847 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     419/     847 : =>TRUE                      if      ('O'='O')
     419/     847 :  (MACRO-2)                          ldAX    R1,R11,(2)
     419/     847 : 8B                          glo     R11
     419/     848 : FC 02                       adi     ((2))#256
     419/     84A : A1                          plo     R1
     419/     84B : 9B                          ghi     R11
     419/     84C : 7C 00                       adci    ((2))>>8; was/256
     419/     84E : B1                          phi     R1
     419/     84F : =>FALSE                     else
     419/     84F :                                     ldAD    R1,R11
     419/     84F : [419]                       endif
     420/     84F : (MACRO)             	ld2 R11,'O',R11,0
     420/     84F : =>TRUE                      if      ('O'='O')
     420/     84F :  (MACRO-2)                          ldAX    memAddr,R11,0
     420/     84F : 8B                          glo     R11
     420/     850 : FC 00                       adi     (0)#256
     420/     852 : AE                          plo     MEMADDR
     420/     853 : 9B                          ghi     R11
     420/     854 : 7C 00                       adci    (0)>>8; was/256
     420/     856 : BE                          phi     MEMADDR
     420/     857 : =>FALSE                     else
     420/     857 :                                     ldAD    memAddr,R11
     420/     857 : [420]                       endif
     420/     857 : 4E                          lda     memAddr
     420/     858 : BB                          phi     R11
     420/     859 : 0E                          ldn     memAddr
     420/     85A : AB                          plo     R11
     421/     85B : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     421/     85B : 8B                          glo     R11
     421/     85C : FA FF                       ANI     (255)#256
     421/     85E : AB                          plo     R11
     421/     85F : 9B                          ghi     R11
     421/     860 : FA 00                       ANI     (255)>>8; was/256
     421/     862 : BB                          phi     R11
     422/     863 : (MACRO)             	cpy1 R12,R11
     422/     863 : 8B                          glo     R11
     422/     864 : AC                          plo     R12
     423/     865 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     423/     865 : F8 00                       ldi     0
     423/     867 : BC                          phi     12
     424/     868 : (MACRO)             	Ccall _putx
     424/     868 : D4                          sep     RCALL
     424/     869 : 05 27                       dw      _PUTX
     425/     86B :                     ;					argslot+=1; //next argument slot
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 45 - 2/27/2013 14:03:17


     426/     86B : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     426/     86B : =>TRUE                      if      ('O'='O')
     426/     86B :  (MACRO-2)                          ldAX    R0,R0,(1)
     426/     86B : 80                          glo     R0
     426/     86C : FC 01                       adi     ((1))#256
     426/     86E : A0                          plo     R0
     426/     86F : 90                          ghi     R0
     426/     870 : 7C 00                       adci    ((1))>>8; was/256
     426/     872 : B0                          phi     R0
     426/     873 : =>FALSE                     else
     426/     873 :                                     ldAD    R0,R0
     426/     873 : [426]                       endif
     427/     873 :                     ;					break;
     428/     873 : C0 0A 1F            	lbr L42
     429/     876 :                     L48:
     430/     876 :                     ;					if (*ptr){ //as long as there's something there
     431/     876 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     431/     876 : =>TRUE                      if      ('O'='O')
     431/     876 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     431/     876 : 82                          glo     SP
     431/     877 : FC 10                       adi     ((0+16))#256
     431/     879 : AE                          plo     MEMADDR
     431/     87A : 92                          ghi     SP
     431/     87B : 7C 00                       adci    ((0+16))>>8; was/256
     431/     87D : BE                          phi     MEMADDR
     431/     87E : =>FALSE                     else
     431/     87E :                                     ldAD    memAddr,SP
     431/     87E : [431]                       endif
     431/     87E : 4E                          lda     memAddr
     431/     87F : BB                          phi     R11
     431/     880 : 0E                          ldn     memAddr
     431/     881 : AB                          plo     R11
     432/     882 : (MACRO)             	ld1 R11,'O',R11,0
     432/     882 : =>TRUE                      if      ('O'='O')
     432/     882 :  (MACRO-2)                          ldAX    memAddr,R11,0
     432/     882 : 8B                          glo     R11
     432/     883 : FC 00                       adi     (0)#256
     432/     885 : AE                          plo     MEMADDR
     432/     886 : 9B                          ghi     R11
     432/     887 : 7C 00                       adci    (0)>>8; was/256
     432/     889 : BE                          phi     MEMADDR
     432/     88A : =>FALSE                     else
     432/     88A :                                     ldAD    memAddr,R11
     432/     88A : [432]                       endif
     432/     88A : 0E                          ldn     memAddr
     432/     88B : AB                          plo     R11
     433/     88C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     433/     88C : F8 00                       ldi     0
     433/     88E : BB                          phi     R11
     434/     88F : (MACRO)             	jeqU2I r11,0,L49
     434/     88F : 8B                          glo     R11
     434/     890 : FF 00                       smi     (0)#256
     434/     892 : CA 08 9B                    lbnz    $$nobr
     434/     895 : 9B                          ghi     R11
     434/     896 : 7F 00                       smbi    (0)>>8; was/256
     434/     898 : C2 0A 0E                    lbz     L49
     434/     89B :                     $$nobr:
     435/     89B :                     ;						xord=*ptr++;
     436/     89B : (MACRO)             	ld2 R11,'O',sp,(0+16)
     436/     89B : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 46 - 2/27/2013 14:03:17


     436/     89B :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     436/     89B : 82                          glo     SP
     436/     89C : FC 10                       adi     ((0+16))#256
     436/     89E : AE                          plo     MEMADDR
     436/     89F : 92                          ghi     SP
     436/     8A0 : 7C 00                       adci    ((0+16))>>8; was/256
     436/     8A2 : BE                          phi     MEMADDR
     436/     8A3 : =>FALSE                     else
     436/     8A3 :                                     ldAD    memAddr,SP
     436/     8A3 : [436]                       endif
     436/     8A3 : 4E                          lda     memAddr
     436/     8A4 : BB                          phi     R11
     436/     8A5 : 0E                          ldn     memAddr
     436/     8A6 : AB                          plo     R11
     437/     8A7 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     437/     8A7 : =>TRUE                      if      ('O'='O')
     437/     8A7 :  (MACRO-2)                          ldAX    R10,R11,(1)
     437/     8A7 : 8B                          glo     R11
     437/     8A8 : FC 01                       adi     ((1))#256
     437/     8AA : AA                          plo     R10
     437/     8AB : 9B                          ghi     R11
     437/     8AC : 7C 00                       adci    ((1))>>8; was/256
     437/     8AE : BA                          phi     R10
     437/     8AF : =>FALSE                     else
     437/     8AF :                                     ldAD    R10,R11
     437/     8AF : [437]                       endif
     438/     8AF : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     438/     8AF : =>TRUE                      if      ('O'='O')
     438/     8AF :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     438/     8AF : 82                          glo     SP
     438/     8B0 : FC 10                       adi     ((0+16))#256
     438/     8B2 : AE                          plo     MEMADDR
     438/     8B3 : 92                          ghi     SP
     438/     8B4 : 7C 00                       adci    ((0+16))>>8; was/256
     438/     8B6 : BE                          phi     MEMADDR
     438/     8B7 : =>FALSE                     else
     438/     8B7 :                                     ldAD    memAddr,SP
     438/     8B7 : [438]                       endif
     438/     8B7 : 9A                          ghi     R10
     438/     8B8 : 5E                          str     memAddr
     438/     8B9 : 1E                          inc     memAddr
     438/     8BA : 8A                          glo     R10
     438/     8BB : 5E                          str     memAddr
     439/     8BC : (MACRO)             	ld1 R11,'O',R11,0
     439/     8BC : =>TRUE                      if      ('O'='O')
     439/     8BC :  (MACRO-2)                          ldAX    memAddr,R11,0
     439/     8BC : 8B                          glo     R11
     439/     8BD : FC 00                       adi     (0)#256
     439/     8BF : AE                          plo     MEMADDR
     439/     8C0 : 9B                          ghi     R11
     439/     8C1 : 7C 00                       adci    (0)>>8; was/256
     439/     8C3 : BE                          phi     MEMADDR
     439/     8C4 : =>FALSE                     else
     439/     8C4 :                                     ldAD    memAddr,R11
     439/     8C4 : [439]                       endif
     439/     8C4 : 0E                          ldn     memAddr
     439/     8C5 : AB                          plo     R11
     440/     8C6 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     440/     8C6 : =>TRUE                      if      ('O'='O')
     440/     8C6 :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 47 - 2/27/2013 14:03:17


     440/     8C6 : 82                          glo     SP
     440/     8C7 : FC 0D                       adi     ((-3+16))#256
     440/     8C9 : AE                          plo     MEMADDR
     440/     8CA : 92                          ghi     SP
     440/     8CB : 7C 00                       adci    ((-3+16))>>8; was/256
     440/     8CD : BE                          phi     MEMADDR
     440/     8CE : =>FALSE                     else
     440/     8CE :                                     ldAD    memAddr,SP
     440/     8CE : [440]                       endif
     440/     8CE : 8B                          glo     R11
     440/     8CF : 5E                          str     memAddr
     441/     8D0 :                     ;						if (argslot&1) {
     442/     8D0 : (MACRO)             	alu2I R11,R0,1,ani,ani
     442/     8D0 : 80                          glo     R0
     442/     8D1 : FA 01                       ANI     (1)#256
     442/     8D3 : AB                          plo     R11
     442/     8D4 : 90                          ghi     R0
     442/     8D5 : FA 00                       ANI     (1)>>8; was/256
     442/     8D7 : BB                          phi     R11
     443/     8D8 :                     	;removed ?	cpy2 R11,R0
     444/     8D8 : (MACRO)             	jeqU2I r11,0,L51
     444/     8D8 : 8B                          glo     R11
     444/     8D9 : FF 00                       smi     (0)#256
     444/     8DB : CA 08 E4                    lbnz    $$nobr
     444/     8DE : 9B                          ghi     R11
     444/     8DF : 7F 00                       smbi    (0)>>8; was/256
     444/     8E1 : C2 08 F4                    lbz     L51
     444/     8E4 :                     $$nobr:
     445/     8E4 :                     ;							this++;
     446/     8E4 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     446/     8E4 : =>TRUE                      if      ('O'='O')
     446/     8E4 :  (MACRO-2)                          ldAX    R1,R1,(2)
     446/     8E4 : 81                          glo     R1
     446/     8E5 : FC 02                       adi     ((2))#256
     446/     8E7 : A1                          plo     R1
     446/     8E8 : 91                          ghi     R1
     446/     8E9 : 7C 00                       adci    ((2))>>8; was/256
     446/     8EB : B1                          phi     R1
     446/     8EC : =>FALSE                     else
     446/     8EC :                                     ldAD    R1,R1
     446/     8EC : [446]                       endif
     447/     8EC :                     ;							argslot++;
     448/     8EC : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     448/     8EC : =>TRUE                      if      ('O'='O')
     448/     8EC :  (MACRO-2)                          ldAX    R0,R0,(1)
     448/     8EC : 80                          glo     R0
     448/     8ED : FC 01                       adi     ((1))#256
     448/     8EF : A0                          plo     R0
     448/     8F0 : 90                          ghi     R0
     448/     8F1 : 7C 00                       adci    ((1))>>8; was/256
     448/     8F3 : B0                          phi     R0
     448/     8F4 : =>FALSE                     else
     448/     8F4 :                                     ldAD    R0,R0
     448/     8F4 : [448]                       endif
     449/     8F4 :                     ;						}
     450/     8F4 :                     L51:
     451/     8F4 :                     ;						if(xord=='d'){
     452/     8F4 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     452/     8F4 : =>TRUE                      if      ('O'='O')
     452/     8F4 :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 48 - 2/27/2013 14:03:17


     452/     8F4 : 82                          glo     SP
     452/     8F5 : FC 0D                       adi     ((-3+16))#256
     452/     8F7 : AE                          plo     MEMADDR
     452/     8F8 : 92                          ghi     SP
     452/     8F9 : 7C 00                       adci    ((-3+16))>>8; was/256
     452/     8FB : BE                          phi     MEMADDR
     452/     8FC : =>FALSE                     else
     452/     8FC :                                     ldAD    memAddr,SP
     452/     8FC : [452]                       endif
     452/     8FC : 0E                          ldn     memAddr
     452/     8FD : AB                          plo     R11
     453/     8FE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     453/     8FE : F8 00                       ldi     0
     453/     900 : BB                          phi     R11
     454/     901 : (MACRO)             	jneU2I r11,100,L53; NE
     454/     901 : 8B                          glo     R11
     454/     902 : FF 64                       smi     (100)#256
     454/     904 : CA 09 2B                    lbnz    L53
     454/     907 : 9B                          ghi     R11
     454/     908 : 7F 00                       smbi    (100)>>8; was/256
     454/     90A : CA 09 2B                    lbnz    L53
     455/     90D :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     456/     90D : (MACRO)             	ld4 Rp1p2,'O',R1,0
     456/     90D : =>TRUE                      if      ('O'='O')
     456/     90D :  (MACRO-2)                          ldAX    memAddr,R1,0
     456/     90D : 81                          glo     R1
     456/     90E : FC 00                       adi     (0)#256
     456/     910 : AE                          plo     MEMADDR
     456/     911 : 91                          ghi     R1
     456/     912 : 7C 00                       adci    (0)>>8; was/256
     456/     914 : BE                          phi     MEMADDR
     456/     915 : =>FALSE                     else
     456/     915 :                                     ldAD    memAddr,R1
     456/     915 : [456]                       endif
     456/     915 : 4E                          lda     memAddr
     456/     916 : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     456/     917 : 4E                          lda     memAddr ;but load and store start with the 1st
     456/     918 : AC                          plo     RP1P2-1
     456/     919 : 4E                          lda     memAddr
     456/     91A : BD                          phi     RP1P2
     456/     91B : 0E                          ldn     memAddr
     456/     91C : AD                          plo     RP1P2
     457/     91D : (MACRO)             	Ccall _printlint
     457/     91D : D4                          sep     RCALL
     457/     91E : 04 2E                       dw      _PRINTLINT
     458/     920 :                     ;							this+=2;				// and advances it 4 bytes
     459/     920 : (MACRO)             	ldA2 R1,'O',R1,(4); reg:addr
     459/     920 : =>TRUE                      if      ('O'='O')
     459/     920 :  (MACRO-2)                          ldAX    R1,R1,(4)
     459/     920 : 81                          glo     R1
     459/     921 : FC 04                       adi     ((4))#256
     459/     923 : A1                          plo     R1
     459/     924 : 91                          ghi     R1
     459/     925 : 7C 00                       adci    ((4))>>8; was/256
     459/     927 : B1                          phi     R1
     459/     928 : =>FALSE                     else
     459/     928 :                                     ldAD    R1,R1
     459/     928 : [459]                       endif
     460/     928 :                     ;						} else{
     461/     928 : C0 0A 03            	lbr L54
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 49 - 2/27/2013 14:03:17


     462/     92B :                     L53:
     463/     92B :                     ;							putx(((unsigned int) *this)>>8);
     464/     92B : (MACRO)             	ld2 R11,'O',R1,0
     464/     92B : =>TRUE                      if      ('O'='O')
     464/     92B :  (MACRO-2)                          ldAX    memAddr,R1,0
     464/     92B : 81                          glo     R1
     464/     92C : FC 00                       adi     (0)#256
     464/     92E : AE                          plo     MEMADDR
     464/     92F : 91                          ghi     R1
     464/     930 : 7C 00                       adci    (0)>>8; was/256
     464/     932 : BE                          phi     MEMADDR
     464/     933 : =>FALSE                     else
     464/     933 :                                     ldAD    memAddr,R1
     464/     933 : [464]                       endif
     464/     933 : 4E                          lda     memAddr
     464/     934 : BB                          phi     R11
     464/     935 : 0E                          ldn     memAddr
     464/     936 : AB                          plo     R11
     465/     937 : (MACRO)             	shrU2I R11,8
     465/     937 :                             rept    8
     465/     937 :                             shrU2   R11
     465/     937 :                             endm
     465/     937 :  (MACRO-2)                  shrU2   R11
     465/     937 : 9B                          ghi     R11
     465/     938 : F6                          shr
     465/     939 : BB                          phi     R11
     465/     93A : 8B                          glo     R11
     465/     93B : 76                          shrc
     465/     93C : AB                          plo     R11
     465/     93D :  (MACRO-2)                  shrU2   R11
     465/     93D : 9B                          ghi     R11
     465/     93E : F6                          shr
     465/     93F : BB                          phi     R11
     465/     940 : 8B                          glo     R11
     465/     941 : 76                          shrc
     465/     942 : AB                          plo     R11
     465/     943 :  (MACRO-2)                  shrU2   R11
     465/     943 : 9B                          ghi     R11
     465/     944 : F6                          shr
     465/     945 : BB                          phi     R11
     465/     946 : 8B                          glo     R11
     465/     947 : 76                          shrc
     465/     948 : AB                          plo     R11
     465/     949 :  (MACRO-2)                  shrU2   R11
     465/     949 : 9B                          ghi     R11
     465/     94A : F6                          shr
     465/     94B : BB                          phi     R11
     465/     94C : 8B                          glo     R11
     465/     94D : 76                          shrc
     465/     94E : AB                          plo     R11
     465/     94F :  (MACRO-2)                  shrU2   R11
     465/     94F : 9B                          ghi     R11
     465/     950 : F6                          shr
     465/     951 : BB                          phi     R11
     465/     952 : 8B                          glo     R11
     465/     953 : 76                          shrc
     465/     954 : AB                          plo     R11
     465/     955 :  (MACRO-2)                  shrU2   R11
     465/     955 : 9B                          ghi     R11
     465/     956 : F6                          shr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 50 - 2/27/2013 14:03:17


     465/     957 : BB                          phi     R11
     465/     958 : 8B                          glo     R11
     465/     959 : 76                          shrc
     465/     95A : AB                          plo     R11
     465/     95B :  (MACRO-2)                  shrU2   R11
     465/     95B : 9B                          ghi     R11
     465/     95C : F6                          shr
     465/     95D : BB                          phi     R11
     465/     95E : 8B                          glo     R11
     465/     95F : 76                          shrc
     465/     960 : AB                          plo     R11
     465/     961 :  (MACRO-2)                  shrU2   R11
     465/     961 : 9B                          ghi     R11
     465/     962 : F6                          shr
     465/     963 : BB                          phi     R11
     465/     964 : 8B                          glo     R11
     465/     965 : 76                          shrc
     465/     966 : AB                          plo     R11
     466/     967 : (MACRO)             	cpy1 R12,R11
     466/     967 : 8B                          glo     R11
     466/     968 : AC                          plo     R12
     467/     969 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     467/     969 : F8 00                       ldi     0
     467/     96B : BC                          phi     12
     468/     96C : (MACRO)             	Ccall _putx
     468/     96C : D4                          sep     RCALL
     468/     96D : 05 27                       dw      _PUTX
     469/     96F :                     ;							putx(((unsigned int) *this++)&255);
     470/     96F : (MACRO)             	cpy2 R11,R1
     470/     96F : 81                          glo     R1
     470/     970 : AB                          plo     R11
     470/     971 : 91                          ghi     R1
     470/     972 : BB                          phi     R11
     471/     973 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     471/     973 : =>TRUE                      if      ('O'='O')
     471/     973 :  (MACRO-2)                          ldAX    R1,R11,(2)
     471/     973 : 8B                          glo     R11
     471/     974 : FC 02                       adi     ((2))#256
     471/     976 : A1                          plo     R1
     471/     977 : 9B                          ghi     R11
     471/     978 : 7C 00                       adci    ((2))>>8; was/256
     471/     97A : B1                          phi     R1
     471/     97B : =>FALSE                     else
     471/     97B :                                     ldAD    R1,R11
     471/     97B : [471]                       endif
     472/     97B : (MACRO)             	ld2 R11,'O',R11,0
     472/     97B : =>TRUE                      if      ('O'='O')
     472/     97B :  (MACRO-2)                          ldAX    memAddr,R11,0
     472/     97B : 8B                          glo     R11
     472/     97C : FC 00                       adi     (0)#256
     472/     97E : AE                          plo     MEMADDR
     472/     97F : 9B                          ghi     R11
     472/     980 : 7C 00                       adci    (0)>>8; was/256
     472/     982 : BE                          phi     MEMADDR
     472/     983 : =>FALSE                     else
     472/     983 :                                     ldAD    memAddr,R11
     472/     983 : [472]                       endif
     472/     983 : 4E                          lda     memAddr
     472/     984 : BB                          phi     R11
     472/     985 : 0E                          ldn     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 51 - 2/27/2013 14:03:17


     472/     986 : AB                          plo     R11
     473/     987 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     473/     987 : 8B                          glo     R11
     473/     988 : FA FF                       ANI     (255)#256
     473/     98A : AB                          plo     R11
     473/     98B : 9B                          ghi     R11
     473/     98C : FA 00                       ANI     (255)>>8; was/256
     473/     98E : BB                          phi     R11
     474/     98F : (MACRO)             	cpy1 R12,R11
     474/     98F : 8B                          glo     R11
     474/     990 : AC                          plo     R12
     475/     991 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     475/     991 : F8 00                       ldi     0
     475/     993 : BC                          phi     12
     476/     994 : (MACRO)             	Ccall _putx
     476/     994 : D4                          sep     RCALL
     476/     995 : 05 27                       dw      _PUTX
     477/     997 :                     ;							putx(((unsigned int) *this)>>8);
     478/     997 : (MACRO)             	ld2 R11,'O',R1,0
     478/     997 : =>TRUE                      if      ('O'='O')
     478/     997 :  (MACRO-2)                          ldAX    memAddr,R1,0
     478/     997 : 81                          glo     R1
     478/     998 : FC 00                       adi     (0)#256
     478/     99A : AE                          plo     MEMADDR
     478/     99B : 91                          ghi     R1
     478/     99C : 7C 00                       adci    (0)>>8; was/256
     478/     99E : BE                          phi     MEMADDR
     478/     99F : =>FALSE                     else
     478/     99F :                                     ldAD    memAddr,R1
     478/     99F : [478]                       endif
     478/     99F : 4E                          lda     memAddr
     478/     9A0 : BB                          phi     R11
     478/     9A1 : 0E                          ldn     memAddr
     478/     9A2 : AB                          plo     R11
     479/     9A3 : (MACRO)             	shrU2I R11,8
     479/     9A3 :                             rept    8
     479/     9A3 :                             shrU2   R11
     479/     9A3 :                             endm
     479/     9A3 :  (MACRO-2)                  shrU2   R11
     479/     9A3 : 9B                          ghi     R11
     479/     9A4 : F6                          shr
     479/     9A5 : BB                          phi     R11
     479/     9A6 : 8B                          glo     R11
     479/     9A7 : 76                          shrc
     479/     9A8 : AB                          plo     R11
     479/     9A9 :  (MACRO-2)                  shrU2   R11
     479/     9A9 : 9B                          ghi     R11
     479/     9AA : F6                          shr
     479/     9AB : BB                          phi     R11
     479/     9AC : 8B                          glo     R11
     479/     9AD : 76                          shrc
     479/     9AE : AB                          plo     R11
     479/     9AF :  (MACRO-2)                  shrU2   R11
     479/     9AF : 9B                          ghi     R11
     479/     9B0 : F6                          shr
     479/     9B1 : BB                          phi     R11
     479/     9B2 : 8B                          glo     R11
     479/     9B3 : 76                          shrc
     479/     9B4 : AB                          plo     R11
     479/     9B5 :  (MACRO-2)                  shrU2   R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 52 - 2/27/2013 14:03:17


     479/     9B5 : 9B                          ghi     R11
     479/     9B6 : F6                          shr
     479/     9B7 : BB                          phi     R11
     479/     9B8 : 8B                          glo     R11
     479/     9B9 : 76                          shrc
     479/     9BA : AB                          plo     R11
     479/     9BB :  (MACRO-2)                  shrU2   R11
     479/     9BB : 9B                          ghi     R11
     479/     9BC : F6                          shr
     479/     9BD : BB                          phi     R11
     479/     9BE : 8B                          glo     R11
     479/     9BF : 76                          shrc
     479/     9C0 : AB                          plo     R11
     479/     9C1 :  (MACRO-2)                  shrU2   R11
     479/     9C1 : 9B                          ghi     R11
     479/     9C2 : F6                          shr
     479/     9C3 : BB                          phi     R11
     479/     9C4 : 8B                          glo     R11
     479/     9C5 : 76                          shrc
     479/     9C6 : AB                          plo     R11
     479/     9C7 :  (MACRO-2)                  shrU2   R11
     479/     9C7 : 9B                          ghi     R11
     479/     9C8 : F6                          shr
     479/     9C9 : BB                          phi     R11
     479/     9CA : 8B                          glo     R11
     479/     9CB : 76                          shrc
     479/     9CC : AB                          plo     R11
     479/     9CD :  (MACRO-2)                  shrU2   R11
     479/     9CD : 9B                          ghi     R11
     479/     9CE : F6                          shr
     479/     9CF : BB                          phi     R11
     479/     9D0 : 8B                          glo     R11
     479/     9D1 : 76                          shrc
     479/     9D2 : AB                          plo     R11
     480/     9D3 : (MACRO)             	cpy1 R12,R11
     480/     9D3 : 8B                          glo     R11
     480/     9D4 : AC                          plo     R12
     481/     9D5 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     481/     9D5 : F8 00                       ldi     0
     481/     9D7 : BC                          phi     12
     482/     9D8 : (MACRO)             	Ccall _putx
     482/     9D8 : D4                          sep     RCALL
     482/     9D9 : 05 27                       dw      _PUTX
     483/     9DB :                     ;							putx(((unsigned int) *this++)&255);
     484/     9DB : (MACRO)             	cpy2 R11,R1
     484/     9DB : 81                          glo     R1
     484/     9DC : AB                          plo     R11
     484/     9DD : 91                          ghi     R1
     484/     9DE : BB                          phi     R11
     485/     9DF : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     485/     9DF : =>TRUE                      if      ('O'='O')
     485/     9DF :  (MACRO-2)                          ldAX    R1,R11,(2)
     485/     9DF : 8B                          glo     R11
     485/     9E0 : FC 02                       adi     ((2))#256
     485/     9E2 : A1                          plo     R1
     485/     9E3 : 9B                          ghi     R11
     485/     9E4 : 7C 00                       adci    ((2))>>8; was/256
     485/     9E6 : B1                          phi     R1
     485/     9E7 : =>FALSE                     else
     485/     9E7 :                                     ldAD    R1,R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 53 - 2/27/2013 14:03:17


     485/     9E7 : [485]                       endif
     486/     9E7 : (MACRO)             	ld2 R11,'O',R11,0
     486/     9E7 : =>TRUE                      if      ('O'='O')
     486/     9E7 :  (MACRO-2)                          ldAX    memAddr,R11,0
     486/     9E7 : 8B                          glo     R11
     486/     9E8 : FC 00                       adi     (0)#256
     486/     9EA : AE                          plo     MEMADDR
     486/     9EB : 9B                          ghi     R11
     486/     9EC : 7C 00                       adci    (0)>>8; was/256
     486/     9EE : BE                          phi     MEMADDR
     486/     9EF : =>FALSE                     else
     486/     9EF :                                     ldAD    memAddr,R11
     486/     9EF : [486]                       endif
     486/     9EF : 4E                          lda     memAddr
     486/     9F0 : BB                          phi     R11
     486/     9F1 : 0E                          ldn     memAddr
     486/     9F2 : AB                          plo     R11
     487/     9F3 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     487/     9F3 : 8B                          glo     R11
     487/     9F4 : FA FF                       ANI     (255)#256
     487/     9F6 : AB                          plo     R11
     487/     9F7 : 9B                          ghi     R11
     487/     9F8 : FA 00                       ANI     (255)>>8; was/256
     487/     9FA : BB                          phi     R11
     488/     9FB : (MACRO)             	cpy1 R12,R11
     488/     9FB : 8B                          glo     R11
     488/     9FC : AC                          plo     R12
     489/     9FD : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     489/     9FD : F8 00                       ldi     0
     489/     9FF : BC                          phi     12
     490/     A00 : (MACRO)             	Ccall _putx
     490/     A00 : D4                          sep     RCALL
     490/     A01 : 05 27                       dw      _PUTX
     491/     A03 :                     ;						}
     492/     A03 :                     L54:
     493/     A03 :                     ;						argslot+=2;
     494/     A03 : (MACRO)             	ldA2 R0,'O',R0,(2); reg:addr
     494/     A03 : =>TRUE                      if      ('O'='O')
     494/     A03 :  (MACRO-2)                          ldAX    R0,R0,(2)
     494/     A03 : 80                          glo     R0
     494/     A04 : FC 02                       adi     ((2))#256
     494/     A06 : A0                          plo     R0
     494/     A07 : 90                          ghi     R0
     494/     A08 : 7C 00                       adci    ((2))>>8; was/256
     494/     A0A : B0                          phi     R0
     494/     A0B : =>FALSE                     else
     494/     A0B :                                     ldAD    R0,R0
     494/     A0B : [494]                       endif
     495/     A0B :                     ;						break;
     496/     A0B : C0 0A 1F            	lbr L42
     497/     A0E :                     L49:
     498/     A0E :                     L41:
     499/     A0E :                     ;					putc('%');putc(c);
     500/     A0E : (MACRO)             	ldaD R12,37
     500/     A0E : F8 25                       ldi     (37)&255
     500/     A10 : AC                          plo     R12
     500/     A11 : F8 00                       ldi     (37)>>8; was/256
     500/     A13 : BC                          phi     R12
     501/     A14 : (MACRO)             	Ccall _putc
     501/     A14 : D4                          sep     RCALL
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 54 - 2/27/2013 14:03:17


     501/     A15 : 10 40                       dw      _PUTC
     502/     A17 : (MACRO)             	cpy1 R12,R7
     502/     A17 : 87                          glo     R7
     502/     A18 : AC                          plo     R12
     503/     A19 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     503/     A19 : F8 00                       ldi     0
     503/     A1B : BC                          phi     12
     504/     A1C : (MACRO)             	Ccall _putc
     504/     A1C : D4                          sep     RCALL
     504/     A1D : 10 40                       dw      _PUTC
     505/     A1F :                     ;			} //switch
     506/     A1F :                     L42:
     507/     A1F :                     ;		} //%
     508/     A1F :                     L40:
     509/     A1F :                     ;	} //while
     510/     A1F :                     L37:
     511/     A1F :                     ;    while(*ptr) {
     512/     A1F : (MACRO)             	ld2 R11,'O',sp,(0+16)
     512/     A1F : =>TRUE                      if      ('O'='O')
     512/     A1F :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     512/     A1F : 82                          glo     SP
     512/     A20 : FC 10                       adi     ((0+16))#256
     512/     A22 : AE                          plo     MEMADDR
     512/     A23 : 92                          ghi     SP
     512/     A24 : 7C 00                       adci    ((0+16))>>8; was/256
     512/     A26 : BE                          phi     MEMADDR
     512/     A27 : =>FALSE                     else
     512/     A27 :                                     ldAD    memAddr,SP
     512/     A27 : [512]                       endif
     512/     A27 : 4E                          lda     memAddr
     512/     A28 : BB                          phi     R11
     512/     A29 : 0E                          ldn     memAddr
     512/     A2A : AB                          plo     R11
     513/     A2B : (MACRO)             	ld1 R11,'O',R11,0
     513/     A2B : =>TRUE                      if      ('O'='O')
     513/     A2B :  (MACRO-2)                          ldAX    memAddr,R11,0
     513/     A2B : 8B                          glo     R11
     513/     A2C : FC 00                       adi     (0)#256
     513/     A2E : AE                          plo     MEMADDR
     513/     A2F : 9B                          ghi     R11
     513/     A30 : 7C 00                       adci    (0)>>8; was/256
     513/     A32 : BE                          phi     MEMADDR
     513/     A33 : =>FALSE                     else
     513/     A33 :                                     ldAD    memAddr,R11
     513/     A33 : [513]                       endif
     513/     A33 : 0E                          ldn     memAddr
     513/     A34 : AB                          plo     R11
     514/     A35 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     514/     A35 : F8 00                       ldi     0
     514/     A37 : BB                          phi     R11
     515/     A38 : (MACRO)             	jneU2I r11,0,L36; NE
     515/     A38 : 8B                          glo     R11
     515/     A39 : FF 00                       smi     (0)#256
     515/     A3B : CA 06 0A                    lbnz    L36
     515/     A3E : 9B                          ghi     R11
     515/     A3F : 7F 00                       smbi    (0)>>8; was/256
     515/     A41 : CA 06 0A                    lbnz    L36
     516/     A44 :                     ;} //prtf
     517/     A44 :                     L35:
     518/     A44 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 55 - 2/27/2013 14:03:17


     518/     A44 : 82                          glo     SP
     518/     A45 : FC 04                       ADI     ((4))#256
     518/     A47 : AE                          plo     MEMADDR
     518/     A48 : 92                          ghi     SP
     518/     A49 : 7C 00                       ADCI     ((4))>>8; was/256
     518/     A4B : BE                          phi     MEMADDR
     519/     A4C : (MACRO)             	rldmi r7,memaddr
     519/     A4C : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     519/     A4D : B7                          phi     R7
     519/     A4E : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     519/     A4F : A7                          plo     R7
     520/     A50 : (MACRO)             	rldmi r1,memaddr
     520/     A50 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     520/     A51 : B1                          phi     R1
     520/     A52 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     520/     A53 : A1                          plo     R1
     521/     A54 : (MACRO)             	rldmi r0,memaddr
     521/     A54 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     521/     A55 : B0                          phi     R0
     521/     A56 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     521/     A57 : A0                          plo     R0
     522/     A58 : (MACRO)             	release 14
     522/     A58 :                     ;for release we adjust the low byte first 
     522/     A58 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     522/     A58 :  (MACRO-2)                  alu2i sp,sp,14,adi,adci
     522/     A58 : 82                          glo     SP
     522/     A59 : FC 0E                       ADI     (14)#256
     522/     A5B : A2                          plo     SP
     522/     A5C : 92                          ghi     SP
     522/     A5D : 7C 00                       ADCI     (14)>>8; was/256
     522/     A5F : B2                          phi     SP
     523/     A60 : (MACRO)             	Cretn
     523/     A60 : D5                          sep     RRET
     524/     A61 :                     
     525/     A61 :                     _exit:
     526/     A61 : (MACRO)             	reserve 4
     526/     A61 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     526/     A61 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     526/     A61 : 82                          glo sp          ;grab low byte of stack pointer
     526/     A62 : FF 04                       smi 4&255 ;claculate new low byte
     526/     A64 : AE                          plo memAddr     ;save it for a moment
     526/     A65 : 92                          ghi sp          ;grab high byte
     526/     A66 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     526/     A68 : B2                          phi sp          ;adjust page first
     526/     A69 : 8E                          glo memAddr     ;get new low byte
     526/     A6A : A2                          plo sp          ;finish adjusting the stack pointer
     527/     A6B : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     527/     A6B : =>TRUE                      if      ('O'='O')
     527/     A6B :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     527/     A6B : 82                          glo     SP
     527/     A6C : FC 06                       adi     ((6))#256
     527/     A6E : AE                          plo     MEMADDR
     527/     A6F : 92                          ghi     SP
     527/     A70 : 7C 00                       adci    ((6))>>8; was/256
     527/     A72 : BE                          phi     MEMADDR
     527/     A73 : =>FALSE                     else
     527/     A73 :                                     ldAD    memAddr,SP
     527/     A73 : [527]                       endif
     527/     A73 : 9C                          ghi     R12
     527/     A74 : 5E                          str     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 56 - 2/27/2013 14:03:17


     527/     A75 : 1E                          inc     memAddr
     527/     A76 : 8C                          glo     R12
     527/     A77 : 5E                          str     memAddr
     528/     A78 :                     ;void exit(int code){
     529/     A78 :                     ;	printf("exit %d\n",code);
     530/     A78 : (MACRO)             	ldaD R12,L60
     530/     A78 : F8 A5                       ldi     (L60)&255
     530/     A7A : AC                          plo     R12
     530/     A7B : F8 0C                       ldi     (L60)>>8; was/256
     530/     A7D : BC                          phi     R12
     531/     A7E : (MACRO)             	ld2 R13,'O',sp,(0+6)
     531/     A7E : =>TRUE                      if      ('O'='O')
     531/     A7E :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     531/     A7E : 82                          glo     SP
     531/     A7F : FC 06                       adi     ((0+6))#256
     531/     A81 : AE                          plo     MEMADDR
     531/     A82 : 92                          ghi     SP
     531/     A83 : 7C 00                       adci    ((0+6))>>8; was/256
     531/     A85 : BE                          phi     MEMADDR
     531/     A86 : =>FALSE                     else
     531/     A86 :                                     ldAD    memAddr,SP
     531/     A86 : [531]                       endif
     531/     A86 : 4E                          lda     memAddr
     531/     A87 : BD                          phi     R13
     531/     A88 : 0E                          ldn     memAddr
     531/     A89 : AD                          plo     R13
     532/     A8A : (MACRO)             	Ccall _printf
     532/     A8A : D4                          sep     RCALL
     532/     A8B : 05 AF                       dw      _PRINTF
     533/     A8D :                     L61:
     534/     A8D :                     ;	while(1);
     535/     A8D :                     L62:
     536/     A8D : C0 0A 8D            	lbr L61
     537/     A90 :                     ;}
     538/     A90 :                     L59:
     539/     A90 : (MACRO)             	release 4
     539/     A90 :                     ;for release we adjust the low byte first 
     539/     A90 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     539/     A90 :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     539/     A90 : 82                          glo     SP
     539/     A91 : FC 04                       ADI     (4)#256
     539/     A93 : A2                          plo     SP
     539/     A94 : 92                          ghi     SP
     539/     A95 : 7C 00                       ADCI     (4)>>8; was/256
     539/     A97 : B2                          phi     SP
     540/     A98 : (MACRO)             	Cretn
     540/     A98 : D5                          sep     RRET
     541/     A99 :                     
     542/     A99 :                     _memcmp:
     543/     A99 : (MACRO)             	reserve 8
     543/     A99 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     543/     A99 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     543/     A99 : 82                          glo sp          ;grab low byte of stack pointer
     543/     A9A : FF 08                       smi 8&255 ;claculate new low byte
     543/     A9C : AE                          plo memAddr     ;save it for a moment
     543/     A9D : 92                          ghi sp          ;grab high byte
     543/     A9E : 7F 00                       smbi (8>>8)&255 ;calculate the new page
     543/     AA0 : B2                          phi sp          ;adjust page first
     543/     AA1 : 8E                          glo memAddr     ;get new low byte
     543/     AA2 : A2                          plo sp          ;finish adjusting the stack pointer
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 57 - 2/27/2013 14:03:17


     544/     AA3 : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     544/     AA3 : 82                          glo     SP
     544/     AA4 : FC 05                       ADI     ((5))#256
     544/     AA6 : AE                          plo     MEMADDR
     544/     AA7 : 92                          ghi     SP
     544/     AA8 : 7C 00                       ADCI     ((5))>>8; was/256
     544/     AAA : BE                          phi     MEMADDR
     545/     AAB : EE                  	sex	memaddr
     546/     AAC : (MACRO)             	savmi r0
     546/     AAC : 80                          glo     R0
     546/     AAD : 73                          stxd            ;R0 x is primed to the spot to start the saves
     546/     AAE : 90                          ghi     R0
     546/     AAF : 73                          stxd            ;and it end up where needed to do the next one
     547/     AB0 : (MACRO)             	savmi r1
     547/     AB0 : 81                          glo     R1
     547/     AB1 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     547/     AB2 : 91                          ghi     R1
     547/     AB3 : 73                          stxd            ;and it end up where needed to do the next one
     548/     AB4 : (MACRO)             	savmi r7
     548/     AB4 : 87                          glo     R7
     548/     AB5 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     548/     AB6 : 97                          ghi     R7
     548/     AB7 : 73                          stxd            ;and it end up where needed to do the next one
     549/     AB8 : E2                  	sex sp
     550/     AB9 : (MACRO)             	ld2 R7,'O',sp,(4+10); INDIRU2(addr)
     550/     AB9 : =>TRUE                      if      ('O'='O')
     550/     AB9 :  (MACRO-2)                          ldAX    memAddr,SP,(4+10)
     550/     AB9 : 82                          glo     SP
     550/     ABA : FC 0E                       adi     ((4+10))#256
     550/     ABC : AE                          plo     MEMADDR
     550/     ABD : 92                          ghi     SP
     550/     ABE : 7C 00                       adci    ((4+10))>>8; was/256
     550/     AC0 : BE                          phi     MEMADDR
     550/     AC1 : =>FALSE                     else
     550/     AC1 :                                     ldAD    memAddr,SP
     550/     AC1 : [550]                       endif
     550/     AC1 : 4E                          lda     memAddr
     550/     AC2 : B7                          phi     R7
     550/     AC3 : 0E                          ldn     memAddr
     550/     AC4 : A7                          plo     R7
     551/     AC5 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     552/     AC5 :                     ;    int v = 0;
     553/     AC5 : (MACRO)             	ldaD R1,0
     553/     AC5 : F8 00                       ldi     (0)&255
     553/     AC7 : A1                          plo     R1
     553/     AC8 : F8 00                       ldi     (0)>>8; was/256
     553/     ACA : B1                          phi     R1
     554/     ACB :                     ;    p1 = (unsigned char *)Ptr1;
     555/     ACB : (MACRO)             	cpy2 R0,R12
     555/     ACB : 8C                          glo     R12
     555/     ACC : A0                          plo     R0
     555/     ACD : 9C                          ghi     R12
     555/     ACE : B0                          phi     R0
     556/     ACF :                     ;    p2 = (unsigned char *)Ptr2;
     557/     ACF : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
     557/     ACF : =>TRUE                      if      ('O'='O')
     557/     ACF :  (MACRO-2)                          ldAX    memAddr,SP,(-4+10)
     557/     ACF : 82                          glo     SP
     557/     AD0 : FC 06                       adi     ((-4+10))#256
     557/     AD2 : AE                          plo     MEMADDR
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 58 - 2/27/2013 14:03:17


     557/     AD3 : 92                          ghi     SP
     557/     AD4 : 7C 00                       adci    ((-4+10))>>8; was/256
     557/     AD6 : BE                          phi     MEMADDR
     557/     AD7 : =>FALSE                     else
     557/     AD7 :                                     ldAD    memAddr,SP
     557/     AD7 : [557]                       endif
     557/     AD7 : 9D                          ghi     R13
     557/     AD8 : 5E                          str     memAddr
     557/     AD9 : 1E                          inc     memAddr
     557/     ADA : 8D                          glo     R13
     557/     ADB : 5E                          str     memAddr
     558/     ADC : C0 0B 40            	lbr L66
     559/     ADF :                     L65:
     560/     ADF :                     ;    while(Count-- > 0 && v == 0) {
     561/     ADF :                     ;        v = *(p1++) - *(p2++);
     562/     ADF : (MACRO)             	cpy2 R11,R0
     562/     ADF : 80                          glo     R0
     562/     AE0 : AB                          plo     R11
     562/     AE1 : 90                          ghi     R0
     562/     AE2 : BB                          phi     R11
     563/     AE3 : (MACRO)             	ldaD R10,1
     563/     AE3 : F8 01                       ldi     (1)&255
     563/     AE5 : AA                          plo     R10
     563/     AE6 : F8 00                       ldi     (1)>>8; was/256
     563/     AE8 : BA                          phi     R10
     564/     AE9 : (MACRO)             	alu2 R0,R11,R10,add,adc
     564/     AE9 : 22                          dec     sp ;make a work ares
     564/     AEA : 8A                          glo     R10
     564/     AEB : 52                          str     sp
     564/     AEC : 8B                          glo     R11
     564/     AED : F4                          ADD             ;calculate the low order byte
     564/     AEE : A0                          plo     R0
     564/     AEF : 9A                          ghi     R10
     564/     AF0 : 52                          str     sp
     564/     AF1 : 9B                          ghi     R11
     564/     AF2 : 74                          ADC             ;calculate the high byte
     564/     AF3 : B0                          phi     R0
     564/     AF4 : 12                          inc     sp      ;release the work area
     565/     AF5 : (MACRO)             	ld2 R9,'O',sp,(-4+10)
     565/     AF5 : =>TRUE                      if      ('O'='O')
     565/     AF5 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+10)
     565/     AF5 : 82                          glo     SP
     565/     AF6 : FC 06                       adi     ((-4+10))#256
     565/     AF8 : AE                          plo     MEMADDR
     565/     AF9 : 92                          ghi     SP
     565/     AFA : 7C 00                       adci    ((-4+10))>>8; was/256
     565/     AFC : BE                          phi     MEMADDR
     565/     AFD : =>FALSE                     else
     565/     AFD :                                     ldAD    memAddr,SP
     565/     AFD : [565]                       endif
     565/     AFD : 4E                          lda     memAddr
     565/     AFE : B9                          phi     R9
     565/     AFF : 0E                          ldn     memAddr
     565/     B00 : A9                          plo     R9
     566/     B01 : (MACRO)             	alu2 R10,R9,R10,add,adc
     566/     B01 : 22                          dec     sp ;make a work ares
     566/     B02 : 8A                          glo     R10
     566/     B03 : 52                          str     sp
     566/     B04 : 89                          glo     R9
     566/     B05 : F4                          ADD             ;calculate the low order byte
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 59 - 2/27/2013 14:03:17


     566/     B06 : AA                          plo     R10
     566/     B07 : 9A                          ghi     R10
     566/     B08 : 52                          str     sp
     566/     B09 : 99                          ghi     R9
     566/     B0A : 74                          ADC             ;calculate the high byte
     566/     B0B : BA                          phi     R10
     566/     B0C : 12                          inc     sp      ;release the work area
     567/     B0D : (MACRO)             	st2 R10,'O',sp,(-4+10); ASGNP2
     567/     B0D : =>TRUE                      if      ('O'='O')
     567/     B0D :  (MACRO-2)                          ldAX    memAddr,SP,(-4+10)
     567/     B0D : 82                          glo     SP
     567/     B0E : FC 06                       adi     ((-4+10))#256
     567/     B10 : AE                          plo     MEMADDR
     567/     B11 : 92                          ghi     SP
     567/     B12 : 7C 00                       adci    ((-4+10))>>8; was/256
     567/     B14 : BE                          phi     MEMADDR
     567/     B15 : =>FALSE                     else
     567/     B15 :                                     ldAD    memAddr,SP
     567/     B15 : [567]                       endif
     567/     B15 : 9A                          ghi     R10
     567/     B16 : 5E                          str     memAddr
     567/     B17 : 1E                          inc     memAddr
     567/     B18 : 8A                          glo     R10
     567/     B19 : 5E                          str     memAddr
     568/     B1A : (MACRO)             	ld1 R11,'O',R11,0
     568/     B1A : =>TRUE                      if      ('O'='O')
     568/     B1A :  (MACRO-2)                          ldAX    memAddr,R11,0
     568/     B1A : 8B                          glo     R11
     568/     B1B : FC 00                       adi     (0)#256
     568/     B1D : AE                          plo     MEMADDR
     568/     B1E : 9B                          ghi     R11
     568/     B1F : 7C 00                       adci    (0)>>8; was/256
     568/     B21 : BE                          phi     MEMADDR
     568/     B22 : =>FALSE                     else
     568/     B22 :                                     ldAD    memAddr,R11
     568/     B22 : [568]                       endif
     568/     B22 : 0E                          ldn     memAddr
     568/     B23 : AB                          plo     R11
     569/     B24 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     569/     B24 : F8 00                       ldi     0
     569/     B26 : BB                          phi     R11
     570/     B27 : (MACRO)             	ld1 R10,'O',R9,0
     570/     B27 : =>TRUE                      if      ('O'='O')
     570/     B27 :  (MACRO-2)                          ldAX    memAddr,R9,0
     570/     B27 : 89                          glo     R9
     570/     B28 : FC 00                       adi     (0)#256
     570/     B2A : AE                          plo     MEMADDR
     570/     B2B : 99                          ghi     R9
     570/     B2C : 7C 00                       adci    (0)>>8; was/256
     570/     B2E : BE                          phi     MEMADDR
     570/     B2F : =>FALSE                     else
     570/     B2F :                                     ldAD    memAddr,R9
     570/     B2F : [570]                       endif
     570/     B2F : 0E                          ldn     memAddr
     570/     B30 : AA                          plo     R10
     571/     B31 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     571/     B31 : F8 00                       ldi     0
     571/     B33 : BA                          phi     R10
     572/     B34 : (MACRO)             	alu2 R1,R11,R10,sm,smb
     572/     B34 : 22                          dec     sp ;make a work ares
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 60 - 2/27/2013 14:03:17


     572/     B35 : 8A                          glo     R10
     572/     B36 : 52                          str     sp
     572/     B37 : 8B                          glo     R11
     572/     B38 : F7                          SM             ;calculate the low order byte
     572/     B39 : A1                          plo     R1
     572/     B3A : 9A                          ghi     R10
     572/     B3B : 52                          str     sp
     572/     B3C : 9B                          ghi     R11
     572/     B3D : 77                          SMB             ;calculate the high byte
     572/     B3E : B1                          phi     R1
     572/     B3F : 12                          inc     sp      ;release the work area
     573/     B40 :                     ;    }
     574/     B40 :                     L66:
     575/     B40 :                     ;    while(Count-- > 0 && v == 0) {
     576/     B40 : (MACRO)             	cpy2 R11,R7
     576/     B40 : 87                          glo     R7
     576/     B41 : AB                          plo     R11
     576/     B42 : 97                          ghi     R7
     576/     B43 : BB                          phi     R11
     577/     B44 : (MACRO)             	alu2I R7,R11,1,smi,smbi
     577/     B44 : 8B                          glo     R11
     577/     B45 : FF 01                       SMI     (1)#256
     577/     B47 : A7                          plo     R7
     577/     B48 : 9B                          ghi     R11
     577/     B49 : 7F 00                       SMBI     (1)>>8; was/256
     577/     B4B : B7                          phi     R7
     578/     B4C : (MACRO)             	jeqU2I r11,0,L68
     578/     B4C : 8B                          glo     R11
     578/     B4D : FF 00                       smi     (0)#256
     578/     B4F : CA 0B 58                    lbnz    $$nobr
     578/     B52 : 9B                          ghi     R11
     578/     B53 : 7F 00                       smbi    (0)>>8; was/256
     578/     B55 : C2 0B 64                    lbz     L68
     578/     B58 :                     $$nobr:
     579/     B58 : (MACRO)             	jeqU2I r1,0,L65
     579/     B58 : 81                          glo     R1
     579/     B59 : FF 00                       smi     (0)#256
     579/     B5B : CA 0B 64                    lbnz    $$nobr
     579/     B5E : 91                          ghi     R1
     579/     B5F : 7F 00                       smbi    (0)>>8; was/256
     579/     B61 : C2 0A DF                    lbz     L65
     579/     B64 :                     $$nobr:
     580/     B64 :                     L68:
     581/     B64 :                     ;    return v;
     582/     B64 : (MACRO)             	cpy2 R15,R1 ;LOADI2
     582/     B64 : 81                          glo     R1
     582/     B65 : AF                          plo     R15
     582/     B66 : 91                          ghi     R1
     582/     B67 : BF                          phi     R15
     583/     B68 :                     L64:
     584/     B68 : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     584/     B68 : 82                          glo     SP
     584/     B69 : FC 00                       ADI     ((0))#256
     584/     B6B : AE                          plo     MEMADDR
     584/     B6C : 92                          ghi     SP
     584/     B6D : 7C 00                       ADCI     ((0))>>8; was/256
     584/     B6F : BE                          phi     MEMADDR
     585/     B70 : (MACRO)             	rldmi r7,memaddr
     585/     B70 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     585/     B71 : B7                          phi     R7
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 61 - 2/27/2013 14:03:17


     585/     B72 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     585/     B73 : A7                          plo     R7
     586/     B74 : (MACRO)             	rldmi r1,memaddr
     586/     B74 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     586/     B75 : B1                          phi     R1
     586/     B76 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     586/     B77 : A1                          plo     R1
     587/     B78 : (MACRO)             	rldmi r0,memaddr
     587/     B78 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     587/     B79 : B0                          phi     R0
     587/     B7A : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     587/     B7B : A0                          plo     R0
     588/     B7C : (MACRO)             	release 8
     588/     B7C :                     ;for release we adjust the low byte first 
     588/     B7C :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     588/     B7C :  (MACRO-2)                  alu2i sp,sp,8,adi,adci
     588/     B7C : 82                          glo     SP
     588/     B7D : FC 08                       ADI     (8)#256
     588/     B7F : A2                          plo     SP
     588/     B80 : 92                          ghi     SP
     588/     B81 : 7C 00                       ADCI     (8)>>8; was/256
     588/     B83 : B2                          phi     SP
     589/     B84 : (MACRO)             	Cretn
     589/     B84 : D5                          sep     RRET
     590/     B85 :                     
     591/     B85 :                     _memcpy:
     592/     B85 : (MACRO)             	reserve 6
     592/     B85 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     592/     B85 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     592/     B85 : 82                          glo sp          ;grab low byte of stack pointer
     592/     B86 : FF 06                       smi 6&255 ;claculate new low byte
     592/     B88 : AE                          plo memAddr     ;save it for a moment
     592/     B89 : 92                          ghi sp          ;grab high byte
     592/     B8A : 7F 00                       smbi (6>>8)&255 ;calculate the new page
     592/     B8C : B2                          phi sp          ;adjust page first
     592/     B8D : 8E                          glo memAddr     ;get new low byte
     592/     B8E : A2                          plo sp          ;finish adjusting the stack pointer
     593/     B8F : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     593/     B8F : 82                          glo     SP
     593/     B90 : FC 05                       ADI     ((5))#256
     593/     B92 : AE                          plo     MEMADDR
     593/     B93 : 92                          ghi     SP
     593/     B94 : 7C 00                       ADCI     ((5))>>8; was/256
     593/     B96 : BE                          phi     MEMADDR
     594/     B97 : EE                  	sex	memaddr
     595/     B98 : (MACRO)             	savmi r0
     595/     B98 : 80                          glo     R0
     595/     B99 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     595/     B9A : 90                          ghi     R0
     595/     B9B : 73                          stxd            ;and it end up where needed to do the next one
     596/     B9C : (MACRO)             	savmi r1
     596/     B9C : 81                          glo     R1
     596/     B9D : 73                          stxd            ;R1 x is primed to the spot to start the saves
     596/     B9E : 91                          ghi     R1
     596/     B9F : 73                          stxd            ;and it end up where needed to do the next one
     597/     BA0 : (MACRO)             	savmi r7
     597/     BA0 : 87                          glo     R7
     597/     BA1 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     597/     BA2 : 97                          ghi     R7
     597/     BA3 : 73                          stxd            ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 62 - 2/27/2013 14:03:17


     598/     BA4 : E2                  	sex sp
     599/     BA5 : (MACRO)             	ld2 R7,'O',sp,(4+8); INDIRU2(addr)
     599/     BA5 : =>TRUE                      if      ('O'='O')
     599/     BA5 :  (MACRO-2)                          ldAX    memAddr,SP,(4+8)
     599/     BA5 : 82                          glo     SP
     599/     BA6 : FC 0C                       adi     ((4+8))#256
     599/     BA8 : AE                          plo     MEMADDR
     599/     BA9 : 92                          ghi     SP
     599/     BAA : 7C 00                       adci    ((4+8))>>8; was/256
     599/     BAC : BE                          phi     MEMADDR
     599/     BAD : =>FALSE                     else
     599/     BAD :                                     ldAD    memAddr,SP
     599/     BAD : [599]                       endif
     599/     BAD : 4E                          lda     memAddr
     599/     BAE : B7                          phi     R7
     599/     BAF : 0E                          ldn     memAddr
     599/     BB0 : A7                          plo     R7
     600/     BB1 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     601/     BB1 :                     ;        char* dst8 = (char*)dest;
     602/     BB1 : (MACRO)             	cpy2 R1,R12
     602/     BB1 : 8C                          glo     R12
     602/     BB2 : A1                          plo     R1
     602/     BB3 : 9C                          ghi     R12
     602/     BB4 : B1                          phi     R1
     603/     BB5 :                     ;        char* src8 = (char*)src;
     604/     BB5 : (MACRO)             	cpy2 R0,R13
     604/     BB5 : 8D                          glo     R13
     604/     BB6 : A0                          plo     R0
     604/     BB7 : 9D                          ghi     R13
     604/     BB8 : B0                          phi     R0
     605/     BB9 : C0 0B F6            	lbr L71
     606/     BBC :                     L70:
     607/     BBC :                     ;        while (count--) {
     608/     BBC :                     ;            *dst8++ = *src8++;
     609/     BBC : (MACRO)             	cpy2 R11,R1
     609/     BBC : 81                          glo     R1
     609/     BBD : AB                          plo     R11
     609/     BBE : 91                          ghi     R1
     609/     BBF : BB                          phi     R11
     610/     BC0 : (MACRO)             	ldaD R10,1
     610/     BC0 : F8 01                       ldi     (1)&255
     610/     BC2 : AA                          plo     R10
     610/     BC3 : F8 00                       ldi     (1)>>8; was/256
     610/     BC5 : BA                          phi     R10
     611/     BC6 : (MACRO)             	alu2 R1,R11,R10,add,adc
     611/     BC6 : 22                          dec     sp ;make a work ares
     611/     BC7 : 8A                          glo     R10
     611/     BC8 : 52                          str     sp
     611/     BC9 : 8B                          glo     R11
     611/     BCA : F4                          ADD             ;calculate the low order byte
     611/     BCB : A1                          plo     R1
     611/     BCC : 9A                          ghi     R10
     611/     BCD : 52                          str     sp
     611/     BCE : 9B                          ghi     R11
     611/     BCF : 74                          ADC             ;calculate the high byte
     611/     BD0 : B1                          phi     R1
     611/     BD1 : 12                          inc     sp      ;release the work area
     612/     BD2 : (MACRO)             	cpy2 R9,R0
     612/     BD2 : 80                          glo     R0
     612/     BD3 : A9                          plo     R9
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 63 - 2/27/2013 14:03:17


     612/     BD4 : 90                          ghi     R0
     612/     BD5 : B9                          phi     R9
     613/     BD6 : (MACRO)             	alu2 R0,R9,R10,add,adc
     613/     BD6 : 22                          dec     sp ;make a work ares
     613/     BD7 : 8A                          glo     R10
     613/     BD8 : 52                          str     sp
     613/     BD9 : 89                          glo     R9
     613/     BDA : F4                          ADD             ;calculate the low order byte
     613/     BDB : A0                          plo     R0
     613/     BDC : 9A                          ghi     R10
     613/     BDD : 52                          str     sp
     613/     BDE : 99                          ghi     R9
     613/     BDF : 74                          ADC             ;calculate the high byte
     613/     BE0 : B0                          phi     R0
     613/     BE1 : 12                          inc     sp      ;release the work area
     614/     BE2 : (MACRO)             	ld1 R10,'O',R9,0
     614/     BE2 : =>TRUE                      if      ('O'='O')
     614/     BE2 :  (MACRO-2)                          ldAX    memAddr,R9,0
     614/     BE2 : 89                          glo     R9
     614/     BE3 : FC 00                       adi     (0)#256
     614/     BE5 : AE                          plo     MEMADDR
     614/     BE6 : 99                          ghi     R9
     614/     BE7 : 7C 00                       adci    (0)>>8; was/256
     614/     BE9 : BE                          phi     MEMADDR
     614/     BEA : =>FALSE                     else
     614/     BEA :                                     ldAD    memAddr,R9
     614/     BEA : [614]                       endif
     614/     BEA : 0E                          ldn     memAddr
     614/     BEB : AA                          plo     R10
     615/     BEC : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     615/     BEC : =>TRUE                      if      ('O'='O')
     615/     BEC :  (MACRO-2)                          ldAX    memAddr,R11,0
     615/     BEC : 8B                          glo     R11
     615/     BED : FC 00                       adi     (0)#256
     615/     BEF : AE                          plo     MEMADDR
     615/     BF0 : 9B                          ghi     R11
     615/     BF1 : 7C 00                       adci    (0)>>8; was/256
     615/     BF3 : BE                          phi     MEMADDR
     615/     BF4 : =>FALSE                     else
     615/     BF4 :                                     ldAD    memAddr,R11
     615/     BF4 : [615]                       endif
     615/     BF4 : 8A                          glo     R10
     615/     BF5 : 5E                          str     memAddr
     616/     BF6 :                     ;        }
     617/     BF6 :                     L71:
     618/     BF6 :                     ;        while (count--) {
     619/     BF6 : (MACRO)             	cpy2 R11,R7
     619/     BF6 : 87                          glo     R7
     619/     BF7 : AB                          plo     R11
     619/     BF8 : 97                          ghi     R7
     619/     BF9 : BB                          phi     R11
     620/     BFA : (MACRO)             	alu2I R7,R11,1,smi,smbi
     620/     BFA : 8B                          glo     R11
     620/     BFB : FF 01                       SMI     (1)#256
     620/     BFD : A7                          plo     R7
     620/     BFE : 9B                          ghi     R11
     620/     BFF : 7F 00                       SMBI     (1)>>8; was/256
     620/     C01 : B7                          phi     R7
     621/     C02 : (MACRO)             	jnzU2 r11,L70; NE 0
     621/     C02 : 8B                          glo     R11
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 64 - 2/27/2013 14:03:17


     621/     C03 : CA 0B BC                    lbnz    L70
     621/     C06 : 9B                          ghi     R11
     621/     C07 : CA 0B BC                    lbnz    L70
     622/     C0A :                     ;        return dest;
     623/     C0A : (MACRO)             	cpy2 R15,R12
     623/     C0A : 8C                          glo     R12
     623/     C0B : AF                          plo     R15
     623/     C0C : 9C                          ghi     R12
     623/     C0D : BF                          phi     R15
     624/     C0E :                     L69:
     625/     C0E : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     625/     C0E : 82                          glo     SP
     625/     C0F : FC 00                       ADI     ((0))#256
     625/     C11 : AE                          plo     MEMADDR
     625/     C12 : 92                          ghi     SP
     625/     C13 : 7C 00                       ADCI     ((0))>>8; was/256
     625/     C15 : BE                          phi     MEMADDR
     626/     C16 : (MACRO)             	rldmi r7,memaddr
     626/     C16 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     626/     C17 : B7                          phi     R7
     626/     C18 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     626/     C19 : A7                          plo     R7
     627/     C1A : (MACRO)             	rldmi r1,memaddr
     627/     C1A : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     627/     C1B : B1                          phi     R1
     627/     C1C : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     627/     C1D : A1                          plo     R1
     628/     C1E : (MACRO)             	rldmi r0,memaddr
     628/     C1E : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     628/     C1F : B0                          phi     R0
     628/     C20 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     628/     C21 : A0                          plo     R0
     629/     C22 : (MACRO)             	release 6
     629/     C22 :                     ;for release we adjust the low byte first 
     629/     C22 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     629/     C22 :  (MACRO-2)                  alu2i sp,sp,6,adi,adci
     629/     C22 : 82                          glo     SP
     629/     C23 : FC 06                       ADI     (6)#256
     629/     C25 : A2                          plo     SP
     629/     C26 : 92                          ghi     SP
     629/     C27 : 7C 00                       ADCI     (6)>>8; was/256
     629/     C29 : B2                          phi     SP
     630/     C2A : (MACRO)             	Cretn
     630/     C2A : D5                          sep     RRET
     631/     C2B :                     
     632/     C2B :                     _memset:
     633/     C2B : (MACRO)             	reserve 4
     633/     C2B :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     633/     C2B :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     633/     C2B : 82                          glo sp          ;grab low byte of stack pointer
     633/     C2C : FF 04                       smi 4&255 ;claculate new low byte
     633/     C2E : AE                          plo memAddr     ;save it for a moment
     633/     C2F : 92                          ghi sp          ;grab high byte
     633/     C30 : 7F 00                       smbi (4>>8)&255 ;calculate the new page
     633/     C32 : B2                          phi sp          ;adjust page first
     633/     C33 : 8E                          glo memAddr     ;get new low byte
     633/     C34 : A2                          plo sp          ;finish adjusting the stack pointer
     634/     C35 : (MACRO)             	alu2I memaddr,sp,(3),adi,adci
     634/     C35 : 82                          glo     SP
     634/     C36 : FC 03                       ADI     ((3))#256
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 65 - 2/27/2013 14:03:17


     634/     C38 : AE                          plo     MEMADDR
     634/     C39 : 92                          ghi     SP
     634/     C3A : 7C 00                       ADCI     ((3))>>8; was/256
     634/     C3C : BE                          phi     MEMADDR
     635/     C3D : EE                  	sex	memaddr
     636/     C3E : (MACRO)             	savmi r1
     636/     C3E : 81                          glo     R1
     636/     C3F : 73                          stxd            ;R1 x is primed to the spot to start the saves
     636/     C40 : 91                          ghi     R1
     636/     C41 : 73                          stxd            ;and it end up where needed to do the next one
     637/     C42 : (MACRO)             	savmi r7
     637/     C42 : 87                          glo     R7
     637/     C43 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     637/     C44 : 97                          ghi     R7
     637/     C45 : 73                          stxd            ;and it end up where needed to do the next one
     638/     C46 : E2                  	sex sp
     639/     C47 : (MACRO)             	ld2 R7,'O',sp,(4+6); INDIRU2(addr)
     639/     C47 : =>TRUE                      if      ('O'='O')
     639/     C47 :  (MACRO-2)                          ldAX    memAddr,SP,(4+6)
     639/     C47 : 82                          glo     SP
     639/     C48 : FC 0A                       adi     ((4+6))#256
     639/     C4A : AE                          plo     MEMADDR
     639/     C4B : 92                          ghi     SP
     639/     C4C : 7C 00                       adci    ((4+6))>>8; was/256
     639/     C4E : BE                          phi     MEMADDR
     639/     C4F : =>FALSE                     else
     639/     C4F :                                     ldAD    memAddr,SP
     639/     C4F : [639]                       endif
     639/     C4F : 4E                          lda     memAddr
     639/     C50 : B7                          phi     R7
     639/     C51 : 0E                          ldn     memAddr
     639/     C52 : A7                          plo     R7
     640/     C53 :                     ;{
     641/     C53 :                     ;    unsigned char* p=s;
     642/     C53 : (MACRO)             	cpy2 R1,R12
     642/     C53 : 8C                          glo     R12
     642/     C54 : A1                          plo     R1
     642/     C55 : 9C                          ghi     R12
     642/     C56 : B1                          phi     R1
     643/     C57 : C0 0C 74            	lbr L75
     644/     C5A :                     L74:
     645/     C5A :                     ;        *p++ = (unsigned char)c;
     646/     C5A : (MACRO)             	cpy2 R11,R1
     646/     C5A : 81                          glo     R1
     646/     C5B : AB                          plo     R11
     646/     C5C : 91                          ghi     R1
     646/     C5D : BB                          phi     R11
     647/     C5E : (MACRO)             	ldA2 R1,'O',R11,(1); reg:addr
     647/     C5E : =>TRUE                      if      ('O'='O')
     647/     C5E :  (MACRO-2)                          ldAX    R1,R11,(1)
     647/     C5E : 8B                          glo     R11
     647/     C5F : FC 01                       adi     ((1))#256
     647/     C61 : A1                          plo     R1
     647/     C62 : 9B                          ghi     R11
     647/     C63 : 7C 00                       adci    ((1))>>8; was/256
     647/     C65 : B1                          phi     R1
     647/     C66 : =>FALSE                     else
     647/     C66 :                                     ldAD    R1,R11
     647/     C66 : [647]                       endif
     648/     C66 : (MACRO)             	cpy2 R10,R13
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 66 - 2/27/2013 14:03:17


     648/     C66 : 8D                          glo     R13
     648/     C67 : AA                          plo     R10
     648/     C68 : 9D                          ghi     R13
     648/     C69 : BA                          phi     R10
     649/     C6A : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     649/     C6A : =>TRUE                      if      ('O'='O')
     649/     C6A :  (MACRO-2)                          ldAX    memAddr,R11,0
     649/     C6A : 8B                          glo     R11
     649/     C6B : FC 00                       adi     (0)#256
     649/     C6D : AE                          plo     MEMADDR
     649/     C6E : 9B                          ghi     R11
     649/     C6F : 7C 00                       adci    (0)>>8; was/256
     649/     C71 : BE                          phi     MEMADDR
     649/     C72 : =>FALSE                     else
     649/     C72 :                                     ldAD    memAddr,R11
     649/     C72 : [649]                       endif
     649/     C72 : 8A                          glo     R10
     649/     C73 : 5E                          str     memAddr
     650/     C74 :                     L75:
     651/     C74 :                     ;    while(n--)
     652/     C74 : (MACRO)             	cpy2 R11,R7
     652/     C74 : 87                          glo     R7
     652/     C75 : AB                          plo     R11
     652/     C76 : 97                          ghi     R7
     652/     C77 : BB                          phi     R11
     653/     C78 : (MACRO)             	alu2I R7,R11,1,smi,smbi
     653/     C78 : 8B                          glo     R11
     653/     C79 : FF 01                       SMI     (1)#256
     653/     C7B : A7                          plo     R7
     653/     C7C : 9B                          ghi     R11
     653/     C7D : 7F 00                       SMBI     (1)>>8; was/256
     653/     C7F : B7                          phi     R7
     654/     C80 : (MACRO)             	jnzU2 r11,L74; NE 0
     654/     C80 : 8B                          glo     R11
     654/     C81 : CA 0C 5A                    lbnz    L74
     654/     C84 : 9B                          ghi     R11
     654/     C85 : CA 0C 5A                    lbnz    L74
     655/     C88 :                     ;    return s;
     656/     C88 : (MACRO)             	cpy2 R15,R12
     656/     C88 : 8C                          glo     R12
     656/     C89 : AF                          plo     R15
     656/     C8A : 9C                          ghi     R12
     656/     C8B : BF                          phi     R15
     657/     C8C :                     L73:
     658/     C8C : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     658/     C8C : 82                          glo     SP
     658/     C8D : FC 00                       ADI     ((0))#256
     658/     C8F : AE                          plo     MEMADDR
     658/     C90 : 92                          ghi     SP
     658/     C91 : 7C 00                       ADCI     ((0))>>8; was/256
     658/     C93 : BE                          phi     MEMADDR
     659/     C94 : (MACRO)             	rldmi r7,memaddr
     659/     C94 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     659/     C95 : B7                          phi     R7
     659/     C96 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     659/     C97 : A7                          plo     R7
     660/     C98 : (MACRO)             	rldmi r1,memaddr
     660/     C98 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     660/     C99 : B1                          phi     R1
     660/     C9A : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 67 - 2/27/2013 14:03:17


     660/     C9B : A1                          plo     R1
     661/     C9C : (MACRO)             	release 4
     661/     C9C :                     ;for release we adjust the low byte first 
     661/     C9C :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     661/     C9C :  (MACRO-2)                  alu2i sp,sp,4,adi,adci
     661/     C9C : 82                          glo     SP
     661/     C9D : FC 04                       ADI     (4)#256
     661/     C9F : A2                          plo     SP
     661/     CA0 : 92                          ghi     SP
     661/     CA1 : 7C 00                       ADCI     (4)>>8; was/256
     661/     CA3 : B2                          phi     SP
     662/     CA4 : (MACRO)             	Cretn
     662/     CA4 : D5                          sep     RRET
     663/     CA5 :                     
     664/     CA5 :                     L60:
     665/     CA5 : 65                  	db 101
     666/     CA6 : 78                  	db 120
     667/     CA7 : 69                  	db 105
     668/     CA8 : 74                  	db 116
     669/     CA9 : 20                  	db 32
     670/     CAA : 25                  	db 37
     671/     CAB : 64                  	db 100
     672/     CAC : 0A                  	db 10
     673/     CAD : 00                  	db 0
     674/     CAE :                     L2:
     675/     CAE : 68                  	db 104
     676/     CAF : 65                  	db 101
     677/     CB0 : 6C                  	db 108
     678/     CB1 : 6C                  	db 108
     679/     CB2 : 6F                  	db 111
     680/     CB3 : 20                  	db 32
     681/     CB4 : 57                  	db 87
     682/     CB5 : 6F                  	db 111
     683/     CB6 : 72                  	db 114
     684/     CB7 : 6C                  	db 108
     685/     CB8 : 64                  	db 100
     686/     CB9 : 21                  	db 33
     687/     CBA : 0A                  	db 10
     688/     CBB : 00                  	db 0
     689/     CBC :                     	include lcc1802EpiloNG.inc
(1)    1/     CBC :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     CBC :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     CBC :                     ;this is the version published with the lcc1802121229 release
(1)    4/     CBC :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     CBC :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     CBC :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     CBC :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     CBC :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     CBC :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     CBC :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     CBC :                     ;feb 27 changed stack to start at 7fff
(1)   12/     CBC : =EH                 rwork	equ	memAddr	;work register
(1)   13/     CBC :                     lcc1802init:	
(1)   14/     CBC : (MACRO)             	ldiReg	RCALL,_call
(1)   14/     CBC : F8 01                       ldi     (_CALL)&255
(1)   14/     CBE : A4                          plo     RCALL
(1)   14/     CBF : F8 0D                       ldi     (_CALL)>>8; was/256
(1)   14/     CC1 : B4                          phi     RCALL
(1)   15/     CC2 : (MACRO)             	ldiReg	RRET,_return
(1)   15/     CC2 : F8 12                       ldi     (_RETURN)&255
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 68 - 2/27/2013 14:03:17


(1)   15/     CC4 : A5                          plo     RRET
(1)   15/     CC5 : F8 0D                       ldi     (_RETURN)>>8; was/256
(1)   15/     CC7 : B5                          phi     RRET
(1)   16/     CC8 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   16/     CC8 : F8 FF                       ldi     (0X7FFF)&255
(1)   16/     CCA : A2                          plo     SP
(1)   16/     CCB : F8 7F                       ldi     (0X7FFF)>>8; was/256
(1)   16/     CCD : B2                          phi     SP
(1)   17/     CCE : E2                  	sex	SP
(1)   18/     CCF : (MACRO)             	ldiReg	RPC,$$_00000
(1)   18/     CCF : F8 D6                       ldi     ($$_00000)&255
(1)   18/     CD1 : A3                          plo     RPC
(1)   18/     CD2 : F8 0C                       ldi     ($$_00000)>>8; was/256
(1)   18/     CD4 : B3                          phi     RPC
(1)   19/     CD5 : D3                  	sep	RPC
(1)   20/     CD6 :                     $$_00000:
(1)   21/     CD6 : (MACRO)             	Ccall _main	;call the main routine
(1)   21/     CD6 : D4                          sep     RCALL
(1)   21/     CD7 : 00 03                       dw      _MAIN
(1)   22/     CD9 : C0 0C D9            $$_die:	lbr	$$_die		;loop here when main returns
(1)   23/     CDC : DE AD               	db	0xde,0xad
(1)   24/     CDE :                     
(1)   25/     CDE :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   26/     CDE :                     _setqOn:
(1)   27/     CDE : 7B                  	seq
(1)   28/     CDF : (MACRO)             	Cretn
(1)   28/     CDF : D5                          sep     RRET
(1)   29/     CE0 :                     _setqOff:
(1)   30/     CE0 : 7A                  	req
(1)   31/     CE1 : (MACRO)             	Cretn
(1)   31/     CE1 : D5                          sep     RRET
(1)   32/     CE2 :                     
(1)   33/     CE2 :                     _modU2:	;16 bit unsigned remainder
(1)   34/     CE2 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   35/     CE2 : (MACRO)                 Ccall _divU2
(1)   35/     CE2 : D4                          sep     RCALL
(1)   35/     CE3 : 0D 49                       dw      _DIVU2
(1)   36/     CE5 : 8D                      glo regArg2
(1)   37/     CE6 : AF                      plo retVal
(1)   38/     CE7 : 9D                      ghi regArg2
(1)   39/     CE8 : BF                      phi retVal
(1)   40/     CE9 : (MACRO)                 Cretn
(1)   40/     CE9 : D5                          sep     RRET
(1)   41/     CEA :                         
(1)   42/     CEA :                     _modI2:	;16 bit signed remainder
(1)   43/     CEA :                     	; just calls the 16 bit division then puts remainder into return value
(1)   44/     CEA : (MACRO)                 Ccall _divI2
(1)   44/     CEA : D4                          sep     RCALL
(1)   44/     CEB : 0D A4                       dw      _DIVI2
(1)   45/     CED : 8D                      glo regArg2
(1)   46/     CEE : AF                      plo retVal
(1)   47/     CEF : 9D                      ghi regArg2
(1)   48/     CF0 : BF                      phi retVal
(1)   49/     CF1 : (MACRO)                 Cretn
(1)   49/     CF1 : D5                          sep     RRET
(1)   50/     CF2 :                     
(1)   51/     CF2 :                     _out4:	
(1)   52/     CF2 : 8C                  	glo	regArg1
(1)   53/     CF3 : 22                  	dec	sp
(1)   54/     CF4 : 52                  	str	sp
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 69 - 2/27/2013 14:03:17


(1)   55/     CF5 : 64                  	out	4
(1)   56/     CF6 : (MACRO)             	Cretn
(1)   56/     CF6 : D5                          sep     RRET
(1)   57/     CF7 :                     
(1)   58/     CF7 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   59/     CF7 :                     	align 256
(1)   60/     D00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   61/     D00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   62/     D00 : D3                  	sep     R3 ;go to subroutine
(1)   63/     D01 : E2                  _call	sex	SP ;make sure X=SP
(1)   64/     D02 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   65/     D03 : 22                  	dec	sp
(1)   66/     D04 : 73                  	stxd
(1)   67/     D05 : 86                  	glo	retAddr
(1)   68/     D06 : 52                  	str	sp	
(1)   69/     D07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   70/     D08 : A6                  	plo	retAddr
(1)   71/     D09 : 93                  	ghi	RPC
(1)   72/     D0A : B6                  	phi	retAddr
(1)   73/     D0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   74/     D0C : B3                  	phi	RPC
(1)   75/     D0D : 46                  	lda	retAddr
(1)   76/     D0E : A3                  	plo	RPC
(1)   77/     D0F : 30 00               	br	_call-1
(1)   78/     D11 :                     
(1)   79/     D11 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   80/     D11 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   81/     D11 : D3                  	sep	RPC	;return to the original program
(1)   82/     D12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   83/     D13 : A3                  	plo	RPC
(1)   84/     D14 : 96                  	ghi	retAddr
(1)   85/     D15 : B3                  	phi	RPC
(1)   86/     D16 : 42                  	lda	SP	;pick up old return address
(1)   87/     D17 : A6                  	plo	retAddr
(1)   88/     D18 : 42                  	lda	SP
(1)   89/     D19 : B6                  	phi	retAddr
(1)   90/     D1A : 30 11               	br	_return-1
(1)   91/     D1C :                     
(1)   92/     D1C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   93/     D1C : F8 24               	ldi	(100-15-10-2)/2
(1)   94/     D1E : FF 01               $$mslp:	smi	1
(1)   95/     D20 : 3A 1E               	bnz	$$mslp
(1)   96/     D22 : (MACRO)             	Cretn
(1)   96/     D22 : D5                          sep     RRET
(1)   97/     D23 :                     
(1)   98/     D23 :                     
(1)   99/     D23 :                     	
(1)  100/     D23 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  101/     D23 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  102/     D23 :                     _mulu2:		
(1)  103/     D23 : 22                      dec sp
(1)  104/     D24 : F8 10                   ldi 16
(1)  105/     D26 : AE                      plo	rwork	;bit count
(1)  106/     D27 : F8 00                   ldi 0
(1)  107/     D29 : BF                      phi	retVal	;quotient
(1)  108/     D2A : AF                      plo retVal
(1)  109/     D2B :                     $$MultLoop16_16:
(1)  110/     D2B : 9C                      ghi regArg1
(1)  111/     D2C : F6                      shr
(1)  112/     D2D : BC                      phi regArg1
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 70 - 2/27/2013 14:03:17


(1)  113/     D2E : 8C                      glo regArg1
(1)  114/     D2F : 76                      shrc
(1)  115/     D30 : AC                      plo regArg1
(1)  116/     D31 : 3B 3D                   bnf $$MultSkip16_16
(1)  117/     D33 : 8D                      glo regArg2
(1)  118/     D34 : 52                      str sp
(1)  119/     D35 : 8F                      glo retVal
(1)  120/     D36 : F4                      add 
(1)  121/     D37 : AF                      plo retVal
(1)  122/     D38 : 9D                      ghi regArg2
(1)  123/     D39 : 52                      str sp
(1)  124/     D3A : 9F                      ghi retVal
(1)  125/     D3B : 74                      adc
(1)  126/     D3C : BF                      phi retVal
(1)  127/     D3D :                     $$MultSkip16_16:
(1)  128/     D3D : 8D                      glo regArg2
(1)  129/     D3E : FE                      shl
(1)  130/     D3F : AD                      plo regArg2
(1)  131/     D40 : 9D                      ghi regArg2
(1)  132/     D41 : 7E                      shlc
(1)  133/     D42 : BD                      phi regArg2
(1)  134/     D43 : 2E                      dec rwork
(1)  135/     D44 : 8E                      glo rwork
(1)  136/     D45 : 3A 2B                   bnz $$MultLoop16_16
(1)  137/     D47 : 12                      inc sp
(1)  138/     D48 : D5                      sep 5
(1)  139/     D49 :                     
(1)  140/     D49 :                     
(1)  141/     D49 :                     _divU2:
(1)  142/     D49 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  143/     D49 :                     	; This is really an unsigned 23 bit divide
(1)  144/     D49 :                     	;thanks to Ted Rossin
(1)  145/     D49 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  146/     D49 : 22                      dec sp
(1)  147/     D4A : F8 10                   ldi 16
(1)  148/     D4C : AE                      plo rwork
(1)  149/     D4D : F8 00                   ldi 0
(1)  150/     D4F : BF                      phi retVal
(1)  151/     D50 : AF                      plo retVal
(1)  152/     D51 : BE                      phi rwork
(1)  153/     D52 :                     $$DivLoop16_16:
(1)  154/     D52 : 8C                      glo regArg1
(1)  155/     D53 : FE                      shl
(1)  156/     D54 : AC                      plo regArg1
(1)  157/     D55 : 9C                      ghi regArg1
(1)  158/     D56 : 7E                      shlc
(1)  159/     D57 : BC                      phi regArg1
(1)  160/     D58 : 8F                      glo retVal
(1)  161/     D59 : 7E                      shlc
(1)  162/     D5A : AF                      plo retVal
(1)  163/     D5B : 9F                      ghi retVal
(1)  164/     D5C : 7E                      shlc
(1)  165/     D5D : BF                      phi retVal
(1)  166/     D5E : 9E                      ghi rwork
(1)  167/     D5F : 7E                      shlc
(1)  168/     D60 : BE                      phi rwork
(1)  169/     D61 : 3B 73                   bnf $$DivSub16_16
(1)  170/     D63 : 8D                      glo regArg2
(1)  171/     D64 : 52                      str sp
(1)  172/     D65 : 8F                      glo retVal
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 71 - 2/27/2013 14:03:17


(1)  173/     D66 : F4                      add 
(1)  174/     D67 : AF                      plo retVal
(1)  175/     D68 : 9D                      ghi regArg2
(1)  176/     D69 : 52                      str sp
(1)  177/     D6A : 9F                      ghi retVal
(1)  178/     D6B : 74                      adc 
(1)  179/     D6C : BF                      phi retVal
(1)  180/     D6D : 9E                      ghi rwork
(1)  181/     D6E : 7C 00                   adci 0
(1)  182/     D70 : BE                      phi rwork
(1)  183/     D71 : 30 81                   br $$DivSkip16_16
(1)  184/     D73 :                     $$DivSub16_16:
(1)  185/     D73 : 8D                      glo regArg2
(1)  186/     D74 : 52                      str sp
(1)  187/     D75 : 8F                      glo retVal
(1)  188/     D76 : F7                      sm
(1)  189/     D77 : AF                      plo retVal
(1)  190/     D78 : 9D                      ghi regArg2
(1)  191/     D79 : 52                      str sp
(1)  192/     D7A : 9F                      ghi retVal
(1)  193/     D7B : 77                      smb 
(1)  194/     D7C : BF                      phi retVal
(1)  195/     D7D : 9E                      ghi rwork
(1)  196/     D7E : 7F 00                   smbi 0
(1)  197/     D80 : BE                      phi rwork 
(1)  198/     D81 :                     $$DivSkip16_16:
(1)  199/     D81 : FE                      shl
(1)  200/     D82 : 33 88                   bdf $$DivSkipClear16_16
(1)  201/     D84 :                     $$DivSetBit16_16:
(1)  202/     D84 : 8C                      glo regArg1
(1)  203/     D85 : F9 01                   ori  0x01
(1)  204/     D87 : AC                      plo regArg1
(1)  205/     D88 :                     $$DivSkipClear16_16:
(1)  206/     D88 : 2E                      dec rwork
(1)  207/     D89 : 8E                      glo rwork
(1)  208/     D8A : 3A 52                   bnz $$DivLoop16_16
(1)  209/     D8C : 9E                      ghi rwork
(1)  210/     D8D : FE                      shl
(1)  211/     D8E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  212/     D90 : 8D                      glo regArg2
(1)  213/     D91 : 52                      str sp
(1)  214/     D92 : 8F                      glo retVal
(1)  215/     D93 : F4                      add
(1)  216/     D94 : AF                      plo retVal
(1)  217/     D95 : 9D                      ghi regArg2
(1)  218/     D96 : 52                      str sp
(1)  219/     D97 : 9F                      ghi retVal
(1)  220/     D98 : 74                      adc
(1)  221/     D99 : BF                      phi retVal
(1)  222/     D9A :                     $$DivSkipFinalAdd16_16:
(1)  223/     D9A : 12                      inc sp
(1)  224/     D9B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  225/     D9B : 8F                      glo retVal
(1)  226/     D9C : AD                      plo regArg2
(1)  227/     D9D : 9F                      ghi retVal
(1)  228/     D9E : BD                      phi regArg2
(1)  229/     D9F : 8C                      glo regArg1
(1)  230/     DA0 : AF                      plo retVal
(1)  231/     DA1 : 9C                      ghi regArg1
(1)  232/     DA2 : BF                      phi retVal
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 72 - 2/27/2013 14:03:17


(1)  233/     DA3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  234/     DA3 : D5                      sep 5
(1)  235/     DA4 :                     
(1)  236/     DA4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  237/     DA4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  238/     DA4 :                     _divI2:
(1)  239/     DA4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  240/     DA4 : 22                      dec	sp	;leave a work area available
(1)  241/     DA5 : 9C                      ghi regArg1
(1)  242/     DA6 : 52                      str sp	;save the sign of the 1st arg
(1)  243/     DA7 : FE                      shl
(1)  244/     DA8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  245/     DAA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  245/     DAA : 8C                          glo     REGARG1                     ;(flip all the bits and add 1)
(1)  245/     DAB : FB FF                       xri     0xff
(1)  245/     DAD : AC                          plo     REGARG1
(1)  245/     DAE : 9C                          ghi     REGARG1
(1)  245/     DAF : FB FF                       xri     0xff
(1)  245/     DB1 : BC                          phi     REGARG1
(1)  245/     DB2 : 1C                          inc     REGARG1
(1)  246/     DB3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  247/     DB3 : 9D                      ghi regArg2
(1)  248/     DB4 : F3                      xor	
(1)  249/     DB5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  250/     DB6 : 9D                      ghi regArg2
(1)  251/     DB7 : FE                      shl
(1)  252/     DB8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  253/     DBA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  253/     DBA : 8D                          glo     REGARG2                     ;(flip all the bits and add 1)
(1)  253/     DBB : FB FF                       xri     0xff
(1)  253/     DBD : AD                          plo     REGARG2
(1)  253/     DBE : 9D                          ghi     REGARG2
(1)  253/     DBF : FB FF                       xri     0xff
(1)  253/     DC1 : BD                          phi     REGARG2
(1)  253/     DC2 : 1D                          inc     REGARG2
(1)  254/     DC3 :                     $$pos2: ; both args now +v
(1)  255/     DC3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  255/     DC3 : D4                          sep     RCALL
(1)  255/     DC4 : 0D 49                       dw      _DIVU2
(1)  256/     DC6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  257/     DC6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  258/     DC7 : FE                      shl
(1)  259/     DC8 : 3B D3                   bnf $$done ;if the signs were different
(1)  260/     DCA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  260/     DCA : 8F                          glo     RETVAL                     ;(flip all the bits and add 1)
(1)  260/     DCB : FB FF                       xri     0xff
(1)  260/     DCD : AF                          plo     RETVAL
(1)  260/     DCE : 9F                          ghi     RETVAL
(1)  260/     DCF : FB FF                       xri     0xff
(1)  260/     DD1 : BF                          phi     RETVAL
(1)  260/     DD2 : 1F                          inc     RETVAL
(1)  261/     DD3 :                     $$done:
(1)  262/     DD3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  263/     DD3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  263/     DD3 : D5                          sep     RRET
(1)  264/     DD4 :                     
(1)  265/     DD4 :                     
(1)  266/     DD4 :                     	align 256    ;32 bit operations follow
(1)  267/     E00 :                     _divu4:
(1)  268/     E00 :                     ;This is an unsigned 32 bit restoring division
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 73 - 2/27/2013 14:03:17


(1)  269/     E00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  270/     E00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  271/     E00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  272/     E00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  273/     E00 :                     
(1)  274/     E00 : F8 20               	ldi 32		;set loop count
(1)  275/     E02 : AE                  	plo memaddr	;in temp register
(1)  276/     E03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  276/     E03 : F8 00                       ldi     (0)&255
(1)  276/     E05 : AD                          plo     RP1P2
(1)  276/     E06 : F8 00                       ldi     ((0)>>8)&255; 
(1)  276/     E08 : BD                          phi     RP1P2
(1)  276/     E09 : F8 00                       ldi     ((0)>>16)&255; 
(1)  276/     E0B : AC                          plo     RP1P2-1
(1)  276/     E0C : F8 00                       ldi     ((0)>>24)&255; 
(1)  276/     E0E : BC                          phi     RP1P2-1
(1)  277/     E0F :                     $$loop:
(1)  278/     E0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  278/     E0F : 89                          glo     RL8     ;start with low byte of second register
(1)  278/     E10 : FE                          shl             ;shift left once
(1)  278/     E11 : A9                          plo     RL8     ; save it
(1)  278/     E12 : 99                          ghi     RL8     ;high byte of second RL8
(1)  278/     E13 : 7E                          shlc            ;shift one bit carrying
(1)  278/     E14 : B9                          phi     RL8     ;save it
(1)  278/     E15 : 88                          glo     RL8-1   ;now the bottom byte of top RL8
(1)  278/     E16 : 7E                          shlc
(1)  278/     E17 : A8                          plo     RL8-1
(1)  278/     E18 : 98                          ghi     RL8-1   ;finally the top byte of the high order RL8
(1)  278/     E19 : 7E                          shlc            ;gets the last shift
(1)  278/     E1A : B8                          phi     RL8-1   ;and we're done
(1)  279/     E1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  279/     E1B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  279/     E1C : 7E                          shlc            ;shift left once continuing carry
(1)  279/     E1D : AD                          plo     RP1P2     ; save it
(1)  279/     E1E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  279/     E1F : 7E                          shlc            ;shift one bit carrying
(1)  279/     E20 : BD                          phi     RP1P2     ;save it
(1)  279/     E21 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  279/     E22 : 7E                          shlc
(1)  279/     E23 : AC                          plo     RP1P2-1
(1)  279/     E24 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  279/     E25 : 7E                          shlc            ;gets the last shift
(1)  279/     E26 : BC                          phi     RP1P2-1   ;and we're done
(1)  280/     E27 :                     
(1)  281/     E27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  281/     E27 : 22                          dec     sp ;make a work ares
(1)  281/     E28 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  281/     E29 : 52                          str     sp      ;so arithmetic operations start there
(1)  281/     E2A : 8D                          glo     RP1P2
(1)  281/     E2B : F7                          SM             ;calculate the low order byte
(1)  281/     E2C : AD                          plo     RP1P2
(1)  281/     E2D : 9B                          ghi     RL10
(1)  281/     E2E : 52                          str     sp
(1)  281/     E2F : 9D                          ghi     RP1P2
(1)  281/     E30 : 77                          SMB             ;calculate the second byte
(1)  281/     E31 : BD                          phi     RP1P2
(1)  281/     E32 : 8A                          glo     RL10-1
(1)  281/     E33 : 52                          str     sp
(1)  281/     E34 : 8C                          glo     RP1P2-1
(1)  281/     E35 : 77                          SMB             ;calculate the third byte
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 74 - 2/27/2013 14:03:17


(1)  281/     E36 : AC                          plo     RP1P2-1
(1)  281/     E37 : 9A                          ghi     RL10-1
(1)  281/     E38 : 52                          str     sp
(1)  281/     E39 : 9C                          ghi     RP1P2-1
(1)  281/     E3A : 77                          SMB             ;calculate the high byte
(1)  281/     E3B : BC                          phi     RP1P2-1
(1)  281/     E3C : 12                          inc     sp      ;release the work area
(1)  282/     E3D :                     
(1)  283/     E3D : FA 80               	ani 0x80	;check the top bit
(1)  284/     E3F : 32 5D               	bz $$norestore	;if it's 0
(1)  285/     E41 : 89                  		glo RL8
(1)  286/     E42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  287/     E44 : A9                  		plo RL8
(1)  288/     E45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  288/     E45 : 22                          dec     sp ;make a work ares
(1)  288/     E46 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  288/     E47 : 52                          str     sp      ;so arithmetic operations start there
(1)  288/     E48 : 8D                          glo     RP1P2
(1)  288/     E49 : F4                          ADD             ;calculate the low order byte
(1)  288/     E4A : AD                          plo     RP1P2
(1)  288/     E4B : 9B                          ghi     RL10
(1)  288/     E4C : 52                          str     sp
(1)  288/     E4D : 9D                          ghi     RP1P2
(1)  288/     E4E : 74                          ADC             ;calculate the second byte
(1)  288/     E4F : BD                          phi     RP1P2
(1)  288/     E50 : 8A                          glo     RL10-1
(1)  288/     E51 : 52                          str     sp
(1)  288/     E52 : 8C                          glo     RP1P2-1
(1)  288/     E53 : 74                          ADC             ;calculate the third byte
(1)  288/     E54 : AC                          plo     RP1P2-1
(1)  288/     E55 : 9A                          ghi     RL10-1
(1)  288/     E56 : 52                          str     sp
(1)  288/     E57 : 9C                          ghi     RP1P2-1
(1)  288/     E58 : 74                          ADC             ;calculate the high byte
(1)  288/     E59 : BC                          phi     RP1P2-1
(1)  288/     E5A : 12                          inc     sp      ;release the work area
(1)  289/     E5B : 30 61               	br $$endlp 	;else
(1)  290/     E5D :                     $$norestore:
(1)  291/     E5D : 89                  		glo RL8
(1)  292/     E5E : F9 01               		ori 1	;turn on the bottom bit
(1)  293/     E60 : A9                  		plo RL8
(1)  294/     E61 :                     	;end if
(1)  295/     E61 :                     $$endlp:
(1)  296/     E61 : 2E                  	dec memaddr	;check the cycle count
(1)  297/     E62 : 8E                  	glo memaddr
(1)  298/     E63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  299/     E65 :                     	
(1)  300/     E65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  300/     E65 : D5                          sep     RRET
(1)  301/     E66 :                     		
(1)  302/     E66 :                     
(1)  303/     E66 :                     _mulu4:
(1)  304/     E66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  305/     E66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  306/     E66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  307/     E66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  308/     E66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  309/     E66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  310/     E66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  311/     E66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 75 - 2/27/2013 14:03:17


(1)  312/     E66 :                     	;for 10 we subtract and shift
(1)  313/     E66 :                     	;for 00 and 11 we just shift
(1)  314/     E66 :                     
(1)  315/     E66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  315/     E66 : F8 00                       ldi     (0)&255
(1)  315/     E68 : AD                          plo     RP1P2
(1)  315/     E69 : F8 00                       ldi     ((0)>>8)&255; 
(1)  315/     E6B : BD                          phi     RP1P2
(1)  315/     E6C : F8 00                       ldi     ((0)>>16)&255; 
(1)  315/     E6E : AC                          plo     RP1P2-1
(1)  315/     E6F : F8 00                       ldi     ((0)>>24)&255; 
(1)  315/     E71 : BC                          phi     RP1P2-1
(1)  316/     E72 : F8 20                   ldi 32
(1)  317/     E74 : AE                      plo memaddr		;cycle count
(1)  318/     E75 : FC 00                   adi 0		;clear df
(1)  319/     E77 :                     $$mloop:
(1)  320/     E77 : 89                      glo RL8
(1)  321/     E78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  322/     E7A : 3B 96                   bnf	$$check_sub	;
(1)  323/     E7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  324/     E7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  325/     E7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  325/     E7E : 22                          dec     sp ;make a work ares
(1)  325/     E7F : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  325/     E80 : 52                          str     sp      ;so arithmetic operations start there
(1)  325/     E81 : 8D                          glo     RP1P2
(1)  325/     E82 : F4                          ADD             ;calculate the low order byte
(1)  325/     E83 : AD                          plo     RP1P2
(1)  325/     E84 : 9B                          ghi     RL10
(1)  325/     E85 : 52                          str     sp
(1)  325/     E86 : 9D                          ghi     RP1P2
(1)  325/     E87 : 74                          ADC             ;calculate the second byte
(1)  325/     E88 : BD                          phi     RP1P2
(1)  325/     E89 : 8A                          glo     RL10-1
(1)  325/     E8A : 52                          str     sp
(1)  325/     E8B : 8C                          glo     RP1P2-1
(1)  325/     E8C : 74                          ADC             ;calculate the third byte
(1)  325/     E8D : AC                          plo     RP1P2-1
(1)  325/     E8E : 9A                          ghi     RL10-1
(1)  325/     E8F : 52                          str     sp
(1)  325/     E90 : 9C                          ghi     RP1P2-1
(1)  325/     E91 : 74                          ADC             ;calculate the high byte
(1)  325/     E92 : BC                          phi     RP1P2-1
(1)  325/     E93 : 12                          inc     sp      ;release the work area
(1)  326/     E94 : 30 AE                   br $$shift
(1)  327/     E96 :                     $$check_sub:
(1)  328/     E96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  329/     E98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  330/     E98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  330/     E98 : 22                          dec     sp ;make a work ares
(1)  330/     E99 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  330/     E9A : 52                          str     sp      ;so arithmetic operations start there
(1)  330/     E9B : 8D                          glo     RP1P2
(1)  330/     E9C : F7                          SM             ;calculate the low order byte
(1)  330/     E9D : AD                          plo     RP1P2
(1)  330/     E9E : 9B                          ghi     RL10
(1)  330/     E9F : 52                          str     sp
(1)  330/     EA0 : 9D                          ghi     RP1P2
(1)  330/     EA1 : 77                          SMB             ;calculate the second byte
(1)  330/     EA2 : BD                          phi     RP1P2
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 76 - 2/27/2013 14:03:17


(1)  330/     EA3 : 8A                          glo     RL10-1
(1)  330/     EA4 : 52                          str     sp
(1)  330/     EA5 : 8C                          glo     RP1P2-1
(1)  330/     EA6 : 77                          SMB             ;calculate the third byte
(1)  330/     EA7 : AC                          plo     RP1P2-1
(1)  330/     EA8 : 9A                          ghi     RL10-1
(1)  330/     EA9 : 52                          str     sp
(1)  330/     EAA : 9C                          ghi     RP1P2-1
(1)  330/     EAB : 77                          SMB             ;calculate the high byte
(1)  330/     EAC : BC                          phi     RP1P2-1
(1)  330/     EAD : 12                          inc     sp      ;release the work area
(1)  331/     EAE :                     $$shift:
(1)  332/     EAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  332/     EAE : 9C                          ghi     RP1P2-1   ;long RP1P2 pairs start at RP1P2-1
(1)  332/     EAF : FE                          shl             ;set DF to the sign
(1)  332/     EB0 : 9C                          ghi     RP1P2-1   ;get the top byte back
(1)  332/     EB1 : 76                          shrc            ;shift one bit extending the sign
(1)  332/     EB2 : BC                          phi     RP1P2-1
(1)  332/     EB3 : 8C                          glo     RP1P2-1
(1)  332/     EB4 : 76                          shrc
(1)  332/     EB5 : AC                          plo     RP1P2-1
(1)  332/     EB6 : 9D                          ghi     RP1P2     ;get the top byte of the low order RP1P2
(1)  332/     EB7 : 76                          shrc            ;shift one bit extending the sign
(1)  332/     EB8 : BD                          phi     RP1P2
(1)  332/     EB9 : 8D                          glo     RP1P2     ;finish with the low byte of the 2nd RP1P2 of the pair
(1)  332/     EBA : 76                          shrc
(1)  332/     EBB : AD                          plo     RP1P2
(1)  333/     EBC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  333/     EBC : 98                          ghi     RL8-1   ;long RL8 pairs start at RL8-1
(1)  333/     EBD : 76                          shrc            ;shift one bit extending the sign
(1)  333/     EBE : B8                          phi     RL8-1
(1)  333/     EBF : 88                          glo     RL8-1
(1)  333/     EC0 : 76                          shrc
(1)  333/     EC1 : A8                          plo     RL8-1
(1)  333/     EC2 : 99                          ghi     RL8     ;get the top byte of the low order RL8
(1)  333/     EC3 : 76                          shrc            ;shift one bit extending the sign
(1)  333/     EC4 : B9                          phi     RL8
(1)  333/     EC5 : 89                          glo     RL8     ;finish with the low byte of the 2nd RL8 of the pair
(1)  333/     EC6 : 76                          shrc
(1)  333/     EC7 : A9                          plo     RL8
(1)  334/     EC8 :                     
(1)  335/     EC8 : 2E                      dec memaddr		;cycle count
(1)  336/     EC9 : 8E                      glo memaddr
(1)  337/     ECA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  338/     ECC :                         
(1)  339/     ECC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  339/     ECC : D5                          sep     RRET
(1)  340/     ECD :                     
(1)  341/     ECD :                     	align 256
(1)  342/     F00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  343/     F00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  344/     F00 :                     _divI4:
(1)  345/     F00 : 22                      dec	sp	;leave a work area available
(1)  346/     F01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  347/     F02 : 52                      str sp	;save the sign of the 1st arg
(1)  348/     F03 : FE                      shl
(1)  349/     F04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  350/     F06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  350/     F06 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  350/     F06 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 77 - 2/27/2013 14:03:17


(1)  350/     F07 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  350/     F09 : A9                          plo     RL8
(1)  350/     F0A : 99                          ghi     RL8
(1)  350/     F0B : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  350/     F0D : B9                          phi     RL8
(1)  350/     F0E : 88                          glo     RL8-1
(1)  350/     F0F : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  350/     F11 : A8                          plo     RL8-1
(1)  350/     F12 : 98                          ghi     RL8-1
(1)  350/     F13 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  350/     F15 : B8                          phi     RL8-1
(1)  350/     F16 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  350/     F16 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  350/     F17 : FC 01                       ADI     (1)&255
(1)  350/     F19 : A9                          plo     RL8
(1)  350/     F1A : 99                          ghi     RL8
(1)  350/     F1B : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  350/     F1D : B9                          phi     RL8
(1)  350/     F1E : 88                          glo     RL8-1
(1)  350/     F1F : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  350/     F21 : A8                          plo     RL8-1
(1)  350/     F22 : 98                          ghi     RL8-1
(1)  350/     F23 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  350/     F25 : B8                          phi     RL8-1
(1)  351/     F26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  352/     F26 : 9A                      ghi RL10-1
(1)  353/     F27 : F3                      xor	
(1)  354/     F28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  355/     F29 : 9A                      ghi RL10-1
(1)  356/     F2A : FE                      shl
(1)  357/     F2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  358/     F2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  358/     F2D :  (MACRO-2)                  alu4I   RL10,RL10,0xffffffff,xri,xri      ;flip all the bits
(1)  358/     F2D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  358/     F2E : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  358/     F30 : AB                          plo     RL10
(1)  358/     F31 : 9B                          ghi     RL10
(1)  358/     F32 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  358/     F34 : BB                          phi     RL10
(1)  358/     F35 : 8A                          glo     RL10-1
(1)  358/     F36 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  358/     F38 : AA                          plo     RL10-1
(1)  358/     F39 : 9A                          ghi     RL10-1
(1)  358/     F3A : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  358/     F3C : BA                          phi     RL10-1
(1)  358/     F3D :  (MACRO-2)                  alu4i   RL10,RL10,1,adi,adci              ;and add 1
(1)  358/     F3D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  358/     F3E : FC 01                       ADI     (1)&255
(1)  358/     F40 : AB                          plo     RL10
(1)  358/     F41 : 9B                          ghi     RL10
(1)  358/     F42 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  358/     F44 : BB                          phi     RL10
(1)  358/     F45 : 8A                          glo     RL10-1
(1)  358/     F46 : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  358/     F48 : AA                          plo     RL10-1
(1)  358/     F49 : 9A                          ghi     RL10-1
(1)  358/     F4A : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  358/     F4C : BA                          phi     RL10-1
(1)  359/     F4D :                     $$pos2: ; both args now +v
(1)  360/     F4D : (MACRO)                 Ccall _divU4	;call unsigned division
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 78 - 2/27/2013 14:03:17


(1)  360/     F4D : D4                          sep     RCALL
(1)  360/     F4E : 0E 00                       dw      _DIVU4
(1)  361/     F50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  362/     F50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  363/     F51 : FE                      shl
(1)  364/     F52 : 3B 74                   bnf $$done ;if the signs were different
(1)  365/     F54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  365/     F54 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  365/     F54 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  365/     F55 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  365/     F57 : A9                          plo     RL8
(1)  365/     F58 : 99                          ghi     RL8
(1)  365/     F59 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  365/     F5B : B9                          phi     RL8
(1)  365/     F5C : 88                          glo     RL8-1
(1)  365/     F5D : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  365/     F5F : A8                          plo     RL8-1
(1)  365/     F60 : 98                          ghi     RL8-1
(1)  365/     F61 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  365/     F63 : B8                          phi     RL8-1
(1)  365/     F64 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  365/     F64 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  365/     F65 : FC 01                       ADI     (1)&255
(1)  365/     F67 : A9                          plo     RL8
(1)  365/     F68 : 99                          ghi     RL8
(1)  365/     F69 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  365/     F6B : B9                          phi     RL8
(1)  365/     F6C : 88                          glo     RL8-1
(1)  365/     F6D : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  365/     F6F : A8                          plo     RL8-1
(1)  365/     F70 : 98                          ghi     RL8-1
(1)  365/     F71 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  365/     F73 : B8                          phi     RL8-1
(1)  366/     F74 :                     $$done:
(1)  367/     F74 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  367/     F74 : D5                          sep     RRET
(1)  368/     F75 :                     
(1)  369/     F75 :                     _dubdabx:	
(1)  370/     F75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  371/     F75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  372/     F75 :                     ;long interger is passed in rp1p2
(1)  373/     F75 :                     ;buffer pointer is passed at sp+2+4
(1)  374/     F75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  375/     F75 :                     ;r8-11 are used as temps
(1)  376/     F75 :                     ;r8 is the working pointer
(1)  377/     F75 :                     ;r9.0 is bit count(32)
(1)  378/     F75 :                     ;r10.0 is digit count
(1)  379/     F75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  379/     F75 : =>TRUE                      if      ('O'='O')
(1)  379/     F75 :  (MACRO-2)                          ldAX    memAddr,SP,(2+4)
(1)  379/     F75 : 82                          glo     SP
(1)  379/     F76 : FC 06                       adi     ((2+4))#256
(1)  379/     F78 : AE                          plo     MEMADDR
(1)  379/     F79 : 92                          ghi     SP
(1)  379/     F7A : 7C 00                       adci    ((2+4))>>8; was/256
(1)  379/     F7C : BE                          phi     MEMADDR
(1)  379/     F7D : =>FALSE                     else
(1)  379/     F7D :                                     ldAD    memAddr,SP
(1)  379/     F7D : [379]                       endif
(1)  379/     F7D : 4E                          lda     memAddr
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 79 - 2/27/2013 14:03:17


(1)  379/     F7E : B8                          phi     R8
(1)  379/     F7F : 0E                          ldn     memAddr
(1)  379/     F80 : A8                          plo     R8
(1)  380/     F81 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  380/     F81 : 88                          glo     R8
(1)  380/     F82 : AF                          plo     R15
(1)  380/     F83 : 98                          ghi     R8
(1)  380/     F84 : BF                          phi     R15
(1)  381/     F85 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  382/     F87 : A9                  	plo r9
(1)  383/     F88 :                     $$clrlp:	;clear the passed buffer
(1)  384/     F88 : F8 00               	ldi 0	
(1)  385/     F8A : 58                  	str r8	;clear a byte
(1)  386/     F8B : 18                  	inc r8
(1)  387/     F8C : 29                  	dec r9
(1)  388/     F8D : 89                  	glo r9	;check the count
(1)  389/     F8E : 3A 88               	bnz $$clrlp ;back for more
(1)  390/     F90 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  390/     F90 : 8F                          glo     R15
(1)  390/     F91 : A8                          plo     R8
(1)  390/     F92 : 9F                          ghi     R15
(1)  390/     F93 : B8                          phi     R8
(1)  391/     F94 :                     
(1)  392/     F94 : F8 20               	ldi 32	;bit count
(1)  393/     F96 : AF                  	plo r15
(1)  394/     F97 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  395/     F97 :                     $$cktop:
(1)  396/     F97 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  397/     F98 : FE                  	shl		;check for a 1
(1)  398/     F99 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  399/     F9B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  399/     F9B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  399/     F9C : FE                          shl             ;shift left once
(1)  399/     F9D : AD                          plo     RP1P2     ; save it
(1)  399/     F9E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  399/     F9F : 7E                          shlc            ;shift one bit carrying
(1)  399/     FA0 : BD                          phi     RP1P2     ;save it
(1)  399/     FA1 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  399/     FA2 : 7E                          shlc
(1)  399/     FA3 : AC                          plo     RP1P2-1
(1)  399/     FA4 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  399/     FA5 : 7E                          shlc            ;gets the last shift
(1)  399/     FA6 : BC                          phi     RP1P2-1   ;and we're done
(1)  400/     FA7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  401/     FA8 : 8F                  	glo r15
(1)  402/     FA9 : 3A 97               	bnz $$cktop	;
(1)  403/     FAB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  404/     FAC :                     $$bitloop:
(1)  405/     FAC : F8 0A               	ldi 10	;digit count
(1)  406/     FAE : A9                  	plo r9
(1)  407/     FAF :                     $$dcklp:
(1)  408/     FAF : 08                  	ldn r8 	;pick up a digit
(1)  409/     FB0 : FF 05               	smi 5	;see if it's greater than 4
(1)  410/     FB2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  411/     FB4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  412/     FB6 : 58                  	str r8	;put it back
(1)  413/     FB7 :                     $$dnoadd:
(1)  414/     FB7 : 18                  	inc r8
(1)  415/     FB8 : 29                  	dec r9	;decrement digit count
(1)  416/     FB9 : 89                  	glo r9
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 80 - 2/27/2013 14:03:17


(1)  417/     FBA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  418/     FBC :                     	
(1)  419/     FBC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  419/     FBC : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  419/     FBD : FE                          shl             ;shift left once
(1)  419/     FBE : AD                          plo     RP1P2     ; save it
(1)  419/     FBF : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  419/     FC0 : 7E                          shlc            ;shift one bit carrying
(1)  419/     FC1 : BD                          phi     RP1P2     ;save it
(1)  419/     FC2 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  419/     FC3 : 7E                          shlc
(1)  419/     FC4 : AC                          plo     RP1P2-1
(1)  419/     FC5 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  419/     FC6 : 7E                          shlc            ;gets the last shift
(1)  419/     FC7 : BC                          phi     RP1P2-1   ;and we're done
(1)  420/     FC8 :                     	
(1)  421/     FC8 : F8 0A               	ldi 10	;load the digit count again
(1)  422/     FCA : A9                  	plo r9
(1)  423/     FCB :                     ;r8 is now just past the units location and ready to walk back
(1)  424/     FCB :                     $$dshlp:
(1)  425/     FCB : 28                  	dec r8	;walk back from 0's position
(1)  426/     FCC : 08                  	ldn r8	;get the digit back
(1)  427/     FCD : 7E                  	shlc	;continue the shift
(1)  428/     FCE : BF                  	phi r15 ;save it for the carry test
(1)  429/     FCF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  430/     FD1 : 58                  	str r8	;put the digit back
(1)  431/     FD2 : 9F                  	ghi r15	;now test for carry
(1)  432/     FD3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  433/     FD5 : 29                  	dec r9	;decrement the digit count
(1)  434/     FD6 : 89                  	glo r9
(1)  435/     FD7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  436/     FD9 :                     	
(1)  437/     FD9 : 2F                  	dec r15
(1)  438/     FDA : 8F                  	glo r15
(1)  439/     FDB : 3A AC               	bnz $$bitloop
(1)  440/     FDD :                     	
(1)  441/     FDD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  441/     FDD : 88                          glo     R8
(1)  441/     FDE : AF                          plo     R15
(1)  441/     FDF : 98                          ghi     R8
(1)  441/     FE0 : BF                          phi     R15
(1)  442/     FE1 : F8 0A               	ldi 10		;digit count again
(1)  443/     FE3 : A9                  	plo r9
(1)  444/     FE4 :                     $$upnxt:
(1)  445/     FE4 : 08                  	ldn r8		;get digit
(1)  446/     FE5 : F9 30               	ori 0x30	;make ascii
(1)  447/     FE7 : 58                  	str r8		;put it back
(1)  448/     FE8 : 18                  	inc r8		;next digit
(1)  449/     FE9 : 29                  	dec r9		;counter
(1)  450/     FEA : 89                  	glo r9
(1)  451/     FEB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  452/     FED :                     	
(1)  453/     FED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  454/     FEF : A9                  	plo r9
(1)  455/     FF0 :                     $$cknext:
(1)  456/     FF0 : 0F                  	ldn r15		;check digit
(1)  457/     FF1 : FF 30               	smi 0x30	;for '0'
(1)  458/     FF3 : 3A FA               	bnz $$done
(1)  459/     FF5 : 1F                  	inc r15		;next digit
(1)  460/     FF6 : 29                  	dec r9		;reduce count
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(lcc1802EpiloNG.inc) - page 81 - 2/27/2013 14:03:17


(1)  461/     FF7 : 89                  	glo r9
(1)  462/     FF8 : 3A F0               	bnz $$cknext
(1)  463/     FFA :                     $$done:
(1)  464/     FFA : (MACRO)             	cretn
(1)  464/     FFA : D5                          sep     RRET
(1)  465/     FFB :                     	
(1)  466/     FFB :                     	
(1)  467/     FFB :                     _modU4:	;32 bit unsigned remainder
(1)  468/     FFB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  469/     FFB : (MACRO)                 Ccall _divU4
(1)  469/     FFB : D4                          sep     RCALL
(1)  469/     FFC : 0E 00                       dw      _DIVU4
(1)  470/     FFE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  470/     FFE :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  470/     FFE : 8D                          glo     RP1P2
(1)  470/     FFF : A9                          plo     RL8
(1)  470/    1000 : 9D                          ghi     RP1P2
(1)  470/    1001 : B9                          phi     RL8
(1)  470/    1002 :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  470/    1002 : 8C                          glo     RP1P2-1
(1)  470/    1003 : A8                          plo     RL8-1
(1)  470/    1004 : 9C                          ghi     RP1P2-1
(1)  470/    1005 : B8                          phi     RL8-1
(1)  471/    1006 : (MACRO)                 Cretn
(1)  471/    1006 : D5                          sep     RRET
(1)  472/    1007 :                         
(1)  473/    1007 :                     _modI4:	;32 bit signed remainder
(1)  474/    1007 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  475/    1007 : (MACRO)                 Ccall _divI4
(1)  475/    1007 : D4                          sep     RCALL
(1)  475/    1008 : 0F 00                       dw      _DIVI4
(1)  476/    100A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  476/    100A :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  476/    100A : 8D                          glo     RP1P2
(1)  476/    100B : A9                          plo     RL8
(1)  476/    100C : 9D                          ghi     RP1P2
(1)  476/    100D : B9                          phi     RL8
(1)  476/    100E :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  476/    100E : 8C                          glo     RP1P2-1
(1)  476/    100F : A8                          plo     RL8-1
(1)  476/    1010 : 9C                          ghi     RP1P2-1
(1)  476/    1011 : B8                          phi     RL8-1
(1)  477/    1012 : (MACRO)                 Cretn
(1)  477/    1012 : D5                          sep     RRET
(1)  478/    1013 :                         
(1)  479/    1013 :                     	
(1)  480/    1013 :                      
     690/    1013 :                     	include IO1802.inc
(1)    1/    1013 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1013 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1013 :                     	align 64
(1)    4/    1040 :                     _putc:
(1)    5/    1040 :                     _out5:	
(1)    6/    1040 : 8C                  	glo	regArg1
(1)    7/    1041 : 22                  	dec	sp
(1)    8/    1042 : 52                  	str	sp
(1)    9/    1043 : 65                  	out	5
(1)   10/    1044 : (MACRO)             	Cretn
(1)   10/    1044 : D5                          sep     RRET
(1)   11/    1045 :                     _inp:		;raw port input
 AS V1.42 Beta [Bld 86] - source file helloworld.asm(IO1802.inc) - page 82 - 2/27/2013 14:03:17


(1)   12/    1045 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    1045 : 22                  	dec	sp	;work backwards
(1)   14/    1046 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    1048 : 73                  	stxd		
(1)   16/    1049 : 8C                  	glo	regarg1	;get the port number
(1)   17/    104A : FA 07               	ani	0x07	;clean it
(1)   18/    104C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    104E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    1050 : 73                  	stxd		;store it for execution
(1)   21/    1051 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   21/    1051 : 82                          glo     SP
(1)   21/    1052 : A8                          plo     RT1
(1)   21/    1053 : 92                          ghi     SP
(1)   21/    1054 : B8                          phi     RT1
(1)   22/    1055 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    1056 : D8                  	sep	rt1	;execute it
(1)   24/    1057 :                     ;we will come back to here with the input byte in D
(1)   25/    1057 : 12                  	inc	sp	;step over the work area
(1)   26/    1058 : AF                  	plo	retVal	;save it to return
(1)   27/    1059 : F8 00               	ldi	0
(1)   28/    105B : BF                  	phi	retval	;clear top byte
(1)   29/    105C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    105D : 12                  	inc	sp	;and the D3
(1)   31/    105E : (MACRO)             	Cretn		;and we're done
(1)   31/    105E : D5                          sep     RRET
(1)   32/    105F :                     	
(1)   33/    105F :                     _out:		;raw port output
(1)   34/    105F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    105F : 22                  	dec	sp	;work backwards
(1)   36/    1060 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    1062 : 73                  	stxd		
(1)   38/    1063 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   38/    1063 : 82                          glo     SP
(1)   38/    1064 : A8                          plo     RT1
(1)   38/    1065 : 92                          ghi     SP
(1)   38/    1066 : B8                          phi     RT1
(1)   39/    1067 : 8C                  	glo	regarg1	;get the port number
(1)   40/    1068 : FA 07               	ani	0x07	;clean it
(1)   41/    106A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    106C : 73                  	stxd		;store it for execution
(1)   43/    106D : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    106E : 52                  	str	sp	;store it where sp points
(1)   45/    106F : D8                  	sep	rt1	;execute it
(1)   46/    1070 :                     ;we will come back to here with sp stepped up by one
(1)   47/    1070 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    1071 : 12                  	inc	sp	;and the D3
(1)   49/    1072 : (MACRO)             	Cretn		;and we're done
(1)   49/    1072 : D5                          sep     RRET
(1)   50/    1073 :                     	
(1)   51/    1073 :                     	
     691/    1073 :                     
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 83 - 2/27/2013 14:03:17


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP129 :                   FAC C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB127 :                 E96 C |
 CKNEXT129 :                    FF0 C |  CKTOP129 :                     F97 C |
 CLRLP129 :                     F88 C | *CONSTPI :        3.141592653589793 - |
*DATE :                   2/27/2013 - |  DCKLP129 :                     FAF C |
 DIVLOOP16_16124 :              D52 C | *DIVSETBIT16_16124 :            D84 C |
 DIVSKIP16_16124 :              D81 C |  DIVSKIPCLEAR16_16124 :         D88 C |
 DIVSKIPFINALADD16_16124 :      D9A C |  DIVSUB16_16124 :               D73 C |
 DNOADD129 :                    FB7 C |  DONE125 :                      DD3 C |
 DONE128 :                      F74 C |  DONE129 :                      FFA C |
 DSHLP129 :                     FCB C |  ENDLP126 :                     E61 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *L1 :                            16 C |
 L10 :                           D2 C | *L12 :                          2E7 C |
 L13 :                          1DA C |  L14 :                          1EA C |
 L15 :                          1F3 C |  L16 :                          2B7 C |
 L18 :                          1FA C | *L19 :                          1FA C |
 L2 :                           CAE C |  L21 :                          207 C |
 L22 :                          2A6 C |  L25 :                          254 C |
*L26 :                          3CF C |  L27 :                          39C C |
*L29 :                          425 C | *L3 :                            88 C |
*L30 :                          485 C | *L31 :                          51E C |
 L32 :                          4F9 C |  L33 :                          51E C |
*L34 :                          5A6 C | *L35 :                          A44 C |
 L36 :                          60A C |  L37 :                          A1F C |
 L39 :                          651 C |  L4 :                            39 C |
 L40 :                          A1F C |  L41 :                          A0E C |
 L42 :                          A1F C |  L44 :                          784 C |
 L45 :                          7AA C |  L46 :                          7D4 C |
 L47 :                          7FF C |  L48 :                          876 C |
 L49 :                          A0E C | *L5 :                            39 C |
 L51 :                          8F4 C |  L53 :                          92B C |
 L54 :                          A03 C | *L55 :                          6D2 C |
 L56 :                          731 C | *L57 :                          70A C |
*L58 :                          769 C | *L59 :                          A90 C |
 L60 :                          CA5 C |  L61 :                          A8D C |
*L62 :                          A8D C | *L64 :                          B68 C |
 L65 :                          ADF C |  L66 :                          B40 C |
 L68 :                          B64 C | *L69 :                          C0E C |
 L7 :                            57 C |  L70 :                          BBC C |
 L71 :                          BF6 C | *L73 :                          C8C C |
 L74 :                          C5A C |  L75 :                          C74 C |
*L8 :                            EB C |  L9 :                            B0 C |
 LCC1802INIT :                  CBC C | *LISTON :                         1 - |
 LOOP126 :                      E0F C | *MACEXP :                         1 - |
 MEMADDR :                        E - |  MLOOP127 :                     E77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP122 :                      D1E C |  MULTLOOP16_16123 :             D2B C |
 MULTSKIP16_16123 :             D3D C | *NESTMAX :                      100 - |
 NORESTORE126 :                 E5D C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS1125 :                      DB3 C |
 POS1128 :                      F26 C |  POS2125 :                      DC3 C |
 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 84 - 2/27/2013 14:03:17


 POS2128 :                      F4D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - | *R14 :                            E - |
 R15 :                            F - | *R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - |  RL0 :                            1 - |
 RL10 :                           B - |  RL12 :                           D - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SHIFT127 :                     EAE C |
 SP :                             2 - | *TIME :                    14:03:17 - |
*TRUE :                           1 - |  UPNXT129 :                     FE4 C |
*VERSION :                     142F - |  _00000114 :                    CD6 C |
 _CALL :                        D01 C |  _DIE114 :                      CD9 C |
 _DIVI2 :                       DA4 C |  _DIVI4 :                       F00 C |
 _DIVU2 :                       D49 C |  _DIVU4 :                       E00 C |
 _DUBDABX :                     F75 C | *_EXIT :                        A61 C |
*_INP :                        1045 C |  _ITOA :                        100 C |
 _LTOA :                        304 C |  _MAIN :                          3 C |
*_MEMCMP :                      A99 C | *_MEMCPY :                      B85 C |
*_MEMSET :                      C2B C | *_MODI2 :                       CEA C |
*_MODI4 :                      1007 C | *_MODU2 :                       CE2 C |
*_MODU4 :                       FFB C | *_MULU2 :                       D23 C |
*_MULU4 :                       E66 C | *_ONEMS :                       D1C C |
 _OUT :                        105F C | *_OUT4 :                        CF2 C |
*_OUT5 :                       1040 C |  _PRINTF :                      5AF C |
 _PRINTINT :                    3EC C |  _PRINTLINT :                   42E C |
 _PRINTSTR :                     91 C |  _PUTC :                       1040 C |
 _PUTX :                        527 C |  _PUTXN :                       48E C |
 _RETURN :                      D12 C | *_SETQOFF :                     CE0 C |
*_SETQON :                      CDE C |  _STRCPY :                       1F C |
 __FORW0 :                     105C C | *__FORW1 :                     1070 C |

    192 symbols
     72 unused symbols

 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 85 - 2/27/2013 14:03:17


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
INC4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RESERVE                               | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
ZEXT                                  | ZEXT4                                

     70 macros

 AS V1.42 Beta [Bld 86] - source file helloworld.asm - page 86 - 2/27/2013 14:03:17


  codepages:
  ----------

STANDARD (0 changed characters)


0.08 seconds assembly time

   1981 lines source file
   5669 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
