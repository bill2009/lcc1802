; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Sat Feb 16 16:48:00 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloNG.inc
	listing on
_videobuffer:
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
	db 0
	db 1
	db 2
	db 3
	db 4
	db 5
	db 6
	db 7
	db 8
	db 9
	db 10
	db 11
	db 12
	db 13
	db 14
	db 15
_main:
	reserve 8
	alu2I memaddr,sp,(5),adi,adci
	sex	memaddr
	savmi r7
	sex sp
;void main(){
;	asm("	ldAD R1,__INTS  ;.. R1 = INTERRUPT PC\n");
;	asm("	dec	sp	;inp will clobber rx% \n"
	ldAD R1,__INTS  ;.. R1 = INTERRUPT PC
	dec	sp	;inp will clobber rx% 
	INP 1  ;video on
	inc sp
	lbr L5
L4:
;	while(1){
;		videobuffer[time[1]*8]^=255;
	ld1 R11,'D',(_time+1),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,3
	ldA2 R11,'O',R11,(_videobuffer); reg:addr
	ld1 R10,'O',R11,0
	zExt 10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,255,xri,xri ;removed copy
	st1 R10,'O',R11,0; ASGNU1
;		secs=time[1];
	ld1 R11,'D',(_time+1),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R7,R11
;		if (secs!=oldsecs){
	ld2 R11,'O',sp,(-4+10); INDIRU2(addr)
	jeqI2 r7,r11,L9
;			oldsecs=secs;
	st2 R7,'O',sp,(-4+10); ASGNU2(addr,reg)
;			out4(secs);
	cpy2 R12,R7
	Ccall _out4
;		}
L9:
;	}
L5:
;	while(1){
	lbr L4
;}
L1:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	release 8
	Cretn

_INT:
;void INT(){	//video interrupt routine
;	asm("	align 64\n"
	align 64
INTX: SEX  2
	LDA  2         ; recover carry
	SHL
	LDA  2         ; recover A
	RET             ; < exit
__INTS: NOP             ; > entry
	DEC  2
	SAV             ; save T
	DEC  2
	STXD           	; save A
	SHRC            ; move carry to D 
	STR  2			; save carry
	ldAD R0,_videobuffer;	point to the video buffer
	pushr R15
	ldaD R15,_time
	ldn	R15
	adi 1
	str R15
	smi 61	;each 61 cycles is a second
	bnz +
	str R15
	inc R15
	ldn R15
	adi 1;increment the seconds counter
	str R15
+	popr R15
	br   intx
;}
L11:
	Cretn

_time:
	ds 2
	include lcc1802EpiloNG.inc
	include putc.inc
