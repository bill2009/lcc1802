; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Sat Feb 23 07:47:13 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloNG.inc
	listing on
_PIN4:
	db 0
_turnqoff:
;void turnqoff(){
;	asm("	req\n");
	req
;}
L1:
	Cretn

_main:
	reserve 4
;{
;	printstr("hello World!\n");
	ldaD R12,L4
	Ccall _printstr
	lbr L6
L5:
;	while(1){
;		asm("	seq\n");
;		delay(100);
	seq
	ldaD R12,100
	Ccall _delay
;		turnqoff();
	Ccall _turnqoff
;		delay(100);
	ldaD R12,100
	Ccall _delay
;	}
L6:
;	while(1){
	lbr L5
;}
L3:
	release 4
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L13
L10:
L11:
	ldaD R11,1
	alu2 R13,R13,R11,add,adc
	alu2 R12,R12,R11,add,adc
L13:
	ld1 R11,'O',R13,0
	st1 R11,'O',R12,0; ASGNU1
	cpy1 R11,R11
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L10; NE
;	return(save);
	ld2 R15,'O',sp,(-4+4)
L9:
	release 2
	Cretn

_printstr:
	reserve 6
	alu2I memaddr,sp,(5),adi,adci
	sex	memaddr
	savmi r7
	sex sp
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L16
L15:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5
	cpy2 R11,R7
	ldA2 R7,'O',R11,(1); reg:addr
	ld1 R13,'O',R11,0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L16:
	ld1 R11,'O',R7,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L15; NE
;}
L14:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	release 6
	Cretn

_itoa:
	reserve 14
	alu2I memaddr,sp,(9),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16)
	jcI2I r11,0,lbdf,L19; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldaD R10,45
	st1 R10,'O',R11,0; ASGNU1
	ld2 R11,'O',sp,(-6+16)
	ldA2 R11,'O',R11,(1); reg:addr
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11
;	} else{
	lbr L20
L19:
;		n=s;
	ld2 R11,'O',sp,(0+16)
	cpy2 R1,R11
;	}
L20:
;	k=10000;
	ldaD R7,10000
	lbr L22
L21:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R0
	lbr L27
L24:
L25:
	inc R0
	alu2 R1,R1,R7,sm,smb
L27:
	jcU2 r1,r7,lbdf,L24 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ld2z R11
	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
	jneU2 r10,r11,L31; NE
	jneU2 r0,r11,L31; NE
	jneU2I r7,1,L28; NE
L31:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldA2 R10,'O',R0,(48); reg:addr
	st1 R10,'O',R11,0; ASGNU1
	ld2 R11,'O',sp,(-6+16)
	ldA2 R11,'O',R11,(1); reg:addr
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldaD R11,121
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;		}
L28:
;		k=k/10;
	cpy2 R12,R7
	ldaD R13,10
	Ccall _divu2
	cpy2 R7,R15
;	}
L22:
;	while(k>0){
	jnzU2 r7,L21; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16)
	ldaD R10,0
	st1 R10,'O',R11,0; ASGNU1
;	return buffer;
	ld2 R15,'O',sp,(2+16)
L18:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	release 14
	Cretn

_ltoa:
	reserve 12
	alu2I memaddr,sp,(11),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+14)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L33; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7
	ldA2 R7,'O',R11,(1); reg:addr
	ldaD R10,45
	st1 R10,'O',R11,0; ASGNU1
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L33:
;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15
	cpy2 R12,R7
	cpy2 R13,R11
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+14)
L32:
	alu2I memaddr,sp,(6),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	release 12
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L35:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15
	cpy2 R12,R11
	Ccall _printstr
;}
L36:
	release 18
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L38; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;	} else {
	lbr L39
L38:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;	}
L39:
;}
L37:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putxn
;}
L40:
	release 4
	Cretn

_printf:
	reserve 14
	alu2I memaddr,sp,(9),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ldaD R0,0
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	ldA2 R1,'O',R1,(2); reg:addr
	ldA2 R0,'O',R0,(1); reg:addr
	lbr L43
L42:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R7,'O',R11,0
;		if (c!='%'){
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,37,L45
;			putc(c);
	cpy1 R12,R7
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;		} else{
	lbr L46
L45:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R7,'O',R11,0
;			switch (c){
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 R11,'O',sp,(-5+16)
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,105,L50
	ldaD R10,108
	jeqI2 r11,r10,L54
	jcI2 r10,r11,lbnf,L62 ;GT is reversed operands from LT
L61:
	ld2 R11,'O',sp,(-5+16)
	ldaD R10,88
	jeqI2 r11,r10,L53
	jcI2 r11,r10,lbnf,L47; LT=lbnf i.e. subtract B from A and jump if borrow 
L63:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,99,L52
	jeqU2I r11,100,L50
	lbr L47
L62:
	ld2 R11,'O',sp,(-5+16)
	ldaD R10,115
	jeqI2 r11,r10,L51
	jcI2 r11,r10,lbnf,L47; LT=lbnf i.e. subtract B from A and jump if borrow 
L64:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,120,L53
	lbr L47
L50:
;					printint(*this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R12,'O',R11,0
	Ccall _printint
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L48
L51:
;					printstr((char*) *this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	cpy2 R12,R11
	Ccall _printstr
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L48
L52:
;					putc((unsigned int) *this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L48
L53:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L48
L54:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,0,L55
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R11,'O',R11,0
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jeqU2I r11,0,L57
;							this++;
	ldA2 R1,'O',R1,(2); reg:addr
;							argslot++;
	ldA2 R0,'O',R0,(1); reg:addr
;						}
L57:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L59; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	ldA2 R1,'O',R1,(4); reg:addr
;						} else{
	lbr L60
L59:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;						}
L60:
;						argslot+=2;
	ldA2 R0,'O',R0,(2); reg:addr
;						break;
	lbr L48
L55:
L47:
;					putc('%');putc(c);
	ldaD R12,37
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;			} //switch
L48:
;		} //%
L46:
;	} //while
L43:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L42; NE
;} //prtf
L41:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	release 14
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L66
	ld2 R13,'O',sp,(0+6)
	Ccall _printf
L67:
;	while(1);
L68:
	lbr L67
;}
L65:
	release 4
	Cretn

_delay:
	reserve 8
	alu2I memaddr,sp,(7),adi,adci
	sex	memaddr
	savmi r1
	savmi r7
	sex sp
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R1,1
	lbr L74
L71:
;		oneMs();
	Ccall _oneMs
;	}
L72:
;	for (i=1;i!=howlong;i++){
	inc R1
L74:
	jneU2 r1,r7,L71; NE
;}
L70:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	release 8
	Cretn

_digitalWrite:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
	ld2 R11,'O',sp,(2+6)
	st1 R11,'O',sp,(2+6); ASGNU1
;void digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
;    if (LOW==hilo){ //turn it off
	ld1 R11,'O',sp,(2+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L76; NE
;        PIN4= PIN4 & ~ (1<<n); //with AND
	ld1 R11,'D',(_PIN4),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R10,1
	ld1 R9,'O',sp,(0+6)
	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2R R10,R9; lshi2(r,r)
	alu2I R10,R10,-1,xri,xri; was?	cpy2 R10,R10+xor2I R10,-1
	alu2 R11,R11,R10,and,and
	st1 R11,'D',(_PIN4),0; ASGNU1
;    } else { //turn it on
	lbr L77
L76:
;        PIN4=PIN4|(1<<n); //with OR
	ld1 R11,'D',(_PIN4),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldaD R10,1
	ld1 R9,'O',sp,(0+6)
	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2R R10,R9; lshi2(r,r)
	alu2 R11,R11,R10,or,or
	st1 R11,'D',(_PIN4),0; ASGNU1
;    }
L77:
;    OUT4(PIN4); //
	ld1 R12,'D',(_PIN4),0
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _OUT4
;}
L75:
	release 4
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L78:
	Cretn

L66:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
L4:
	db 104
	db 101
	db 108
	db 108
	db 111
	db 32
	db 87
	db 111
	db 114
	db 108
	db 100
	db 33
	db 10
	db 0
	include lcc1802EpiloNG.inc
	include IO1802.inc
