 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 1 - 2/16/2013 16:48:08


       1/       0 :                     ; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Sat Feb 16 16:48:00 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  757/       0 :                     	listing	on
(1)  758/       0 : C0 03 34            	lbr	lcc1802Init
(1)  759/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _videobuffer:
      13/       3 : 00                  	db 0
      14/       4 : 01                  	db 1
      15/       5 : 02                  	db 2
      16/       6 : 03                  	db 3
      17/       7 : 04                  	db 4
      18/       8 : 05                  	db 5
      19/       9 : 06                  	db 6
      20/       A : 07                  	db 7
      21/       B : 08                  	db 8
      22/       C : 09                  	db 9
      23/       D : 0A                  	db 10
      24/       E : 0B                  	db 11
      25/       F : 0C                  	db 12
      26/      10 : 0D                  	db 13
      27/      11 : 0E                  	db 14
      28/      12 : 0F                  	db 15
      29/      13 : 00                  	db 0
      30/      14 : 01                  	db 1
      31/      15 : 02                  	db 2
      32/      16 : 03                  	db 3
      33/      17 : 04                  	db 4
      34/      18 : 05                  	db 5
      35/      19 : 06                  	db 6
      36/      1A : 07                  	db 7
      37/      1B : 08                  	db 8
      38/      1C : 09                  	db 9
      39/      1D : 0A                  	db 10
      40/      1E : 0B                  	db 11
      41/      1F : 0C                  	db 12
      42/      20 : 0D                  	db 13
      43/      21 : 0E                  	db 14
      44/      22 : 0F                  	db 15
      45/      23 : 00                  	db 0
      46/      24 : 01                  	db 1
      47/      25 : 02                  	db 2
      48/      26 : 03                  	db 3
      49/      27 : 04                  	db 4
      50/      28 : 05                  	db 5
      51/      29 : 06                  	db 6
      52/      2A : 07                  	db 7
      53/      2B : 08                  	db 8
      54/      2C : 09                  	db 9
      55/      2D : 0A                  	db 10
      56/      2E : 0B                  	db 11
      57/      2F : 0C                  	db 12
      58/      30 : 0D                  	db 13
      59/      31 : 0E                  	db 14
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 2 - 2/16/2013 16:48:08


      60/      32 : 0F                  	db 15
      61/      33 : 00                  	db 0
      62/      34 : 01                  	db 1
      63/      35 : 02                  	db 2
      64/      36 : 03                  	db 3
      65/      37 : 04                  	db 4
      66/      38 : 05                  	db 5
      67/      39 : 06                  	db 6
      68/      3A : 07                  	db 7
      69/      3B : 08                  	db 8
      70/      3C : 09                  	db 9
      71/      3D : 0A                  	db 10
      72/      3E : 0B                  	db 11
      73/      3F : 0C                  	db 12
      74/      40 : 0D                  	db 13
      75/      41 : 0E                  	db 14
      76/      42 : 0F                  	db 15
      77/      43 : 00                  	db 0
      78/      44 : 01                  	db 1
      79/      45 : 02                  	db 2
      80/      46 : 03                  	db 3
      81/      47 : 04                  	db 4
      82/      48 : 05                  	db 5
      83/      49 : 06                  	db 6
      84/      4A : 07                  	db 7
      85/      4B : 08                  	db 8
      86/      4C : 09                  	db 9
      87/      4D : 0A                  	db 10
      88/      4E : 0B                  	db 11
      89/      4F : 0C                  	db 12
      90/      50 : 0D                  	db 13
      91/      51 : 0E                  	db 14
      92/      52 : 0F                  	db 15
      93/      53 : 00                  	db 0
      94/      54 : 01                  	db 1
      95/      55 : 02                  	db 2
      96/      56 : 03                  	db 3
      97/      57 : 04                  	db 4
      98/      58 : 05                  	db 5
      99/      59 : 06                  	db 6
     100/      5A : 07                  	db 7
     101/      5B : 08                  	db 8
     102/      5C : 09                  	db 9
     103/      5D : 0A                  	db 10
     104/      5E : 0B                  	db 11
     105/      5F : 0C                  	db 12
     106/      60 : 0D                  	db 13
     107/      61 : 0E                  	db 14
     108/      62 : 0F                  	db 15
     109/      63 : 00                  	db 0
     110/      64 : 01                  	db 1
     111/      65 : 02                  	db 2
     112/      66 : 03                  	db 3
     113/      67 : 04                  	db 4
     114/      68 : 05                  	db 5
     115/      69 : 06                  	db 6
     116/      6A : 07                  	db 7
     117/      6B : 08                  	db 8
     118/      6C : 09                  	db 9
     119/      6D : 0A                  	db 10
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 3 - 2/16/2013 16:48:08


     120/      6E : 0B                  	db 11
     121/      6F : 0C                  	db 12
     122/      70 : 0D                  	db 13
     123/      71 : 0E                  	db 14
     124/      72 : 0F                  	db 15
     125/      73 : 00                  	db 0
     126/      74 : 01                  	db 1
     127/      75 : 02                  	db 2
     128/      76 : 03                  	db 3
     129/      77 : 04                  	db 4
     130/      78 : 05                  	db 5
     131/      79 : 06                  	db 6
     132/      7A : 07                  	db 7
     133/      7B : 08                  	db 8
     134/      7C : 09                  	db 9
     135/      7D : 0A                  	db 10
     136/      7E : 0B                  	db 11
     137/      7F : 0C                  	db 12
     138/      80 : 0D                  	db 13
     139/      81 : 0E                  	db 14
     140/      82 : 0F                  	db 15
     141/      83 : 00                  	db 0
     142/      84 : 01                  	db 1
     143/      85 : 02                  	db 2
     144/      86 : 03                  	db 3
     145/      87 : 04                  	db 4
     146/      88 : 05                  	db 5
     147/      89 : 06                  	db 6
     148/      8A : 07                  	db 7
     149/      8B : 08                  	db 8
     150/      8C : 09                  	db 9
     151/      8D : 0A                  	db 10
     152/      8E : 0B                  	db 11
     153/      8F : 0C                  	db 12
     154/      90 : 0D                  	db 13
     155/      91 : 0E                  	db 14
     156/      92 : 0F                  	db 15
     157/      93 : 00                  	db 0
     158/      94 : 01                  	db 1
     159/      95 : 02                  	db 2
     160/      96 : 03                  	db 3
     161/      97 : 04                  	db 4
     162/      98 : 05                  	db 5
     163/      99 : 06                  	db 6
     164/      9A : 07                  	db 7
     165/      9B : 08                  	db 8
     166/      9C : 09                  	db 9
     167/      9D : 0A                  	db 10
     168/      9E : 0B                  	db 11
     169/      9F : 0C                  	db 12
     170/      A0 : 0D                  	db 13
     171/      A1 : 0E                  	db 14
     172/      A2 : 0F                  	db 15
     173/      A3 : 00                  	db 0
     174/      A4 : 01                  	db 1
     175/      A5 : 02                  	db 2
     176/      A6 : 03                  	db 3
     177/      A7 : 04                  	db 4
     178/      A8 : 05                  	db 5
     179/      A9 : 06                  	db 6
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 4 - 2/16/2013 16:48:08


     180/      AA : 07                  	db 7
     181/      AB : 08                  	db 8
     182/      AC : 09                  	db 9
     183/      AD : 0A                  	db 10
     184/      AE : 0B                  	db 11
     185/      AF : 0C                  	db 12
     186/      B0 : 0D                  	db 13
     187/      B1 : 0E                  	db 14
     188/      B2 : 0F                  	db 15
     189/      B3 : 00                  	db 0
     190/      B4 : 01                  	db 1
     191/      B5 : 02                  	db 2
     192/      B6 : 03                  	db 3
     193/      B7 : 04                  	db 4
     194/      B8 : 05                  	db 5
     195/      B9 : 06                  	db 6
     196/      BA : 07                  	db 7
     197/      BB : 08                  	db 8
     198/      BC : 09                  	db 9
     199/      BD : 0A                  	db 10
     200/      BE : 0B                  	db 11
     201/      BF : 0C                  	db 12
     202/      C0 : 0D                  	db 13
     203/      C1 : 0E                  	db 14
     204/      C2 : 0F                  	db 15
     205/      C3 : 00                  	db 0
     206/      C4 : 01                  	db 1
     207/      C5 : 02                  	db 2
     208/      C6 : 03                  	db 3
     209/      C7 : 04                  	db 4
     210/      C8 : 05                  	db 5
     211/      C9 : 06                  	db 6
     212/      CA : 07                  	db 7
     213/      CB : 08                  	db 8
     214/      CC : 09                  	db 9
     215/      CD : 0A                  	db 10
     216/      CE : 0B                  	db 11
     217/      CF : 0C                  	db 12
     218/      D0 : 0D                  	db 13
     219/      D1 : 0E                  	db 14
     220/      D2 : 0F                  	db 15
     221/      D3 : 00                  	db 0
     222/      D4 : 01                  	db 1
     223/      D5 : 02                  	db 2
     224/      D6 : 03                  	db 3
     225/      D7 : 04                  	db 4
     226/      D8 : 05                  	db 5
     227/      D9 : 06                  	db 6
     228/      DA : 07                  	db 7
     229/      DB : 08                  	db 8
     230/      DC : 09                  	db 9
     231/      DD : 0A                  	db 10
     232/      DE : 0B                  	db 11
     233/      DF : 0C                  	db 12
     234/      E0 : 0D                  	db 13
     235/      E1 : 0E                  	db 14
     236/      E2 : 0F                  	db 15
     237/      E3 : 00                  	db 0
     238/      E4 : 01                  	db 1
     239/      E5 : 02                  	db 2
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 5 - 2/16/2013 16:48:08


     240/      E6 : 03                  	db 3
     241/      E7 : 04                  	db 4
     242/      E8 : 05                  	db 5
     243/      E9 : 06                  	db 6
     244/      EA : 07                  	db 7
     245/      EB : 08                  	db 8
     246/      EC : 09                  	db 9
     247/      ED : 0A                  	db 10
     248/      EE : 0B                  	db 11
     249/      EF : 0C                  	db 12
     250/      F0 : 0D                  	db 13
     251/      F1 : 0E                  	db 14
     252/      F2 : 0F                  	db 15
     253/      F3 : 00                  	db 0
     254/      F4 : 01                  	db 1
     255/      F5 : 02                  	db 2
     256/      F6 : 03                  	db 3
     257/      F7 : 04                  	db 4
     258/      F8 : 05                  	db 5
     259/      F9 : 06                  	db 6
     260/      FA : 07                  	db 7
     261/      FB : 08                  	db 8
     262/      FC : 09                  	db 9
     263/      FD : 0A                  	db 10
     264/      FE : 0B                  	db 11
     265/      FF : 0C                  	db 12
     266/     100 : 0D                  	db 13
     267/     101 : 0E                  	db 14
     268/     102 : 0F                  	db 15
     269/     103 : 00                  	db 0
     270/     104 : 01                  	db 1
     271/     105 : 02                  	db 2
     272/     106 : 03                  	db 3
     273/     107 : 04                  	db 4
     274/     108 : 05                  	db 5
     275/     109 : 06                  	db 6
     276/     10A : 07                  	db 7
     277/     10B : 08                  	db 8
     278/     10C : 09                  	db 9
     279/     10D : 0A                  	db 10
     280/     10E : 0B                  	db 11
     281/     10F : 0C                  	db 12
     282/     110 : 0D                  	db 13
     283/     111 : 0E                  	db 14
     284/     112 : 0F                  	db 15
     285/     113 : 00                  	db 0
     286/     114 : 01                  	db 1
     287/     115 : 02                  	db 2
     288/     116 : 03                  	db 3
     289/     117 : 04                  	db 4
     290/     118 : 05                  	db 5
     291/     119 : 06                  	db 6
     292/     11A : 07                  	db 7
     293/     11B : 08                  	db 8
     294/     11C : 09                  	db 9
     295/     11D : 0A                  	db 10
     296/     11E : 0B                  	db 11
     297/     11F : 0C                  	db 12
     298/     120 : 0D                  	db 13
     299/     121 : 0E                  	db 14
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 6 - 2/16/2013 16:48:08


     300/     122 : 0F                  	db 15
     301/     123 : 00                  	db 0
     302/     124 : 01                  	db 1
     303/     125 : 02                  	db 2
     304/     126 : 03                  	db 3
     305/     127 : 04                  	db 4
     306/     128 : 05                  	db 5
     307/     129 : 06                  	db 6
     308/     12A : 07                  	db 7
     309/     12B : 08                  	db 8
     310/     12C : 09                  	db 9
     311/     12D : 0A                  	db 10
     312/     12E : 0B                  	db 11
     313/     12F : 0C                  	db 12
     314/     130 : 0D                  	db 13
     315/     131 : 0E                  	db 14
     316/     132 : 0F                  	db 15
     317/     133 : 00                  	db 0
     318/     134 : 01                  	db 1
     319/     135 : 02                  	db 2
     320/     136 : 03                  	db 3
     321/     137 : 04                  	db 4
     322/     138 : 05                  	db 5
     323/     139 : 06                  	db 6
     324/     13A : 07                  	db 7
     325/     13B : 08                  	db 8
     326/     13C : 09                  	db 9
     327/     13D : 0A                  	db 10
     328/     13E : 0B                  	db 11
     329/     13F : 0C                  	db 12
     330/     140 : 0D                  	db 13
     331/     141 : 0E                  	db 14
     332/     142 : 0F                  	db 15
     333/     143 : 00                  	db 0
     334/     144 : 01                  	db 1
     335/     145 : 02                  	db 2
     336/     146 : 03                  	db 3
     337/     147 : 04                  	db 4
     338/     148 : 05                  	db 5
     339/     149 : 06                  	db 6
     340/     14A : 07                  	db 7
     341/     14B : 08                  	db 8
     342/     14C : 09                  	db 9
     343/     14D : 0A                  	db 10
     344/     14E : 0B                  	db 11
     345/     14F : 0C                  	db 12
     346/     150 : 0D                  	db 13
     347/     151 : 0E                  	db 14
     348/     152 : 0F                  	db 15
     349/     153 : 00                  	db 0
     350/     154 : 01                  	db 1
     351/     155 : 02                  	db 2
     352/     156 : 03                  	db 3
     353/     157 : 04                  	db 4
     354/     158 : 05                  	db 5
     355/     159 : 06                  	db 6
     356/     15A : 07                  	db 7
     357/     15B : 08                  	db 8
     358/     15C : 09                  	db 9
     359/     15D : 0A                  	db 10
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 7 - 2/16/2013 16:48:08


     360/     15E : 0B                  	db 11
     361/     15F : 0C                  	db 12
     362/     160 : 0D                  	db 13
     363/     161 : 0E                  	db 14
     364/     162 : 0F                  	db 15
     365/     163 : 00                  	db 0
     366/     164 : 01                  	db 1
     367/     165 : 02                  	db 2
     368/     166 : 03                  	db 3
     369/     167 : 04                  	db 4
     370/     168 : 05                  	db 5
     371/     169 : 06                  	db 6
     372/     16A : 07                  	db 7
     373/     16B : 08                  	db 8
     374/     16C : 09                  	db 9
     375/     16D : 0A                  	db 10
     376/     16E : 0B                  	db 11
     377/     16F : 0C                  	db 12
     378/     170 : 0D                  	db 13
     379/     171 : 0E                  	db 14
     380/     172 : 0F                  	db 15
     381/     173 : 00                  	db 0
     382/     174 : 01                  	db 1
     383/     175 : 02                  	db 2
     384/     176 : 03                  	db 3
     385/     177 : 04                  	db 4
     386/     178 : 05                  	db 5
     387/     179 : 06                  	db 6
     388/     17A : 07                  	db 7
     389/     17B : 08                  	db 8
     390/     17C : 09                  	db 9
     391/     17D : 0A                  	db 10
     392/     17E : 0B                  	db 11
     393/     17F : 0C                  	db 12
     394/     180 : 0D                  	db 13
     395/     181 : 0E                  	db 14
     396/     182 : 0F                  	db 15
     397/     183 : 00                  	db 0
     398/     184 : 01                  	db 1
     399/     185 : 02                  	db 2
     400/     186 : 03                  	db 3
     401/     187 : 04                  	db 4
     402/     188 : 05                  	db 5
     403/     189 : 06                  	db 6
     404/     18A : 07                  	db 7
     405/     18B : 08                  	db 8
     406/     18C : 09                  	db 9
     407/     18D : 0A                  	db 10
     408/     18E : 0B                  	db 11
     409/     18F : 0C                  	db 12
     410/     190 : 0D                  	db 13
     411/     191 : 0E                  	db 14
     412/     192 : 0F                  	db 15
     413/     193 : 00                  	db 0
     414/     194 : 01                  	db 1
     415/     195 : 02                  	db 2
     416/     196 : 03                  	db 3
     417/     197 : 04                  	db 4
     418/     198 : 05                  	db 5
     419/     199 : 06                  	db 6
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 8 - 2/16/2013 16:48:08


     420/     19A : 07                  	db 7
     421/     19B : 08                  	db 8
     422/     19C : 09                  	db 9
     423/     19D : 0A                  	db 10
     424/     19E : 0B                  	db 11
     425/     19F : 0C                  	db 12
     426/     1A0 : 0D                  	db 13
     427/     1A1 : 0E                  	db 14
     428/     1A2 : 0F                  	db 15
     429/     1A3 : 00                  	db 0
     430/     1A4 : 01                  	db 1
     431/     1A5 : 02                  	db 2
     432/     1A6 : 03                  	db 3
     433/     1A7 : 04                  	db 4
     434/     1A8 : 05                  	db 5
     435/     1A9 : 06                  	db 6
     436/     1AA : 07                  	db 7
     437/     1AB : 08                  	db 8
     438/     1AC : 09                  	db 9
     439/     1AD : 0A                  	db 10
     440/     1AE : 0B                  	db 11
     441/     1AF : 0C                  	db 12
     442/     1B0 : 0D                  	db 13
     443/     1B1 : 0E                  	db 14
     444/     1B2 : 0F                  	db 15
     445/     1B3 : 00                  	db 0
     446/     1B4 : 01                  	db 1
     447/     1B5 : 02                  	db 2
     448/     1B6 : 03                  	db 3
     449/     1B7 : 04                  	db 4
     450/     1B8 : 05                  	db 5
     451/     1B9 : 06                  	db 6
     452/     1BA : 07                  	db 7
     453/     1BB : 08                  	db 8
     454/     1BC : 09                  	db 9
     455/     1BD : 0A                  	db 10
     456/     1BE : 0B                  	db 11
     457/     1BF : 0C                  	db 12
     458/     1C0 : 0D                  	db 13
     459/     1C1 : 0E                  	db 14
     460/     1C2 : 0F                  	db 15
     461/     1C3 : 00                  	db 0
     462/     1C4 : 01                  	db 1
     463/     1C5 : 02                  	db 2
     464/     1C6 : 03                  	db 3
     465/     1C7 : 04                  	db 4
     466/     1C8 : 05                  	db 5
     467/     1C9 : 06                  	db 6
     468/     1CA : 07                  	db 7
     469/     1CB : 08                  	db 8
     470/     1CC : 09                  	db 9
     471/     1CD : 0A                  	db 10
     472/     1CE : 0B                  	db 11
     473/     1CF : 0C                  	db 12
     474/     1D0 : 0D                  	db 13
     475/     1D1 : 0E                  	db 14
     476/     1D2 : 0F                  	db 15
     477/     1D3 : 00                  	db 0
     478/     1D4 : 01                  	db 1
     479/     1D5 : 02                  	db 2
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 9 - 2/16/2013 16:48:08


     480/     1D6 : 03                  	db 3
     481/     1D7 : 04                  	db 4
     482/     1D8 : 05                  	db 5
     483/     1D9 : 06                  	db 6
     484/     1DA : 07                  	db 7
     485/     1DB : 08                  	db 8
     486/     1DC : 09                  	db 9
     487/     1DD : 0A                  	db 10
     488/     1DE : 0B                  	db 11
     489/     1DF : 0C                  	db 12
     490/     1E0 : 0D                  	db 13
     491/     1E1 : 0E                  	db 14
     492/     1E2 : 0F                  	db 15
     493/     1E3 : 00                  	db 0
     494/     1E4 : 01                  	db 1
     495/     1E5 : 02                  	db 2
     496/     1E6 : 03                  	db 3
     497/     1E7 : 04                  	db 4
     498/     1E8 : 05                  	db 5
     499/     1E9 : 06                  	db 6
     500/     1EA : 07                  	db 7
     501/     1EB : 08                  	db 8
     502/     1EC : 09                  	db 9
     503/     1ED : 0A                  	db 10
     504/     1EE : 0B                  	db 11
     505/     1EF : 0C                  	db 12
     506/     1F0 : 0D                  	db 13
     507/     1F1 : 0E                  	db 14
     508/     1F2 : 0F                  	db 15
     509/     1F3 : 00                  	db 0
     510/     1F4 : 01                  	db 1
     511/     1F5 : 02                  	db 2
     512/     1F6 : 03                  	db 3
     513/     1F7 : 04                  	db 4
     514/     1F8 : 05                  	db 5
     515/     1F9 : 06                  	db 6
     516/     1FA : 07                  	db 7
     517/     1FB : 08                  	db 8
     518/     1FC : 09                  	db 9
     519/     1FD : 0A                  	db 10
     520/     1FE : 0B                  	db 11
     521/     1FF : 0C                  	db 12
     522/     200 : 0D                  	db 13
     523/     201 : 0E                  	db 14
     524/     202 : 0F                  	db 15
     525/     203 :                     _main:
     526/     203 : (MACRO)             	reserve 8
     526/     203 :                     ;this calculation looks awkward but we're adjusting the top byte of sp first 
     526/     203 :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     526/     203 : 82                          glo sp          ;grab low byte of stack pointer
     526/     204 : FF 08                       smi 8&255 ;claculate new low byte
     526/     206 : AE                          plo memAddr     ;save it for a moment
     526/     207 : 92                          ghi sp          ;grab high byte
     526/     208 : 7F 00                       smbi (8>>8)&255 ;calculate the new page
     526/     20A : B2                          phi sp          ;adjust page first
     526/     20B : 8E                          glo memAddr     ;get new low byte
     526/     20C : A2                          plo sp          ;finish adjusting the stack pointer
     527/     20D : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     527/     20D : 82                          glo     SP
     527/     20E : FC 05                       ADI     ((5))#256
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 10 - 2/16/2013 16:48:08


     527/     210 : AE                          plo     MEMADDR
     527/     211 : 92                          ghi     SP
     527/     212 : 7C 00                       ADCI     ((5))>>8; was/256
     527/     214 : BE                          phi     MEMADDR
     528/     215 : EE                  	sex	memaddr
     529/     216 : (MACRO)             	savmi r7
     529/     216 : 87                          glo     R7
     529/     217 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     529/     218 : 97                          ghi     R7
     529/     219 : 73                          stxd            ;and it end up where needed to do the next one
     530/     21A : E2                  	sex sp
     531/     21B :                     ;void main(){
     532/     21B :                     ;	asm("	ldAD R1,__INTS  ;.. R1 = INTERRUPT PC\n");
     533/     21B :                     ;	asm("	dec	sp	;inp will clobber rx% \n"
     534/     21B : (MACRO)             	ldAD R1,__INTS  ;.. R1 = INTERRUPT PC
     534/     21B : F8 05                       ldi     (__INTS)&255
     534/     21D : A1                          plo     R1
     534/     21E : F8 03                       ldi     (__INTS)>>8; was/256
     534/     220 : B1                          phi     R1
     535/     221 : 22                  	dec	sp	;inp will clobber rx% 
     536/     222 : 69                  	INP 1  ;video on
     537/     223 : 12                  	inc sp
     538/     224 : C0 02 AC            	lbr L5
     539/     227 :                     L4:
     540/     227 :                     ;	while(1){
     541/     227 :                     ;		videobuffer[time[1]*8]^=255;
     542/     227 : (MACRO)             	ld1 R11,'D',(_time+1),0
     542/     227 : =>FALSE                     if      ('D'='O')
     542/     227 :                                     ldAX    memAddr,(_TIME+1),0
     542/     227 : =>TRUE                      else
     542/     227 :  (MACRO-2)                          ldAD    memAddr,(_TIME+1)
     542/     227 : F8 33                       ldi     ((_TIME+1))&255
     542/     229 : AE                          plo     MEMADDR
     542/     22A : F8 03                       ldi     ((_TIME+1))>>8; was/256
     542/     22C : BE                          phi     MEMADDR
     542/     22D : [542]                       endif
     542/     22D : 0E                          ldn     memAddr
     542/     22E : AB                          plo     R11
     543/     22F : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     543/     22F : F8 00                       ldi     0
     543/     231 : BB                          phi     11
     544/     232 : (MACRO)             	shl2I R11,3
     544/     232 :                             rept    3
     544/     232 :                             shl2    R11
     544/     232 :                             endm
     544/     232 :  (MACRO-2)                  shl2    R11
     544/     232 : 8B                          glo     R11
     544/     233 : FE                          shl
     544/     234 : AB                          plo     R11
     544/     235 : 9B                          ghi     R11
     544/     236 : 7E                          shlc
     544/     237 : BB                          phi     R11
     544/     238 :  (MACRO-2)                  shl2    R11
     544/     238 : 8B                          glo     R11
     544/     239 : FE                          shl
     544/     23A : AB                          plo     R11
     544/     23B : 9B                          ghi     R11
     544/     23C : 7E                          shlc
     544/     23D : BB                          phi     R11
     544/     23E :  (MACRO-2)                  shl2    R11
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 11 - 2/16/2013 16:48:08


     544/     23E : 8B                          glo     R11
     544/     23F : FE                          shl
     544/     240 : AB                          plo     R11
     544/     241 : 9B                          ghi     R11
     544/     242 : 7E                          shlc
     544/     243 : BB                          phi     R11
     545/     244 : (MACRO)             	ldA2 R11,'O',R11,(_videobuffer); reg:addr
     545/     244 : =>TRUE                      if      ('O'='O')
     545/     244 :  (MACRO-2)                          ldAX    R11,R11,(_VIDEOBUFFER)
     545/     244 : 8B                          glo     R11
     545/     245 : FC 03                       adi     ((_VIDEOBUFFER))#256
     545/     247 : AB                          plo     R11
     545/     248 : 9B                          ghi     R11
     545/     249 : 7C 00                       adci    ((_VIDEOBUFFER))>>8; was/256
     545/     24B : BB                          phi     R11
     545/     24C : =>FALSE                     else
     545/     24C :                                     ldAD    R11,R11
     545/     24C : [545]                       endif
     546/     24C : (MACRO)             	ld1 R10,'O',R11,0
     546/     24C : =>TRUE                      if      ('O'='O')
     546/     24C :  (MACRO-2)                          ldAX    memAddr,R11,0
     546/     24C : 8B                          glo     R11
     546/     24D : FC 00                       adi     (0)#256
     546/     24F : AE                          plo     MEMADDR
     546/     250 : 9B                          ghi     R11
     546/     251 : 7C 00                       adci    (0)>>8; was/256
     546/     253 : BE                          phi     MEMADDR
     546/     254 : =>FALSE                     else
     546/     254 :                                     ldAD    memAddr,R11
     546/     254 : [546]                       endif
     546/     254 : 0E                          ldn     memAddr
     546/     255 : AA                          plo     R10
     547/     256 : (MACRO)             	zExt 10 ;CVUI2: widen unsigned char to signed int (zero extend)
     547/     256 : F8 00                       ldi     0
     547/     258 : BA                          phi     10
     548/     259 : (MACRO)             	alu2I R10,R10,255,xri,xri ;removed copy
     548/     259 : 8A                          glo     R10
     548/     25A : FB FF                       XRI     (255)#256
     548/     25C : AA                          plo     R10
     548/     25D : 9A                          ghi     R10
     548/     25E : FB 00                       XRI     (255)>>8; was/256
     548/     260 : BA                          phi     R10
     549/     261 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     549/     261 : =>TRUE                      if      ('O'='O')
     549/     261 :  (MACRO-2)                          ldAX    memAddr,R11,0
     549/     261 : 8B                          glo     R11
     549/     262 : FC 00                       adi     (0)#256
     549/     264 : AE                          plo     MEMADDR
     549/     265 : 9B                          ghi     R11
     549/     266 : 7C 00                       adci    (0)>>8; was/256
     549/     268 : BE                          phi     MEMADDR
     549/     269 : =>FALSE                     else
     549/     269 :                                     ldAD    memAddr,R11
     549/     269 : [549]                       endif
     549/     269 : 8A                          glo     R10
     549/     26A : 5E                          str     memAddr
     550/     26B :                     ;		secs=time[1];
     551/     26B : (MACRO)             	ld1 R11,'D',(_time+1),0
     551/     26B : =>FALSE                     if      ('D'='O')
     551/     26B :                                     ldAX    memAddr,(_TIME+1),0
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 12 - 2/16/2013 16:48:08


     551/     26B : =>TRUE                      else
     551/     26B :  (MACRO-2)                          ldAD    memAddr,(_TIME+1)
     551/     26B : F8 33                       ldi     ((_TIME+1))&255
     551/     26D : AE                          plo     MEMADDR
     551/     26E : F8 03                       ldi     ((_TIME+1))>>8; was/256
     551/     270 : BE                          phi     MEMADDR
     551/     271 : [551]                       endif
     551/     271 : 0E                          ldn     memAddr
     551/     272 : AB                          plo     R11
     552/     273 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     552/     273 : F8 00                       ldi     0
     552/     275 : BB                          phi     11
     553/     276 : (MACRO)             	cpy2 R7,R11
     553/     276 : 8B                          glo     R11
     553/     277 : A7                          plo     R7
     553/     278 : 9B                          ghi     R11
     553/     279 : B7                          phi     R7
     554/     27A :                     ;		if (secs!=oldsecs){
     555/     27A : (MACRO)             	ld2 R11,'O',sp,(-4+10); INDIRU2(addr)
     555/     27A : =>TRUE                      if      ('O'='O')
     555/     27A :  (MACRO-2)                          ldAX    memAddr,SP,(-4+10)
     555/     27A : 82                          glo     SP
     555/     27B : FC 06                       adi     ((-4+10))#256
     555/     27D : AE                          plo     MEMADDR
     555/     27E : 92                          ghi     SP
     555/     27F : 7C 00                       adci    ((-4+10))>>8; was/256
     555/     281 : BE                          phi     MEMADDR
     555/     282 : =>FALSE                     else
     555/     282 :                                     ldAD    memAddr,SP
     555/     282 : [555]                       endif
     555/     282 : 4E                          lda     memAddr
     555/     283 : BB                          phi     R11
     555/     284 : 0E                          ldn     memAddr
     555/     285 : AB                          plo     R11
     556/     286 : (MACRO)             	jeqI2 r7,r11,L9
     556/     286 : 22                          dec     sp
     556/     287 : 8B                          glo     R11
     556/     288 : 52                          str     sp
     556/     289 : 87                          glo     R7
     556/     28A : F7                          sm
     556/     28B : 12                          inc     sp
     556/     28C : CA 02 98                    lbnz    $$nobr
     556/     28F : 22                          dec     sp
     556/     290 : 9B                          ghi     R11
     556/     291 : 52                          str     sp
     556/     292 : 97                          ghi     R7
     556/     293 : 77                          smb
     556/     294 : 12                          inc     sp
     556/     295 : C2 02 AC                    lbz     L9
     556/     298 :                     $$nobr:
     557/     298 :                     ;			oldsecs=secs;
     558/     298 : (MACRO)             	st2 R7,'O',sp,(-4+10); ASGNU2(addr,reg)
     558/     298 : =>TRUE                      if      ('O'='O')
     558/     298 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+10)
     558/     298 : 82                          glo     SP
     558/     299 : FC 06                       adi     ((-4+10))#256
     558/     29B : AE                          plo     MEMADDR
     558/     29C : 92                          ghi     SP
     558/     29D : 7C 00                       adci    ((-4+10))>>8; was/256
     558/     29F : BE                          phi     MEMADDR
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 13 - 2/16/2013 16:48:08


     558/     2A0 : =>FALSE                     else
     558/     2A0 :                                     ldAD    memAddr,SP
     558/     2A0 : [558]                       endif
     558/     2A0 : 97                          ghi     R7
     558/     2A1 : 5E                          str     memAddr
     558/     2A2 : 1E                          inc     memAddr
     558/     2A3 : 87                          glo     R7
     558/     2A4 : 5E                          str     memAddr
     559/     2A5 :                     ;			out4(secs);
     560/     2A5 : (MACRO)             	cpy2 R12,R7
     560/     2A5 : 87                          glo     R7
     560/     2A6 : AC                          plo     R12
     560/     2A7 : 97                          ghi     R7
     560/     2A8 : BC                          phi     R12
     561/     2A9 : (MACRO)             	Ccall _out4
     561/     2A9 : D4                          sep     RCALL
     561/     2AA : 03 6A                       dw      _OUT4
     562/     2AC :                     ;		}
     563/     2AC :                     L9:
     564/     2AC :                     ;	}
     565/     2AC :                     L5:
     566/     2AC :                     ;	while(1){
     567/     2AC : C0 02 27            	lbr L4
     568/     2AF :                     ;}
     569/     2AF :                     L1:
     570/     2AF : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     570/     2AF : 82                          glo     SP
     570/     2B0 : FC 04                       ADI     ((4))#256
     570/     2B2 : AE                          plo     MEMADDR
     570/     2B3 : 92                          ghi     SP
     570/     2B4 : 7C 00                       ADCI     ((4))>>8; was/256
     570/     2B6 : BE                          phi     MEMADDR
     571/     2B7 : (MACRO)             	rldmi r7,memaddr
     571/     2B7 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     571/     2B8 : B7                          phi     R7
     571/     2B9 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     571/     2BA : A7                          plo     R7
     572/     2BB : (MACRO)             	release 8
     572/     2BB :                     ;for release we adjust the low byte first 
     572/     2BB :                     ;so if there's an interrupt in mid calculation the sp will be pointing to free memory
     572/     2BB :  (MACRO-2)                  alu2i sp,sp,8,adi,adci
     572/     2BB : 82                          glo     SP
     572/     2BC : FC 08                       ADI     (8)#256
     572/     2BE : A2                          plo     SP
     572/     2BF : 92                          ghi     SP
     572/     2C0 : 7C 00                       ADCI     (8)>>8; was/256
     572/     2C2 : B2                          phi     SP
     573/     2C3 : (MACRO)             	Cretn
     573/     2C3 : D5                          sep     RRET
     574/     2C4 :                     
     575/     2C4 :                     _INT:
     576/     2C4 :                     ;void INT(){	//video interrupt routine
     577/     2C4 :                     ;	asm("	align 64\n"
     578/     2C4 :                     	align 64
     579/     300 : E2                  INTX: SEX  2
     580/     301 : 42                  	LDA  2         ; recover carry
     581/     302 : FE                  	SHL
     582/     303 : 42                  	LDA  2         ; recover A
     583/     304 : 70                  	RET             ; < exit
     584/     305 : C4                  __INTS: NOP             ; > entry
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 14 - 2/16/2013 16:48:08


     585/     306 : 22                  	DEC  2
     586/     307 : 78                  	SAV             ; save T
     587/     308 : 22                  	DEC  2
     588/     309 : 73                  	STXD           	; save A
     589/     30A : 76                  	SHRC            ; move carry to D 
     590/     30B : 52                  	STR  2			; save carry
     591/     30C : (MACRO)             	ldAD R0,_videobuffer;	point to the video buffer
     591/     30C : F8 03                       ldi     (_VIDEOBUFFER)&255
     591/     30E : A0                          plo     R0
     591/     30F : F8 00                       ldi     (_VIDEOBUFFER)>>8; was/256
     591/     311 : B0                          phi     R0
     592/     312 : (MACRO)             	pushr R15
     592/     312 : 22                          dec     sp
     592/     313 : 8F                          glo     R15
     592/     314 : 73                          stxd
     592/     315 : 9F                          ghi     R15
     592/     316 : 52                          str     sp
     593/     317 : (MACRO)             	ldaD R15,_time
     593/     317 : F8 32                       ldi     (_TIME)&255
     593/     319 : AF                          plo     R15
     593/     31A : F8 03                       ldi     (_TIME)>>8; was/256
     593/     31C : BF                          phi     R15
     594/     31D : 0F                  	ldn	R15
     595/     31E : FC 01               	adi 1
     596/     320 : 5F                  	str R15
     597/     321 : FF 3D               	smi 61	;each 61 cycles is a second
     598/     323 : 3A 2B               	bnz +
     599/     325 : 5F                  	str R15
     600/     326 : 1F                  	inc R15
     601/     327 : 0F                  	ldn R15
     602/     328 : FC 01               	adi 1;increment the seconds counter
     603/     32A : 5F                  	str R15
     604/     32B : (MACRO)             +	popr R15
     604/     32B : 42                          lda     sp
     604/     32C : BF                          phi     R15
     604/     32D : 42                          lda     sp
     604/     32E : AF                          plo     R15
     605/     32F : 30 00               	br   intx
     606/     331 :                     ;}
     607/     331 :                     L11:
     608/     331 : (MACRO)             	Cretn
     608/     331 : D5                          sep     RRET
     609/     332 :                     
     610/     332 :                     _time:
     611/     332 :                     	ds 2
     612/     334 :                     	include lcc1802EpiloNG.inc
(1)    1/     334 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/     334 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/     334 :                     ;this is the version published with the lcc1802121229 release
(1)    4/     334 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/     334 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/     334 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/     334 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/     334 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/     334 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/     334 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/     334 : =EH                 rwork	equ	memAddr	;work register
(1)   12/     334 :                     lcc1802init:	
(1)   13/     334 : (MACRO)             	ldiReg	RCALL,_call
(1)   13/     334 : F8 01                       ldi     (_CALL)&255
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 15 - 2/16/2013 16:48:08


(1)   13/     336 : A4                          plo     RCALL
(1)   13/     337 : F8 04                       ldi     (_CALL)>>8; was/256
(1)   13/     339 : B4                          phi     RCALL
(1)   14/     33A : (MACRO)             	ldiReg	RRET,_return
(1)   14/     33A : F8 12                       ldi     (_RETURN)&255
(1)   14/     33C : A5                          plo     RRET
(1)   14/     33D : F8 04                       ldi     (_RETURN)>>8; was/256
(1)   14/     33F : B5                          phi     RRET
(1)   15/     340 : (MACRO)             	ldiReg	SP,0x3fff	;wjr jan 1 start stack at 16K-1
(1)   15/     340 : F8 FF                       ldi     (0X3FFF)&255
(1)   15/     342 : A2                          plo     SP
(1)   15/     343 : F8 3F                       ldi     (0X3FFF)>>8; was/256
(1)   15/     345 : B2                          phi     SP
(1)   16/     346 : E2                  	sex	SP
(1)   17/     347 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   17/     347 : F8 4E                       ldi     ($$_00000)&255
(1)   17/     349 : A3                          plo     RPC
(1)   17/     34A : F8 03                       ldi     ($$_00000)>>8; was/256
(1)   17/     34C : B3                          phi     RPC
(1)   18/     34D : D3                  	sep	RPC
(1)   19/     34E :                     $$_00000:
(1)   20/     34E : (MACRO)             	Ccall _main	;call the main routine
(1)   20/     34E : D4                          sep     RCALL
(1)   20/     34F : 02 03                       dw      _MAIN
(1)   21/     351 : C0 03 51            $$_die:	lbr	$$_die		;loop here when main returns
(1)   22/     354 : DE AD               	db	0xde,0xad
(1)   23/     356 :                     
(1)   24/     356 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   25/     356 :                     _setqOn:
(1)   26/     356 : 7B                  	seq
(1)   27/     357 : (MACRO)             	Cretn
(1)   27/     357 : D5                          sep     RRET
(1)   28/     358 :                     _setqOff:
(1)   29/     358 : 7A                  	req
(1)   30/     359 : (MACRO)             	Cretn
(1)   30/     359 : D5                          sep     RRET
(1)   31/     35A :                     
(1)   32/     35A :                     _modU2:	;16 bit unsigned remainder
(1)   33/     35A :                     	; just calls the 16 bit division then puts remainder into return value
(1)   34/     35A : (MACRO)                 Ccall _divU2
(1)   34/     35A : D4                          sep     RCALL
(1)   34/     35B : 04 49                       dw      _DIVU2
(1)   35/     35D : 8D                      glo regArg2
(1)   36/     35E : AF                      plo retVal
(1)   37/     35F : 9D                      ghi regArg2
(1)   38/     360 : BF                      phi retVal
(1)   39/     361 : (MACRO)                 Cretn
(1)   39/     361 : D5                          sep     RRET
(1)   40/     362 :                         
(1)   41/     362 :                     _modI2:	;16 bit signed remainder
(1)   42/     362 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   43/     362 : (MACRO)                 Ccall _divI2
(1)   43/     362 : D4                          sep     RCALL
(1)   43/     363 : 04 A4                       dw      _DIVI2
(1)   44/     365 : 8D                      glo regArg2
(1)   45/     366 : AF                      plo retVal
(1)   46/     367 : 9D                      ghi regArg2
(1)   47/     368 : BF                      phi retVal
(1)   48/     369 : (MACRO)                 Cretn
(1)   48/     369 : D5                          sep     RRET
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 16 - 2/16/2013 16:48:08


(1)   49/     36A :                     
(1)   50/     36A :                     _out4:	
(1)   51/     36A : 8C                  	glo	regArg1
(1)   52/     36B : 22                  	dec	sp
(1)   53/     36C : 52                  	str	sp
(1)   54/     36D : 64                  	out	4
(1)   55/     36E : (MACRO)             	Cretn
(1)   55/     36E : D5                          sep     RRET
(1)   56/     36F :                     
(1)   57/     36F :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   58/     36F :                     	align 256
(1)   59/     400 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   60/     400 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   61/     400 : D3                  	sep     R3 ;go to subroutine
(1)   62/     401 : E2                  _call	sex	SP ;make sure X=SP
(1)   63/     402 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   64/     403 : 22                  	dec	sp
(1)   65/     404 : 73                  	stxd
(1)   66/     405 : 86                  	glo	retAddr
(1)   67/     406 : 52                  	str	sp	
(1)   68/     407 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   69/     408 : A6                  	plo	retAddr
(1)   70/     409 : 93                  	ghi	RPC
(1)   71/     40A : B6                  	phi	retAddr
(1)   72/     40B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   73/     40C : B3                  	phi	RPC
(1)   74/     40D : 46                  	lda	retAddr
(1)   75/     40E : A3                  	plo	RPC
(1)   76/     40F : 30 00               	br	_call-1
(1)   77/     411 :                     
(1)   78/     411 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   79/     411 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   80/     411 : D3                  	sep	RPC	;return to the original program
(1)   81/     412 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   82/     413 : A3                  	plo	RPC
(1)   83/     414 : 96                  	ghi	retAddr
(1)   84/     415 : B3                  	phi	RPC
(1)   85/     416 : 42                  	lda	SP	;pick up old return address
(1)   86/     417 : A6                  	plo	retAddr
(1)   87/     418 : 42                  	lda	SP
(1)   88/     419 : B6                  	phi	retAddr
(1)   89/     41A : 30 11               	br	_return-1
(1)   90/     41C :                     
(1)   91/     41C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   92/     41C : F8 24               	ldi	(100-15-10-2)/2
(1)   93/     41E : FF 01               $$mslp:	smi	1
(1)   94/     420 : 3A 1E               	bnz	$$mslp
(1)   95/     422 : (MACRO)             	Cretn
(1)   95/     422 : D5                          sep     RRET
(1)   96/     423 :                     
(1)   97/     423 :                     
(1)   98/     423 :                     	
(1)   99/     423 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  100/     423 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  101/     423 :                     _mulu2:		
(1)  102/     423 : 22                      dec sp
(1)  103/     424 : F8 10                   ldi 16
(1)  104/     426 : AE                      plo	rwork	;bit count
(1)  105/     427 : F8 00                   ldi 0
(1)  106/     429 : BF                      phi	retVal	;quotient
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 17 - 2/16/2013 16:48:08


(1)  107/     42A : AF                      plo retVal
(1)  108/     42B :                     $$MultLoop16_16:
(1)  109/     42B : 9C                      ghi regArg1
(1)  110/     42C : F6                      shr
(1)  111/     42D : BC                      phi regArg1
(1)  112/     42E : 8C                      glo regArg1
(1)  113/     42F : 76                      shrc
(1)  114/     430 : AC                      plo regArg1
(1)  115/     431 : 3B 3D                   bnf $$MultSkip16_16
(1)  116/     433 : 8D                      glo regArg2
(1)  117/     434 : 52                      str sp
(1)  118/     435 : 8F                      glo retVal
(1)  119/     436 : F4                      add 
(1)  120/     437 : AF                      plo retVal
(1)  121/     438 : 9D                      ghi regArg2
(1)  122/     439 : 52                      str sp
(1)  123/     43A : 9F                      ghi retVal
(1)  124/     43B : 74                      adc
(1)  125/     43C : BF                      phi retVal
(1)  126/     43D :                     $$MultSkip16_16:
(1)  127/     43D : 8D                      glo regArg2
(1)  128/     43E : FE                      shl
(1)  129/     43F : AD                      plo regArg2
(1)  130/     440 : 9D                      ghi regArg2
(1)  131/     441 : 7E                      shlc
(1)  132/     442 : BD                      phi regArg2
(1)  133/     443 : 2E                      dec rwork
(1)  134/     444 : 8E                      glo rwork
(1)  135/     445 : 3A 2B                   bnz $$MultLoop16_16
(1)  136/     447 : 12                      inc sp
(1)  137/     448 : D5                      sep 5
(1)  138/     449 :                     
(1)  139/     449 :                     
(1)  140/     449 :                     _divU2:
(1)  141/     449 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  142/     449 :                     	; This is really an unsigned 23 bit divide
(1)  143/     449 :                     	;thanks to Ted Rossin
(1)  144/     449 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  145/     449 : 22                      dec sp
(1)  146/     44A : F8 10                   ldi 16
(1)  147/     44C : AE                      plo rwork
(1)  148/     44D : F8 00                   ldi 0
(1)  149/     44F : BF                      phi retVal
(1)  150/     450 : AF                      plo retVal
(1)  151/     451 : BE                      phi rwork
(1)  152/     452 :                     $$DivLoop16_16:
(1)  153/     452 : 8C                      glo regArg1
(1)  154/     453 : FE                      shl
(1)  155/     454 : AC                      plo regArg1
(1)  156/     455 : 9C                      ghi regArg1
(1)  157/     456 : 7E                      shlc
(1)  158/     457 : BC                      phi regArg1
(1)  159/     458 : 8F                      glo retVal
(1)  160/     459 : 7E                      shlc
(1)  161/     45A : AF                      plo retVal
(1)  162/     45B : 9F                      ghi retVal
(1)  163/     45C : 7E                      shlc
(1)  164/     45D : BF                      phi retVal
(1)  165/     45E : 9E                      ghi rwork
(1)  166/     45F : 7E                      shlc
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 18 - 2/16/2013 16:48:08


(1)  167/     460 : BE                      phi rwork
(1)  168/     461 : 3B 73                   bnf $$DivSub16_16
(1)  169/     463 : 8D                      glo regArg2
(1)  170/     464 : 52                      str sp
(1)  171/     465 : 8F                      glo retVal
(1)  172/     466 : F4                      add 
(1)  173/     467 : AF                      plo retVal
(1)  174/     468 : 9D                      ghi regArg2
(1)  175/     469 : 52                      str sp
(1)  176/     46A : 9F                      ghi retVal
(1)  177/     46B : 74                      adc 
(1)  178/     46C : BF                      phi retVal
(1)  179/     46D : 9E                      ghi rwork
(1)  180/     46E : 7C 00                   adci 0
(1)  181/     470 : BE                      phi rwork
(1)  182/     471 : 30 81                   br $$DivSkip16_16
(1)  183/     473 :                     $$DivSub16_16:
(1)  184/     473 : 8D                      glo regArg2
(1)  185/     474 : 52                      str sp
(1)  186/     475 : 8F                      glo retVal
(1)  187/     476 : F7                      sm
(1)  188/     477 : AF                      plo retVal
(1)  189/     478 : 9D                      ghi regArg2
(1)  190/     479 : 52                      str sp
(1)  191/     47A : 9F                      ghi retVal
(1)  192/     47B : 77                      smb 
(1)  193/     47C : BF                      phi retVal
(1)  194/     47D : 9E                      ghi rwork
(1)  195/     47E : 7F 00                   smbi 0
(1)  196/     480 : BE                      phi rwork 
(1)  197/     481 :                     $$DivSkip16_16:
(1)  198/     481 : FE                      shl
(1)  199/     482 : 33 88                   bdf $$DivSkipClear16_16
(1)  200/     484 :                     $$DivSetBit16_16:
(1)  201/     484 : 8C                      glo regArg1
(1)  202/     485 : F9 01                   ori  0x01
(1)  203/     487 : AC                      plo regArg1
(1)  204/     488 :                     $$DivSkipClear16_16:
(1)  205/     488 : 2E                      dec rwork
(1)  206/     489 : 8E                      glo rwork
(1)  207/     48A : 3A 52                   bnz $$DivLoop16_16
(1)  208/     48C : 9E                      ghi rwork
(1)  209/     48D : FE                      shl
(1)  210/     48E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  211/     490 : 8D                      glo regArg2
(1)  212/     491 : 52                      str sp
(1)  213/     492 : 8F                      glo retVal
(1)  214/     493 : F4                      add
(1)  215/     494 : AF                      plo retVal
(1)  216/     495 : 9D                      ghi regArg2
(1)  217/     496 : 52                      str sp
(1)  218/     497 : 9F                      ghi retVal
(1)  219/     498 : 74                      adc
(1)  220/     499 : BF                      phi retVal
(1)  221/     49A :                     $$DivSkipFinalAdd16_16:
(1)  222/     49A : 12                      inc sp
(1)  223/     49B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  224/     49B : 8F                      glo retVal
(1)  225/     49C : AD                      plo regArg2
(1)  226/     49D : 9F                      ghi retVal
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 19 - 2/16/2013 16:48:08


(1)  227/     49E : BD                      phi regArg2
(1)  228/     49F : 8C                      glo regArg1
(1)  229/     4A0 : AF                      plo retVal
(1)  230/     4A1 : 9C                      ghi regArg1
(1)  231/     4A2 : BF                      phi retVal
(1)  232/     4A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  233/     4A3 : D5                      sep 5
(1)  234/     4A4 :                     
(1)  235/     4A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  236/     4A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  237/     4A4 :                     _divI2:
(1)  238/     4A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  239/     4A4 : 22                      dec	sp	;leave a work area available
(1)  240/     4A5 : 9C                      ghi regArg1
(1)  241/     4A6 : 52                      str sp	;save the sign of the 1st arg
(1)  242/     4A7 : FE                      shl
(1)  243/     4A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  244/     4AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  244/     4AA : 8C                          glo     REGARG1                     ;(flip all the bits and add 1)
(1)  244/     4AB : FB FF                       xri     0xff
(1)  244/     4AD : AC                          plo     REGARG1
(1)  244/     4AE : 9C                          ghi     REGARG1
(1)  244/     4AF : FB FF                       xri     0xff
(1)  244/     4B1 : BC                          phi     REGARG1
(1)  244/     4B2 : 1C                          inc     REGARG1
(1)  245/     4B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  246/     4B3 : 9D                      ghi regArg2
(1)  247/     4B4 : F3                      xor	
(1)  248/     4B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  249/     4B6 : 9D                      ghi regArg2
(1)  250/     4B7 : FE                      shl
(1)  251/     4B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  252/     4BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  252/     4BA : 8D                          glo     REGARG2                     ;(flip all the bits and add 1)
(1)  252/     4BB : FB FF                       xri     0xff
(1)  252/     4BD : AD                          plo     REGARG2
(1)  252/     4BE : 9D                          ghi     REGARG2
(1)  252/     4BF : FB FF                       xri     0xff
(1)  252/     4C1 : BD                          phi     REGARG2
(1)  252/     4C2 : 1D                          inc     REGARG2
(1)  253/     4C3 :                     $$pos2: ; both args now +v
(1)  254/     4C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  254/     4C3 : D4                          sep     RCALL
(1)  254/     4C4 : 04 49                       dw      _DIVU2
(1)  255/     4C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  256/     4C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  257/     4C7 : FE                      shl
(1)  258/     4C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  259/     4CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  259/     4CA : 8F                          glo     RETVAL                     ;(flip all the bits and add 1)
(1)  259/     4CB : FB FF                       xri     0xff
(1)  259/     4CD : AF                          plo     RETVAL
(1)  259/     4CE : 9F                          ghi     RETVAL
(1)  259/     4CF : FB FF                       xri     0xff
(1)  259/     4D1 : BF                          phi     RETVAL
(1)  259/     4D2 : 1F                          inc     RETVAL
(1)  260/     4D3 :                     $$done:
(1)  261/     4D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  262/     4D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  262/     4D3 : D5                          sep     RRET
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 20 - 2/16/2013 16:48:08


(1)  263/     4D4 :                     
(1)  264/     4D4 :                     
(1)  265/     4D4 :                     	align 256    ;32 bit operations follow
(1)  266/     500 :                     _divu4:
(1)  267/     500 :                     ;This is an unsigned 32 bit restoring division
(1)  268/     500 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  269/     500 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  270/     500 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  271/     500 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  272/     500 :                     
(1)  273/     500 : F8 20               	ldi 32		;set loop count
(1)  274/     502 : AE                  	plo memaddr	;in temp register
(1)  275/     503 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  275/     503 : F8 00                       ldi     (0)&255
(1)  275/     505 : AD                          plo     RP1P2
(1)  275/     506 : F8 00                       ldi     ((0)>>8)&255; 
(1)  275/     508 : BD                          phi     RP1P2
(1)  275/     509 : F8 00                       ldi     ((0)>>16)&255; 
(1)  275/     50B : AC                          plo     RP1P2-1
(1)  275/     50C : F8 00                       ldi     ((0)>>24)&255; 
(1)  275/     50E : BC                          phi     RP1P2-1
(1)  276/     50F :                     $$loop:
(1)  277/     50F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  277/     50F : 89                          glo     RL8     ;start with low byte of second register
(1)  277/     510 : FE                          shl             ;shift left once
(1)  277/     511 : A9                          plo     RL8     ; save it
(1)  277/     512 : 99                          ghi     RL8     ;high byte of second RL8
(1)  277/     513 : 7E                          shlc            ;shift one bit carrying
(1)  277/     514 : B9                          phi     RL8     ;save it
(1)  277/     515 : 88                          glo     RL8-1   ;now the bottom byte of top RL8
(1)  277/     516 : 7E                          shlc
(1)  277/     517 : A8                          plo     RL8-1
(1)  277/     518 : 98                          ghi     RL8-1   ;finally the top byte of the high order RL8
(1)  277/     519 : 7E                          shlc            ;gets the last shift
(1)  277/     51A : B8                          phi     RL8-1   ;and we're done
(1)  278/     51B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  278/     51B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  278/     51C : 7E                          shlc            ;shift left once continuing carry
(1)  278/     51D : AD                          plo     RP1P2     ; save it
(1)  278/     51E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  278/     51F : 7E                          shlc            ;shift one bit carrying
(1)  278/     520 : BD                          phi     RP1P2     ;save it
(1)  278/     521 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  278/     522 : 7E                          shlc
(1)  278/     523 : AC                          plo     RP1P2-1
(1)  278/     524 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  278/     525 : 7E                          shlc            ;gets the last shift
(1)  278/     526 : BC                          phi     RP1P2-1   ;and we're done
(1)  279/     527 :                     
(1)  280/     527 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  280/     527 : 22                          dec     sp ;make a work ares
(1)  280/     528 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  280/     529 : 52                          str     sp      ;so arithmetic operations start there
(1)  280/     52A : 8D                          glo     RP1P2
(1)  280/     52B : F7                          SM             ;calculate the low order byte
(1)  280/     52C : AD                          plo     RP1P2
(1)  280/     52D : 9B                          ghi     RL10
(1)  280/     52E : 52                          str     sp
(1)  280/     52F : 9D                          ghi     RP1P2
(1)  280/     530 : 77                          SMB             ;calculate the second byte
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 21 - 2/16/2013 16:48:08


(1)  280/     531 : BD                          phi     RP1P2
(1)  280/     532 : 8A                          glo     RL10-1
(1)  280/     533 : 52                          str     sp
(1)  280/     534 : 8C                          glo     RP1P2-1
(1)  280/     535 : 77                          SMB             ;calculate the third byte
(1)  280/     536 : AC                          plo     RP1P2-1
(1)  280/     537 : 9A                          ghi     RL10-1
(1)  280/     538 : 52                          str     sp
(1)  280/     539 : 9C                          ghi     RP1P2-1
(1)  280/     53A : 77                          SMB             ;calculate the high byte
(1)  280/     53B : BC                          phi     RP1P2-1
(1)  280/     53C : 12                          inc     sp      ;release the work area
(1)  281/     53D :                     
(1)  282/     53D : FA 80               	ani 0x80	;check the top bit
(1)  283/     53F : 32 5D               	bz $$norestore	;if it's 0
(1)  284/     541 : 89                  		glo RL8
(1)  285/     542 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  286/     544 : A9                  		plo RL8
(1)  287/     545 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  287/     545 : 22                          dec     sp ;make a work ares
(1)  287/     546 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  287/     547 : 52                          str     sp      ;so arithmetic operations start there
(1)  287/     548 : 8D                          glo     RP1P2
(1)  287/     549 : F4                          ADD             ;calculate the low order byte
(1)  287/     54A : AD                          plo     RP1P2
(1)  287/     54B : 9B                          ghi     RL10
(1)  287/     54C : 52                          str     sp
(1)  287/     54D : 9D                          ghi     RP1P2
(1)  287/     54E : 74                          ADC             ;calculate the second byte
(1)  287/     54F : BD                          phi     RP1P2
(1)  287/     550 : 8A                          glo     RL10-1
(1)  287/     551 : 52                          str     sp
(1)  287/     552 : 8C                          glo     RP1P2-1
(1)  287/     553 : 74                          ADC             ;calculate the third byte
(1)  287/     554 : AC                          plo     RP1P2-1
(1)  287/     555 : 9A                          ghi     RL10-1
(1)  287/     556 : 52                          str     sp
(1)  287/     557 : 9C                          ghi     RP1P2-1
(1)  287/     558 : 74                          ADC             ;calculate the high byte
(1)  287/     559 : BC                          phi     RP1P2-1
(1)  287/     55A : 12                          inc     sp      ;release the work area
(1)  288/     55B : 30 61               	br $$endlp 	;else
(1)  289/     55D :                     $$norestore:
(1)  290/     55D : 89                  		glo RL8
(1)  291/     55E : F9 01               		ori 1	;turn on the bottom bit
(1)  292/     560 : A9                  		plo RL8
(1)  293/     561 :                     	;end if
(1)  294/     561 :                     $$endlp:
(1)  295/     561 : 2E                  	dec memaddr	;check the cycle count
(1)  296/     562 : 8E                  	glo memaddr
(1)  297/     563 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  298/     565 :                     	
(1)  299/     565 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  299/     565 : D5                          sep     RRET
(1)  300/     566 :                     		
(1)  301/     566 :                     
(1)  302/     566 :                     _mulu4:
(1)  303/     566 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  304/     566 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  305/     566 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 22 - 2/16/2013 16:48:08


(1)  306/     566 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  307/     566 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  308/     566 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  309/     566 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  310/     566 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  311/     566 :                     	;for 10 we subtract and shift
(1)  312/     566 :                     	;for 00 and 11 we just shift
(1)  313/     566 :                     
(1)  314/     566 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  314/     566 : F8 00                       ldi     (0)&255
(1)  314/     568 : AD                          plo     RP1P2
(1)  314/     569 : F8 00                       ldi     ((0)>>8)&255; 
(1)  314/     56B : BD                          phi     RP1P2
(1)  314/     56C : F8 00                       ldi     ((0)>>16)&255; 
(1)  314/     56E : AC                          plo     RP1P2-1
(1)  314/     56F : F8 00                       ldi     ((0)>>24)&255; 
(1)  314/     571 : BC                          phi     RP1P2-1
(1)  315/     572 : F8 20                   ldi 32
(1)  316/     574 : AE                      plo memaddr		;cycle count
(1)  317/     575 : FC 00                   adi 0		;clear df
(1)  318/     577 :                     $$mloop:
(1)  319/     577 : 89                      glo RL8
(1)  320/     578 : FA 01                   ani 1		;isolate bottom bit of result
(1)  321/     57A : 3B 96                   bnf	$$check_sub	;
(1)  322/     57C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  323/     57E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  324/     57E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  324/     57E : 22                          dec     sp ;make a work ares
(1)  324/     57F : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  324/     580 : 52                          str     sp      ;so arithmetic operations start there
(1)  324/     581 : 8D                          glo     RP1P2
(1)  324/     582 : F4                          ADD             ;calculate the low order byte
(1)  324/     583 : AD                          plo     RP1P2
(1)  324/     584 : 9B                          ghi     RL10
(1)  324/     585 : 52                          str     sp
(1)  324/     586 : 9D                          ghi     RP1P2
(1)  324/     587 : 74                          ADC             ;calculate the second byte
(1)  324/     588 : BD                          phi     RP1P2
(1)  324/     589 : 8A                          glo     RL10-1
(1)  324/     58A : 52                          str     sp
(1)  324/     58B : 8C                          glo     RP1P2-1
(1)  324/     58C : 74                          ADC             ;calculate the third byte
(1)  324/     58D : AC                          plo     RP1P2-1
(1)  324/     58E : 9A                          ghi     RL10-1
(1)  324/     58F : 52                          str     sp
(1)  324/     590 : 9C                          ghi     RP1P2-1
(1)  324/     591 : 74                          ADC             ;calculate the high byte
(1)  324/     592 : BC                          phi     RP1P2-1
(1)  324/     593 : 12                          inc     sp      ;release the work area
(1)  325/     594 : 30 AE                   br $$shift
(1)  326/     596 :                     $$check_sub:
(1)  327/     596 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  328/     598 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  329/     598 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  329/     598 : 22                          dec     sp ;make a work ares
(1)  329/     599 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  329/     59A : 52                          str     sp      ;so arithmetic operations start there
(1)  329/     59B : 8D                          glo     RP1P2
(1)  329/     59C : F7                          SM             ;calculate the low order byte
(1)  329/     59D : AD                          plo     RP1P2
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 23 - 2/16/2013 16:48:08


(1)  329/     59E : 9B                          ghi     RL10
(1)  329/     59F : 52                          str     sp
(1)  329/     5A0 : 9D                          ghi     RP1P2
(1)  329/     5A1 : 77                          SMB             ;calculate the second byte
(1)  329/     5A2 : BD                          phi     RP1P2
(1)  329/     5A3 : 8A                          glo     RL10-1
(1)  329/     5A4 : 52                          str     sp
(1)  329/     5A5 : 8C                          glo     RP1P2-1
(1)  329/     5A6 : 77                          SMB             ;calculate the third byte
(1)  329/     5A7 : AC                          plo     RP1P2-1
(1)  329/     5A8 : 9A                          ghi     RL10-1
(1)  329/     5A9 : 52                          str     sp
(1)  329/     5AA : 9C                          ghi     RP1P2-1
(1)  329/     5AB : 77                          SMB             ;calculate the high byte
(1)  329/     5AC : BC                          phi     RP1P2-1
(1)  329/     5AD : 12                          inc     sp      ;release the work area
(1)  330/     5AE :                     $$shift:
(1)  331/     5AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  331/     5AE : 9C                          ghi     RP1P2-1   ;long RP1P2 pairs start at RP1P2-1
(1)  331/     5AF : FE                          shl             ;set DF to the sign
(1)  331/     5B0 : 9C                          ghi     RP1P2-1   ;get the top byte back
(1)  331/     5B1 : 76                          shrc            ;shift one bit extending the sign
(1)  331/     5B2 : BC                          phi     RP1P2-1
(1)  331/     5B3 : 8C                          glo     RP1P2-1
(1)  331/     5B4 : 76                          shrc
(1)  331/     5B5 : AC                          plo     RP1P2-1
(1)  331/     5B6 : 9D                          ghi     RP1P2     ;get the top byte of the low order RP1P2
(1)  331/     5B7 : 76                          shrc            ;shift one bit extending the sign
(1)  331/     5B8 : BD                          phi     RP1P2
(1)  331/     5B9 : 8D                          glo     RP1P2     ;finish with the low byte of the 2nd RP1P2 of the pair
(1)  331/     5BA : 76                          shrc
(1)  331/     5BB : AD                          plo     RP1P2
(1)  332/     5BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  332/     5BC : 98                          ghi     RL8-1   ;long RL8 pairs start at RL8-1
(1)  332/     5BD : 76                          shrc            ;shift one bit extending the sign
(1)  332/     5BE : B8                          phi     RL8-1
(1)  332/     5BF : 88                          glo     RL8-1
(1)  332/     5C0 : 76                          shrc
(1)  332/     5C1 : A8                          plo     RL8-1
(1)  332/     5C2 : 99                          ghi     RL8     ;get the top byte of the low order RL8
(1)  332/     5C3 : 76                          shrc            ;shift one bit extending the sign
(1)  332/     5C4 : B9                          phi     RL8
(1)  332/     5C5 : 89                          glo     RL8     ;finish with the low byte of the 2nd RL8 of the pair
(1)  332/     5C6 : 76                          shrc
(1)  332/     5C7 : A9                          plo     RL8
(1)  333/     5C8 :                     
(1)  334/     5C8 : 2E                      dec memaddr		;cycle count
(1)  335/     5C9 : 8E                      glo memaddr
(1)  336/     5CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  337/     5CC :                         
(1)  338/     5CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  338/     5CC : D5                          sep     RRET
(1)  339/     5CD :                     
(1)  340/     5CD :                     	align 256
(1)  341/     600 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  342/     600 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  343/     600 :                     _divI4:
(1)  344/     600 : 22                      dec	sp	;leave a work area available
(1)  345/     601 : 98                      ghi RL8-1	;get the top of the dividend
(1)  346/     602 : 52                      str sp	;save the sign of the 1st arg
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 24 - 2/16/2013 16:48:08


(1)  347/     603 : FE                      shl
(1)  348/     604 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  349/     606 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  349/     606 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  349/     606 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/     607 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  349/     609 : A9                          plo     RL8
(1)  349/     60A : 99                          ghi     RL8
(1)  349/     60B : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  349/     60D : B9                          phi     RL8
(1)  349/     60E : 88                          glo     RL8-1
(1)  349/     60F : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  349/     611 : A8                          plo     RL8-1
(1)  349/     612 : 98                          ghi     RL8-1
(1)  349/     613 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  349/     615 : B8                          phi     RL8-1
(1)  349/     616 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  349/     616 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/     617 : FC 01                       ADI     (1)&255
(1)  349/     619 : A9                          plo     RL8
(1)  349/     61A : 99                          ghi     RL8
(1)  349/     61B : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  349/     61D : B9                          phi     RL8
(1)  349/     61E : 88                          glo     RL8-1
(1)  349/     61F : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  349/     621 : A8                          plo     RL8-1
(1)  349/     622 : 98                          ghi     RL8-1
(1)  349/     623 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  349/     625 : B8                          phi     RL8-1
(1)  350/     626 :                     $$pos1: ;1st is now +v, check 2nd
(1)  351/     626 : 9A                      ghi RL10-1
(1)  352/     627 : F3                      xor	
(1)  353/     628 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  354/     629 : 9A                      ghi RL10-1
(1)  355/     62A : FE                      shl
(1)  356/     62B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  357/     62D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  357/     62D :  (MACRO-2)                  alu4I   RL10,RL10,0xffffffff,xri,xri      ;flip all the bits
(1)  357/     62D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/     62E : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  357/     630 : AB                          plo     RL10
(1)  357/     631 : 9B                          ghi     RL10
(1)  357/     632 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  357/     634 : BB                          phi     RL10
(1)  357/     635 : 8A                          glo     RL10-1
(1)  357/     636 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  357/     638 : AA                          plo     RL10-1
(1)  357/     639 : 9A                          ghi     RL10-1
(1)  357/     63A : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  357/     63C : BA                          phi     RL10-1
(1)  357/     63D :  (MACRO-2)                  alu4i   RL10,RL10,1,adi,adci              ;and add 1
(1)  357/     63D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/     63E : FC 01                       ADI     (1)&255
(1)  357/     640 : AB                          plo     RL10
(1)  357/     641 : 9B                          ghi     RL10
(1)  357/     642 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  357/     644 : BB                          phi     RL10
(1)  357/     645 : 8A                          glo     RL10-1
(1)  357/     646 : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  357/     648 : AA                          plo     RL10-1
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 25 - 2/16/2013 16:48:08


(1)  357/     649 : 9A                          ghi     RL10-1
(1)  357/     64A : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  357/     64C : BA                          phi     RL10-1
(1)  358/     64D :                     $$pos2: ; both args now +v
(1)  359/     64D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  359/     64D : D4                          sep     RCALL
(1)  359/     64E : 05 00                       dw      _DIVU4
(1)  360/     650 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  361/     650 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  362/     651 : FE                      shl
(1)  363/     652 : 3B 74                   bnf $$done ;if the signs were different
(1)  364/     654 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  364/     654 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  364/     654 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/     655 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  364/     657 : A9                          plo     RL8
(1)  364/     658 : 99                          ghi     RL8
(1)  364/     659 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  364/     65B : B9                          phi     RL8
(1)  364/     65C : 88                          glo     RL8-1
(1)  364/     65D : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  364/     65F : A8                          plo     RL8-1
(1)  364/     660 : 98                          ghi     RL8-1
(1)  364/     661 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  364/     663 : B8                          phi     RL8-1
(1)  364/     664 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  364/     664 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/     665 : FC 01                       ADI     (1)&255
(1)  364/     667 : A9                          plo     RL8
(1)  364/     668 : 99                          ghi     RL8
(1)  364/     669 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  364/     66B : B9                          phi     RL8
(1)  364/     66C : 88                          glo     RL8-1
(1)  364/     66D : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  364/     66F : A8                          plo     RL8-1
(1)  364/     670 : 98                          ghi     RL8-1
(1)  364/     671 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  364/     673 : B8                          phi     RL8-1
(1)  365/     674 :                     $$done:
(1)  366/     674 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  366/     674 : D5                          sep     RRET
(1)  367/     675 :                     
(1)  368/     675 :                     _dubdabx:	
(1)  369/     675 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  370/     675 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  371/     675 :                     ;long interger is passed in rp1p2
(1)  372/     675 :                     ;buffer pointer is passed at sp+2+4
(1)  373/     675 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  374/     675 :                     ;r8-11 are used as temps
(1)  375/     675 :                     ;r8 is the working pointer
(1)  376/     675 :                     ;r9.0 is bit count(32)
(1)  377/     675 :                     ;r10.0 is digit count
(1)  378/     675 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  378/     675 : =>TRUE                      if      ('O'='O')
(1)  378/     675 :  (MACRO-2)                          ldAX    memAddr,SP,(2+4)
(1)  378/     675 : 82                          glo     SP
(1)  378/     676 : FC 06                       adi     ((2+4))#256
(1)  378/     678 : AE                          plo     MEMADDR
(1)  378/     679 : 92                          ghi     SP
(1)  378/     67A : 7C 00                       adci    ((2+4))>>8; was/256
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 26 - 2/16/2013 16:48:08


(1)  378/     67C : BE                          phi     MEMADDR
(1)  378/     67D : =>FALSE                     else
(1)  378/     67D :                                     ldAD    memAddr,SP
(1)  378/     67D : [378]                       endif
(1)  378/     67D : 4E                          lda     memAddr
(1)  378/     67E : B8                          phi     R8
(1)  378/     67F : 0E                          ldn     memAddr
(1)  378/     680 : A8                          plo     R8
(1)  379/     681 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  379/     681 : 88                          glo     R8
(1)  379/     682 : AF                          plo     R15
(1)  379/     683 : 98                          ghi     R8
(1)  379/     684 : BF                          phi     R15
(1)  380/     685 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  381/     687 : A9                  	plo r9
(1)  382/     688 :                     $$clrlp:	;clear the passed buffer
(1)  383/     688 : F8 00               	ldi 0	
(1)  384/     68A : 58                  	str r8	;clear a byte
(1)  385/     68B : 18                  	inc r8
(1)  386/     68C : 29                  	dec r9
(1)  387/     68D : 89                  	glo r9	;check the count
(1)  388/     68E : 3A 88               	bnz $$clrlp ;back for more
(1)  389/     690 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  389/     690 : 8F                          glo     R15
(1)  389/     691 : A8                          plo     R8
(1)  389/     692 : 9F                          ghi     R15
(1)  389/     693 : B8                          phi     R8
(1)  390/     694 :                     
(1)  391/     694 : F8 20               	ldi 32	;bit count
(1)  392/     696 : AF                  	plo r15
(1)  393/     697 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  394/     697 :                     $$cktop:
(1)  395/     697 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  396/     698 : FE                  	shl		;check for a 1
(1)  397/     699 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  398/     69B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  398/     69B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  398/     69C : FE                          shl             ;shift left once
(1)  398/     69D : AD                          plo     RP1P2     ; save it
(1)  398/     69E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  398/     69F : 7E                          shlc            ;shift one bit carrying
(1)  398/     6A0 : BD                          phi     RP1P2     ;save it
(1)  398/     6A1 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  398/     6A2 : 7E                          shlc
(1)  398/     6A3 : AC                          plo     RP1P2-1
(1)  398/     6A4 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  398/     6A5 : 7E                          shlc            ;gets the last shift
(1)  398/     6A6 : BC                          phi     RP1P2-1   ;and we're done
(1)  399/     6A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  400/     6A8 : 8F                  	glo r15
(1)  401/     6A9 : 3A 97               	bnz $$cktop	;
(1)  402/     6AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  403/     6AC :                     $$bitloop:
(1)  404/     6AC : F8 0A               	ldi 10	;digit count
(1)  405/     6AE : A9                  	plo r9
(1)  406/     6AF :                     $$dcklp:
(1)  407/     6AF : 08                  	ldn r8 	;pick up a digit
(1)  408/     6B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  409/     6B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  410/     6B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 27 - 2/16/2013 16:48:08


(1)  411/     6B6 : 58                  	str r8	;put it back
(1)  412/     6B7 :                     $$dnoadd:
(1)  413/     6B7 : 18                  	inc r8
(1)  414/     6B8 : 29                  	dec r9	;decrement digit count
(1)  415/     6B9 : 89                  	glo r9
(1)  416/     6BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  417/     6BC :                     	
(1)  418/     6BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  418/     6BC : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  418/     6BD : FE                          shl             ;shift left once
(1)  418/     6BE : AD                          plo     RP1P2     ; save it
(1)  418/     6BF : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  418/     6C0 : 7E                          shlc            ;shift one bit carrying
(1)  418/     6C1 : BD                          phi     RP1P2     ;save it
(1)  418/     6C2 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  418/     6C3 : 7E                          shlc
(1)  418/     6C4 : AC                          plo     RP1P2-1
(1)  418/     6C5 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  418/     6C6 : 7E                          shlc            ;gets the last shift
(1)  418/     6C7 : BC                          phi     RP1P2-1   ;and we're done
(1)  419/     6C8 :                     	
(1)  420/     6C8 : F8 0A               	ldi 10	;load the digit count again
(1)  421/     6CA : A9                  	plo r9
(1)  422/     6CB :                     ;r8 is now just past the units location and ready to walk back
(1)  423/     6CB :                     $$dshlp:
(1)  424/     6CB : 28                  	dec r8	;walk back from 0's position
(1)  425/     6CC : 08                  	ldn r8	;get the digit back
(1)  426/     6CD : 7E                  	shlc	;continue the shift
(1)  427/     6CE : BF                  	phi r15 ;save it for the carry test
(1)  428/     6CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  429/     6D1 : 58                  	str r8	;put the digit back
(1)  430/     6D2 : 9F                  	ghi r15	;now test for carry
(1)  431/     6D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  432/     6D5 : 29                  	dec r9	;decrement the digit count
(1)  433/     6D6 : 89                  	glo r9
(1)  434/     6D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  435/     6D9 :                     	
(1)  436/     6D9 : 2F                  	dec r15
(1)  437/     6DA : 8F                  	glo r15
(1)  438/     6DB : 3A AC               	bnz $$bitloop
(1)  439/     6DD :                     	
(1)  440/     6DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  440/     6DD : 88                          glo     R8
(1)  440/     6DE : AF                          plo     R15
(1)  440/     6DF : 98                          ghi     R8
(1)  440/     6E0 : BF                          phi     R15
(1)  441/     6E1 : F8 0A               	ldi 10		;digit count again
(1)  442/     6E3 : A9                  	plo r9
(1)  443/     6E4 :                     $$upnxt:
(1)  444/     6E4 : 08                  	ldn r8		;get digit
(1)  445/     6E5 : F9 30               	ori 0x30	;make ascii
(1)  446/     6E7 : 58                  	str r8		;put it back
(1)  447/     6E8 : 18                  	inc r8		;next digit
(1)  448/     6E9 : 29                  	dec r9		;counter
(1)  449/     6EA : 89                  	glo r9
(1)  450/     6EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  451/     6ED :                     	
(1)  452/     6ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  453/     6EF : A9                  	plo r9
(1)  454/     6F0 :                     $$cknext:
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(lcc1802EpiloNG.inc) - page 28 - 2/16/2013 16:48:08


(1)  455/     6F0 : 0F                  	ldn r15		;check digit
(1)  456/     6F1 : FF 30               	smi 0x30	;for '0'
(1)  457/     6F3 : 3A FA               	bnz $$done
(1)  458/     6F5 : 1F                  	inc r15		;next digit
(1)  459/     6F6 : 29                  	dec r9		;reduce count
(1)  460/     6F7 : 89                  	glo r9
(1)  461/     6F8 : 3A F0               	bnz $$cknext
(1)  462/     6FA :                     $$done:
(1)  463/     6FA : (MACRO)             	cretn
(1)  463/     6FA : D5                          sep     RRET
(1)  464/     6FB :                     	
(1)  465/     6FB :                     	
(1)  466/     6FB :                     _modU4:	;32 bit unsigned remainder
(1)  467/     6FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  468/     6FB : (MACRO)                 Ccall _divU4
(1)  468/     6FB : D4                          sep     RCALL
(1)  468/     6FC : 05 00                       dw      _DIVU4
(1)  469/     6FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  469/     6FE :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  469/     6FE : 8D                          glo     RP1P2
(1)  469/     6FF : A9                          plo     RL8
(1)  469/     700 : 9D                          ghi     RP1P2
(1)  469/     701 : B9                          phi     RL8
(1)  469/     702 :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  469/     702 : 8C                          glo     RP1P2-1
(1)  469/     703 : A8                          plo     RL8-1
(1)  469/     704 : 9C                          ghi     RP1P2-1
(1)  469/     705 : B8                          phi     RL8-1
(1)  470/     706 : (MACRO)                 Cretn
(1)  470/     706 : D5                          sep     RRET
(1)  471/     707 :                         
(1)  472/     707 :                     _modI4:	;32 bit signed remainder
(1)  473/     707 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/     707 : (MACRO)                 Ccall _divI4
(1)  474/     707 : D4                          sep     RCALL
(1)  474/     708 : 06 00                       dw      _DIVI4
(1)  475/     70A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  475/     70A :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  475/     70A : 8D                          glo     RP1P2
(1)  475/     70B : A9                          plo     RL8
(1)  475/     70C : 9D                          ghi     RP1P2
(1)  475/     70D : B9                          phi     RL8
(1)  475/     70E :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  475/     70E : 8C                          glo     RP1P2-1
(1)  475/     70F : A8                          plo     RL8-1
(1)  475/     710 : 9C                          ghi     RP1P2-1
(1)  475/     711 : B8                          phi     RL8-1
(1)  476/     712 : (MACRO)                 Cretn
(1)  476/     712 : D5                          sep     RRET
(1)  477/     713 :                         
(1)  478/     713 :                     	
(1)  479/     713 :                      
     613/     713 :                     	include putc.inc
(1)    1/     713 :                     ;putc.inc contains character output runtime routine for LCC-xr18
(1)    2/     713 :                     ;input is in bottom byte of regArg1 (r13 as of the christmas compiler)
(1)    3/     713 :                     _putc:
(1)    4/     713 :                     _out5:	
(1)    5/     713 : 8C                  	glo	regArg1
(1)    6/     714 : 22                  	dec	sp
(1)    7/     715 : 52                  	str	sp
 AS V1.42 Beta [Bld 86] - source file interrupt.asm(putc.inc) - page 29 - 2/16/2013 16:48:08


(1)    8/     716 : 65                  	out	5
(1)    9/     717 : (MACRO)             	Cretn
(1)    9/     717 : D5                          sep     RRET
     614/     718 :                     
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 30 - 2/16/2013 16:48:08


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP66 :                    6AC C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB64 :                  596 C |
 CKNEXT66 :                     6F0 C |  CKTOP66 :                      697 C |
 CLRLP66 :                      688 C | *CONSTPI :        3.141592653589793 - |
*DATE :                   2/16/2013 - |  DCKLP66 :                      6AF C |
 DIVLOOP16_1661 :               452 C | *DIVSETBIT16_1661 :             484 C |
 DIVSKIP16_1661 :               481 C |  DIVSKIPCLEAR16_1661 :          488 C |
 DIVSKIPFINALADD16_1661 :       49A C |  DIVSUB16_1661 :                473 C |
 DNOADD66 :                     6B7 C |  DONE62 :                       4D3 C |
 DONE65 :                       674 C |  DONE66 :                       6FA C |
 DSHLP66 :                      6CB C |  ENDLP63 :                      561 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  INTX :                         300 C |
*L1 :                           2AF C | *L11 :                          331 C |
 L4 :                           227 C |  L5 :                           2AC C |
 L9 :                           2AC C |  LCC1802INIT :                  334 C |
*LISTON :                         1 - |  LOOP63 :                       50F C |
*MACEXP :                         1 - |  MEMADDR :                        E - |
 MLOOP64 :                      577 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP59 :                       41E C |
 MULTLOOP16_1660 :              42B C |  MULTSKIP16_1660 :              43D C |
*NESTMAX :                      100 - |  NORESTORE63 :                  55D C |
*PACKING :                        0 - | *PADDING :                        1 - |
 POS162 :                       4B3 C |  POS165 :                       626 C |
 POS262 :                       4C3 C |  POS265 :                       64D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - | *R13 :                            D - |
*R14 :                            E - |  R15 :                            F - |
*R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
*RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - | *RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SHIFT64 :                      5AE C |  SP :                             2 - |
*TIME :                    16:48:08 - | *TRUE :                           1 - |
 UPNXT66 :                      6E4 C | *VERSION :                     142F - |
 _0000051 :                     34E C |  _CALL :                        401 C |
 _DIE51 :                       351 C |  _DIVI2 :                       4A4 C |
 _DIVI4 :                       600 C |  _DIVU2 :                       449 C |
 _DIVU4 :                       500 C | *_DUBDABX :                     675 C |
*_INT :                         2C4 C |  _MAIN :                        203 C |
*_MODI2 :                       362 C | *_MODI4 :                       707 C |
*_MODU2 :                       35A C | *_MODU4 :                       6FB C |
*_MULU2 :                       423 C | *_MULU4 :                       566 C |
 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 31 - 2/16/2013 16:48:08


*_ONEMS :                       41C C |  _OUT4 :                        36A C |
*_OUT5 :                        713 C | *_PUTC :                        713 C |
 _RETURN :                      412 C | *_SETQOFF :                     358 C |
*_SETQON :                      356 C |  _TIME :                        332 C |
 _VIDEOBUFFER :                   3 C |  __FORW0 :                      32B C |
 __INTS :                       305 C |

    125 symbols
     54 unused symbols

 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 32 - 2/16/2013 16:48:08


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
INC4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RESERVE                               | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
ZEXT                                  | ZEXT4                                

     70 macros

 AS V1.42 Beta [Bld 86] - source file interrupt.asm - page 33 - 2/16/2013 16:48:08


  codepages:
  ----------

STANDARD (0 changed characters)


0.04 seconds assembly time

   1861 lines source file
   2442 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
