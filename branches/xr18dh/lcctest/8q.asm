; generated by lcc-xr18DH $Version: 5.0 - XR18DH $ on Tue Oct 08 10:42:07 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloDH.inc
	listing on
_main: ;copt is peeping your size 8 frame!
	pushr r7
	reserve 4; save room for outgoing arguments
;{
;	printf("generates 92 solutions. \n15863724 is first\n\n");
	ldaD R12,L2; reg:acon
	Ccall _printf
;	for (i = 0; i < 15; i++)
	ld2z R7
L3:
;		up[i] = down[i] = 1;
	ldaD R11,1; reg:acon
	shlR2R	R10,R7	;opt6
	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
	st2 R11,'O',R10,(_up); ASGNI2(addr,reg)*;
L4:
;	for (i = 0; i < 15; i++)
	incm R7,1
	jcI2I r7,15,lbnf,L3  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;	for (i = 0; i < 8; i++)
	ld2z R7
L7:
;		rows[i] = 1;
	ldaD R11,1; reg:acon
	shlR2R	R10,R7	;opt6
	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
L8:
;	for (i = 0; i < 8; i++)
	incm R7,1
	jcI2I r7,8,lbnf,L7  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;	queens(0);
	ld2z R12
	Ccall _queens; CALLI2(ar)
;	printf("...and...\n84136275 is last\nTook about 25 sec on 1.6mhz elf with Christmas compiler\n");
	ldaD R12,L11; reg:acon
	Ccall _printf
;	printf("Took about 22 sec on 1.6mhz elf with Birthday compiler\n");
	ldaD R12,L12; reg:acon
	Ccall _printf
;	printf("Took about 17 sec on 1.6mhz elf with St Judy's compiler(from run1802 to 92nd solution)\n");
	ldaD R12,L13; reg:acon
	Ccall _printf
;	printf("Took about 15 sec on 1.6mhz elf with the Rhinestone Compiler(from run1802 to 92nd solution)\n");
	ldaD R12,L14; reg:acon
	Ccall _printf
;	return 0;
	ld2z R15
L1:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_queens:		;framesize=10
	pushf r6	;opt11
	pushl r7	;opt11
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2053) 1
;{
;	for (r = 0; r < 8; r++){
	ld2z R6
L16:
;		if (rows[r] && up[r-c+7] && down[r+c]) {
	shlR2R	R11,R6	;opt6
	ld2 R11,'O',R11,(_rows) ;reg:INDIRI2(addr)
	jzU2 r11,L20; EQ 0
	alu2 R11,R6,R7,sm,smb
	shl2I R11,1
	ld2 R11,'O',R11,(_up+14) ;reg:INDIRI2(addr)
	jzU2 r11,L20; EQ 0
	alu2 R11,R6,R7,add,adc; ADDI2(r,r)
	shl2I R11,1
	ld2 R11,'O',R11,(_down) ;reg:INDIRI2(addr)
	jzU2 r11,L20; EQ 0
;			rows[r] = up[r-c+7] = down[r+c] = 0;
	ld2z R11
	alu2 R10,R6,R7,add,adc; ADDI2(r,r)
	shl2I R10,1
	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
	alu2 R10,R6,R7,sm,smb
	shl2I R10,1
	st2 R11,'O',R10,(_up+14); ASGNI2(addr,reg)*;
	shlR2R	R10,R6	;opt6
	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
;			x[c] = r;
	shlR2R	R11,R7	;opt6
	st2 R6,'O',R11,(_x); ASGNI2(addr,reg)*;
;			if (c == 7)
	jneU2I r7,7,L24; NE
;				print();
	Ccall _print; CALLI2(ar)
	lbr L25
L24:
;				queens(c + 1);
	cpy2 R12,R7 ;reg:ADDI2(consm,reg)
	incm R12,1
	Ccall _queens; CALLI2(ar)
L25:
;			rows[r] = up[r-c+7] = down[r+c] = 1;
	ldaD R11,1; reg:acon
	alu2 R10,R6,R7,add,adc; ADDI2(r,r)
	shl2I R10,1
	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
	alu2 R10,R6,R7,sm,smb
	shl2I R10,1
	st2 R11,'O',R10,(_up+14); ASGNI2(addr,reg)*;
	shlR2R	R10,R6	;opt6
	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
;		}
L20:
;	}
L17:
;	for (r = 0; r < 8; r++){
	incm R6,1
	jcI2I r6,8,lbnf,L16  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ld2z R15
;}
L15:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	Cretn

_print:		;framesize=8
	pushr r7
	reserve 4; save room for outgoing arguments
;{
;	for (k = 0; k < 8; k++)
	ld2z R7
L28:
;		printf("%c", x[k]+'1');
	ldaD R12,L32; reg:acon
	shlR2R	R11,R7	;opt6
	ld2 R11,'O',R11,(_x) ;reg:INDIRI2(addr)
	ldA2 R13,'O',R11,(49); reg:addr
	Ccall _printf
L29:
;	for (k = 0; k < 8; k++)
	incm R7,1
	jcI2I r7,8,lbnf,L28  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;	printf("\n");
	ldaD R12,L33; reg:acon
	Ccall _printf
	ld2z R15
;}
L27:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

_strncmp:		;framesize=6
	pushf r6	;opt11
	pushl r7	;opt11
	ld2 R7,'O',sp,(10); reg:INDIRU2(addr)
;{
;    for ( ; n > 0; s1++, s2++, --n)
	lbr L38
L35:
;	if (*s1 != *s2)
	ldn1 R11,R12	;opt14
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldn1 R10,R13	;opt14
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L39; EQI2(reg,reg)
;	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	ldn1 R11,R12	;opt14
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldn1 R10,R13	;opt14
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbdf,L42; GE is flipped test from LT
	ldaD R6,-1; reg:acon
	lbr L43
L42:
	ldaD R6,1; reg:acon
L43:
	cpy2 R15,R6 ;LOADI2(reg)*
	lbr L34
L39:
;	else if (*s1 == '\0')
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L44; NEI2(CVUI2(reg),con0)
;	    return 0;
	ld2z R15
	lbr L34
L44:
L36:
;    for ( ; n > 0; s1++, s2++, --n)
	incm R12,1
	incm R13,1
	decm R7,1
L38:
	jnzU2 r7,L35; NE 0
;    return 0;
	ld2z R15
L34:
	popr r7
	popr r6
	Cretn

_strlen:		;framesize=4
	pushr r7
;{
;	unsigned int slen = 0 ;
	ld2z R7
	lbr L48
L47:
;	while (*str != 0) {
;      slen++ ;
	incm R7,1
;      str++ ;
	incm R12,1
;   }
L48:
;	while (*str != 0) {
	ldn1 R11,R12;reg:  INDIRU1(indaddr)
	jnzU1 r11,L47; NEI2(CVUI2(reg),con0)
;   return slen;
	cpy2 R15,R7 ;LOADU2(reg)*
L46:
	popr r7
	Cretn

_printstr:		;framesize=8
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L52
L51:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg) ;opt1
	incm R7,1
	ldn1 R13,R11	;opt14
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out; CALLI2(ar)
L52:
	ldn1 R11,R7;reg:  INDIRU1(indaddr)
	jnzU1 r11,L51; NEI2(CVUI2(reg),con0)
;}
L50:
	release 4; release room for outgoing arguments
	popr r7
	Cretn

	align 4
_round_nums:
	dd 0x3f000000
	dd 0x3d4ccccd
	dd 0x3ba3d70a
	dd 0x3a03126f
	dd 0x3851b717
	dd 0x36a7c5ac
	dd 0x350637bd
	dd 0x3356bf95
	align 4
_mult_nums:
	dd 0x3f800000
	dd 0x41200000
	dd 0x42c80000
	dd 0x447a0000
	dd 0x461c4000
	dd 0x47c35000
	dd 0x49742400
	dd 0x4b189680
_ftoa:		;framesize=80
	reserve 62; save room for local variables
	pushf r0	;opt11
	pushm r1	;opt11.1
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked&floaty
	ld2 R1,'O',sp,(86); reg:INDIRU2(addr)
;{
;   char *output = outbfr ;
	ld2 R0,'O',sp,(84);reg:  INDIRP2(addr)
;   if (flt < 0.0) {
	ld4 RL10,'D',(L57),0;INDIRF4(addr)
	jcF4 RL6,RL10,lbdf,L55;GEF4(reg,reg) - reverse test
;      *output++ = '-' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1
	incm R0,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      flt *= -1.0 ;
	ld4 RL8,'D',(L58),0;INDIRF4(addr)
	cpy4 RL10,RL6; LOADU4(reg)
	Ccall fp_mul ;MULF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   } else {
	lbr L56
L55:
;      if (use_leading_plus) {
	lbr L59
;         *output++ = '+' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1
	incm R0,1
	ldaD R10,43; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;      }
L59:
;   }
L56:
;   if (dec_digits < 8) {
	jcI2I r1,8,lbdf,L61; GE is flipped test from LT
;      flt += round_nums[dec_digits] ;
	cpy4 RL8,RL6; LOADU4(reg)
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
	Ccall fp_add ;ADDF4(reg,reg)
	cpy4 RL6,RL8; LOADU4(reg)
;   }
L61:
;	mult=mult_nums[dec_digits];
	cpy2 R11,R1
	shl2I R11,2
	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
	st4 RL10,'O',sp,(68); ASGNF4(addr,reg)
;   wholeNum = flt;
	cpy4 RL8,RL6; LOADU4(reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(72)
;   decimalNum = ((flt - wholeNum) * mult);
	cpy4 RL8,RL6; LOADU4(reg)
	st4 RL8,'O',sp,(16); ASGNF4(addr,reg)
	ld4 RL8,'O',sp,(72);reg:  INDIRI4(addr)
	Ccall cvif4; emit2
	cpy4 RL10,RL8; LOADU4(reg)
	ld4 RL8,'O',sp,(16);INDIRF4(addr)
	Ccall fp_sub ;SUBF4(reg,reg)
	ld4 RL10,'O',sp,(68);INDIRF4(addr)
	Ccall fp_mul ;MULF4(reg,reg)
	ccall cvfi4; CVFI4(reg) convert float to long
	st4 RL8,'O',sp,(64)
;   strcpy(output,dubdabx(wholeNum,output,1));
	ld4 Rp1p2,'O',sp,(72);reg:  INDIRI4(addr)
	st2 R0,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;   output+=strlen(output);
	cpy2 R12,R0 ;LOADP2(reg)
	Ccall _strlen;CALLU2(ar)*
	alu2 R0,R15,R0,add,adc
;   if (dec_digits > 0) {
	jzU2 r1,L63; EQ 0
;		*output++ = '.' ;
	cpy2 R11,R0 ;LOADP2(reg) ;opt1
	incm R0,1
	ldaD R10,46; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
	ld4 Rp1p2,'O',sp,(64);reg:  INDIRI4(addr)
	st2 R0,'O',sp,(4); arg+f**
	cpy2 R11,R1 ;LOADI2(reg)*
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R0 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	}
L63:
;   return outbfr;
	ld2 R15,'O',sp,(84);reg:  INDIRP2(addr)
L54:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 62; release room for local variables 
	Cretn

_itoa:		;framesize=16
	reserve 2; save room for local variables
	pushf r0	;opt11
	pushm r1	;opt11.1
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	reserve 4; save room for outgoing arguments
	st2 R12,'O',sp,(16); flag1 
	st2 R13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R0
;	char * bptr; bptr=buffer;
	mvc2 R11,'O',sp,(12),'O',sp,(18)	;opt12.3
;	if (s<0){
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L66; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(12);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(12);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(12); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R6,R11 ;LOADU2(reg)*
;	} else{
	lbr L67
L66:
;		n=s;
	ld2 R11,'O',sp,(16) ;reg:INDIRI2(addr)
	cpy2 R6,R11 ;LOADU2(reg)*
;	}
L67:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L69
L68:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R1
	lbr L74
L71:
L72:
	incm R1,1
	alu2 R6,R6,R7,sm,smb
L74:
	jcU2 r6,r7,lbdf,L71 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	jnzU2 r0,L78; NE 0
	jnzU2 r1,L78; NE 0
	jneU2I r7,1,L75; NE
L78:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(12);reg:  INDIRP2(addr)
	ldA2 R10,'O',R1,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(12);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(12); ASGNP2
;			flag='y';
	ldaD R0,121; reg:acon
;		}
L75:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R7,R15 ;LOADU2(reg)*
;	}
L69:
;	while(k>0){
	jnzU2 r7,L68; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(12);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(18);reg:  INDIRP2(addr)
L65:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_ltoa:		;framesize=16
	pushf r1	;opt11
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	reserve 8; save room for outgoing arguments
	cpy4 RL6,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R1,'O',sp,(20);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL6,RL10,lbdf,L80; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R1 ;LOADP2(reg) ;opt1
	incm R1,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
;	}
L80:
;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL6; LOADI4*
	st2 R1,'O',sp,(4); arg+f**
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R1 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(20);reg:  INDIRP2(addr)
L79:
	release 8; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	Cretn

_printint:		;framesize=14
	reserve 12
	st2 R12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(4); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(4); reg:addr
	Ccall _printstr
;}
L82:
	release 12
	Cretn

_printlint:		;framesize=20
	reserve 18
	st2 R12,'O',sp,(20); flag1 
	st2 R13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(20);reg:  INDIRI4(addr)
	ldA2 R11,'O',sp,(6); reg:addr
	st2 R11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L83:
	release 18
	Cretn

_printflt:		;framesize=30
	reserve 28
	st2 R12,'O',sp,(30); flag1 
	st2 R13,'O',sp,(32); flag1 
;void printflt(float s){ //print a float
;	printstr(ftoa(s,buffer,3));
	ld4 Rp1p2,'O',sp,(30);INDIRF4(addr)
	ldA2 R11,'O',sp,(8); reg:addr
	st2 R11,'O',sp,(4); arg+f**
	ldaD R11,3; reg:acon
	st2 R11,'O',sp,(6); arg+f**
	Ccall _ftoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L84:
	release 28
	Cretn

_putxn:		;framesize=6
	reserve 4
	st1 R12,'O',sp,(6)	; opt4 
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L86; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L87
L86:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L87:
;}
L85:
	release 4
	Cretn

_putx:		;framesize=6
	reserve 4
	st1 R12,'O',sp,(6)	; opt4 
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L88:
	release 4
	Cretn

_printf:		;framesize=16
	reserve 2; save room for local variables
	pushf r0	;opt11
	pushm r1	;opt11.1
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	reserve 4; save room for outgoing arguments
	st2 R12,'O',sp,(16); flag1 
	st2 R13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R1
;	int * this=(int *)&ptr;
	ldA2 R6,'O',sp,(16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R6,2
	incm R1,1
	lbr L91
L90:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L93;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L94
L93:
;			c=*ptr++;
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R0,R7
	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	jcI2I r0,99,lbnf,L114  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	jnI2I r0,108,lbnf,L115; GT reverse  the subtraction
	shlR2R	R11,R0	;opt6
	ld2 R11,'O',R11,(L116-198);reg:  INDIRP2(addr)
	jumpv r11; JUMPV(reg)
L116:
	dw L100
	dw L98
	dw L95
	dw L109
	dw L95
	dw L95
	dw L98
	dw L95
	dw L95
	dw L102
L114:
	jeqU2I r0,88,L101;EQI2(reg,con)
	lbr L95
L115:
	ldaD R11,115; reg:acon
	jeqI2 r0,r11,L99; EQI2(reg,reg)
	jcI2 r0,r11,lbnf,L95; LT=lbnf i.e. subtract B from A and jump if borrow 
L118:
	jeqU2I r0,120,L101;EQI2(reg,con)
	lbr L95
L98:
;					printint(*this++);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2 R12,R11	;opt9.1
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L96
L99:
;					printstr((char*) *this++);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2s R11,R11	;opt9
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L96
L100:
;					putc((unsigned int) *this++);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2s R11,R11	;opt9
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L96
L101:
;					putx(((unsigned int) *this)>>8);
	ldn2 R11,R6	;opt9.1
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2s R11,R11	;opt9
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R1,1
;					break;
	lbr L96
L102:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	ldn1 R11,R11	;opt14
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L103; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(13); ASGNU1
;						if (argslot&1) {
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L105; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L105:
;						if(xord=='d'){
	ld1 R11,'O',sp,(13)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L107; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R6,4
;						} else{
	lbr L108
L107:
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R6	;opt9.1
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2s R11,R11	;opt9
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ldn2 R11,R6	;opt9.1
	ghi	R11	;opt2
	plo	R11
	ldi	0
	phi	R11	
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,2
	ldn2s R11,R11	;opt9
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L108:
;						argslot+=2;
	incm R1,2
;						break;
	lbr L96
L103:
L109:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	ldn1 R11,R11	;opt14
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L110; EQ 0
;						if (argslot&1) { //adjust alignment
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jzU2 r11,L112; EQ 0
;							this++;
	incm R6,2
;							argslot++;
	incm R1,1
;						}
L112:
;						printflt(*(float *)this);//treats "this" as a pointer to float
	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
	Ccall _printflt
;						this+=2;				// and advances it 4 bytes
	incm R6,4
;						argslot+=2;
	incm R1,2
;						break;
	lbr L96
L110:
L95:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L96:
;		} //%
L94:
;	} //while
L91:
;    while(*ptr) {
	ld2 R11,'O',sp,(16);reg:  INDIRP2(addr)
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	jnzU1 r11,L90; NEI2(CVUI2(reg),con0)
;} //prtf
L89:
	release 4; release room for outgoing arguments
	popr r7
	popr r6
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_exit:		;framesize=6
	reserve 4
	st2 R12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L120; reg:acon
	ld2 R13,'O',sp,(6) ;reg:INDIRI2(addr)
	Ccall _printf
L121:
;	while(1);
L122:
	lbr L121
;}
L119:
	release 4
	Cretn

_memcmp:		;framesize=10
	pushf r0	;opt11
	pushm r1	;opt11.1
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	ld2 R7,'O',sp,(14); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R6
;    p1 = (unsigned char *)Ptr1;
	cpy2 R1,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L126
L125:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R1 ;LOADP2(reg) ;opt1
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg) ;opt1
	incm R0,1
	ldn1 R11,R11	;opt14
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldn1 R10,R10	;opt14
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R6,R11,R10,sm,smb
;    }
L126:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jzU2 r11,L128; EQ 0
	jzU2 r6,L125; EQ 0
L128:
;    return v;
	cpy2 R15,R6 ;LOADI2(reg)*
L124:
	popr r7
	popr r6
	popr r1
	popr r0
	Cretn

_memcpy:		;framesize=8
	pushf r1	;opt11
	pushm r6	;opt11.1
	pushl r7	;opt11.1
	ld2 R7,'O',sp,(12); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R6,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R1,R13 ;LOADP2(reg)
	lbr L131
L130:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,1
	cpy2 R10,R1 ;LOADP2(reg) ;opt1
	incm R1,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L131:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L130; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L129:
	popr r7
	popr r6
	popr r1
	Cretn

_memset:		;framesize=6
	pushf r6	;opt11
	pushl r7	;opt11
	ld2 R7,'O',sp,(10); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R6,R12 ;LOADP2(reg)
	lbr L135
L134:
;        *p++ = (unsigned char)c;
	cpy2 R11,R6 ;LOADP2(reg) ;opt1
	incm R6,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L135:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L134; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L133:
	popr r7
	popr r6
	Cretn

_nstdlibincluder:		;framesize=2
;void nstdlibincluder(){
;	asm("\tinclude nstdlib.inc\n"); //strcpy, strcmp
	include nstdlib.inc
;}
L137:
	Cretn

_x:
	db 16 dup (0); zerofill global
_rows:
	db 16 dup (0); zerofill global
_down:
	db 30 dup (0); zerofill global
_up:
	db 30 dup (0); zerofill global
L120:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	align 4
L58:
	dd 0xbf800000
	align 4
L57:
	dd 0x0
L33:
	db 10
	db 0
L32:
	db 37
	db 99
	db 0
L14:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 49
	db 53
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 116
	db 104
	db 101
	db 32
	db 82
	db 104
	db 105
	db 110
	db 101
	db 115
	db 116
	db 111
	db 110
	db 101
	db 32
	db 67
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 40
	db 102
	db 114
	db 111
	db 109
	db 32
	db 114
	db 117
	db 110
	db 49
	db 56
	db 48
	db 50
	db 32
	db 116
	db 111
	db 32
	db 57
	db 50
	db 110
	db 100
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 41
	db 10
	db 0
L13:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 49
	db 55
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 83
	db 116
	db 32
	db 74
	db 117
	db 100
	db 121
	db 39
	db 115
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 40
	db 102
	db 114
	db 111
	db 109
	db 32
	db 114
	db 117
	db 110
	db 49
	db 56
	db 48
	db 50
	db 32
	db 116
	db 111
	db 32
	db 57
	db 50
	db 110
	db 100
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 41
	db 10
	db 0
L12:
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 50
	db 50
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 66
	db 105
	db 114
	db 116
	db 104
	db 100
	db 97
	db 121
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 10
	db 0
L11:
	db 46
	db 46
	db 46
	db 97
	db 110
	db 100
	db 46
	db 46
	db 46
	db 10
	db 56
	db 52
	db 49
	db 51
	db 54
	db 50
	db 55
	db 53
	db 32
	db 105
	db 115
	db 32
	db 108
	db 97
	db 115
	db 116
	db 10
	db 84
	db 111
	db 111
	db 107
	db 32
	db 97
	db 98
	db 111
	db 117
	db 116
	db 32
	db 50
	db 53
	db 32
	db 115
	db 101
	db 99
	db 32
	db 111
	db 110
	db 32
	db 49
	db 46
	db 54
	db 109
	db 104
	db 122
	db 32
	db 101
	db 108
	db 102
	db 32
	db 119
	db 105
	db 116
	db 104
	db 32
	db 67
	db 104
	db 114
	db 105
	db 115
	db 116
	db 109
	db 97
	db 115
	db 32
	db 99
	db 111
	db 109
	db 112
	db 105
	db 108
	db 101
	db 114
	db 10
	db 0
L2:
	db 103
	db 101
	db 110
	db 101
	db 114
	db 97
	db 116
	db 101
	db 115
	db 32
	db 57
	db 50
	db 32
	db 115
	db 111
	db 108
	db 117
	db 116
	db 105
	db 111
	db 110
	db 115
	db 46
	db 32
	db 10
	db 49
	db 53
	db 56
	db 54
	db 51
	db 55
	db 50
	db 52
	db 32
	db 105
	db 115
	db 32
	db 102
	db 105
	db 114
	db 115
	db 116
	db 10
	db 10
	db 0
	include lcc1802EpiloDH.inc
	include LCC1802fp.inc
	include IO1802.inc
