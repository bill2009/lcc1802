 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 1 - 2/28/2013 15:08:33


       1/       0 :                     ; generated by lcc-xr18ng $Version: 2.3 - XR18NG - The Birthday Compiler $ on Thu Feb 28 15:08:16 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  757/       0 :                     	listing	on
(1)  758/       0 : C0 41 A1            	lbr	lcc1802Init
(1)  759/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _mymac:
      15/       4 : 74                  	db 116
      16/       5 : 69                  	db 105
      17/       6 : 69                  	db 105
      18/       7 : 2D                  	db 45
      19/       8 : 30                  	db 48
      20/       9 : 31                  	db 49
      21/       A :                     _myip:
      22/       A : C0                  	db 192
      23/       B : A8                  	db 168
      24/       C : 01                  	db 1
      25/       D : BF                  	db 191
      26/       E :                     _hisport:
      27/       E : 00 50               	dw 80
      28/      10 :                     _setup:
      29/      10 : (MACRO)             	reserve 8
      30/      1A :                     ;void setup () {
      31/      1A :                     ;  printf("\nEnc28j60 first try\n");
      32/      1A : (MACRO)             	ldaD R12,L2
      33/      20 : (MACRO)             	Ccall _printf
      34/      23 :                     ;  printf("MAC & IP ");
      35/      23 : (MACRO)             	ldaD R12,L3
      36/      29 : (MACRO)             	Ccall _printf
      37/      2C :                     ;  hexDump(mymac,6);
      38/      2C : (MACRO)             	ldaD R12,_mymac
      39/      32 : (MACRO)             	ldaD R13,6
      40/      38 : (MACRO)             	Ccall _hexDump
      41/      3B :                     ;  hexDump(myip,4);
      42/      3B : (MACRO)             	ldaD R12,_myip
      43/      41 : (MACRO)             	ldaD R13,4
      44/      47 : (MACRO)             	Ccall _hexDump
      45/      4A :                     ;  if (ethbegin(700) == 0)
      46/      4A : (MACRO)             	ldaD R12,700
      47/      50 : (MACRO)             	Ccall _ethbegin
      48/      53 : (MACRO)             	cpy2 R11,R15
      49/      57 : (MACRO)             	cpy1 R11,R11
      50/      59 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      51/      5C : (MACRO)             	jneU2I r11,0,L4; NE
      52/      68 :                     ;    printf( "Failed to access Ethernet controller\n");
      53/      68 : (MACRO)             	ldaD R12,L6
      54/      6E : (MACRO)             	Ccall _printf
      55/      71 :                     L4:
      56/      71 :                     ;  printf("readRegByte(ECON1) returns: %x\n",readRegByte(ECON1));
      57/      71 : (MACRO)             	ldaD R12,31
      58/      77 : (MACRO)             	Ccall _readRegByte
      59/      7A : (MACRO)             	ldaD R12,L7
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 2 - 2/28/2013 15:08:33


      60/      80 : (MACRO)             	cpy2 R11,R15
      61/      84 : (MACRO)             	cpy1 R13,R11
      62/      86 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
      63/      89 : (MACRO)             	Ccall _printf
      64/      8C :                     ;  printf("readRegByte(EREVID) returns: %x\n",readRegByte(EREVID));
      65/      8C : (MACRO)             	ldaD R12,114
      66/      92 : (MACRO)             	Ccall _readRegByte
      67/      95 : (MACRO)             	ldaD R12,L8
      68/      9B : (MACRO)             	cpy2 R11,R15
      69/      9F : (MACRO)             	cpy1 R13,R11
      70/      A1 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
      71/      A4 : (MACRO)             	Ccall _printf
      72/      A7 :                     ;  printf("readRegByte(ESTAT) returns: %x\n",readRegByte(ESTAT));
      73/      A7 : (MACRO)             	ldaD R12,29
      74/      AD : (MACRO)             	Ccall _readRegByte
      75/      B0 : (MACRO)             	ldaD R12,L9
      76/      B6 : (MACRO)             	cpy2 R11,R15
      77/      BA : (MACRO)             	cpy1 R13,R11
      78/      BC : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
      79/      BF : (MACRO)             	Ccall _printf
      80/      C2 :                     ;  printf("MACtail readback: %x:%x\n",readRegByte(MAADR1),readRegByte(MAADR0));
      81/      C2 : (MACRO)             	ldaD R12,224
      82/      C8 : (MACRO)             	Ccall _readRegByte
      83/      CB : (MACRO)             	cpy2 R11,R15 ;LOADI2
      84/      CF : (MACRO)             	st2 R11,'O',sp,(-4+10)
      85/      DC : (MACRO)             	ldaD R12,225
      86/      E2 : (MACRO)             	Ccall _readRegByte
      87/      E5 : (MACRO)             	ldaD R12,L10
      88/      EB : (MACRO)             	ld2 R10,'O',sp,(-4+10)
      89/      F7 : (MACRO)             	cpy1 R13,R10
      90/      F9 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
      91/      FC : (MACRO)             	cpy2 R11,R15
      92/     100 : (MACRO)             	cpy1 R11,R11
      93/     102 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      94/     105 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
      95/     112 : (MACRO)             	Ccall _printf
      96/     115 :                     ;  printf("and we're done\n");
      97/     115 : (MACRO)             	ldaD R12,L11
      98/     11B : (MACRO)             	Ccall _printf
      99/     11E :                     ;}
     100/     11E :                     L1:
     101/     11E : (MACRO)             	release 8
     102/     126 : (MACRO)             	Cretn
     103/     127 :                     
     104/     127 :                     _loop:
     105/     127 : (MACRO)             	reserve 8
     106/     131 :                     ;void loop () {
     107/     131 :                     ;  len = encpacketReceive();
     108/     131 : (MACRO)             	Ccall _encpacketReceive
     109/     134 : (MACRO)             	st2 R15,'O',sp,(-4+10); ASGNU2(addr,reg)
     110/     141 :                     ;  pos = tcppacketLoop(len);
     111/     141 : (MACRO)             	ld2 R12,'O',sp,(-4+10); INDIRU2(addr)
     112/     14D : (MACRO)             	Ccall _tcppacketLoop
     113/     150 : (MACRO)             	st2 R15,'O',sp,(-6+10); ASGNU2(addr,reg)
     114/     15D :                     ;}
     115/     15D :                     L12:
     116/     15D : (MACRO)             	release 8
     117/     165 : (MACRO)             	Cretn
     118/     166 :                     
     119/     166 :                     _main:
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 3 - 2/28/2013 15:08:33


     120/     166 : (MACRO)             	reserve 4
     121/     170 :                     ;void main(){
     122/     170 :                     ;	asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     123/     170 :                     ;	printf("encmule - watch my Q!\n");
     124/     170 : 7B                  	seq	;1 on Q de-activates ethernet chip
     125/     171 : (MACRO)             	ldaD R12,L15
     126/     177 : (MACRO)             	Ccall _printf
     127/     17A :                     ;	setup();
     128/     17A : (MACRO)             	Ccall _setup
     129/     17D : C0 01 83            	lbr L17
     130/     180 :                     L16:
     131/     180 :                     ;	while(1){
     132/     180 :                     ;		loop();
     133/     180 : (MACRO)             	Ccall _loop
     134/     183 :                     ;	}
     135/     183 :                     L17:
     136/     183 :                     ;	while(1){
     137/     183 : C0 01 80            	lbr L16
     138/     186 :                     ;}
     139/     186 :                     L13:
     140/     186 : (MACRO)             	release 4
     141/     18E : (MACRO)             	Cretn
     142/     18F :                     
     143/     18F :                     _strcpy:
     144/     18F : (MACRO)             	reserve 2
     145/     199 :                     ;{
     146/     199 :                     ;	char *save = to;
     147/     199 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     148/     1A6 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     149/     1A6 : C0 01 C7            	lbr L23
     150/     1A9 :                     L20:
     151/     1A9 :                     L21:
     152/     1A9 : (MACRO)             	ldaD R11,1
     153/     1AF : (MACRO)             	alu2 R13,R13,R11,add,adc
     154/     1BB : (MACRO)             	alu2 R12,R12,R11,add,adc
     155/     1C7 :                     L23:
     156/     1C7 : (MACRO)             	ld1 R11,'O',R13,0
     157/     1D1 : (MACRO)             	st1 R11,'O',R12,0; ASGNU1
     158/     1DB : (MACRO)             	cpy1 R11,R11
     159/     1DD : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     160/     1E0 : (MACRO)             	jneU2I r11,0,L20; NE
     161/     1EC :                     ;	return(save);
     162/     1EC : (MACRO)             	ld2 R15,'O',sp,(-4+4)
     163/     1F8 :                     L19:
     164/     1F8 : (MACRO)             	release 2
     165/     200 : (MACRO)             	Cretn
     166/     201 :                     
     167/     201 :                     _printstr:
     168/     201 : (MACRO)             	reserve 6
     169/     20B : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     170/     213 : EE                  	sex	memaddr
     171/     214 : (MACRO)             	savmi r7
     172/     218 : E2                  	sex sp
     173/     219 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     174/     21D :                     ;void printstr(char *ptr){
     175/     21D : C0 02 42            	lbr L26
     176/     220 :                     L25:
     177/     220 :                     ;    while(*ptr) out(5,*ptr++);
     178/     220 : (MACRO)             	ldaD R12,5
     179/     226 : (MACRO)             	cpy2 R11,R7
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 4 - 2/28/2013 15:08:33


     180/     22A : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     181/     232 : (MACRO)             	ld1 R13,'O',R11,0
     182/     23C : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     183/     23F : (MACRO)             	Ccall _out
     184/     242 :                     L26:
     185/     242 : (MACRO)             	ld1 R11,'O',R7,0
     186/     24C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     187/     24F : (MACRO)             	jneU2I r11,0,L25; NE
     188/     25B :                     ;}
     189/     25B :                     L24:
     190/     25B : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     191/     263 : (MACRO)             	rldmi r7,memaddr
     192/     267 : (MACRO)             	release 6
     193/     26F : (MACRO)             	Cretn
     194/     270 :                     
     195/     270 :                     _itoa:
     196/     270 : (MACRO)             	reserve 14
     197/     27A : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     198/     282 : EE                  	sex	memaddr
     199/     283 : (MACRO)             	savmi r0
     200/     287 : (MACRO)             	savmi r1
     201/     28B : (MACRO)             	savmi r7
     202/     28F : E2                  	sex sp
     203/     290 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     204/     29D : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     205/     2AA :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     206/     2AA :                     ;	unsigned int flag=0;
     207/     2AA : (MACRO)             	ld2z R11
     208/     2AE : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     209/     2BB :                     ;	char * bptr; bptr=buffer;
     210/     2BB : (MACRO)             	ld2 R11,'O',sp,(2+16)
     211/     2C7 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     212/     2D4 :                     ;	if (s<0){
     213/     2D4 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     214/     2E0 : (MACRO)             	jcI2I r11,0,lbdf,L29; GE is flipped test from LT
     215/     2F1 :                     ;		*bptr='-';bptr++;
     216/     2F1 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     217/     2FD : (MACRO)             	ldaD R10,45
     218/     303 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     219/     30D : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     220/     319 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     221/     321 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     222/     32E :                     ;		n=-s;
     223/     32E : (MACRO)             	ld2 R11,'O',sp,(0+16)
     224/     33A : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     225/     343 : (MACRO)             	cpy2 R1,R11
     226/     347 :                     ;	} else{
     227/     347 : C0 03 5A            	lbr L30
     228/     34A :                     L29:
     229/     34A :                     ;		n=s;
     230/     34A : (MACRO)             	ld2 R11,'O',sp,(0+16)
     231/     356 : (MACRO)             	cpy2 R1,R11
     232/     35A :                     ;	}
     233/     35A :                     L30:
     234/     35A :                     ;	k=10000;
     235/     35A : (MACRO)             	ldaD R7,10000
     236/     360 : C0 04 27            	lbr L32
     237/     363 :                     L31:
     238/     363 :                     ;	while(k>0){
     239/     363 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 5 - 2/28/2013 15:08:33


     240/     363 : (MACRO)             	ld2z R0
     241/     367 : C0 03 77            	lbr L37
     242/     36A :                     L34:
     243/     36A :                     L35:
     244/     36A : 10                  	inc R0
     245/     36B : (MACRO)             	alu2 R1,R1,R7,sm,smb
     246/     377 :                     L37:
     247/     377 : (MACRO)             	jcU2 r1,r7,lbdf,L34 ;LE is flipped test & operands
     248/     384 :                     ;		if (flag || r>0||k==1){
     249/     384 : (MACRO)             	ld2z R11
     250/     388 : (MACRO)             	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
     251/     394 : (MACRO)             	jneU2 r10,r11,L41; NE
     252/     3A6 : (MACRO)             	jneU2 r0,r11,L41; NE
     253/     3B8 : (MACRO)             	jneU2I r7,1,L38; NE
     254/     3C4 :                     L41:
     255/     3C4 :                     ;			*bptr=('0'+r);bptr++;
     256/     3C4 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     257/     3D0 : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     258/     3D8 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     259/     3E2 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     260/     3EE : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     261/     3F6 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     262/     403 :                     ;			flag='y';
     263/     403 : (MACRO)             	ldaD R11,121
     264/     409 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     265/     416 :                     ;		}
     266/     416 :                     L38:
     267/     416 :                     ;		k=k/10;
     268/     416 : (MACRO)             	cpy2 R12,R7
     269/     41A : (MACRO)             	ldaD R13,10
     270/     420 : (MACRO)             	Ccall _divu2
     271/     423 : (MACRO)             	cpy2 R7,R15
     272/     427 :                     ;	}
     273/     427 :                     L32:
     274/     427 :                     ;	while(k>0){
     275/     427 : (MACRO)             	jnzU2 r7,L31; NE 0
     276/     42F :                     ;	*bptr='\0';
     277/     42F : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     278/     43B : (MACRO)             	ldaD R10,0
     279/     441 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     280/     44B :                     ;	return buffer;
     281/     44B : (MACRO)             	ld2 R15,'O',sp,(2+16)
     282/     457 :                     L28:
     283/     457 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     284/     45F : (MACRO)             	rldmi r7,memaddr
     285/     463 : (MACRO)             	rldmi r1,memaddr
     286/     467 : (MACRO)             	rldmi r0,memaddr
     287/     46B : (MACRO)             	release 14
     288/     473 : (MACRO)             	Cretn
     289/     474 :                     
     290/     474 :                     _ltoa:
     291/     474 : (MACRO)             	reserve 12
     292/     47E : (MACRO)             	alu2I memaddr,sp,(11),adi,adci
     293/     486 : EE                  	sex	memaddr
     294/     487 : (MACRO)             	savmi r0
     295/     48B : (MACRO)             	savmi r1
     296/     48F : (MACRO)             	savmi r7
     297/     493 : E2                  	sex sp
     298/     494 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     299/     49C :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 6 - 2/28/2013 15:08:33


     300/     49C :                     ;	char* bptr=buffer;
     301/     49C : (MACRO)             	ld2 R7,'O',sp,(4+14)
     302/     4A8 :                     ;	if (s<0){
     303/     4A8 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     304/     4B4 : (MACRO)             	jcI4 RL0,RL10,lbdf,L43; GE is flipped test from LT
     305/     4D0 :                     ;		*bptr++='-';
     306/     4D0 : (MACRO)             	cpy2 R11,R7
     307/     4D4 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     308/     4DC : (MACRO)             	ldaD R10,45
     309/     4E2 : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     310/     4EC :                     ;		s=-s;
     311/     4EC : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     312/     50C :                     ;	}
     313/     50C :                     L43:
     314/     50C :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     315/     50C : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     316/     514 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     317/     521 : (MACRO)             	Ccall _dubdabx
     318/     524 : (MACRO)             	cpy2 R11,R15
     319/     528 : (MACRO)             	cpy2 R12,R7
     320/     52C : (MACRO)             	cpy2 R13,R11
     321/     530 : (MACRO)             	Ccall _strcpy
     322/     533 :                     ;	return buffer;
     323/     533 : (MACRO)             	ld2 R15,'O',sp,(4+14)
     324/     53F :                     L42:
     325/     53F : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
     326/     547 : (MACRO)             	rldmi r7,memaddr
     327/     54B : (MACRO)             	rldmi r1,memaddr
     328/     54F : (MACRO)             	rldmi r0,memaddr
     329/     553 : (MACRO)             	release 12
     330/     55B : (MACRO)             	Cretn
     331/     55C :                     
     332/     55C :                     _printint:
     333/     55C : (MACRO)             	reserve 12
     334/     566 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     335/     573 :                     ;void printint(int s){ //print an integer
     336/     573 :                     ;	itoa(s,buffer);
     337/     573 : (MACRO)             	ld2 R12,'O',sp,(0+14)
     338/     57F : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     339/     587 : (MACRO)             	Ccall _itoa
     340/     58A :                     ;	printstr(buffer);
     341/     58A : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     342/     592 : (MACRO)             	Ccall _printstr
     343/     595 :                     ;}
     344/     595 :                     L45:
     345/     595 : (MACRO)             	release 12
     346/     59D : (MACRO)             	Cretn
     347/     59E :                     
     348/     59E :                     _printlint:
     349/     59E : (MACRO)             	reserve 18
     350/     5A8 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     351/     5B5 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     352/     5C2 :                     ;void printlint(long s){ //print a long integer
     353/     5C2 :                     ;	printstr(ltoa(s,buffer));
     354/     5C2 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20)
     355/     5D2 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     356/     5DA : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     357/     5E7 : (MACRO)             	Ccall _ltoa
     358/     5EA : (MACRO)             	cpy2 R11,R15
     359/     5EE : (MACRO)             	cpy2 R12,R11
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 7 - 2/28/2013 15:08:33


     360/     5F2 : (MACRO)             	Ccall _printstr
     361/     5F5 :                     ;}
     362/     5F5 :                     L46:
     363/     5F5 : (MACRO)             	release 18
     364/     5FD : (MACRO)             	Cretn
     365/     5FE :                     
     366/     5FE :                     _putxn:
     367/     5FE : (MACRO)             	reserve 4
     368/     608 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     369/     615 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     370/     621 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     371/     62B :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     372/     62B :                     ;	if (x<10){
     373/     62B : (MACRO)             	ld1 R11,'O',sp,(0+6)
     374/     635 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     375/     638 : (MACRO)             	jcI2I r11,10,lbdf,L48; GE is flipped test from LT
     376/     649 :                     ;		putc(x+'0');
     377/     649 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     378/     653 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     379/     656 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     380/     65E : (MACRO)             	cpy1 R12,R11
     381/     660 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     382/     663 : (MACRO)             	Ccall _putc
     383/     666 :                     ;	} else {
     384/     666 : C0 06 8E            	lbr L49
     385/     669 :                     L48:
     386/     669 :                     ;		putc(x+'A'-10);
     387/     669 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     388/     673 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     389/     676 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     390/     67E : (MACRO)             	alu2I R11,R11,10,smi,smbi
     391/     686 : (MACRO)             	cpy1 R12,R11
     392/     688 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     393/     68B : (MACRO)             	Ccall _putc
     394/     68E :                     ;	}
     395/     68E :                     L49:
     396/     68E :                     ;}
     397/     68E :                     L47:
     398/     68E : (MACRO)             	release 4
     399/     696 : (MACRO)             	Cretn
     400/     697 :                     
     401/     697 :                     _putx:
     402/     697 : (MACRO)             	reserve 4
     403/     6A1 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     404/     6AE : (MACRO)             	ld2 R11,'O',sp,(0+6)
     405/     6BA : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     406/     6C4 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     407/     6C4 :                     ;	putxn(x>>4);
     408/     6C4 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     409/     6CE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     410/     6D1 : (MACRO)             	shrI2I R11,4
     411/     6F1 : (MACRO)             	cpy1 R12,R11
     412/     6F3 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     413/     6F6 : (MACRO)             	Ccall _putxn
     414/     6F9 :                     ;	putxn(x & 0x0F);
     415/     6F9 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     416/     703 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     417/     706 : (MACRO)             	alu2I R11,R11,15,ani,ani
     418/     70E :                     	;removed ?	cpy2 R11,R11
     419/     70E : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 8 - 2/28/2013 15:08:33


     420/     710 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     421/     713 : (MACRO)             	Ccall _putxn
     422/     716 :                     ;}
     423/     716 :                     L50:
     424/     716 : (MACRO)             	release 4
     425/     71E : (MACRO)             	Cretn
     426/     71F :                     
     427/     71F :                     _printf:
     428/     71F : (MACRO)             	reserve 14
     429/     729 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     430/     731 : EE                  	sex	memaddr
     431/     732 : (MACRO)             	savmi r0
     432/     736 : (MACRO)             	savmi r1
     433/     73A : (MACRO)             	savmi r7
     434/     73E : E2                  	sex sp
     435/     73F : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     436/     74C : (MACRO)             	st2 r13,'O',sp,(18); flag2
     437/     759 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     438/     759 :                     ;	int argslot=0;	//used to align longs
     439/     759 : (MACRO)             	ldaD R0,0
     440/     75F :                     ;	int * this=(int *)&ptr;
     441/     75F : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     442/     767 :                     ;	this++; argslot++; //advance argument pointer and slot #
     443/     767 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     444/     76F : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     445/     777 : C0 0B 8F            	lbr L53
     446/     77A :                     L52:
     447/     77A :                     ;    while(*ptr) {
     448/     77A :                     ;		c=*ptr++;
     449/     77A : (MACRO)             	ld2 R11,'O',sp,(0+16)
     450/     786 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     451/     78E : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     452/     79B : (MACRO)             	ld1 R7,'O',R11,0
     453/     7A5 :                     ;		if (c!='%'){
     454/     7A5 : (MACRO)             	cpy1 R11,R7
     455/     7A7 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     456/     7AA : (MACRO)             	jeqU2I r11,37,L55
     457/     7B6 :                     ;			putc(c);
     458/     7B6 : (MACRO)             	cpy1 R12,R7
     459/     7B8 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     460/     7BB : (MACRO)             	Ccall _putc
     461/     7BE :                     ;		} else{
     462/     7BE : C0 0B 8F            	lbr L56
     463/     7C1 :                     L55:
     464/     7C1 :                     ;			c=*ptr++;
     465/     7C1 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     466/     7CD : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     467/     7D5 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     468/     7E2 : (MACRO)             	ld1 R7,'O',R11,0
     469/     7EC :                     ;			switch (c){
     470/     7EC : (MACRO)             	cpy1 R11,R7
     471/     7EE : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     472/     7F1 : (MACRO)             	st2 R11,'O',sp,(-5+16)
     473/     7FE : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     474/     80A : (MACRO)             	jeqU2I r11,105,L60
     475/     816 : (MACRO)             	ldaD R10,108
     476/     81C : (MACRO)             	jeqI2 r11,r10,L64
     477/     82E : (MACRO)             	jcI2 r10,r11,lbnf,L72 ;GT is reversed operands from LT
     478/     842 :                     L71:
     479/     842 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 9 - 2/28/2013 15:08:33


     480/     84E : (MACRO)             	ldaD R10,88
     481/     854 : (MACRO)             	jeqI2 r11,r10,L63
     482/     866 : (MACRO)             	jcI2 r11,r10,lbnf,L57; LT=lbnf i.e. subtract B from A and jump if borrow 
     483/     87A :                     L73:
     484/     87A : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     485/     886 : (MACRO)             	jeqU2I r11,99,L62
     486/     892 : (MACRO)             	jeqU2I r11,100,L60
     487/     89E : C0 0B 7E            	lbr L57
     488/     8A1 :                     L72:
     489/     8A1 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     490/     8AD : (MACRO)             	ldaD R10,115
     491/     8B3 : (MACRO)             	jeqI2 r11,r10,L61
     492/     8C5 : (MACRO)             	jcI2 r11,r10,lbnf,L57; LT=lbnf i.e. subtract B from A and jump if borrow 
     493/     8D9 :                     L74:
     494/     8D9 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     495/     8E5 : (MACRO)             	jeqU2I r11,120,L63
     496/     8F1 : C0 0B 7E            	lbr L57
     497/     8F4 :                     L60:
     498/     8F4 :                     ;					printint(*this++);
     499/     8F4 : (MACRO)             	cpy2 R11,R1
     500/     8F8 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     501/     900 : (MACRO)             	ld2 R12,'O',R11,0
     502/     90C : (MACRO)             	Ccall _printint
     503/     90F :                     ;					argslot+=1; //next argument slot
     504/     90F : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     505/     917 :                     ;					break;
     506/     917 : C0 0B 8F            	lbr L58
     507/     91A :                     L61:
     508/     91A :                     ;					printstr((char*) *this++);
     509/     91A : (MACRO)             	cpy2 R11,R1
     510/     91E : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     511/     926 : (MACRO)             	ld2 R11,'O',R11,0
     512/     932 : (MACRO)             	cpy2 R12,R11
     513/     936 : (MACRO)             	Ccall _printstr
     514/     939 :                     ;					argslot+=1; //next argument slot
     515/     939 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     516/     941 :                     ;					break;
     517/     941 : C0 0B 8F            	lbr L58
     518/     944 :                     L62:
     519/     944 :                     ;					putc((unsigned int) *this++);
     520/     944 : (MACRO)             	cpy2 R11,R1
     521/     948 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     522/     950 : (MACRO)             	ld2 R11,'O',R11,0
     523/     95C : (MACRO)             	cpy1 R12,R11
     524/     95E : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     525/     961 : (MACRO)             	Ccall _putc
     526/     964 :                     ;					argslot+=1; //next argument slot
     527/     964 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     528/     96C :                     ;					break;
     529/     96C : C0 0B 8F            	lbr L58
     530/     96F :                     L63:
     531/     96F :                     ;					putx(((unsigned int) *this)>>8);
     532/     96F : (MACRO)             	ld2 R11,'O',R1,0
     533/     97B : (MACRO)             	shrU2I R11,8
     534/     9AB : (MACRO)             	cpy1 R12,R11
     535/     9AD : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     536/     9B0 : (MACRO)             	Ccall _putx
     537/     9B3 :                     ;					putx(((unsigned int) *this++)&255);
     538/     9B3 : (MACRO)             	cpy2 R11,R1
     539/     9B7 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 10 - 2/28/2013 15:08:33


     540/     9BF : (MACRO)             	ld2 R11,'O',R11,0
     541/     9CB : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     542/     9D3 : (MACRO)             	cpy1 R12,R11
     543/     9D5 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     544/     9D8 : (MACRO)             	Ccall _putx
     545/     9DB :                     ;					argslot+=1; //next argument slot
     546/     9DB : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     547/     9E3 :                     ;					break;
     548/     9E3 : C0 0B 8F            	lbr L58
     549/     9E6 :                     L64:
     550/     9E6 :                     ;					if (*ptr){ //as long as there's something there
     551/     9E6 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     552/     9F2 : (MACRO)             	ld1 R11,'O',R11,0
     553/     9FC : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     554/     9FF : (MACRO)             	jeqU2I r11,0,L65
     555/     A0B :                     ;						xord=*ptr++;
     556/     A0B : (MACRO)             	ld2 R11,'O',sp,(0+16)
     557/     A17 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     558/     A1F : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     559/     A2C : (MACRO)             	ld1 R11,'O',R11,0
     560/     A36 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     561/     A40 :                     ;						if (argslot&1) {
     562/     A40 : (MACRO)             	alu2I R11,R0,1,ani,ani
     563/     A48 :                     	;removed ?	cpy2 R11,R0
     564/     A48 : (MACRO)             	jeqU2I r11,0,L67
     565/     A54 :                     ;							this++;
     566/     A54 : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     567/     A5C :                     ;							argslot++;
     568/     A5C : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     569/     A64 :                     ;						}
     570/     A64 :                     L67:
     571/     A64 :                     ;						if(xord=='d'){
     572/     A64 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     573/     A6E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     574/     A71 : (MACRO)             	jneU2I r11,100,L69; NE
     575/     A7D :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     576/     A7D : (MACRO)             	ld4 Rp1p2,'O',R1,0
     577/     A8D : (MACRO)             	Ccall _printlint
     578/     A90 :                     ;							this+=2;				// and advances it 4 bytes
     579/     A90 : (MACRO)             	ldA2 R1,'O',R1,(4); reg:addr
     580/     A98 :                     ;						} else{
     581/     A98 : C0 0B 73            	lbr L70
     582/     A9B :                     L69:
     583/     A9B :                     ;							putx(((unsigned int) *this)>>8);
     584/     A9B : (MACRO)             	ld2 R11,'O',R1,0
     585/     AA7 : (MACRO)             	shrU2I R11,8
     586/     AD7 : (MACRO)             	cpy1 R12,R11
     587/     AD9 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     588/     ADC : (MACRO)             	Ccall _putx
     589/     ADF :                     ;							putx(((unsigned int) *this++)&255);
     590/     ADF : (MACRO)             	cpy2 R11,R1
     591/     AE3 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     592/     AEB : (MACRO)             	ld2 R11,'O',R11,0
     593/     AF7 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     594/     AFF : (MACRO)             	cpy1 R12,R11
     595/     B01 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     596/     B04 : (MACRO)             	Ccall _putx
     597/     B07 :                     ;							putx(((unsigned int) *this)>>8);
     598/     B07 : (MACRO)             	ld2 R11,'O',R1,0
     599/     B13 : (MACRO)             	shrU2I R11,8
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 11 - 2/28/2013 15:08:33


     600/     B43 : (MACRO)             	cpy1 R12,R11
     601/     B45 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     602/     B48 : (MACRO)             	Ccall _putx
     603/     B4B :                     ;							putx(((unsigned int) *this++)&255);
     604/     B4B : (MACRO)             	cpy2 R11,R1
     605/     B4F : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     606/     B57 : (MACRO)             	ld2 R11,'O',R11,0
     607/     B63 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     608/     B6B : (MACRO)             	cpy1 R12,R11
     609/     B6D : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     610/     B70 : (MACRO)             	Ccall _putx
     611/     B73 :                     ;						}
     612/     B73 :                     L70:
     613/     B73 :                     ;						argslot+=2;
     614/     B73 : (MACRO)             	ldA2 R0,'O',R0,(2); reg:addr
     615/     B7B :                     ;						break;
     616/     B7B : C0 0B 8F            	lbr L58
     617/     B7E :                     L65:
     618/     B7E :                     L57:
     619/     B7E :                     ;					putc('%');putc(c);
     620/     B7E : (MACRO)             	ldaD R12,37
     621/     B84 : (MACRO)             	Ccall _putc
     622/     B87 : (MACRO)             	cpy1 R12,R7
     623/     B89 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     624/     B8C : (MACRO)             	Ccall _putc
     625/     B8F :                     ;			} //switch
     626/     B8F :                     L58:
     627/     B8F :                     ;		} //%
     628/     B8F :                     L56:
     629/     B8F :                     ;	} //while
     630/     B8F :                     L53:
     631/     B8F :                     ;    while(*ptr) {
     632/     B8F : (MACRO)             	ld2 R11,'O',sp,(0+16)
     633/     B9B : (MACRO)             	ld1 R11,'O',R11,0
     634/     BA5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     635/     BA8 : (MACRO)             	jneU2I r11,0,L52; NE
     636/     BB4 :                     ;} //prtf
     637/     BB4 :                     L51:
     638/     BB4 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     639/     BBC : (MACRO)             	rldmi r7,memaddr
     640/     BC0 : (MACRO)             	rldmi r1,memaddr
     641/     BC4 : (MACRO)             	rldmi r0,memaddr
     642/     BC8 : (MACRO)             	release 14
     643/     BD0 : (MACRO)             	Cretn
     644/     BD1 :                     
     645/     BD1 :                     _exit:
     646/     BD1 : (MACRO)             	reserve 4
     647/     BDB : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     648/     BE8 :                     ;void exit(int code){
     649/     BE8 :                     ;	printf("exit %d\n",code);
     650/     BE8 : (MACRO)             	ldaD R12,L76
     651/     BEE : (MACRO)             	ld2 R13,'O',sp,(0+6)
     652/     BFA : (MACRO)             	Ccall _printf
     653/     BFD :                     L77:
     654/     BFD :                     ;	while(1);
     655/     BFD :                     L78:
     656/     BFD : C0 0B FD            	lbr L77
     657/     C00 :                     ;}
     658/     C00 :                     L75:
     659/     C00 : (MACRO)             	release 4
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 12 - 2/28/2013 15:08:33


     660/     C08 : (MACRO)             	Cretn
     661/     C09 :                     
     662/     C09 :                     _memcmp:
     663/     C09 : (MACRO)             	reserve 8
     664/     C13 : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     665/     C1B : EE                  	sex	memaddr
     666/     C1C : (MACRO)             	savmi r0
     667/     C20 : (MACRO)             	savmi r1
     668/     C24 : (MACRO)             	savmi r7
     669/     C28 : E2                  	sex sp
     670/     C29 : (MACRO)             	ld2 R7,'O',sp,(4+10); INDIRU2(addr)
     671/     C35 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     672/     C35 :                     ;    int v = 0;
     673/     C35 : (MACRO)             	ldaD R1,0
     674/     C3B :                     ;    p1 = (unsigned char *)Ptr1;
     675/     C3B : (MACRO)             	cpy2 R0,R12
     676/     C3F :                     ;    p2 = (unsigned char *)Ptr2;
     677/     C3F : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
     678/     C4C : C0 0C B0            	lbr L82
     679/     C4F :                     L81:
     680/     C4F :                     ;    while(Count-- > 0 && v == 0) {
     681/     C4F :                     ;        v = *(p1++) - *(p2++);
     682/     C4F : (MACRO)             	cpy2 R11,R0
     683/     C53 : (MACRO)             	ldaD R10,1
     684/     C59 : (MACRO)             	alu2 R0,R11,R10,add,adc
     685/     C65 : (MACRO)             	ld2 R9,'O',sp,(-4+10)
     686/     C71 : (MACRO)             	alu2 R10,R9,R10,add,adc
     687/     C7D : (MACRO)             	st2 R10,'O',sp,(-4+10); ASGNP2
     688/     C8A : (MACRO)             	ld1 R11,'O',R11,0
     689/     C94 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     690/     C97 : (MACRO)             	ld1 R10,'O',R9,0
     691/     CA1 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     692/     CA4 : (MACRO)             	alu2 R1,R11,R10,sm,smb
     693/     CB0 :                     ;    }
     694/     CB0 :                     L82:
     695/     CB0 :                     ;    while(Count-- > 0 && v == 0) {
     696/     CB0 : (MACRO)             	cpy2 R11,R7
     697/     CB4 : (MACRO)             	alu2I R7,R11,1,smi,smbi
     698/     CBC : (MACRO)             	jeqU2I r11,0,L84
     699/     CC8 : (MACRO)             	jeqU2I r1,0,L81
     700/     CD4 :                     L84:
     701/     CD4 :                     ;    return v;
     702/     CD4 : (MACRO)             	cpy2 R15,R1 ;LOADI2
     703/     CD8 :                     L80:
     704/     CD8 : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     705/     CE0 : (MACRO)             	rldmi r7,memaddr
     706/     CE4 : (MACRO)             	rldmi r1,memaddr
     707/     CE8 : (MACRO)             	rldmi r0,memaddr
     708/     CEC : (MACRO)             	release 8
     709/     CF4 : (MACRO)             	Cretn
     710/     CF5 :                     
     711/     CF5 :                     _memcpy:
     712/     CF5 : (MACRO)             	reserve 6
     713/     CFF : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     714/     D07 : EE                  	sex	memaddr
     715/     D08 : (MACRO)             	savmi r0
     716/     D0C : (MACRO)             	savmi r1
     717/     D10 : (MACRO)             	savmi r7
     718/     D14 : E2                  	sex sp
     719/     D15 : (MACRO)             	ld2 R7,'O',sp,(4+8); INDIRU2(addr)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 13 - 2/28/2013 15:08:33


     720/     D21 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     721/     D21 :                     ;        char* dst8 = (char*)dest;
     722/     D21 : (MACRO)             	cpy2 R1,R12
     723/     D25 :                     ;        char* src8 = (char*)src;
     724/     D25 : (MACRO)             	cpy2 R0,R13
     725/     D29 : C0 0D 66            	lbr L87
     726/     D2C :                     L86:
     727/     D2C :                     ;        while (count--) {
     728/     D2C :                     ;            *dst8++ = *src8++;
     729/     D2C : (MACRO)             	cpy2 R11,R1
     730/     D30 : (MACRO)             	ldaD R10,1
     731/     D36 : (MACRO)             	alu2 R1,R11,R10,add,adc
     732/     D42 : (MACRO)             	cpy2 R9,R0
     733/     D46 : (MACRO)             	alu2 R0,R9,R10,add,adc
     734/     D52 : (MACRO)             	ld1 R10,'O',R9,0
     735/     D5C : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     736/     D66 :                     ;        }
     737/     D66 :                     L87:
     738/     D66 :                     ;        while (count--) {
     739/     D66 : (MACRO)             	cpy2 R11,R7
     740/     D6A : (MACRO)             	alu2I R7,R11,1,smi,smbi
     741/     D72 : (MACRO)             	jnzU2 r11,L86; NE 0
     742/     D7A :                     ;        return dest;
     743/     D7A : (MACRO)             	cpy2 R15,R12
     744/     D7E :                     L85:
     745/     D7E : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     746/     D86 : (MACRO)             	rldmi r7,memaddr
     747/     D8A : (MACRO)             	rldmi r1,memaddr
     748/     D8E : (MACRO)             	rldmi r0,memaddr
     749/     D92 : (MACRO)             	release 6
     750/     D9A : (MACRO)             	Cretn
     751/     D9B :                     
     752/     D9B :                     _memset:
     753/     D9B : (MACRO)             	reserve 4
     754/     DA5 : (MACRO)             	alu2I memaddr,sp,(3),adi,adci
     755/     DAD : EE                  	sex	memaddr
     756/     DAE : (MACRO)             	savmi r1
     757/     DB2 : (MACRO)             	savmi r7
     758/     DB6 : E2                  	sex sp
     759/     DB7 : (MACRO)             	ld2 R7,'O',sp,(4+6); INDIRU2(addr)
     760/     DC3 :                     ;{
     761/     DC3 :                     ;    unsigned char* p=s;
     762/     DC3 : (MACRO)             	cpy2 R1,R12
     763/     DC7 : C0 0D E4            	lbr L91
     764/     DCA :                     L90:
     765/     DCA :                     ;        *p++ = (unsigned char)c;
     766/     DCA : (MACRO)             	cpy2 R11,R1
     767/     DCE : (MACRO)             	ldA2 R1,'O',R11,(1); reg:addr
     768/     DD6 : (MACRO)             	cpy2 R10,R13
     769/     DDA : (MACRO)             	st1 R10,'O',R11,0; ASGNU1
     770/     DE4 :                     L91:
     771/     DE4 :                     ;    while(n--)
     772/     DE4 : (MACRO)             	cpy2 R11,R7
     773/     DE8 : (MACRO)             	alu2I R7,R11,1,smi,smbi
     774/     DF0 : (MACRO)             	jnzU2 r11,L90; NE 0
     775/     DF8 :                     ;    return s;
     776/     DF8 : (MACRO)             	cpy2 R15,R12
     777/     DFC :                     L89:
     778/     DFC : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
     779/     E04 : (MACRO)             	rldmi r7,memaddr
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 14 - 2/28/2013 15:08:33


     780/     E08 : (MACRO)             	rldmi r1,memaddr
     781/     E0C : (MACRO)             	release 4
     782/     E14 : (MACRO)             	Cretn
     783/     E15 :                     
     784/     E15 :                     _delay:
     785/     E15 : (MACRO)             	reserve 8
     786/     E1F : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
     787/     E27 : EE                  	sex	memaddr
     788/     E28 : (MACRO)             	savmi r1
     789/     E2C : (MACRO)             	savmi r7
     790/     E30 : E2                  	sex sp
     791/     E31 : (MACRO)             	cpy2 r7,r12; function(2054) 1
     792/     E35 :                     ;void delay(unsigned int howlong){
     793/     E35 :                     ;	for (i=1;i!=howlong;i++){
     794/     E35 : (MACRO)             	ldaD R1,1
     795/     E3B : C0 0E 42            	lbr L97
     796/     E3E :                     L94:
     797/     E3E :                     ;		oneMs();
     798/     E3E : (MACRO)             	Ccall _oneMs
     799/     E41 :                     ;	}
     800/     E41 :                     L95:
     801/     E41 :                     ;	for (i=1;i!=howlong;i++){
     802/     E41 : 11                  	inc R1
     803/     E42 :                     L97:
     804/     E42 : (MACRO)             	jneU2 r1,r7,L94; NE
     805/     E54 :                     ;}
     806/     E54 :                     L93:
     807/     E54 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     808/     E5C : (MACRO)             	rldmi r7,memaddr
     809/     E60 : (MACRO)             	rldmi r1,memaddr
     810/     E64 : (MACRO)             	release 8
     811/     E6C : (MACRO)             	Cretn
     812/     E6D :                     
     813/     E6D :                     _olduinoincluder:
     814/     E6D :                     ;void olduinoincluder(){
     815/     E6D :                     ;	asm("\tinclude olduino.inc\n");
     816/     E6D :                     	include olduino.inc
(1)    1/     E6D :                     ;Feb 8 2013, first version of assembler routines for olduino support	
(1)    2/     E6D :                     
(1)    3/     E6D :                     ;digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    4/     E6D :                     	align 64	;needed to make sure all on same page
(1)    5/     E80 :                     _digitalWrite:
(1)    6/     E80 : 8C                  	glo regArg1	;get the bit number
(1)    7/     E81 : FC 9F               	adi $$bvtable&255	;add the table offset
(1)    8/     E83 : AE                  	plo memaddr
(1)    9/     E84 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     E85 : BE                  	phi memaddr	
(1)   11/     E86 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     E87 : A8                  	plo rt1		;save it in a temp
(1)   13/     E88 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   14/     E8E : EE                  	sex memaddr	;prepare to change it
(1)   15/     E8F : 8D                  	glo regArg2	;get on/off switch
(1)   16/     E90 : 32 97               	bz $$setbitoff
(1)   17/     E92 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     E92 : 88                  	glo rt1		;get the bit value back
(1)   19/     E93 : F1                  	or		;apply it
(1)   20/     E94 : 5E                  	str memaddr	;and save it
(1)   21/     E95 : 30 9C               	br $$outit	;go fnish up
(1)   22/     E97 :                     $$setbitoff:
(1)   23/     E97 : 88                  	glo rt1		;get the bit pattern
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(olduino.inc) - page 15 - 2/28/2013 15:08:33


(1)   24/     E98 : FB FF               	xri 0xff	;reverse it
(1)   25/     E9A : F2                  	and		;combine it with the existing pin value
(1)   26/     E9B : 5E                  	str memaddr	;and save it
(1)   27/     E9C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     E9C :                     $$outit:
(1)   29/     E9C : 64                  	out 4		;X was already set to memaddr
(1)   30/     E9D : E2                  	sex sp		;reset X
(1)   31/     E9E : (MACRO)             	cretn
(1)   32/     E9F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     EA7 :                     ;int digitalRead(unsigned char pin){//for now this will always read ef3
(1)   34/     EA7 :                     	align 8	;protect jump boundary
(1)   35/     EA8 :                     _digitalRead:
(1)   36/     EA8 : F8 00               	ldi 0		;default is false
(1)   37/     EAA : AF                  	plo R15
(1)   38/     EAB : BF                  	phi R15
(1)   39/     EAC : 36 AF               	b3 +		;i have to reverse the sense of the external line
(1)   40/     EAE : 1F                  	inc R15		;if external line is high, supply a 1
(1)   41/     EAF : (MACRO)             +	cretn
(1)   42/     EB0 :                     
     817/     EB0 :                     ;}
     818/     EB0 :                     L98:
     819/     EB0 : (MACRO)             	Cretn
     820/     EB1 :                     
     821/     EB1 :                     _enableChip:
     822/     EB1 : (MACRO)             	reserve 4
     823/     EBB :                     ; void enableChip () {
     824/     EBB :                     ;  digitalWrite(sck,LOW); //make sure the clock is low
     825/     EBB : (MACRO)             	ldaD R12,5
     826/     EC1 : (MACRO)             	ldaD R13,0
     827/     EC7 : (MACRO)             	Ccall _digitalWrite
     828/     ECA :                     ;  asm("	req	;0 on Q activates ethernet chip\n"); //digitalWrite(encss,LOW); //activate the chip select
     829/     ECA : 7A                  	req	;0 on Q activates ethernet chip
     830/     ECB :                     ;}
     831/     ECB :                     L100:
     832/     ECB : (MACRO)             	release 4
     833/     ED3 : (MACRO)             	Cretn
     834/     ED4 :                     
     835/     ED4 :                     _disableChip:
     836/     ED4 :                     ; void disableChip () {
     837/     ED4 :                     ;  asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
     838/     ED4 : 7B                  	seq	;1 on Q de-activates ethernet chip
     839/     ED5 :                     ;}
     840/     ED5 :                     L102:
     841/     ED5 : (MACRO)             	Cretn
     842/     ED6 :                     
     843/     ED6 :                     _SetBank:
     844/     ED6 : (MACRO)             	reserve 6
     845/     EE0 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     846/     EED : (MACRO)             	ld2 R11,'O',sp,(0+8)
     847/     EF9 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     848/     F03 :                     ; void SetBank (uint8_t address) {
     849/     F03 :                     ;  if ((address & BANK_MASK) != Enc28j60Bank) {
     850/     F03 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     851/     F0D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     852/     F10 : (MACRO)             	alu2I R11,R11,96,ani,ani
     853/     F18 :                     	;removed ?	cpy2 R11,R11
     854/     F18 : (MACRO)             	ld1 R10,'D',(_Enc28j60Bank),0
     855/     F20 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     856/     F23 : (MACRO)             	jeqI2 r11,r10,L105
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 16 - 2/28/2013 15:08:33


     857/     F35 :                     ;    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
     858/     F35 : (MACRO)             	ldaD R12,160
     859/     F3B : (MACRO)             	ldaD R13,31
     860/     F41 : (MACRO)             	ldaD R11,3
     861/     F47 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     862/     F54 : (MACRO)             	Ccall _writeOp
     863/     F57 :                     ;    Enc28j60Bank = address & BANK_MASK;
     864/     F57 : (MACRO)             	ld1 R11,'O',sp,(0+8)
     865/     F61 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     866/     F64 : (MACRO)             	alu2I R11,R11,96,ani,ani
     867/     F6C :                     	;removed ?	cpy2 R11,R11
     868/     F6C : (MACRO)             	st1 R11,'D',(_Enc28j60Bank),0; ASGNU1
     869/     F74 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
     870/     F74 : (MACRO)             	ldaD R12,128
     871/     F7A : (MACRO)             	ldaD R13,31
     872/     F80 : (MACRO)             	ld1 R11,'D',(_Enc28j60Bank),0
     873/     F88 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     874/     F8B : (MACRO)             	shrI2I R11,5
     875/     FB3 : (MACRO)             	cpy1 R11,R11
     876/     FB5 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     877/     FB8 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     878/     FC5 : (MACRO)             	Ccall _writeOp
     879/     FC8 :                     ;  }
     880/     FC8 :                     L105:
     881/     FC8 :                     ;}
     882/     FC8 :                     L104:
     883/     FC8 : (MACRO)             	release 6
     884/     FD0 : (MACRO)             	Cretn
     885/     FD1 :                     
     886/     FD1 :                     _xferSPI:
     887/     FD1 : (MACRO)             	reserve 8
     888/     FDB : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
     889/     FE3 : EE                  	sex	memaddr
     890/     FE4 : (MACRO)             	savmi r1
     891/     FE8 : (MACRO)             	savmi r7
     892/     FEC : E2                  	sex sp
     893/     FED : (MACRO)             	cpy2 r7,r12; function(1030) 1
     894/     FF1 :                     ;uint8_t xferSPI(uint8_t value){
     895/     FF1 :                     ;  for(i=0;i<8;i++){
     896/     FF1 : (MACRO)             	ldaD R1,0
     897/     FF7 :                     L108:
     898/     FF7 :                     ;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
     899/     FF7 : (MACRO)             	ldaD R12,7
     900/     FFD : (MACRO)             	cpy1 R11,R7
     901/     FFF : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     902/    1002 : (MACRO)             	alu2I R11,R11,128,ani,ani
     903/    100A :                     	;removed ?	cpy2 R11,R11
     904/    100A : (MACRO)             	cpy1 R13,R11
     905/    100C : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     906/    100F : (MACRO)             	Ccall _digitalWrite
     907/    1012 :                     ;    value=(value<<1)|digitalRead(miso);;
     908/    1012 : (MACRO)             	ldaD R12,15
     909/    1018 : (MACRO)             	Ccall _digitalRead
     910/    101B : (MACRO)             	cpy1 R10,R7
     911/    101D : (MACRO)             	zExt 10 ;CVUI2: widen unsigned char to signed int (zero extend)
     912/    1020 : (MACRO)             	shl2I R10,1
     913/    1026 : (MACRO)             	alu2 R11,R10,R15,or,or
     914/    1032 : (MACRO)             	cpy1 R7,R11
     915/    1034 :                     ;    digitalWrite(sck,HIGH);              //then pulsing the clock
     916/    1034 : (MACRO)             	ldaD R12,5
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 17 - 2/28/2013 15:08:33


     917/    103A : (MACRO)             	ldaD R13,1
     918/    1040 : (MACRO)             	Ccall _digitalWrite
     919/    1043 :                     ;    digitalWrite(sck,LOW);
     920/    1043 : (MACRO)             	ldaD R12,5
     921/    1049 : (MACRO)             	ldaD R13,0
     922/    104F : (MACRO)             	Ccall _digitalWrite
     923/    1052 :                     ;  }
     924/    1052 :                     L109:
     925/    1052 :                     ;  for(i=0;i<8;i++){
     926/    1052 : (MACRO)             	ldA2 R1,'O',R1,(1); reg:addr
     927/    105A : (MACRO)             	jcI2I r1,8,lbnf,L108  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     928/    106B :                     ;  return value;
     929/    106B : (MACRO)             	cpy1 R15,R7
     930/    106D : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
     931/    1070 :                     L107:
     932/    1070 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     933/    1078 : (MACRO)             	rldmi r7,memaddr
     934/    107C : (MACRO)             	rldmi r1,memaddr
     935/    1080 : (MACRO)             	release 8
     936/    1088 : (MACRO)             	Cretn
     937/    1089 :                     
     938/    1089 :                     _readOp:
     939/    1089 : (MACRO)             	reserve 6
     940/    1093 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
     941/    10A0 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
     942/    10AD : (MACRO)             	ld2 R11,'O',sp,(0+8)
     943/    10B9 : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
     944/    10C3 : (MACRO)             	ld2 R11,'O',sp,(2+8)
     945/    10CF : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
     946/    10D9 :                     ;uint8_t readOp(uint8_t op,uint8_t address){
     947/    10D9 :                     ;  enableChip();
     948/    10D9 : (MACRO)             	Ccall _enableChip
     949/    10DC :                     ;  xferSPI(op | (address & ADDR_MASK));
     950/    10DC : (MACRO)             	ld1 R11,'O',sp,(0+8)
     951/    10E6 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     952/    10E9 : (MACRO)             	ld1 R10,'O',sp,(2+8)
     953/    10F3 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     954/    10F6 : (MACRO)             	alu2I R10,R10,31,ani,ani
     955/    10FE :                     	;removed ?	cpy2 R10,R10
     956/    10FE : (MACRO)             	alu2 R11,R11,R10,or,or
     957/    110A : (MACRO)             	cpy1 R12,R11
     958/    110C : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     959/    110F : (MACRO)             	Ccall _xferSPI
     960/    1112 :                     ;  if (address & 0x80)
     961/    1112 : (MACRO)             	ld1 R11,'O',sp,(2+8)
     962/    111C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     963/    111F : (MACRO)             	alu2I R11,R11,128,ani,ani
     964/    1127 :                     	;removed ?	cpy2 R11,R11
     965/    1127 : (MACRO)             	jeqU2I r11,0,L113
     966/    1133 :                     ;    result=xferSPI(00);  //dummy byte if needed
     967/    1133 : (MACRO)             	ldaD R12,0
     968/    1139 : (MACRO)             	Ccall _xferSPI
     969/    113C : (MACRO)             	cpy2 R11,R15
     970/    1140 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
     971/    114A :                     L113:
     972/    114A :                     ;  result=xferSPI(0x00); //then read the result
     973/    114A : (MACRO)             	ldaD R12,0
     974/    1150 : (MACRO)             	Ccall _xferSPI
     975/    1153 : (MACRO)             	cpy2 R11,R15
     976/    1157 : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 18 - 2/28/2013 15:08:33


     977/    1161 :                     ;  disableChip();
     978/    1161 : (MACRO)             	Ccall _disableChip
     979/    1164 :                     ;  return result;
     980/    1164 : (MACRO)             	ld1 R15,'O',sp,(-3+8)
     981/    116E : (MACRO)             	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
     982/    1171 :                     L112:
     983/    1171 : (MACRO)             	release 6
     984/    1179 : (MACRO)             	Cretn
     985/    117A :                     
     986/    117A :                     _writeOp:
     987/    117A : (MACRO)             	reserve 8
     988/    1184 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
     989/    1191 : (MACRO)             	st2 r13,'O',sp,(12); flag1 
     990/    119E : (MACRO)             	ld2 R11,'O',sp,(0+10)
     991/    11AA : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
     992/    11B4 : (MACRO)             	ld2 R11,'O',sp,(2+10)
     993/    11C0 : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
     994/    11CA : (MACRO)             	ld2 R11,'O',sp,(4+10)
     995/    11D6 : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
     996/    11E0 :                     ;void writeOp(uint8_t op, uint8_t address, uint8_t data){
     997/    11E0 :                     ;  enableChip();
     998/    11E0 : (MACRO)             	Ccall _enableChip
     999/    11E3 :                     ;  xferSPI(op|(address& ADDR_MASK));
    1000/    11E3 : (MACRO)             	ld1 R11,'O',sp,(0+10)
    1001/    11ED : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1002/    11F0 : (MACRO)             	ld1 R10,'O',sp,(2+10)
    1003/    11FA : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1004/    11FD : (MACRO)             	alu2I R10,R10,31,ani,ani
    1005/    1205 :                     	;removed ?	cpy2 R10,R10
    1006/    1205 : (MACRO)             	alu2 R11,R11,R10,or,or
    1007/    1211 : (MACRO)             	cpy1 R12,R11
    1008/    1213 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1009/    1216 : (MACRO)             	Ccall _xferSPI
    1010/    1219 :                     ;  xferSPI(data);
    1011/    1219 : (MACRO)             	ld1 R12,'O',sp,(4+10)
    1012/    1223 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1013/    1226 : (MACRO)             	Ccall _xferSPI
    1014/    1229 :                     ;  disableChip();
    1015/    1229 : (MACRO)             	Ccall _disableChip
    1016/    122C :                     ;}
    1017/    122C :                     L115:
    1018/    122C : (MACRO)             	release 8
    1019/    1234 : (MACRO)             	Cretn
    1020/    1235 :                     
    1021/    1235 :                     _readRegByte:
    1022/    1235 : (MACRO)             	reserve 4
    1023/    123F : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1024/    124C : (MACRO)             	ld2 R11,'O',sp,(0+6)
    1025/    1258 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1026/    1262 :                     ; uint8_t readRegByte (uint8_t address) {
    1027/    1262 :                     ;    SetBank(address);
    1028/    1262 : (MACRO)             	ld1 R12,'O',sp,(0+6)
    1029/    126C : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1030/    126F : (MACRO)             	Ccall _SetBank
    1031/    1272 :                     ;    return readOp(ENC28J60_READ_CTRL_REG, address);
    1032/    1272 : (MACRO)             	ldaD R12,0
    1033/    1278 : (MACRO)             	ld1 R13,'O',sp,(0+6)
    1034/    1282 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1035/    1285 : (MACRO)             	Ccall _readOp
    1036/    1288 : (MACRO)             	cpy2 R11,R15
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 19 - 2/28/2013 15:08:33


    1037/    128C : (MACRO)             	cpy1 R15,R11
    1038/    128E : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    1039/    1291 :                     L116:
    1040/    1291 : (MACRO)             	release 4
    1041/    1299 : (MACRO)             	Cretn
    1042/    129A :                     
    1043/    129A :                     _writeRegByte:
    1044/    129A : (MACRO)             	reserve 6
    1045/    12A4 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    1046/    12B1 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    1047/    12BE : (MACRO)             	ld2 R11,'O',sp,(0+8)
    1048/    12CA : (MACRO)             	st1 R11,'O',sp,(0+8); ASGNU1
    1049/    12D4 : (MACRO)             	ld2 R11,'O',sp,(2+8)
    1050/    12E0 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
    1051/    12EA :                     ; void writeRegByte (uint8_t address, uint8_t data) {
    1052/    12EA :                     ;    SetBank(address);
    1053/    12EA : (MACRO)             	ld1 R12,'O',sp,(0+8)
    1054/    12F4 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1055/    12F7 : (MACRO)             	Ccall _SetBank
    1056/    12FA :                     ;    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    1057/    12FA : (MACRO)             	ldaD R12,64
    1058/    1300 : (MACRO)             	ld1 R13,'O',sp,(0+8)
    1059/    130A : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1060/    130D : (MACRO)             	ld1 R11,'O',sp,(2+8)
    1061/    1317 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1062/    131A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1063/    1327 : (MACRO)             	Ccall _writeOp
    1064/    132A :                     ;}
    1065/    132A :                     L117:
    1066/    132A : (MACRO)             	release 6
    1067/    1332 : (MACRO)             	Cretn
    1068/    1333 :                     
    1069/    1333 :                     _writeReg:
    1070/    1333 : (MACRO)             	reserve 4
    1071/    133D : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1072/    134A : (MACRO)             	st2 r13,'O',sp,(8); flag1 
    1073/    1357 : (MACRO)             	ld2 R11,'O',sp,(0+6)
    1074/    1363 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1075/    136D :                     ; void writeReg(uint8_t address, uint16_t data) {
    1076/    136D :                     ;    writeRegByte(address, data);
    1077/    136D : (MACRO)             	ld1 R12,'O',sp,(0+6)
    1078/    1377 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1079/    137A : (MACRO)             	ld2 R11,'O',sp,(2+6); INDIRU2(addr)
    1080/    1386 : (MACRO)             	cpy1 R13,R11
    1081/    1388 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1082/    138B : (MACRO)             	Ccall _writeRegByte
    1083/    138E :                     ;    writeRegByte(address + 1, data >> 8);
    1084/    138E : (MACRO)             	ld1 R11,'O',sp,(0+6)
    1085/    1398 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1086/    139B : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    1087/    13A3 : (MACRO)             	cpy1 R12,R11
    1088/    13A5 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1089/    13A8 : (MACRO)             	ld2 R11,'O',sp,(2+6); INDIRU2(addr)
    1090/    13B4 : (MACRO)             	shrU2I R11,8
    1091/    13E4 : (MACRO)             	cpy1 R13,R11
    1092/    13E6 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1093/    13E9 : (MACRO)             	Ccall _writeRegByte
    1094/    13EC :                     ;}
    1095/    13EC :                     L118:
    1096/    13EC : (MACRO)             	release 4
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 20 - 2/28/2013 15:08:33


    1097/    13F4 : (MACRO)             	Cretn
    1098/    13F5 :                     
    1099/    13F5 :                     _writePhy:
    1100/    13F5 : (MACRO)             	reserve 4
    1101/    13FF : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1102/    140C : (MACRO)             	st2 r13,'O',sp,(8); flag1 
    1103/    1419 : (MACRO)             	ld2 R11,'O',sp,(0+6)
    1104/    1425 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1105/    142F :                     ; void writePhy (uint8_t address, uint16_t data) {
    1106/    142F :                     ;    writeRegByte(MIREGADR, address);
    1107/    142F : (MACRO)             	ldaD R12,212
    1108/    1435 : (MACRO)             	ld1 R13,'O',sp,(0+6)
    1109/    143F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1110/    1442 : (MACRO)             	Ccall _writeRegByte
    1111/    1445 :                     ;    writeReg(MIWR, data);
    1112/    1445 : (MACRO)             	ldaD R12,214
    1113/    144B : (MACRO)             	ld2 R13,'O',sp,(2+6); INDIRU2(addr)
    1114/    1457 : (MACRO)             	Ccall _writeReg
    1115/    145A :                     L120:
    1116/    145A :                     ;        ;
    1117/    145A :                     L121:
    1118/    145A :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
    1119/    145A : (MACRO)             	ldaD R12,234
    1120/    1460 : (MACRO)             	Ccall _readRegByte
    1121/    1463 : (MACRO)             	cpy2 R11,R15
    1122/    1467 : (MACRO)             	cpy1 R11,R11
    1123/    1469 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1124/    146C : (MACRO)             	alu2I R11,R11,1,ani,ani
    1125/    1474 :                     	;removed ?	cpy2 R11,R11
    1126/    1474 : (MACRO)             	jneU2I r11,0,L120; NE
    1127/    1480 :                     ;}
    1128/    1480 :                     L119:
    1129/    1480 : (MACRO)             	release 4
    1130/    1488 : (MACRO)             	Cretn
    1131/    1489 :                     
    1132/    1489 :                     _ethbegin:
    1133/    1489 : (MACRO)             	reserve 4
    1134/    1493 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1135/    14A0 : (MACRO)             	ld2 R11,'O',sp,(0+6); INDIRU2(addr)
    1136/    14AC : (MACRO)             	st2 R11,'O',sp,(0+6); ASGNU2(addr,reg)
    1137/    14B9 :                     ;uint8_t ethbegin (const uint16_t size) {
    1138/    14B9 :                     ;  return encinitialize(size, mymac);
    1139/    14B9 : (MACRO)             	ld2 R12,'O',sp,(0+6); INDIRU2(addr)
    1140/    14C5 : (MACRO)             	ldaD R13,_mymac
    1141/    14CB : (MACRO)             	Ccall _encinitialize
    1142/    14CE : (MACRO)             	cpy2 R11,R15
    1143/    14D2 : (MACRO)             	cpy1 R15,R11
    1144/    14D4 : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    1145/    14D7 :                     L123:
    1146/    14D7 : (MACRO)             	release 4
    1147/    14DF : (MACRO)             	Cretn
    1148/    14E0 :                     
    1149/    14E0 :                     _encinitSPI:
    1150/    14E0 : (MACRO)             	reserve 4
    1151/    14EA :                     ;void encinitSPI () {
    1152/    14EA :                     ;    digitalWrite(mosi, HIGH);
    1153/    14EA : (MACRO)             	ldaD R12,7
    1154/    14F0 : (MACRO)             	ldaD R13,1
    1155/    14F6 : (MACRO)             	Ccall _digitalWrite
    1156/    14F9 :                     ;    digitalWrite(mosi, LOW);
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 21 - 2/28/2013 15:08:33


    1157/    14F9 : (MACRO)             	ldaD R12,7
    1158/    14FF : (MACRO)             	ldaD R13,0
    1159/    1505 : (MACRO)             	Ccall _digitalWrite
    1160/    1508 :                     ;    digitalWrite(sck, LOW);
    1161/    1508 : (MACRO)             	ldaD R12,5
    1162/    150E : (MACRO)             	ldaD R13,0
    1163/    1514 : (MACRO)             	Ccall _digitalWrite
    1164/    1517 :                     ;}
    1165/    1517 :                     L124:
    1166/    1517 : (MACRO)             	release 4
    1167/    151F : (MACRO)             	Cretn
    1168/    1520 :                     
    1169/    1520 :                     _encinitialize:
    1170/    1520 : (MACRO)             	reserve 10
    1171/    152A : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
    1172/    1532 : EE                  	sex	memaddr
    1173/    1533 : (MACRO)             	savmi r1
    1174/    1537 : (MACRO)             	savmi r7
    1175/    153B : E2                  	sex sp
    1176/    153C : (MACRO)             	st2 r12,'O',sp,(12); flag1 
    1177/    1549 : (MACRO)             	cpy2 r7,r13; function(2055) 1
    1178/    154D :                     ;uint8_t encinitialize (uint16_t size, const uint8_t* macaddr) {
    1179/    154D :                     ;    bufferSize = size;
    1180/    154D : (MACRO)             	ld2 R11,'O',sp,(0+12); INDIRU2(addr)
    1181/    1559 : (MACRO)             	st2 R11,'D',(_bufferSize),0; ASGNU2(addr,reg)
    1182/    1564 :                     ;    encinitSPI();
    1183/    1564 : (MACRO)             	Ccall _encinitSPI
    1184/    1567 :                     ;    disableChip();
    1185/    1567 : (MACRO)             	Ccall _disableChip
    1186/    156A :                     ;    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    1187/    156A : (MACRO)             	ldaD R11,255
    1188/    1570 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    1189/    1574 : (MACRO)             	ldaD R13,0
    1190/    157A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1191/    1587 : (MACRO)             	Ccall _writeOp
    1192/    158A :                     L126:
    1193/    158A :                     ;        ;
    1194/    158A :                     L127:
    1195/    158A :                     ;    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
    1196/    158A : (MACRO)             	ldaD R12,0
    1197/    1590 : (MACRO)             	ldaD R13,29
    1198/    1596 : (MACRO)             	Ccall _readOp
    1199/    1599 : (MACRO)             	cpy2 R11,R15
    1200/    159D : (MACRO)             	cpy1 R11,R11
    1201/    159F : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1202/    15A2 : (MACRO)             	jneU2I r11,0,L130; NE
    1203/    15AE : (MACRO)             	ldaD R1,1
    1204/    15B4 : C0 15 BD            	lbr L131
    1205/    15B7 :                     L130:
    1206/    15B7 : (MACRO)             	ldaD R1,0
    1207/    15BD :                     L131:
    1208/    15BD : (MACRO)             	alu2I R11,R1,1,ani,ani
    1209/    15C5 :                     	;removed ?	cpy2 R11,R1
    1210/    15C5 : (MACRO)             	jneU2I r11,0,L126; NE
    1211/    15D1 :                     ;    gNextPacketPtr = RXSTART_INIT;
    1212/    15D1 : (MACRO)             	ldaD R11,0
    1213/    15D7 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0
    1214/    15E2 :                     ;    writeReg(ERXST, RXSTART_INIT);
    1215/    15E2 : (MACRO)             	ldaD R12,8
    1216/    15E8 : (MACRO)             	ld2z R13
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 22 - 2/28/2013 15:08:33


    1217/    15EC : (MACRO)             	Ccall _writeReg
    1218/    15EF :                     ;    writeReg(ERXRDPT, RXSTART_INIT);
    1219/    15EF : (MACRO)             	ldaD R12,12
    1220/    15F5 : (MACRO)             	ld2z R13
    1221/    15F9 : (MACRO)             	Ccall _writeReg
    1222/    15FC :                     ;    writeReg(ERXND, RXSTOP_INIT);
    1223/    15FC : (MACRO)             	ldaD R12,10
    1224/    1602 : (MACRO)             	ldaD R13,3071
    1225/    1608 : (MACRO)             	Ccall _writeReg
    1226/    160B :                     ;    writeReg(ETXST, TXSTART_INIT);
    1227/    160B : (MACRO)             	ldaD R12,4
    1228/    1611 : (MACRO)             	ldaD R13,3072
    1229/    1617 : (MACRO)             	Ccall _writeReg
    1230/    161A :                     ;    writeReg(ETXND, TXSTOP_INIT);
    1231/    161A : (MACRO)             	ldaD R12,6
    1232/    1620 : (MACRO)             	ldaD R13,4607
    1233/    1626 : (MACRO)             	Ccall _writeReg
    1234/    1629 :                     ;    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
    1235/    1629 : (MACRO)             	ldaD R12,56
    1236/    162F : (MACRO)             	ldaD R13,176
    1237/    1635 : (MACRO)             	Ccall _writeRegByte
    1238/    1638 :                     ;    writeReg(EPMM0, 0x303f);
    1239/    1638 : (MACRO)             	ldaD R12,40
    1240/    163E : (MACRO)             	ldaD R13,12351
    1241/    1644 : (MACRO)             	Ccall _writeReg
    1242/    1647 :                     ;    writeReg(EPMCS, 0xf7f9);
    1243/    1647 : (MACRO)             	ldaD R12,48
    1244/    164D : (MACRO)             	ldaD R13,0xf7f9
    1245/    1653 : (MACRO)             	Ccall _writeReg
    1246/    1656 :                     ;    writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    1247/    1656 : (MACRO)             	ldaD R12,192
    1248/    165C : (MACRO)             	ldaD R13,13
    1249/    1662 : (MACRO)             	Ccall _writeRegByte
    1250/    1665 :                     ;    writeRegByte(MACON2, 0x00);
    1251/    1665 : (MACRO)             	ldaD R12,193
    1252/    166B : (MACRO)             	ldaD R13,0
    1253/    1671 : (MACRO)             	Ccall _writeRegByte
    1254/    1674 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
    1255/    1674 : (MACRO)             	ldaD R12,128
    1256/    167A : (MACRO)             	ldaD R13,194
    1257/    1680 : (MACRO)             	ldaD R11,50
    1258/    1686 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1259/    1693 : (MACRO)             	Ccall _writeOp
    1260/    1696 :                     ;    writeReg(MAIPG, 0x0C12);
    1261/    1696 : (MACRO)             	ldaD R12,198
    1262/    169C : (MACRO)             	ldaD R13,3090
    1263/    16A2 : (MACRO)             	Ccall _writeReg
    1264/    16A5 :                     ;    writeRegByte(MABBIPG, 0x12);
    1265/    16A5 : (MACRO)             	ldaD R12,196
    1266/    16AB : (MACRO)             	ldaD R13,18
    1267/    16B1 : (MACRO)             	Ccall _writeRegByte
    1268/    16B4 :                     ;    writeReg(MAMXFL, MAX_FRAMELEN);
    1269/    16B4 : (MACRO)             	ldaD R12,202
    1270/    16BA : (MACRO)             	ldaD R13,1500
    1271/    16C0 : (MACRO)             	Ccall _writeReg
    1272/    16C3 :                     ;    writeRegByte(MAADR5, macaddr[0]);
    1273/    16C3 : (MACRO)             	ldaD R12,228
    1274/    16C9 : (MACRO)             	ld1 R13,'O',R7,0
    1275/    16D3 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1276/    16D6 : (MACRO)             	Ccall _writeRegByte
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 23 - 2/28/2013 15:08:33


    1277/    16D9 :                     ;    writeRegByte(MAADR4, macaddr[1]);
    1278/    16D9 : (MACRO)             	ldaD R12,229
    1279/    16DF : (MACRO)             	ld1 R13,'O',R7,(1)
    1280/    16E9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1281/    16EC : (MACRO)             	Ccall _writeRegByte
    1282/    16EF :                     ;    writeRegByte(MAADR3, macaddr[2]);
    1283/    16EF : (MACRO)             	ldaD R12,226
    1284/    16F5 : (MACRO)             	ld1 R13,'O',R7,(2)
    1285/    16FF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1286/    1702 : (MACRO)             	Ccall _writeRegByte
    1287/    1705 :                     ;    writeRegByte(MAADR2, macaddr[3]);
    1288/    1705 : (MACRO)             	ldaD R12,227
    1289/    170B : (MACRO)             	ld1 R13,'O',R7,(3)
    1290/    1715 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1291/    1718 : (MACRO)             	Ccall _writeRegByte
    1292/    171B :                     ;    writeRegByte(MAADR1, macaddr[4]);
    1293/    171B : (MACRO)             	ldaD R12,224
    1294/    1721 : (MACRO)             	ld1 R13,'O',R7,(4)
    1295/    172B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1296/    172E : (MACRO)             	Ccall _writeRegByte
    1297/    1731 :                     ;    writeRegByte(MAADR0, macaddr[5]);
    1298/    1731 : (MACRO)             	ldaD R12,225
    1299/    1737 : (MACRO)             	ld1 R13,'O',R7,(5)
    1300/    1741 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1301/    1744 : (MACRO)             	Ccall _writeRegByte
    1302/    1747 :                     ;    writePhy(PHCON2, PHCON2_HDLDIS);
    1303/    1747 : (MACRO)             	ldaD R12,16
    1304/    174D : (MACRO)             	ldaD R13,256
    1305/    1753 : (MACRO)             	Ccall _writePhy
    1306/    1756 :                     ;    SetBank(ECON1);
    1307/    1756 : (MACRO)             	ldaD R12,31
    1308/    175C : (MACRO)             	Ccall _SetBank
    1309/    175F :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    1310/    175F : (MACRO)             	ldaD R12,128
    1311/    1765 : (MACRO)             	ldaD R13,27
    1312/    176B : (MACRO)             	ldaD R11,192
    1313/    1771 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1314/    177E : (MACRO)             	Ccall _writeOp
    1315/    1781 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    1316/    1781 : (MACRO)             	ldaD R12,128
    1317/    1787 : (MACRO)             	ldaD R13,31
    1318/    178D : (MACRO)             	ldaD R11,4
    1319/    1793 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1320/    17A0 : (MACRO)             	Ccall _writeOp
    1321/    17A3 :                     ;    return readRegByte(EREVID);
    1322/    17A3 : (MACRO)             	ldaD R12,114
    1323/    17A9 : (MACRO)             	Ccall _readRegByte
    1324/    17AC : (MACRO)             	cpy2 R11,R15
    1325/    17B0 : (MACRO)             	cpy1 R15,R11
    1326/    17B2 : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    1327/    17B5 :                     L125:
    1328/    17B5 : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
    1329/    17BD : (MACRO)             	rldmi r7,memaddr
    1330/    17C1 : (MACRO)             	rldmi r1,memaddr
    1331/    17C5 : (MACRO)             	release 10
    1332/    17CD : (MACRO)             	Cretn
    1333/    17CE :                     
    1334/    17CE :                     _encpacketReceive:
    1335/    17CE : (MACRO)             	reserve 18
    1336/    17D8 : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 24 - 2/28/2013 15:08:33


    1337/    17E0 : EE                  	sex	memaddr
    1338/    17E1 : (MACRO)             	savmi r7
    1339/    17E5 : E2                  	sex sp
    1340/    17E6 :                     ;uint16_t encpacketReceive() {
    1341/    17E6 :                     ;    uint16_t len = 0;
    1342/    17E6 : (MACRO)             	ld2z R7
    1343/    17EA :                     ;    if (readRegByte(EPKTCNT) > 0) {
    1344/    17EA : (MACRO)             	ldaD R12,57
    1345/    17F0 : (MACRO)             	Ccall _readRegByte
    1346/    17F3 : (MACRO)             	cpy2 R11,R15
    1347/    17F7 : (MACRO)             	cpy1 R11,R11
    1348/    17F9 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1349/    17FC : (MACRO)             	jnI2I r11,0,lbdf,L134 ;LEI2 0 11 L134; LE is flipped test & subtraction
    1350/    180D :                     ;        writeReg(ERDPT, gNextPacketPtr);
    1351/    180D : (MACRO)             	ldaD R12,0
    1352/    1813 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0
    1353/    181D : (MACRO)             	cpy2 R13,R11
    1354/    1821 : (MACRO)             	Ccall _writeReg
    1355/    1824 :                     ;        readBuf(sizeof header, (uint8_t*) &header);
    1356/    1824 : (MACRO)             	ldaD R12,6
    1357/    182A : (MACRO)             	ldA2 R13,'O',sp,(-8+20); reg:addr
    1358/    1832 : (MACRO)             	Ccall _readBuf
    1359/    1835 :                     ;        headernextPacket=header.nextPacketL+(header.nextPacketH<<8); //assemble next packet pointer
    1360/    1835 : (MACRO)             	ld1 R11,'O',sp,(-8+20)
    1361/    183F : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1362/    1842 : (MACRO)             	ld1 R10,'O',sp,(-7+20)
    1363/    184C : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1364/    184F : (MACRO)             	shl2I R10,8
    1365/    187F : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
    1366/    188B : (MACRO)             	st2 R11,'O',sp,(-10+20); ASGNU2(addr,reg)
    1367/    1898 :                     ;        headerbyteCount=header.byteCountL+(header.byteCountH<<8); //assemble byte count
    1368/    1898 : (MACRO)             	ld1 R11,'O',sp,(-6+20)
    1369/    18A2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1370/    18A5 : (MACRO)             	ld1 R10,'O',sp,(-5+20)
    1371/    18AF : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1372/    18B2 : (MACRO)             	shl2I R10,8
    1373/    18E2 : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
    1374/    18EE : (MACRO)             	st2 R11,'O',sp,(-12+20); ASGNU2(addr,reg)
    1375/    18FB :                     ;        gNextPacketPtr  = headernextPacket;
    1376/    18FB : (MACRO)             	ld2 R11,'O',sp,(-10+20); INDIRU2(addr)
    1377/    1907 : (MACRO)             	st2 R11,'D',(_gNextPacketPtr),0
    1378/    1912 :                     ;        len = headerbyteCount - 4; //remove the CRC count
    1379/    1912 : (MACRO)             	ld2 R11,'O',sp,(-12+20); INDIRU2(addr)
    1380/    191E : (MACRO)             	alu2I R7,R11,4,smi,smbi
    1381/    1926 :                     ;        if (len>bufferSize-1)
    1382/    1926 : (MACRO)             	ld2 R11,'D',(_bufferSize),0; INDIRU2(addr)
    1383/    1930 : (MACRO)             	alu2I R11,R11,1,smi,smbi
    1384/    1938 : (MACRO)             	jcU2 r11,r7,lbdf,L139 ;LE is flipped test & operands
    1385/    1945 :                     ;            len=bufferSize-1;
    1386/    1945 : (MACRO)             	ld2 R11,'D',(_bufferSize),0; INDIRU2(addr)
    1387/    194F : (MACRO)             	alu2I R7,R11,1,smi,smbi
    1388/    1957 :                     L139:
    1389/    1957 :                     ;        if ((header.statusL & 0x80)==0)
    1390/    1957 : (MACRO)             	ld1 R11,'O',sp,(-4+20)
    1391/    1961 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1392/    1964 : (MACRO)             	alu2I R11,R11,128,ani,ani
    1393/    196C :                     	;removed ?	cpy2 R11,R11
    1394/    196C : (MACRO)             	jneU2I r11,0,L141; NE
    1395/    1978 :                     ;            len = 0;
    1396/    1978 : (MACRO)             	ld2z R7
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 25 - 2/28/2013 15:08:33


    1397/    197C : C0 19 8C            	lbr L142
    1398/    197F :                     L141:
    1399/    197F :                     ;            readBuf(len, buffer);
    1400/    197F : (MACRO)             	cpy2 R12,R7
    1401/    1983 : (MACRO)             	ldaD R13,_buffer
    1402/    1989 : (MACRO)             	Ccall _readBuf
    1403/    198C :                     L142:
    1404/    198C :                     ;        buffer[len] = 0;
    1405/    198C : (MACRO)             	ldaD R11,0
    1406/    1992 : (MACRO)             	st1 R11,'O',R7,(_buffer); ASGNU1
    1407/    199C :                     ;        if (gNextPacketPtr - 1 > RXSTOP_INIT)
    1408/    199C : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0
    1409/    19A6 : (MACRO)             	alu2I R11,R11,1,smi,smbi
    1410/    19AE : (MACRO)             	jnI2I r11,3071,lbdf,L144 ;LEI2 3071 11 L144; LE is flipped test & subtraction
    1411/    19BF :                     ;            writeReg(ERXRDPT, RXSTOP_INIT);
    1412/    19BF : (MACRO)             	ldaD R12,12
    1413/    19C5 : (MACRO)             	ldaD R13,3071
    1414/    19CB : (MACRO)             	Ccall _writeReg
    1415/    19CE : C0 19 F0            	lbr L145
    1416/    19D1 :                     L144:
    1417/    19D1 :                     ;            writeReg(ERXRDPT, gNextPacketPtr - 1);
    1418/    19D1 : (MACRO)             	ldaD R12,12
    1419/    19D7 : (MACRO)             	ld2 R11,'D',(_gNextPacketPtr),0
    1420/    19E1 : (MACRO)             	alu2I R11,R11,1,smi,smbi
    1421/    19E9 : (MACRO)             	cpy2 R13,R11
    1422/    19ED : (MACRO)             	Ccall _writeReg
    1423/    19F0 :                     L145:
    1424/    19F0 :                     ;        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1425/    19F0 : (MACRO)             	ldaD R12,128
    1426/    19F6 : (MACRO)             	ldaD R13,30
    1427/    19FC : (MACRO)             	ldaD R11,64
    1428/    1A02 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1429/    1A0F : (MACRO)             	Ccall _writeOp
    1430/    1A12 :                     ;    }
    1431/    1A12 :                     L134:
    1432/    1A12 :                     ;    return len;
    1433/    1A12 : (MACRO)             	cpy2 R15,R7
    1434/    1A16 :                     L132:
    1435/    1A16 : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
    1436/    1A1E : (MACRO)             	rldmi r7,memaddr
    1437/    1A22 : (MACRO)             	release 18
    1438/    1A2A : (MACRO)             	Cretn
    1439/    1A2B :                     
    1440/    1A2B :                     _readBuf:
    1441/    1A2B : (MACRO)             	reserve 10
    1442/    1A35 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
    1443/    1A3D : EE                  	sex	memaddr
    1444/    1A3E : (MACRO)             	savmi r0
    1445/    1A42 : (MACRO)             	savmi r1
    1446/    1A46 : (MACRO)             	savmi r7
    1447/    1A4A : E2                  	sex sp
    1448/    1A4B : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1449/    1A4F : (MACRO)             	cpy2 r1,r13; function(2055) 1
    1450/    1A53 :                     ; void readBuf(uint16_t len, uint8_t* data) {
    1451/    1A53 :                     ;    enableChip();
    1452/    1A53 : (MACRO)             	Ccall _enableChip
    1453/    1A56 :                     ;    xferSPI(ENC28J60_READ_BUF_MEM);
    1454/    1A56 : (MACRO)             	ldaD R12,58
    1455/    1A5C : (MACRO)             	Ccall _xferSPI
    1456/    1A5F : C0 1A 87            	lbr L148
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 26 - 2/28/2013 15:08:33


    1457/    1A62 :                     L147:
    1458/    1A62 :                     ;    while (len--) {
    1459/    1A62 :                     ;        x=xferSPI(0x00);
    1460/    1A62 : (MACRO)             	ldaD R12,0
    1461/    1A68 : (MACRO)             	Ccall _xferSPI
    1462/    1A6B : (MACRO)             	cpy2 R11,R15
    1463/    1A6F : (MACRO)             	cpy1 R0,R11
    1464/    1A71 :                     ;        *data++ = x;
    1465/    1A71 : (MACRO)             	cpy2 R11,R1
    1466/    1A75 : (MACRO)             	ldA2 R1,'O',R11,(1); reg:addr
    1467/    1A7D : (MACRO)             	st1 R0,'O',R11,0; ASGNU1
    1468/    1A87 :                     ;    }
    1469/    1A87 :                     L148:
    1470/    1A87 :                     ;    while (len--) {
    1471/    1A87 : (MACRO)             	cpy2 R11,R7
    1472/    1A8B : (MACRO)             	alu2I R7,R11,1,smi,smbi
    1473/    1A93 : (MACRO)             	jnzU2 r11,L147; NE 0
    1474/    1A9B :                     ;    disableChip();
    1475/    1A9B : (MACRO)             	Ccall _disableChip
    1476/    1A9E :                     ;}
    1477/    1A9E :                     L146:
    1478/    1A9E : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
    1479/    1AA6 : (MACRO)             	rldmi r7,memaddr
    1480/    1AAA : (MACRO)             	rldmi r1,memaddr
    1481/    1AAE : (MACRO)             	rldmi r0,memaddr
    1482/    1AB2 : (MACRO)             	release 10
    1483/    1ABA : (MACRO)             	Cretn
    1484/    1ABB :                     
    1485/    1ABB :                     _writeBuf:
    1486/    1ABB : (MACRO)             	reserve 8
    1487/    1AC5 : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
    1488/    1ACD : EE                  	sex	memaddr
    1489/    1ACE : (MACRO)             	savmi r1
    1490/    1AD2 : (MACRO)             	savmi r7
    1491/    1AD6 : E2                  	sex sp
    1492/    1AD7 : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1493/    1ADB : (MACRO)             	cpy2 r1,r13; function(2055) 1
    1494/    1ADF :                     ; void writeBuf(uint16_t len, const uint8_t* data) {
    1495/    1ADF :                     ;    enableChip();
    1496/    1ADF : (MACRO)             	Ccall _enableChip
    1497/    1AE2 :                     ;    xferSPI(ENC28J60_WRITE_BUF_MEM);
    1498/    1AE2 : (MACRO)             	ldaD R12,122
    1499/    1AE8 : (MACRO)             	Ccall _xferSPI
    1500/    1AEB : C0 1B 0A            	lbr L152
    1501/    1AEE :                     L151:
    1502/    1AEE :                     ;        xferSPI(*data++);
    1503/    1AEE : (MACRO)             	cpy2 R11,R1
    1504/    1AF2 : (MACRO)             	ldA2 R1,'O',R11,(1); reg:addr
    1505/    1AFA : (MACRO)             	ld1 R12,'O',R11,0
    1506/    1B04 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1507/    1B07 : (MACRO)             	Ccall _xferSPI
    1508/    1B0A :                     L152:
    1509/    1B0A :                     ;    while (len--)
    1510/    1B0A : (MACRO)             	cpy2 R11,R7
    1511/    1B0E : (MACRO)             	alu2I R7,R11,1,smi,smbi
    1512/    1B16 : (MACRO)             	jnzU2 r11,L151; NE 0
    1513/    1B1E :                     ;    disableChip();
    1514/    1B1E : (MACRO)             	Ccall _disableChip
    1515/    1B21 :                     ;}
    1516/    1B21 :                     L150:
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 27 - 2/28/2013 15:08:33


    1517/    1B21 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
    1518/    1B29 : (MACRO)             	rldmi r7,memaddr
    1519/    1B2D : (MACRO)             	rldmi r1,memaddr
    1520/    1B31 : (MACRO)             	release 8
    1521/    1B39 : (MACRO)             	Cretn
    1522/    1B3A :                     
    1523/    1B3A :                     _encpacketSend:
    1524/    1B3A : (MACRO)             	reserve 6
    1525/    1B44 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    1526/    1B51 :                     ;void encpacketSend(uint16_t len) {
    1527/    1B51 : C0 1B BC            	lbr L156
    1528/    1B54 :                     L155:
    1529/    1B54 :                     ;        if (readRegByte(EIR) & EIR_TXERIF) {
    1530/    1B54 : (MACRO)             	ldaD R12,28
    1531/    1B5A : (MACRO)             	Ccall _readRegByte
    1532/    1B5D : (MACRO)             	cpy2 R11,R15
    1533/    1B61 : (MACRO)             	cpy1 R11,R11
    1534/    1B63 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1535/    1B66 : (MACRO)             	alu2I R11,R11,2,ani,ani
    1536/    1B6E :                     	;removed ?	cpy2 R11,R11
    1537/    1B6E : (MACRO)             	jeqU2I r11,0,L158
    1538/    1B7A :                     ;            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    1539/    1B7A : (MACRO)             	ldaD R11,128
    1540/    1B80 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    1541/    1B84 : (MACRO)             	ldaD R13,31
    1542/    1B8A : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1543/    1B97 : (MACRO)             	Ccall _writeOp
    1544/    1B9A :                     ;            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    1545/    1B9A : (MACRO)             	ldaD R12,160
    1546/    1BA0 : (MACRO)             	ldaD R13,31
    1547/    1BA6 : (MACRO)             	ldaD R11,128
    1548/    1BAC : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1549/    1BB9 : (MACRO)             	Ccall _writeOp
    1550/    1BBC :                     ;        }
    1551/    1BBC :                     L158:
    1552/    1BBC :                     L156:
    1553/    1BBC :                     ;    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    1554/    1BBC : (MACRO)             	ldaD R12,0
    1555/    1BC2 : (MACRO)             	ldaD R13,31
    1556/    1BC8 : (MACRO)             	Ccall _readOp
    1557/    1BCB : (MACRO)             	cpy2 R11,R15
    1558/    1BCF : (MACRO)             	cpy1 R11,R11
    1559/    1BD1 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1560/    1BD4 : (MACRO)             	alu2I R11,R11,8,ani,ani
    1561/    1BDC :                     	;removed ?	cpy2 R11,R11
    1562/    1BDC : (MACRO)             	jneU2I r11,0,L155; NE
    1563/    1BE8 :                     ;    writeReg(EWRPT, TXSTART_INIT);
    1564/    1BE8 : (MACRO)             	ldaD R12,2
    1565/    1BEE : (MACRO)             	ldaD R13,3072
    1566/    1BF4 : (MACRO)             	Ccall _writeReg
    1567/    1BF7 :                     ;    writeReg(ETXND, TXSTART_INIT+len);
    1568/    1BF7 : (MACRO)             	ldaD R12,6
    1569/    1BFD : (MACRO)             	ld2 R11,'O',sp,(0+8); INDIRU2(addr)
    1570/    1C09 : (MACRO)             	ldA2 R13,'O',R11,(3072); reg:addr
    1571/    1C11 : (MACRO)             	Ccall _writeReg
    1572/    1C14 :                     ;    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1573/    1C14 : (MACRO)             	ldaD R12,122
    1574/    1C1A : (MACRO)             	ldaD R11,0
    1575/    1C20 : (MACRO)             	cpy2 R13,R11 ;LOADI2
    1576/    1C24 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 28 - 2/28/2013 15:08:33


    1577/    1C31 : (MACRO)             	Ccall _writeOp
    1578/    1C34 :                     ;    writeBuf(len, buffer);
    1579/    1C34 : (MACRO)             	ld2 R12,'O',sp,(0+8); INDIRU2(addr)
    1580/    1C40 : (MACRO)             	ldaD R13,_buffer
    1581/    1C46 : (MACRO)             	Ccall _writeBuf
    1582/    1C49 :                     ;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1583/    1C49 : (MACRO)             	ldaD R12,128
    1584/    1C4F : (MACRO)             	ldaD R13,31
    1585/    1C55 : (MACRO)             	ldaD R11,8
    1586/    1C5B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1587/    1C68 : (MACRO)             	Ccall _writeOp
    1588/    1C6B :                     ;}
    1589/    1C6B :                     L154:
    1590/    1C6B : (MACRO)             	release 6
    1591/    1C73 : (MACRO)             	Cretn
    1592/    1C74 :                     
    1593/    1C74 :                     _isLinkUp:
    1594/    1C74 : (MACRO)             	reserve 4
    1595/    1C7E :                     ;int isLinkUp() {
    1596/    1C7E :                     ;    return (readPhyByte(PHSTAT2) >> 2) & 1;
    1597/    1C7E : (MACRO)             	ldaD R12,17
    1598/    1C84 : (MACRO)             	Ccall _readPhyByte
    1599/    1C87 : (MACRO)             	cpy2 R11,R15
    1600/    1C8B : (MACRO)             	shrU2I R11,2
    1601/    1C97 : (MACRO)             	alu2I R11,R11,1,ani,ani ;removed copy;BANDU2(reg,con)  
    1602/    1C9F : (MACRO)             	cpy2 R15,R11 ;LOADI2
    1603/    1CA3 :                     L160:
    1604/    1CA3 : (MACRO)             	release 4
    1605/    1CAB : (MACRO)             	Cretn
    1606/    1CAC :                     
    1607/    1CAC :                     _readPhyByte:
    1608/    1CAC : (MACRO)             	reserve 4
    1609/    1CB6 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1610/    1CC3 : (MACRO)             	ld2 R11,'O',sp,(0+6)
    1611/    1CCF : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
    1612/    1CD9 :                     ; uint16_t readPhyByte (uint8_t address) {
    1613/    1CD9 :                     ;    writeRegByte(MIREGADR, address);
    1614/    1CD9 : (MACRO)             	ldaD R12,212
    1615/    1CDF : (MACRO)             	ld1 R13,'O',sp,(0+6)
    1616/    1CE9 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1617/    1CEC : (MACRO)             	Ccall _writeRegByte
    1618/    1CEF :                     ;    writeRegByte(MICMD, MICMD_MIIRD);
    1619/    1CEF : (MACRO)             	ldaD R12,210
    1620/    1CF5 : (MACRO)             	ldaD R13,1
    1621/    1CFB : (MACRO)             	Ccall _writeRegByte
    1622/    1CFE :                     L162:
    1623/    1CFE :                     ;        ;
    1624/    1CFE :                     L163:
    1625/    1CFE :                     ;    while (readRegByte(MISTAT) & MISTAT_BUSY)
    1626/    1CFE : (MACRO)             	ldaD R12,234
    1627/    1D04 : (MACRO)             	Ccall _readRegByte
    1628/    1D07 : (MACRO)             	cpy2 R11,R15
    1629/    1D0B : (MACRO)             	cpy1 R11,R11
    1630/    1D0D : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1631/    1D10 : (MACRO)             	alu2I R11,R11,1,ani,ani
    1632/    1D18 :                     	;removed ?	cpy2 R11,R11
    1633/    1D18 : (MACRO)             	jneU2I r11,0,L162; NE
    1634/    1D24 :                     ;    writeRegByte(MICMD, 0x00);
    1635/    1D24 : (MACRO)             	ldaD R12,210
    1636/    1D2A : (MACRO)             	ldaD R13,0
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 29 - 2/28/2013 15:08:33


    1637/    1D30 : (MACRO)             	Ccall _writeRegByte
    1638/    1D33 :                     ;    return readRegByte(MIRD+1);
    1639/    1D33 : (MACRO)             	ldaD R12,217
    1640/    1D39 : (MACRO)             	Ccall _readRegByte
    1641/    1D3C : (MACRO)             	cpy2 R11,R15
    1642/    1D40 : (MACRO)             	cpy1 R11,R11
    1643/    1D42 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1644/    1D45 : (MACRO)             	cpy2 R15,R11
    1645/    1D49 :                     L161:
    1646/    1D49 : (MACRO)             	release 4
    1647/    1D51 : (MACRO)             	Cretn
    1648/    1D52 :                     
    1649/    1D52 :                     _tcpclient_src_port_l:
    1650/    1D52 : 01                  	db 1
    1651/    1D53 :                     _delaycnt:
    1652/    1D53 : 00 01               	dw 1
    1653/    1D55 :                     _seqnum:
    1654/    1D55 : 0A                  	db 10
    1655/    1D56 :                     _arpreqhdr:
    1656/    1D56 : 00                  	db 0
    1657/    1D57 : 01                  	db 1
    1658/    1D58 : 08                  	db 8
    1659/    1D59 : 00                  	db 0
    1660/    1D5A : 06                  	db 6
    1661/    1D5B : 04                  	db 4
    1662/    1D5C : 00                  	db 0
    1663/    1D5D : 01                  	db 1
    1664/    1D5E :                     _iphdr:
    1665/    1D5E : 45                  	db 69
    1666/    1D5F : 00                  	db 0
    1667/    1D60 : 00                  	db 0
    1668/    1D61 : 82                  	db 130
    1669/    1D62 : 00                  	db 0
    1670/    1D63 : 00                  	db 0
    1671/    1D64 : 40                  	db 64
    1672/    1D65 : 00                  	db 0
    1673/    1D66 : 20                  	db 32
    1674/    1D67 :                     _ntpreqhdr:
    1675/    1D67 : E3                  	db 227
    1676/    1D68 : 00                  	db 0
    1677/    1D69 : 04                  	db 4
    1678/    1D6A : FA                  	db 250
    1679/    1D6B : 00                  	db 0
    1680/    1D6C : 01                  	db 1
    1681/    1D6D : 00                  	db 0
    1682/    1D6E : 00                  	db 0
    1683/    1D6F : 00                  	db 0
    1684/    1D70 : 01                  	db 1
    1685/    1D71 :                     _allOnes:
    1686/    1D71 : FF                  	db 255
    1687/    1D72 : FF                  	db 255
    1688/    1D73 : FF                  	db 255
    1689/    1D74 : FF                  	db 255
    1690/    1D75 : FF                  	db 255
    1691/    1D76 : FF                  	db 255
    1692/    1D77 :                     _tcppacketLoop:
    1693/    1D77 : (MACRO)             	reserve 18
    1694/    1D81 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
    1695/    1D89 : EE                  	sex	memaddr
    1696/    1D8A : (MACRO)             	savmi r7
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 30 - 2/28/2013 15:08:33


    1697/    1D8E : E2                  	sex sp
    1698/    1D8F : (MACRO)             	cpy2 r7,r12; function(2054) 1
    1699/    1D93 :                     ;word tcppacketLoop (word plen) {
    1700/    1D93 :                     ;  if (plen==0) {
    1701/    1D93 : (MACRO)             	jnzU2 r7,L166; NE 0
    1702/    1D9B :                     ;    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1703/    1D9B : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1704/    1DA3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1705/    1DA6 : (MACRO)             	ldaD R10,0
    1706/    1DAC : (MACRO)             	alu2I R9,R11,1,ani,ani
    1707/    1DB4 :                     	;removed ?	cpy2 R9,R11
    1708/    1DB4 : (MACRO)             	jneU2 r9,r10,L170; NE
    1709/    1DC6 : (MACRO)             	alu2I R11,R11,4,ani,ani
    1710/    1DCE :                     	;removed ?	cpy2 R11,R11
    1711/    1DCE : (MACRO)             	jeqI2 r11,r10,L168
    1712/    1DE0 :                     L170:
    1713/    1DE0 : (MACRO)             	ld2 R11,'D',(_delaycnt),0
    1714/    1DEA : (MACRO)             	jneU2I r11,0,L168; NE
    1715/    1DF6 : (MACRO)             	Ccall _isLinkUp
    1716/    1DF9 : (MACRO)             	jeqU2I r15,0,L168
    1717/    1E05 :                     ;      client_arp_whohas(gwip);
    1718/    1E05 : (MACRO)             	ldaD R12,_gwip
    1719/    1E0B : (MACRO)             	Ccall _client_arp_whohas
    1720/    1E0E :                     L168:
    1721/    1E0E :                     ;    delaycnt++;
    1722/    1E0E : (MACRO)             	ld2 R11,'D',(_delaycnt),0
    1723/    1E18 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    1724/    1E20 : (MACRO)             	st2 R11,'D',(_delaycnt),0
    1725/    1E2B :                     ;    if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1726/    1E2B : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1727/    1E33 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1728/    1E36 : (MACRO)             	jneU2I r11,1,L171; NE
    1729/    1E42 : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1730/    1E4A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1731/    1E4D : (MACRO)             	alu2I R11,R11,2,ani,ani
    1732/    1E55 :                     	;removed ?	cpy2 R11,R11
    1733/    1E55 : (MACRO)             	jeqU2I r11,0,L171
    1734/    1E61 :                     ;      tcp_client_state = 2;
    1735/    1E61 : (MACRO)             	ldaD R11,2
    1736/    1E67 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1737/    1E6F :                     ;      tcpclient_src_port_l++; // allocate a new port
    1738/    1E6F : (MACRO)             	ld1 R11,'D',(_tcpclient_src_port_l),0
    1739/    1E77 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1740/    1E7A : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    1741/    1E82 : (MACRO)             	st1 R11,'D',(_tcpclient_src_port_l),0; ASGNU1
    1742/    1E8A :                     ;      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1743/    1E8A : (MACRO)             	ld1 R11,'D',(_tcp_fd),0
    1744/    1E92 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1745/    1E95 : (MACRO)             	shl2I R11,5
    1746/    1EB3 : (MACRO)             	ld1 R10,'D',(_tcpclient_src_port_l),0
    1747/    1EBB : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1748/    1EBE : (MACRO)             	alu2I R10,R10,31,ani,ani
    1749/    1EC6 :                     	;removed ?	cpy2 R10,R10
    1750/    1EC6 : (MACRO)             	alu2 R11,R11,R10,or,or
    1751/    1ED2 : (MACRO)             	cpy1 R12,R11
    1752/    1ED4 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1753/    1ED7 : (MACRO)             	ld1 R13,'D',(_tcp_client_port_h),0
    1754/    1EDF : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    1755/    1EE2 : (MACRO)             	ld1 R11,'D',(_tcp_client_port_l),0
    1756/    1EEA : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 31 - 2/28/2013 15:08:33


    1757/    1EED : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1758/    1EFA : (MACRO)             	Ccall _client_syn
    1759/    1EFD :                     ;    }
    1760/    1EFD :                     L171:
    1761/    1EFD :                     ;    return 0;
    1762/    1EFD : (MACRO)             	ld2z R15
    1763/    1F01 : C0 27 49            	lbr L165
    1764/    1F04 :                     L166:
    1765/    1F04 :                     ;  if (eth_type_is_arp_and_my_ip(plen)) {
    1766/    1F04 : (MACRO)             	cpy2 R12,R7
    1767/    1F08 : (MACRO)             	Ccall _eth_type_is_arp_and_my_ip
    1768/    1F0B : (MACRO)             	cpy2 R11,R15
    1769/    1F0F : (MACRO)             	cpy1 R11,R11
    1770/    1F11 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1771/    1F14 : (MACRO)             	jeqU2I r11,0,L173
    1772/    1F20 :                     ;    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1773/    1F20 : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1774/    1F28 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1775/    1F2B : (MACRO)             	jneU2I r11,1,L175; NE
    1776/    1F37 :                     ;        make_arp_answer_from_request();
    1777/    1F37 : (MACRO)             	Ccall _make_arp_answer_from_request
    1778/    1F3A :                     ;    }
    1779/    1F3A :                     L175:
    1780/    1F3A :                     ;    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac()){
    1781/    1F3A : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    1782/    1F42 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1783/    1F45 : (MACRO)             	alu2I R11,R11,8,ani,ani
    1784/    1F4D :                     	;removed ?	cpy2 R11,R11
    1785/    1F4D : (MACRO)             	jeqU2I r11,0,L178
    1786/    1F59 : (MACRO)             	ld1 R11,'D',(_buffer+21),0
    1787/    1F61 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1788/    1F64 : (MACRO)             	jneU2I r11,2,L178; NE
    1789/    1F70 : (MACRO)             	Ccall _client_store_gw_mac
    1790/    1F73 : (MACRO)             	cpy2 R11,R15
    1791/    1F77 : (MACRO)             	cpy1 R11,R11
    1792/    1F79 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1793/    1F7C : (MACRO)             	jeqU2I r11,0,L178
    1794/    1F88 :                     ;		waitgwmac = WGW_HAVE_GW_MAC;
    1795/    1F88 : (MACRO)             	ldaD R11,2
    1796/    1F8E : (MACRO)             	st1 R11,'D',(_waitgwmac),0; ASGNU1
    1797/    1F96 :                     ;	}
    1798/    1F96 :                     L178:
    1799/    1F96 :                     ;    return 0;
    1800/    1F96 : (MACRO)             	ld2z R15
    1801/    1F9A : C0 27 49            	lbr L165
    1802/    1F9D :                     L173:
    1803/    1F9D :                     ;  if (eth_type_is_ip_and_my_ip(plen)==0){
    1804/    1F9D : (MACRO)             	cpy2 R12,R7
    1805/    1FA1 : (MACRO)             	Ccall _eth_type_is_ip_and_my_ip
    1806/    1FA4 : (MACRO)             	cpy2 R11,R15
    1807/    1FA8 : (MACRO)             	cpy1 R11,R11
    1808/    1FAA : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1809/    1FAD : (MACRO)             	jneU2I r11,0,L181; NE
    1810/    1FB9 :                     ;    return 0;
    1811/    1FB9 : (MACRO)             	ld2z R15
    1812/    1FBD : C0 27 49            	lbr L165
    1813/    1FC0 :                     L181:
    1814/    1FC0 :                     ;  if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V) {
    1815/    1FC0 : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1816/    1FC8 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 32 - 2/28/2013 15:08:33


    1817/    1FCB : (MACRO)             	jneU2I r11,1,L183; NE
    1818/    1FD7 : (MACRO)             	ld1 R11,'D',(_buffer+34),0
    1819/    1FDF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1820/    1FE2 : (MACRO)             	jneU2I r11,8,L183; NE
    1821/    1FEE :                     ;    if (icmp_cb)
    1822/    1FEE : (MACRO)             	ld2 R11,'D',(_icmp_cb),0
    1823/    1FF8 : (MACRO)             	jeqU2I r11,0,L187
    1824/    2004 :                     ;      (*icmp_cb)(&(gPB[IP_SRC_P]));
    1825/    2004 : (MACRO)             	ldaD R12,_buffer+26
    1826/    200A : (MACRO)             	ld2 R11,'D',(_icmp_cb),0
    1827/    2014 : (MACRO)             	Ccall r11
    1828/    2017 :                     L187:
    1829/    2017 :                     ;    make_echo_reply_from_request(plen);
    1830/    2017 : (MACRO)             	cpy2 R12,R7
    1831/    201B : (MACRO)             	Ccall _make_echo_reply_from_request
    1832/    201E :                     ;    return 0;
    1833/    201E : (MACRO)             	ld2z R15
    1834/    2022 : C0 27 49            	lbr L165
    1835/    2025 :                     L183:
    1836/    2025 :                     ;  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    1837/    2025 : (MACRO)             	jcI2I r7,54,lbdf,L190; GE is flipped test from LT
    1838/    2036 : (MACRO)             	ld1 R11,'D',(_buffer+23),0
    1839/    203E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1840/    2041 : (MACRO)             	jeqU2I r11,6,L190
    1841/    204D :                     ;    return 0;
    1842/    204D : (MACRO)             	ld2z R15
    1843/    2051 : C0 27 49            	lbr L165
    1844/    2054 :                     L190:
    1845/    2054 :                     ;  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
    1846/    2054 : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    1847/    205C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1848/    205F : (MACRO)             	jneU2I r11,11,L193; NE
    1849/    206B :                     ;    if (check_ip_message_is_from(hisip)==0)
    1850/    206B : (MACRO)             	ldaD R12,_hisip
    1851/    2071 : (MACRO)             	Ccall _check_ip_message_is_from
    1852/    2074 : (MACRO)             	cpy2 R11,R15
    1853/    2078 : (MACRO)             	cpy1 R11,R11
    1854/    207A : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1855/    207D : (MACRO)             	jneU2I r11,0,L196; NE
    1856/    2089 :                     ;      return 0;
    1857/    2089 : (MACRO)             	ld2z R15
    1858/    208D : C0 27 49            	lbr L165
    1859/    2090 :                     L196:
    1860/    2090 :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) {
    1861/    2090 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1862/    2098 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1863/    209B : (MACRO)             	alu2I R11,R11,4,ani,ani
    1864/    20A3 :                     	;removed ?	cpy2 R11,R11
    1865/    20A3 : (MACRO)             	jeqU2I r11,0,L198
    1866/    20AF :                     ;      if (client_tcp_result_cb)
    1867/    20AF : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0
    1868/    20B9 : (MACRO)             	jeqU2I r11,0,L201
    1869/    20C5 :                     ;(*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1870/    20C5 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    1871/    20CD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1872/    20D0 : (MACRO)             	shrI2I R11,5
    1873/    20F8 : (MACRO)             	alu2I R11,R11,7,ani,ani
    1874/    2100 :                     	;removed ?	cpy2 R11,R11
    1875/    2100 : (MACRO)             	cpy1 R12,R11
    1876/    2102 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 33 - 2/28/2013 15:08:33


    1877/    2105 : (MACRO)             	ldaD R13,3
    1878/    210B : (MACRO)             	ld2z R11
    1879/    210F : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    1880/    211C : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    1881/    2129 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0
    1882/    2133 : (MACRO)             	Ccall r11
    1883/    2136 :                     L201:
    1884/    2136 :                     ;      tcp_client_state = 5;
    1885/    2136 : (MACRO)             	ldaD R11,5
    1886/    213C : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1887/    2144 :                     ;      return 0;
    1888/    2144 : (MACRO)             	ld2z R15
    1889/    2148 : C0 27 49            	lbr L165
    1890/    214B :                     L198:
    1891/    214B :                     ;    len = get_tcp_data_len();
    1892/    214B : (MACRO)             	Ccall _get_tcp_data_len
    1893/    214E : (MACRO)             	st2 R15,'O',sp,(-4+20); ASGNU2(addr,reg)
    1894/    215B :                     ;    if (tcp_client_state==2) {
    1895/    215B : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1896/    2163 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1897/    2166 : (MACRO)             	jneU2I r11,2,L204; NE
    1898/    2172 :                     ;      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)) {
    1899/    2172 : (MACRO)             	ldaD R11,0
    1900/    2178 : (MACRO)             	ld1 R10,'D',(_buffer+47),0
    1901/    2180 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1902/    2183 : (MACRO)             	alu2I R10,R10,2,ani,ani
    1903/    218B :                     	;removed ?	cpy2 R10,R10
    1904/    218B : (MACRO)             	jeqI2 r10,r11,L206
    1905/    219D : (MACRO)             	ld1 R10,'D',(_buffer+47),0
    1906/    21A5 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1907/    21A8 : (MACRO)             	alu2I R10,R10,16,ani,ani
    1908/    21B0 :                     	;removed ?	cpy2 R10,R10
    1909/    21B0 : (MACRO)             	jeqI2 r10,r11,L206
    1910/    21C2 :                     ;        make_tcp_ack_from_any(0,0);
    1911/    21C2 : (MACRO)             	ldaD R11,0
    1912/    21C8 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    1913/    21CC : (MACRO)             	cpy2 R13,R11 ;LOADI2
    1914/    21D0 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1915/    21D3 :                     ;        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1916/    21D3 : (MACRO)             	ldaD R11,24
    1917/    21D9 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    1918/    21E1 :                     ;        if (client_tcp_datafill_cb)
    1919/    21E1 : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0
    1920/    21EB : (MACRO)             	jeqU2I r11,0,L211
    1921/    21F7 :                     ;          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    1922/    21F7 : (MACRO)             	ld1 R11,'D',(_buffer+35),0
    1923/    21FF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1924/    2202 : (MACRO)             	shrI2I R11,5
    1925/    222A : (MACRO)             	alu2I R11,R11,7,ani,ani
    1926/    2232 :                     	;removed ?	cpy2 R11,R11
    1927/    2232 : (MACRO)             	cpy1 R12,R11
    1928/    2234 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
    1929/    2237 : (MACRO)             	ld2 R11,'D',(_client_tcp_datafill_cb),0
    1930/    2241 : (MACRO)             	Ccall r11
    1931/    2244 : (MACRO)             	st2 R15,'O',sp,(-4+20); ASGNU2(addr,reg)
    1932/    2251 : C0 22 65            	lbr L212
    1933/    2254 :                     L211:
    1934/    2254 :                     ;          len = 0;
    1935/    2254 : (MACRO)             	ld2z R11
    1936/    2258 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 34 - 2/28/2013 15:08:33


    1937/    2265 :                     L212:
    1938/    2265 :                     ;        tcp_client_state = 3;
    1939/    2265 : (MACRO)             	ldaD R11,3
    1940/    226B : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1941/    2273 :                     ;        make_tcp_ack_with_data_noflags(len);
    1942/    2273 : (MACRO)             	ld2 R12,'O',sp,(-4+20); INDIRU2(addr)
    1943/    227F : (MACRO)             	Ccall _make_tcp_ack_with_data_noflags
    1944/    2282 :                     ;      }else{
    1945/    2282 : C0 22 F6            	lbr L207
    1946/    2285 :                     L206:
    1947/    2285 :                     ;        tcp_client_state = 1; // retry
    1948/    2285 : (MACRO)             	ldaD R11,1
    1949/    228B : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1950/    2293 :                     ;        len++;
    1951/    2293 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    1952/    229F : 1B                  	inc R11
    1953/    22A0 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
    1954/    22AD :                     ;        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1955/    22AD : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    1956/    22B5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1957/    22B8 : (MACRO)             	alu2I R11,R11,16,ani,ani
    1958/    22C0 :                     	;removed ?	cpy2 R11,R11
    1959/    22C0 : (MACRO)             	jeqU2I r11,0,L214
    1960/    22CC :                     ;          len = 0;
    1961/    22CC : (MACRO)             	ld2z R11
    1962/    22D0 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
    1963/    22DD :                     L214:
    1964/    22DD :                     ;        make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    1965/    22DD : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    1966/    22E9 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    1967/    22ED : (MACRO)             	ldaD R13,4
    1968/    22F3 : (MACRO)             	Ccall _make_tcp_ack_from_any
    1969/    22F6 :                     ;      }
    1970/    22F6 :                     L207:
    1971/    22F6 :                     ;      return 0;
    1972/    22F6 : (MACRO)             	ld2z R15
    1973/    22FA : C0 27 49            	lbr L165
    1974/    22FD :                     L204:
    1975/    22FD :                     ;    if (tcp_client_state==3 && len>0) {
    1976/    22FD : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    1977/    2305 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1978/    2308 : (MACRO)             	jneU2I r11,3,L217; NE
    1979/    2314 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    1980/    2320 : (MACRO)             	jeqU2I r11,0,L217
    1981/    232C :                     ;      tcp_client_state = 4;
    1982/    232C : (MACRO)             	ldaD R11,4
    1983/    2332 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    1984/    233A :                     ;      if (client_tcp_result_cb) {
    1985/    233A : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0
    1986/    2344 : (MACRO)             	jeqU2I r11,0,L219
    1987/    2350 :                     ;        word tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    1988/    2350 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    1989/    2358 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1990/    235B : (MACRO)             	shrI2I R11,4
    1991/    237B : (MACRO)             	shl2I R11,2
    1992/    2387 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    1993/    238F : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)
    1994/    239C :                     ;        if (tcpstart>plen-8)
    1995/    239C : (MACRO)             	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
    1996/    23A8 : (MACRO)             	alu2I R10,R7,8,smi,smbi
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 35 - 2/28/2013 15:08:33


    1997/    23B0 : (MACRO)             	jcU2 r10,r11,lbdf,L222 ;LE is flipped test & operands
    1998/    23BD :                     ;          tcpstart = plen-8; // dummy but save
    1999/    23BD : (MACRO)             	alu2I R11,R7,8,smi,smbi
    2000/    23C5 : (MACRO)             	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)
    2001/    23D2 :                     L222:
    2002/    23D2 :                     ;        save_len = len;
    2003/    23D2 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2004/    23DE : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)
    2005/    23EB :                     ;        if (tcpstart+len>plen)
    2006/    23EB : (MACRO)             	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
    2007/    23F7 : (MACRO)             	ld2 R10,'O',sp,(-4+20); INDIRU2(addr)
    2008/    2403 : (MACRO)             	alu2 R11,R11,R10,add,adc; ADDU2(r,r)
    2009/    240F : (MACRO)             	jcU2 r7,r11,lbdf,L224 ;LE is flipped test & operands
    2010/    241C :                     ;          save_len = plen-tcpstart;
    2011/    241C : (MACRO)             	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
    2012/    2428 : (MACRO)             	alu2 R11,R7,R11,sm,smb
    2013/    2434 : (MACRO)             	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)
    2014/    2441 :                     L224:
    2015/    2441 :                     ;        send_fin = (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    2016/    2441 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    2017/    2449 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2018/    244C : (MACRO)             	shrI2I R11,5
    2019/    2474 : (MACRO)             	alu2I R11,R11,7,ani,ani
    2020/    247C :                     	;removed ?	cpy2 R11,R11
    2021/    247C : (MACRO)             	cpy1 R12,R11
    2022/    247E : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
    2023/    2481 : (MACRO)             	ldaD R13,0
    2024/    2487 : (MACRO)             	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
    2025/    2493 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2026/    24A0 : (MACRO)             	ld2 R11,'O',sp,(-6+20); INDIRU2(addr)
    2027/    24AC : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2028/    24B9 : (MACRO)             	ld2 R11,'D',(_client_tcp_result_cb),0
    2029/    24C3 : (MACRO)             	Ccall r11
    2030/    24C6 : (MACRO)             	cpy2 R11,R15
    2031/    24CA : (MACRO)             	st1 R11,'O',sp,(-7+20); ASGNU1
    2032/    24D4 :                     ;        if (send_fin) {
    2033/    24D4 : (MACRO)             	ld1 R11,'O',sp,(-7+20)
    2034/    24DE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2035/    24E1 : (MACRO)             	jeqU2I r11,0,L227
    2036/    24ED :                     ;          make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2037/    24ED : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2038/    24F9 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    2039/    24FD : (MACRO)             	ldaD R13,9
    2040/    2503 : (MACRO)             	Ccall _make_tcp_ack_from_any
    2041/    2506 :                     ;          tcp_client_state = 5;
    2042/    2506 : (MACRO)             	ldaD R11,5
    2043/    250C : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    2044/    2514 :                     ;          return 0;
    2045/    2514 : (MACRO)             	ld2z R15
    2046/    2518 : C0 27 49            	lbr L165
    2047/    251B :                     L227:
    2048/    251B :                     ;      }
    2049/    251B :                     L219:
    2050/    251B :                     ;    }
    2051/    251B :                     L217:
    2052/    251B :                     ;    if (tcp_client_state != 5) {
    2053/    251B : (MACRO)             	ld1 R11,'D',(_tcp_client_state),0
    2054/    2523 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2055/    2526 : (MACRO)             	jeqU2I r11,5,L229
    2056/    2532 :                     ;      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 36 - 2/28/2013 15:08:33


    2057/    2532 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    2058/    253A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2059/    253D : (MACRO)             	alu2I R11,R11,1,ani,ani
    2060/    2545 :                     	;removed ?	cpy2 R11,R11
    2061/    2545 : (MACRO)             	jeqU2I r11,0,L231
    2062/    2551 :                     ;        make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2063/    2551 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2064/    255D : 1B                  	inc R11
    2065/    255E : (MACRO)             	cpy2 R12,R11 ;LOADI2
    2066/    2562 : (MACRO)             	ldaD R13,9
    2067/    2568 : (MACRO)             	Ccall _make_tcp_ack_from_any
    2068/    256B :                     ;        tcp_client_state = 5; // connection terminated
    2069/    256B : (MACRO)             	ldaD R11,5
    2070/    2571 : (MACRO)             	st1 R11,'D',(_tcp_client_state),0; ASGNU1
    2071/    2579 :                     ;      } else if (len>0)
    2072/    2579 : C0 25 AD            	lbr L232
    2073/    257C :                     L231:
    2074/    257C : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2075/    2588 : (MACRO)             	jeqU2I r11,0,L234
    2076/    2594 :                     ;        make_tcp_ack_from_any(len,0);
    2077/    2594 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2078/    25A0 : (MACRO)             	cpy2 R12,R11 ;LOADI2
    2079/    25A4 : (MACRO)             	ldaD R13,0
    2080/    25AA : (MACRO)             	Ccall _make_tcp_ack_from_any
    2081/    25AD :                     L234:
    2082/    25AD :                     L232:
    2083/    25AD :                     ;    }
    2084/    25AD :                     L229:
    2085/    25AD :                     ;    return 0;
    2086/    25AD : (MACRO)             	ld2z R15
    2087/    25B1 : C0 27 49            	lbr L165
    2088/    25B4 :                     L193:
    2089/    25B4 :                     ;  if (gPB[TCP_DST_PORT_H_P] == (hisport >> 8) &&
    2090/    25B4 : (MACRO)             	ld2 R11,'D',(_hisport),0; INDIRU2(addr)
    2091/    25BE : (MACRO)             	ld1 R10,'D',(_buffer+36),0
    2092/    25C6 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2093/    25C9 : (MACRO)             	cpy2 R9,R11
    2094/    25CD : (MACRO)             	shrU2I R9,8
    2095/    25FD : (MACRO)             	jneU2 r10,r9,L236; NE
    2096/    260F : (MACRO)             	ld1 R10,'D',(_buffer+37),0
    2097/    2617 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2098/    261A : (MACRO)             	cpy1 R11,R11
    2099/    261C : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2100/    261F : (MACRO)             	jneU2 r10,r11,L236; NE
    2101/    2631 :                     ;      gPB[TCP_DST_PORT_L_P] == ((byte) hisport)) {
    2102/    2631 :                     ;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    2103/    2631 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    2104/    2639 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2105/    263C : (MACRO)             	alu2I R11,R11,2,ani,ani
    2106/    2644 :                     	;removed ?	cpy2 R11,R11
    2107/    2644 : (MACRO)             	jeqU2I r11,0,L240
    2108/    2650 :                     ;      make_tcp_synack_from_syn();
    2109/    2650 : (MACRO)             	Ccall _make_tcp_synack_from_syn
    2110/    2653 : C0 27 45            	lbr L241
    2111/    2656 :                     L240:
    2112/    2656 :                     ;    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
    2113/    2656 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    2114/    265E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2115/    2661 : (MACRO)             	alu2I R11,R11,16,ani,ani
    2116/    2669 :                     	;removed ?	cpy2 R11,R11
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 37 - 2/28/2013 15:08:33


    2117/    2669 : (MACRO)             	jeqU2I r11,0,L243
    2118/    2675 :                     ;      info_data_len = get_tcp_data_len();
    2119/    2675 : (MACRO)             	Ccall _get_tcp_data_len
    2120/    2678 : (MACRO)             	st2 R15,'D',(_info_data_len),0; ASGNU2(addr,reg)
    2121/    2683 :                     ;      if (info_data_len > 0) {
    2122/    2683 : (MACRO)             	ld2 R11,'D',(_info_data_len),0; INDIRU2(addr)
    2123/    268D : (MACRO)             	jeqU2I r11,0,L246
    2124/    2699 :                     ;        len = TCP_DATA_START; // TCP_DATA_START is a formula
    2125/    2699 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    2126/    26A1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2127/    26A4 : (MACRO)             	shrI2I R11,4
    2128/    26C4 : (MACRO)             	shl2I R11,2
    2129/    26D0 : (MACRO)             	ldA2 R11,'O',R11,(34); reg:addr
    2130/    26D8 : (MACRO)             	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
    2131/    26E5 :                     ;        if (len <= plen - 8)
    2132/    26E5 : (MACRO)             	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
    2133/    26F1 : (MACRO)             	alu2I R10,R7,8,smi,smbi
    2134/    26F9 : (MACRO)             	jcU2 r10,r11,lbnf,L247 ;GT same as LT but operands reversed
    2135/    2706 :                     ;          return len;
    2136/    2706 : (MACRO)             	ld2 R15,'O',sp,(-4+20); INDIRU2(addr)
    2137/    2712 : C0 27 49            	lbr L165
    2138/    2715 :                     ;      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    2139/    2715 :                     L246:
    2140/    2715 : (MACRO)             	ld1 R11,'D',(_buffer+47),0
    2141/    271D : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2142/    2720 : (MACRO)             	alu2I R11,R11,1,ani,ani
    2143/    2728 :                     	;removed ?	cpy2 R11,R11
    2144/    2728 : (MACRO)             	jeqU2I r11,0,L251
    2145/    2734 :                     ;        make_tcp_ack_from_any(0,0);
    2146/    2734 : (MACRO)             	ldaD R11,0
    2147/    273A : (MACRO)             	cpy2 R12,R11 ;LOADI2
    2148/    273E : (MACRO)             	cpy2 R13,R11 ;LOADI2
    2149/    2742 : (MACRO)             	Ccall _make_tcp_ack_from_any
    2150/    2745 :                     L251:
    2151/    2745 :                     L247:
    2152/    2745 :                     ;    }
    2153/    2745 :                     L243:
    2154/    2745 :                     L241:
    2155/    2745 :                     ;  }
    2156/    2745 :                     L236:
    2157/    2745 :                     ;  return 0;
    2158/    2745 : (MACRO)             	ld2z R15
    2159/    2749 :                     L165:
    2160/    2749 : (MACRO)             	alu2I memaddr,sp,(8),adi,adci
    2161/    2751 : (MACRO)             	rldmi r7,memaddr
    2162/    2755 : (MACRO)             	release 18
    2163/    275D : (MACRO)             	Cretn
    2164/    275E :                     
    2165/    275E :                     _step_seq:
    2166/    275E : (MACRO)             	reserve 4
    2167/    2768 : (MACRO)             	alu2I memaddr,sp,(3),adi,adci
    2168/    2770 : EE                  	sex	memaddr
    2169/    2771 : (MACRO)             	savmi r1
    2170/    2775 : (MACRO)             	savmi r7
    2171/    2779 : E2                  	sex sp
    2172/    277A :                     ; void step_seq(word rel_ack_num,byte cp_seq) {
    2173/    277A :                     ;  i = 4;
    2174/    277A : (MACRO)             	ldaD R7,4
    2175/    2780 : C0 28 38            	lbr L256
    2176/    2783 :                     L255:
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 38 - 2/28/2013 15:08:33


    2177/    2783 :                     ;  while(i>0) {
    2178/    2783 :                     ;    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
    2179/    2783 : (MACRO)             	cpy1 R11,R7
    2180/    2785 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2181/    2788 : (MACRO)             	ld1 R11,'O',R11,(_buffer-1+38)
    2182/    2792 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2183/    2795 : (MACRO)             	alu2 R12,R11,R12,add,adc; ADDU2(r,r)
    2184/    27A1 :                     ;    tseq = gPB[TCP_SEQACK_H_P+i-1];
    2185/    27A1 : (MACRO)             	cpy1 R11,R7
    2186/    27A3 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2187/    27A6 : (MACRO)             	ld1 R1,'O',R11,(_buffer-1+42)
    2188/    27B0 :                     ;    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
    2189/    27B0 : (MACRO)             	cpy1 R11,R7
    2190/    27B2 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2191/    27B5 : (MACRO)             	cpy1 R10,R12
    2192/    27B7 : (MACRO)             	st1 R10,'O',R11,(_buffer-1+42); ASGNU1
    2193/    27C1 :                     ;    if (cp_seq)
    2194/    27C1 : (MACRO)             	cpy1 R11,R13
    2195/    27C3 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2196/    27C6 : (MACRO)             	jeqU2I r11,0,L264
    2197/    27D2 :                     ;      gPB[TCP_SEQ_H_P+i-1] = tseq;
    2198/    27D2 : (MACRO)             	cpy1 R11,R7
    2199/    27D4 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2200/    27D7 : (MACRO)             	st1 R1,'O',R11,(_buffer-1+38); ASGNU1
    2201/    27E1 : C0 27 F9            	lbr L265
    2202/    27E4 :                     L264:
    2203/    27E4 :                     ;      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
    2204/    27E4 : (MACRO)             	cpy1 R11,R7
    2205/    27E6 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2206/    27E9 : (MACRO)             	ldaD R10,0
    2207/    27EF : (MACRO)             	st1 R10,'O',R11,(_buffer-1+38); ASGNU1
    2208/    27F9 :                     L265:
    2209/    27F9 :                     ;    rel_ack_num = rel_ack_num>>8;
    2210/    27F9 : (MACRO)             	shrU2I R12,8
    2211/    2829 :                     ;    i--;
    2212/    2829 : (MACRO)             	cpy1 R11,R7
    2213/    282B : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2214/    282E : (MACRO)             	alu2I R11,R11,1,smi,smbi
    2215/    2836 : (MACRO)             	cpy1 R7,R11
    2216/    2838 :                     ;  }
    2217/    2838 :                     L256:
    2218/    2838 :                     ;  while(i>0) {
    2219/    2838 : (MACRO)             	cpy1 R11,R7
    2220/    283A : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2221/    283D : (MACRO)             	jnI2I r11,0,lbnf,L255; GT reverse  the subtraction
    2222/    284E :                     ;}
    2223/    284E :                     L254:
    2224/    284E : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
    2225/    2856 : (MACRO)             	rldmi r7,memaddr
    2226/    285A : (MACRO)             	rldmi r1,memaddr
    2227/    285E : (MACRO)             	release 4
    2228/    2866 : (MACRO)             	Cretn
    2229/    2867 :                     
    2230/    2867 :                     _make_tcphead:
    2231/    2867 : (MACRO)             	reserve 6
    2232/    2871 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2233/    287E : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    2234/    288B : (MACRO)             	ld2 R11,'O',sp,(2+8)
    2235/    2897 : (MACRO)             	st1 R11,'O',sp,(2+8); ASGNU1
    2236/    28A1 :                     ; void make_tcphead(word rel_ack_num,byte cp_seq) {
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 39 - 2/28/2013 15:08:33


    2237/    28A1 :                     ;  byte i = gPB[TCP_DST_PORT_H_P];
    2238/    28A1 : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    2239/    28A9 : (MACRO)             	st1 R11,'O',sp,(-4+8); ASGNU1
    2240/    28B3 :                     ;  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
    2241/    28B3 : (MACRO)             	ld1 R11,'D',(_buffer+34),0
    2242/    28BB : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    2243/    28C3 :                     ;  gPB[TCP_SRC_PORT_H_P] = i;
    2244/    28C3 : (MACRO)             	ld1 R11,'O',sp,(-4+8)
    2245/    28CD : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    2246/    28D5 :                     ;  j = gPB[TCP_DST_PORT_L_P];
    2247/    28D5 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    2248/    28DD : (MACRO)             	st1 R11,'O',sp,(-3+8); ASGNU1
    2249/    28E7 :                     ;  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
    2250/    28E7 : (MACRO)             	ld1 R11,'D',(_buffer+35),0
    2251/    28EF : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    2252/    28F7 :                     ;  gPB[TCP_SRC_PORT_L_P] = j;
    2253/    28F7 : (MACRO)             	ld1 R11,'O',sp,(-3+8)
    2254/    2901 : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
    2255/    2909 :                     ;  step_seq(rel_ack_num,cp_seq);
    2256/    2909 : (MACRO)             	ld2 R12,'O',sp,(0+8); INDIRU2(addr)
    2257/    2915 : (MACRO)             	ld1 R13,'O',sp,(2+8)
    2258/    291F : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
    2259/    2922 : (MACRO)             	Ccall _step_seq
    2260/    2925 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    2261/    2925 : (MACRO)             	ldaD R11,0
    2262/    292B : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    2263/    2933 :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    2264/    2933 : (MACRO)             	ldaD R11,0
    2265/    2939 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    2266/    2941 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x50;
    2267/    2941 : (MACRO)             	ldaD R11,80
    2268/    2947 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    2269/    294F :                     ;}
    2270/    294F :                     L270:
    2271/    294F : (MACRO)             	release 6
    2272/    2957 : (MACRO)             	Cretn
    2273/    2958 :                     
    2274/    2958 :                     _make_tcp_synack_from_syn:
    2275/    2958 : (MACRO)             	reserve 8
    2276/    2962 :                     ; void make_tcp_synack_from_syn() {
    2277/    2962 :                     ;  gPB[IP_TOTLEN_H_P] = 0;
    2278/    2962 : (MACRO)             	ldaD R11,0
    2279/    2968 : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    2280/    2970 :                     ;  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    2281/    2970 : (MACRO)             	ldaD R11,44
    2282/    2976 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2283/    297E :                     ;  make_eth_ip();
    2284/    297E : (MACRO)             	Ccall _make_eth_ip
    2285/    2981 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    2286/    2981 : (MACRO)             	ldaD R11,18
    2287/    2987 : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    2288/    298F :                     ;  make_tcphead(1,0);
    2289/    298F : (MACRO)             	ldaD R12,1
    2290/    2995 : (MACRO)             	ldaD R13,0
    2291/    299B : (MACRO)             	Ccall _make_tcphead
    2292/    299E :                     ;  gPB[TCP_SEQ_H_P+0] = 0;
    2293/    299E : (MACRO)             	ldaD R11,0
    2294/    29A4 : (MACRO)             	st1 R11,'D',(_buffer+38),0; ASGNU1
    2295/    29AC :                     ;  gPB[TCP_SEQ_H_P+1] = 0;
    2296/    29AC : (MACRO)             	ldaD R11,0
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 40 - 2/28/2013 15:08:33


    2297/    29B2 : (MACRO)             	st1 R11,'D',(_buffer+39),0; ASGNU1
    2298/    29BA :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    2299/    29BA : (MACRO)             	ld1 R11,'D',(_seqnum),0
    2300/    29C2 : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    2301/    29CA :                     ;  gPB[TCP_SEQ_H_P+3] = 0;
    2302/    29CA : (MACRO)             	ldaD R11,0
    2303/    29D0 : (MACRO)             	st1 R11,'D',(_buffer+41),0; ASGNU1
    2304/    29D8 :                     ;  seqnum += 3;
    2305/    29D8 : (MACRO)             	ld1 R11,'D',(_seqnum),0
    2306/    29E0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2307/    29E3 : (MACRO)             	ldA2 R11,'O',R11,(3); reg:addr
    2308/    29EB : (MACRO)             	st1 R11,'D',(_seqnum),0; ASGNU1
    2309/    29F3 :                     ;  gPB[TCP_OPTIONS_P] = 2;
    2310/    29F3 : (MACRO)             	ldaD R11,2
    2311/    29F9 : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    2312/    2A01 :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    2313/    2A01 : (MACRO)             	ldaD R11,4
    2314/    2A07 : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    2315/    2A0F :                     ;  gPB[TCP_OPTIONS_P+2] = 0x05;
    2316/    2A0F : (MACRO)             	ldaD R11,5
    2317/    2A15 : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    2318/    2A1D :                     ;  gPB[TCP_OPTIONS_P+3] = 0x0;
    2319/    2A1D : (MACRO)             	ldaD R11,0
    2320/    2A23 : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    2321/    2A2B :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60;
    2322/    2A2B : (MACRO)             	ldaD R11,96
    2323/    2A31 : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    2324/    2A39 :                     ;  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    2325/    2A39 : (MACRO)             	ldaD R11,5
    2326/    2A3F : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    2327/    2A47 :                     ;  gPB[TCP_WIN_SIZE+1] = 0x78;
    2328/    2A47 : (MACRO)             	ldaD R11,120
    2329/    2A4D : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    2330/    2A55 :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    2331/    2A55 : (MACRO)             	ldaD R12,50
    2332/    2A5B : (MACRO)             	ldaD R13,26
    2333/    2A61 : (MACRO)             	ldaD R11,32
    2334/    2A67 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2335/    2A74 : (MACRO)             	ldaD R11,2
    2336/    2A7A : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2337/    2A87 : (MACRO)             	Ccall _fill_checksum
    2338/    2A8A :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    2339/    2A8A : (MACRO)             	ldaD R12,58
    2340/    2A90 : (MACRO)             	Ccall _encpacketSend
    2341/    2A93 :                     ;}
    2342/    2A93 :                     L282:
    2343/    2A93 : (MACRO)             	release 8
    2344/    2A9B : (MACRO)             	Cretn
    2345/    2A9C :                     
    2346/    2A9C :                     _eth_type_is_ip_and_my_ip:
    2347/    2A9C : (MACRO)             	reserve 8
    2348/    2AA6 : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
    2349/    2AAE : EE                  	sex	memaddr
    2350/    2AAF : (MACRO)             	savmi r7
    2351/    2AB3 : E2                  	sex sp
    2352/    2AB4 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2353/    2AC1 :                     ; byte eth_type_is_ip_and_my_ip(word len) {
    2354/    2AC1 :                     ;  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
    2355/    2AC1 : (MACRO)             	ld2 R11,'O',sp,(0+10); INDIRU2(addr)
    2356/    2ACD : (MACRO)             	jcU2I r11,42,lbnf,L303 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 41 - 2/28/2013 15:08:33


    2357/    2AD6 : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    2358/    2ADE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2359/    2AE1 : (MACRO)             	jneU2I r11,8,L303; NE
    2360/    2AED : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    2361/    2AF5 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2362/    2AF8 : (MACRO)             	jneU2I r11,0,L303; NE
    2363/    2B04 : (MACRO)             	ld1 R11,'D',(_buffer+14),0
    2364/    2B0C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2365/    2B0F : (MACRO)             	jneU2I r11,69,L303; NE
    2366/    2B1B : (MACRO)             	ldaD R12,_buffer+30
    2367/    2B21 : (MACRO)             	ldaD R13,_myip
    2368/    2B27 : (MACRO)             	ldaD R11,4
    2369/    2B2D : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2370/    2B3A : (MACRO)             	Ccall _memcmp
    2371/    2B3D : (MACRO)             	cpy2 R11,R15 ;LOADI2
    2372/    2B41 : (MACRO)             	jneU2I r11,0,L303; NE
    2373/    2B4D : (MACRO)             	ldaD R7,1
    2374/    2B53 : C0 2B 5C            	lbr L304
    2375/    2B56 :                     L303:
    2376/    2B56 : (MACRO)             	ldaD R7,0
    2377/    2B5C :                     L304:
    2378/    2B5C : (MACRO)             	cpy2 R11,R7
    2379/    2B60 : (MACRO)             	cpy1 R15,R11
    2380/    2B62 : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    2381/    2B65 :                     L297:
    2382/    2B65 : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
    2383/    2B6D : (MACRO)             	rldmi r7,memaddr
    2384/    2B71 : (MACRO)             	release 8
    2385/    2B79 : (MACRO)             	Cretn
    2386/    2B7A :                     
    2387/    2B7A :                     _eth_type_is_arp_and_my_ip:
    2388/    2B7A : (MACRO)             	reserve 8
    2389/    2B84 : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
    2390/    2B8C : EE                  	sex	memaddr
    2391/    2B8D : (MACRO)             	savmi r7
    2392/    2B91 : E2                  	sex sp
    2393/    2B92 : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2394/    2B9F :                     ; byte eth_type_is_arp_and_my_ip(word len) {
    2395/    2B9F :                     ;  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
    2396/    2B9F : (MACRO)             	ld2 R11,'O',sp,(0+10); INDIRU2(addr)
    2397/    2BAB : (MACRO)             	jcU2I r11,41,lbnf,L310 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
    2398/    2BB4 : (MACRO)             	ld1 R11,'D',(_buffer+12),0
    2399/    2BBC : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2400/    2BBF : (MACRO)             	jneU2I r11,8,L310; NE
    2401/    2BCB : (MACRO)             	ld1 R11,'D',(_buffer+13),0
    2402/    2BD3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2403/    2BD6 : (MACRO)             	jneU2I r11,6,L310; NE
    2404/    2BE2 : (MACRO)             	ldaD R12,_buffer+38
    2405/    2BE8 : (MACRO)             	ldaD R13,_myip
    2406/    2BEE : (MACRO)             	ldaD R11,4
    2407/    2BF4 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2408/    2C01 : (MACRO)             	Ccall _memcmp
    2409/    2C04 : (MACRO)             	cpy2 R11,R15 ;LOADI2
    2410/    2C08 : (MACRO)             	jneU2I r11,0,L310; NE
    2411/    2C14 : (MACRO)             	ldaD R7,1
    2412/    2C1A : C0 2C 23            	lbr L311
    2413/    2C1D :                     L310:
    2414/    2C1D : (MACRO)             	ldaD R7,0
    2415/    2C23 :                     L311:
    2416/    2C23 : (MACRO)             	cpy2 R11,R7
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 42 - 2/28/2013 15:08:33


    2417/    2C27 : (MACRO)             	cpy1 R15,R11
    2418/    2C29 : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    2419/    2C2C :                     L305:
    2420/    2C2C : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
    2421/    2C34 : (MACRO)             	rldmi r7,memaddr
    2422/    2C38 : (MACRO)             	release 8
    2423/    2C40 : (MACRO)             	Cretn
    2424/    2C41 :                     
    2425/    2C41 :                     _make_arp_answer_from_request:
    2426/    2C41 : (MACRO)             	reserve 4
    2427/    2C4B :                     ; void make_arp_answer_from_request() {
    2428/    2C4B :                     ;  setMACs(gPB + ETH_SRC_MAC);
    2429/    2C4B : (MACRO)             	ldaD R12,_buffer+6
    2430/    2C51 : (MACRO)             	Ccall _setMACs
    2431/    2C54 :                     ;  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    2432/    2C54 : (MACRO)             	ldaD R11,0
    2433/    2C5A : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
    2434/    2C62 :                     ;  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    2435/    2C62 : (MACRO)             	ldaD R11,2
    2436/    2C68 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    2437/    2C70 :                     ;  copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    2438/    2C70 : (MACRO)             	ldaD R12,_buffer+32
    2439/    2C76 : (MACRO)             	ldaD R13,_buffer+22
    2440/    2C7C : (MACRO)             	Ccall _copyMac
    2441/    2C7F :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    2442/    2C7F : (MACRO)             	ldaD R12,_buffer+22
    2443/    2C85 : (MACRO)             	ldaD R13,_mymac
    2444/    2C8B : (MACRO)             	Ccall _copyMac
    2445/    2C8E :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    2446/    2C8E : (MACRO)             	ldaD R12,_buffer+38
    2447/    2C94 : (MACRO)             	ldaD R13,_buffer+28
    2448/    2C9A : (MACRO)             	Ccall _copyIp
    2449/    2C9D :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    2450/    2C9D : (MACRO)             	ldaD R12,_buffer+28
    2451/    2CA3 : (MACRO)             	ldaD R13,_myip
    2452/    2CA9 : (MACRO)             	Ccall _copyIp
    2453/    2CAC :                     ;  encpacketSend(42);
    2454/    2CAC : (MACRO)             	ldaD R12,42
    2455/    2CB2 : (MACRO)             	Ccall _encpacketSend
    2456/    2CB5 :                     ;}
    2457/    2CB5 :                     L312:
    2458/    2CB5 : (MACRO)             	release 4
    2459/    2CBD : (MACRO)             	Cretn
    2460/    2CBE :                     
    2461/    2CBE :                     _make_echo_reply_from_request:
    2462/    2CBE : (MACRO)             	reserve 4
    2463/    2CC8 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2464/    2CD5 :                     ; void make_echo_reply_from_request(word len) {
    2465/    2CD5 :                     ;  make_eth_ip();
    2466/    2CD5 : (MACRO)             	Ccall _make_eth_ip
    2467/    2CD8 :                     ;  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    2468/    2CD8 : (MACRO)             	ldaD R11,0
    2469/    2CDE : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    2470/    2CE6 :                     ;  if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    2471/    2CE6 : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    2472/    2CEE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2473/    2CF1 : (MACRO)             	jnI2I r11,247,lbdf,L324 ;LEI2 247 11 L324; LE is flipped test & subtraction
    2474/    2D02 :                     ;      gPB[ICMP_CHECKSUM_P+1]++;
    2475/    2D02 : (MACRO)             	ld1 R11,'D',(_buffer+37),0
    2476/    2D0A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 43 - 2/28/2013 15:08:33


    2477/    2D0D : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    2478/    2D15 : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    2479/    2D1D :                     L324:
    2480/    2D1D :                     ;  gPB[ICMP_CHECKSUM_P] += 0x08;
    2481/    2D1D : (MACRO)             	ld1 R11,'D',(_buffer+36),0
    2482/    2D25 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2483/    2D28 : (MACRO)             	ldA2 R11,'O',R11,(8); reg:addr
    2484/    2D30 : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    2485/    2D38 :                     ;  encpacketSend(len);
    2486/    2D38 : (MACRO)             	ld2 R12,'O',sp,(0+6); INDIRU2(addr)
    2487/    2D44 : (MACRO)             	Ccall _encpacketSend
    2488/    2D47 :                     ;}
    2489/    2D47 :                     L322:
    2490/    2D47 : (MACRO)             	release 4
    2491/    2D4F : (MACRO)             	Cretn
    2492/    2D50 :                     
    2493/    2D50 :                     _make_tcp_ack_from_any:
    2494/    2D50 : (MACRO)             	reserve 10
    2495/    2D5A : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
    2496/    2D62 : EE                  	sex	memaddr
    2497/    2D63 : (MACRO)             	savmi r7
    2498/    2D67 : E2                  	sex sp
    2499/    2D68 : (MACRO)             	st2 r12,'O',sp,(12); flag1 
    2500/    2D75 : (MACRO)             	st2 r13,'O',sp,(14); flag1 
    2501/    2D82 : (MACRO)             	ld2 R11,'O',sp,(2+12)
    2502/    2D8E : (MACRO)             	st1 R11,'O',sp,(2+12); ASGNU1
    2503/    2D98 :                     ; void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
    2504/    2D98 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
    2505/    2D98 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    2506/    2DA2 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2507/    2DA5 : (MACRO)             	alu2I R11,R11,16,ori,ori ;removed copy
    2508/    2DAD : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    2509/    2DB5 :                     ;  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
    2510/    2DB5 : (MACRO)             	ld1 R11,'O',sp,(2+12)
    2511/    2DBF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2512/    2DC2 : (MACRO)             	jeqU2I r11,4,L331
    2513/    2DCE : (MACRO)             	ld2 R11,'O',sp,(0+12)
    2514/    2DDA : (MACRO)             	jneU2I r11,0,L331; NE
    2515/    2DE6 :                     ;    datlentoack = 1;
    2516/    2DE6 : (MACRO)             	ldaD R11,1
    2517/    2DEC : (MACRO)             	st2 R11,'O',sp,(0+12)
    2518/    2DF9 :                     L331:
    2519/    2DF9 :                     ;  make_tcphead(datlentoack,1); // no options
    2520/    2DF9 : (MACRO)             	ld2 R11,'O',sp,(0+12)
    2521/    2E05 : (MACRO)             	cpy2 R12,R11
    2522/    2E09 : (MACRO)             	ldaD R13,1
    2523/    2E0F : (MACRO)             	Ccall _make_tcphead
    2524/    2E12 :                     ;  j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
    2525/    2E12 : (MACRO)             	ldaD R7,40
    2526/    2E18 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    2527/    2E18 : (MACRO)             	cpy2 R11,R7
    2528/    2E1C : (MACRO)             	shrU2I R11,8
    2529/    2E4C : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    2530/    2E54 :                     ;  gPB[IP_TOTLEN_L_P] = j;
    2531/    2E54 : (MACRO)             	cpy1 R11,R7
    2532/    2E56 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2533/    2E5E :                     ;  make_eth_ip();
    2534/    2E5E : (MACRO)             	Ccall _make_eth_ip
    2535/    2E61 :                     ;  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
    2536/    2E61 : (MACRO)             	ldaD R11,4
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 44 - 2/28/2013 15:08:33


    2537/    2E67 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    2538/    2E6F :                     ;  gPB[TCP_WIN_SIZE+1] = 0;
    2539/    2E6F : (MACRO)             	ldaD R11,0
    2540/    2E75 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    2541/    2E7D :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
    2542/    2E7D : (MACRO)             	ldaD R12,50
    2543/    2E83 : (MACRO)             	ldaD R13,26
    2544/    2E89 : (MACRO)             	ldaD R11,28
    2545/    2E8F : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2546/    2E9C : (MACRO)             	ldaD R11,2
    2547/    2EA2 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2548/    2EAF : (MACRO)             	Ccall _fill_checksum
    2549/    2EB2 :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
    2550/    2EB2 : (MACRO)             	ldaD R12,54
    2551/    2EB8 : (MACRO)             	Ccall _encpacketSend
    2552/    2EBB :                     ;}
    2553/    2EBB :                     L329:
    2554/    2EBB : (MACRO)             	alu2I memaddr,sp,(8),adi,adci
    2555/    2EC3 : (MACRO)             	rldmi r7,memaddr
    2556/    2EC7 : (MACRO)             	release 10
    2557/    2ECF : (MACRO)             	Cretn
    2558/    2ED0 :                     
    2559/    2ED0 :                     _make_tcp_ack_with_data_noflags:
    2560/    2ED0 : (MACRO)             	reserve 12
    2561/    2EDA : (MACRO)             	alu2I memaddr,sp,(11),adi,adci
    2562/    2EE2 : EE                  	sex	memaddr
    2563/    2EE3 : (MACRO)             	savmi r1
    2564/    2EE7 : (MACRO)             	savmi r7
    2565/    2EEB : E2                  	sex sp
    2566/    2EEC : (MACRO)             	cpy2 r7,r12; function(2054) 1
    2567/    2EF0 :                     ; void make_tcp_ack_with_data_noflags(word dlen) {
    2568/    2EF0 :                     ;  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    2569/    2EF0 : (MACRO)             	ldA2 R1,'O',R7,(40); reg:addr
    2570/    2EF8 :                     ;  gPB[IP_TOTLEN_H_P] = j>>8;
    2571/    2EF8 : (MACRO)             	cpy2 R11,R1
    2572/    2EFC : (MACRO)             	shrU2I R11,8
    2573/    2F2C : (MACRO)             	st1 R11,'D',(_buffer+16),0; ASGNU1
    2574/    2F34 :                     ;  gPB[IP_TOTLEN_L_P] = j;
    2575/    2F34 : (MACRO)             	cpy1 R11,R1
    2576/    2F36 : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2577/    2F3E :                     ;  fill_ip_hdr_checksum();
    2578/    2F3E : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2579/    2F41 :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    2580/    2F41 : (MACRO)             	ldaD R11,0
    2581/    2F47 : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    2582/    2F4F :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    2583/    2F4F : (MACRO)             	ldaD R11,0
    2584/    2F55 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    2585/    2F5D :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    2586/    2F5D : (MACRO)             	ldaD R12,50
    2587/    2F63 : (MACRO)             	ldaD R13,26
    2588/    2F69 : (MACRO)             	ldA2 R11,'O',R7,(28); reg:addr
    2589/    2F71 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2590/    2F7E : (MACRO)             	ldaD R11,2
    2591/    2F84 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2592/    2F91 : (MACRO)             	Ccall _fill_checksum
    2593/    2F94 :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
    2594/    2F94 : (MACRO)             	ldA2 R11,'O',R7,(40); reg:addr
    2595/    2F9C : (MACRO)             	ldA2 R12,'O',R11,(14); reg:addr
    2596/    2FA4 : (MACRO)             	Ccall _encpacketSend
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 45 - 2/28/2013 15:08:33


    2597/    2FA7 :                     ;}
    2598/    2FA7 :                     L337:
    2599/    2FA7 : (MACRO)             	alu2I memaddr,sp,(8),adi,adci
    2600/    2FAF : (MACRO)             	rldmi r7,memaddr
    2601/    2FB3 : (MACRO)             	rldmi r1,memaddr
    2602/    2FB7 : (MACRO)             	release 12
    2603/    2FBF : (MACRO)             	Cretn
    2604/    2FC0 :                     
    2605/    2FC0 :                     _get_tcp_data_len:
    2606/    2FC0 : (MACRO)             	reserve 2
    2607/    2FCA : (MACRO)             	alu2I memaddr,sp,(1),adi,adci
    2608/    2FD2 : EE                  	sex	memaddr
    2609/    2FD3 : (MACRO)             	savmi r7
    2610/    2FD7 : E2                  	sex sp
    2611/    2FD8 :                     ; word get_tcp_data_len() {
    2612/    2FD8 :                     ;  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    2613/    2FD8 : (MACRO)             	ld1 R11,'D',(_buffer+16),0
    2614/    2FE0 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2615/    2FE3 : (MACRO)             	shl2I R11,8
    2616/    3013 : (MACRO)             	ld1 R10,'D',(_buffer+17),0
    2617/    301B : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2618/    301E : (MACRO)             	alu2 R7,R11,R10,or,or
    2619/    302A :                     ;  i -= IP_HEADER_LEN;
    2620/    302A : (MACRO)             	alu2I R7,R7,20,smi,smbi
    2621/    3032 :                     ;  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    2622/    3032 : (MACRO)             	ld1 R11,'D',(_buffer+46),0
    2623/    303A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2624/    303D : (MACRO)             	shrI2I R11,4
    2625/    305D : (MACRO)             	shl2I R11,2
    2626/    3069 : (MACRO)             	alu2 R7,R7,R11,sm,smb
    2627/    3075 :                     ;  if (i<=0)
    2628/    3075 : (MACRO)             	jnI2I r7,0,lbnf,L346; GT reverse  the subtraction
    2629/    3086 :                     ;    i = 0;
    2630/    3086 : (MACRO)             	ldaD R7,0
    2631/    308C :                     L346:
    2632/    308C :                     ;  return (word)i;
    2633/    308C : (MACRO)             	cpy2 R15,R7
    2634/    3090 :                     L342:
    2635/    3090 : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
    2636/    3098 : (MACRO)             	rldmi r7,memaddr
    2637/    309C : (MACRO)             	release 2
    2638/    30A4 : (MACRO)             	Cretn
    2639/    30A5 :                     
    2640/    30A5 :                     _check_ip_message_is_from:
    2641/    30A5 : (MACRO)             	reserve 8
    2642/    30AF : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
    2643/    30B7 : EE                  	sex	memaddr
    2644/    30B8 : (MACRO)             	savmi r7
    2645/    30BC : E2                  	sex sp
    2646/    30BD : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2647/    30CA :                     ; byte check_ip_message_is_from(const byte *ip) {
    2648/    30CA :                     ;  return memcmp(gPB + IP_SRC_P, ip, 4) == 0;
    2649/    30CA : (MACRO)             	ldaD R12,_buffer+26
    2650/    30D0 : (MACRO)             	ld2 R13,'O',sp,(0+10)
    2651/    30DC : (MACRO)             	ldaD R11,4
    2652/    30E2 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2653/    30EF : (MACRO)             	Ccall _memcmp
    2654/    30F2 : (MACRO)             	cpy2 R11,R15 ;LOADI2
    2655/    30F6 : (MACRO)             	jneU2I r11,0,L351; NE
    2656/    3102 : (MACRO)             	ldaD R7,1
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 46 - 2/28/2013 15:08:33


    2657/    3108 : C0 31 11            	lbr L352
    2658/    310B :                     L351:
    2659/    310B : (MACRO)             	ldaD R7,0
    2660/    3111 :                     L352:
    2661/    3111 : (MACRO)             	cpy2 R11,R7
    2662/    3115 : (MACRO)             	cpy1 R15,R11
    2663/    3117 : (MACRO)             	zExt 15 ;CVUI2: widen unsigned char to signed int (zero extend)
    2664/    311A :                     L348:
    2665/    311A : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
    2666/    3122 : (MACRO)             	rldmi r7,memaddr
    2667/    3126 : (MACRO)             	release 8
    2668/    312E : (MACRO)             	Cretn
    2669/    312F :                     
    2670/    312F :                     _fill_checksum:
    2671/    312F : (MACRO)             	reserve 14
    2672/    3139 : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
    2673/    3141 : EE                  	sex	memaddr
    2674/    3142 : (MACRO)             	savmi r0
    2675/    3146 : (MACRO)             	savmi r1
    2676/    314A : (MACRO)             	savmi r7
    2677/    314E : E2                  	sex sp
    2678/    314F : (MACRO)             	ld2 R7,'O',sp,(4+16); INDIRU2(addr)
    2679/    315B : (MACRO)             	ld2 R11,'O',sp,(6+16)
    2680/    3167 : (MACRO)             	st1 R11,'O',sp,(6+16); ASGNU1
    2681/    3171 :                     ; void fill_checksum(byte dest, byte off, word len,byte type) {
    2682/    3171 :                     ;  const byte* ptr = gPB + off;
    2683/    3171 : (MACRO)             	cpy1 R11,R13
    2684/    3173 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2685/    3176 : (MACRO)             	ldA2 R11,'O',R11,(_buffer); reg:addr
    2686/    317E : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2687/    318B :                     ; long sum = type==1 ? IP_PROTO_UDP_V+len-8 :
    2688/    318B : (MACRO)             	ld1 R11,'O',sp,(6+16)
    2689/    3195 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2690/    3198 : (MACRO)             	jneU2I r11,1,L356; NE
    2691/    31A4 : (MACRO)             	ldA2 R11,'O',R7,(17); reg:addr
    2692/    31AC : (MACRO)             	alu2I R11,R11,8,smi,smbi
    2693/    31B4 : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)
    2694/    31C1 : C0 32 27            	lbr L357
    2695/    31C4 :                     L356:
    2696/    31C4 : (MACRO)             	ld1 R11,'O',sp,(6+16)
    2697/    31CE : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2698/    31D1 : (MACRO)             	jneU2I r11,2,L358; NE
    2699/    31DD : (MACRO)             	ldA2 R11,'O',R7,(6); reg:addr
    2700/    31E5 : (MACRO)             	alu2I R11,R11,8,smi,smbi
    2701/    31ED : (MACRO)             	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)
    2702/    31FA : C0 32 0E            	lbr L359
    2703/    31FD :                     L358:
    2704/    31FD : (MACRO)             	ld2z R11
    2705/    3201 : (MACRO)             	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)
    2706/    320E :                     L359:
    2707/    320E : (MACRO)             	ld2 R11,'O',sp,(-10+16); INDIRU2(addr)
    2708/    321A : (MACRO)             	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)
    2709/    3227 :                     L357:
    2710/    3227 : (MACRO)             	ld2 RL0,'O',sp,(-8+16)
    2711/    3233 : (MACRO)             	zext4 RL0 ;CVUI4: widen unsigned int to signed long (zero extend)
    2712/    3237 : C0 33 3F            	lbr L361
    2713/    323A :                     L360:
    2714/    323A :                     ;  while(len >1) {
    2715/    323A :                     ;    sum += (word) (((unsigned long)*ptr<<8)|*(ptr+1));
    2716/    323A : (MACRO)             	ld2 R11,'O',sp,(-4+16)
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 47 - 2/28/2013 15:08:33


    2717/    3246 : (MACRO)             	ld1 R10,'O',R11,0
    2718/    3250 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    2719/    3253 : (MACRO)             	cpy2 RL8,R10
    2720/    3257 : (MACRO)             	sext4 RL8; CVIU4
    2721/    3262 : (MACRO)             	shl4I RL8,8; LSHU4(reg,con)
    2722/    32C2 : (MACRO)             	ld1 R11,'O',R11,(1)
    2723/    32CC : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2724/    32CF : (MACRO)             	cpy2 RL10,R11
    2725/    32D3 : (MACRO)             	sext4 RL10; CVIU4
    2726/    32DE : (MACRO)             	alu4 RL10,RL8,RL10,or,or
    2727/    32F4 : (MACRO)             	cpy2 R11,RL10
    2728/    32F8 : (MACRO)             	cpy2 RL10,R11
    2729/    32FC : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2730/    3300 : (MACRO)             	alu4 RL0,RL0,RL10,add,adc
    2731/    3316 :                     ;    ptr+=2;
    2732/    3316 : (MACRO)             	ld2 R11,'O',sp,(-4+16)
    2733/    3322 : (MACRO)             	ldA2 R11,'O',R11,(2); reg:addr
    2734/    332A : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
    2735/    3337 :                     ;    len-=2;
    2736/    3337 : (MACRO)             	alu2I R7,R7,2,smi,smbi
    2737/    333F :                     ;  }
    2738/    333F :                     L361:
    2739/    333F :                     ;  while(len >1) {
    2740/    333F : (MACRO)             	jnU2I r7,1,lbnf,L360; GT reverse the subtraction
    2741/    3348 :                     ;  if (len)
    2742/    3348 : (MACRO)             	jeqU2I r7,0,L366
    2743/    3354 :                     ;    sum += ((unsigned long)*ptr)<<8;
    2744/    3354 : (MACRO)             	cpy4 RL10,RL0; LOADU4*
    2745/    335C : (MACRO)             	ld2 R9,'O',sp,(-4+16)
    2746/    3368 : (MACRO)             	ld1 R9,'O',R9,0
    2747/    3372 : (MACRO)             	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
    2748/    3375 : (MACRO)             	cpy2 RL8,R9
    2749/    3379 : (MACRO)             	sext4 RL8; CVIU4
    2750/    3384 : (MACRO)             	shl4I RL8,8; LSHU4(reg,con)
    2751/    33E4 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
    2752/    33FA : (MACRO)             	cpy4 RL0,RL10; LOADI4*
    2753/    3402 : C0 35 0F            	lbr L366
    2754/    3405 :                     L365:
    2755/    3405 :                     ;    sum = (word) sum + (sum >> 16);
    2756/    3405 : (MACRO)             	cpy2 R11,RL0
    2757/    3409 : (MACRO)             	cpy2 RL10,R11
    2758/    340D : (MACRO)             	zext4 RL10; CVUI4 jan 16
    2759/    3411 : (MACRO)             	cpy4 RL8,RL0
    2760/    3419 : (MACRO)             	shrI4I RL8,16
    2761/    34F9 : (MACRO)             	alu4 RL0,RL10,RL8,add,adc
    2762/    350F :                     L366:
    2763/    350F :                     ;  while (sum>>16)
    2764/    350F : (MACRO)             	cpy4 RL10,RL0
    2765/    3517 : (MACRO)             	shrI4I RL10,16
    2766/    35F7 : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
    2767/    3603 : (MACRO)             	jneU4 rL10,rL8,L365; NE
    2768/    362A :                     ;  ck = ~ (word) sum;
    2769/    362A : (MACRO)             	cpy2 R11,RL0
    2770/    362E : (MACRO)             	alu2I R11,R11,-1,xri,xri; was?	cpy2 R11,R11+xor2I R11,-1
    2771/    3636 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNU2(addr,reg)
    2772/    3643 :                     ;  gPB[dest] = ck>>8;
    2773/    3643 : (MACRO)             	cpy1 R11,R12
    2774/    3645 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2775/    3648 : (MACRO)             	ld2 R10,'O',sp,(-6+16); INDIRU2(addr)
    2776/    3654 : (MACRO)             	shrU2I R10,8
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 48 - 2/28/2013 15:08:33


    2777/    3684 : (MACRO)             	st1 R10,'O',R11,(_buffer); ASGNU1
    2778/    368E :                     ;  gPB[dest+1] = ck;
    2779/    368E : (MACRO)             	cpy1 R11,R12
    2780/    3690 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2781/    3693 : (MACRO)             	ld2 R10,'O',sp,(-6+16); INDIRU2(addr)
    2782/    369F : (MACRO)             	st1 R10,'O',R11,(_buffer+1); ASGNU1
    2783/    36A9 :                     ;}
    2784/    36A9 :                     L353:
    2785/    36A9 : (MACRO)             	alu2I memaddr,sp,(0),adi,adci
    2786/    36B1 : (MACRO)             	rldmi r7,memaddr
    2787/    36B5 : (MACRO)             	rldmi r1,memaddr
    2788/    36B9 : (MACRO)             	rldmi r0,memaddr
    2789/    36BD : (MACRO)             	release 14
    2790/    36C5 : (MACRO)             	Cretn
    2791/    36C6 :                     
    2792/    36C6 :                     _fill_ip_hdr_checksum:
    2793/    36C6 : (MACRO)             	reserve 8
    2794/    36D0 :                     ; void fill_ip_hdr_checksum() {
    2795/    36D0 :                     ;  gPB[IP_CHECKSUM_P] = 0;
    2796/    36D0 : (MACRO)             	ldaD R11,0
    2797/    36D6 : (MACRO)             	st1 R11,'D',(_buffer+24),0; ASGNU1
    2798/    36DE :                     ;  gPB[IP_CHECKSUM_P+1] = 0;
    2799/    36DE : (MACRO)             	ldaD R11,0
    2800/    36E4 : (MACRO)             	st1 R11,'D',(_buffer+25),0; ASGNU1
    2801/    36EC :                     ;  gPB[IP_FLAGS_P] = 0x40; // don't fragment
    2802/    36EC : (MACRO)             	ldaD R11,64
    2803/    36F2 : (MACRO)             	st1 R11,'D',(_buffer+20),0; ASGNU1
    2804/    36FA :                     ;  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
    2805/    36FA : (MACRO)             	ldaD R11,0
    2806/    3700 : (MACRO)             	st1 R11,'D',(_buffer+21),0; ASGNU1
    2807/    3708 :                     ;  gPB[IP_TTL_P] = 64; // ttl
    2808/    3708 : (MACRO)             	ldaD R11,64
    2809/    370E : (MACRO)             	st1 R11,'D',(_buffer+22),0; ASGNU1
    2810/    3716 :                     ;  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
    2811/    3716 : (MACRO)             	ldaD R12,24
    2812/    371C : (MACRO)             	ldaD R13,14
    2813/    3722 : (MACRO)             	ldaD R11,20
    2814/    3728 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2815/    3735 : (MACRO)             	ldaD R11,0
    2816/    373B : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    2817/    3748 : (MACRO)             	Ccall _fill_checksum
    2818/    374B :                     ;}
    2819/    374B :                     L369:
    2820/    374B : (MACRO)             	release 8
    2821/    3753 : (MACRO)             	Cretn
    2822/    3754 :                     
    2823/    3754 :                     _make_eth_ip:
    2824/    3754 : (MACRO)             	reserve 4
    2825/    375E :                     ; void make_eth_ip() {
    2826/    375E :                     ;  setMACs(gPB + ETH_SRC_MAC);
    2827/    375E : (MACRO)             	ldaD R12,_buffer+6
    2828/    3764 : (MACRO)             	Ccall _setMACs
    2829/    3767 :                     ;  copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
    2830/    3767 : (MACRO)             	ldaD R12,_buffer+30
    2831/    376D : (MACRO)             	ldaD R13,_buffer+26
    2832/    3773 : (MACRO)             	Ccall _copyIp
    2833/    3776 :                     ;  copyIp(gPB + IP_SRC_P, myip);
    2834/    3776 : (MACRO)             	ldaD R12,_buffer+26
    2835/    377C : (MACRO)             	ldaD R13,_myip
    2836/    3782 : (MACRO)             	Ccall _copyIp
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 49 - 2/28/2013 15:08:33


    2837/    3785 :                     ;  fill_ip_hdr_checksum();
    2838/    3785 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2839/    3788 :                     ;}
    2840/    3788 :                     L375:
    2841/    3788 : (MACRO)             	release 4
    2842/    3790 : (MACRO)             	Cretn
    2843/    3791 :                     
    2844/    3791 :                     _client_store_gw_mac:
    2845/    3791 : (MACRO)             	reserve 6
    2846/    379B :                     ; byte client_store_gw_mac() {
    2847/    379B :                     ;  if (memcmp(gPB + ETH_ARP_SRC_IP_P, gwip, 4) != 0)
    2848/    379B : (MACRO)             	ldaD R12,_buffer+28
    2849/    37A1 : (MACRO)             	ldaD R13,_gwip
    2850/    37A7 : (MACRO)             	ldaD R11,4
    2851/    37AD : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2852/    37BA : (MACRO)             	Ccall _memcmp
    2853/    37BD : (MACRO)             	jeqU2I r15,0,L381
    2854/    37C9 :                     ;    return 0;
    2855/    37C9 : (MACRO)             	ldaD R15,0
    2856/    37CF : C0 37 E7            	lbr L380
    2857/    37D2 :                     L381:
    2858/    37D2 :                     ;  copyMac(gwmacaddr, gPB + ETH_ARP_SRC_MAC_P);
    2859/    37D2 : (MACRO)             	ldaD R12,_gwmacaddr
    2860/    37D8 : (MACRO)             	ldaD R13,_buffer+22
    2861/    37DE : (MACRO)             	Ccall _copyMac
    2862/    37E1 :                     ;  return 1;
    2863/    37E1 : (MACRO)             	ldaD R15,1
    2864/    37E7 :                     L380:
    2865/    37E7 : (MACRO)             	release 6
    2866/    37EF : (MACRO)             	Cretn
    2867/    37F0 :                     
    2868/    37F0 :                     _setMACs:
    2869/    37F0 : (MACRO)             	reserve 4
    2870/    37FA : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    2871/    3807 :                     ; void setMACs (const byte *mac) {
    2872/    3807 :                     ;  copyMac(gPB + ETH_DST_MAC, mac);
    2873/    3807 : (MACRO)             	ldaD R12,_buffer
    2874/    380D : (MACRO)             	ld2 R13,'O',sp,(0+6)
    2875/    3819 : (MACRO)             	Ccall _copyMac
    2876/    381C :                     ;  copyMac(gPB + ETH_SRC_MAC, mymac);
    2877/    381C : (MACRO)             	ldaD R12,_buffer+6
    2878/    3822 : (MACRO)             	ldaD R13,_mymac
    2879/    3828 : (MACRO)             	Ccall _copyMac
    2880/    382B :                     ;}
    2881/    382B :                     L385:
    2882/    382B : (MACRO)             	release 4
    2883/    3833 : (MACRO)             	Cretn
    2884/    3834 :                     
    2885/    3834 :                     _client_arp_whohas:
    2886/    3834 : (MACRO)             	reserve 6
    2887/    383E : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    2888/    384B :                     ; void client_arp_whohas(byte *ip_we_search) {
    2889/    384B :                     ;  setMACs(allOnes);
    2890/    384B : (MACRO)             	ldaD R12,_allOnes
    2891/    3851 : (MACRO)             	Ccall _setMACs
    2892/    3854 :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    2893/    3854 : (MACRO)             	ldaD R11,8
    2894/    385A : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2895/    3862 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    2896/    3862 : (MACRO)             	ldaD R11,6
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 50 - 2/28/2013 15:08:33


    2897/    3868 : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2898/    3870 :                     ;  memcpy(gPB + ETH_ARP_P,arpreqhdr,8);
    2899/    3870 : (MACRO)             	ldaD R12,_buffer+14
    2900/    3876 : (MACRO)             	ldaD R13,_arpreqhdr
    2901/    387C : (MACRO)             	ldaD R11,8
    2902/    3882 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2903/    388F : (MACRO)             	Ccall _memcpy
    2904/    3892 :                     ;  memset(gPB + ETH_ARP_DST_MAC_P, 0, 6);
    2905/    3892 : (MACRO)             	ldaD R12,_buffer+32
    2906/    3898 : (MACRO)             	ldaD R13,0
    2907/    389E : (MACRO)             	ldaD R11,6
    2908/    38A4 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2909/    38B1 : (MACRO)             	Ccall _memset
    2910/    38B4 :                     ;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
    2911/    38B4 : (MACRO)             	ldaD R12,_buffer+22
    2912/    38BA : (MACRO)             	ldaD R13,_mymac
    2913/    38C0 : (MACRO)             	Ccall _copyMac
    2914/    38C3 :                     ;  copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
    2915/    38C3 : (MACRO)             	ldaD R12,_buffer+38
    2916/    38C9 : (MACRO)             	ld2 R13,'O',sp,(0+8)
    2917/    38D5 : (MACRO)             	Ccall _copyIp
    2918/    38D8 :                     ;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
    2919/    38D8 : (MACRO)             	ldaD R12,_buffer+28
    2920/    38DE : (MACRO)             	ldaD R13,_myip
    2921/    38E4 : (MACRO)             	Ccall _copyIp
    2922/    38E7 :                     ;  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    2923/    38E7 : (MACRO)             	ld1 R11,'D',(_waitgwmac),0
    2924/    38EF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2925/    38F2 : (MACRO)             	alu2I R11,R11,8,ori,ori ;removed copy
    2926/    38FA : (MACRO)             	st1 R11,'D',(_waitgwmac),0; ASGNU1
    2927/    3902 :                     ;  encpacketSend(42);
    2928/    3902 : (MACRO)             	ldaD R12,42
    2929/    3908 : (MACRO)             	Ccall _encpacketSend
    2930/    390B :                     ;}
    2931/    390B :                     L387:
    2932/    390B : (MACRO)             	release 6
    2933/    3913 : (MACRO)             	Cretn
    2934/    3914 :                     
    2935/    3914 :                     _client_syn:
    2936/    3914 : (MACRO)             	reserve 8
    2937/    391E : (MACRO)             	st2 r12,'O',sp,(10); flag1 
    2938/    392B : (MACRO)             	st2 r13,'O',sp,(12); flag1 
    2939/    3938 : (MACRO)             	ld2 R11,'O',sp,(0+10)
    2940/    3944 : (MACRO)             	st1 R11,'O',sp,(0+10); ASGNU1
    2941/    394E : (MACRO)             	ld2 R11,'O',sp,(2+10)
    2942/    395A : (MACRO)             	st1 R11,'O',sp,(2+10); ASGNU1
    2943/    3964 : (MACRO)             	ld2 R11,'O',sp,(4+10)
    2944/    3970 : (MACRO)             	st1 R11,'O',sp,(4+10); ASGNU1
    2945/    397A :                     ; void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
    2946/    397A :                     ;  setMACandIPs(gwmacaddr, hisip);
    2947/    397A : (MACRO)             	ldaD R12,_gwmacaddr
    2948/    3980 : (MACRO)             	ldaD R13,_hisip
    2949/    3986 : (MACRO)             	Ccall _setMACandIPs
    2950/    3989 :                     ;  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    2951/    3989 : (MACRO)             	ldaD R11,8
    2952/    398F : (MACRO)             	st1 R11,'D',(_buffer+12),0; ASGNU1
    2953/    3997 :                     ;  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    2954/    3997 : (MACRO)             	ldaD R11,0
    2955/    399D : (MACRO)             	st1 R11,'D',(_buffer+13),0; ASGNU1
    2956/    39A5 :                     ;  memcpy(gPB + IP_P,iphdr,9);
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 51 - 2/28/2013 15:08:33


    2957/    39A5 : (MACRO)             	ldaD R12,_buffer+14
    2958/    39AB : (MACRO)             	ldaD R13,_iphdr
    2959/    39B1 : (MACRO)             	ldaD R11,9
    2960/    39B7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2961/    39C4 : (MACRO)             	Ccall _memcpy
    2962/    39C7 :                     ;  gPB[IP_TOTLEN_L_P] = 44; // good for syn
    2963/    39C7 : (MACRO)             	ldaD R11,44
    2964/    39CD : (MACRO)             	st1 R11,'D',(_buffer+17),0; ASGNU1
    2965/    39D5 :                     ;  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    2966/    39D5 : (MACRO)             	ldaD R11,6
    2967/    39DB : (MACRO)             	st1 R11,'D',(_buffer+23),0; ASGNU1
    2968/    39E3 :                     ;  fill_ip_hdr_checksum();
    2969/    39E3 : (MACRO)             	Ccall _fill_ip_hdr_checksum
    2970/    39E6 :                     ;  gPB[TCP_DST_PORT_H_P] = dstport_h;
    2971/    39E6 : (MACRO)             	ld1 R11,'O',sp,(2+10)
    2972/    39F0 : (MACRO)             	st1 R11,'D',(_buffer+36),0; ASGNU1
    2973/    39F8 :                     ;  gPB[TCP_DST_PORT_L_P] = dstport_l;
    2974/    39F8 : (MACRO)             	ld1 R11,'O',sp,(4+10)
    2975/    3A02 : (MACRO)             	st1 R11,'D',(_buffer+37),0; ASGNU1
    2976/    3A0A :                     ;  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    2977/    3A0A : (MACRO)             	ldaD R11,11
    2978/    3A10 : (MACRO)             	st1 R11,'D',(_buffer+34),0; ASGNU1
    2979/    3A18 :                     ;  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    2980/    3A18 : (MACRO)             	ld1 R11,'O',sp,(0+10)
    2981/    3A22 : (MACRO)             	st1 R11,'D',(_buffer+35),0; ASGNU1
    2982/    3A2A :                     ;  memset(gPB + TCP_SEQ_H_P, 0, 8);
    2983/    3A2A : (MACRO)             	ldaD R12,_buffer+38
    2984/    3A30 : (MACRO)             	ldaD R13,0
    2985/    3A36 : (MACRO)             	ldaD R11,8
    2986/    3A3C : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    2987/    3A49 : (MACRO)             	Ccall _memset
    2988/    3A4C :                     ;  gPB[TCP_SEQ_H_P+2] = seqnum;
    2989/    3A4C : (MACRO)             	ld1 R11,'D',(_seqnum),0
    2990/    3A54 : (MACRO)             	st1 R11,'D',(_buffer+40),0; ASGNU1
    2991/    3A5C :                     ;  seqnum += 3;
    2992/    3A5C : (MACRO)             	ld1 R11,'D',(_seqnum),0
    2993/    3A64 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    2994/    3A67 : (MACRO)             	ldA2 R11,'O',R11,(3); reg:addr
    2995/    3A6F : (MACRO)             	st1 R11,'D',(_seqnum),0; ASGNU1
    2996/    3A77 :                     ;  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    2997/    3A77 : (MACRO)             	ldaD R11,96
    2998/    3A7D : (MACRO)             	st1 R11,'D',(_buffer+46),0; ASGNU1
    2999/    3A85 :                     ;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    3000/    3A85 : (MACRO)             	ldaD R11,2
    3001/    3A8B : (MACRO)             	st1 R11,'D',(_buffer+47),0; ASGNU1
    3002/    3A93 :                     ;  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    3003/    3A93 : (MACRO)             	ldaD R11,3
    3004/    3A99 : (MACRO)             	st1 R11,'D',(_buffer+48),0; ASGNU1
    3005/    3AA1 :                     ;  gPB[TCP_WIN_SIZE+1] = 0x0;
    3006/    3AA1 : (MACRO)             	ldaD R11,0
    3007/    3AA7 : (MACRO)             	st1 R11,'D',(_buffer+49),0; ASGNU1
    3008/    3AAF :                     ;  gPB[TCP_CHECKSUM_H_P] = 0;
    3009/    3AAF : (MACRO)             	ldaD R11,0
    3010/    3AB5 : (MACRO)             	st1 R11,'D',(_buffer+50),0; ASGNU1
    3011/    3ABD :                     ;  gPB[TCP_CHECKSUM_L_P] = 0;
    3012/    3ABD : (MACRO)             	ldaD R11,0
    3013/    3AC3 : (MACRO)             	st1 R11,'D',(_buffer+51),0; ASGNU1
    3014/    3ACB :                     ;  gPB[TCP_CHECKSUM_L_P+1] = 0;
    3015/    3ACB : (MACRO)             	ldaD R11,0
    3016/    3AD1 : (MACRO)             	st1 R11,'D',(_buffer+52),0; ASGNU1
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 52 - 2/28/2013 15:08:33


    3017/    3AD9 :                     ;  gPB[TCP_CHECKSUM_L_P+2] = 0;
    3018/    3AD9 : (MACRO)             	ldaD R11,0
    3019/    3ADF : (MACRO)             	st1 R11,'D',(_buffer+53),0; ASGNU1
    3020/    3AE7 :                     ;  gPB[TCP_OPTIONS_P] = 2;
    3021/    3AE7 : (MACRO)             	ldaD R11,2
    3022/    3AED : (MACRO)             	st1 R11,'D',(_buffer+54),0; ASGNU1
    3023/    3AF5 :                     ;  gPB[TCP_OPTIONS_P+1] = 4;
    3024/    3AF5 : (MACRO)             	ldaD R11,4
    3025/    3AFB : (MACRO)             	st1 R11,'D',(_buffer+55),0; ASGNU1
    3026/    3B03 :                     ;  gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    3027/    3B03 : (MACRO)             	ldaD R11,2
    3028/    3B09 : (MACRO)             	st1 R11,'D',(_buffer+56),0; ASGNU1
    3029/    3B11 :                     ;  gPB[TCP_OPTIONS_P+3] = (byte) CLIENTMSS;
    3030/    3B11 : (MACRO)             	ldaD R11,550
    3031/    3B17 : (MACRO)             	st1 R11,'D',(_buffer+57),0; ASGNU1
    3032/    3B1F :                     ;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    3033/    3B1F : (MACRO)             	ldaD R12,50
    3034/    3B25 : (MACRO)             	ldaD R13,26
    3035/    3B2B : (MACRO)             	ldaD R11,32
    3036/    3B31 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    3037/    3B3E : (MACRO)             	ldaD R11,2
    3038/    3B44 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
    3039/    3B51 : (MACRO)             	Ccall _fill_checksum
    3040/    3B54 :                     ;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    3041/    3B54 : (MACRO)             	ldaD R12,58
    3042/    3B5A : (MACRO)             	Ccall _encpacketSend
    3043/    3B5D :                     ;}
    3044/    3B5D :                     L395:
    3045/    3B5D : (MACRO)             	release 8
    3046/    3B65 : (MACRO)             	Cretn
    3047/    3B66 :                     
    3048/    3B66 :                     _setMACandIPs:
    3049/    3B66 : (MACRO)             	reserve 4
    3050/    3B70 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    3051/    3B7D : (MACRO)             	st2 r13,'O',sp,(8); flag1 
    3052/    3B8A :                     ; void setMACandIPs (const byte *mac, const byte *dst) {
    3053/    3B8A :                     ;  setMACs(mac);
    3054/    3B8A : (MACRO)             	ld2 R12,'O',sp,(0+6)
    3055/    3B96 : (MACRO)             	Ccall _setMACs
    3056/    3B99 :                     ;  copyIp(gPB + IP_DST_P, dst);
    3057/    3B99 : (MACRO)             	ldaD R12,_buffer+30
    3058/    3B9F : (MACRO)             	ld2 R13,'O',sp,(2+6)
    3059/    3BAB : (MACRO)             	Ccall _copyIp
    3060/    3BAE :                     ;  copyIp(gPB + IP_SRC_P, myip);
    3061/    3BAE : (MACRO)             	ldaD R12,_buffer+26
    3062/    3BB4 : (MACRO)             	ldaD R13,_myip
    3063/    3BBA : (MACRO)             	Ccall _copyIp
    3064/    3BBD :                     ;}
    3065/    3BBD :                     L419:
    3066/    3BBD : (MACRO)             	release 4
    3067/    3BC5 : (MACRO)             	Cretn
    3068/    3BC6 :                     
    3069/    3BC6 :                     _hexDump:
    3070/    3BC6 : (MACRO)             	reserve 12
    3071/    3BD0 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
    3072/    3BD8 : EE                  	sex	memaddr
    3073/    3BD9 : (MACRO)             	savmi r0
    3074/    3BDD : (MACRO)             	savmi r1
    3075/    3BE1 : (MACRO)             	savmi r7
    3076/    3BE5 : E2                  	sex sp
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 53 - 2/28/2013 15:08:33


    3077/    3BE6 : (MACRO)             	cpy2 r7,r12; function(2055) 1
    3078/    3BEA : (MACRO)             	cpy2 r1,r13; function(2054) 1
    3079/    3BEE :                     ;void hexDump(uint8_t *data, uint16_t len) {
    3080/    3BEE :                     ;  uint8_t cnt = 0;
    3081/    3BEE : (MACRO)             	ldaD R0,0
    3082/    3BF4 :                     ;  printf("dumping %d\n",len);
    3083/    3BF4 : (MACRO)             	ldaD R12,L423
    3084/    3BFA : (MACRO)             	cpy2 R13,R1
    3085/    3BFE : (MACRO)             	Ccall _printf
    3086/    3C01 :                     ;  for (i = 0; i < len; i++) {
    3087/    3C01 : (MACRO)             	ldaD R11,0
    3088/    3C07 : (MACRO)             	st2 R11,'O',sp,(-4+14)
    3089/    3C14 : C0 3C A9            	lbr L427
    3090/    3C17 :                     L424:
    3091/    3C17 :                     ;    putx(data[i]);
    3092/    3C17 : (MACRO)             	ld2 R11,'O',sp,(-4+14)
    3093/    3C23 : (MACRO)             	alu2 R11,R11,R7,add,adc
    3094/    3C2F : (MACRO)             	ld1 R12,'O',R11,0
    3095/    3C39 : (MACRO)             	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
    3096/    3C3C : (MACRO)             	Ccall _putx
    3097/    3C3F :                     ;    cnt++;
    3098/    3C3F : (MACRO)             	cpy1 R11,R0
    3099/    3C41 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3100/    3C44 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    3101/    3C4C : (MACRO)             	cpy1 R0,R11
    3102/    3C4E :                     ;    if (cnt == 8) {
    3103/    3C4E : (MACRO)             	cpy1 R11,R0
    3104/    3C50 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3105/    3C53 : (MACRO)             	jneU2I r11,8,L428; NE
    3106/    3C5F :                     ;      putc(' ');
    3107/    3C5F : (MACRO)             	ldaD R12,32
    3108/    3C65 : (MACRO)             	Ccall _putc
    3109/    3C68 :                     ;    }
    3110/    3C68 :                     L428:
    3111/    3C68 :                     ;    if (cnt == 16) {
    3112/    3C68 : (MACRO)             	cpy1 R11,R0
    3113/    3C6A : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3114/    3C6D : (MACRO)             	jneU2I r11,16,L430; NE
    3115/    3C79 :                     ;      printf("\n");
    3116/    3C79 : (MACRO)             	ldaD R12,L432
    3117/    3C7F : (MACRO)             	Ccall _printf
    3118/    3C82 :                     ;      cnt = 0;
    3119/    3C82 : (MACRO)             	ldaD R0,0
    3120/    3C88 :                     ;    }
    3121/    3C88 :                     L430:
    3122/    3C88 :                     ;  }
    3123/    3C88 :                     L425:
    3124/    3C88 :                     ;  for (i = 0; i < len; i++) {
    3125/    3C88 : (MACRO)             	ld2 R11,'O',sp,(-4+14)
    3126/    3C94 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
    3127/    3C9C : (MACRO)             	st2 R11,'O',sp,(-4+14)
    3128/    3CA9 :                     L427:
    3129/    3CA9 : (MACRO)             	ld2 R11,'O',sp,(-4+14)
    3130/    3CB5 : (MACRO)             	jcU2 r11,r1,lbnf,L424; LT=lbnf i.e. subtract B from A and jump if borrow 
    3131/    3CC2 :                     ;  if (cnt != 0) {
    3132/    3CC2 : (MACRO)             	cpy1 R11,R0
    3133/    3CC4 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
    3134/    3CC7 : (MACRO)             	jeqU2I r11,0,L433
    3135/    3CD3 :                     ;    printf("\n");
    3136/    3CD3 : (MACRO)             	ldaD R12,L432
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 54 - 2/28/2013 15:08:33


    3137/    3CD9 : (MACRO)             	Ccall _printf
    3138/    3CDC :                     ;  }
    3139/    3CDC :                     L433:
    3140/    3CDC :                     ;}
    3141/    3CDC :                     L422:
    3142/    3CDC : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
    3143/    3CE4 : (MACRO)             	rldmi r7,memaddr
    3144/    3CE8 : (MACRO)             	rldmi r1,memaddr
    3145/    3CEC : (MACRO)             	rldmi r0,memaddr
    3146/    3CF0 : (MACRO)             	release 12
    3147/    3CF8 : (MACRO)             	Cretn
    3148/    3CF9 :                     
    3149/    3CF9 :                     _copyIp:
    3150/    3CF9 : (MACRO)             	reserve 6
    3151/    3D03 : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    3152/    3D10 : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    3153/    3D1D :                     ;void copyIp (byte *dst, const byte *src) {
    3154/    3D1D :                     ;    memcpy(dst, src, 4);
    3155/    3D1D : (MACRO)             	ld2 R12,'O',sp,(0+8)
    3156/    3D29 : (MACRO)             	ld2 R13,'O',sp,(2+8)
    3157/    3D35 : (MACRO)             	ldaD R11,4
    3158/    3D3B : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    3159/    3D48 : (MACRO)             	Ccall _memcpy
    3160/    3D4B :                     ;}
    3161/    3D4B :                     L435:
    3162/    3D4B : (MACRO)             	release 6
    3163/    3D53 : (MACRO)             	Cretn
    3164/    3D54 :                     
    3165/    3D54 :                     _copyMac:
    3166/    3D54 : (MACRO)             	reserve 6
    3167/    3D5E : (MACRO)             	st2 r12,'O',sp,(8); flag1 
    3168/    3D6B : (MACRO)             	st2 r13,'O',sp,(10); flag1 
    3169/    3D78 :                     ;void copyMac (byte *dst, const byte *src) {
    3170/    3D78 :                     ;    memcpy(dst, src, 6);
    3171/    3D78 : (MACRO)             	ld2 R12,'O',sp,(0+8)
    3172/    3D84 : (MACRO)             	ld2 R13,'O',sp,(2+8)
    3173/    3D90 : (MACRO)             	ldaD R11,6
    3174/    3D96 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
    3175/    3DA3 : (MACRO)             	Ccall _memcpy
    3176/    3DA6 :                     ;}
    3177/    3DA6 :                     L436:
    3178/    3DA6 : (MACRO)             	release 6
    3179/    3DAE : (MACRO)             	Cretn
    3180/    3DAF :                     
    3181/    3DAF :                     _info_data_len:
    3182/    3DAF : 00 00               	db 2 dup (0); zerofill global
    3183/    3DB1 :                     _waitgwmac:
    3184/    3DB1 : 00                  	db 1 dup (0); zerofill global
    3185/    3DB2 :                     _gwmacaddr:
    3186/    3DB2 : 00 00 00 00 00 00   	db 6 dup (0); zerofill global
    3187/    3DB8 :                     _icmp_cb:
    3188/    3DB8 : 00 00               	db 2 dup (0); zerofill global
    3189/    3DBA :                     _client_hoststr:
    3190/    3DBA : 00 00               	db 2 dup (0); zerofill global
    3191/    3DBC :                     _client_urlbuf_var:
    3192/    3DBC : 00 00               	db 2 dup (0); zerofill global
    3193/    3DBE :                     _client_urlbuf:
    3194/    3DBE : 00 00               	db 2 dup (0); zerofill global
    3195/    3DC0 :                     _client_postval:
    3196/    3DC0 : 00 00               	db 2 dup (0); zerofill global
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 55 - 2/28/2013 15:08:33


    3197/    3DC2 :                     _client_additionalheaderline:
    3198/    3DC2 : 00 00               	db 2 dup (0); zerofill global
    3199/    3DC4 :                     _client_browser_cb:
    3200/    3DC4 : 00 00               	db 2 dup (0); zerofill global
    3201/    3DC6 :                     _www_fd:
    3202/    3DC6 : 00                  	db 1 dup (0); zerofill global
    3203/    3DC7 :                     _client_tcp_datafill_cb:
    3204/    3DC7 : 00 00               	db 2 dup (0); zerofill global
    3205/    3DC9 :                     _client_tcp_result_cb:
    3206/    3DC9 : 00 00               	db 2 dup (0); zerofill global
    3207/    3DCB :                     _tcp_client_port_l:
    3208/    3DCB : 00                  	db 1 dup (0); zerofill global
    3209/    3DCC :                     _tcp_client_port_h:
    3210/    3DCC : 00                  	db 1 dup (0); zerofill global
    3211/    3DCD :                     _tcp_client_state:
    3212/    3DCD : 00                  	db 1 dup (0); zerofill global
    3213/    3DCE :                     _tcp_fd:
    3214/    3DCE : 00                  	db 1 dup (0); zerofill global
    3215/    3DCF :                     _buffer:
    3216/    3DCF : 00 00 00 00 00 00   	db 700 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 56 - 2/28/2013 15:08:33


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 57 - 2/28/2013 15:08:33


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 
    3217/    408B :                     _hisip:
    3218/    408B : 00 00 00 00         	db 4 dup (0); zerofill global
    3219/    408F :                     _dnsip:
    3220/    408F : 00 00 00 00         	db 4 dup (0); zerofill global
    3221/    4093 :                     _dhcpip:
    3222/    4093 : 00 00 00 00         	db 4 dup (0); zerofill global
    3223/    4097 :                     _gwip:
    3224/    4097 : 00 00 00 00         	db 4 dup (0); zerofill global
    3225/    409B :                     _mymask:
    3226/    409B : 00 00 00 00         	db 4 dup (0); zerofill global
    3227/    409F :                     _gNextPacketPtr:
    3228/    409F : 00 00               	db 2 dup (0); zerofill global
    3229/    40A1 :                     _Enc28j60Bank:
    3230/    40A1 : 00                  	db 1 dup (0); zerofill global
    3231/    40A2 :                     _bufferSize:
    3232/    40A2 : 00 00               	db 2 dup (0); zerofill global
    3233/    40A4 :                     L432:
    3234/    40A4 : 0A                  	db 10
    3235/    40A5 : 00                  	db 0
    3236/    40A6 :                     L423:
    3237/    40A6 : 64                  	db 100
    3238/    40A7 : 75                  	db 117
    3239/    40A8 : 6D                  	db 109
    3240/    40A9 : 70                  	db 112
    3241/    40AA : 69                  	db 105
    3242/    40AB : 6E                  	db 110
    3243/    40AC : 67                  	db 103
    3244/    40AD : 20                  	db 32
    3245/    40AE : 25                  	db 37
    3246/    40AF : 64                  	db 100
    3247/    40B0 : 0A                  	db 10
    3248/    40B1 : 00                  	db 0
    3249/    40B2 :                     L76:
    3250/    40B2 : 65                  	db 101
    3251/    40B3 : 78                  	db 120
    3252/    40B4 : 69                  	db 105
    3253/    40B5 : 74                  	db 116
    3254/    40B6 : 20                  	db 32
    3255/    40B7 : 25                  	db 37
    3256/    40B8 : 64                  	db 100
    3257/    40B9 : 0A                  	db 10
    3258/    40BA : 00                  	db 0
    3259/    40BB :                     L15:
    3260/    40BB : 65                  	db 101
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 58 - 2/28/2013 15:08:33


    3261/    40BC : 6E                  	db 110
    3262/    40BD : 63                  	db 99
    3263/    40BE : 6D                  	db 109
    3264/    40BF : 75                  	db 117
    3265/    40C0 : 6C                  	db 108
    3266/    40C1 : 65                  	db 101
    3267/    40C2 : 20                  	db 32
    3268/    40C3 : 2D                  	db 45
    3269/    40C4 : 20                  	db 32
    3270/    40C5 : 77                  	db 119
    3271/    40C6 : 61                  	db 97
    3272/    40C7 : 74                  	db 116
    3273/    40C8 : 63                  	db 99
    3274/    40C9 : 68                  	db 104
    3275/    40CA : 20                  	db 32
    3276/    40CB : 6D                  	db 109
    3277/    40CC : 79                  	db 121
    3278/    40CD : 20                  	db 32
    3279/    40CE : 51                  	db 81
    3280/    40CF : 21                  	db 33
    3281/    40D0 : 0A                  	db 10
    3282/    40D1 : 00                  	db 0
    3283/    40D2 :                     L11:
    3284/    40D2 : 61                  	db 97
    3285/    40D3 : 6E                  	db 110
    3286/    40D4 : 64                  	db 100
    3287/    40D5 : 20                  	db 32
    3288/    40D6 : 77                  	db 119
    3289/    40D7 : 65                  	db 101
    3290/    40D8 : 27                  	db 39
    3291/    40D9 : 72                  	db 114
    3292/    40DA : 65                  	db 101
    3293/    40DB : 20                  	db 32
    3294/    40DC : 64                  	db 100
    3295/    40DD : 6F                  	db 111
    3296/    40DE : 6E                  	db 110
    3297/    40DF : 65                  	db 101
    3298/    40E0 : 0A                  	db 10
    3299/    40E1 : 00                  	db 0
    3300/    40E2 :                     L10:
    3301/    40E2 : 4D                  	db 77
    3302/    40E3 : 41                  	db 65
    3303/    40E4 : 43                  	db 67
    3304/    40E5 : 74                  	db 116
    3305/    40E6 : 61                  	db 97
    3306/    40E7 : 69                  	db 105
    3307/    40E8 : 6C                  	db 108
    3308/    40E9 : 20                  	db 32
    3309/    40EA : 72                  	db 114
    3310/    40EB : 65                  	db 101
    3311/    40EC : 61                  	db 97
    3312/    40ED : 64                  	db 100
    3313/    40EE : 62                  	db 98
    3314/    40EF : 61                  	db 97
    3315/    40F0 : 63                  	db 99
    3316/    40F1 : 6B                  	db 107
    3317/    40F2 : 3A                  	db 58
    3318/    40F3 : 20                  	db 32
    3319/    40F4 : 25                  	db 37
    3320/    40F5 : 78                  	db 120
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 59 - 2/28/2013 15:08:33


    3321/    40F6 : 3A                  	db 58
    3322/    40F7 : 25                  	db 37
    3323/    40F8 : 78                  	db 120
    3324/    40F9 : 0A                  	db 10
    3325/    40FA : 00                  	db 0
    3326/    40FB :                     L9:
    3327/    40FB : 72                  	db 114
    3328/    40FC : 65                  	db 101
    3329/    40FD : 61                  	db 97
    3330/    40FE : 64                  	db 100
    3331/    40FF : 52                  	db 82
    3332/    4100 : 65                  	db 101
    3333/    4101 : 67                  	db 103
    3334/    4102 : 42                  	db 66
    3335/    4103 : 79                  	db 121
    3336/    4104 : 74                  	db 116
    3337/    4105 : 65                  	db 101
    3338/    4106 : 28                  	db 40
    3339/    4107 : 45                  	db 69
    3340/    4108 : 53                  	db 83
    3341/    4109 : 54                  	db 84
    3342/    410A : 41                  	db 65
    3343/    410B : 54                  	db 84
    3344/    410C : 29                  	db 41
    3345/    410D : 20                  	db 32
    3346/    410E : 72                  	db 114
    3347/    410F : 65                  	db 101
    3348/    4110 : 74                  	db 116
    3349/    4111 : 75                  	db 117
    3350/    4112 : 72                  	db 114
    3351/    4113 : 6E                  	db 110
    3352/    4114 : 73                  	db 115
    3353/    4115 : 3A                  	db 58
    3354/    4116 : 20                  	db 32
    3355/    4117 : 25                  	db 37
    3356/    4118 : 78                  	db 120
    3357/    4119 : 0A                  	db 10
    3358/    411A : 00                  	db 0
    3359/    411B :                     L8:
    3360/    411B : 72                  	db 114
    3361/    411C : 65                  	db 101
    3362/    411D : 61                  	db 97
    3363/    411E : 64                  	db 100
    3364/    411F : 52                  	db 82
    3365/    4120 : 65                  	db 101
    3366/    4121 : 67                  	db 103
    3367/    4122 : 42                  	db 66
    3368/    4123 : 79                  	db 121
    3369/    4124 : 74                  	db 116
    3370/    4125 : 65                  	db 101
    3371/    4126 : 28                  	db 40
    3372/    4127 : 45                  	db 69
    3373/    4128 : 52                  	db 82
    3374/    4129 : 45                  	db 69
    3375/    412A : 56                  	db 86
    3376/    412B : 49                  	db 73
    3377/    412C : 44                  	db 68
    3378/    412D : 29                  	db 41
    3379/    412E : 20                  	db 32
    3380/    412F : 72                  	db 114
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 60 - 2/28/2013 15:08:33


    3381/    4130 : 65                  	db 101
    3382/    4131 : 74                  	db 116
    3383/    4132 : 75                  	db 117
    3384/    4133 : 72                  	db 114
    3385/    4134 : 6E                  	db 110
    3386/    4135 : 73                  	db 115
    3387/    4136 : 3A                  	db 58
    3388/    4137 : 20                  	db 32
    3389/    4138 : 25                  	db 37
    3390/    4139 : 78                  	db 120
    3391/    413A : 0A                  	db 10
    3392/    413B : 00                  	db 0
    3393/    413C :                     L7:
    3394/    413C : 72                  	db 114
    3395/    413D : 65                  	db 101
    3396/    413E : 61                  	db 97
    3397/    413F : 64                  	db 100
    3398/    4140 : 52                  	db 82
    3399/    4141 : 65                  	db 101
    3400/    4142 : 67                  	db 103
    3401/    4143 : 42                  	db 66
    3402/    4144 : 79                  	db 121
    3403/    4145 : 74                  	db 116
    3404/    4146 : 65                  	db 101
    3405/    4147 : 28                  	db 40
    3406/    4148 : 45                  	db 69
    3407/    4149 : 43                  	db 67
    3408/    414A : 4F                  	db 79
    3409/    414B : 4E                  	db 78
    3410/    414C : 31                  	db 49
    3411/    414D : 29                  	db 41
    3412/    414E : 20                  	db 32
    3413/    414F : 72                  	db 114
    3414/    4150 : 65                  	db 101
    3415/    4151 : 74                  	db 116
    3416/    4152 : 75                  	db 117
    3417/    4153 : 72                  	db 114
    3418/    4154 : 6E                  	db 110
    3419/    4155 : 73                  	db 115
    3420/    4156 : 3A                  	db 58
    3421/    4157 : 20                  	db 32
    3422/    4158 : 25                  	db 37
    3423/    4159 : 78                  	db 120
    3424/    415A : 0A                  	db 10
    3425/    415B : 00                  	db 0
    3426/    415C :                     L6:
    3427/    415C : 46                  	db 70
    3428/    415D : 61                  	db 97
    3429/    415E : 69                  	db 105
    3430/    415F : 6C                  	db 108
    3431/    4160 : 65                  	db 101
    3432/    4161 : 64                  	db 100
    3433/    4162 : 20                  	db 32
    3434/    4163 : 74                  	db 116
    3435/    4164 : 6F                  	db 111
    3436/    4165 : 20                  	db 32
    3437/    4166 : 61                  	db 97
    3438/    4167 : 63                  	db 99
    3439/    4168 : 63                  	db 99
    3440/    4169 : 65                  	db 101
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 61 - 2/28/2013 15:08:33


    3441/    416A : 73                  	db 115
    3442/    416B : 73                  	db 115
    3443/    416C : 20                  	db 32
    3444/    416D : 45                  	db 69
    3445/    416E : 74                  	db 116
    3446/    416F : 68                  	db 104
    3447/    4170 : 65                  	db 101
    3448/    4171 : 72                  	db 114
    3449/    4172 : 6E                  	db 110
    3450/    4173 : 65                  	db 101
    3451/    4174 : 74                  	db 116
    3452/    4175 : 20                  	db 32
    3453/    4176 : 63                  	db 99
    3454/    4177 : 6F                  	db 111
    3455/    4178 : 6E                  	db 110
    3456/    4179 : 74                  	db 116
    3457/    417A : 72                  	db 114
    3458/    417B : 6F                  	db 111
    3459/    417C : 6C                  	db 108
    3460/    417D : 6C                  	db 108
    3461/    417E : 65                  	db 101
    3462/    417F : 72                  	db 114
    3463/    4180 : 0A                  	db 10
    3464/    4181 : 00                  	db 0
    3465/    4182 :                     L3:
    3466/    4182 : 4D                  	db 77
    3467/    4183 : 41                  	db 65
    3468/    4184 : 43                  	db 67
    3469/    4185 : 20                  	db 32
    3470/    4186 : 26                  	db 38
    3471/    4187 : 20                  	db 32
    3472/    4188 : 49                  	db 73
    3473/    4189 : 50                  	db 80
    3474/    418A : 20                  	db 32
    3475/    418B : 00                  	db 0
    3476/    418C :                     L2:
    3477/    418C : 0A                  	db 10
    3478/    418D : 45                  	db 69
    3479/    418E : 6E                  	db 110
    3480/    418F : 63                  	db 99
    3481/    4190 : 32                  	db 50
    3482/    4191 : 38                  	db 56
    3483/    4192 : 6A                  	db 106
    3484/    4193 : 36                  	db 54
    3485/    4194 : 30                  	db 48
    3486/    4195 : 20                  	db 32
    3487/    4196 : 66                  	db 102
    3488/    4197 : 69                  	db 105
    3489/    4198 : 72                  	db 114
    3490/    4199 : 73                  	db 115
    3491/    419A : 74                  	db 116
    3492/    419B : 20                  	db 32
    3493/    419C : 74                  	db 116
    3494/    419D : 72                  	db 114
    3495/    419E : 79                  	db 121
    3496/    419F : 0A                  	db 10
    3497/    41A0 : 00                  	db 0
    3498/    41A1 :                     	include lcc1802EpiloNG.inc
(1)    1/    41A1 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    41A1 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 62 - 2/28/2013 15:08:33


(1)    3/    41A1 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    41A1 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    41A1 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    41A1 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    41A1 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    41A1 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    41A1 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    41A1 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    41A1 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    41A1 : =EH                 rwork	equ	memAddr	;work register
(1)   13/    41A1 :                     lcc1802init:	
(1)   14/    41A1 : (MACRO)             	ldiReg	RCALL,_call
(1)   15/    41A7 : (MACRO)             	ldiReg	RRET,_return
(1)   16/    41AD : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   17/    41B3 : E2                  	sex	SP
(1)   18/    41B4 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   19/    41BA : D3                  	sep	RPC
(1)   20/    41BB :                     $$_00000:
(1)   21/    41BB : (MACRO)             	Ccall _main	;call the main routine
(1)   22/    41BE : C0 41 BE            $$_die:	lbr	$$_die		;loop here when main returns
(1)   23/    41C1 : DE AD               	db	0xde,0xad
(1)   24/    41C3 :                     
(1)   25/    41C3 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   26/    41C3 :                     _setqOn:
(1)   27/    41C3 : 7B                  	seq
(1)   28/    41C4 : (MACRO)             	Cretn
(1)   29/    41C5 :                     _setqOff:
(1)   30/    41C5 : 7A                  	req
(1)   31/    41C6 : (MACRO)             	Cretn
(1)   32/    41C7 :                     
(1)   33/    41C7 :                     _modU2:	;16 bit unsigned remainder
(1)   34/    41C7 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   35/    41C7 : (MACRO)                 Ccall _divU2
(1)   36/    41CA : 8D                      glo regArg2
(1)   37/    41CB : AF                      plo retVal
(1)   38/    41CC : 9D                      ghi regArg2
(1)   39/    41CD : BF                      phi retVal
(1)   40/    41CE : (MACRO)                 Cretn
(1)   41/    41CF :                         
(1)   42/    41CF :                     _modI2:	;16 bit signed remainder
(1)   43/    41CF :                     	; just calls the 16 bit division then puts remainder into return value
(1)   44/    41CF : (MACRO)                 Ccall _divI2
(1)   45/    41D2 : 8D                      glo regArg2
(1)   46/    41D3 : AF                      plo retVal
(1)   47/    41D4 : 9D                      ghi regArg2
(1)   48/    41D5 : BF                      phi retVal
(1)   49/    41D6 : (MACRO)                 Cretn
(1)   50/    41D7 :                     
(1)   51/    41D7 :                     _out4:	
(1)   52/    41D7 : 8C                  	glo	regArg1
(1)   53/    41D8 : 22                  	dec	sp
(1)   54/    41D9 : 52                  	str	sp
(1)   55/    41DA : 64                  	out	4
(1)   56/    41DB : (MACRO)             	Cretn
(1)   57/    41DC :                     
(1)   58/    41DC :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   59/    41DC :                     	align 256
(1)   60/    4200 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   61/    4200 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   62/    4200 : D3                  	sep     R3 ;go to subroutine
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 63 - 2/28/2013 15:08:33


(1)   63/    4201 : E2                  _call	sex	SP ;make sure X=SP
(1)   64/    4202 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   65/    4203 : 22                  	dec	sp
(1)   66/    4204 : 73                  	stxd
(1)   67/    4205 : 86                  	glo	retAddr
(1)   68/    4206 : 52                  	str	sp	
(1)   69/    4207 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   70/    4208 : A6                  	plo	retAddr
(1)   71/    4209 : 93                  	ghi	RPC
(1)   72/    420A : B6                  	phi	retAddr
(1)   73/    420B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   74/    420C : B3                  	phi	RPC
(1)   75/    420D : 46                  	lda	retAddr
(1)   76/    420E : A3                  	plo	RPC
(1)   77/    420F : 30 00               	br	_call-1
(1)   78/    4211 :                     
(1)   79/    4211 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   80/    4211 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   81/    4211 : D3                  	sep	RPC	;return to the original program
(1)   82/    4212 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   83/    4213 : A3                  	plo	RPC
(1)   84/    4214 : 96                  	ghi	retAddr
(1)   85/    4215 : B3                  	phi	RPC
(1)   86/    4216 : 42                  	lda	SP	;pick up old return address
(1)   87/    4217 : A6                  	plo	retAddr
(1)   88/    4218 : 42                  	lda	SP
(1)   89/    4219 : B6                  	phi	retAddr
(1)   90/    421A : 30 11               	br	_return-1
(1)   91/    421C :                     
(1)   92/    421C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   93/    421C : F8 24               	ldi	(100-15-10-2)/2
(1)   94/    421E : FF 01               $$mslp:	smi	1
(1)   95/    4220 : 3A 1E               	bnz	$$mslp
(1)   96/    4222 : (MACRO)             	Cretn
(1)   97/    4223 :                     
(1)   98/    4223 :                     
(1)   99/    4223 :                     	
(1)  100/    4223 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  101/    4223 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  102/    4223 :                     _mulu2:		
(1)  103/    4223 : 22                      dec sp
(1)  104/    4224 : F8 10                   ldi 16
(1)  105/    4226 : AE                      plo	rwork	;bit count
(1)  106/    4227 : F8 00                   ldi 0
(1)  107/    4229 : BF                      phi	retVal	;quotient
(1)  108/    422A : AF                      plo retVal
(1)  109/    422B :                     $$MultLoop16_16:
(1)  110/    422B : 9C                      ghi regArg1
(1)  111/    422C : F6                      shr
(1)  112/    422D : BC                      phi regArg1
(1)  113/    422E : 8C                      glo regArg1
(1)  114/    422F : 76                      shrc
(1)  115/    4230 : AC                      plo regArg1
(1)  116/    4231 : 3B 3D                   bnf $$MultSkip16_16
(1)  117/    4233 : 8D                      glo regArg2
(1)  118/    4234 : 52                      str sp
(1)  119/    4235 : 8F                      glo retVal
(1)  120/    4236 : F4                      add 
(1)  121/    4237 : AF                      plo retVal
(1)  122/    4238 : 9D                      ghi regArg2
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 64 - 2/28/2013 15:08:33


(1)  123/    4239 : 52                      str sp
(1)  124/    423A : 9F                      ghi retVal
(1)  125/    423B : 74                      adc
(1)  126/    423C : BF                      phi retVal
(1)  127/    423D :                     $$MultSkip16_16:
(1)  128/    423D : 8D                      glo regArg2
(1)  129/    423E : FE                      shl
(1)  130/    423F : AD                      plo regArg2
(1)  131/    4240 : 9D                      ghi regArg2
(1)  132/    4241 : 7E                      shlc
(1)  133/    4242 : BD                      phi regArg2
(1)  134/    4243 : 2E                      dec rwork
(1)  135/    4244 : 8E                      glo rwork
(1)  136/    4245 : 3A 2B                   bnz $$MultLoop16_16
(1)  137/    4247 : 12                      inc sp
(1)  138/    4248 : D5                      sep 5
(1)  139/    4249 :                     
(1)  140/    4249 :                     
(1)  141/    4249 :                     _divU2:
(1)  142/    4249 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  143/    4249 :                     	; This is really an unsigned 23 bit divide
(1)  144/    4249 :                     	;thanks to Ted Rossin
(1)  145/    4249 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  146/    4249 : 22                      dec sp
(1)  147/    424A : F8 10                   ldi 16
(1)  148/    424C : AE                      plo rwork
(1)  149/    424D : F8 00                   ldi 0
(1)  150/    424F : BF                      phi retVal
(1)  151/    4250 : AF                      plo retVal
(1)  152/    4251 : BE                      phi rwork
(1)  153/    4252 :                     $$DivLoop16_16:
(1)  154/    4252 : 8C                      glo regArg1
(1)  155/    4253 : FE                      shl
(1)  156/    4254 : AC                      plo regArg1
(1)  157/    4255 : 9C                      ghi regArg1
(1)  158/    4256 : 7E                      shlc
(1)  159/    4257 : BC                      phi regArg1
(1)  160/    4258 : 8F                      glo retVal
(1)  161/    4259 : 7E                      shlc
(1)  162/    425A : AF                      plo retVal
(1)  163/    425B : 9F                      ghi retVal
(1)  164/    425C : 7E                      shlc
(1)  165/    425D : BF                      phi retVal
(1)  166/    425E : 9E                      ghi rwork
(1)  167/    425F : 7E                      shlc
(1)  168/    4260 : BE                      phi rwork
(1)  169/    4261 : 3B 73                   bnf $$DivSub16_16
(1)  170/    4263 : 8D                      glo regArg2
(1)  171/    4264 : 52                      str sp
(1)  172/    4265 : 8F                      glo retVal
(1)  173/    4266 : F4                      add 
(1)  174/    4267 : AF                      plo retVal
(1)  175/    4268 : 9D                      ghi regArg2
(1)  176/    4269 : 52                      str sp
(1)  177/    426A : 9F                      ghi retVal
(1)  178/    426B : 74                      adc 
(1)  179/    426C : BF                      phi retVal
(1)  180/    426D : 9E                      ghi rwork
(1)  181/    426E : 7C 00                   adci 0
(1)  182/    4270 : BE                      phi rwork
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 65 - 2/28/2013 15:08:33


(1)  183/    4271 : 30 81                   br $$DivSkip16_16
(1)  184/    4273 :                     $$DivSub16_16:
(1)  185/    4273 : 8D                      glo regArg2
(1)  186/    4274 : 52                      str sp
(1)  187/    4275 : 8F                      glo retVal
(1)  188/    4276 : F7                      sm
(1)  189/    4277 : AF                      plo retVal
(1)  190/    4278 : 9D                      ghi regArg2
(1)  191/    4279 : 52                      str sp
(1)  192/    427A : 9F                      ghi retVal
(1)  193/    427B : 77                      smb 
(1)  194/    427C : BF                      phi retVal
(1)  195/    427D : 9E                      ghi rwork
(1)  196/    427E : 7F 00                   smbi 0
(1)  197/    4280 : BE                      phi rwork 
(1)  198/    4281 :                     $$DivSkip16_16:
(1)  199/    4281 : FE                      shl
(1)  200/    4282 : 33 88                   bdf $$DivSkipClear16_16
(1)  201/    4284 :                     $$DivSetBit16_16:
(1)  202/    4284 : 8C                      glo regArg1
(1)  203/    4285 : F9 01                   ori  0x01
(1)  204/    4287 : AC                      plo regArg1
(1)  205/    4288 :                     $$DivSkipClear16_16:
(1)  206/    4288 : 2E                      dec rwork
(1)  207/    4289 : 8E                      glo rwork
(1)  208/    428A : 3A 52                   bnz $$DivLoop16_16
(1)  209/    428C : 9E                      ghi rwork
(1)  210/    428D : FE                      shl
(1)  211/    428E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  212/    4290 : 8D                      glo regArg2
(1)  213/    4291 : 52                      str sp
(1)  214/    4292 : 8F                      glo retVal
(1)  215/    4293 : F4                      add
(1)  216/    4294 : AF                      plo retVal
(1)  217/    4295 : 9D                      ghi regArg2
(1)  218/    4296 : 52                      str sp
(1)  219/    4297 : 9F                      ghi retVal
(1)  220/    4298 : 74                      adc
(1)  221/    4299 : BF                      phi retVal
(1)  222/    429A :                     $$DivSkipFinalAdd16_16:
(1)  223/    429A : 12                      inc sp
(1)  224/    429B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  225/    429B : 8F                      glo retVal
(1)  226/    429C : AD                      plo regArg2
(1)  227/    429D : 9F                      ghi retVal
(1)  228/    429E : BD                      phi regArg2
(1)  229/    429F : 8C                      glo regArg1
(1)  230/    42A0 : AF                      plo retVal
(1)  231/    42A1 : 9C                      ghi regArg1
(1)  232/    42A2 : BF                      phi retVal
(1)  233/    42A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  234/    42A3 : D5                      sep 5
(1)  235/    42A4 :                     
(1)  236/    42A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  237/    42A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  238/    42A4 :                     _divI2:
(1)  239/    42A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  240/    42A4 : 22                      dec	sp	;leave a work area available
(1)  241/    42A5 : 9C                      ghi regArg1
(1)  242/    42A6 : 52                      str sp	;save the sign of the 1st arg
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 66 - 2/28/2013 15:08:33


(1)  243/    42A7 : FE                      shl
(1)  244/    42A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  245/    42AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  246/    42B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  247/    42B3 : 9D                      ghi regArg2
(1)  248/    42B4 : F3                      xor	
(1)  249/    42B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  250/    42B6 : 9D                      ghi regArg2
(1)  251/    42B7 : FE                      shl
(1)  252/    42B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  253/    42BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  254/    42C3 :                     $$pos2: ; both args now +v
(1)  255/    42C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  256/    42C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  257/    42C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  258/    42C7 : FE                      shl
(1)  259/    42C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  260/    42CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  261/    42D3 :                     $$done:
(1)  262/    42D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  263/    42D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  264/    42D4 :                     
(1)  265/    42D4 :                     
(1)  266/    42D4 :                     	align 256    ;32 bit operations follow
(1)  267/    4300 :                     _divu4:
(1)  268/    4300 :                     ;This is an unsigned 32 bit restoring division
(1)  269/    4300 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  270/    4300 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  271/    4300 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  272/    4300 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  273/    4300 :                     
(1)  274/    4300 : F8 20               	ldi 32		;set loop count
(1)  275/    4302 : AE                  	plo memaddr	;in temp register
(1)  276/    4303 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  277/    430F :                     $$loop:
(1)  278/    430F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  279/    431B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  280/    4327 :                     
(1)  281/    4327 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  282/    433D :                     
(1)  283/    433D : FA 80               	ani 0x80	;check the top bit
(1)  284/    433F : 32 5D               	bz $$norestore	;if it's 0
(1)  285/    4341 : 89                  		glo RL8
(1)  286/    4342 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  287/    4344 : A9                  		plo RL8
(1)  288/    4345 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  289/    435B : 30 61               	br $$endlp 	;else
(1)  290/    435D :                     $$norestore:
(1)  291/    435D : 89                  		glo RL8
(1)  292/    435E : F9 01               		ori 1	;turn on the bottom bit
(1)  293/    4360 : A9                  		plo RL8
(1)  294/    4361 :                     	;end if
(1)  295/    4361 :                     $$endlp:
(1)  296/    4361 : 2E                  	dec memaddr	;check the cycle count
(1)  297/    4362 : 8E                  	glo memaddr
(1)  298/    4363 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  299/    4365 :                     	
(1)  300/    4365 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  301/    4366 :                     		
(1)  302/    4366 :                     
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 67 - 2/28/2013 15:08:33


(1)  303/    4366 :                     _mulu4:
(1)  304/    4366 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  305/    4366 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  306/    4366 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  307/    4366 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  308/    4366 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  309/    4366 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  310/    4366 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  311/    4366 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  312/    4366 :                     	;for 10 we subtract and shift
(1)  313/    4366 :                     	;for 00 and 11 we just shift
(1)  314/    4366 :                     
(1)  315/    4366 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  316/    4372 : F8 20                   ldi 32
(1)  317/    4374 : AE                      plo memaddr		;cycle count
(1)  318/    4375 : FC 00                   adi 0		;clear df
(1)  319/    4377 :                     $$mloop:
(1)  320/    4377 : 89                      glo RL8
(1)  321/    4378 : FA 01                   ani 1		;isolate bottom bit of result
(1)  322/    437A : 3B 96                   bnf	$$check_sub	;
(1)  323/    437C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  324/    437E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  325/    437E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  326/    4394 : 30 AE                   br $$shift
(1)  327/    4396 :                     $$check_sub:
(1)  328/    4396 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  329/    4398 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  330/    4398 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  331/    43AE :                     $$shift:
(1)  332/    43AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  333/    43BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  334/    43C8 :                     
(1)  335/    43C8 : 2E                      dec memaddr		;cycle count
(1)  336/    43C9 : 8E                      glo memaddr
(1)  337/    43CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  338/    43CC :                         
(1)  339/    43CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  340/    43CD :                     
(1)  341/    43CD :                     	align 256
(1)  342/    4400 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  343/    4400 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  344/    4400 :                     _divI4:
(1)  345/    4400 : 22                      dec	sp	;leave a work area available
(1)  346/    4401 : 98                      ghi RL8-1	;get the top of the dividend
(1)  347/    4402 : 52                      str sp	;save the sign of the 1st arg
(1)  348/    4403 : FE                      shl
(1)  349/    4404 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  350/    4406 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  351/    4426 :                     $$pos1: ;1st is now +v, check 2nd
(1)  352/    4426 : 9A                      ghi RL10-1
(1)  353/    4427 : F3                      xor	
(1)  354/    4428 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  355/    4429 : 9A                      ghi RL10-1
(1)  356/    442A : FE                      shl
(1)  357/    442B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  358/    442D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  359/    444D :                     $$pos2: ; both args now +v
(1)  360/    444D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  361/    4450 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  362/    4450 : 42                      lda	sp ;get back the sign bits and restore SP
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 68 - 2/28/2013 15:08:33


(1)  363/    4451 : FE                      shl
(1)  364/    4452 : 3B 74                   bnf $$done ;if the signs were different
(1)  365/    4454 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  366/    4474 :                     $$done:
(1)  367/    4474 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  368/    4475 :                     
(1)  369/    4475 :                     _dubdabx:	
(1)  370/    4475 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  371/    4475 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  372/    4475 :                     ;long interger is passed in rp1p2
(1)  373/    4475 :                     ;buffer pointer is passed at sp+2+4
(1)  374/    4475 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  375/    4475 :                     ;r8-11 are used as temps
(1)  376/    4475 :                     ;r8 is the working pointer
(1)  377/    4475 :                     ;r9.0 is bit count(32)
(1)  378/    4475 :                     ;r10.0 is digit count
(1)  379/    4475 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  380/    4481 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  381/    4485 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  382/    4487 : A9                  	plo r9
(1)  383/    4488 :                     $$clrlp:	;clear the passed buffer
(1)  384/    4488 : F8 00               	ldi 0	
(1)  385/    448A : 58                  	str r8	;clear a byte
(1)  386/    448B : 18                  	inc r8
(1)  387/    448C : 29                  	dec r9
(1)  388/    448D : 89                  	glo r9	;check the count
(1)  389/    448E : 3A 88               	bnz $$clrlp ;back for more
(1)  390/    4490 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  391/    4494 :                     
(1)  392/    4494 : F8 20               	ldi 32	;bit count
(1)  393/    4496 : AF                  	plo r15
(1)  394/    4497 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  395/    4497 :                     $$cktop:
(1)  396/    4497 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  397/    4498 : FE                  	shl		;check for a 1
(1)  398/    4499 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  399/    449B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  400/    44A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  401/    44A8 : 8F                  	glo r15
(1)  402/    44A9 : 3A 97               	bnz $$cktop	;
(1)  403/    44AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  404/    44AC :                     $$bitloop:
(1)  405/    44AC : F8 0A               	ldi 10	;digit count
(1)  406/    44AE : A9                  	plo r9
(1)  407/    44AF :                     $$dcklp:
(1)  408/    44AF : 08                  	ldn r8 	;pick up a digit
(1)  409/    44B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  410/    44B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  411/    44B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  412/    44B6 : 58                  	str r8	;put it back
(1)  413/    44B7 :                     $$dnoadd:
(1)  414/    44B7 : 18                  	inc r8
(1)  415/    44B8 : 29                  	dec r9	;decrement digit count
(1)  416/    44B9 : 89                  	glo r9
(1)  417/    44BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  418/    44BC :                     	
(1)  419/    44BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  420/    44C8 :                     	
(1)  421/    44C8 : F8 0A               	ldi 10	;load the digit count again
(1)  422/    44CA : A9                  	plo r9
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(lcc1802EpiloNG.inc) - page 69 - 2/28/2013 15:08:33


(1)  423/    44CB :                     ;r8 is now just past the units location and ready to walk back
(1)  424/    44CB :                     $$dshlp:
(1)  425/    44CB : 28                  	dec r8	;walk back from 0's position
(1)  426/    44CC : 08                  	ldn r8	;get the digit back
(1)  427/    44CD : 7E                  	shlc	;continue the shift
(1)  428/    44CE : BF                  	phi r15 ;save it for the carry test
(1)  429/    44CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  430/    44D1 : 58                  	str r8	;put the digit back
(1)  431/    44D2 : 9F                  	ghi r15	;now test for carry
(1)  432/    44D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  433/    44D5 : 29                  	dec r9	;decrement the digit count
(1)  434/    44D6 : 89                  	glo r9
(1)  435/    44D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  436/    44D9 :                     	
(1)  437/    44D9 : 2F                  	dec r15
(1)  438/    44DA : 8F                  	glo r15
(1)  439/    44DB : 3A AC               	bnz $$bitloop
(1)  440/    44DD :                     	
(1)  441/    44DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  442/    44E1 : F8 0A               	ldi 10		;digit count again
(1)  443/    44E3 : A9                  	plo r9
(1)  444/    44E4 :                     $$upnxt:
(1)  445/    44E4 : 08                  	ldn r8		;get digit
(1)  446/    44E5 : F9 30               	ori 0x30	;make ascii
(1)  447/    44E7 : 58                  	str r8		;put it back
(1)  448/    44E8 : 18                  	inc r8		;next digit
(1)  449/    44E9 : 29                  	dec r9		;counter
(1)  450/    44EA : 89                  	glo r9
(1)  451/    44EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  452/    44ED :                     	
(1)  453/    44ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  454/    44EF : A9                  	plo r9
(1)  455/    44F0 :                     $$cknext:
(1)  456/    44F0 : 0F                  	ldn r15		;check digit
(1)  457/    44F1 : FF 30               	smi 0x30	;for '0'
(1)  458/    44F3 : 3A FA               	bnz $$done
(1)  459/    44F5 : 1F                  	inc r15		;next digit
(1)  460/    44F6 : 29                  	dec r9		;reduce count
(1)  461/    44F7 : 89                  	glo r9
(1)  462/    44F8 : 3A F0               	bnz $$cknext
(1)  463/    44FA :                     $$done:
(1)  464/    44FA : (MACRO)             	cretn
(1)  465/    44FB :                     	
(1)  466/    44FB :                     	
(1)  467/    44FB :                     _modU4:	;32 bit unsigned remainder
(1)  468/    44FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  469/    44FB : (MACRO)                 Ccall _divU4
(1)  470/    44FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  471/    4506 : (MACRO)                 Cretn
(1)  472/    4507 :                         
(1)  473/    4507 :                     _modI4:	;32 bit signed remainder
(1)  474/    4507 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  475/    4507 : (MACRO)                 Ccall _divI4
(1)  476/    450A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  477/    4512 : (MACRO)                 Cretn
(1)  478/    4513 :                         
(1)  479/    4513 :                     	
(1)  480/    4513 :                      
    3499/    4513 :                     	include IO1802.inc
(1)    1/    4513 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm(IO1802.inc) - page 70 - 2/28/2013 15:08:33


(1)    2/    4513 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    4513 :                     	align 64
(1)    4/    4540 :                     _putc:
(1)    5/    4540 :                     _out5:	
(1)    6/    4540 : 8C                  	glo	regArg1
(1)    7/    4541 : 22                  	dec	sp
(1)    8/    4542 : 52                  	str	sp
(1)    9/    4543 : 65                  	out	5
(1)   10/    4544 : (MACRO)             	Cretn
(1)   11/    4545 :                     _inp:		;raw port input
(1)   12/    4545 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    4545 : 22                  	dec	sp	;work backwards
(1)   14/    4546 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    4548 : 73                  	stxd		
(1)   16/    4549 : 8C                  	glo	regarg1	;get the port number
(1)   17/    454A : FA 07               	ani	0x07	;clean it
(1)   18/    454C : 32 5C               	bz	+	; inp(0) isn't valid
(1)   19/    454E : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    4550 : 73                  	stxd		;store it for execution
(1)   21/    4551 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    4555 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    4556 : D8                  	sep	rt1	;execute it
(1)   24/    4557 :                     ;we will come back to here with the input byte in D
(1)   25/    4557 : 12                  	inc	sp	;step over the work area
(1)   26/    4558 : AF                  	plo	retVal	;save it to return
(1)   27/    4559 : F8 00               	ldi	0
(1)   28/    455B : BF                  	phi	retval	;clear top byte
(1)   29/    455C : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    455D : 12                  	inc	sp	;and the D3
(1)   31/    455E : (MACRO)             	Cretn		;and we're done
(1)   32/    455F :                     	
(1)   33/    455F :                     _out:		;raw port output
(1)   34/    455F :                     		;stores a small tailored program on the stack and executes it
(1)   35/    455F : 22                  	dec	sp	;work backwards
(1)   36/    4560 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    4562 : 73                  	stxd		
(1)   38/    4563 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    4567 : 8C                  	glo	regarg1	;get the port number
(1)   40/    4568 : FA 07               	ani	0x07	;clean it
(1)   41/    456A : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    456C : 73                  	stxd		;store it for execution
(1)   43/    456D : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    456E : 52                  	str	sp	;store it where sp points
(1)   45/    456F : D8                  	sep	rt1	;execute it
(1)   46/    4570 :                     ;we will come back to here with sp stepped up by one
(1)   47/    4570 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    4571 : 12                  	inc	sp	;and the D3
(1)   49/    4572 : (MACRO)             	Cretn		;and we're done
(1)   50/    4573 :                     	
(1)   51/    4573 :                     	
    3500/    4573 :                     
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 71 - 2/28/2013 15:08:33


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP369 :                  44AC C | *BRANCHEXT :                      0 - |
 BVTABLE129 :                   E9F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB367 :                4396 C |  CKNEXT369 :                   44F0 C |
 CKTOP369 :                    4497 C |  CLRLP369 :                    4488 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   2/28/2013 - |
 DCKLP369 :                    44AF C |  DIVLOOP16_16364 :             4252 C |
*DIVSETBIT16_16364 :           4284 C |  DIVSKIP16_16364 :             4281 C |
 DIVSKIPCLEAR16_16364 :        4288 C |  DIVSKIPFINALADD16_16364 :     429A C |
 DIVSUB16_16364 :              4273 C |  DNOADD369 :                   44B7 C |
 DONE365 :                     42D3 C |  DONE368 :                     4474 C |
 DONE369 :                     44FA C |  DSHLP369 :                    44CB C |
 ENDLP366 :                    4361 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                           11E C |  L10 :                         40E2 C |
*L100 :                         ECB C | *L102 :                         ED5 C |
*L104 :                         FC8 C |  L105 :                         FC8 C |
*L107 :                        1070 C |  L108 :                         FF7 C |
*L109 :                        1052 C |  L11 :                         40D2 C |
*L112 :                        1171 C |  L113 :                        114A C |
*L115 :                        122C C | *L116 :                        1291 C |
*L117 :                        132A C | *L118 :                        13EC C |
*L119 :                        1480 C | *L12 :                          15D C |
 L120 :                        145A C | *L121 :                        145A C |
*L123 :                        14D7 C | *L124 :                        1517 C |
*L125 :                        17B5 C |  L126 :                        158A C |
*L127 :                        158A C | *L13 :                          186 C |
 L130 :                        15B7 C |  L131 :                        15BD C |
*L132 :                        1A16 C |  L134 :                        1A12 C |
 L139 :                        1957 C |  L141 :                        197F C |
 L142 :                        198C C |  L144 :                        19D1 C |
 L145 :                        19F0 C | *L146 :                        1A9E C |
 L147 :                        1A62 C |  L148 :                        1A87 C |
 L15 :                         40BB C | *L150 :                        1B21 C |
 L151 :                        1AEE C |  L152 :                        1B0A C |
*L154 :                        1C6B C |  L155 :                        1B54 C |
 L156 :                        1BBC C |  L158 :                        1BBC C |
 L16 :                          180 C | *L160 :                        1CA3 C |
*L161 :                        1D49 C |  L162 :                        1CFE C |
*L163 :                        1CFE C |  L165 :                        2749 C |
 L166 :                        1F04 C |  L168 :                        1E0E C |
 L17 :                          183 C |  L170 :                        1DE0 C |
 L171 :                        1EFD C |  L173 :                        1F9D C |
 L175 :                        1F3A C |  L178 :                        1F96 C |
 L181 :                        1FC0 C |  L183 :                        2025 C |
 L187 :                        2017 C | *L19 :                          1F8 C |
 L190 :                        2054 C |  L193 :                        25B4 C |
 L196 :                        2090 C |  L198 :                        214B C |
 L2 :                          418C C |  L20 :                          1A9 C |
 L201 :                        2136 C |  L204 :                        22FD C |
 L206 :                        2285 C |  L207 :                        22F6 C |
*L21 :                          1A9 C |  L211 :                        2254 C |
 L212 :                        2265 C |  L214 :                        22DD C |
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 72 - 2/28/2013 15:08:33


 L217 :                        251B C |  L219 :                        251B C |
 L222 :                        23D2 C |  L224 :                        2441 C |
 L227 :                        251B C |  L229 :                        25AD C |
 L23 :                          1C7 C |  L231 :                        257C C |
 L232 :                        25AD C |  L234 :                        25AD C |
 L236 :                        2745 C | *L24 :                          25B C |
 L240 :                        2656 C |  L241 :                        2745 C |
 L243 :                        2745 C |  L246 :                        2715 C |
 L247 :                        2745 C |  L25 :                          220 C |
 L251 :                        2745 C | *L254 :                        284E C |
 L255 :                        2783 C |  L256 :                        2838 C |
 L26 :                          242 C |  L264 :                        27E4 C |
 L265 :                        27F9 C | *L270 :                        294F C |
*L28 :                          457 C | *L282 :                        2A93 C |
 L29 :                          34A C | *L297 :                        2B65 C |
 L3 :                          4182 C |  L30 :                          35A C |
 L303 :                        2B56 C |  L304 :                        2B5C C |
*L305 :                        2C2C C |  L31 :                          363 C |
 L310 :                        2C1D C |  L311 :                        2C23 C |
*L312 :                        2CB5 C |  L32 :                          427 C |
*L322 :                        2D47 C |  L324 :                        2D1D C |
*L329 :                        2EBB C |  L331 :                        2DF9 C |
*L337 :                        2FA7 C |  L34 :                          36A C |
*L342 :                        3090 C |  L346 :                        308C C |
*L348 :                        311A C | *L35 :                          36A C |
 L351 :                        310B C |  L352 :                        3111 C |
*L353 :                        36A9 C |  L356 :                        31C4 C |
 L357 :                        3227 C |  L358 :                        31FD C |
 L359 :                        320E C |  L360 :                        323A C |
 L361 :                        333F C |  L365 :                        3405 C |
 L366 :                        350F C | *L369 :                        374B C |
 L37 :                          377 C | *L375 :                        3788 C |
 L38 :                          416 C |  L380 :                        37E7 C |
 L381 :                        37D2 C | *L385 :                        382B C |
*L387 :                        390B C | *L395 :                        3B5D C |
 L4 :                            71 C |  L41 :                          3C4 C |
*L419 :                        3BBD C | *L42 :                          53F C |
*L422 :                        3CDC C |  L423 :                        40A6 C |
 L424 :                        3C17 C | *L425 :                        3C88 C |
 L427 :                        3CA9 C |  L428 :                        3C68 C |
 L43 :                          50C C |  L430 :                        3C88 C |
 L432 :                        40A4 C |  L433 :                        3CDC C |
*L435 :                        3D4B C | *L436 :                        3DA6 C |
*L45 :                          595 C | *L46 :                          5F5 C |
*L47 :                          68E C |  L48 :                          669 C |
 L49 :                          68E C | *L50 :                          716 C |
*L51 :                          BB4 C |  L52 :                          77A C |
 L53 :                          B8F C |  L55 :                          7C1 C |
 L56 :                          B8F C |  L57 :                          B7E C |
 L58 :                          B8F C |  L6 :                          415C C |
 L60 :                          8F4 C |  L61 :                          91A C |
 L62 :                          944 C |  L63 :                          96F C |
 L64 :                          9E6 C |  L65 :                          B7E C |
 L67 :                          A64 C |  L69 :                          A9B C |
 L7 :                          413C C |  L70 :                          B73 C |
*L71 :                          842 C |  L72 :                          8A1 C |
*L73 :                          87A C | *L74 :                          8D9 C |
*L75 :                          C00 C |  L76 :                         40B2 C |
 L77 :                          BFD C | *L78 :                          BFD C |
 L8 :                          411B C | *L80 :                          CD8 C |
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 73 - 2/28/2013 15:08:33


 L81 :                          C4F C |  L82 :                          CB0 C |
 L84 :                          CD4 C | *L85 :                          D7E C |
 L86 :                          D2C C |  L87 :                          D66 C |
*L89 :                          DFC C |  L9 :                          40FB C |
 L90 :                          DCA C |  L91 :                          DE4 C |
*L93 :                          E54 C |  L94 :                          E3E C |
*L95 :                          E41 C |  L97 :                          E42 C |
*L98 :                          EB0 C |  LCC1802INIT :                 41A1 C |
*LISTON :                         1 - |  LOOP366 :                     430F C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP367 :                    4377 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP362 :                     421E C |
 MULTLOOP16_16363 :            422B C |  MULTSKIP16_16363 :            423D C |
*NESTMAX :                      100 - |  NORESTORE366 :                435D C |
 OUTIT129 :                     E9C C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS1365 :                     42B3 C |
 POS1368 :                     4426 C |  POS2365 :                     42C3 C |
 POS2368 :                     444D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - | *R14 :                            E - |
 R15 :                            F - | *R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - |  RL0 :                            1 - |
 RL10 :                           B - |  RL12 :                           D - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SETBITOFF129 :                 E97 C |
 SHIFT367 :                    43AE C |  SP :                             2 - |
*TIME :                    15:08:33 - | *TRUE :                           1 - |
 UPNXT369 :                    44E4 C | *VERSION :                     142F - |
 _00000354 :                   41BB C |  _ALLONES :                    1D71 C |
 _ARPREQHDR :                  1D56 C |  _BUFFER :                     3DCF C |
 _BUFFERSIZE :                 40A2 C |  _CALL :                       4201 C |
 _CHECK_IP_MESSAGE_IS_FROM :   30A5 C |
*_CLIENT_ADDITIONALHEADERLINE : 3DC2 C |
 _CLIENT_ARP_WHOHAS :          3834 C | *_CLIENT_BROWSER_CB :          3DC4 C |
*_CLIENT_HOSTSTR :             3DBA C | *_CLIENT_POSTVAL :             3DC0 C |
 _CLIENT_STORE_GW_MAC :        3791 C |  _CLIENT_SYN :                 3914 C |
 _CLIENT_TCP_DATAFILL_CB :     3DC7 C |  _CLIENT_TCP_RESULT_CB :       3DC9 C |
*_CLIENT_URLBUF :              3DBE C | *_CLIENT_URLBUF_VAR :          3DBC C |
 _COPYIP :                     3CF9 C |  _COPYMAC :                    3D54 C |
*_DELAY :                       E15 C |  _DELAYCNT :                   1D53 C |
*_DHCPIP :                     4093 C |  _DIE354 :                     41BE C |
 _DIGITALREAD :                 EA8 C |  _DIGITALWRITE :                E80 C |
 _DISABLECHIP :                 ED4 C |  _DIVI2 :                      42A4 C |
 _DIVI4 :                      4400 C |  _DIVU2 :                      4249 C |
 _DIVU4 :                      4300 C | *_DNSIP :                      408F C |
 _DUBDABX :                    4475 C |  _ENABLECHIP :                  EB1 C |
 _ENC28J60BANK :               40A1 C |  _ENCINITIALIZE :              1520 C |
 _ENCINITSPI :                 14E0 C |  _ENCPACKETRECEIVE :           17CE C |
 _ENCPACKETSEND :              1B3A C |  _ETHBEGIN :                   1489 C |
 _ETH_TYPE_IS_ARP_AND_MY_IP :  2B7A C |  _ETH_TYPE_IS_IP_AND_MY_IP :   2A9C C |
*_EXIT :                        BD1 C |  _FILL_CHECKSUM :              312F C |
 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 74 - 2/28/2013 15:08:33


 _FILL_IP_HDR_CHECKSUM :       36C6 C |  _GET_TCP_DATA_LEN :           2FC0 C |
 _GNEXTPACKETPTR :             409F C |  _GWIP :                       4097 C |
 _GWMACADDR :                  3DB2 C |  _HEXDUMP :                    3BC6 C |
 _HISIP :                      408B C |  _HISPORT :                       E C |
 _ICMP_CB :                    3DB8 C |  _INFO_DATA_LEN :              3DAF C |
*_INP :                        4545 C |  _IPHDR :                      1D5E C |
 _ISLINKUP :                   1C74 C |  _ITOA :                        270 C |
 _LOOP :                        127 C |  _LTOA :                        474 C |
 _MAIN :                        166 C |
 _MAKE_ARP_ANSWER_FROM_REQUEST :                                       2C41 C |
 _MAKE_ECHO_REPLY_FROM_REQUEST :                                       2CBE C |
 _MAKE_ETH_IP :                3754 C |  _MAKE_TCPHEAD :               2867 C |
 _MAKE_TCP_ACK_FROM_ANY :      2D50 C |
 _MAKE_TCP_ACK_WITH_DATA_NOFLAGS :                                     2ED0 C |
 _MAKE_TCP_SYNACK_FROM_SYN :   2958 C |  _MEMCMP :                      C09 C |
 _MEMCPY :                      CF5 C |  _MEMSET :                      D9B C |
*_MODI2 :                      41CF C | *_MODI4 :                      4507 C |
*_MODU2 :                      41C7 C | *_MODU4 :                      44FB C |
*_MULU2 :                      4223 C | *_MULU4 :                      4366 C |
 _MYIP :                          A C |  _MYMAC :                         4 C |
*_MYMASK :                     409B C | *_NTPREQHDR :                  1D67 C |
*_OLDUINOINCLUDER :             E6D C |  _ONEMS :                      421C C |
 _OUT :                        455F C | *_OUT4 :                       41D7 C |
*_OUT5 :                       4540 C |  _PIN4 :                          3 C |
 _PRINTF :                      71F C |  _PRINTINT :                    55C C |
 _PRINTLINT :                   59E C |  _PRINTSTR :                    201 C |
 _PUTC :                       4540 C |  _PUTX :                        697 C |
 _PUTXN :                       5FE C |  _READBUF :                    1A2B C |
 _READOP :                     1089 C |  _READPHYBYTE :                1CAC C |
 _READREGBYTE :                1235 C |  _RETURN :                     4212 C |
 _SEQNUM :                     1D55 C |  _SETBANK :                     ED6 C |
 _SETMACANDIPS :               3B66 C |  _SETMACS :                    37F0 C |
*_SETQOFF :                    41C5 C | *_SETQON :                     41C3 C |
 _SETUP :                        10 C |  _STEP_SEQ :                   275E C |
 _STRCPY :                      18F C |  _TCPCLIENT_SRC_PORT_L :       1D52 C |
 _TCPPACKETLOOP :              1D77 C |  _TCP_CLIENT_PORT_H :          3DCC C |
 _TCP_CLIENT_PORT_L :          3DCB C |  _TCP_CLIENT_STATE :           3DCD C |
 _TCP_FD :                     3DCE C |  _WAITGWMAC :                  3DB1 C |
 _WRITEBUF :                   1ABB C |  _WRITEOP :                    117A C |
 _WRITEPHY :                   13F5 C |  _WRITEREG :                   1333 C |
 _WRITEREGBYTE :               129A C | *_WWW_FD :                     3DC6 C |
 _XFERSPI :                     FD1 C |  __FORW0 :                      EAF C |
 __FORW2 :                     455C C | *__FORW3 :                     4570 C |

    433 symbols
    131 unused symbols

 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 75 - 2/28/2013 15:08:33


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
INC4                                  | JCI2                                 
JCI2I                                 | JCI4                                 
JCU2                                  | JCU2I                                
JCU4                                  | JEQI2                                
JEQI4                                 | JEQU2I                               
JNEU2                                 | JNEU2I                               
JNEU4                                 | JNI2I                                
JNU2I                                 | JNZU2                                
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RESERVE                               | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
ZEXT                                  | ZEXT4                                

     70 macros

 AS V1.42 Beta [Bld 86] - source file xnc28j60.asm - page 76 - 2/28/2013 15:08:33


  codepages:
  ----------

STANDARD (0 changed characters)


0.14 seconds assembly time

   4832 lines source file
  20825 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
