 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 1 - 2/13/2013 16:29:36


       1/       0 :                     ; generated by lcc-xr18ng $Version: 2.2 - XR18NG - The Birthday Compiler $ on Wed Feb 13 16:29:29 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  744/       0 :                     	listing	on
(1)  745/       0 : C0 10 D7            	lbr	lcc1802Init
(1)  746/       3 :                     
      11/       3 :                     	listing on
      12/       3 :                     _PIN4:
      13/       3 : 00                  	db 0
      14/       4 :                     _send:
      15/       4 :                     ;void send(unsigned char data){ //shift out a byte -lsb first
      16/       4 :                     ;	asm("	ldi 8	; loop count\n"
      17/       4 : F8 08               	ldi 8	; loop count
      18/       6 : A8                  	plo rt1	; in temp register
      19/       7 : (MACRO)             	lda2 rt2,'D',_PIN4,0	;point rt2 to PIN4 which holds current output data
      19/       7 : =>FALSE                     if      ('D'='O')
      19/       7 :                                     ldAX    RT2,_PIN4,0
      19/       7 : =>TRUE                      else
      19/       7 :  (MACRO-2)                          ldAD    RT2,_PIN4
      19/       7 : F8 03                       ldi     (_PIN4)&255
      19/       9 : A9                          plo     RT2
      19/       A : F8 00                       ldi     (_PIN4)>>8; was/256
      19/       C : B9                          phi     RT2
      19/       D : [19]                        endif
      20/       D : 09                  	ldn	 rt2	;pick up PIN4 value
      21/       E : FA 6F               	ani	 0x7f!(1<<4) ;turn off data and strobe bits
      22/      10 : 59                  	str  rt2
      23/      11 :                     	;and put it back
      24/      11 :                     $$slp: ; we will do this 8 times
      25/      11 : E9                  	sex  rt2		;temporarily use rt2 as X
      26/      12 : 8C                  	glo regArg1	; get the data byte
      27/      13 : FA 01               	ani	0x01 ;isolate the bottom bit
      28/      15 : CE                     lsz     ;need to have it in the top position though
      29/      16 : F8 80                  ldi 0x80 ;there it is
      30/      18 : F1                  	or		 ; combine PIN4 with the current data bit
      31/      19 : E2                  	sex sp	;return to normal index reg
      32/      1A : 22                  	dec sp	; work space
      33/      1B : 52                  	str sp	;prep for output
      34/      1C : 64                  	out 4 	;put it out
      35/      1D : F9 10               	ori 1<<4 ;blip the spi clock
      36/      1F : 22                  	dec sp	; work space
      37/      20 : 52                  	str sp	;prep for output
      38/      21 : 64                  	out 4 	;put it out
      39/      22 : 8C                  	glo	regArg1	; get the data back
      40/      23 : F6                  	shr		; rotate the next bit into position
      41/      24 : AC                  	plo regArg1	;prepare to repeat
      42/      25 : 28                  	dec rt1 ;decrement loop count
      43/      26 : 88                  	glo rt1	;get the loop count
      44/      27 : CA 00 11            	lbnz $$slp ; back for more
      45/      2A :                     ;}
      46/      2A :                     L1:
      47/      2A : (MACRO)             	Cretn
      47/      2A : D5                          sep     RRET
      48/      2B :                     
      49/      2B :                     _sendCommand:
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 2 - 2/13/2013 16:29:36


      50/      2B : (MACRO)             	alu2I sp,sp,4,smi,smbi
      50/      2B : 82                          glo     SP
      50/      2C : FF 04                       SMI     (4)#256
      50/      2E : A2                          plo     SP
      50/      2F : 92                          ghi     SP
      50/      30 : 7F 00                       SMBI     (4)>>8; was/256
      50/      32 : B2                          phi     SP
      51/      33 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      51/      33 : =>TRUE                      if      ('O'='O')
      51/      33 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
      51/      33 : 82                          glo     SP
      51/      34 : FC 06                       adi     ((6))#256
      51/      36 : AE                          plo     MEMADDR
      51/      37 : 92                          ghi     SP
      51/      38 : 7C 00                       adci    ((6))>>8; was/256
      51/      3A : BE                          phi     MEMADDR
      51/      3B : =>FALSE                     else
      51/      3B :                                     ldAD    memAddr,SP
      51/      3B : [51]                        endif
      51/      3B : 9C                          ghi     R12
      51/      3C : 5E                          str     memAddr
      51/      3D : 1E                          inc     memAddr
      51/      3E : 8C                          glo     R12
      51/      3F : 5E                          str     memAddr
      52/      40 : (MACRO)             	ld2 R11,'O',sp,(0+6)
      52/      40 : =>TRUE                      if      ('O'='O')
      52/      40 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      52/      40 : 82                          glo     SP
      52/      41 : FC 06                       adi     ((0+6))#256
      52/      43 : AE                          plo     MEMADDR
      52/      44 : 92                          ghi     SP
      52/      45 : 7C 00                       adci    ((0+6))>>8; was/256
      52/      47 : BE                          phi     MEMADDR
      52/      48 : =>FALSE                     else
      52/      48 :                                     ldAD    memAddr,SP
      52/      48 : [52]                        endif
      52/      48 : 4E                          lda     memAddr
      52/      49 : BB                          phi     R11
      52/      4A : 0E                          ldn     memAddr
      52/      4B : AB                          plo     R11
      53/      4C : (MACRO)             	st1 R11,'O',sp,(0+6)
      53/      4C : =>TRUE                      if      ('O'='O')
      53/      4C :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      53/      4C : 82                          glo     SP
      53/      4D : FC 06                       adi     ((0+6))#256
      53/      4F : AE                          plo     MEMADDR
      53/      50 : 92                          ghi     SP
      53/      51 : 7C 00                       adci    ((0+6))>>8; was/256
      53/      53 : BE                          phi     MEMADDR
      53/      54 : =>FALSE                     else
      53/      54 :                                     ldAD    memAddr,SP
      53/      54 : [53]                        endif
      53/      54 : 8B                          glo     R11
      53/      55 : 5E                          str     memAddr
      54/      56 :                     ;void sendCommand(uchar cmd){
      55/      56 :                     ;  digitalWrite(strobePin, LOW);
      56/      56 : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
      56/      56 : =>FALSE                     if      ('D'='O')
      56/      56 :                                     ldAX    R12,(5),0
      56/      56 : =>TRUE                      else
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 3 - 2/13/2013 16:29:36


      56/      56 :  (MACRO-2)                          ldAD    R12,(5)
      56/      56 : F8 05                       ldi     ((5))&255
      56/      58 : AC                          plo     R12
      56/      59 : F8 00                       ldi     ((5))>>8; was/256
      56/      5B : BC                          phi     R12
      56/      5C : [56]                        endif
      57/      5C : (MACRO)             	ldA2 R13,'D',(0),0; reg:addr
      57/      5C : =>FALSE                     if      ('D'='O')
      57/      5C :                                     ldAX    R13,(0),0
      57/      5C : =>TRUE                      else
      57/      5C :  (MACRO-2)                          ldAD    R13,(0)
      57/      5C : F8 00                       ldi     ((0))&255
      57/      5E : AD                          plo     R13
      57/      5F : F8 00                       ldi     ((0))>>8; was/256
      57/      61 : BD                          phi     R13
      57/      62 : [57]                        endif
      58/      62 : (MACRO)             	Ccall _digitalWrite
      58/      62 : D4                          sep     RCALL
      58/      63 : 05 0D                       dw      _DIGITALWRITE
      59/      65 :                     ;  send(cmd);
      60/      65 : (MACRO)             	ld1 R12,'O',sp,(0+6)
      60/      65 : =>TRUE                      if      ('O'='O')
      60/      65 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      60/      65 : 82                          glo     SP
      60/      66 : FC 06                       adi     ((0+6))#256
      60/      68 : AE                          plo     MEMADDR
      60/      69 : 92                          ghi     SP
      60/      6A : 7C 00                       adci    ((0+6))>>8; was/256
      60/      6C : BE                          phi     MEMADDR
      60/      6D : =>FALSE                     else
      60/      6D :                                     ldAD    memAddr,SP
      60/      6D : [60]                        endif
      60/      6D : 0E                          ldn     memAddr
      60/      6E : AC                          plo     R12
      61/      6F : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
      61/      6F : F8 00                       ldi     0
      61/      71 : BC                          phi     12
      62/      72 : (MACRO)             	Ccall _send
      62/      72 : D4                          sep     RCALL
      62/      73 : 00 04                       dw      _SEND
      63/      75 :                     ;  digitalWrite(strobePin, HIGH);
      64/      75 : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
      64/      75 : =>FALSE                     if      ('D'='O')
      64/      75 :                                     ldAX    R12,(5),0
      64/      75 : =>TRUE                      else
      64/      75 :  (MACRO-2)                          ldAD    R12,(5)
      64/      75 : F8 05                       ldi     ((5))&255
      64/      77 : AC                          plo     R12
      64/      78 : F8 00                       ldi     ((5))>>8; was/256
      64/      7A : BC                          phi     R12
      64/      7B : [64]                        endif
      65/      7B : (MACRO)             	ldA2 R13,'D',(1),0; reg:addr
      65/      7B : =>FALSE                     if      ('D'='O')
      65/      7B :                                     ldAX    R13,(1),0
      65/      7B : =>TRUE                      else
      65/      7B :  (MACRO-2)                          ldAD    R13,(1)
      65/      7B : F8 01                       ldi     ((1))&255
      65/      7D : AD                          plo     R13
      65/      7E : F8 00                       ldi     ((1))>>8; was/256
      65/      80 : BD                          phi     R13
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 4 - 2/13/2013 16:29:36


      65/      81 : [65]                        endif
      66/      81 : (MACRO)             	Ccall _digitalWrite
      66/      81 : D4                          sep     RCALL
      66/      82 : 05 0D                       dw      _DIGITALWRITE
      67/      84 :                     ;}
      68/      84 :                     L3:
      69/      84 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
      69/      84 : 82                          glo     SP
      69/      85 : FC 04                       ADI     (4)#256
      69/      87 : A2                          plo     SP
      69/      88 : 92                          ghi     SP
      69/      89 : 7C 00                       ADCI     (4)>>8; was/256
      69/      8B : B2                          phi     SP
      70/      8C : (MACRO)             	Cretn
      70/      8C : D5                          sep     RRET
      71/      8D :                     
      72/      8D :                     _sendData:
      73/      8D : (MACRO)             	alu2I sp,sp,4,smi,smbi
      73/      8D : 82                          glo     SP
      73/      8E : FF 04                       SMI     (4)#256
      73/      90 : A2                          plo     SP
      73/      91 : 92                          ghi     SP
      73/      92 : 7F 00                       SMBI     (4)>>8; was/256
      73/      94 : B2                          phi     SP
      74/      95 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
      74/      95 : =>TRUE                      if      ('O'='O')
      74/      95 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
      74/      95 : 82                          glo     SP
      74/      96 : FC 06                       adi     ((6))#256
      74/      98 : AE                          plo     MEMADDR
      74/      99 : 92                          ghi     SP
      74/      9A : 7C 00                       adci    ((6))>>8; was/256
      74/      9C : BE                          phi     MEMADDR
      74/      9D : =>FALSE                     else
      74/      9D :                                     ldAD    memAddr,SP
      74/      9D : [74]                        endif
      74/      9D : 9C                          ghi     R12
      74/      9E : 5E                          str     memAddr
      74/      9F : 1E                          inc     memAddr
      74/      A0 : 8C                          glo     R12
      74/      A1 : 5E                          str     memAddr
      75/      A2 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
      75/      A2 : =>TRUE                      if      ('O'='O')
      75/      A2 :  (MACRO-2)                          ldAX    memAddr,SP,(8)
      75/      A2 : 82                          glo     SP
      75/      A3 : FC 08                       adi     ((8))#256
      75/      A5 : AE                          plo     MEMADDR
      75/      A6 : 92                          ghi     SP
      75/      A7 : 7C 00                       adci    ((8))>>8; was/256
      75/      A9 : BE                          phi     MEMADDR
      75/      AA : =>FALSE                     else
      75/      AA :                                     ldAD    memAddr,SP
      75/      AA : [75]                        endif
      75/      AA : 9D                          ghi     R13
      75/      AB : 5E                          str     memAddr
      75/      AC : 1E                          inc     memAddr
      75/      AD : 8D                          glo     R13
      75/      AE : 5E                          str     memAddr
      76/      AF : (MACRO)             	ld2 R11,'O',sp,(0+6)
      76/      AF : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 5 - 2/13/2013 16:29:36


      76/      AF :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      76/      AF : 82                          glo     SP
      76/      B0 : FC 06                       adi     ((0+6))#256
      76/      B2 : AE                          plo     MEMADDR
      76/      B3 : 92                          ghi     SP
      76/      B4 : 7C 00                       adci    ((0+6))>>8; was/256
      76/      B6 : BE                          phi     MEMADDR
      76/      B7 : =>FALSE                     else
      76/      B7 :                                     ldAD    memAddr,SP
      76/      B7 : [76]                        endif
      76/      B7 : 4E                          lda     memAddr
      76/      B8 : BB                          phi     R11
      76/      B9 : 0E                          ldn     memAddr
      76/      BA : AB                          plo     R11
      77/      BB : (MACRO)             	st1 R11,'O',sp,(0+6)
      77/      BB : =>TRUE                      if      ('O'='O')
      77/      BB :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      77/      BB : 82                          glo     SP
      77/      BC : FC 06                       adi     ((0+6))#256
      77/      BE : AE                          plo     MEMADDR
      77/      BF : 92                          ghi     SP
      77/      C0 : 7C 00                       adci    ((0+6))>>8; was/256
      77/      C2 : BE                          phi     MEMADDR
      77/      C3 : =>FALSE                     else
      77/      C3 :                                     ldAD    memAddr,SP
      77/      C3 : [77]                        endif
      77/      C3 : 8B                          glo     R11
      77/      C4 : 5E                          str     memAddr
      78/      C5 : (MACRO)             	ld2 R11,'O',sp,(2+6)
      78/      C5 : =>TRUE                      if      ('O'='O')
      78/      C5 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
      78/      C5 : 82                          glo     SP
      78/      C6 : FC 08                       adi     ((2+6))#256
      78/      C8 : AE                          plo     MEMADDR
      78/      C9 : 92                          ghi     SP
      78/      CA : 7C 00                       adci    ((2+6))>>8; was/256
      78/      CC : BE                          phi     MEMADDR
      78/      CD : =>FALSE                     else
      78/      CD :                                     ldAD    memAddr,SP
      78/      CD : [78]                        endif
      78/      CD : 4E                          lda     memAddr
      78/      CE : BB                          phi     R11
      78/      CF : 0E                          ldn     memAddr
      78/      D0 : AB                          plo     R11
      79/      D1 : (MACRO)             	st1 R11,'O',sp,(2+6)
      79/      D1 : =>TRUE                      if      ('O'='O')
      79/      D1 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
      79/      D1 : 82                          glo     SP
      79/      D2 : FC 08                       adi     ((2+6))#256
      79/      D4 : AE                          plo     MEMADDR
      79/      D5 : 92                          ghi     SP
      79/      D6 : 7C 00                       adci    ((2+6))>>8; was/256
      79/      D8 : BE                          phi     MEMADDR
      79/      D9 : =>FALSE                     else
      79/      D9 :                                     ldAD    memAddr,SP
      79/      D9 : [79]                        endif
      79/      D9 : 8B                          glo     R11
      79/      DA : 5E                          str     memAddr
      80/      DB :                     ;void sendData(uchar address, uchar data){
      81/      DB :                     ;  sendCommand(0x44);
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 6 - 2/13/2013 16:29:36


      82/      DB : (MACRO)             	ldA2 R12,'D',(68),0; reg:addr
      82/      DB : =>FALSE                     if      ('D'='O')
      82/      DB :                                     ldAX    R12,(68),0
      82/      DB : =>TRUE                      else
      82/      DB :  (MACRO-2)                          ldAD    R12,(68)
      82/      DB : F8 44                       ldi     ((68))&255
      82/      DD : AC                          plo     R12
      82/      DE : F8 00                       ldi     ((68))>>8; was/256
      82/      E0 : BC                          phi     R12
      82/      E1 : [82]                        endif
      83/      E1 : (MACRO)             	Ccall _sendCommand
      83/      E1 : D4                          sep     RCALL
      83/      E2 : 00 2B                       dw      _SENDCOMMAND
      84/      E4 :                     ;  digitalWrite(strobePin, LOW);
      85/      E4 : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
      85/      E4 : =>FALSE                     if      ('D'='O')
      85/      E4 :                                     ldAX    R12,(5),0
      85/      E4 : =>TRUE                      else
      85/      E4 :  (MACRO-2)                          ldAD    R12,(5)
      85/      E4 : F8 05                       ldi     ((5))&255
      85/      E6 : AC                          plo     R12
      85/      E7 : F8 00                       ldi     ((5))>>8; was/256
      85/      E9 : BC                          phi     R12
      85/      EA : [85]                        endif
      86/      EA : (MACRO)             	ldA2 R13,'D',(0),0; reg:addr
      86/      EA : =>FALSE                     if      ('D'='O')
      86/      EA :                                     ldAX    R13,(0),0
      86/      EA : =>TRUE                      else
      86/      EA :  (MACRO-2)                          ldAD    R13,(0)
      86/      EA : F8 00                       ldi     ((0))&255
      86/      EC : AD                          plo     R13
      86/      ED : F8 00                       ldi     ((0))>>8; was/256
      86/      EF : BD                          phi     R13
      86/      F0 : [86]                        endif
      87/      F0 : (MACRO)             	Ccall _digitalWrite
      87/      F0 : D4                          sep     RCALL
      87/      F1 : 05 0D                       dw      _DIGITALWRITE
      88/      F3 :                     ;  send(0xC0 | address);
      89/      F3 : (MACRO)             	ld1 R11,'O',sp,(0+6)
      89/      F3 : =>TRUE                      if      ('O'='O')
      89/      F3 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
      89/      F3 : 82                          glo     SP
      89/      F4 : FC 06                       adi     ((0+6))#256
      89/      F6 : AE                          plo     MEMADDR
      89/      F7 : 92                          ghi     SP
      89/      F8 : 7C 00                       adci    ((0+6))>>8; was/256
      89/      FA : BE                          phi     MEMADDR
      89/      FB : =>FALSE                     else
      89/      FB :                                     ldAD    memAddr,SP
      89/      FB : [89]                        endif
      89/      FB : 0E                          ldn     memAddr
      89/      FC : AB                          plo     R11
      90/      FD : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
      90/      FD : F8 00                       ldi     0
      90/      FF : BB                          phi     11
      91/     100 : (MACRO)             	alu2I R11,R11,192,ori,ori ;removed copy
      91/     100 : 8B                          glo     R11
      91/     101 : F9 C0                       ORI     (192)#256
      91/     103 : AB                          plo     R11
      91/     104 : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 7 - 2/13/2013 16:29:36


      91/     105 : F9 00                       ORI     (192)>>8; was/256
      91/     107 : BB                          phi     R11
      92/     108 : (MACRO)             	cpy1 R12,R11
      92/     108 : 8B                          glo     R11
      92/     109 : AC                          plo     R12
      93/     10A : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
      93/     10A : F8 00                       ldi     0
      93/     10C : BC                          phi     12
      94/     10D : (MACRO)             	Ccall _send
      94/     10D : D4                          sep     RCALL
      94/     10E : 00 04                       dw      _SEND
      95/     110 :                     ;  send(data);
      96/     110 : (MACRO)             	ld1 R12,'O',sp,(2+6)
      96/     110 : =>TRUE                      if      ('O'='O')
      96/     110 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
      96/     110 : 82                          glo     SP
      96/     111 : FC 08                       adi     ((2+6))#256
      96/     113 : AE                          plo     MEMADDR
      96/     114 : 92                          ghi     SP
      96/     115 : 7C 00                       adci    ((2+6))>>8; was/256
      96/     117 : BE                          phi     MEMADDR
      96/     118 : =>FALSE                     else
      96/     118 :                                     ldAD    memAddr,SP
      96/     118 : [96]                        endif
      96/     118 : 0E                          ldn     memAddr
      96/     119 : AC                          plo     R12
      97/     11A : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
      97/     11A : F8 00                       ldi     0
      97/     11C : BC                          phi     12
      98/     11D : (MACRO)             	Ccall _send
      98/     11D : D4                          sep     RCALL
      98/     11E : 00 04                       dw      _SEND
      99/     120 :                     ;  digitalWrite(strobePin, HIGH);
     100/     120 : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
     100/     120 : =>FALSE                     if      ('D'='O')
     100/     120 :                                     ldAX    R12,(5),0
     100/     120 : =>TRUE                      else
     100/     120 :  (MACRO-2)                          ldAD    R12,(5)
     100/     120 : F8 05                       ldi     ((5))&255
     100/     122 : AC                          plo     R12
     100/     123 : F8 00                       ldi     ((5))>>8; was/256
     100/     125 : BC                          phi     R12
     100/     126 : [100]                       endif
     101/     126 : (MACRO)             	ldA2 R13,'D',(1),0; reg:addr
     101/     126 : =>FALSE                     if      ('D'='O')
     101/     126 :                                     ldAX    R13,(1),0
     101/     126 : =>TRUE                      else
     101/     126 :  (MACRO-2)                          ldAD    R13,(1)
     101/     126 : F8 01                       ldi     ((1))&255
     101/     128 : AD                          plo     R13
     101/     129 : F8 00                       ldi     ((1))>>8; was/256
     101/     12B : BD                          phi     R13
     101/     12C : [101]                       endif
     102/     12C : (MACRO)             	Ccall _digitalWrite
     102/     12C : D4                          sep     RCALL
     102/     12D : 05 0D                       dw      _DIGITALWRITE
     103/     12F :                     ;}
     104/     12F :                     L4:
     105/     12F : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     105/     12F : 82                          glo     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 8 - 2/13/2013 16:29:36


     105/     130 : FC 04                       ADI     (4)#256
     105/     132 : A2                          plo     SP
     105/     133 : 92                          ghi     SP
     105/     134 : 7C 00                       ADCI     (4)>>8; was/256
     105/     136 : B2                          phi     SP
     106/     137 : (MACRO)             	Cretn
     106/     137 : D5                          sep     RRET
     107/     138 :                     
     108/     138 :                     _setLED:
     109/     138 : (MACRO)             	alu2I sp,sp,4,smi,smbi
     109/     138 : 82                          glo     SP
     109/     139 : FF 04                       SMI     (4)#256
     109/     13B : A2                          plo     SP
     109/     13C : 92                          ghi     SP
     109/     13D : 7F 00                       SMBI     (4)>>8; was/256
     109/     13F : B2                          phi     SP
     110/     140 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     110/     140 : =>TRUE                      if      ('O'='O')
     110/     140 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     110/     140 : 82                          glo     SP
     110/     141 : FC 06                       adi     ((6))#256
     110/     143 : AE                          plo     MEMADDR
     110/     144 : 92                          ghi     SP
     110/     145 : 7C 00                       adci    ((6))>>8; was/256
     110/     147 : BE                          phi     MEMADDR
     110/     148 : =>FALSE                     else
     110/     148 :                                     ldAD    memAddr,SP
     110/     148 : [110]                       endif
     110/     148 : 9C                          ghi     R12
     110/     149 : 5E                          str     memAddr
     110/     14A : 1E                          inc     memAddr
     110/     14B : 8C                          glo     R12
     110/     14C : 5E                          str     memAddr
     111/     14D : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     111/     14D : =>TRUE                      if      ('O'='O')
     111/     14D :  (MACRO-2)                          ldAX    memAddr,SP,(8)
     111/     14D : 82                          glo     SP
     111/     14E : FC 08                       adi     ((8))#256
     111/     150 : AE                          plo     MEMADDR
     111/     151 : 92                          ghi     SP
     111/     152 : 7C 00                       adci    ((8))>>8; was/256
     111/     154 : BE                          phi     MEMADDR
     111/     155 : =>FALSE                     else
     111/     155 :                                     ldAD    memAddr,SP
     111/     155 : [111]                       endif
     111/     155 : 9D                          ghi     R13
     111/     156 : 5E                          str     memAddr
     111/     157 : 1E                          inc     memAddr
     111/     158 : 8D                          glo     R13
     111/     159 : 5E                          str     memAddr
     112/     15A : (MACRO)             	ld2 R11,'O',sp,(0+6)
     112/     15A : =>TRUE                      if      ('O'='O')
     112/     15A :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     112/     15A : 82                          glo     SP
     112/     15B : FC 06                       adi     ((0+6))#256
     112/     15D : AE                          plo     MEMADDR
     112/     15E : 92                          ghi     SP
     112/     15F : 7C 00                       adci    ((0+6))>>8; was/256
     112/     161 : BE                          phi     MEMADDR
     112/     162 : =>FALSE                     else
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 9 - 2/13/2013 16:29:36


     112/     162 :                                     ldAD    memAddr,SP
     112/     162 : [112]                       endif
     112/     162 : 4E                          lda     memAddr
     112/     163 : BB                          phi     R11
     112/     164 : 0E                          ldn     memAddr
     112/     165 : AB                          plo     R11
     113/     166 : (MACRO)             	st1 R11,'O',sp,(0+6)
     113/     166 : =>TRUE                      if      ('O'='O')
     113/     166 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     113/     166 : 82                          glo     SP
     113/     167 : FC 06                       adi     ((0+6))#256
     113/     169 : AE                          plo     MEMADDR
     113/     16A : 92                          ghi     SP
     113/     16B : 7C 00                       adci    ((0+6))>>8; was/256
     113/     16D : BE                          phi     MEMADDR
     113/     16E : =>FALSE                     else
     113/     16E :                                     ldAD    memAddr,SP
     113/     16E : [113]                       endif
     113/     16E : 8B                          glo     R11
     113/     16F : 5E                          str     memAddr
     114/     170 : (MACRO)             	ld2 R11,'O',sp,(2+6)
     114/     170 : =>TRUE                      if      ('O'='O')
     114/     170 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     114/     170 : 82                          glo     SP
     114/     171 : FC 08                       adi     ((2+6))#256
     114/     173 : AE                          plo     MEMADDR
     114/     174 : 92                          ghi     SP
     114/     175 : 7C 00                       adci    ((2+6))>>8; was/256
     114/     177 : BE                          phi     MEMADDR
     114/     178 : =>FALSE                     else
     114/     178 :                                     ldAD    memAddr,SP
     114/     178 : [114]                       endif
     114/     178 : 4E                          lda     memAddr
     114/     179 : BB                          phi     R11
     114/     17A : 0E                          ldn     memAddr
     114/     17B : AB                          plo     R11
     115/     17C : (MACRO)             	st1 R11,'O',sp,(2+6)
     115/     17C : =>TRUE                      if      ('O'='O')
     115/     17C :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     115/     17C : 82                          glo     SP
     115/     17D : FC 08                       adi     ((2+6))#256
     115/     17F : AE                          plo     MEMADDR
     115/     180 : 92                          ghi     SP
     115/     181 : 7C 00                       adci    ((2+6))>>8; was/256
     115/     183 : BE                          phi     MEMADDR
     115/     184 : =>FALSE                     else
     115/     184 :                                     ldAD    memAddr,SP
     115/     184 : [115]                       endif
     115/     184 : 8B                          glo     R11
     115/     185 : 5E                          str     memAddr
     116/     186 :                     ;{
     117/     186 :                     ;    sendData((pos << 1) + 1, color);
     118/     186 : (MACRO)             	ld1 R11,'O',sp,(2+6)
     118/     186 : =>TRUE                      if      ('O'='O')
     118/     186 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     118/     186 : 82                          glo     SP
     118/     187 : FC 08                       adi     ((2+6))#256
     118/     189 : AE                          plo     MEMADDR
     118/     18A : 92                          ghi     SP
     118/     18B : 7C 00                       adci    ((2+6))>>8; was/256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 10 - 2/13/2013 16:29:36


     118/     18D : BE                          phi     MEMADDR
     118/     18E : =>FALSE                     else
     118/     18E :                                     ldAD    memAddr,SP
     118/     18E : [118]                       endif
     118/     18E : 0E                          ldn     memAddr
     118/     18F : AB                          plo     R11
     119/     190 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     119/     190 : F8 00                       ldi     0
     119/     192 : BB                          phi     11
     120/     193 : (MACRO)             	shl2I R11,1
     120/     193 :                             rept    1
     120/     193 :                             shl2    R11
     120/     193 :                             endm
     120/     193 :  (MACRO-2)                  shl2    R11
     120/     193 : 8B                          glo     R11
     120/     194 : FE                          shl
     120/     195 : AB                          plo     R11
     120/     196 : 9B                          ghi     R11
     120/     197 : 7E                          shlc
     120/     198 : BB                          phi     R11
     121/     199 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     121/     199 : =>TRUE                      if      ('O'='O')
     121/     199 :  (MACRO-2)                          ldAX    R11,R11,(1)
     121/     199 : 8B                          glo     R11
     121/     19A : FC 01                       adi     ((1))#256
     121/     19C : AB                          plo     R11
     121/     19D : 9B                          ghi     R11
     121/     19E : 7C 00                       adci    ((1))>>8; was/256
     121/     1A0 : BB                          phi     R11
     121/     1A1 : =>FALSE                     else
     121/     1A1 :                                     ldAD    R11,R11
     121/     1A1 : [121]                       endif
     122/     1A1 : (MACRO)             	cpy1 R12,R11
     122/     1A1 : 8B                          glo     R11
     122/     1A2 : AC                          plo     R12
     123/     1A3 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     123/     1A3 : F8 00                       ldi     0
     123/     1A5 : BC                          phi     12
     124/     1A6 : (MACRO)             	ld1 R13,'O',sp,(0+6)
     124/     1A6 : =>TRUE                      if      ('O'='O')
     124/     1A6 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     124/     1A6 : 82                          glo     SP
     124/     1A7 : FC 06                       adi     ((0+6))#256
     124/     1A9 : AE                          plo     MEMADDR
     124/     1AA : 92                          ghi     SP
     124/     1AB : 7C 00                       adci    ((0+6))>>8; was/256
     124/     1AD : BE                          phi     MEMADDR
     124/     1AE : =>FALSE                     else
     124/     1AE :                                     ldAD    memAddr,SP
     124/     1AE : [124]                       endif
     124/     1AE : 0E                          ldn     memAddr
     124/     1AF : AD                          plo     R13
     125/     1B0 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     125/     1B0 : F8 00                       ldi     0
     125/     1B2 : BD                          phi     13
     126/     1B3 : (MACRO)             	Ccall _sendData
     126/     1B3 : D4                          sep     RCALL
     126/     1B4 : 00 8D                       dw      _SENDDATA
     127/     1B6 :                     ;}
     128/     1B6 :                     L5:
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 11 - 2/13/2013 16:29:36


     129/     1B6 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     129/     1B6 : 82                          glo     SP
     129/     1B7 : FC 04                       ADI     (4)#256
     129/     1B9 : A2                          plo     SP
     129/     1BA : 92                          ghi     SP
     129/     1BB : 7C 00                       ADCI     (4)>>8; was/256
     129/     1BD : B2                          phi     SP
     130/     1BE : (MACRO)             	Cretn
     130/     1BE : D5                          sep     RRET
     131/     1BF :                     
     132/     1BF :                     _setDisplay:
     133/     1BF : (MACRO)             	alu2I sp,sp,10,smi,smbi
     133/     1BF : 82                          glo     SP
     133/     1C0 : FF 0A                       SMI     (10)#256
     133/     1C2 : A2                          plo     SP
     133/     1C3 : 92                          ghi     SP
     133/     1C4 : 7F 00                       SMBI     (10)>>8; was/256
     133/     1C6 : B2                          phi     SP
     134/     1C7 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     134/     1C7 : 82                          glo     SP
     134/     1C8 : FC 09                       ADI     ((9))#256
     134/     1CA : AE                          plo     MEMADDR
     134/     1CB : 92                          ghi     SP
     134/     1CC : 7C 00                       ADCI     ((9))>>8; was/256
     134/     1CE : BE                          phi     MEMADDR
     135/     1CF : EE                  	sex	memaddr
     136/     1D0 : (MACRO)             	savmi r0
     136/     1D0 : 80                          glo     R0
     136/     1D1 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     136/     1D2 : 90                          ghi     R0
     136/     1D3 : 73                          stxd            ;and it end up where needed to do the next one
     137/     1D4 : (MACRO)             	savmi r1
     137/     1D4 : 81                          glo     R1
     137/     1D5 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     137/     1D6 : 91                          ghi     R1
     137/     1D7 : 73                          stxd            ;and it end up where needed to do the next one
     138/     1D8 : (MACRO)             	savmi r7
     138/     1D8 : 87                          glo     R7
     138/     1D9 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     138/     1DA : 97                          ghi     R7
     138/     1DB : 73                          stxd            ;and it end up where needed to do the next one
     139/     1DC : E2                  	sex sp
     140/     1DD : (MACRO)             	cpy2 r7,r12; function(2055) 1
     140/     1DD : 8C                          glo     R12
     140/     1DE : A7                          plo     R7
     140/     1DF : 9C                          ghi     R12
     140/     1E0 : B7                          phi     R7
     141/     1E1 : (MACRO)             	cpy2 r1,r13; function(1030) 1
     141/     1E1 : 8D                          glo     R13
     141/     1E2 : A1                          plo     R1
     141/     1E3 : 9D                          ghi     R13
     141/     1E4 : B1                          phi     R1
     142/     1E5 :                     ;void setDisplay(const unsigned char values[], unsigned char size){
     143/     1E5 :                     ;  for (i = 0; i<size; i++) {
     144/     1E5 : (MACRO)             	ldA2 R0,'D',(0),0; reg:addr
     144/     1E5 : =>FALSE                     if      ('D'='O')
     144/     1E5 :                                     ldAX    R0,(0),0
     144/     1E5 : =>TRUE                      else
     144/     1E5 :  (MACRO-2)                          ldAD    R0,(0)
     144/     1E5 : F8 00                       ldi     ((0))&255
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 12 - 2/13/2013 16:29:36


     144/     1E7 : A0                          plo     R0
     144/     1E8 : F8 00                       ldi     ((0))>>8; was/256
     144/     1EA : B0                          phi     R0
     144/     1EB : [144]                       endif
     145/     1EB : C0 02 2D            	lbr L10
     146/     1EE :                     L7:
     147/     1EE :                     ;    sendData(i<<1, values[i]);
     148/     1EE : (MACRO)             	cpy1 R11,R0
     148/     1EE : 80                          glo     R0
     148/     1EF : AB                          plo     R11
     149/     1F0 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     149/     1F0 : F8 00                       ldi     0
     149/     1F2 : BB                          phi     11
     150/     1F3 : (MACRO)             	cpy2 R10,R11
     150/     1F3 : 8B                          glo     R11
     150/     1F4 : AA                          plo     R10
     150/     1F5 : 9B                          ghi     R11
     150/     1F6 : BA                          phi     R10
     151/     1F7 : (MACRO)             	shl2I R10,1
     151/     1F7 :                             rept    1
     151/     1F7 :                             shl2    R10
     151/     1F7 :                             endm
     151/     1F7 :  (MACRO-2)                  shl2    R10
     151/     1F7 : 8A                          glo     R10
     151/     1F8 : FE                          shl
     151/     1F9 : AA                          plo     R10
     151/     1FA : 9A                          ghi     R10
     151/     1FB : 7E                          shlc
     151/     1FC : BA                          phi     R10
     152/     1FD : (MACRO)             	cpy1 R12,R10
     152/     1FD : 8A                          glo     R10
     152/     1FE : AC                          plo     R12
     153/     1FF : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     153/     1FF : F8 00                       ldi     0
     153/     201 : BC                          phi     12
     154/     202 : (MACRO)             	alu2 R11,R11,R7,add,adc
     154/     202 : 22                          dec     sp ;make a work ares
     154/     203 : 87                          glo     R7
     154/     204 : 52                          str     sp
     154/     205 : 8B                          glo     R11
     154/     206 : F4                          ADD             ;calculate the low order byte
     154/     207 : AB                          plo     R11
     154/     208 : 97                          ghi     R7
     154/     209 : 52                          str     sp
     154/     20A : 9B                          ghi     R11
     154/     20B : 74                          ADC             ;calculate the high byte
     154/     20C : BB                          phi     R11
     154/     20D : 12                          inc     sp      ;release the work area
     155/     20E : (MACRO)             	ld1 R13,'O',R11,0
     155/     20E : =>TRUE                      if      ('O'='O')
     155/     20E :  (MACRO-2)                          ldAX    memAddr,R11,0
     155/     20E : 8B                          glo     R11
     155/     20F : FC 00                       adi     (0)#256
     155/     211 : AE                          plo     MEMADDR
     155/     212 : 9B                          ghi     R11
     155/     213 : 7C 00                       adci    (0)>>8; was/256
     155/     215 : BE                          phi     MEMADDR
     155/     216 : =>FALSE                     else
     155/     216 :                                     ldAD    memAddr,R11
     155/     216 : [155]                       endif
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 13 - 2/13/2013 16:29:36


     155/     216 : 0E                          ldn     memAddr
     155/     217 : AD                          plo     R13
     156/     218 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     156/     218 : F8 00                       ldi     0
     156/     21A : BD                          phi     13
     157/     21B : (MACRO)             	Ccall _sendData
     157/     21B : D4                          sep     RCALL
     157/     21C : 00 8D                       dw      _SENDDATA
     158/     21E :                     ;  }
     159/     21E :                     L8:
     160/     21E :                     ;  for (i = 0; i<size; i++) {
     161/     21E : (MACRO)             	cpy1 R11,R0
     161/     21E : 80                          glo     R0
     161/     21F : AB                          plo     R11
     162/     220 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     162/     220 : F8 00                       ldi     0
     162/     222 : BB                          phi     11
     163/     223 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     163/     223 : =>TRUE                      if      ('O'='O')
     163/     223 :  (MACRO-2)                          ldAX    R11,R11,(1)
     163/     223 : 8B                          glo     R11
     163/     224 : FC 01                       adi     ((1))#256
     163/     226 : AB                          plo     R11
     163/     227 : 9B                          ghi     R11
     163/     228 : 7C 00                       adci    ((1))>>8; was/256
     163/     22A : BB                          phi     R11
     163/     22B : =>FALSE                     else
     163/     22B :                                     ldAD    R11,R11
     163/     22B : [163]                       endif
     164/     22B : (MACRO)             	cpy1 R0,R11
     164/     22B : 8B                          glo     R11
     164/     22C : A0                          plo     R0
     165/     22D :                     L10:
     166/     22D : (MACRO)             	cpy1 R11,R0
     166/     22D : 80                          glo     R0
     166/     22E : AB                          plo     R11
     167/     22F : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     167/     22F : F8 00                       ldi     0
     167/     231 : BB                          phi     11
     168/     232 : (MACRO)             	cpy1 R10,R1
     168/     232 : 81                          glo     R1
     168/     233 : AA                          plo     R10
     169/     234 : (MACRO)             	zExt 10 ;CVUI2: widen unsigned char to signed int (zero extend)
     169/     234 : F8 00                       ldi     0
     169/     236 : BA                          phi     10
     170/     237 : (MACRO)             	jcI2 r11,r10,lbnf,L7; LT=lbnf i.e. subtract B from A and jump if borrow 
     170/     237 : 22                          dec     sp ;make a work area
     170/     238 : 8A                          glo     R10
     170/     239 : 52                          str     sp 
     170/     23A : 8B                          glo     R11
     170/     23B : F7                          sm
     170/     23C : 9A                          ghi     R10
     170/     23D : 52                          str     sp
     170/     23E : 9B                          ghi     R11
     170/     23F : 77                          smb          ;that's a standard signed subtraction
     170/     240 : 9B                          ghi     R11 ;
     170/     241 : F3                          xor           ;sets the top bit if the signs are different
     170/     242 : 12                          inc     sp ;release the work area
     170/     243 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     170/     244 : C7                          lsnf    ;bypass the flip if signs were the same
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 14 - 2/13/2013 16:29:36


     170/     245 : FB 01                       xri     01     ;invert original df if signs were different
     170/     247 : 76                          shrc           ;put it back in df
     170/     248 : CB 01 EE                    LBNF    L7  ;execute 
     171/     24B :                     ;}
     172/     24B :                     L6:
     173/     24B : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     173/     24B : 82                          glo     SP
     173/     24C : FC 04                       ADI     ((4))#256
     173/     24E : AE                          plo     MEMADDR
     173/     24F : 92                          ghi     SP
     173/     250 : 7C 00                       ADCI     ((4))>>8; was/256
     173/     252 : BE                          phi     MEMADDR
     174/     253 : (MACRO)             	rldmi r7,memaddr
     174/     253 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     174/     254 : B7                          phi     R7
     174/     255 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     174/     256 : A7                          plo     R7
     175/     257 : (MACRO)             	rldmi r1,memaddr
     175/     257 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     175/     258 : B1                          phi     R1
     175/     259 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     175/     25A : A1                          plo     R1
     176/     25B : (MACRO)             	rldmi r0,memaddr
     176/     25B : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     176/     25C : B0                          phi     R0
     176/     25D : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     176/     25E : A0                          plo     R0
     177/     25F : (MACRO)             	alu2I sp,sp,10,adi,adci; virtual frame release
     177/     25F : 82                          glo     SP
     177/     260 : FC 0A                       ADI     (10)#256
     177/     262 : A2                          plo     SP
     177/     263 : 92                          ghi     SP
     177/     264 : 7C 00                       ADCI     (10)>>8; was/256
     177/     266 : B2                          phi     SP
     178/     267 : (MACRO)             	Cretn
     178/     267 : D5                          sep     RRET
     179/     268 :                     
     180/     268 :                     _tms1638init:
     181/     268 : (MACRO)             	alu2I sp,sp,6,smi,smbi
     181/     268 : 82                          glo     SP
     181/     269 : FF 06                       SMI     (6)#256
     181/     26B : A2                          plo     SP
     181/     26C : 92                          ghi     SP
     181/     26D : 7F 00                       SMBI     (6)>>8; was/256
     181/     26F : B2                          phi     SP
     182/     270 : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     182/     270 : 82                          glo     SP
     182/     271 : FC 05                       ADI     ((5))#256
     182/     273 : AE                          plo     MEMADDR
     182/     274 : 92                          ghi     SP
     182/     275 : 7C 00                       ADCI     ((5))>>8; was/256
     182/     277 : BE                          phi     MEMADDR
     183/     278 : EE                  	sex	memaddr
     184/     279 : (MACRO)             	savmi r7
     184/     279 : 87                          glo     R7
     184/     27A : 73                          stxd            ;R7 x is primed to the spot to start the saves
     184/     27B : 97                          ghi     R7
     184/     27C : 73                          stxd            ;and it end up where needed to do the next one
     185/     27D : E2                  	sex sp
     186/     27E :                     ;void tms1638init(){
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 15 - 2/13/2013 16:29:36


     187/     27E :                     ;  digitalWrite(strobePin, HIGH);
     188/     27E : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
     188/     27E : =>FALSE                     if      ('D'='O')
     188/     27E :                                     ldAX    R12,(5),0
     188/     27E : =>TRUE                      else
     188/     27E :  (MACRO-2)                          ldAD    R12,(5)
     188/     27E : F8 05                       ldi     ((5))&255
     188/     280 : AC                          plo     R12
     188/     281 : F8 00                       ldi     ((5))>>8; was/256
     188/     283 : BC                          phi     R12
     188/     284 : [188]                       endif
     189/     284 : (MACRO)             	ldA2 R13,'D',(1),0; reg:addr
     189/     284 : =>FALSE                     if      ('D'='O')
     189/     284 :                                     ldAX    R13,(1),0
     189/     284 : =>TRUE                      else
     189/     284 :  (MACRO-2)                          ldAD    R13,(1)
     189/     284 : F8 01                       ldi     ((1))&255
     189/     286 : AD                          plo     R13
     189/     287 : F8 00                       ldi     ((1))>>8; was/256
     189/     289 : BD                          phi     R13
     189/     28A : [189]                       endif
     190/     28A : (MACRO)             	Ccall _digitalWrite
     190/     28A : D4                          sep     RCALL
     190/     28B : 05 0D                       dw      _DIGITALWRITE
     191/     28D :                     ;  digitalWrite(tmclockpin, HIGH);
     192/     28D : (MACRO)             	ldA2 R12,'D',(4),0; reg:addr
     192/     28D : =>FALSE                     if      ('D'='O')
     192/     28D :                                     ldAX    R12,(4),0
     192/     28D : =>TRUE                      else
     192/     28D :  (MACRO-2)                          ldAD    R12,(4)
     192/     28D : F8 04                       ldi     ((4))&255
     192/     28F : AC                          plo     R12
     192/     290 : F8 00                       ldi     ((4))>>8; was/256
     192/     292 : BC                          phi     R12
     192/     293 : [192]                       endif
     193/     293 : (MACRO)             	ldA2 R13,'D',(1),0; reg:addr
     193/     293 : =>FALSE                     if      ('D'='O')
     193/     293 :                                     ldAX    R13,(1),0
     193/     293 : =>TRUE                      else
     193/     293 :  (MACRO-2)                          ldAD    R13,(1)
     193/     293 : F8 01                       ldi     ((1))&255
     193/     295 : AD                          plo     R13
     193/     296 : F8 00                       ldi     ((1))>>8; was/256
     193/     298 : BD                          phi     R13
     193/     299 : [193]                       endif
     194/     299 : (MACRO)             	Ccall _digitalWrite
     194/     299 : D4                          sep     RCALL
     194/     29A : 05 0D                       dw      _DIGITALWRITE
     195/     29C :                     ;  sendCommand(0x40);
     196/     29C : (MACRO)             	ldA2 R12,'D',(64),0; reg:addr
     196/     29C : =>FALSE                     if      ('D'='O')
     196/     29C :                                     ldAX    R12,(64),0
     196/     29C : =>TRUE                      else
     196/     29C :  (MACRO-2)                          ldAD    R12,(64)
     196/     29C : F8 40                       ldi     ((64))&255
     196/     29E : AC                          plo     R12
     196/     29F : F8 00                       ldi     ((64))>>8; was/256
     196/     2A1 : BC                          phi     R12
     196/     2A2 : [196]                       endif
     197/     2A2 : (MACRO)             	Ccall _sendCommand
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 16 - 2/13/2013 16:29:36


     197/     2A2 : D4                          sep     RCALL
     197/     2A3 : 00 2B                       dw      _SENDCOMMAND
     198/     2A5 :                     ;  sendCommand(0x80 | (8) | min(7, 3));
     199/     2A5 : (MACRO)             	ldA2 R12,'D',(139),0; reg:addr
     199/     2A5 : =>FALSE                     if      ('D'='O')
     199/     2A5 :                                     ldAX    R12,(139),0
     199/     2A5 : =>TRUE                      else
     199/     2A5 :  (MACRO-2)                          ldAD    R12,(139)
     199/     2A5 : F8 8B                       ldi     ((139))&255
     199/     2A7 : AC                          plo     R12
     199/     2A8 : F8 00                       ldi     ((139))>>8; was/256
     199/     2AA : BC                          phi     R12
     199/     2AB : [199]                       endif
     200/     2AB : (MACRO)             	Ccall _sendCommand
     200/     2AB : D4                          sep     RCALL
     200/     2AC : 00 2B                       dw      _SENDCOMMAND
     201/     2AE :                     ;  digitalWrite(strobePin, LOW);
     202/     2AE : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
     202/     2AE : =>FALSE                     if      ('D'='O')
     202/     2AE :                                     ldAX    R12,(5),0
     202/     2AE : =>TRUE                      else
     202/     2AE :  (MACRO-2)                          ldAD    R12,(5)
     202/     2AE : F8 05                       ldi     ((5))&255
     202/     2B0 : AC                          plo     R12
     202/     2B1 : F8 00                       ldi     ((5))>>8; was/256
     202/     2B3 : BC                          phi     R12
     202/     2B4 : [202]                       endif
     203/     2B4 : (MACRO)             	ldA2 R13,'D',(0),0; reg:addr
     203/     2B4 : =>FALSE                     if      ('D'='O')
     203/     2B4 :                                     ldAX    R13,(0),0
     203/     2B4 : =>TRUE                      else
     203/     2B4 :  (MACRO-2)                          ldAD    R13,(0)
     203/     2B4 : F8 00                       ldi     ((0))&255
     203/     2B6 : AD                          plo     R13
     203/     2B7 : F8 00                       ldi     ((0))>>8; was/256
     203/     2B9 : BD                          phi     R13
     203/     2BA : [203]                       endif
     204/     2BA : (MACRO)             	Ccall _digitalWrite
     204/     2BA : D4                          sep     RCALL
     204/     2BB : 05 0D                       dw      _DIGITALWRITE
     205/     2BD :                     ;  send(0xC0);
     206/     2BD : (MACRO)             	ldA2 R12,'D',(192),0; reg:addr
     206/     2BD : =>FALSE                     if      ('D'='O')
     206/     2BD :                                     ldAX    R12,(192),0
     206/     2BD : =>TRUE                      else
     206/     2BD :  (MACRO-2)                          ldAD    R12,(192)
     206/     2BD : F8 C0                       ldi     ((192))&255
     206/     2BF : AC                          plo     R12
     206/     2C0 : F8 00                       ldi     ((192))>>8; was/256
     206/     2C2 : BC                          phi     R12
     206/     2C3 : [206]                       endif
     207/     2C3 : (MACRO)             	Ccall _send
     207/     2C3 : D4                          sep     RCALL
     207/     2C4 : 00 04                       dw      _SEND
     208/     2C6 :                     ;  for (i = 0; i < 16; i++) {
     209/     2C6 : (MACRO)             	ldA2 R7,'D',(0),0; reg:addr
     209/     2C6 : =>FALSE                     if      ('D'='O')
     209/     2C6 :                                     ldAX    R7,(0),0
     209/     2C6 : =>TRUE                      else
     209/     2C6 :  (MACRO-2)                          ldAD    R7,(0)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 17 - 2/13/2013 16:29:36


     209/     2C6 : F8 00                       ldi     ((0))&255
     209/     2C8 : A7                          plo     R7
     209/     2C9 : F8 00                       ldi     ((0))>>8; was/256
     209/     2CB : B7                          phi     R7
     209/     2CC : [209]                       endif
     210/     2CC : C0 02 E7            	lbr L15
     211/     2CF :                     L12:
     212/     2CF :                     ;    send(0x00);
     213/     2CF : (MACRO)             	ldA2 R12,'D',(0),0; reg:addr
     213/     2CF : =>FALSE                     if      ('D'='O')
     213/     2CF :                                     ldAX    R12,(0),0
     213/     2CF : =>TRUE                      else
     213/     2CF :  (MACRO-2)                          ldAD    R12,(0)
     213/     2CF : F8 00                       ldi     ((0))&255
     213/     2D1 : AC                          plo     R12
     213/     2D2 : F8 00                       ldi     ((0))>>8; was/256
     213/     2D4 : BC                          phi     R12
     213/     2D5 : [213]                       endif
     214/     2D5 : (MACRO)             	Ccall _send
     214/     2D5 : D4                          sep     RCALL
     214/     2D6 : 00 04                       dw      _SEND
     215/     2D8 :                     ;  }
     216/     2D8 :                     L13:
     217/     2D8 :                     ;  for (i = 0; i < 16; i++) {
     218/     2D8 : (MACRO)             	cpy1 R11,R7
     218/     2D8 : 87                          glo     R7
     218/     2D9 : AB                          plo     R11
     219/     2DA : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     219/     2DA : F8 00                       ldi     0
     219/     2DC : BB                          phi     11
     220/     2DD : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     220/     2DD : =>TRUE                      if      ('O'='O')
     220/     2DD :  (MACRO-2)                          ldAX    R11,R11,(1)
     220/     2DD : 8B                          glo     R11
     220/     2DE : FC 01                       adi     ((1))#256
     220/     2E0 : AB                          plo     R11
     220/     2E1 : 9B                          ghi     R11
     220/     2E2 : 7C 00                       adci    ((1))>>8; was/256
     220/     2E4 : BB                          phi     R11
     220/     2E5 : =>FALSE                     else
     220/     2E5 :                                     ldAD    R11,R11
     220/     2E5 : [220]                       endif
     221/     2E5 : (MACRO)             	cpy1 R7,R11
     221/     2E5 : 8B                          glo     R11
     221/     2E6 : A7                          plo     R7
     222/     2E7 :                     L15:
     223/     2E7 : (MACRO)             	cpy1 R11,R7
     223/     2E7 : 87                          glo     R7
     223/     2E8 : AB                          plo     R11
     224/     2E9 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     224/     2E9 : F8 00                       ldi     0
     224/     2EB : BB                          phi     11
     225/     2EC : (MACRO)             	jcI2I r11,16,lbnf,L12  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     225/     2EC : 8B                          glo     R11
     225/     2ED : FF 10                       smi     (16)#256
     225/     2EF : 9B                          ghi     R11
     225/     2F0 : 7F 00                       smbi    (16)>>8; was/256      ;that's a standard signed subtraction
     225/     2F2 : 9B                          ghi     R11 ;
     225/     2F3 : FB 00                       xri     (16)>>8; was/256      ;sets the top bit if the signs are different
     225/     2F5 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 18 - 2/13/2013 16:29:36


     225/     2F6 : C7                          lsnf    ;bypass the df flip if signs were the same
     225/     2F7 : FB 01                       xri     01     ;invert original df if signs were different
     225/     2F9 : 76                          shrc           ;put it back in df
     225/     2FA : CB 02 CF                    LBNF    L12  ;execute 
     226/     2FD :                     ;  digitalWrite(strobePin, HIGH);
     227/     2FD : (MACRO)             	ldA2 R12,'D',(5),0; reg:addr
     227/     2FD : =>FALSE                     if      ('D'='O')
     227/     2FD :                                     ldAX    R12,(5),0
     227/     2FD : =>TRUE                      else
     227/     2FD :  (MACRO-2)                          ldAD    R12,(5)
     227/     2FD : F8 05                       ldi     ((5))&255
     227/     2FF : AC                          plo     R12
     227/     300 : F8 00                       ldi     ((5))>>8; was/256
     227/     302 : BC                          phi     R12
     227/     303 : [227]                       endif
     228/     303 : (MACRO)             	ldA2 R13,'D',(1),0; reg:addr
     228/     303 : =>FALSE                     if      ('D'='O')
     228/     303 :                                     ldAX    R13,(1),0
     228/     303 : =>TRUE                      else
     228/     303 :  (MACRO-2)                          ldAD    R13,(1)
     228/     303 : F8 01                       ldi     ((1))&255
     228/     305 : AD                          plo     R13
     228/     306 : F8 00                       ldi     ((1))>>8; was/256
     228/     308 : BD                          phi     R13
     228/     309 : [228]                       endif
     229/     309 : (MACRO)             	Ccall _digitalWrite
     229/     309 : D4                          sep     RCALL
     229/     30A : 05 0D                       dw      _DIGITALWRITE
     230/     30C :                     ;}
     231/     30C :                     L11:
     232/     30C : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     232/     30C : 82                          glo     SP
     232/     30D : FC 04                       ADI     ((4))#256
     232/     30F : AE                          plo     MEMADDR
     232/     310 : 92                          ghi     SP
     232/     311 : 7C 00                       ADCI     ((4))>>8; was/256
     232/     313 : BE                          phi     MEMADDR
     233/     314 : (MACRO)             	rldmi r7,memaddr
     233/     314 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     233/     315 : B7                          phi     R7
     233/     316 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     233/     317 : A7                          plo     R7
     234/     318 : (MACRO)             	alu2I sp,sp,6,adi,adci; virtual frame release
     234/     318 : 82                          glo     SP
     234/     319 : FC 06                       ADI     (6)#256
     234/     31B : A2                          plo     SP
     234/     31C : 92                          ghi     SP
     234/     31D : 7C 00                       ADCI     (6)>>8; was/256
     234/     31F : B2                          phi     SP
     235/     320 : (MACRO)             	Cretn
     235/     320 : D5                          sep     RRET
     236/     321 :                     
     237/     321 :                     L17:
     238/     321 : 00                  	db 0
     239/     322 : 00                  	db 0
     240/     323 : 00                  	db 0
     241/     324 : 00                  	db 0
     242/     325 : 06                  	db 6
     243/     326 : 7F                  	db 127
     244/     327 : 3F                  	db 63
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 19 - 2/13/2013 16:29:36


     245/     328 : 5B                  	db 91
     246/     329 : 00                  	db 0
     247/     32A : 00                  	db 0
     248/     32B : 00                  	db 0
     249/     32C : 00                  	db 0
     250/     32D :                     _setDisplayTo1802:
     251/     32D : (MACRO)             	alu2I sp,sp,16,smi,smbi
     251/     32D : 82                          glo     SP
     251/     32E : FF 10                       SMI     (16)#256
     251/     330 : A2                          plo     SP
     251/     331 : 92                          ghi     SP
     251/     332 : 7F 00                       SMBI     (16)>>8; was/256
     251/     334 : B2                          phi     SP
     252/     335 : (MACRO)             	st2 r12,'O',sp,(18); flag1 
     252/     335 : =>TRUE                      if      ('O'='O')
     252/     335 :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     252/     335 : 82                          glo     SP
     252/     336 : FC 12                       adi     ((18))#256
     252/     338 : AE                          plo     MEMADDR
     252/     339 : 92                          ghi     SP
     252/     33A : 7C 00                       adci    ((18))>>8; was/256
     252/     33C : BE                          phi     MEMADDR
     252/     33D : =>FALSE                     else
     252/     33D :                                     ldAD    memAddr,SP
     252/     33D : [252]                       endif
     252/     33D : 9C                          ghi     R12
     252/     33E : 5E                          str     memAddr
     252/     33F : 1E                          inc     memAddr
     252/     340 : 8C                          glo     R12
     252/     341 : 5E                          str     memAddr
     253/     342 : (MACRO)             	ld2 R11,'O',sp,(0+18)
     253/     342 : =>TRUE                      if      ('O'='O')
     253/     342 :  (MACRO-2)                          ldAX    memAddr,SP,(0+18)
     253/     342 : 82                          glo     SP
     253/     343 : FC 12                       adi     ((0+18))#256
     253/     345 : AE                          plo     MEMADDR
     253/     346 : 92                          ghi     SP
     253/     347 : 7C 00                       adci    ((0+18))>>8; was/256
     253/     349 : BE                          phi     MEMADDR
     253/     34A : =>FALSE                     else
     253/     34A :                                     ldAD    memAddr,SP
     253/     34A : [253]                       endif
     253/     34A : 4E                          lda     memAddr
     253/     34B : BB                          phi     R11
     253/     34C : 0E                          ldn     memAddr
     253/     34D : AB                          plo     R11
     254/     34E : (MACRO)             	st1 R11,'O',sp,(0+18)
     254/     34E : =>TRUE                      if      ('O'='O')
     254/     34E :  (MACRO-2)                          ldAX    memAddr,SP,(0+18)
     254/     34E : 82                          glo     SP
     254/     34F : FC 12                       adi     ((0+18))#256
     254/     351 : AE                          plo     MEMADDR
     254/     352 : 92                          ghi     SP
     254/     353 : 7C 00                       adci    ((0+18))>>8; was/256
     254/     355 : BE                          phi     MEMADDR
     254/     356 : =>FALSE                     else
     254/     356 :                                     ldAD    memAddr,SP
     254/     356 : [254]                       endif
     254/     356 : 8B                          glo     R11
     254/     357 : 5E                          str     memAddr
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 20 - 2/13/2013 16:29:36


     255/     358 :                     ;{
     256/     358 :                     ;const unsigned char RCA_DATA[] = {
     257/     358 : (MACRO)             	ldA2 R11,'O',sp,(-14+18); reg:addr
     257/     358 : =>TRUE                      if      ('O'='O')
     257/     358 :  (MACRO-2)                          ldAX    R11,SP,(-14+18)
     257/     358 : 82                          glo     SP
     257/     359 : FC 04                       adi     ((-14+18))#256
     257/     35B : AB                          plo     R11
     257/     35C : 92                          ghi     SP
     257/     35D : 7C 00                       adci    ((-14+18))>>8; was/256
     257/     35F : BB                          phi     R11
     257/     360 : =>FALSE                     else
     257/     360 :                                     ldAD    R11,SP
     257/     360 : [257]                       endif
     258/     360 : (MACRO)             	ldA2 R8,'D',(L17),0; reg:addr
     258/     360 : =>FALSE                     if      ('D'='O')
     258/     360 :                                     ldAX    R8,(L17),0
     258/     360 : =>TRUE                      else
     258/     360 :  (MACRO-2)                          ldAD    R8,(L17)
     258/     360 : F8 21                       ldi     ((L17))&255
     258/     362 : A8                          plo     R8
     258/     363 : F8 03                       ldi     ((L17))>>8; was/256
     258/     365 : B8                          phi     R8
     258/     366 : [258]                       endif
     259/     366 : (MACRO)             	blkcpy r11,r8,12; ASGNB(reg,INDIRB(reg))
     259/     366 :  (MACRO-2)                  ldiReg  retVal,12      ;length to move
     259/     366 : F8 0C                       ldi     (12)&255
     259/     368 : AF                          plo     RETVAL
     259/     369 : F8 00                       ldi     (12)>>8; was/256
     259/     36B : BF                          phi     RETVAL
     259/     36C : 8F                  $$nxt:  glo     retVal
     259/     36D : CA 03 74                    lbnz    $$go
     259/     370 : 9F                          ghi     retVal
     259/     371 : C2 03 7B                    lbz     $$done
     259/     374 : 48                  $$go:   lda     R8             ;get byte to move - nb, R8 reg altered
     259/     375 : 5B                          str     R11             ;place in dest 
     259/     376 : 1B                          inc     R11             ;advance target ptr - nb dest reg altered
     259/     377 : 2F                          dec     retval          ;decrease move count
     259/     378 : C0 03 6C                    lbr     $$nxt
     259/     37B :                     $$done:
     260/     37B :                     ;  setDisplay(RCA_DATA+offset, 8);
     261/     37B : (MACRO)             	ld1 R11,'O',sp,(0+18)
     261/     37B : =>TRUE                      if      ('O'='O')
     261/     37B :  (MACRO-2)                          ldAX    memAddr,SP,(0+18)
     261/     37B : 82                          glo     SP
     261/     37C : FC 12                       adi     ((0+18))#256
     261/     37E : AE                          plo     MEMADDR
     261/     37F : 92                          ghi     SP
     261/     380 : 7C 00                       adci    ((0+18))>>8; was/256
     261/     382 : BE                          phi     MEMADDR
     261/     383 : =>FALSE                     else
     261/     383 :                                     ldAD    memAddr,SP
     261/     383 : [261]                       endif
     261/     383 : 0E                          ldn     memAddr
     261/     384 : AB                          plo     R11
     262/     385 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     262/     385 : F8 00                       ldi     0
     262/     387 : BB                          phi     11
     263/     388 : (MACRO)             	ldA2 R10,'O',sp,(-14+18); reg:addr
     263/     388 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 21 - 2/13/2013 16:29:36


     263/     388 :  (MACRO-2)                          ldAX    R10,SP,(-14+18)
     263/     388 : 82                          glo     SP
     263/     389 : FC 04                       adi     ((-14+18))#256
     263/     38B : AA                          plo     R10
     263/     38C : 92                          ghi     SP
     263/     38D : 7C 00                       adci    ((-14+18))>>8; was/256
     263/     38F : BA                          phi     R10
     263/     390 : =>FALSE                     else
     263/     390 :                                     ldAD    R10,SP
     263/     390 : [263]                       endif
     264/     390 : (MACRO)             	alu2 R12,R11,R10,add,adc
     264/     390 : 22                          dec     sp ;make a work ares
     264/     391 : 8A                          glo     R10
     264/     392 : 52                          str     sp
     264/     393 : 8B                          glo     R11
     264/     394 : F4                          ADD             ;calculate the low order byte
     264/     395 : AC                          plo     R12
     264/     396 : 9A                          ghi     R10
     264/     397 : 52                          str     sp
     264/     398 : 9B                          ghi     R11
     264/     399 : 74                          ADC             ;calculate the high byte
     264/     39A : BC                          phi     R12
     264/     39B : 12                          inc     sp      ;release the work area
     265/     39C : (MACRO)             	ldA2 R13,'D',(8),0; reg:addr
     265/     39C : =>FALSE                     if      ('D'='O')
     265/     39C :                                     ldAX    R13,(8),0
     265/     39C : =>TRUE                      else
     265/     39C :  (MACRO-2)                          ldAD    R13,(8)
     265/     39C : F8 08                       ldi     ((8))&255
     265/     39E : AD                          plo     R13
     265/     39F : F8 00                       ldi     ((8))>>8; was/256
     265/     3A1 : BD                          phi     R13
     265/     3A2 : [265]                       endif
     266/     3A2 : (MACRO)             	Ccall _setDisplay
     266/     3A2 : D4                          sep     RCALL
     266/     3A3 : 01 BF                       dw      _SETDISPLAY
     267/     3A5 :                     ;}
     268/     3A5 :                     L16:
     269/     3A5 : (MACRO)             	alu2I sp,sp,16,adi,adci; virtual frame release
     269/     3A5 : 82                          glo     SP
     269/     3A6 : FC 10                       ADI     (16)#256
     269/     3A8 : A2                          plo     SP
     269/     3A9 : 92                          ghi     SP
     269/     3AA : 7C 00                       ADCI     (16)>>8; was/256
     269/     3AC : B2                          phi     SP
     270/     3AD : (MACRO)             	Cretn
     270/     3AD : D5                          sep     RRET
     271/     3AE :                     
     272/     3AE :                     L19:
     273/     3AE : 03                  	db 3
     274/     3AF :                     L20:
     275/     3AF : 01                  	db 1
     276/     3B0 :                     _sparkle:
     277/     3B0 : (MACRO)             	alu2I sp,sp,4,smi,smbi
     277/     3B0 : 82                          glo     SP
     277/     3B1 : FF 04                       SMI     (4)#256
     277/     3B3 : A2                          plo     SP
     277/     3B4 : 92                          ghi     SP
     277/     3B5 : 7F 00                       SMBI     (4)>>8; was/256
     277/     3B7 : B2                          phi     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 22 - 2/13/2013 16:29:36


     278/     3B8 :                     ;	static unsigned char pos=3,color=tmsred;
     279/     3B8 :                     ;  		delay(150);
     280/     3B8 : (MACRO)             	ldA2 R12,'D',(1),0; reg:addr
     280/     3B8 : =>FALSE                     if      ('D'='O')
     280/     3B8 :                                     ldAX    R12,(1),0
     280/     3B8 : =>TRUE                      else
     280/     3B8 :  (MACRO-2)                          ldAD    R12,(1)
     280/     3B8 : F8 01                       ldi     ((1))&255
     280/     3BA : AC                          plo     R12
     280/     3BB : F8 00                       ldi     ((1))>>8; was/256
     280/     3BD : BC                          phi     R12
     280/     3BE : [280]                       endif
     281/     3BE : (MACRO)             	ld1 R13,'D',(L19),0
     281/     3BE : =>FALSE                     if      ('D'='O')
     281/     3BE :                                     ldAX    memAddr,(L19),0
     281/     3BE : =>TRUE                      else
     281/     3BE :  (MACRO-2)                          ldAD    memAddr,(L19)
     281/     3BE : F8 AE                       ldi     ((L19))&255
     281/     3C0 : AE                          plo     MEMADDR
     281/     3C1 : F8 03                       ldi     ((L19))>>8; was/256
     281/     3C3 : BE                          phi     MEMADDR
     281/     3C4 : [281]                       endif
     281/     3C4 : 0E                          ldn     memAddr
     281/     3C5 : AD                          plo     R13
     282/     3C6 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     282/     3C6 : F8 00                       ldi     0
     282/     3C8 : BD                          phi     13
     283/     3C9 : (MACRO)             	Ccall _setLED
     283/     3C9 : D4                          sep     RCALL
     283/     3CA : 01 38                       dw      _SETLED
     284/     3CC :                     ;  		setLED(tmsgreen,pos);
     285/     3CC : (MACRO)             	ldA2 R12,'D',(150),0; reg:addr
     285/     3CC : =>FALSE                     if      ('D'='O')
     285/     3CC :                                     ldAX    R12,(150),0
     285/     3CC : =>TRUE                      else
     285/     3CC :  (MACRO-2)                          ldAD    R12,(150)
     285/     3CC : F8 96                       ldi     ((150))&255
     285/     3CE : AC                          plo     R12
     285/     3CF : F8 00                       ldi     ((150))>>8; was/256
     285/     3D1 : BC                          phi     R12
     285/     3D2 : [285]                       endif
     286/     3D2 : (MACRO)             	Ccall _delay
     286/     3D2 : D4                          sep     RCALL
     286/     3D3 : 04 B7                       dw      _DELAY
     287/     3D5 :                     ;  		delay(150);
     288/     3D5 : (MACRO)             	ldA2 R12,'D',(2),0; reg:addr
     288/     3D5 : =>FALSE                     if      ('D'='O')
     288/     3D5 :                                     ldAX    R12,(2),0
     288/     3D5 : =>TRUE                      else
     288/     3D5 :  (MACRO-2)                          ldAD    R12,(2)
     288/     3D5 : F8 02                       ldi     ((2))&255
     288/     3D7 : AC                          plo     R12
     288/     3D8 : F8 00                       ldi     ((2))>>8; was/256
     288/     3DA : BC                          phi     R12
     288/     3DB : [288]                       endif
     289/     3DB : (MACRO)             	ld1 R13,'D',(L19),0
     289/     3DB : =>FALSE                     if      ('D'='O')
     289/     3DB :                                     ldAX    memAddr,(L19),0
     289/     3DB : =>TRUE                      else
     289/     3DB :  (MACRO-2)                          ldAD    memAddr,(L19)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 23 - 2/13/2013 16:29:36


     289/     3DB : F8 AE                       ldi     ((L19))&255
     289/     3DD : AE                          plo     MEMADDR
     289/     3DE : F8 03                       ldi     ((L19))>>8; was/256
     289/     3E0 : BE                          phi     MEMADDR
     289/     3E1 : [289]                       endif
     289/     3E1 : 0E                          ldn     memAddr
     289/     3E2 : AD                          plo     R13
     290/     3E3 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     290/     3E3 : F8 00                       ldi     0
     290/     3E5 : BD                          phi     13
     291/     3E6 : (MACRO)             	Ccall _setLED
     291/     3E6 : D4                          sep     RCALL
     291/     3E7 : 01 38                       dw      _SETLED
     292/     3E9 :                     ;  		pos=(pos+1)%8;
     293/     3E9 : (MACRO)             	ldA2 R12,'D',(150),0; reg:addr
     293/     3E9 : =>FALSE                     if      ('D'='O')
     293/     3E9 :                                     ldAX    R12,(150),0
     293/     3E9 : =>TRUE                      else
     293/     3E9 :  (MACRO-2)                          ldAD    R12,(150)
     293/     3E9 : F8 96                       ldi     ((150))&255
     293/     3EB : AC                          plo     R12
     293/     3EC : F8 00                       ldi     ((150))>>8; was/256
     293/     3EE : BC                          phi     R12
     293/     3EF : [293]                       endif
     294/     3EF : (MACRO)             	Ccall _delay
     294/     3EF : D4                          sep     RCALL
     294/     3F0 : 04 B7                       dw      _DELAY
     295/     3F2 :                     ;  		setLED(tmsred,pos);
     296/     3F2 : (MACRO)             	ld1 R11,'D',(L19),0
     296/     3F2 : =>FALSE                     if      ('D'='O')
     296/     3F2 :                                     ldAX    memAddr,(L19),0
     296/     3F2 : =>TRUE                      else
     296/     3F2 :  (MACRO-2)                          ldAD    memAddr,(L19)
     296/     3F2 : F8 AE                       ldi     ((L19))&255
     296/     3F4 : AE                          plo     MEMADDR
     296/     3F5 : F8 03                       ldi     ((L19))>>8; was/256
     296/     3F7 : BE                          phi     MEMADDR
     296/     3F8 : [296]                       endif
     296/     3F8 : 0E                          ldn     memAddr
     296/     3F9 : AB                          plo     R11
     297/     3FA : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     297/     3FA : F8 00                       ldi     0
     297/     3FC : BB                          phi     11
     298/     3FD : (MACRO)             	ldA2 R12,'O',R11,(1); reg:addr
     298/     3FD : =>TRUE                      if      ('O'='O')
     298/     3FD :  (MACRO-2)                          ldAX    R12,R11,(1)
     298/     3FD : 8B                          glo     R11
     298/     3FE : FC 01                       adi     ((1))#256
     298/     400 : AC                          plo     R12
     298/     401 : 9B                          ghi     R11
     298/     402 : 7C 00                       adci    ((1))>>8; was/256
     298/     404 : BC                          phi     R12
     298/     405 : =>FALSE                     else
     298/     405 :                                     ldAD    R12,R11
     298/     405 : [298]                       endif
     299/     405 : (MACRO)             	ldA2 R13,'D',(8),0; reg:addr
     299/     405 : =>FALSE                     if      ('D'='O')
     299/     405 :                                     ldAX    R13,(8),0
     299/     405 : =>TRUE                      else
     299/     405 :  (MACRO-2)                          ldAD    R13,(8)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 24 - 2/13/2013 16:29:36


     299/     405 : F8 08                       ldi     ((8))&255
     299/     407 : AD                          plo     R13
     299/     408 : F8 00                       ldi     ((8))>>8; was/256
     299/     40A : BD                          phi     R13
     299/     40B : [299]                       endif
     300/     40B : (MACRO)             	Ccall _modi2
     300/     40B : D4                          sep     RCALL
     300/     40C : 11 05                       dw      _MODI2
     301/     40E : (MACRO)             	cpy2 R11,R15
     301/     40E : 8F                          glo     R15
     301/     40F : AB                          plo     R11
     301/     410 : 9F                          ghi     R15
     301/     411 : BB                          phi     R11
     302/     412 : (MACRO)             	st1 R11,'D',(L19),0
     302/     412 : =>FALSE                     if      ('D'='O')
     302/     412 :                                     ldAX    memAddr,(L19),0
     302/     412 : =>TRUE                      else
     302/     412 :  (MACRO-2)                          ldAD    memAddr,(L19)
     302/     412 : F8 AE                       ldi     ((L19))&255
     302/     414 : AE                          plo     MEMADDR
     302/     415 : F8 03                       ldi     ((L19))>>8; was/256
     302/     417 : BE                          phi     MEMADDR
     302/     418 : [302]                       endif
     302/     418 : 8B                          glo     R11
     302/     419 : 5E                          str     memAddr
     303/     41A :                     ;  		delay(150);
     304/     41A : (MACRO)             	ldA2 R12,'D',(1),0; reg:addr
     304/     41A : =>FALSE                     if      ('D'='O')
     304/     41A :                                     ldAX    R12,(1),0
     304/     41A : =>TRUE                      else
     304/     41A :  (MACRO-2)                          ldAD    R12,(1)
     304/     41A : F8 01                       ldi     ((1))&255
     304/     41C : AC                          plo     R12
     304/     41D : F8 00                       ldi     ((1))>>8; was/256
     304/     41F : BC                          phi     R12
     304/     420 : [304]                       endif
     305/     420 : (MACRO)             	ld1 R13,'D',(L19),0
     305/     420 : =>FALSE                     if      ('D'='O')
     305/     420 :                                     ldAX    memAddr,(L19),0
     305/     420 : =>TRUE                      else
     305/     420 :  (MACRO-2)                          ldAD    memAddr,(L19)
     305/     420 : F8 AE                       ldi     ((L19))&255
     305/     422 : AE                          plo     MEMADDR
     305/     423 : F8 03                       ldi     ((L19))>>8; was/256
     305/     425 : BE                          phi     MEMADDR
     305/     426 : [305]                       endif
     305/     426 : 0E                          ldn     memAddr
     305/     427 : AD                          plo     R13
     306/     428 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     306/     428 : F8 00                       ldi     0
     306/     42A : BD                          phi     13
     307/     42B : (MACRO)             	Ccall _setLED
     307/     42B : D4                          sep     RCALL
     307/     42C : 01 38                       dw      _SETLED
     308/     42E :                     ;  		setLED(tmsgreen,pos);
     309/     42E : (MACRO)             	ldA2 R12,'D',(150),0; reg:addr
     309/     42E : =>FALSE                     if      ('D'='O')
     309/     42E :                                     ldAX    R12,(150),0
     309/     42E : =>TRUE                      else
     309/     42E :  (MACRO-2)                          ldAD    R12,(150)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 25 - 2/13/2013 16:29:36


     309/     42E : F8 96                       ldi     ((150))&255
     309/     430 : AC                          plo     R12
     309/     431 : F8 00                       ldi     ((150))>>8; was/256
     309/     433 : BC                          phi     R12
     309/     434 : [309]                       endif
     310/     434 : (MACRO)             	Ccall _delay
     310/     434 : D4                          sep     RCALL
     310/     435 : 04 B7                       dw      _DELAY
     311/     437 :                     ;  		pos=(pos+1)%8;
     312/     437 : (MACRO)             	ldA2 R12,'D',(2),0; reg:addr
     312/     437 : =>FALSE                     if      ('D'='O')
     312/     437 :                                     ldAX    R12,(2),0
     312/     437 : =>TRUE                      else
     312/     437 :  (MACRO-2)                          ldAD    R12,(2)
     312/     437 : F8 02                       ldi     ((2))&255
     312/     439 : AC                          plo     R12
     312/     43A : F8 00                       ldi     ((2))>>8; was/256
     312/     43C : BC                          phi     R12
     312/     43D : [312]                       endif
     313/     43D : (MACRO)             	ld1 R13,'D',(L19),0
     313/     43D : =>FALSE                     if      ('D'='O')
     313/     43D :                                     ldAX    memAddr,(L19),0
     313/     43D : =>TRUE                      else
     313/     43D :  (MACRO-2)                          ldAD    memAddr,(L19)
     313/     43D : F8 AE                       ldi     ((L19))&255
     313/     43F : AE                          plo     MEMADDR
     313/     440 : F8 03                       ldi     ((L19))>>8; was/256
     313/     442 : BE                          phi     MEMADDR
     313/     443 : [313]                       endif
     313/     443 : 0E                          ldn     memAddr
     313/     444 : AD                          plo     R13
     314/     445 : (MACRO)             	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
     314/     445 : F8 00                       ldi     0
     314/     447 : BD                          phi     13
     315/     448 : (MACRO)             	Ccall _setLED
     315/     448 : D4                          sep     RCALL
     315/     449 : 01 38                       dw      _SETLED
     316/     44B :                     ;}
     317/     44B : (MACRO)             	ld1 R11,'D',(L19),0
     317/     44B : =>FALSE                     if      ('D'='O')
     317/     44B :                                     ldAX    memAddr,(L19),0
     317/     44B : =>TRUE                      else
     317/     44B :  (MACRO-2)                          ldAD    memAddr,(L19)
     317/     44B : F8 AE                       ldi     ((L19))&255
     317/     44D : AE                          plo     MEMADDR
     317/     44E : F8 03                       ldi     ((L19))>>8; was/256
     317/     450 : BE                          phi     MEMADDR
     317/     451 : [317]                       endif
     317/     451 : 0E                          ldn     memAddr
     317/     452 : AB                          plo     R11
     318/     453 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     318/     453 : F8 00                       ldi     0
     318/     455 : BB                          phi     11
     319/     456 : (MACRO)             	ldA2 R12,'O',R11,(1); reg:addr
     319/     456 : =>TRUE                      if      ('O'='O')
     319/     456 :  (MACRO-2)                          ldAX    R12,R11,(1)
     319/     456 : 8B                          glo     R11
     319/     457 : FC 01                       adi     ((1))#256
     319/     459 : AC                          plo     R12
     319/     45A : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 26 - 2/13/2013 16:29:36


     319/     45B : 7C 00                       adci    ((1))>>8; was/256
     319/     45D : BC                          phi     R12
     319/     45E : =>FALSE                     else
     319/     45E :                                     ldAD    R12,R11
     319/     45E : [319]                       endif
     320/     45E : (MACRO)             	ldA2 R13,'D',(8),0; reg:addr
     320/     45E : =>FALSE                     if      ('D'='O')
     320/     45E :                                     ldAX    R13,(8),0
     320/     45E : =>TRUE                      else
     320/     45E :  (MACRO-2)                          ldAD    R13,(8)
     320/     45E : F8 08                       ldi     ((8))&255
     320/     460 : AD                          plo     R13
     320/     461 : F8 00                       ldi     ((8))>>8; was/256
     320/     463 : BD                          phi     R13
     320/     464 : [320]                       endif
     321/     464 : (MACRO)             	Ccall _modi2
     321/     464 : D4                          sep     RCALL
     321/     465 : 11 05                       dw      _MODI2
     322/     467 : (MACRO)             	cpy2 R11,R15
     322/     467 : 8F                          glo     R15
     322/     468 : AB                          plo     R11
     322/     469 : 9F                          ghi     R15
     322/     46A : BB                          phi     R11
     323/     46B : (MACRO)             	st1 R11,'D',(L19),0
     323/     46B : =>FALSE                     if      ('D'='O')
     323/     46B :                                     ldAX    memAddr,(L19),0
     323/     46B : =>TRUE                      else
     323/     46B :  (MACRO-2)                          ldAD    memAddr,(L19)
     323/     46B : F8 AE                       ldi     ((L19))&255
     323/     46D : AE                          plo     MEMADDR
     323/     46E : F8 03                       ldi     ((L19))>>8; was/256
     323/     470 : BE                          phi     MEMADDR
     323/     471 : [323]                       endif
     323/     471 : 8B                          glo     R11
     323/     472 : 5E                          str     memAddr
     324/     473 :                     ;
     325/     473 :                     L18:
     326/     473 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     326/     473 : 82                          glo     SP
     326/     474 : FC 04                       ADI     (4)#256
     326/     476 : A2                          plo     SP
     326/     477 : 92                          ghi     SP
     326/     478 : 7C 00                       ADCI     (4)>>8; was/256
     326/     47A : B2                          phi     SP
     327/     47B : (MACRO)             	Cretn
     327/     47B : D5                          sep     RRET
     328/     47C :                     
     329/     47C :                     _main:
     330/     47C : (MACRO)             	alu2I sp,sp,4,smi,smbi
     330/     47C : 82                          glo     SP
     330/     47D : FF 04                       SMI     (4)#256
     330/     47F : A2                          plo     SP
     330/     480 : 92                          ghi     SP
     330/     481 : 7F 00                       SMBI     (4)>>8; was/256
     330/     483 : B2                          phi     SP
     331/     484 :                     ;  tms1638init();
     332/     484 :                     ;  delay(10);
     333/     484 : (MACRO)             	Ccall _tms1638init
     333/     484 : D4                          sep     RCALL
     333/     485 : 02 68                       dw      _TMS1638INIT
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 27 - 2/13/2013 16:29:36


     334/     487 :                     ;  while(1){
     335/     487 : (MACRO)             	ldA2 R12,'D',(10),0; reg:addr
     335/     487 : =>FALSE                     if      ('D'='O')
     335/     487 :                                     ldAX    R12,(10),0
     335/     487 : =>TRUE                      else
     335/     487 :  (MACRO-2)                          ldAD    R12,(10)
     335/     487 : F8 0A                       ldi     ((10))&255
     335/     489 : AC                          plo     R12
     335/     48A : F8 00                       ldi     ((10))>>8; was/256
     335/     48C : BC                          phi     R12
     335/     48D : [335]                       endif
     336/     48D : (MACRO)             	Ccall _delay
     336/     48D : D4                          sep     RCALL
     336/     48E : 04 B7                       dw      _DELAY
     337/     490 : C0 04 AB            	lbr L23
     338/     493 :                     L22:
     339/     493 :                     ;    setDisplayTo1802(4);
     340/     493 :                     ;    sparkle();
     341/     493 : (MACRO)             	ldA2 R12,'D',(4),0; reg:addr
     341/     493 : =>FALSE                     if      ('D'='O')
     341/     493 :                                     ldAX    R12,(4),0
     341/     493 : =>TRUE                      else
     341/     493 :  (MACRO-2)                          ldAD    R12,(4)
     341/     493 : F8 04                       ldi     ((4))&255
     341/     495 : AC                          plo     R12
     341/     496 : F8 00                       ldi     ((4))>>8; was/256
     341/     498 : BC                          phi     R12
     341/     499 : [341]                       endif
     342/     499 : (MACRO)             	Ccall _setDisplayTo1802
     342/     499 : D4                          sep     RCALL
     342/     49A : 03 2D                       dw      _SETDISPLAYTO1802
     343/     49C :                     ;    setDisplayTo1802(0);
     344/     49C : (MACRO)             	Ccall _sparkle
     344/     49C : D4                          sep     RCALL
     344/     49D : 03 B0                       dw      _SPARKLE
     345/     49F :                     ;    sparkle();
     346/     49F : (MACRO)             	ldA2 R12,'D',(0),0; reg:addr
     346/     49F : =>FALSE                     if      ('D'='O')
     346/     49F :                                     ldAX    R12,(0),0
     346/     49F : =>TRUE                      else
     346/     49F :  (MACRO-2)                          ldAD    R12,(0)
     346/     49F : F8 00                       ldi     ((0))&255
     346/     4A1 : AC                          plo     R12
     346/     4A2 : F8 00                       ldi     ((0))>>8; was/256
     346/     4A4 : BC                          phi     R12
     346/     4A5 : [346]                       endif
     347/     4A5 : (MACRO)             	Ccall _setDisplayTo1802
     347/     4A5 : D4                          sep     RCALL
     347/     4A6 : 03 2D                       dw      _SETDISPLAYTO1802
     348/     4A8 :                     ;  }
     349/     4A8 : (MACRO)             	Ccall _sparkle
     349/     4A8 : D4                          sep     RCALL
     349/     4A9 : 03 B0                       dw      _SPARKLE
     350/     4AB :                     ;}
     351/     4AB :                     L23:
     352/     4AB :                     ;    setDisplayTo1802(4);
     353/     4AB : C0 04 93            	lbr L22
     354/     4AE :                     ;#include "olduino.c"
     355/     4AE :                     L21:
     356/     4AE : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 28 - 2/13/2013 16:29:36


     356/     4AE : 82                          glo     SP
     356/     4AF : FC 04                       ADI     (4)#256
     356/     4B1 : A2                          plo     SP
     356/     4B2 : 92                          ghi     SP
     356/     4B3 : 7C 00                       ADCI     (4)>>8; was/256
     356/     4B5 : B2                          phi     SP
     357/     4B6 : (MACRO)             	Cretn
     357/     4B6 : D5                          sep     RRET
     358/     4B7 :                     
     359/     4B7 :                     _delay:
     360/     4B7 : (MACRO)             	alu2I sp,sp,8,smi,smbi
     360/     4B7 : 82                          glo     SP
     360/     4B8 : FF 08                       SMI     (8)#256
     360/     4BA : A2                          plo     SP
     360/     4BB : 92                          ghi     SP
     360/     4BC : 7F 00                       SMBI     (8)>>8; was/256
     360/     4BE : B2                          phi     SP
     361/     4BF : (MACRO)             	alu2I memaddr,sp,(7),adi,adci
     361/     4BF : 82                          glo     SP
     361/     4C0 : FC 07                       ADI     ((7))#256
     361/     4C2 : AE                          plo     MEMADDR
     361/     4C3 : 92                          ghi     SP
     361/     4C4 : 7C 00                       ADCI     ((7))>>8; was/256
     361/     4C6 : BE                          phi     MEMADDR
     362/     4C7 : EE                  	sex	memaddr
     363/     4C8 : (MACRO)             	savmi r1
     363/     4C8 : 81                          glo     R1
     363/     4C9 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     363/     4CA : 91                          ghi     R1
     363/     4CB : 73                          stxd            ;and it end up where needed to do the next one
     364/     4CC : (MACRO)             	savmi r7
     364/     4CC : 87                          glo     R7
     364/     4CD : 73                          stxd            ;R7 x is primed to the spot to start the saves
     364/     4CE : 97                          ghi     R7
     364/     4CF : 73                          stxd            ;and it end up where needed to do the next one
     365/     4D0 : E2                  	sex sp
     366/     4D1 : (MACRO)             	cpy2 r7,r12; function(2054) 1
     366/     4D1 : 8C                          glo     R12
     366/     4D2 : A7                          plo     R7
     366/     4D3 : 9C                          ghi     R12
     366/     4D4 : B7                          phi     R7
     367/     4D5 :                     ;void delay(unsigned int howlong){
     368/     4D5 :                     ;	for (i=1;i!=howlong;i++){
     369/     4D5 : (MACRO)             	ldA2 R1,'D',(1),0; reg:addr
     369/     4D5 : =>FALSE                     if      ('D'='O')
     369/     4D5 :                                     ldAX    R1,(1),0
     369/     4D5 : =>TRUE                      else
     369/     4D5 :  (MACRO-2)                          ldAD    R1,(1)
     369/     4D5 : F8 01                       ldi     ((1))&255
     369/     4D7 : A1                          plo     R1
     369/     4D8 : F8 00                       ldi     ((1))>>8; was/256
     369/     4DA : B1                          phi     R1
     369/     4DB : [369]                       endif
     370/     4DB : C0 04 E2            	lbr L29
     371/     4DE :                     L26:
     372/     4DE :                     ;		oneMs();
     373/     4DE : (MACRO)             	Ccall _oneMs
     373/     4DE : D4                          sep     RCALL
     373/     4DF : 12 1C                       dw      _ONEMS
     374/     4E1 :                     ;	}
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 29 - 2/13/2013 16:29:36


     375/     4E1 :                     L27:
     376/     4E1 :                     ;	for (i=1;i!=howlong;i++){
     377/     4E1 : 11                  	inc R1
     378/     4E2 :                     L29:
     379/     4E2 : (MACRO)             	jneU2 r1,r7,L26; NE
     379/     4E2 : 22                          dec     sp
     379/     4E3 : 87                          glo     R7
     379/     4E4 : 52                          str     sp
     379/     4E5 : 81                          glo     R1
     379/     4E6 : F7                          sm
     379/     4E7 : 12                          inc     sp
     379/     4E8 : CA 04 DE                    lbnz    L26
     379/     4EB : 22                          dec     sp
     379/     4EC : 97                          ghi     R7
     379/     4ED : 52                          str     sp
     379/     4EE : 91                          ghi     R1
     379/     4EF : 77                          smb
     379/     4F0 : 12                          inc     sp
     379/     4F1 : CA 04 DE                    lbnz    L26
     380/     4F4 :                     ;}
     381/     4F4 :                     L25:
     382/     4F4 : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     382/     4F4 : 82                          glo     SP
     382/     4F5 : FC 04                       ADI     ((4))#256
     382/     4F7 : AE                          plo     MEMADDR
     382/     4F8 : 92                          ghi     SP
     382/     4F9 : 7C 00                       ADCI     ((4))>>8; was/256
     382/     4FB : BE                          phi     MEMADDR
     383/     4FC : (MACRO)             	rldmi r7,memaddr
     383/     4FC : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     383/     4FD : B7                          phi     R7
     383/     4FE : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     383/     4FF : A7                          plo     R7
     384/     500 : (MACRO)             	rldmi r1,memaddr
     384/     500 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     384/     501 : B1                          phi     R1
     384/     502 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     384/     503 : A1                          plo     R1
     385/     504 : (MACRO)             	alu2I sp,sp,8,adi,adci; virtual frame release
     385/     504 : 82                          glo     SP
     385/     505 : FC 08                       ADI     (8)#256
     385/     507 : A2                          plo     SP
     385/     508 : 92                          ghi     SP
     385/     509 : 7C 00                       ADCI     (8)>>8; was/256
     385/     50B : B2                          phi     SP
     386/     50C : (MACRO)             	Cretn
     386/     50C : D5                          sep     RRET
     387/     50D :                     
     388/     50D :                     _digitalWrite:
     389/     50D : (MACRO)             	alu2I sp,sp,4,smi,smbi
     389/     50D : 82                          glo     SP
     389/     50E : FF 04                       SMI     (4)#256
     389/     510 : A2                          plo     SP
     389/     511 : 92                          ghi     SP
     389/     512 : 7F 00                       SMBI     (4)>>8; was/256
     389/     514 : B2                          phi     SP
     390/     515 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     390/     515 : =>TRUE                      if      ('O'='O')
     390/     515 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     390/     515 : 82                          glo     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 30 - 2/13/2013 16:29:36


     390/     516 : FC 06                       adi     ((6))#256
     390/     518 : AE                          plo     MEMADDR
     390/     519 : 92                          ghi     SP
     390/     51A : 7C 00                       adci    ((6))>>8; was/256
     390/     51C : BE                          phi     MEMADDR
     390/     51D : =>FALSE                     else
     390/     51D :                                     ldAD    memAddr,SP
     390/     51D : [390]                       endif
     390/     51D : 9C                          ghi     R12
     390/     51E : 5E                          str     memAddr
     390/     51F : 1E                          inc     memAddr
     390/     520 : 8C                          glo     R12
     390/     521 : 5E                          str     memAddr
     391/     522 : (MACRO)             	st2 r13,'O',sp,(8); flag1 
     391/     522 : =>TRUE                      if      ('O'='O')
     391/     522 :  (MACRO-2)                          ldAX    memAddr,SP,(8)
     391/     522 : 82                          glo     SP
     391/     523 : FC 08                       adi     ((8))#256
     391/     525 : AE                          plo     MEMADDR
     391/     526 : 92                          ghi     SP
     391/     527 : 7C 00                       adci    ((8))>>8; was/256
     391/     529 : BE                          phi     MEMADDR
     391/     52A : =>FALSE                     else
     391/     52A :                                     ldAD    memAddr,SP
     391/     52A : [391]                       endif
     391/     52A : 9D                          ghi     R13
     391/     52B : 5E                          str     memAddr
     391/     52C : 1E                          inc     memAddr
     391/     52D : 8D                          glo     R13
     391/     52E : 5E                          str     memAddr
     392/     52F : (MACRO)             	ld2 R11,'O',sp,(0+6)
     392/     52F : =>TRUE                      if      ('O'='O')
     392/     52F :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     392/     52F : 82                          glo     SP
     392/     530 : FC 06                       adi     ((0+6))#256
     392/     532 : AE                          plo     MEMADDR
     392/     533 : 92                          ghi     SP
     392/     534 : 7C 00                       adci    ((0+6))>>8; was/256
     392/     536 : BE                          phi     MEMADDR
     392/     537 : =>FALSE                     else
     392/     537 :                                     ldAD    memAddr,SP
     392/     537 : [392]                       endif
     392/     537 : 4E                          lda     memAddr
     392/     538 : BB                          phi     R11
     392/     539 : 0E                          ldn     memAddr
     392/     53A : AB                          plo     R11
     393/     53B : (MACRO)             	st1 R11,'O',sp,(0+6)
     393/     53B : =>TRUE                      if      ('O'='O')
     393/     53B :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     393/     53B : 82                          glo     SP
     393/     53C : FC 06                       adi     ((0+6))#256
     393/     53E : AE                          plo     MEMADDR
     393/     53F : 92                          ghi     SP
     393/     540 : 7C 00                       adci    ((0+6))>>8; was/256
     393/     542 : BE                          phi     MEMADDR
     393/     543 : =>FALSE                     else
     393/     543 :                                     ldAD    memAddr,SP
     393/     543 : [393]                       endif
     393/     543 : 8B                          glo     R11
     393/     544 : 5E                          str     memAddr
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 31 - 2/13/2013 16:29:36


     394/     545 : (MACRO)             	ld2 R11,'O',sp,(2+6)
     394/     545 : =>TRUE                      if      ('O'='O')
     394/     545 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     394/     545 : 82                          glo     SP
     394/     546 : FC 08                       adi     ((2+6))#256
     394/     548 : AE                          plo     MEMADDR
     394/     549 : 92                          ghi     SP
     394/     54A : 7C 00                       adci    ((2+6))>>8; was/256
     394/     54C : BE                          phi     MEMADDR
     394/     54D : =>FALSE                     else
     394/     54D :                                     ldAD    memAddr,SP
     394/     54D : [394]                       endif
     394/     54D : 4E                          lda     memAddr
     394/     54E : BB                          phi     R11
     394/     54F : 0E                          ldn     memAddr
     394/     550 : AB                          plo     R11
     395/     551 : (MACRO)             	st1 R11,'O',sp,(2+6)
     395/     551 : =>TRUE                      if      ('O'='O')
     395/     551 :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     395/     551 : 82                          glo     SP
     395/     552 : FC 08                       adi     ((2+6))#256
     395/     554 : AE                          plo     MEMADDR
     395/     555 : 92                          ghi     SP
     395/     556 : 7C 00                       adci    ((2+6))>>8; was/256
     395/     558 : BE                          phi     MEMADDR
     395/     559 : =>FALSE                     else
     395/     559 :                                     ldAD    memAddr,SP
     395/     559 : [395]                       endif
     395/     559 : 8B                          glo     R11
     395/     55A : 5E                          str     memAddr
     396/     55B :                     ;void digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
     397/     55B :                     ;    if (LOW==hilo){ //turn it off
     398/     55B : (MACRO)             	ld1 R11,'O',sp,(2+6)
     398/     55B : =>TRUE                      if      ('O'='O')
     398/     55B :  (MACRO-2)                          ldAX    memAddr,SP,(2+6)
     398/     55B : 82                          glo     SP
     398/     55C : FC 08                       adi     ((2+6))#256
     398/     55E : AE                          plo     MEMADDR
     398/     55F : 92                          ghi     SP
     398/     560 : 7C 00                       adci    ((2+6))>>8; was/256
     398/     562 : BE                          phi     MEMADDR
     398/     563 : =>FALSE                     else
     398/     563 :                                     ldAD    memAddr,SP
     398/     563 : [398]                       endif
     398/     563 : 0E                          ldn     memAddr
     398/     564 : AB                          plo     R11
     399/     565 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     399/     565 : F8 00                       ldi     0
     399/     567 : BB                          phi     11
     400/     568 : (MACRO)             	jneU2I r11,0,L31; NE
     400/     568 : 8B                          glo     R11
     400/     569 : FF 00                       smi     (0)#256
     400/     56B : CA 05 C1                    lbnz    L31
     400/     56E : 9B                          ghi     R11
     400/     56F : 7F 00                       smbi    (0)>>8; was/256
     400/     571 : CA 05 C1                    lbnz    L31
     401/     574 :                     ;        PIN4= PIN4 & ~ (1<<n); //with AND
     402/     574 : (MACRO)             	ld1 R11,'D',(_PIN4),0
     402/     574 : =>FALSE                     if      ('D'='O')
     402/     574 :                                     ldAX    memAddr,(_PIN4),0
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 32 - 2/13/2013 16:29:36


     402/     574 : =>TRUE                      else
     402/     574 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     402/     574 : F8 03                       ldi     ((_PIN4))&255
     402/     576 : AE                          plo     MEMADDR
     402/     577 : F8 00                       ldi     ((_PIN4))>>8; was/256
     402/     579 : BE                          phi     MEMADDR
     402/     57A : [402]                       endif
     402/     57A : 0E                          ldn     memAddr
     402/     57B : AB                          plo     R11
     403/     57C : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     403/     57C : F8 00                       ldi     0
     403/     57E : BB                          phi     11
     404/     57F : (MACRO)             	ldA2 R10,'D',(1),0; reg:addr
     404/     57F : =>FALSE                     if      ('D'='O')
     404/     57F :                                     ldAX    R10,(1),0
     404/     57F : =>TRUE                      else
     404/     57F :  (MACRO-2)                          ldAD    R10,(1)
     404/     57F : F8 01                       ldi     ((1))&255
     404/     581 : AA                          plo     R10
     404/     582 : F8 00                       ldi     ((1))>>8; was/256
     404/     584 : BA                          phi     R10
     404/     585 : [404]                       endif
     405/     585 : (MACRO)             	ld1 R9,'O',sp,(0+6)
     405/     585 : =>TRUE                      if      ('O'='O')
     405/     585 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     405/     585 : 82                          glo     SP
     405/     586 : FC 06                       adi     ((0+6))#256
     405/     588 : AE                          plo     MEMADDR
     405/     589 : 92                          ghi     SP
     405/     58A : 7C 00                       adci    ((0+6))>>8; was/256
     405/     58C : BE                          phi     MEMADDR
     405/     58D : =>FALSE                     else
     405/     58D :                                     ldAD    memAddr,SP
     405/     58D : [405]                       endif
     405/     58D : 0E                          ldn     memAddr
     405/     58E : A9                          plo     R9
     406/     58F : (MACRO)             	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
     406/     58F : F8 00                       ldi     0
     406/     591 : B9                          phi     9
     407/     592 : (MACRO)             	shl2R R10,R9; lshi2(r,r)
     407/     592 : 89                          glo     R9            ;the + and - are nameless temporary symbols
     407/     593 : C2 05 A2                    lbz     +
     407/     596 : AE                          plo     memaddr
     407/     597 :  (MACRO-2)          -       shl2    R10
     407/     597 : 8A                          glo     R10
     407/     598 : FE                          shl
     407/     599 : AA                          plo     R10
     407/     59A : 9A                          ghi     R10
     407/     59B : 7E                          shlc
     407/     59C : BA                          phi     R10
     407/     59D : 2E                          dec     memaddr
     407/     59E : 8E                          glo     memaddr
     407/     59F : CA 05 97                    lbnz    -
     407/     5A2 :                     +
     408/     5A2 : (MACRO)             	alu2I R10,R10,-1,xri,xri; was?	cpy2 R10,R10+xor2I R10,-1
     408/     5A2 : 8A                          glo     R10
     408/     5A3 : FB FF                       XRI     (-1)#256
     408/     5A5 : AA                          plo     R10
     408/     5A6 : 9A                          ghi     R10
     408/     5A7 : FB FF                       XRI     (-1)>>8; was/256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 33 - 2/13/2013 16:29:36


     408/     5A9 : BA                          phi     R10
     409/     5AA : (MACRO)             	alu2 R11,R11,R10,and,and
     409/     5AA : 22                          dec     sp ;make a work ares
     409/     5AB : 8A                          glo     R10
     409/     5AC : 52                          str     sp
     409/     5AD : 8B                          glo     R11
     409/     5AE : F2                          AND             ;calculate the low order byte
     409/     5AF : AB                          plo     R11
     409/     5B0 : 9A                          ghi     R10
     409/     5B1 : 52                          str     sp
     409/     5B2 : 9B                          ghi     R11
     409/     5B3 : F2                          AND             ;calculate the high byte
     409/     5B4 : BB                          phi     R11
     409/     5B5 : 12                          inc     sp      ;release the work area
     410/     5B6 : (MACRO)             	st1 R11,'D',(_PIN4),0
     410/     5B6 : =>FALSE                     if      ('D'='O')
     410/     5B6 :                                     ldAX    memAddr,(_PIN4),0
     410/     5B6 : =>TRUE                      else
     410/     5B6 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     410/     5B6 : F8 03                       ldi     ((_PIN4))&255
     410/     5B8 : AE                          plo     MEMADDR
     410/     5B9 : F8 00                       ldi     ((_PIN4))>>8; was/256
     410/     5BB : BE                          phi     MEMADDR
     410/     5BC : [410]                       endif
     410/     5BC : 8B                          glo     R11
     410/     5BD : 5E                          str     memAddr
     411/     5BE :                     ;    } else { //turn it on
     412/     5BE : C0 06 03            	lbr L32
     413/     5C1 :                     L31:
     414/     5C1 :                     ;        PIN4=PIN4|(1<<n); //with OR
     415/     5C1 : (MACRO)             	ld1 R11,'D',(_PIN4),0
     415/     5C1 : =>FALSE                     if      ('D'='O')
     415/     5C1 :                                     ldAX    memAddr,(_PIN4),0
     415/     5C1 : =>TRUE                      else
     415/     5C1 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     415/     5C1 : F8 03                       ldi     ((_PIN4))&255
     415/     5C3 : AE                          plo     MEMADDR
     415/     5C4 : F8 00                       ldi     ((_PIN4))>>8; was/256
     415/     5C6 : BE                          phi     MEMADDR
     415/     5C7 : [415]                       endif
     415/     5C7 : 0E                          ldn     memAddr
     415/     5C8 : AB                          plo     R11
     416/     5C9 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     416/     5C9 : F8 00                       ldi     0
     416/     5CB : BB                          phi     11
     417/     5CC : (MACRO)             	ldA2 R10,'D',(1),0; reg:addr
     417/     5CC : =>FALSE                     if      ('D'='O')
     417/     5CC :                                     ldAX    R10,(1),0
     417/     5CC : =>TRUE                      else
     417/     5CC :  (MACRO-2)                          ldAD    R10,(1)
     417/     5CC : F8 01                       ldi     ((1))&255
     417/     5CE : AA                          plo     R10
     417/     5CF : F8 00                       ldi     ((1))>>8; was/256
     417/     5D1 : BA                          phi     R10
     417/     5D2 : [417]                       endif
     418/     5D2 : (MACRO)             	ld1 R9,'O',sp,(0+6)
     418/     5D2 : =>TRUE                      if      ('O'='O')
     418/     5D2 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     418/     5D2 : 82                          glo     SP
     418/     5D3 : FC 06                       adi     ((0+6))#256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 34 - 2/13/2013 16:29:36


     418/     5D5 : AE                          plo     MEMADDR
     418/     5D6 : 92                          ghi     SP
     418/     5D7 : 7C 00                       adci    ((0+6))>>8; was/256
     418/     5D9 : BE                          phi     MEMADDR
     418/     5DA : =>FALSE                     else
     418/     5DA :                                     ldAD    memAddr,SP
     418/     5DA : [418]                       endif
     418/     5DA : 0E                          ldn     memAddr
     418/     5DB : A9                          plo     R9
     419/     5DC : (MACRO)             	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
     419/     5DC : F8 00                       ldi     0
     419/     5DE : B9                          phi     9
     420/     5DF : (MACRO)             	shl2R R10,R9; lshi2(r,r)
     420/     5DF : 89                          glo     R9            ;the + and - are nameless temporary symbols
     420/     5E0 : C2 05 EF                    lbz     +
     420/     5E3 : AE                          plo     memaddr
     420/     5E4 :  (MACRO-2)          -       shl2    R10
     420/     5E4 : 8A                          glo     R10
     420/     5E5 : FE                          shl
     420/     5E6 : AA                          plo     R10
     420/     5E7 : 9A                          ghi     R10
     420/     5E8 : 7E                          shlc
     420/     5E9 : BA                          phi     R10
     420/     5EA : 2E                          dec     memaddr
     420/     5EB : 8E                          glo     memaddr
     420/     5EC : CA 05 E4                    lbnz    -
     420/     5EF :                     +
     421/     5EF : (MACRO)             	alu2 R11,R11,R10,or,or
     421/     5EF : 22                          dec     sp ;make a work ares
     421/     5F0 : 8A                          glo     R10
     421/     5F1 : 52                          str     sp
     421/     5F2 : 8B                          glo     R11
     421/     5F3 : F1                          OR             ;calculate the low order byte
     421/     5F4 : AB                          plo     R11
     421/     5F5 : 9A                          ghi     R10
     421/     5F6 : 52                          str     sp
     421/     5F7 : 9B                          ghi     R11
     421/     5F8 : F1                          OR             ;calculate the high byte
     421/     5F9 : BB                          phi     R11
     421/     5FA : 12                          inc     sp      ;release the work area
     422/     5FB : (MACRO)             	st1 R11,'D',(_PIN4),0
     422/     5FB : =>FALSE                     if      ('D'='O')
     422/     5FB :                                     ldAX    memAddr,(_PIN4),0
     422/     5FB : =>TRUE                      else
     422/     5FB :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
     422/     5FB : F8 03                       ldi     ((_PIN4))&255
     422/     5FD : AE                          plo     MEMADDR
     422/     5FE : F8 00                       ldi     ((_PIN4))>>8; was/256
     422/     600 : BE                          phi     MEMADDR
     422/     601 : [422]                       endif
     422/     601 : 8B                          glo     R11
     422/     602 : 5E                          str     memAddr
     423/     603 :                     ;    }
     424/     603 :                     L32:
     425/     603 :                     ;    OUT4(PIN4); //
     426/     603 : (MACRO)             	ld1 R12,'D',(_PIN4),0
     426/     603 : =>FALSE                     if      ('D'='O')
     426/     603 :                                     ldAX    memAddr,(_PIN4),0
     426/     603 : =>TRUE                      else
     426/     603 :  (MACRO-2)                          ldAD    memAddr,(_PIN4)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 35 - 2/13/2013 16:29:36


     426/     603 : F8 03                       ldi     ((_PIN4))&255
     426/     605 : AE                          plo     MEMADDR
     426/     606 : F8 00                       ldi     ((_PIN4))>>8; was/256
     426/     608 : BE                          phi     MEMADDR
     426/     609 : [426]                       endif
     426/     609 : 0E                          ldn     memAddr
     426/     60A : AC                          plo     R12
     427/     60B : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     427/     60B : F8 00                       ldi     0
     427/     60D : BC                          phi     12
     428/     60E : (MACRO)             	Ccall _OUT4
     428/     60E : D4                          sep     RCALL
     428/     60F : 11 0D                       dw      _OUT4
     429/     611 :                     ;}
     430/     611 :                     L30:
     431/     611 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     431/     611 : 82                          glo     SP
     431/     612 : FC 04                       ADI     (4)#256
     431/     614 : A2                          plo     SP
     431/     615 : 92                          ghi     SP
     431/     616 : 7C 00                       ADCI     (4)>>8; was/256
     431/     618 : B2                          phi     SP
     432/     619 : (MACRO)             	Cretn
     432/     619 : D5                          sep     RRET
     433/     61A :                     
     434/     61A :                     _olduinoincluder:
     435/     61A :                     ;void olduinoincluder(){
     436/     61A :                     ;	asm("\tinclude olduino.inc\n");
     437/     61A :                     	include olduino.inc
(1)    1/     61A :                     ;Feb 8 2013, first version of assembler routines for olduino support
(1)    2/     61A :                     	align 64	;needed to make sure all on same page
(1)    3/     640 :                     	
(1)    4/     640 :                     ;digitalWrite2(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
(1)    5/     640 :                     _digitalWrite2:
(1)    6/     640 : 8C                  	glo regArg1	;get the bit number
(1)    7/     641 : FC 5F               	adi $$bvtable&255	;add the table offset
(1)    8/     643 : AE                  	plo memaddr
(1)    9/     644 : 93                  	ghi RPC		;get the top byte of the current page
(1)   10/     645 : BE                  	phi memaddr	
(1)   11/     646 : 0E                  	ldn memaddr	;pick up the bit pattern
(1)   12/     647 : A8                  	plo rt1		;save it in a temp
(1)   13/     648 : (MACRO)             	lda2 memaddr,_PIN4 ;address the current port value
(1)   13/     648 : =>FALSE                     if      (_PIN4='O')
(1)   13/     648 :                                     ldAX    MEMADDR,,
(1)   13/     648 : =>TRUE                      else
(1)   13/     648 :  (MACRO-2)                          ldAD    MEMADDR,
(1)   13/     648 : F8 00                       ldi     ()&255
(1)   13/     64A : AE                          plo     MEMADDR
(1)   13/     64B : F8 00                       ldi     ()>>8; was/256
(1)   13/     64D : BE                          phi     MEMADDR
(1)   13/     64E : [13]                        endif
(1)   14/     64E : EE                  	sex memaddr	;prepare to change it
(1)   15/     64F : 8D                  	glo regArg2	;get on/off switch
(1)   16/     650 : 32 57               	bz $$setbitoff
(1)   17/     652 :                     ; here we have the bit pattern in rt1 and we're ready to apply it with OR
(1)   18/     652 : 88                  	glo rt1		;get the bit value back
(1)   19/     653 : F1                  	or		;apply it
(1)   20/     654 : 5E                  	str memaddr	;and save it
(1)   21/     655 : 30 5C               	br $$outit	;go fnish up
(1)   22/     657 :                     $$setbitoff:
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(olduino.inc) - page 36 - 2/13/2013 16:29:36


(1)   23/     657 : 88                  	glo rt1		;get the bit pattern
(1)   24/     658 : FB FF               	xri 0xff	;reverse it
(1)   25/     65A : F2                  	and		;combine it with the existing pin value
(1)   26/     65B : 5E                  	str memaddr	;and save it
(1)   27/     65C :                     ;here we gave set/reset the correct bit in PIN4 and we just have to send it out
(1)   28/     65C :                     $$outit:
(1)   29/     65C : 64                  	out 4		;X was already set to memaddr
(1)   30/     65D : E2                  	sex sp		;reset X
(1)   31/     65E : (MACRO)             	cretn
(1)   31/     65E : D5                          sep     RRET
(1)   32/     65F : 01 02 04 08 10 20   $$bvtable db 1,2,4,8,16,32,64,128	;table of bit values
                    40 80 
(1)   33/     667 :                     
(1)   34/     667 :                     _digitalWriteBV
(1)   35/     667 :                     ;digitalwrite where the pin number is supplies as a bit mask
     438/     667 :                     ;}
     439/     667 :                     L33:
     440/     667 : (MACRO)             	Cretn
     440/     667 : D5                          sep     RRET
     441/     668 :                     
     442/     668 :                     _strcpy:
     443/     668 : (MACRO)             	alu2I sp,sp,2,smi,smbi
     443/     668 : 82                          glo     SP
     443/     669 : FF 02                       SMI     (2)#256
     443/     66B : A2                          plo     SP
     443/     66C : 92                          ghi     SP
     443/     66D : 7F 00                       SMBI     (2)>>8; was/256
     443/     66F : B2                          phi     SP
     444/     670 :                     ;{
     445/     670 :                     ;	char *save = to;
     446/     670 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     446/     670 : =>TRUE                      if      ('O'='O')
     446/     670 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
     446/     670 : 82                          glo     SP
     446/     671 : FC 00                       adi     ((-4+4))#256
     446/     673 : AE                          plo     MEMADDR
     446/     674 : 92                          ghi     SP
     446/     675 : 7C 00                       adci    ((-4+4))>>8; was/256
     446/     677 : BE                          phi     MEMADDR
     446/     678 : =>FALSE                     else
     446/     678 :                                     ldAD    memAddr,SP
     446/     678 : [446]                       endif
     446/     678 : 9C                          ghi     R12
     446/     679 : 5E                          str     memAddr
     446/     67A : 1E                          inc     memAddr
     446/     67B : 8C                          glo     R12
     446/     67C : 5E                          str     memAddr
     447/     67D :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     448/     67D : C0 06 9E            	lbr L39
     449/     680 :                     L36:
     450/     680 :                     L37:
     451/     680 : (MACRO)             	ldA2 R11,'D',(1),0; reg:addr
     451/     680 : =>FALSE                     if      ('D'='O')
     451/     680 :                                     ldAX    R11,(1),0
     451/     680 : =>TRUE                      else
     451/     680 :  (MACRO-2)                          ldAD    R11,(1)
     451/     680 : F8 01                       ldi     ((1))&255
     451/     682 : AB                          plo     R11
     451/     683 : F8 00                       ldi     ((1))>>8; was/256
     451/     685 : BB                          phi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 37 - 2/13/2013 16:29:36


     451/     686 : [451]                       endif
     452/     686 : (MACRO)             	alu2 R13,R13,R11,add,adc
     452/     686 : 22                          dec     sp ;make a work ares
     452/     687 : 8B                          glo     R11
     452/     688 : 52                          str     sp
     452/     689 : 8D                          glo     R13
     452/     68A : F4                          ADD             ;calculate the low order byte
     452/     68B : AD                          plo     R13
     452/     68C : 9B                          ghi     R11
     452/     68D : 52                          str     sp
     452/     68E : 9D                          ghi     R13
     452/     68F : 74                          ADC             ;calculate the high byte
     452/     690 : BD                          phi     R13
     452/     691 : 12                          inc     sp      ;release the work area
     453/     692 : (MACRO)             	alu2 R12,R12,R11,add,adc
     453/     692 : 22                          dec     sp ;make a work ares
     453/     693 : 8B                          glo     R11
     453/     694 : 52                          str     sp
     453/     695 : 8C                          glo     R12
     453/     696 : F4                          ADD             ;calculate the low order byte
     453/     697 : AC                          plo     R12
     453/     698 : 9B                          ghi     R11
     453/     699 : 52                          str     sp
     453/     69A : 9C                          ghi     R12
     453/     69B : 74                          ADC             ;calculate the high byte
     453/     69C : BC                          phi     R12
     453/     69D : 12                          inc     sp      ;release the work area
     454/     69E :                     L39:
     455/     69E : (MACRO)             	ld1 R11,'O',R13,0
     455/     69E : =>TRUE                      if      ('O'='O')
     455/     69E :  (MACRO-2)                          ldAX    memAddr,R13,0
     455/     69E : 8D                          glo     R13
     455/     69F : FC 00                       adi     (0)#256
     455/     6A1 : AE                          plo     MEMADDR
     455/     6A2 : 9D                          ghi     R13
     455/     6A3 : 7C 00                       adci    (0)>>8; was/256
     455/     6A5 : BE                          phi     MEMADDR
     455/     6A6 : =>FALSE                     else
     455/     6A6 :                                     ldAD    memAddr,R13
     455/     6A6 : [455]                       endif
     455/     6A6 : 0E                          ldn     memAddr
     455/     6A7 : AB                          plo     R11
     456/     6A8 : (MACRO)             	st1 R11,'O',R12,0
     456/     6A8 : =>TRUE                      if      ('O'='O')
     456/     6A8 :  (MACRO-2)                          ldAX    memAddr,R12,0
     456/     6A8 : 8C                          glo     R12
     456/     6A9 : FC 00                       adi     (0)#256
     456/     6AB : AE                          plo     MEMADDR
     456/     6AC : 9C                          ghi     R12
     456/     6AD : 7C 00                       adci    (0)>>8; was/256
     456/     6AF : BE                          phi     MEMADDR
     456/     6B0 : =>FALSE                     else
     456/     6B0 :                                     ldAD    memAddr,R12
     456/     6B0 : [456]                       endif
     456/     6B0 : 8B                          glo     R11
     456/     6B1 : 5E                          str     memAddr
     457/     6B2 : (MACRO)             	cpy1 R11,R11
     457/     6B2 : 8B                          glo     R11
     457/     6B3 : AB                          plo     R11
     458/     6B4 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 38 - 2/13/2013 16:29:36


     458/     6B4 : F8 00                       ldi     0
     458/     6B6 : BB                          phi     11
     459/     6B7 : (MACRO)             	jneU2I r11,0,L36; NE
     459/     6B7 : 8B                          glo     R11
     459/     6B8 : FF 00                       smi     (0)#256
     459/     6BA : CA 06 80                    lbnz    L36
     459/     6BD : 9B                          ghi     R11
     459/     6BE : 7F 00                       smbi    (0)>>8; was/256
     459/     6C0 : CA 06 80                    lbnz    L36
     460/     6C3 :                     ;	return(save);
     461/     6C3 : (MACRO)             	ld2 R15,'O',sp,(-4+4)
     461/     6C3 : =>TRUE                      if      ('O'='O')
     461/     6C3 :  (MACRO-2)                          ldAX    memAddr,SP,(-4+4)
     461/     6C3 : 82                          glo     SP
     461/     6C4 : FC 00                       adi     ((-4+4))#256
     461/     6C6 : AE                          plo     MEMADDR
     461/     6C7 : 92                          ghi     SP
     461/     6C8 : 7C 00                       adci    ((-4+4))>>8; was/256
     461/     6CA : BE                          phi     MEMADDR
     461/     6CB : =>FALSE                     else
     461/     6CB :                                     ldAD    memAddr,SP
     461/     6CB : [461]                       endif
     461/     6CB : 4E                          lda     memAddr
     461/     6CC : BF                          phi     R15
     461/     6CD : 0E                          ldn     memAddr
     461/     6CE : AF                          plo     R15
     462/     6CF :                     L35:
     463/     6CF : (MACRO)             	alu2I sp,sp,2,adi,adci; virtual frame release
     463/     6CF : 82                          glo     SP
     463/     6D0 : FC 02                       ADI     (2)#256
     463/     6D2 : A2                          plo     SP
     463/     6D3 : 92                          ghi     SP
     463/     6D4 : 7C 00                       ADCI     (2)>>8; was/256
     463/     6D6 : B2                          phi     SP
     464/     6D7 : (MACRO)             	Cretn
     464/     6D7 : D5                          sep     RRET
     465/     6D8 :                     
     466/     6D8 :                     _printstr:
     467/     6D8 : (MACRO)             	alu2I sp,sp,6,smi,smbi
     467/     6D8 : 82                          glo     SP
     467/     6D9 : FF 06                       SMI     (6)#256
     467/     6DB : A2                          plo     SP
     467/     6DC : 92                          ghi     SP
     467/     6DD : 7F 00                       SMBI     (6)>>8; was/256
     467/     6DF : B2                          phi     SP
     468/     6E0 : (MACRO)             	alu2I memaddr,sp,(5),adi,adci
     468/     6E0 : 82                          glo     SP
     468/     6E1 : FC 05                       ADI     ((5))#256
     468/     6E3 : AE                          plo     MEMADDR
     468/     6E4 : 92                          ghi     SP
     468/     6E5 : 7C 00                       ADCI     ((5))>>8; was/256
     468/     6E7 : BE                          phi     MEMADDR
     469/     6E8 : EE                  	sex	memaddr
     470/     6E9 : (MACRO)             	savmi r7
     470/     6E9 : 87                          glo     R7
     470/     6EA : 73                          stxd            ;R7 x is primed to the spot to start the saves
     470/     6EB : 97                          ghi     R7
     470/     6EC : 73                          stxd            ;and it end up where needed to do the next one
     471/     6ED : E2                  	sex sp
     472/     6EE : (MACRO)             	cpy2 r7,r12; function(2055) 1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 39 - 2/13/2013 16:29:36


     472/     6EE : 8C                          glo     R12
     472/     6EF : A7                          plo     R7
     472/     6F0 : 9C                          ghi     R12
     472/     6F1 : B7                          phi     R7
     473/     6F2 :                     ;void printstr(char *ptr){
     474/     6F2 : C0 07 11            	lbr L42
     475/     6F5 :                     L41:
     476/     6F5 :                     ;    while(*ptr) out5(*ptr++);
     477/     6F5 : (MACRO)             	cpy2 R11,R7
     477/     6F5 : 87                          glo     R7
     477/     6F6 : AB                          plo     R11
     477/     6F7 : 97                          ghi     R7
     477/     6F8 : BB                          phi     R11
     478/     6F9 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     478/     6F9 : =>TRUE                      if      ('O'='O')
     478/     6F9 :  (MACRO-2)                          ldAX    R7,R11,(1)
     478/     6F9 : 8B                          glo     R11
     478/     6FA : FC 01                       adi     ((1))#256
     478/     6FC : A7                          plo     R7
     478/     6FD : 9B                          ghi     R11
     478/     6FE : 7C 00                       adci    ((1))>>8; was/256
     478/     700 : B7                          phi     R7
     478/     701 : =>FALSE                     else
     478/     701 :                                     ldAD    R7,R11
     478/     701 : [478]                       endif
     479/     701 : (MACRO)             	ld1 R12,'O',R11,0
     479/     701 : =>TRUE                      if      ('O'='O')
     479/     701 :  (MACRO-2)                          ldAX    memAddr,R11,0
     479/     701 : 8B                          glo     R11
     479/     702 : FC 00                       adi     (0)#256
     479/     704 : AE                          plo     MEMADDR
     479/     705 : 9B                          ghi     R11
     479/     706 : 7C 00                       adci    (0)>>8; was/256
     479/     708 : BE                          phi     MEMADDR
     479/     709 : =>FALSE                     else
     479/     709 :                                     ldAD    memAddr,R11
     479/     709 : [479]                       endif
     479/     709 : 0E                          ldn     memAddr
     479/     70A : AC                          plo     R12
     480/     70B : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     480/     70B : F8 00                       ldi     0
     480/     70D : BC                          phi     12
     481/     70E : (MACRO)             	Ccall _out5
     481/     70E : D4                          sep     RCALL
     481/     70F : 15 13                       dw      _OUT5
     482/     711 :                     L42:
     483/     711 : (MACRO)             	ld1 R11,'O',R7,0
     483/     711 : =>TRUE                      if      ('O'='O')
     483/     711 :  (MACRO-2)                          ldAX    memAddr,R7,0
     483/     711 : 87                          glo     R7
     483/     712 : FC 00                       adi     (0)#256
     483/     714 : AE                          plo     MEMADDR
     483/     715 : 97                          ghi     R7
     483/     716 : 7C 00                       adci    (0)>>8; was/256
     483/     718 : BE                          phi     MEMADDR
     483/     719 : =>FALSE                     else
     483/     719 :                                     ldAD    memAddr,R7
     483/     719 : [483]                       endif
     483/     719 : 0E                          ldn     memAddr
     483/     71A : AB                          plo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 40 - 2/13/2013 16:29:36


     484/     71B : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     484/     71B : F8 00                       ldi     0
     484/     71D : BB                          phi     11
     485/     71E : (MACRO)             	jneU2I r11,0,L41; NE
     485/     71E : 8B                          glo     R11
     485/     71F : FF 00                       smi     (0)#256
     485/     721 : CA 06 F5                    lbnz    L41
     485/     724 : 9B                          ghi     R11
     485/     725 : 7F 00                       smbi    (0)>>8; was/256
     485/     727 : CA 06 F5                    lbnz    L41
     486/     72A :                     ;}
     487/     72A :                     L40:
     488/     72A : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     488/     72A : 82                          glo     SP
     488/     72B : FC 04                       ADI     ((4))#256
     488/     72D : AE                          plo     MEMADDR
     488/     72E : 92                          ghi     SP
     488/     72F : 7C 00                       ADCI     ((4))>>8; was/256
     488/     731 : BE                          phi     MEMADDR
     489/     732 : (MACRO)             	rldmi r7,memaddr
     489/     732 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     489/     733 : B7                          phi     R7
     489/     734 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     489/     735 : A7                          plo     R7
     490/     736 : (MACRO)             	alu2I sp,sp,6,adi,adci; virtual frame release
     490/     736 : 82                          glo     SP
     490/     737 : FC 06                       ADI     (6)#256
     490/     739 : A2                          plo     SP
     490/     73A : 92                          ghi     SP
     490/     73B : 7C 00                       ADCI     (6)>>8; was/256
     490/     73D : B2                          phi     SP
     491/     73E : (MACRO)             	Cretn
     491/     73E : D5                          sep     RRET
     492/     73F :                     
     493/     73F :                     _itoa:
     494/     73F : (MACRO)             	alu2I sp,sp,14,smi,smbi
     494/     73F : 82                          glo     SP
     494/     740 : FF 0E                       SMI     (14)#256
     494/     742 : A2                          plo     SP
     494/     743 : 92                          ghi     SP
     494/     744 : 7F 00                       SMBI     (14)>>8; was/256
     494/     746 : B2                          phi     SP
     495/     747 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     495/     747 : 82                          glo     SP
     495/     748 : FC 09                       ADI     ((9))#256
     495/     74A : AE                          plo     MEMADDR
     495/     74B : 92                          ghi     SP
     495/     74C : 7C 00                       ADCI     ((9))>>8; was/256
     495/     74E : BE                          phi     MEMADDR
     496/     74F : EE                  	sex	memaddr
     497/     750 : (MACRO)             	savmi r0
     497/     750 : 80                          glo     R0
     497/     751 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     497/     752 : 90                          ghi     R0
     497/     753 : 73                          stxd            ;and it end up where needed to do the next one
     498/     754 : (MACRO)             	savmi r1
     498/     754 : 81                          glo     R1
     498/     755 : 73                          stxd            ;R1 x is primed to the spot to start the saves
     498/     756 : 91                          ghi     R1
     498/     757 : 73                          stxd            ;and it end up where needed to do the next one
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 41 - 2/13/2013 16:29:36


     499/     758 : (MACRO)             	savmi r7
     499/     758 : 87                          glo     R7
     499/     759 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     499/     75A : 97                          ghi     R7
     499/     75B : 73                          stxd            ;and it end up where needed to do the next one
     500/     75C : E2                  	sex sp
     501/     75D : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     501/     75D : =>TRUE                      if      ('O'='O')
     501/     75D :  (MACRO-2)                          ldAX    memAddr,SP,(16)
     501/     75D : 82                          glo     SP
     501/     75E : FC 10                       adi     ((16))#256
     501/     760 : AE                          plo     MEMADDR
     501/     761 : 92                          ghi     SP
     501/     762 : 7C 00                       adci    ((16))>>8; was/256
     501/     764 : BE                          phi     MEMADDR
     501/     765 : =>FALSE                     else
     501/     765 :                                     ldAD    memAddr,SP
     501/     765 : [501]                       endif
     501/     765 : 9C                          ghi     R12
     501/     766 : 5E                          str     memAddr
     501/     767 : 1E                          inc     memAddr
     501/     768 : 8C                          glo     R12
     501/     769 : 5E                          str     memAddr
     502/     76A : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     502/     76A : =>TRUE                      if      ('O'='O')
     502/     76A :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     502/     76A : 82                          glo     SP
     502/     76B : FC 12                       adi     ((18))#256
     502/     76D : AE                          plo     MEMADDR
     502/     76E : 92                          ghi     SP
     502/     76F : 7C 00                       adci    ((18))>>8; was/256
     502/     771 : BE                          phi     MEMADDR
     502/     772 : =>FALSE                     else
     502/     772 :                                     ldAD    memAddr,SP
     502/     772 : [502]                       endif
     502/     772 : 9D                          ghi     R13
     502/     773 : 5E                          str     memAddr
     502/     774 : 1E                          inc     memAddr
     502/     775 : 8D                          glo     R13
     502/     776 : 5E                          str     memAddr
     503/     777 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     504/     777 :                     ;	unsigned int flag=0;
     505/     777 : (MACRO)             	ldA2 R11,'D',(0),0; reg:addr
     505/     777 : =>FALSE                     if      ('D'='O')
     505/     777 :                                     ldAX    R11,(0),0
     505/     777 : =>TRUE                      else
     505/     777 :  (MACRO-2)                          ldAD    R11,(0)
     505/     777 : F8 00                       ldi     ((0))&255
     505/     779 : AB                          plo     R11
     505/     77A : F8 00                       ldi     ((0))>>8; was/256
     505/     77C : BB                          phi     R11
     505/     77D : [505]                       endif
     506/     77D : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     506/     77D : =>TRUE                      if      ('O'='O')
     506/     77D :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     506/     77D : 82                          glo     SP
     506/     77E : FC 0C                       adi     ((-4+16))#256
     506/     780 : AE                          plo     MEMADDR
     506/     781 : 92                          ghi     SP
     506/     782 : 7C 00                       adci    ((-4+16))>>8; was/256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 42 - 2/13/2013 16:29:36


     506/     784 : BE                          phi     MEMADDR
     506/     785 : =>FALSE                     else
     506/     785 :                                     ldAD    memAddr,SP
     506/     785 : [506]                       endif
     506/     785 : 9B                          ghi     R11
     506/     786 : 5E                          str     memAddr
     506/     787 : 1E                          inc     memAddr
     506/     788 : 8B                          glo     R11
     506/     789 : 5E                          str     memAddr
     507/     78A :                     ;	char * bptr; bptr=buffer;
     508/     78A : (MACRO)             	ld2 R11,'O',sp,(2+16)
     508/     78A : =>TRUE                      if      ('O'='O')
     508/     78A :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
     508/     78A : 82                          glo     SP
     508/     78B : FC 12                       adi     ((2+16))#256
     508/     78D : AE                          plo     MEMADDR
     508/     78E : 92                          ghi     SP
     508/     78F : 7C 00                       adci    ((2+16))>>8; was/256
     508/     791 : BE                          phi     MEMADDR
     508/     792 : =>FALSE                     else
     508/     792 :                                     ldAD    memAddr,SP
     508/     792 : [508]                       endif
     508/     792 : 4E                          lda     memAddr
     508/     793 : BB                          phi     R11
     508/     794 : 0E                          ldn     memAddr
     508/     795 : AB                          plo     R11
     509/     796 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     509/     796 : =>TRUE                      if      ('O'='O')
     509/     796 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     509/     796 : 82                          glo     SP
     509/     797 : FC 0A                       adi     ((-6+16))#256
     509/     799 : AE                          plo     MEMADDR
     509/     79A : 92                          ghi     SP
     509/     79B : 7C 00                       adci    ((-6+16))>>8; was/256
     509/     79D : BE                          phi     MEMADDR
     509/     79E : =>FALSE                     else
     509/     79E :                                     ldAD    memAddr,SP
     509/     79E : [509]                       endif
     509/     79E : 9B                          ghi     R11
     509/     79F : 5E                          str     memAddr
     509/     7A0 : 1E                          inc     memAddr
     509/     7A1 : 8B                          glo     R11
     509/     7A2 : 5E                          str     memAddr
     510/     7A3 :                     ;	if (s<0){
     511/     7A3 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     511/     7A3 : =>TRUE                      if      ('O'='O')
     511/     7A3 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     511/     7A3 : 82                          glo     SP
     511/     7A4 : FC 10                       adi     ((0+16))#256
     511/     7A6 : AE                          plo     MEMADDR
     511/     7A7 : 92                          ghi     SP
     511/     7A8 : 7C 00                       adci    ((0+16))>>8; was/256
     511/     7AA : BE                          phi     MEMADDR
     511/     7AB : =>FALSE                     else
     511/     7AB :                                     ldAD    memAddr,SP
     511/     7AB : [511]                       endif
     511/     7AB : 4E                          lda     memAddr
     511/     7AC : BB                          phi     R11
     511/     7AD : 0E                          ldn     memAddr
     511/     7AE : AB                          plo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 43 - 2/13/2013 16:29:36


     512/     7AF : (MACRO)             	jcI2I r11,0,lbdf,L45; GE is flipped test from LT
     512/     7AF : 8B                          glo     R11
     512/     7B0 : FF 00                       smi     (0)#256
     512/     7B2 : 9B                          ghi     R11
     512/     7B3 : 7F 00                       smbi    (0)>>8; was/256      ;that's a standard signed subtraction
     512/     7B5 : 9B                          ghi     R11 ;
     512/     7B6 : FB 00                       xri     (0)>>8; was/256      ;sets the top bit if the signs are different
     512/     7B8 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     512/     7B9 : C7                          lsnf    ;bypass the df flip if signs were the same
     512/     7BA : FB 01                       xri     01     ;invert original df if signs were different
     512/     7BC : 76                          shrc           ;put it back in df
     512/     7BD : C3 08 19                    LBDF    L45  ;execute 
     513/     7C0 :                     ;		*bptr='-';bptr++;
     514/     7C0 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     514/     7C0 : =>TRUE                      if      ('O'='O')
     514/     7C0 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     514/     7C0 : 82                          glo     SP
     514/     7C1 : FC 0A                       adi     ((-6+16))#256
     514/     7C3 : AE                          plo     MEMADDR
     514/     7C4 : 92                          ghi     SP
     514/     7C5 : 7C 00                       adci    ((-6+16))>>8; was/256
     514/     7C7 : BE                          phi     MEMADDR
     514/     7C8 : =>FALSE                     else
     514/     7C8 :                                     ldAD    memAddr,SP
     514/     7C8 : [514]                       endif
     514/     7C8 : 4E                          lda     memAddr
     514/     7C9 : BB                          phi     R11
     514/     7CA : 0E                          ldn     memAddr
     514/     7CB : AB                          plo     R11
     515/     7CC : (MACRO)             	ldA2 R10,'D',(45),0; reg:addr
     515/     7CC : =>FALSE                     if      ('D'='O')
     515/     7CC :                                     ldAX    R10,(45),0
     515/     7CC : =>TRUE                      else
     515/     7CC :  (MACRO-2)                          ldAD    R10,(45)
     515/     7CC : F8 2D                       ldi     ((45))&255
     515/     7CE : AA                          plo     R10
     515/     7CF : F8 00                       ldi     ((45))>>8; was/256
     515/     7D1 : BA                          phi     R10
     515/     7D2 : [515]                       endif
     516/     7D2 : (MACRO)             	st1 R10,'O',R11,0
     516/     7D2 : =>TRUE                      if      ('O'='O')
     516/     7D2 :  (MACRO-2)                          ldAX    memAddr,R11,0
     516/     7D2 : 8B                          glo     R11
     516/     7D3 : FC 00                       adi     (0)#256
     516/     7D5 : AE                          plo     MEMADDR
     516/     7D6 : 9B                          ghi     R11
     516/     7D7 : 7C 00                       adci    (0)>>8; was/256
     516/     7D9 : BE                          phi     MEMADDR
     516/     7DA : =>FALSE                     else
     516/     7DA :                                     ldAD    memAddr,R11
     516/     7DA : [516]                       endif
     516/     7DA : 8A                          glo     R10
     516/     7DB : 5E                          str     memAddr
     517/     7DC : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     517/     7DC : =>TRUE                      if      ('O'='O')
     517/     7DC :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     517/     7DC : 82                          glo     SP
     517/     7DD : FC 0A                       adi     ((-6+16))#256
     517/     7DF : AE                          plo     MEMADDR
     517/     7E0 : 92                          ghi     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 44 - 2/13/2013 16:29:36


     517/     7E1 : 7C 00                       adci    ((-6+16))>>8; was/256
     517/     7E3 : BE                          phi     MEMADDR
     517/     7E4 : =>FALSE                     else
     517/     7E4 :                                     ldAD    memAddr,SP
     517/     7E4 : [517]                       endif
     517/     7E4 : 4E                          lda     memAddr
     517/     7E5 : BB                          phi     R11
     517/     7E6 : 0E                          ldn     memAddr
     517/     7E7 : AB                          plo     R11
     518/     7E8 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     518/     7E8 : =>TRUE                      if      ('O'='O')
     518/     7E8 :  (MACRO-2)                          ldAX    R11,R11,(1)
     518/     7E8 : 8B                          glo     R11
     518/     7E9 : FC 01                       adi     ((1))#256
     518/     7EB : AB                          plo     R11
     518/     7EC : 9B                          ghi     R11
     518/     7ED : 7C 00                       adci    ((1))>>8; was/256
     518/     7EF : BB                          phi     R11
     518/     7F0 : =>FALSE                     else
     518/     7F0 :                                     ldAD    R11,R11
     518/     7F0 : [518]                       endif
     519/     7F0 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     519/     7F0 : =>TRUE                      if      ('O'='O')
     519/     7F0 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     519/     7F0 : 82                          glo     SP
     519/     7F1 : FC 0A                       adi     ((-6+16))#256
     519/     7F3 : AE                          plo     MEMADDR
     519/     7F4 : 92                          ghi     SP
     519/     7F5 : 7C 00                       adci    ((-6+16))>>8; was/256
     519/     7F7 : BE                          phi     MEMADDR
     519/     7F8 : =>FALSE                     else
     519/     7F8 :                                     ldAD    memAddr,SP
     519/     7F8 : [519]                       endif
     519/     7F8 : 9B                          ghi     R11
     519/     7F9 : 5E                          str     memAddr
     519/     7FA : 1E                          inc     memAddr
     519/     7FB : 8B                          glo     R11
     519/     7FC : 5E                          str     memAddr
     520/     7FD :                     ;		n=-s;
     521/     7FD : (MACRO)             	ld2 R11,'O',sp,(0+16)
     521/     7FD : =>TRUE                      if      ('O'='O')
     521/     7FD :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     521/     7FD : 82                          glo     SP
     521/     7FE : FC 10                       adi     ((0+16))#256
     521/     800 : AE                          plo     MEMADDR
     521/     801 : 92                          ghi     SP
     521/     802 : 7C 00                       adci    ((0+16))>>8; was/256
     521/     804 : BE                          phi     MEMADDR
     521/     805 : =>FALSE                     else
     521/     805 :                                     ldAD    memAddr,SP
     521/     805 : [521]                       endif
     521/     805 : 4E                          lda     memAddr
     521/     806 : BB                          phi     R11
     521/     807 : 0E                          ldn     memAddr
     521/     808 : AB                          plo     R11
     522/     809 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     522/     809 : 8B                          glo     R11                     ;(flip all the bits and add 1)
     522/     80A : FB FF                       xri     0xff
     522/     80C : AB                          plo     R11
     522/     80D : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 45 - 2/13/2013 16:29:36


     522/     80E : FB FF                       xri     0xff
     522/     810 : BB                          phi     R11
     522/     811 : 1B                          inc     R11
     523/     812 : (MACRO)             	cpy2 R1,R11
     523/     812 : 8B                          glo     R11
     523/     813 : A1                          plo     R1
     523/     814 : 9B                          ghi     R11
     523/     815 : B1                          phi     R1
     524/     816 :                     ;	} else{
     525/     816 : C0 08 29            	lbr L46
     526/     819 :                     L45:
     527/     819 :                     ;		n=s;
     528/     819 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     528/     819 : =>TRUE                      if      ('O'='O')
     528/     819 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     528/     819 : 82                          glo     SP
     528/     81A : FC 10                       adi     ((0+16))#256
     528/     81C : AE                          plo     MEMADDR
     528/     81D : 92                          ghi     SP
     528/     81E : 7C 00                       adci    ((0+16))>>8; was/256
     528/     820 : BE                          phi     MEMADDR
     528/     821 : =>FALSE                     else
     528/     821 :                                     ldAD    memAddr,SP
     528/     821 : [528]                       endif
     528/     821 : 4E                          lda     memAddr
     528/     822 : BB                          phi     R11
     528/     823 : 0E                          ldn     memAddr
     528/     824 : AB                          plo     R11
     529/     825 : (MACRO)             	cpy2 R1,R11
     529/     825 : 8B                          glo     R11
     529/     826 : A1                          plo     R1
     529/     827 : 9B                          ghi     R11
     529/     828 : B1                          phi     R1
     530/     829 :                     ;	}
     531/     829 :                     L46:
     532/     829 :                     ;	k=10000;
     533/     829 : (MACRO)             	ldA2 R7,'D',(10000),0; reg:addr
     533/     829 : =>FALSE                     if      ('D'='O')
     533/     829 :                                     ldAX    R7,(10000),0
     533/     829 : =>TRUE                      else
     533/     829 :  (MACRO-2)                          ldAD    R7,(10000)
     533/     829 : F8 10                       ldi     ((10000))&255
     533/     82B : A7                          plo     R7
     533/     82C : F8 27                       ldi     ((10000))>>8; was/256
     533/     82E : B7                          phi     R7
     533/     82F : [533]                       endif
     534/     82F : C0 08 FA            	lbr L48
     535/     832 :                     L47:
     536/     832 :                     ;	while(k>0){
     537/     832 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     538/     832 : (MACRO)             	ldA2 R0,'D',(0),0; reg:addr
     538/     832 : =>FALSE                     if      ('D'='O')
     538/     832 :                                     ldAX    R0,(0),0
     538/     832 : =>TRUE                      else
     538/     832 :  (MACRO-2)                          ldAD    R0,(0)
     538/     832 : F8 00                       ldi     ((0))&255
     538/     834 : A0                          plo     R0
     538/     835 : F8 00                       ldi     ((0))>>8; was/256
     538/     837 : B0                          phi     R0
     538/     838 : [538]                       endif
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 46 - 2/13/2013 16:29:36


     539/     838 : C0 08 48            	lbr L53
     540/     83B :                     L50:
     541/     83B :                     L51:
     542/     83B : 10                  	inc R0
     543/     83C : (MACRO)             	alu2 R1,R1,R7,sm,smb
     543/     83C : 22                          dec     sp ;make a work ares
     543/     83D : 87                          glo     R7
     543/     83E : 52                          str     sp
     543/     83F : 81                          glo     R1
     543/     840 : F7                          SM             ;calculate the low order byte
     543/     841 : A1                          plo     R1
     543/     842 : 97                          ghi     R7
     543/     843 : 52                          str     sp
     543/     844 : 91                          ghi     R1
     543/     845 : 77                          SMB             ;calculate the high byte
     543/     846 : B1                          phi     R1
     543/     847 : 12                          inc     sp      ;release the work area
     544/     848 :                     L53:
     545/     848 : (MACRO)             	jcU2 r1,r7,lbdf,L50 ;LE is flipped test & operands
     545/     848 : 22                          dec     sp
     545/     849 : 87                          glo     R7
     545/     84A : 52                          str     sp
     545/     84B : 81                          glo     R1
     545/     84C : F7                          sm
     545/     84D : 97                          ghi     R7
     545/     84E : 52                          str     sp
     545/     84F : 91                          ghi     R1
     545/     850 : 77                          smb
     545/     851 : 12                          inc     sp
     545/     852 : C3 08 3B                    LBDF    L50
     546/     855 :                     ;		if (flag || r>0||k==1){
     547/     855 : (MACRO)             	ldA2 R11,'D',(0),0; reg:addr
     547/     855 : =>FALSE                     if      ('D'='O')
     547/     855 :                                     ldAX    R11,(0),0
     547/     855 : =>TRUE                      else
     547/     855 :  (MACRO-2)                          ldAD    R11,(0)
     547/     855 : F8 00                       ldi     ((0))&255
     547/     857 : AB                          plo     R11
     547/     858 : F8 00                       ldi     ((0))>>8; was/256
     547/     85A : BB                          phi     R11
     547/     85B : [547]                       endif
     548/     85B : (MACRO)             	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
     548/     85B : =>TRUE                      if      ('O'='O')
     548/     85B :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     548/     85B : 82                          glo     SP
     548/     85C : FC 0C                       adi     ((-4+16))#256
     548/     85E : AE                          plo     MEMADDR
     548/     85F : 92                          ghi     SP
     548/     860 : 7C 00                       adci    ((-4+16))>>8; was/256
     548/     862 : BE                          phi     MEMADDR
     548/     863 : =>FALSE                     else
     548/     863 :                                     ldAD    memAddr,SP
     548/     863 : [548]                       endif
     548/     863 : 4E                          lda     memAddr
     548/     864 : BA                          phi     R10
     548/     865 : 0E                          ldn     memAddr
     548/     866 : AA                          plo     R10
     549/     867 : (MACRO)             	jneU2 r10,r11,L57; NE
     549/     867 : 22                          dec     sp
     549/     868 : 8B                          glo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 47 - 2/13/2013 16:29:36


     549/     869 : 52                          str     sp
     549/     86A : 8A                          glo     R10
     549/     86B : F7                          sm
     549/     86C : 12                          inc     sp
     549/     86D : CA 08 97                    lbnz    L57
     549/     870 : 22                          dec     sp
     549/     871 : 9B                          ghi     R11
     549/     872 : 52                          str     sp
     549/     873 : 9A                          ghi     R10
     549/     874 : 77                          smb
     549/     875 : 12                          inc     sp
     549/     876 : CA 08 97                    lbnz    L57
     550/     879 : (MACRO)             	jneU2 r0,r11,L57; NE
     550/     879 : 22                          dec     sp
     550/     87A : 8B                          glo     R11
     550/     87B : 52                          str     sp
     550/     87C : 80                          glo     R0
     550/     87D : F7                          sm
     550/     87E : 12                          inc     sp
     550/     87F : CA 08 97                    lbnz    L57
     550/     882 : 22                          dec     sp
     550/     883 : 9B                          ghi     R11
     550/     884 : 52                          str     sp
     550/     885 : 90                          ghi     R0
     550/     886 : 77                          smb
     550/     887 : 12                          inc     sp
     550/     888 : CA 08 97                    lbnz    L57
     551/     88B : (MACRO)             	jneU2I r7,1,L54; NE
     551/     88B : 87                          glo     R7
     551/     88C : FF 01                       smi     (1)#256
     551/     88E : CA 08 E9                    lbnz    L54
     551/     891 : 97                          ghi     R7
     551/     892 : 7F 00                       smbi    (1)>>8; was/256
     551/     894 : CA 08 E9                    lbnz    L54
     552/     897 :                     L57:
     553/     897 :                     ;			*bptr=('0'+r);bptr++;
     554/     897 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     554/     897 : =>TRUE                      if      ('O'='O')
     554/     897 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     554/     897 : 82                          glo     SP
     554/     898 : FC 0A                       adi     ((-6+16))#256
     554/     89A : AE                          plo     MEMADDR
     554/     89B : 92                          ghi     SP
     554/     89C : 7C 00                       adci    ((-6+16))>>8; was/256
     554/     89E : BE                          phi     MEMADDR
     554/     89F : =>FALSE                     else
     554/     89F :                                     ldAD    memAddr,SP
     554/     89F : [554]                       endif
     554/     89F : 4E                          lda     memAddr
     554/     8A0 : BB                          phi     R11
     554/     8A1 : 0E                          ldn     memAddr
     554/     8A2 : AB                          plo     R11
     555/     8A3 : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     555/     8A3 : =>TRUE                      if      ('O'='O')
     555/     8A3 :  (MACRO-2)                          ldAX    R10,R0,(48)
     555/     8A3 : 80                          glo     R0
     555/     8A4 : FC 30                       adi     ((48))#256
     555/     8A6 : AA                          plo     R10
     555/     8A7 : 90                          ghi     R0
     555/     8A8 : 7C 00                       adci    ((48))>>8; was/256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 48 - 2/13/2013 16:29:36


     555/     8AA : BA                          phi     R10
     555/     8AB : =>FALSE                     else
     555/     8AB :                                     ldAD    R10,R0
     555/     8AB : [555]                       endif
     556/     8AB : (MACRO)             	st1 R10,'O',R11,0
     556/     8AB : =>TRUE                      if      ('O'='O')
     556/     8AB :  (MACRO-2)                          ldAX    memAddr,R11,0
     556/     8AB : 8B                          glo     R11
     556/     8AC : FC 00                       adi     (0)#256
     556/     8AE : AE                          plo     MEMADDR
     556/     8AF : 9B                          ghi     R11
     556/     8B0 : 7C 00                       adci    (0)>>8; was/256
     556/     8B2 : BE                          phi     MEMADDR
     556/     8B3 : =>FALSE                     else
     556/     8B3 :                                     ldAD    memAddr,R11
     556/     8B3 : [556]                       endif
     556/     8B3 : 8A                          glo     R10
     556/     8B4 : 5E                          str     memAddr
     557/     8B5 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     557/     8B5 : =>TRUE                      if      ('O'='O')
     557/     8B5 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     557/     8B5 : 82                          glo     SP
     557/     8B6 : FC 0A                       adi     ((-6+16))#256
     557/     8B8 : AE                          plo     MEMADDR
     557/     8B9 : 92                          ghi     SP
     557/     8BA : 7C 00                       adci    ((-6+16))>>8; was/256
     557/     8BC : BE                          phi     MEMADDR
     557/     8BD : =>FALSE                     else
     557/     8BD :                                     ldAD    memAddr,SP
     557/     8BD : [557]                       endif
     557/     8BD : 4E                          lda     memAddr
     557/     8BE : BB                          phi     R11
     557/     8BF : 0E                          ldn     memAddr
     557/     8C0 : AB                          plo     R11
     558/     8C1 : (MACRO)             	ldA2 R11,'O',R11,(1); reg:addr
     558/     8C1 : =>TRUE                      if      ('O'='O')
     558/     8C1 :  (MACRO-2)                          ldAX    R11,R11,(1)
     558/     8C1 : 8B                          glo     R11
     558/     8C2 : FC 01                       adi     ((1))#256
     558/     8C4 : AB                          plo     R11
     558/     8C5 : 9B                          ghi     R11
     558/     8C6 : 7C 00                       adci    ((1))>>8; was/256
     558/     8C8 : BB                          phi     R11
     558/     8C9 : =>FALSE                     else
     558/     8C9 :                                     ldAD    R11,R11
     558/     8C9 : [558]                       endif
     559/     8C9 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     559/     8C9 : =>TRUE                      if      ('O'='O')
     559/     8C9 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     559/     8C9 : 82                          glo     SP
     559/     8CA : FC 0A                       adi     ((-6+16))#256
     559/     8CC : AE                          plo     MEMADDR
     559/     8CD : 92                          ghi     SP
     559/     8CE : 7C 00                       adci    ((-6+16))>>8; was/256
     559/     8D0 : BE                          phi     MEMADDR
     559/     8D1 : =>FALSE                     else
     559/     8D1 :                                     ldAD    memAddr,SP
     559/     8D1 : [559]                       endif
     559/     8D1 : 9B                          ghi     R11
     559/     8D2 : 5E                          str     memAddr
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 49 - 2/13/2013 16:29:36


     559/     8D3 : 1E                          inc     memAddr
     559/     8D4 : 8B                          glo     R11
     559/     8D5 : 5E                          str     memAddr
     560/     8D6 :                     ;			flag='y';
     561/     8D6 : (MACRO)             	ldA2 R11,'D',(121),0; reg:addr
     561/     8D6 : =>FALSE                     if      ('D'='O')
     561/     8D6 :                                     ldAX    R11,(121),0
     561/     8D6 : =>TRUE                      else
     561/     8D6 :  (MACRO-2)                          ldAD    R11,(121)
     561/     8D6 : F8 79                       ldi     ((121))&255
     561/     8D8 : AB                          plo     R11
     561/     8D9 : F8 00                       ldi     ((121))>>8; was/256
     561/     8DB : BB                          phi     R11
     561/     8DC : [561]                       endif
     562/     8DC : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
     562/     8DC : =>TRUE                      if      ('O'='O')
     562/     8DC :  (MACRO-2)                          ldAX    memAddr,SP,(-4+16)
     562/     8DC : 82                          glo     SP
     562/     8DD : FC 0C                       adi     ((-4+16))#256
     562/     8DF : AE                          plo     MEMADDR
     562/     8E0 : 92                          ghi     SP
     562/     8E1 : 7C 00                       adci    ((-4+16))>>8; was/256
     562/     8E3 : BE                          phi     MEMADDR
     562/     8E4 : =>FALSE                     else
     562/     8E4 :                                     ldAD    memAddr,SP
     562/     8E4 : [562]                       endif
     562/     8E4 : 9B                          ghi     R11
     562/     8E5 : 5E                          str     memAddr
     562/     8E6 : 1E                          inc     memAddr
     562/     8E7 : 8B                          glo     R11
     562/     8E8 : 5E                          str     memAddr
     563/     8E9 :                     ;		}
     564/     8E9 :                     L54:
     565/     8E9 :                     ;		k=k/10;
     566/     8E9 : (MACRO)             	cpy2 R12,R7
     566/     8E9 : 87                          glo     R7
     566/     8EA : AC                          plo     R12
     566/     8EB : 97                          ghi     R7
     566/     8EC : BC                          phi     R12
     567/     8ED : (MACRO)             	ldA2 R13,'D',(10),0; reg:addr
     567/     8ED : =>FALSE                     if      ('D'='O')
     567/     8ED :                                     ldAX    R13,(10),0
     567/     8ED : =>TRUE                      else
     567/     8ED :  (MACRO-2)                          ldAD    R13,(10)
     567/     8ED : F8 0A                       ldi     ((10))&255
     567/     8EF : AD                          plo     R13
     567/     8F0 : F8 00                       ldi     ((10))>>8; was/256
     567/     8F2 : BD                          phi     R13
     567/     8F3 : [567]                       endif
     568/     8F3 : (MACRO)             	Ccall _divu2
     568/     8F3 : D4                          sep     RCALL
     568/     8F4 : 12 49                       dw      _DIVU2
     569/     8F6 : (MACRO)             	cpy2 R7,R15
     569/     8F6 : 8F                          glo     R15
     569/     8F7 : A7                          plo     R7
     569/     8F8 : 9F                          ghi     R15
     569/     8F9 : B7                          phi     R7
     570/     8FA :                     ;	}
     571/     8FA :                     L48:
     572/     8FA :                     ;	while(k>0){
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 50 - 2/13/2013 16:29:36


     573/     8FA : (MACRO)             	jnzU2 r7,L47; NE 0
     573/     8FA : 87                          glo     R7
     573/     8FB : CA 08 32                    lbnz    L47
     573/     8FE : 97                          ghi     R7
     573/     8FF : CA 08 32                    lbnz    L47
     574/     902 :                     ;	*bptr='\0';
     575/     902 : (MACRO)             	ld2 R11,'O',sp,(-6+16)
     575/     902 : =>TRUE                      if      ('O'='O')
     575/     902 :  (MACRO-2)                          ldAX    memAddr,SP,(-6+16)
     575/     902 : 82                          glo     SP
     575/     903 : FC 0A                       adi     ((-6+16))#256
     575/     905 : AE                          plo     MEMADDR
     575/     906 : 92                          ghi     SP
     575/     907 : 7C 00                       adci    ((-6+16))>>8; was/256
     575/     909 : BE                          phi     MEMADDR
     575/     90A : =>FALSE                     else
     575/     90A :                                     ldAD    memAddr,SP
     575/     90A : [575]                       endif
     575/     90A : 4E                          lda     memAddr
     575/     90B : BB                          phi     R11
     575/     90C : 0E                          ldn     memAddr
     575/     90D : AB                          plo     R11
     576/     90E : (MACRO)             	ldA2 R10,'D',(0),0; reg:addr
     576/     90E : =>FALSE                     if      ('D'='O')
     576/     90E :                                     ldAX    R10,(0),0
     576/     90E : =>TRUE                      else
     576/     90E :  (MACRO-2)                          ldAD    R10,(0)
     576/     90E : F8 00                       ldi     ((0))&255
     576/     910 : AA                          plo     R10
     576/     911 : F8 00                       ldi     ((0))>>8; was/256
     576/     913 : BA                          phi     R10
     576/     914 : [576]                       endif
     577/     914 : (MACRO)             	st1 R10,'O',R11,0
     577/     914 : =>TRUE                      if      ('O'='O')
     577/     914 :  (MACRO-2)                          ldAX    memAddr,R11,0
     577/     914 : 8B                          glo     R11
     577/     915 : FC 00                       adi     (0)#256
     577/     917 : AE                          plo     MEMADDR
     577/     918 : 9B                          ghi     R11
     577/     919 : 7C 00                       adci    (0)>>8; was/256
     577/     91B : BE                          phi     MEMADDR
     577/     91C : =>FALSE                     else
     577/     91C :                                     ldAD    memAddr,R11
     577/     91C : [577]                       endif
     577/     91C : 8A                          glo     R10
     577/     91D : 5E                          str     memAddr
     578/     91E :                     ;	return buffer;
     579/     91E : (MACRO)             	ld2 R15,'O',sp,(2+16)
     579/     91E : =>TRUE                      if      ('O'='O')
     579/     91E :  (MACRO-2)                          ldAX    memAddr,SP,(2+16)
     579/     91E : 82                          glo     SP
     579/     91F : FC 12                       adi     ((2+16))#256
     579/     921 : AE                          plo     MEMADDR
     579/     922 : 92                          ghi     SP
     579/     923 : 7C 00                       adci    ((2+16))>>8; was/256
     579/     925 : BE                          phi     MEMADDR
     579/     926 : =>FALSE                     else
     579/     926 :                                     ldAD    memAddr,SP
     579/     926 : [579]                       endif
     579/     926 : 4E                          lda     memAddr
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 51 - 2/13/2013 16:29:36


     579/     927 : BF                          phi     R15
     579/     928 : 0E                          ldn     memAddr
     579/     929 : AF                          plo     R15
     580/     92A :                     L44:
     581/     92A : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     581/     92A : 82                          glo     SP
     581/     92B : FC 04                       ADI     ((4))#256
     581/     92D : AE                          plo     MEMADDR
     581/     92E : 92                          ghi     SP
     581/     92F : 7C 00                       ADCI     ((4))>>8; was/256
     581/     931 : BE                          phi     MEMADDR
     582/     932 : (MACRO)             	rldmi r7,memaddr
     582/     932 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     582/     933 : B7                          phi     R7
     582/     934 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     582/     935 : A7                          plo     R7
     583/     936 : (MACRO)             	rldmi r1,memaddr
     583/     936 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     583/     937 : B1                          phi     R1
     583/     938 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     583/     939 : A1                          plo     R1
     584/     93A : (MACRO)             	rldmi r0,memaddr
     584/     93A : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     584/     93B : B0                          phi     R0
     584/     93C : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     584/     93D : A0                          plo     R0
     585/     93E : (MACRO)             	alu2I sp,sp,14,adi,adci; virtual frame release
     585/     93E : 82                          glo     SP
     585/     93F : FC 0E                       ADI     (14)#256
     585/     941 : A2                          plo     SP
     585/     942 : 92                          ghi     SP
     585/     943 : 7C 00                       ADCI     (14)>>8; was/256
     585/     945 : B2                          phi     SP
     586/     946 : (MACRO)             	Cretn
     586/     946 : D5                          sep     RRET
     587/     947 :                     
     588/     947 :                     _ltoa:
     589/     947 : (MACRO)             	alu2I sp,sp,12,smi,smbi
     589/     947 : 82                          glo     SP
     589/     948 : FF 0C                       SMI     (12)#256
     589/     94A : A2                          plo     SP
     589/     94B : 92                          ghi     SP
     589/     94C : 7F 00                       SMBI     (12)>>8; was/256
     589/     94E : B2                          phi     SP
     590/     94F : (MACRO)             	alu2I memaddr,sp,(11),adi,adci
     590/     94F : 82                          glo     SP
     590/     950 : FC 0B                       ADI     ((11))#256
     590/     952 : AE                          plo     MEMADDR
     590/     953 : 92                          ghi     SP
     590/     954 : 7C 00                       ADCI     ((11))>>8; was/256
     590/     956 : BE                          phi     MEMADDR
     591/     957 : EE                  	sex	memaddr
     592/     958 : (MACRO)             	savmi r0
     592/     958 : 80                          glo     R0
     592/     959 : 73                          stxd            ;R0 x is primed to the spot to start the saves
     592/     95A : 90                          ghi     R0
     592/     95B : 73                          stxd            ;and it end up where needed to do the next one
     593/     95C : (MACRO)             	savmi r1
     593/     95C : 81                          glo     R1
     593/     95D : 73                          stxd            ;R1 x is primed to the spot to start the saves
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 52 - 2/13/2013 16:29:36


     593/     95E : 91                          ghi     R1
     593/     95F : 73                          stxd            ;and it end up where needed to do the next one
     594/     960 : (MACRO)             	savmi r7
     594/     960 : 87                          glo     R7
     594/     961 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     594/     962 : 97                          ghi     R7
     594/     963 : 73                          stxd            ;and it end up where needed to do the next one
     595/     964 : E2                  	sex sp
     596/     965 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     596/     965 :  (MACRO-2)                  cpy2    RL0,RL12 ;long reg pairs are addressed as the low order pair
     596/     965 : 8D                          glo     RL12
     596/     966 : A1                          plo     RL0
     596/     967 : 9D                          ghi     RL12
     596/     968 : B1                          phi     RL0
     596/     969 :  (MACRO-2)                  cpy2    RL0-1,RL12-1
     596/     969 : 8C                          glo     RL12-1
     596/     96A : A0                          plo     RL0-1
     596/     96B : 9C                          ghi     RL12-1
     596/     96C : B0                          phi     RL0-1
     597/     96D :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     598/     96D :                     ;	char* bptr=buffer;
     599/     96D : (MACRO)             	ld2 R7,'O',sp,(4+14)
     599/     96D : =>TRUE                      if      ('O'='O')
     599/     96D :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     599/     96D : 82                          glo     SP
     599/     96E : FC 12                       adi     ((4+14))#256
     599/     970 : AE                          plo     MEMADDR
     599/     971 : 92                          ghi     SP
     599/     972 : 7C 00                       adci    ((4+14))>>8; was/256
     599/     974 : BE                          phi     MEMADDR
     599/     975 : =>FALSE                     else
     599/     975 :                                     ldAD    memAddr,SP
     599/     975 : [599]                       endif
     599/     975 : 4E                          lda     memAddr
     599/     976 : B7                          phi     R7
     599/     977 : 0E                          ldn     memAddr
     599/     978 : A7                          plo     R7
     600/     979 :                     ;	if (s<0){
     601/     979 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     601/     979 : F8 00                       ldi     (0)&255
     601/     97B : AB                          plo     RL10
     601/     97C : F8 00                       ldi     ((0)>>8)&255; 
     601/     97E : BB                          phi     RL10
     601/     97F : F8 00                       ldi     ((0)>>16)&255; 
     601/     981 : AA                          plo     RL10-1
     601/     982 : F8 00                       ldi     ((0)>>24)&255; 
     601/     984 : BA                          phi     RL10-1
     602/     985 : (MACRO)             	jcI4 RL0,RL10,lbdf,L59; GE is flipped test from LT
     602/     985 : 22                          dec     sp ;make a work area
     602/     986 : 8B                          glo     RL10    ;lowest order byte
     602/     987 : 52                          str     sp 
     602/     988 : 81                          glo     RL0
     602/     989 : F7                          sm
     602/     98A : 9B                          ghi     RL10
     602/     98B : 52                          str     sp
     602/     98C : 91                          ghi     RL0
     602/     98D : 77                          smb          ;that's a standard signed subtraction of one reg
     602/     98E : 8A                          glo     RL10-1  ;lowest order byte of the top register
     602/     98F : 52                          str     sp 
     602/     990 : 80                          glo     RL0-1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 53 - 2/13/2013 16:29:36


     602/     991 : 77                          smb
     602/     992 : 9A                          ghi     RL10-1
     602/     993 : 52                          str     sp
     602/     994 : 90                          ghi     RL0-1
     602/     995 : 77                          smb          ;that's a standard signed subtraction of a double register
     602/     996 : 90                          ghi     RL0-1 ;
     602/     997 : F3                          xor           ;sets the top bit if the signs are different
     602/     998 : 12                          inc     sp ;release the work area
     602/     999 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     602/     99A : C7                          lsnf    ;bypass the flip if signs were the same
     602/     99B : FB 01                       xri     01     ;invert original df if signs were different
     602/     99D : 76                          shrc           ;put it back in df
     602/     99E : C3 09 DD                    LBDF    L59  ;execute 
     603/     9A1 :                     ;		*bptr++='-';
     604/     9A1 : (MACRO)             	cpy2 R11,R7
     604/     9A1 : 87                          glo     R7
     604/     9A2 : AB                          plo     R11
     604/     9A3 : 97                          ghi     R7
     604/     9A4 : BB                          phi     R11
     605/     9A5 : (MACRO)             	ldA2 R7,'O',R11,(1); reg:addr
     605/     9A5 : =>TRUE                      if      ('O'='O')
     605/     9A5 :  (MACRO-2)                          ldAX    R7,R11,(1)
     605/     9A5 : 8B                          glo     R11
     605/     9A6 : FC 01                       adi     ((1))#256
     605/     9A8 : A7                          plo     R7
     605/     9A9 : 9B                          ghi     R11
     605/     9AA : 7C 00                       adci    ((1))>>8; was/256
     605/     9AC : B7                          phi     R7
     605/     9AD : =>FALSE                     else
     605/     9AD :                                     ldAD    R7,R11
     605/     9AD : [605]                       endif
     606/     9AD : (MACRO)             	ldA2 R10,'D',(45),0; reg:addr
     606/     9AD : =>FALSE                     if      ('D'='O')
     606/     9AD :                                     ldAX    R10,(45),0
     606/     9AD : =>TRUE                      else
     606/     9AD :  (MACRO-2)                          ldAD    R10,(45)
     606/     9AD : F8 2D                       ldi     ((45))&255
     606/     9AF : AA                          plo     R10
     606/     9B0 : F8 00                       ldi     ((45))>>8; was/256
     606/     9B2 : BA                          phi     R10
     606/     9B3 : [606]                       endif
     607/     9B3 : (MACRO)             	st1 R10,'O',R11,0
     607/     9B3 : =>TRUE                      if      ('O'='O')
     607/     9B3 :  (MACRO-2)                          ldAX    memAddr,R11,0
     607/     9B3 : 8B                          glo     R11
     607/     9B4 : FC 00                       adi     (0)#256
     607/     9B6 : AE                          plo     MEMADDR
     607/     9B7 : 9B                          ghi     R11
     607/     9B8 : 7C 00                       adci    (0)>>8; was/256
     607/     9BA : BE                          phi     MEMADDR
     607/     9BB : =>FALSE                     else
     607/     9BB :                                     ldAD    memAddr,R11
     607/     9BB : [607]                       endif
     607/     9BB : 8A                          glo     R10
     607/     9BC : 5E                          str     memAddr
     608/     9BD :                     ;		s=-s;
     609/     9BD : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     609/     9BD :  (MACRO-2)                  alu4I   RL0,RL0,0xffffffff,xri,xri      ;flip all the bits
     609/     9BD : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
     609/     9BE : FB FF                       XRI     (0XFFFFFFFF)&255
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 54 - 2/13/2013 16:29:36


     609/     9C0 : A1                          plo     RL0
     609/     9C1 : 91                          ghi     RL0
     609/     9C2 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
     609/     9C4 : B1                          phi     RL0
     609/     9C5 : 80                          glo     RL0-1
     609/     9C6 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
     609/     9C8 : A0                          plo     RL0-1
     609/     9C9 : 90                          ghi     RL0-1
     609/     9CA : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
     609/     9CC : B0                          phi     RL0-1
     609/     9CD :  (MACRO-2)                  alu4i   RL0,RL0,1,adi,adci              ;and add 1
     609/     9CD : 81                          glo     RL0    ;long regs are equated to the second reg which has the low order word 
     609/     9CE : FC 01                       ADI     (1)&255
     609/     9D0 : A1                          plo     RL0
     609/     9D1 : 91                          ghi     RL0
     609/     9D2 : 7C 00                       ADCI     ((1)>>8)&255; 
     609/     9D4 : B1                          phi     RL0
     609/     9D5 : 80                          glo     RL0-1
     609/     9D6 : 7C 00                       ADCI     ((1)>>16)&255; 
     609/     9D8 : A0                          plo     RL0-1
     609/     9D9 : 90                          ghi     RL0-1
     609/     9DA : 7C 00                       ADCI     ((1)>>24)&255; 
     609/     9DC : B0                          phi     RL0-1
     610/     9DD :                     ;	}
     611/     9DD :                     L59:
     612/     9DD :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     613/     9DD : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     613/     9DD :  (MACRO-2)                  cpy2    RP1P2,RL0 ;long reg pairs are addressed as the low order pair
     613/     9DD : 81                          glo     RL0
     613/     9DE : AD                          plo     RP1P2
     613/     9DF : 91                          ghi     RL0
     613/     9E0 : BD                          phi     RP1P2
     613/     9E1 :  (MACRO-2)                  cpy2    RP1P2-1,RL0-1
     613/     9E1 : 80                          glo     RL0-1
     613/     9E2 : AC                          plo     RP1P2-1
     613/     9E3 : 90                          ghi     RL0-1
     613/     9E4 : BC                          phi     RP1P2-1
     614/     9E5 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     614/     9E5 : =>TRUE                      if      ('O'='O')
     614/     9E5 :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     614/     9E5 : 82                          glo     SP
     614/     9E6 : FC 04                       adi     ((4))#256
     614/     9E8 : AE                          plo     MEMADDR
     614/     9E9 : 92                          ghi     SP
     614/     9EA : 7C 00                       adci    ((4))>>8; was/256
     614/     9EC : BE                          phi     MEMADDR
     614/     9ED : =>FALSE                     else
     614/     9ED :                                     ldAD    memAddr,SP
     614/     9ED : [614]                       endif
     614/     9ED : 97                          ghi     R7
     614/     9EE : 5E                          str     memAddr
     614/     9EF : 1E                          inc     memAddr
     614/     9F0 : 87                          glo     R7
     614/     9F1 : 5E                          str     memAddr
     615/     9F2 : (MACRO)             	Ccall _dubdabx
     615/     9F2 : D4                          sep     RCALL
     615/     9F3 : 14 75                       dw      _DUBDABX
     616/     9F5 : (MACRO)             	cpy2 R11,R15
     616/     9F5 : 8F                          glo     R15
     616/     9F6 : AB                          plo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 55 - 2/13/2013 16:29:36


     616/     9F7 : 9F                          ghi     R15
     616/     9F8 : BB                          phi     R11
     617/     9F9 : (MACRO)             	cpy2 R12,R7
     617/     9F9 : 87                          glo     R7
     617/     9FA : AC                          plo     R12
     617/     9FB : 97                          ghi     R7
     617/     9FC : BC                          phi     R12
     618/     9FD : (MACRO)             	cpy2 R13,R11
     618/     9FD : 8B                          glo     R11
     618/     9FE : AD                          plo     R13
     618/     9FF : 9B                          ghi     R11
     618/     A00 : BD                          phi     R13
     619/     A01 : (MACRO)             	Ccall _strcpy
     619/     A01 : D4                          sep     RCALL
     619/     A02 : 06 68                       dw      _STRCPY
     620/     A04 :                     ;	return buffer;
     621/     A04 : (MACRO)             	ld2 R15,'O',sp,(4+14)
     621/     A04 : =>TRUE                      if      ('O'='O')
     621/     A04 :  (MACRO-2)                          ldAX    memAddr,SP,(4+14)
     621/     A04 : 82                          glo     SP
     621/     A05 : FC 12                       adi     ((4+14))#256
     621/     A07 : AE                          plo     MEMADDR
     621/     A08 : 92                          ghi     SP
     621/     A09 : 7C 00                       adci    ((4+14))>>8; was/256
     621/     A0B : BE                          phi     MEMADDR
     621/     A0C : =>FALSE                     else
     621/     A0C :                                     ldAD    memAddr,SP
     621/     A0C : [621]                       endif
     621/     A0C : 4E                          lda     memAddr
     621/     A0D : BF                          phi     R15
     621/     A0E : 0E                          ldn     memAddr
     621/     A0F : AF                          plo     R15
     622/     A10 :                     L58:
     623/     A10 : (MACRO)             	alu2I memaddr,sp,(6),adi,adci
     623/     A10 : 82                          glo     SP
     623/     A11 : FC 06                       ADI     ((6))#256
     623/     A13 : AE                          plo     MEMADDR
     623/     A14 : 92                          ghi     SP
     623/     A15 : 7C 00                       ADCI     ((6))>>8; was/256
     623/     A17 : BE                          phi     MEMADDR
     624/     A18 : (MACRO)             	rldmi r7,memaddr
     624/     A18 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     624/     A19 : B7                          phi     R7
     624/     A1A : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     624/     A1B : A7                          plo     R7
     625/     A1C : (MACRO)             	rldmi r1,memaddr
     625/     A1C : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     625/     A1D : B1                          phi     R1
     625/     A1E : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     625/     A1F : A1                          plo     R1
     626/     A20 : (MACRO)             	rldmi r0,memaddr
     626/     A20 : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     626/     A21 : B0                          phi     R0
     626/     A22 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     626/     A23 : A0                          plo     R0
     627/     A24 : (MACRO)             	alu2I sp,sp,12,adi,adci; virtual frame release
     627/     A24 : 82                          glo     SP
     627/     A25 : FC 0C                       ADI     (12)#256
     627/     A27 : A2                          plo     SP
     627/     A28 : 92                          ghi     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 56 - 2/13/2013 16:29:36


     627/     A29 : 7C 00                       ADCI     (12)>>8; was/256
     627/     A2B : B2                          phi     SP
     628/     A2C : (MACRO)             	Cretn
     628/     A2C : D5                          sep     RRET
     629/     A2D :                     
     630/     A2D :                     _printint:
     631/     A2D : (MACRO)             	alu2I sp,sp,12,smi,smbi
     631/     A2D : 82                          glo     SP
     631/     A2E : FF 0C                       SMI     (12)#256
     631/     A30 : A2                          plo     SP
     631/     A31 : 92                          ghi     SP
     631/     A32 : 7F 00                       SMBI     (12)>>8; was/256
     631/     A34 : B2                          phi     SP
     632/     A35 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     632/     A35 : =>TRUE                      if      ('O'='O')
     632/     A35 :  (MACRO-2)                          ldAX    memAddr,SP,(14)
     632/     A35 : 82                          glo     SP
     632/     A36 : FC 0E                       adi     ((14))#256
     632/     A38 : AE                          plo     MEMADDR
     632/     A39 : 92                          ghi     SP
     632/     A3A : 7C 00                       adci    ((14))>>8; was/256
     632/     A3C : BE                          phi     MEMADDR
     632/     A3D : =>FALSE                     else
     632/     A3D :                                     ldAD    memAddr,SP
     632/     A3D : [632]                       endif
     632/     A3D : 9C                          ghi     R12
     632/     A3E : 5E                          str     memAddr
     632/     A3F : 1E                          inc     memAddr
     632/     A40 : 8C                          glo     R12
     632/     A41 : 5E                          str     memAddr
     633/     A42 :                     ;void printint(int s){ //print an integer
     634/     A42 :                     ;	itoa(s,buffer);
     635/     A42 : (MACRO)             	ld2 R12,'O',sp,(0+14)
     635/     A42 : =>TRUE                      if      ('O'='O')
     635/     A42 :  (MACRO-2)                          ldAX    memAddr,SP,(0+14)
     635/     A42 : 82                          glo     SP
     635/     A43 : FC 0E                       adi     ((0+14))#256
     635/     A45 : AE                          plo     MEMADDR
     635/     A46 : 92                          ghi     SP
     635/     A47 : 7C 00                       adci    ((0+14))>>8; was/256
     635/     A49 : BE                          phi     MEMADDR
     635/     A4A : =>FALSE                     else
     635/     A4A :                                     ldAD    memAddr,SP
     635/     A4A : [635]                       endif
     635/     A4A : 4E                          lda     memAddr
     635/     A4B : BC                          phi     R12
     635/     A4C : 0E                          ldn     memAddr
     635/     A4D : AC                          plo     R12
     636/     A4E : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     636/     A4E : =>TRUE                      if      ('O'='O')
     636/     A4E :  (MACRO-2)                          ldAX    R13,SP,(-10+14)
     636/     A4E : 82                          glo     SP
     636/     A4F : FC 04                       adi     ((-10+14))#256
     636/     A51 : AD                          plo     R13
     636/     A52 : 92                          ghi     SP
     636/     A53 : 7C 00                       adci    ((-10+14))>>8; was/256
     636/     A55 : BD                          phi     R13
     636/     A56 : =>FALSE                     else
     636/     A56 :                                     ldAD    R13,SP
     636/     A56 : [636]                       endif
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 57 - 2/13/2013 16:29:36


     637/     A56 : (MACRO)             	Ccall _itoa
     637/     A56 : D4                          sep     RCALL
     637/     A57 : 07 3F                       dw      _ITOA
     638/     A59 :                     ;	printstr(buffer);
     639/     A59 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     639/     A59 : =>TRUE                      if      ('O'='O')
     639/     A59 :  (MACRO-2)                          ldAX    R12,SP,(-10+14)
     639/     A59 : 82                          glo     SP
     639/     A5A : FC 04                       adi     ((-10+14))#256
     639/     A5C : AC                          plo     R12
     639/     A5D : 92                          ghi     SP
     639/     A5E : 7C 00                       adci    ((-10+14))>>8; was/256
     639/     A60 : BC                          phi     R12
     639/     A61 : =>FALSE                     else
     639/     A61 :                                     ldAD    R12,SP
     639/     A61 : [639]                       endif
     640/     A61 : (MACRO)             	Ccall _printstr
     640/     A61 : D4                          sep     RCALL
     640/     A62 : 06 D8                       dw      _PRINTSTR
     641/     A64 :                     ;}
     642/     A64 :                     L61:
     643/     A64 : (MACRO)             	alu2I sp,sp,12,adi,adci; virtual frame release
     643/     A64 : 82                          glo     SP
     643/     A65 : FC 0C                       ADI     (12)#256
     643/     A67 : A2                          plo     SP
     643/     A68 : 92                          ghi     SP
     643/     A69 : 7C 00                       ADCI     (12)>>8; was/256
     643/     A6B : B2                          phi     SP
     644/     A6C : (MACRO)             	Cretn
     644/     A6C : D5                          sep     RRET
     645/     A6D :                     
     646/     A6D :                     _printlint:
     647/     A6D : (MACRO)             	alu2I sp,sp,18,smi,smbi
     647/     A6D : 82                          glo     SP
     647/     A6E : FF 12                       SMI     (18)#256
     647/     A70 : A2                          plo     SP
     647/     A71 : 92                          ghi     SP
     647/     A72 : 7F 00                       SMBI     (18)>>8; was/256
     647/     A74 : B2                          phi     SP
     648/     A75 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     648/     A75 : =>TRUE                      if      ('O'='O')
     648/     A75 :  (MACRO-2)                          ldAX    memAddr,SP,(20)
     648/     A75 : 82                          glo     SP
     648/     A76 : FC 14                       adi     ((20))#256
     648/     A78 : AE                          plo     MEMADDR
     648/     A79 : 92                          ghi     SP
     648/     A7A : 7C 00                       adci    ((20))>>8; was/256
     648/     A7C : BE                          phi     MEMADDR
     648/     A7D : =>FALSE                     else
     648/     A7D :                                     ldAD    memAddr,SP
     648/     A7D : [648]                       endif
     648/     A7D : 9C                          ghi     R12
     648/     A7E : 5E                          str     memAddr
     648/     A7F : 1E                          inc     memAddr
     648/     A80 : 8C                          glo     R12
     648/     A81 : 5E                          str     memAddr
     649/     A82 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     649/     A82 : =>TRUE                      if      ('O'='O')
     649/     A82 :  (MACRO-2)                          ldAX    memAddr,SP,(22)
     649/     A82 : 82                          glo     SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 58 - 2/13/2013 16:29:36


     649/     A83 : FC 16                       adi     ((22))#256
     649/     A85 : AE                          plo     MEMADDR
     649/     A86 : 92                          ghi     SP
     649/     A87 : 7C 00                       adci    ((22))>>8; was/256
     649/     A89 : BE                          phi     MEMADDR
     649/     A8A : =>FALSE                     else
     649/     A8A :                                     ldAD    memAddr,SP
     649/     A8A : [649]                       endif
     649/     A8A : 9D                          ghi     R13
     649/     A8B : 5E                          str     memAddr
     649/     A8C : 1E                          inc     memAddr
     649/     A8D : 8D                          glo     R13
     649/     A8E : 5E                          str     memAddr
     650/     A8F :                     ;void printlint(long s){ //print a long integer
     651/     A8F :                     ;	printstr(ltoa(s,buffer));
     652/     A8F : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20)
     652/     A8F : =>TRUE                      if      ('O'='O')
     652/     A8F :  (MACRO-2)                          ldAX    memAddr,SP,(0+20)
     652/     A8F : 82                          glo     SP
     652/     A90 : FC 14                       adi     ((0+20))#256
     652/     A92 : AE                          plo     MEMADDR
     652/     A93 : 92                          ghi     SP
     652/     A94 : 7C 00                       adci    ((0+20))>>8; was/256
     652/     A96 : BE                          phi     MEMADDR
     652/     A97 : =>FALSE                     else
     652/     A97 :                                     ldAD    memAddr,SP
     652/     A97 : [652]                       endif
     652/     A97 : 4E                          lda     memAddr
     652/     A98 : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     652/     A99 : 4E                          lda     memAddr ;but load and store start with the 1st
     652/     A9A : AC                          plo     RP1P2-1
     652/     A9B : 4E                          lda     memAddr
     652/     A9C : BD                          phi     RP1P2
     652/     A9D : 0E                          ldn     memAddr
     652/     A9E : AD                          plo     RP1P2
     653/     A9F : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     653/     A9F : =>TRUE                      if      ('O'='O')
     653/     A9F :  (MACRO-2)                          ldAX    R11,SP,(-14+20)
     653/     A9F : 82                          glo     SP
     653/     AA0 : FC 06                       adi     ((-14+20))#256
     653/     AA2 : AB                          plo     R11
     653/     AA3 : 92                          ghi     SP
     653/     AA4 : 7C 00                       adci    ((-14+20))>>8; was/256
     653/     AA6 : BB                          phi     R11
     653/     AA7 : =>FALSE                     else
     653/     AA7 :                                     ldAD    R11,SP
     653/     AA7 : [653]                       endif
     654/     AA7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     654/     AA7 : =>TRUE                      if      ('O'='O')
     654/     AA7 :  (MACRO-2)                          ldAX    memAddr,SP,(4)
     654/     AA7 : 82                          glo     SP
     654/     AA8 : FC 04                       adi     ((4))#256
     654/     AAA : AE                          plo     MEMADDR
     654/     AAB : 92                          ghi     SP
     654/     AAC : 7C 00                       adci    ((4))>>8; was/256
     654/     AAE : BE                          phi     MEMADDR
     654/     AAF : =>FALSE                     else
     654/     AAF :                                     ldAD    memAddr,SP
     654/     AAF : [654]                       endif
     654/     AAF : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 59 - 2/13/2013 16:29:36


     654/     AB0 : 5E                          str     memAddr
     654/     AB1 : 1E                          inc     memAddr
     654/     AB2 : 8B                          glo     R11
     654/     AB3 : 5E                          str     memAddr
     655/     AB4 : (MACRO)             	Ccall _ltoa
     655/     AB4 : D4                          sep     RCALL
     655/     AB5 : 09 47                       dw      _LTOA
     656/     AB7 : (MACRO)             	cpy2 R11,R15
     656/     AB7 : 8F                          glo     R15
     656/     AB8 : AB                          plo     R11
     656/     AB9 : 9F                          ghi     R15
     656/     ABA : BB                          phi     R11
     657/     ABB : (MACRO)             	cpy2 R12,R11
     657/     ABB : 8B                          glo     R11
     657/     ABC : AC                          plo     R12
     657/     ABD : 9B                          ghi     R11
     657/     ABE : BC                          phi     R12
     658/     ABF : (MACRO)             	Ccall _printstr
     658/     ABF : D4                          sep     RCALL
     658/     AC0 : 06 D8                       dw      _PRINTSTR
     659/     AC2 :                     ;}
     660/     AC2 :                     L62:
     661/     AC2 : (MACRO)             	alu2I sp,sp,18,adi,adci; virtual frame release
     661/     AC2 : 82                          glo     SP
     661/     AC3 : FC 12                       ADI     (18)#256
     661/     AC5 : A2                          plo     SP
     661/     AC6 : 92                          ghi     SP
     661/     AC7 : 7C 00                       ADCI     (18)>>8; was/256
     661/     AC9 : B2                          phi     SP
     662/     ACA : (MACRO)             	Cretn
     662/     ACA : D5                          sep     RRET
     663/     ACB :                     
     664/     ACB :                     _putxn:
     665/     ACB : (MACRO)             	alu2I sp,sp,4,smi,smbi
     665/     ACB : 82                          glo     SP
     665/     ACC : FF 04                       SMI     (4)#256
     665/     ACE : A2                          plo     SP
     665/     ACF : 92                          ghi     SP
     665/     AD0 : 7F 00                       SMBI     (4)>>8; was/256
     665/     AD2 : B2                          phi     SP
     666/     AD3 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     666/     AD3 : =>TRUE                      if      ('O'='O')
     666/     AD3 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     666/     AD3 : 82                          glo     SP
     666/     AD4 : FC 06                       adi     ((6))#256
     666/     AD6 : AE                          plo     MEMADDR
     666/     AD7 : 92                          ghi     SP
     666/     AD8 : 7C 00                       adci    ((6))>>8; was/256
     666/     ADA : BE                          phi     MEMADDR
     666/     ADB : =>FALSE                     else
     666/     ADB :                                     ldAD    memAddr,SP
     666/     ADB : [666]                       endif
     666/     ADB : 9C                          ghi     R12
     666/     ADC : 5E                          str     memAddr
     666/     ADD : 1E                          inc     memAddr
     666/     ADE : 8C                          glo     R12
     666/     ADF : 5E                          str     memAddr
     667/     AE0 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     667/     AE0 : =>TRUE                      if      ('O'='O')
     667/     AE0 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 60 - 2/13/2013 16:29:36


     667/     AE0 : 82                          glo     SP
     667/     AE1 : FC 06                       adi     ((0+6))#256
     667/     AE3 : AE                          plo     MEMADDR
     667/     AE4 : 92                          ghi     SP
     667/     AE5 : 7C 00                       adci    ((0+6))>>8; was/256
     667/     AE7 : BE                          phi     MEMADDR
     667/     AE8 : =>FALSE                     else
     667/     AE8 :                                     ldAD    memAddr,SP
     667/     AE8 : [667]                       endif
     667/     AE8 : 4E                          lda     memAddr
     667/     AE9 : BB                          phi     R11
     667/     AEA : 0E                          ldn     memAddr
     667/     AEB : AB                          plo     R11
     668/     AEC : (MACRO)             	st1 R11,'O',sp,(0+6)
     668/     AEC : =>TRUE                      if      ('O'='O')
     668/     AEC :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     668/     AEC : 82                          glo     SP
     668/     AED : FC 06                       adi     ((0+6))#256
     668/     AEF : AE                          plo     MEMADDR
     668/     AF0 : 92                          ghi     SP
     668/     AF1 : 7C 00                       adci    ((0+6))>>8; was/256
     668/     AF3 : BE                          phi     MEMADDR
     668/     AF4 : =>FALSE                     else
     668/     AF4 :                                     ldAD    memAddr,SP
     668/     AF4 : [668]                       endif
     668/     AF4 : 8B                          glo     R11
     668/     AF5 : 5E                          str     memAddr
     669/     AF6 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     670/     AF6 :                     ;	if (x<10){
     671/     AF6 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     671/     AF6 : =>TRUE                      if      ('O'='O')
     671/     AF6 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     671/     AF6 : 82                          glo     SP
     671/     AF7 : FC 06                       adi     ((0+6))#256
     671/     AF9 : AE                          plo     MEMADDR
     671/     AFA : 92                          ghi     SP
     671/     AFB : 7C 00                       adci    ((0+6))>>8; was/256
     671/     AFD : BE                          phi     MEMADDR
     671/     AFE : =>FALSE                     else
     671/     AFE :                                     ldAD    memAddr,SP
     671/     AFE : [671]                       endif
     671/     AFE : 0E                          ldn     memAddr
     671/     AFF : AB                          plo     R11
     672/     B00 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     672/     B00 : F8 00                       ldi     0
     672/     B02 : BB                          phi     11
     673/     B03 : (MACRO)             	jcI2I r11,10,lbdf,L64; GE is flipped test from LT
     673/     B03 : 8B                          glo     R11
     673/     B04 : FF 0A                       smi     (10)#256
     673/     B06 : 9B                          ghi     R11
     673/     B07 : 7F 00                       smbi    (10)>>8; was/256      ;that's a standard signed subtraction
     673/     B09 : 9B                          ghi     R11 ;
     673/     B0A : FB 00                       xri     (10)>>8; was/256      ;sets the top bit if the signs are different
     673/     B0C : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     673/     B0D : C7                          lsnf    ;bypass the df flip if signs were the same
     673/     B0E : FB 01                       xri     01     ;invert original df if signs were different
     673/     B10 : 76                          shrc           ;put it back in df
     673/     B11 : C3 0B 34                    LBDF    L64  ;execute 
     674/     B14 :                     ;		putc(x+'0');
     675/     B14 : (MACRO)             	ld1 R11,'O',sp,(0+6)
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 61 - 2/13/2013 16:29:36


     675/     B14 : =>TRUE                      if      ('O'='O')
     675/     B14 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     675/     B14 : 82                          glo     SP
     675/     B15 : FC 06                       adi     ((0+6))#256
     675/     B17 : AE                          plo     MEMADDR
     675/     B18 : 92                          ghi     SP
     675/     B19 : 7C 00                       adci    ((0+6))>>8; was/256
     675/     B1B : BE                          phi     MEMADDR
     675/     B1C : =>FALSE                     else
     675/     B1C :                                     ldAD    memAddr,SP
     675/     B1C : [675]                       endif
     675/     B1C : 0E                          ldn     memAddr
     675/     B1D : AB                          plo     R11
     676/     B1E : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     676/     B1E : F8 00                       ldi     0
     676/     B20 : BB                          phi     11
     677/     B21 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     677/     B21 : =>TRUE                      if      ('O'='O')
     677/     B21 :  (MACRO-2)                          ldAX    R11,R11,(48)
     677/     B21 : 8B                          glo     R11
     677/     B22 : FC 30                       adi     ((48))#256
     677/     B24 : AB                          plo     R11
     677/     B25 : 9B                          ghi     R11
     677/     B26 : 7C 00                       adci    ((48))>>8; was/256
     677/     B28 : BB                          phi     R11
     677/     B29 : =>FALSE                     else
     677/     B29 :                                     ldAD    R11,R11
     677/     B29 : [677]                       endif
     678/     B29 : (MACRO)             	cpy1 R12,R11
     678/     B29 : 8B                          glo     R11
     678/     B2A : AC                          plo     R12
     679/     B2B : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     679/     B2B : F8 00                       ldi     0
     679/     B2D : BC                          phi     12
     680/     B2E : (MACRO)             	Ccall _putc
     680/     B2E : D4                          sep     RCALL
     680/     B2F : 15 13                       dw      _PUTC
     681/     B31 :                     ;	} else {
     682/     B31 : C0 0B 59            	lbr L65
     683/     B34 :                     L64:
     684/     B34 :                     ;		putc(x+'A'-10);
     685/     B34 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     685/     B34 : =>TRUE                      if      ('O'='O')
     685/     B34 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     685/     B34 : 82                          glo     SP
     685/     B35 : FC 06                       adi     ((0+6))#256
     685/     B37 : AE                          plo     MEMADDR
     685/     B38 : 92                          ghi     SP
     685/     B39 : 7C 00                       adci    ((0+6))>>8; was/256
     685/     B3B : BE                          phi     MEMADDR
     685/     B3C : =>FALSE                     else
     685/     B3C :                                     ldAD    memAddr,SP
     685/     B3C : [685]                       endif
     685/     B3C : 0E                          ldn     memAddr
     685/     B3D : AB                          plo     R11
     686/     B3E : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     686/     B3E : F8 00                       ldi     0
     686/     B40 : BB                          phi     11
     687/     B41 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     687/     B41 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 62 - 2/13/2013 16:29:36


     687/     B41 :  (MACRO-2)                          ldAX    R11,R11,(65)
     687/     B41 : 8B                          glo     R11
     687/     B42 : FC 41                       adi     ((65))#256
     687/     B44 : AB                          plo     R11
     687/     B45 : 9B                          ghi     R11
     687/     B46 : 7C 00                       adci    ((65))>>8; was/256
     687/     B48 : BB                          phi     R11
     687/     B49 : =>FALSE                     else
     687/     B49 :                                     ldAD    R11,R11
     687/     B49 : [687]                       endif
     688/     B49 : (MACRO)             	alu2I R11,R11,10,smi,smbi
     688/     B49 : 8B                          glo     R11
     688/     B4A : FF 0A                       SMI     (10)#256
     688/     B4C : AB                          plo     R11
     688/     B4D : 9B                          ghi     R11
     688/     B4E : 7F 00                       SMBI     (10)>>8; was/256
     688/     B50 : BB                          phi     R11
     689/     B51 : (MACRO)             	cpy1 R12,R11
     689/     B51 : 8B                          glo     R11
     689/     B52 : AC                          plo     R12
     690/     B53 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     690/     B53 : F8 00                       ldi     0
     690/     B55 : BC                          phi     12
     691/     B56 : (MACRO)             	Ccall _putc
     691/     B56 : D4                          sep     RCALL
     691/     B57 : 15 13                       dw      _PUTC
     692/     B59 :                     ;	}
     693/     B59 :                     L65:
     694/     B59 :                     ;}
     695/     B59 :                     L63:
     696/     B59 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     696/     B59 : 82                          glo     SP
     696/     B5A : FC 04                       ADI     (4)#256
     696/     B5C : A2                          plo     SP
     696/     B5D : 92                          ghi     SP
     696/     B5E : 7C 00                       ADCI     (4)>>8; was/256
     696/     B60 : B2                          phi     SP
     697/     B61 : (MACRO)             	Cretn
     697/     B61 : D5                          sep     RRET
     698/     B62 :                     
     699/     B62 :                     _putx:
     700/     B62 : (MACRO)             	alu2I sp,sp,4,smi,smbi
     700/     B62 : 82                          glo     SP
     700/     B63 : FF 04                       SMI     (4)#256
     700/     B65 : A2                          plo     SP
     700/     B66 : 92                          ghi     SP
     700/     B67 : 7F 00                       SMBI     (4)>>8; was/256
     700/     B69 : B2                          phi     SP
     701/     B6A : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     701/     B6A : =>TRUE                      if      ('O'='O')
     701/     B6A :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     701/     B6A : 82                          glo     SP
     701/     B6B : FC 06                       adi     ((6))#256
     701/     B6D : AE                          plo     MEMADDR
     701/     B6E : 92                          ghi     SP
     701/     B6F : 7C 00                       adci    ((6))>>8; was/256
     701/     B71 : BE                          phi     MEMADDR
     701/     B72 : =>FALSE                     else
     701/     B72 :                                     ldAD    memAddr,SP
     701/     B72 : [701]                       endif
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 63 - 2/13/2013 16:29:36


     701/     B72 : 9C                          ghi     R12
     701/     B73 : 5E                          str     memAddr
     701/     B74 : 1E                          inc     memAddr
     701/     B75 : 8C                          glo     R12
     701/     B76 : 5E                          str     memAddr
     702/     B77 : (MACRO)             	ld2 R11,'O',sp,(0+6)
     702/     B77 : =>TRUE                      if      ('O'='O')
     702/     B77 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     702/     B77 : 82                          glo     SP
     702/     B78 : FC 06                       adi     ((0+6))#256
     702/     B7A : AE                          plo     MEMADDR
     702/     B7B : 92                          ghi     SP
     702/     B7C : 7C 00                       adci    ((0+6))>>8; was/256
     702/     B7E : BE                          phi     MEMADDR
     702/     B7F : =>FALSE                     else
     702/     B7F :                                     ldAD    memAddr,SP
     702/     B7F : [702]                       endif
     702/     B7F : 4E                          lda     memAddr
     702/     B80 : BB                          phi     R11
     702/     B81 : 0E                          ldn     memAddr
     702/     B82 : AB                          plo     R11
     703/     B83 : (MACRO)             	st1 R11,'O',sp,(0+6)
     703/     B83 : =>TRUE                      if      ('O'='O')
     703/     B83 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     703/     B83 : 82                          glo     SP
     703/     B84 : FC 06                       adi     ((0+6))#256
     703/     B86 : AE                          plo     MEMADDR
     703/     B87 : 92                          ghi     SP
     703/     B88 : 7C 00                       adci    ((0+6))>>8; was/256
     703/     B8A : BE                          phi     MEMADDR
     703/     B8B : =>FALSE                     else
     703/     B8B :                                     ldAD    memAddr,SP
     703/     B8B : [703]                       endif
     703/     B8B : 8B                          glo     R11
     703/     B8C : 5E                          str     memAddr
     704/     B8D :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     705/     B8D :                     ;	putxn(x>>4);
     706/     B8D : (MACRO)             	ld1 R11,'O',sp,(0+6)
     706/     B8D : =>TRUE                      if      ('O'='O')
     706/     B8D :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     706/     B8D : 82                          glo     SP
     706/     B8E : FC 06                       adi     ((0+6))#256
     706/     B90 : AE                          plo     MEMADDR
     706/     B91 : 92                          ghi     SP
     706/     B92 : 7C 00                       adci    ((0+6))>>8; was/256
     706/     B94 : BE                          phi     MEMADDR
     706/     B95 : =>FALSE                     else
     706/     B95 :                                     ldAD    memAddr,SP
     706/     B95 : [706]                       endif
     706/     B95 : 0E                          ldn     memAddr
     706/     B96 : AB                          plo     R11
     707/     B97 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     707/     B97 : F8 00                       ldi     0
     707/     B99 : BB                          phi     11
     708/     B9A : (MACRO)             	shrI2I R11,4
     708/     B9A :                             rept    4
     708/     B9A :                             shrI2   R11
     708/     B9A :                             endm
     708/     B9A :  (MACRO-2)                  shrI2   R11
     708/     B9A : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 64 - 2/13/2013 16:29:36


     708/     B9B : FE                          shl             ;set DF to the sign
     708/     B9C : 9B                          ghi     R11     ;get the top byte back
     708/     B9D : 76                          shrc            ;shift one bit extending the sign
     708/     B9E : BB                          phi     R11
     708/     B9F : 8B                          glo     R11
     708/     BA0 : 76                          shrc
     708/     BA1 : AB                          plo     R11
     708/     BA2 :  (MACRO-2)                  shrI2   R11
     708/     BA2 : 9B                          ghi     R11
     708/     BA3 : FE                          shl             ;set DF to the sign
     708/     BA4 : 9B                          ghi     R11     ;get the top byte back
     708/     BA5 : 76                          shrc            ;shift one bit extending the sign
     708/     BA6 : BB                          phi     R11
     708/     BA7 : 8B                          glo     R11
     708/     BA8 : 76                          shrc
     708/     BA9 : AB                          plo     R11
     708/     BAA :  (MACRO-2)                  shrI2   R11
     708/     BAA : 9B                          ghi     R11
     708/     BAB : FE                          shl             ;set DF to the sign
     708/     BAC : 9B                          ghi     R11     ;get the top byte back
     708/     BAD : 76                          shrc            ;shift one bit extending the sign
     708/     BAE : BB                          phi     R11
     708/     BAF : 8B                          glo     R11
     708/     BB0 : 76                          shrc
     708/     BB1 : AB                          plo     R11
     708/     BB2 :  (MACRO-2)                  shrI2   R11
     708/     BB2 : 9B                          ghi     R11
     708/     BB3 : FE                          shl             ;set DF to the sign
     708/     BB4 : 9B                          ghi     R11     ;get the top byte back
     708/     BB5 : 76                          shrc            ;shift one bit extending the sign
     708/     BB6 : BB                          phi     R11
     708/     BB7 : 8B                          glo     R11
     708/     BB8 : 76                          shrc
     708/     BB9 : AB                          plo     R11
     709/     BBA : (MACRO)             	cpy1 R12,R11
     709/     BBA : 8B                          glo     R11
     709/     BBB : AC                          plo     R12
     710/     BBC : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     710/     BBC : F8 00                       ldi     0
     710/     BBE : BC                          phi     12
     711/     BBF : (MACRO)             	Ccall _putxn
     711/     BBF : D4                          sep     RCALL
     711/     BC0 : 0A CB                       dw      _PUTXN
     712/     BC2 :                     ;	putxn(x & 0x0F);
     713/     BC2 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     713/     BC2 : =>TRUE                      if      ('O'='O')
     713/     BC2 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     713/     BC2 : 82                          glo     SP
     713/     BC3 : FC 06                       adi     ((0+6))#256
     713/     BC5 : AE                          plo     MEMADDR
     713/     BC6 : 92                          ghi     SP
     713/     BC7 : 7C 00                       adci    ((0+6))>>8; was/256
     713/     BC9 : BE                          phi     MEMADDR
     713/     BCA : =>FALSE                     else
     713/     BCA :                                     ldAD    memAddr,SP
     713/     BCA : [713]                       endif
     713/     BCA : 0E                          ldn     memAddr
     713/     BCB : AB                          plo     R11
     714/     BCC : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     714/     BCC : F8 00                       ldi     0
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 65 - 2/13/2013 16:29:36


     714/     BCE : BB                          phi     11
     715/     BCF : (MACRO)             	alu2I R11,R11,15,ani,ani
     715/     BCF : 8B                          glo     R11
     715/     BD0 : FA 0F                       ANI     (15)#256
     715/     BD2 : AB                          plo     R11
     715/     BD3 : 9B                          ghi     R11
     715/     BD4 : FA 00                       ANI     (15)>>8; was/256
     715/     BD6 : BB                          phi     R11
     716/     BD7 :                     	;removed ?	cpy2 R11,R11
     717/     BD7 : (MACRO)             	cpy1 R12,R11
     717/     BD7 : 8B                          glo     R11
     717/     BD8 : AC                          plo     R12
     718/     BD9 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     718/     BD9 : F8 00                       ldi     0
     718/     BDB : BC                          phi     12
     719/     BDC : (MACRO)             	Ccall _putxn
     719/     BDC : D4                          sep     RCALL
     719/     BDD : 0A CB                       dw      _PUTXN
     720/     BDF :                     ;}
     721/     BDF :                     L66:
     722/     BDF : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     722/     BDF : 82                          glo     SP
     722/     BE0 : FC 04                       ADI     (4)#256
     722/     BE2 : A2                          plo     SP
     722/     BE3 : 92                          ghi     SP
     722/     BE4 : 7C 00                       ADCI     (4)>>8; was/256
     722/     BE6 : B2                          phi     SP
     723/     BE7 : (MACRO)             	Cretn
     723/     BE7 : D5                          sep     RRET
     724/     BE8 :                     
     725/     BE8 :                     _printf:
     726/     BE8 : (MACRO)             	alu2I sp,sp,14,smi,smbi
     726/     BE8 : 82                          glo     SP
     726/     BE9 : FF 0E                       SMI     (14)#256
     726/     BEB : A2                          plo     SP
     726/     BEC : 92                          ghi     SP
     726/     BED : 7F 00                       SMBI     (14)>>8; was/256
     726/     BEF : B2                          phi     SP
     727/     BF0 : (MACRO)             	alu2I memaddr,sp,(9),adi,adci
     727/     BF0 : 82                          glo     SP
     727/     BF1 : FC 09                       ADI     ((9))#256
     727/     BF3 : AE                          plo     MEMADDR
     727/     BF4 : 92                          ghi     SP
     727/     BF5 : 7C 00                       ADCI     ((9))>>8; was/256
     727/     BF7 : BE                          phi     MEMADDR
     728/     BF8 : EE                  	sex	memaddr
     729/     BF9 : (MACRO)             	savmi r0
     729/     BF9 : 80                          glo     R0
     729/     BFA : 73                          stxd            ;R0 x is primed to the spot to start the saves
     729/     BFB : 90                          ghi     R0
     729/     BFC : 73                          stxd            ;and it end up where needed to do the next one
     730/     BFD : (MACRO)             	savmi r1
     730/     BFD : 81                          glo     R1
     730/     BFE : 73                          stxd            ;R1 x is primed to the spot to start the saves
     730/     BFF : 91                          ghi     R1
     730/     C00 : 73                          stxd            ;and it end up where needed to do the next one
     731/     C01 : (MACRO)             	savmi r7
     731/     C01 : 87                          glo     R7
     731/     C02 : 73                          stxd            ;R7 x is primed to the spot to start the saves
     731/     C03 : 97                          ghi     R7
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 66 - 2/13/2013 16:29:36


     731/     C04 : 73                          stxd            ;and it end up where needed to do the next one
     732/     C05 : E2                  	sex sp
     733/     C06 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     733/     C06 : =>TRUE                      if      ('O'='O')
     733/     C06 :  (MACRO-2)                          ldAX    memAddr,SP,(16)
     733/     C06 : 82                          glo     SP
     733/     C07 : FC 10                       adi     ((16))#256
     733/     C09 : AE                          plo     MEMADDR
     733/     C0A : 92                          ghi     SP
     733/     C0B : 7C 00                       adci    ((16))>>8; was/256
     733/     C0D : BE                          phi     MEMADDR
     733/     C0E : =>FALSE                     else
     733/     C0E :                                     ldAD    memAddr,SP
     733/     C0E : [733]                       endif
     733/     C0E : 9C                          ghi     R12
     733/     C0F : 5E                          str     memAddr
     733/     C10 : 1E                          inc     memAddr
     733/     C11 : 8C                          glo     R12
     733/     C12 : 5E                          str     memAddr
     734/     C13 : (MACRO)             	st2 r13,'O',sp,(18); flag2
     734/     C13 : =>TRUE                      if      ('O'='O')
     734/     C13 :  (MACRO-2)                          ldAX    memAddr,SP,(18)
     734/     C13 : 82                          glo     SP
     734/     C14 : FC 12                       adi     ((18))#256
     734/     C16 : AE                          plo     MEMADDR
     734/     C17 : 92                          ghi     SP
     734/     C18 : 7C 00                       adci    ((18))>>8; was/256
     734/     C1A : BE                          phi     MEMADDR
     734/     C1B : =>FALSE                     else
     734/     C1B :                                     ldAD    memAddr,SP
     734/     C1B : [734]                       endif
     734/     C1B : 9D                          ghi     R13
     734/     C1C : 5E                          str     memAddr
     734/     C1D : 1E                          inc     memAddr
     734/     C1E : 8D                          glo     R13
     734/     C1F : 5E                          str     memAddr
     735/     C20 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     736/     C20 :                     ;	int argslot=0;	//used to align longs
     737/     C20 : (MACRO)             	ldA2 R0,'D',(0),0; reg:addr
     737/     C20 : =>FALSE                     if      ('D'='O')
     737/     C20 :                                     ldAX    R0,(0),0
     737/     C20 : =>TRUE                      else
     737/     C20 :  (MACRO-2)                          ldAD    R0,(0)
     737/     C20 : F8 00                       ldi     ((0))&255
     737/     C22 : A0                          plo     R0
     737/     C23 : F8 00                       ldi     ((0))>>8; was/256
     737/     C25 : B0                          phi     R0
     737/     C26 : [737]                       endif
     738/     C26 :                     ;	int * this=(int *)&ptr;
     739/     C26 : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     739/     C26 : =>TRUE                      if      ('O'='O')
     739/     C26 :  (MACRO-2)                          ldAX    R1,SP,(0+16)
     739/     C26 : 82                          glo     SP
     739/     C27 : FC 10                       adi     ((0+16))#256
     739/     C29 : A1                          plo     R1
     739/     C2A : 92                          ghi     SP
     739/     C2B : 7C 00                       adci    ((0+16))>>8; was/256
     739/     C2D : B1                          phi     R1
     739/     C2E : =>FALSE                     else
     739/     C2E :                                     ldAD    R1,SP
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 67 - 2/13/2013 16:29:36


     739/     C2E : [739]                       endif
     740/     C2E :                     ;	this++; argslot++; //advance argument pointer and slot #
     741/     C2E : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     741/     C2E : =>TRUE                      if      ('O'='O')
     741/     C2E :  (MACRO-2)                          ldAX    R1,R1,(2)
     741/     C2E : 81                          glo     R1
     741/     C2F : FC 02                       adi     ((2))#256
     741/     C31 : A1                          plo     R1
     741/     C32 : 91                          ghi     R1
     741/     C33 : 7C 00                       adci    ((2))>>8; was/256
     741/     C35 : B1                          phi     R1
     741/     C36 : =>FALSE                     else
     741/     C36 :                                     ldAD    R1,R1
     741/     C36 : [741]                       endif
     742/     C36 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     742/     C36 : =>TRUE                      if      ('O'='O')
     742/     C36 :  (MACRO-2)                          ldAX    R0,R0,(1)
     742/     C36 : 80                          glo     R0
     742/     C37 : FC 01                       adi     ((1))#256
     742/     C39 : A0                          plo     R0
     742/     C3A : 90                          ghi     R0
     742/     C3B : 7C 00                       adci    ((1))>>8; was/256
     742/     C3D : B0                          phi     R0
     742/     C3E : =>FALSE                     else
     742/     C3E :                                     ldAD    R0,R0
     742/     C3E : [742]                       endif
     743/     C3E : C0 10 56            	lbr L69
     744/     C41 :                     L68:
     745/     C41 :                     ;    while(*ptr) {
     746/     C41 :                     ;		c=*ptr++;
     747/     C41 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     747/     C41 : =>TRUE                      if      ('O'='O')
     747/     C41 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     747/     C41 : 82                          glo     SP
     747/     C42 : FC 10                       adi     ((0+16))#256
     747/     C44 : AE                          plo     MEMADDR
     747/     C45 : 92                          ghi     SP
     747/     C46 : 7C 00                       adci    ((0+16))>>8; was/256
     747/     C48 : BE                          phi     MEMADDR
     747/     C49 : =>FALSE                     else
     747/     C49 :                                     ldAD    memAddr,SP
     747/     C49 : [747]                       endif
     747/     C49 : 4E                          lda     memAddr
     747/     C4A : BB                          phi     R11
     747/     C4B : 0E                          ldn     memAddr
     747/     C4C : AB                          plo     R11
     748/     C4D : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     748/     C4D : =>TRUE                      if      ('O'='O')
     748/     C4D :  (MACRO-2)                          ldAX    R10,R11,(1)
     748/     C4D : 8B                          glo     R11
     748/     C4E : FC 01                       adi     ((1))#256
     748/     C50 : AA                          plo     R10
     748/     C51 : 9B                          ghi     R11
     748/     C52 : 7C 00                       adci    ((1))>>8; was/256
     748/     C54 : BA                          phi     R10
     748/     C55 : =>FALSE                     else
     748/     C55 :                                     ldAD    R10,R11
     748/     C55 : [748]                       endif
     749/     C55 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     749/     C55 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 68 - 2/13/2013 16:29:36


     749/     C55 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     749/     C55 : 82                          glo     SP
     749/     C56 : FC 10                       adi     ((0+16))#256
     749/     C58 : AE                          plo     MEMADDR
     749/     C59 : 92                          ghi     SP
     749/     C5A : 7C 00                       adci    ((0+16))>>8; was/256
     749/     C5C : BE                          phi     MEMADDR
     749/     C5D : =>FALSE                     else
     749/     C5D :                                     ldAD    memAddr,SP
     749/     C5D : [749]                       endif
     749/     C5D : 9A                          ghi     R10
     749/     C5E : 5E                          str     memAddr
     749/     C5F : 1E                          inc     memAddr
     749/     C60 : 8A                          glo     R10
     749/     C61 : 5E                          str     memAddr
     750/     C62 : (MACRO)             	ld1 R7,'O',R11,0
     750/     C62 : =>TRUE                      if      ('O'='O')
     750/     C62 :  (MACRO-2)                          ldAX    memAddr,R11,0
     750/     C62 : 8B                          glo     R11
     750/     C63 : FC 00                       adi     (0)#256
     750/     C65 : AE                          plo     MEMADDR
     750/     C66 : 9B                          ghi     R11
     750/     C67 : 7C 00                       adci    (0)>>8; was/256
     750/     C69 : BE                          phi     MEMADDR
     750/     C6A : =>FALSE                     else
     750/     C6A :                                     ldAD    memAddr,R11
     750/     C6A : [750]                       endif
     750/     C6A : 0E                          ldn     memAddr
     750/     C6B : A7                          plo     R7
     751/     C6C :                     ;		if (c!='%'){
     752/     C6C : (MACRO)             	cpy1 R11,R7
     752/     C6C : 87                          glo     R7
     752/     C6D : AB                          plo     R11
     753/     C6E : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     753/     C6E : F8 00                       ldi     0
     753/     C70 : BB                          phi     11
     754/     C71 : (MACRO)             	jeqU2I r11,37,L71
     754/     C71 : 8B                          glo     R11
     754/     C72 : FF 25                       smi     (37)#256
     754/     C74 : CA 0C 7D                    lbnz    $$nobr
     754/     C77 : 9B                          ghi     R11
     754/     C78 : 7F 00                       smbi    (37)>>8; was/256
     754/     C7A : C2 0C 88                    lbz     L71
     754/     C7D :                     $$nobr:
     755/     C7D :                     ;			putc(c);
     756/     C7D : (MACRO)             	cpy1 R12,R7
     756/     C7D : 87                          glo     R7
     756/     C7E : AC                          plo     R12
     757/     C7F : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     757/     C7F : F8 00                       ldi     0
     757/     C81 : BC                          phi     12
     758/     C82 : (MACRO)             	Ccall _putc
     758/     C82 : D4                          sep     RCALL
     758/     C83 : 15 13                       dw      _PUTC
     759/     C85 :                     ;		} else{
     760/     C85 : C0 10 56            	lbr L72
     761/     C88 :                     L71:
     762/     C88 :                     ;			c=*ptr++;
     763/     C88 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     763/     C88 : =>TRUE                      if      ('O'='O')
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 69 - 2/13/2013 16:29:36


     763/     C88 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     763/     C88 : 82                          glo     SP
     763/     C89 : FC 10                       adi     ((0+16))#256
     763/     C8B : AE                          plo     MEMADDR
     763/     C8C : 92                          ghi     SP
     763/     C8D : 7C 00                       adci    ((0+16))>>8; was/256
     763/     C8F : BE                          phi     MEMADDR
     763/     C90 : =>FALSE                     else
     763/     C90 :                                     ldAD    memAddr,SP
     763/     C90 : [763]                       endif
     763/     C90 : 4E                          lda     memAddr
     763/     C91 : BB                          phi     R11
     763/     C92 : 0E                          ldn     memAddr
     763/     C93 : AB                          plo     R11
     764/     C94 : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     764/     C94 : =>TRUE                      if      ('O'='O')
     764/     C94 :  (MACRO-2)                          ldAX    R10,R11,(1)
     764/     C94 : 8B                          glo     R11
     764/     C95 : FC 01                       adi     ((1))#256
     764/     C97 : AA                          plo     R10
     764/     C98 : 9B                          ghi     R11
     764/     C99 : 7C 00                       adci    ((1))>>8; was/256
     764/     C9B : BA                          phi     R10
     764/     C9C : =>FALSE                     else
     764/     C9C :                                     ldAD    R10,R11
     764/     C9C : [764]                       endif
     765/     C9C : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     765/     C9C : =>TRUE                      if      ('O'='O')
     765/     C9C :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     765/     C9C : 82                          glo     SP
     765/     C9D : FC 10                       adi     ((0+16))#256
     765/     C9F : AE                          plo     MEMADDR
     765/     CA0 : 92                          ghi     SP
     765/     CA1 : 7C 00                       adci    ((0+16))>>8; was/256
     765/     CA3 : BE                          phi     MEMADDR
     765/     CA4 : =>FALSE                     else
     765/     CA4 :                                     ldAD    memAddr,SP
     765/     CA4 : [765]                       endif
     765/     CA4 : 9A                          ghi     R10
     765/     CA5 : 5E                          str     memAddr
     765/     CA6 : 1E                          inc     memAddr
     765/     CA7 : 8A                          glo     R10
     765/     CA8 : 5E                          str     memAddr
     766/     CA9 : (MACRO)             	ld1 R7,'O',R11,0
     766/     CA9 : =>TRUE                      if      ('O'='O')
     766/     CA9 :  (MACRO-2)                          ldAX    memAddr,R11,0
     766/     CA9 : 8B                          glo     R11
     766/     CAA : FC 00                       adi     (0)#256
     766/     CAC : AE                          plo     MEMADDR
     766/     CAD : 9B                          ghi     R11
     766/     CAE : 7C 00                       adci    (0)>>8; was/256
     766/     CB0 : BE                          phi     MEMADDR
     766/     CB1 : =>FALSE                     else
     766/     CB1 :                                     ldAD    memAddr,R11
     766/     CB1 : [766]                       endif
     766/     CB1 : 0E                          ldn     memAddr
     766/     CB2 : A7                          plo     R7
     767/     CB3 :                     ;			switch (c){
     768/     CB3 : (MACRO)             	cpy1 R11,R7
     768/     CB3 : 87                          glo     R7
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 70 - 2/13/2013 16:29:36


     768/     CB4 : AB                          plo     R11
     769/     CB5 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     769/     CB5 : F8 00                       ldi     0
     769/     CB7 : BB                          phi     11
     770/     CB8 : (MACRO)             	st2 R11,'O',sp,(-5+16)
     770/     CB8 : =>TRUE                      if      ('O'='O')
     770/     CB8 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     770/     CB8 : 82                          glo     SP
     770/     CB9 : FC 0B                       adi     ((-5+16))#256
     770/     CBB : AE                          plo     MEMADDR
     770/     CBC : 92                          ghi     SP
     770/     CBD : 7C 00                       adci    ((-5+16))>>8; was/256
     770/     CBF : BE                          phi     MEMADDR
     770/     CC0 : =>FALSE                     else
     770/     CC0 :                                     ldAD    memAddr,SP
     770/     CC0 : [770]                       endif
     770/     CC0 : 9B                          ghi     R11
     770/     CC1 : 5E                          str     memAddr
     770/     CC2 : 1E                          inc     memAddr
     770/     CC3 : 8B                          glo     R11
     770/     CC4 : 5E                          str     memAddr
     771/     CC5 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     771/     CC5 : =>TRUE                      if      ('O'='O')
     771/     CC5 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     771/     CC5 : 82                          glo     SP
     771/     CC6 : FC 0B                       adi     ((-5+16))#256
     771/     CC8 : AE                          plo     MEMADDR
     771/     CC9 : 92                          ghi     SP
     771/     CCA : 7C 00                       adci    ((-5+16))>>8; was/256
     771/     CCC : BE                          phi     MEMADDR
     771/     CCD : =>FALSE                     else
     771/     CCD :                                     ldAD    memAddr,SP
     771/     CCD : [771]                       endif
     771/     CCD : 4E                          lda     memAddr
     771/     CCE : BB                          phi     R11
     771/     CCF : 0E                          ldn     memAddr
     771/     CD0 : AB                          plo     R11
     772/     CD1 : (MACRO)             	jeqU2I r11,105,L76
     772/     CD1 : 8B                          glo     R11
     772/     CD2 : FF 69                       smi     (105)#256
     772/     CD4 : CA 0C DD                    lbnz    $$nobr
     772/     CD7 : 9B                          ghi     R11
     772/     CD8 : 7F 00                       smbi    (105)>>8; was/256
     772/     CDA : C2 0D BB                    lbz     L76
     772/     CDD :                     $$nobr:
     773/     CDD : (MACRO)             	ldA2 R10,'D',(108),0; reg:addr
     773/     CDD : =>FALSE                     if      ('D'='O')
     773/     CDD :                                     ldAX    R10,(108),0
     773/     CDD : =>TRUE                      else
     773/     CDD :  (MACRO-2)                          ldAD    R10,(108)
     773/     CDD : F8 6C                       ldi     ((108))&255
     773/     CDF : AA                          plo     R10
     773/     CE0 : F8 00                       ldi     ((108))>>8; was/256
     773/     CE2 : BA                          phi     R10
     773/     CE3 : [773]                       endif
     774/     CE3 : (MACRO)             	jeqI2 r11,r10,L80
     774/     CE3 : 22                          dec     sp
     774/     CE4 : 8A                          glo     R10
     774/     CE5 : 52                          str     sp
     774/     CE6 : 8B                          glo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 71 - 2/13/2013 16:29:36


     774/     CE7 : F7                          sm
     774/     CE8 : 12                          inc     sp
     774/     CE9 : CA 0C F5                    lbnz    $$nobr
     774/     CEC : 22                          dec     sp
     774/     CED : 9A                          ghi     R10
     774/     CEE : 52                          str     sp
     774/     CEF : 9B                          ghi     R11
     774/     CF0 : 77                          smb
     774/     CF1 : 12                          inc     sp
     774/     CF2 : C2 0E AD                    lbz     L80
     774/     CF5 :                     $$nobr:
     775/     CF5 : (MACRO)             	jcI2 r10,r11,lbnf,L88 ;GT is reveresed operands from LT
     775/     CF5 : 22                          dec     sp ;make a work area
     775/     CF6 : 8B                          glo     R11
     775/     CF7 : 52                          str     sp 
     775/     CF8 : 8A                          glo     R10
     775/     CF9 : F7                          sm
     775/     CFA : 9B                          ghi     R11
     775/     CFB : 52                          str     sp
     775/     CFC : 9A                          ghi     R10
     775/     CFD : 77                          smb          ;that's a standard signed subtraction
     775/     CFE : 9A                          ghi     R10 ;
     775/     CFF : F3                          xor           ;sets the top bit if the signs are different
     775/     D00 : 12                          inc     sp ;release the work area
     775/     D01 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     775/     D02 : C7                          lsnf    ;bypass the flip if signs were the same
     775/     D03 : FB 01                       xri     01     ;invert original df if signs were different
     775/     D05 : 76                          shrc           ;put it back in df
     775/     D06 : CB 0D 68                    LBNF    L88  ;execute 
     776/     D09 :                     L87:
     777/     D09 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     777/     D09 : =>TRUE                      if      ('O'='O')
     777/     D09 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     777/     D09 : 82                          glo     SP
     777/     D0A : FC 0B                       adi     ((-5+16))#256
     777/     D0C : AE                          plo     MEMADDR
     777/     D0D : 92                          ghi     SP
     777/     D0E : 7C 00                       adci    ((-5+16))>>8; was/256
     777/     D10 : BE                          phi     MEMADDR
     777/     D11 : =>FALSE                     else
     777/     D11 :                                     ldAD    memAddr,SP
     777/     D11 : [777]                       endif
     777/     D11 : 4E                          lda     memAddr
     777/     D12 : BB                          phi     R11
     777/     D13 : 0E                          ldn     memAddr
     777/     D14 : AB                          plo     R11
     778/     D15 : (MACRO)             	ldA2 R10,'D',(88),0; reg:addr
     778/     D15 : =>FALSE                     if      ('D'='O')
     778/     D15 :                                     ldAX    R10,(88),0
     778/     D15 : =>TRUE                      else
     778/     D15 :  (MACRO-2)                          ldAD    R10,(88)
     778/     D15 : F8 58                       ldi     ((88))&255
     778/     D17 : AA                          plo     R10
     778/     D18 : F8 00                       ldi     ((88))>>8; was/256
     778/     D1A : BA                          phi     R10
     778/     D1B : [778]                       endif
     779/     D1B : (MACRO)             	jeqI2 r11,r10,L79
     779/     D1B : 22                          dec     sp
     779/     D1C : 8A                          glo     R10
     779/     D1D : 52                          str     sp
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 72 - 2/13/2013 16:29:36


     779/     D1E : 8B                          glo     R11
     779/     D1F : F7                          sm
     779/     D20 : 12                          inc     sp
     779/     D21 : CA 0D 2D                    lbnz    $$nobr
     779/     D24 : 22                          dec     sp
     779/     D25 : 9A                          ghi     R10
     779/     D26 : 52                          str     sp
     779/     D27 : 9B                          ghi     R11
     779/     D28 : 77                          smb
     779/     D29 : 12                          inc     sp
     779/     D2A : C2 0E 36                    lbz     L79
     779/     D2D :                     $$nobr:
     780/     D2D : (MACRO)             	jcI2 r11,r10,lbnf,L73; LT=lbnf i.e. subtract B from A and jump if borrow 
     780/     D2D : 22                          dec     sp ;make a work area
     780/     D2E : 8A                          glo     R10
     780/     D2F : 52                          str     sp 
     780/     D30 : 8B                          glo     R11
     780/     D31 : F7                          sm
     780/     D32 : 9A                          ghi     R10
     780/     D33 : 52                          str     sp
     780/     D34 : 9B                          ghi     R11
     780/     D35 : 77                          smb          ;that's a standard signed subtraction
     780/     D36 : 9B                          ghi     R11 ;
     780/     D37 : F3                          xor           ;sets the top bit if the signs are different
     780/     D38 : 12                          inc     sp ;release the work area
     780/     D39 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     780/     D3A : C7                          lsnf    ;bypass the flip if signs were the same
     780/     D3B : FB 01                       xri     01     ;invert original df if signs were different
     780/     D3D : 76                          shrc           ;put it back in df
     780/     D3E : CB 10 45                    LBNF    L73  ;execute 
     781/     D41 :                     L89:
     782/     D41 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     782/     D41 : =>TRUE                      if      ('O'='O')
     782/     D41 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     782/     D41 : 82                          glo     SP
     782/     D42 : FC 0B                       adi     ((-5+16))#256
     782/     D44 : AE                          plo     MEMADDR
     782/     D45 : 92                          ghi     SP
     782/     D46 : 7C 00                       adci    ((-5+16))>>8; was/256
     782/     D48 : BE                          phi     MEMADDR
     782/     D49 : =>FALSE                     else
     782/     D49 :                                     ldAD    memAddr,SP
     782/     D49 : [782]                       endif
     782/     D49 : 4E                          lda     memAddr
     782/     D4A : BB                          phi     R11
     782/     D4B : 0E                          ldn     memAddr
     782/     D4C : AB                          plo     R11
     783/     D4D : (MACRO)             	jeqU2I r11,99,L78
     783/     D4D : 8B                          glo     R11
     783/     D4E : FF 63                       smi     (99)#256
     783/     D50 : CA 0D 59                    lbnz    $$nobr
     783/     D53 : 9B                          ghi     R11
     783/     D54 : 7F 00                       smbi    (99)>>8; was/256
     783/     D56 : C2 0E 0B                    lbz     L78
     783/     D59 :                     $$nobr:
     784/     D59 : (MACRO)             	jeqU2I r11,100,L76
     784/     D59 : 8B                          glo     R11
     784/     D5A : FF 64                       smi     (100)#256
     784/     D5C : CA 0D 65                    lbnz    $$nobr
     784/     D5F : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 73 - 2/13/2013 16:29:36


     784/     D60 : 7F 00                       smbi    (100)>>8; was/256
     784/     D62 : C2 0D BB                    lbz     L76
     784/     D65 :                     $$nobr:
     785/     D65 : C0 10 45            	lbr L73
     786/     D68 :                     L88:
     787/     D68 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     787/     D68 : =>TRUE                      if      ('O'='O')
     787/     D68 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     787/     D68 : 82                          glo     SP
     787/     D69 : FC 0B                       adi     ((-5+16))#256
     787/     D6B : AE                          plo     MEMADDR
     787/     D6C : 92                          ghi     SP
     787/     D6D : 7C 00                       adci    ((-5+16))>>8; was/256
     787/     D6F : BE                          phi     MEMADDR
     787/     D70 : =>FALSE                     else
     787/     D70 :                                     ldAD    memAddr,SP
     787/     D70 : [787]                       endif
     787/     D70 : 4E                          lda     memAddr
     787/     D71 : BB                          phi     R11
     787/     D72 : 0E                          ldn     memAddr
     787/     D73 : AB                          plo     R11
     788/     D74 : (MACRO)             	ldA2 R10,'D',(115),0; reg:addr
     788/     D74 : =>FALSE                     if      ('D'='O')
     788/     D74 :                                     ldAX    R10,(115),0
     788/     D74 : =>TRUE                      else
     788/     D74 :  (MACRO-2)                          ldAD    R10,(115)
     788/     D74 : F8 73                       ldi     ((115))&255
     788/     D76 : AA                          plo     R10
     788/     D77 : F8 00                       ldi     ((115))>>8; was/256
     788/     D79 : BA                          phi     R10
     788/     D7A : [788]                       endif
     789/     D7A : (MACRO)             	jeqI2 r11,r10,L77
     789/     D7A : 22                          dec     sp
     789/     D7B : 8A                          glo     R10
     789/     D7C : 52                          str     sp
     789/     D7D : 8B                          glo     R11
     789/     D7E : F7                          sm
     789/     D7F : 12                          inc     sp
     789/     D80 : CA 0D 8C                    lbnz    $$nobr
     789/     D83 : 22                          dec     sp
     789/     D84 : 9A                          ghi     R10
     789/     D85 : 52                          str     sp
     789/     D86 : 9B                          ghi     R11
     789/     D87 : 77                          smb
     789/     D88 : 12                          inc     sp
     789/     D89 : C2 0D E1                    lbz     L77
     789/     D8C :                     $$nobr:
     790/     D8C : (MACRO)             	jcI2 r11,r10,lbnf,L73; LT=lbnf i.e. subtract B from A and jump if borrow 
     790/     D8C : 22                          dec     sp ;make a work area
     790/     D8D : 8A                          glo     R10
     790/     D8E : 52                          str     sp 
     790/     D8F : 8B                          glo     R11
     790/     D90 : F7                          sm
     790/     D91 : 9A                          ghi     R10
     790/     D92 : 52                          str     sp
     790/     D93 : 9B                          ghi     R11
     790/     D94 : 77                          smb          ;that's a standard signed subtraction
     790/     D95 : 9B                          ghi     R11 ;
     790/     D96 : F3                          xor           ;sets the top bit if the signs are different
     790/     D97 : 12                          inc     sp ;release the work area
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 74 - 2/13/2013 16:29:36


     790/     D98 : 7E                          shlc          ;the original df is now in bit 0 and df=1 if signs were different
     790/     D99 : C7                          lsnf    ;bypass the flip if signs were the same
     790/     D9A : FB 01                       xri     01     ;invert original df if signs were different
     790/     D9C : 76                          shrc           ;put it back in df
     790/     D9D : CB 10 45                    LBNF    L73  ;execute 
     791/     DA0 :                     L90:
     792/     DA0 : (MACRO)             	ld2 R11,'O',sp,(-5+16)
     792/     DA0 : =>TRUE                      if      ('O'='O')
     792/     DA0 :  (MACRO-2)                          ldAX    memAddr,SP,(-5+16)
     792/     DA0 : 82                          glo     SP
     792/     DA1 : FC 0B                       adi     ((-5+16))#256
     792/     DA3 : AE                          plo     MEMADDR
     792/     DA4 : 92                          ghi     SP
     792/     DA5 : 7C 00                       adci    ((-5+16))>>8; was/256
     792/     DA7 : BE                          phi     MEMADDR
     792/     DA8 : =>FALSE                     else
     792/     DA8 :                                     ldAD    memAddr,SP
     792/     DA8 : [792]                       endif
     792/     DA8 : 4E                          lda     memAddr
     792/     DA9 : BB                          phi     R11
     792/     DAA : 0E                          ldn     memAddr
     792/     DAB : AB                          plo     R11
     793/     DAC : (MACRO)             	jeqU2I r11,120,L79
     793/     DAC : 8B                          glo     R11
     793/     DAD : FF 78                       smi     (120)#256
     793/     DAF : CA 0D B8                    lbnz    $$nobr
     793/     DB2 : 9B                          ghi     R11
     793/     DB3 : 7F 00                       smbi    (120)>>8; was/256
     793/     DB5 : C2 0E 36                    lbz     L79
     793/     DB8 :                     $$nobr:
     794/     DB8 : C0 10 45            	lbr L73
     795/     DBB :                     L76:
     796/     DBB :                     ;					printint(*this++);
     797/     DBB : (MACRO)             	cpy2 R11,R1
     797/     DBB : 81                          glo     R1
     797/     DBC : AB                          plo     R11
     797/     DBD : 91                          ghi     R1
     797/     DBE : BB                          phi     R11
     798/     DBF : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     798/     DBF : =>TRUE                      if      ('O'='O')
     798/     DBF :  (MACRO-2)                          ldAX    R1,R11,(2)
     798/     DBF : 8B                          glo     R11
     798/     DC0 : FC 02                       adi     ((2))#256
     798/     DC2 : A1                          plo     R1
     798/     DC3 : 9B                          ghi     R11
     798/     DC4 : 7C 00                       adci    ((2))>>8; was/256
     798/     DC6 : B1                          phi     R1
     798/     DC7 : =>FALSE                     else
     798/     DC7 :                                     ldAD    R1,R11
     798/     DC7 : [798]                       endif
     799/     DC7 : (MACRO)             	ld2 R12,'O',R11,0
     799/     DC7 : =>TRUE                      if      ('O'='O')
     799/     DC7 :  (MACRO-2)                          ldAX    memAddr,R11,0
     799/     DC7 : 8B                          glo     R11
     799/     DC8 : FC 00                       adi     (0)#256
     799/     DCA : AE                          plo     MEMADDR
     799/     DCB : 9B                          ghi     R11
     799/     DCC : 7C 00                       adci    (0)>>8; was/256
     799/     DCE : BE                          phi     MEMADDR
     799/     DCF : =>FALSE                     else
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 75 - 2/13/2013 16:29:36


     799/     DCF :                                     ldAD    memAddr,R11
     799/     DCF : [799]                       endif
     799/     DCF : 4E                          lda     memAddr
     799/     DD0 : BC                          phi     R12
     799/     DD1 : 0E                          ldn     memAddr
     799/     DD2 : AC                          plo     R12
     800/     DD3 : (MACRO)             	Ccall _printint
     800/     DD3 : D4                          sep     RCALL
     800/     DD4 : 0A 2D                       dw      _PRINTINT
     801/     DD6 :                     ;					argslot+=1; //next argument slot
     802/     DD6 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     802/     DD6 : =>TRUE                      if      ('O'='O')
     802/     DD6 :  (MACRO-2)                          ldAX    R0,R0,(1)
     802/     DD6 : 80                          glo     R0
     802/     DD7 : FC 01                       adi     ((1))#256
     802/     DD9 : A0                          plo     R0
     802/     DDA : 90                          ghi     R0
     802/     DDB : 7C 00                       adci    ((1))>>8; was/256
     802/     DDD : B0                          phi     R0
     802/     DDE : =>FALSE                     else
     802/     DDE :                                     ldAD    R0,R0
     802/     DDE : [802]                       endif
     803/     DDE :                     ;					break;
     804/     DDE : C0 10 56            	lbr L74
     805/     DE1 :                     L77:
     806/     DE1 :                     ;					printstr((char*) *this++);
     807/     DE1 : (MACRO)             	cpy2 R11,R1
     807/     DE1 : 81                          glo     R1
     807/     DE2 : AB                          plo     R11
     807/     DE3 : 91                          ghi     R1
     807/     DE4 : BB                          phi     R11
     808/     DE5 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     808/     DE5 : =>TRUE                      if      ('O'='O')
     808/     DE5 :  (MACRO-2)                          ldAX    R1,R11,(2)
     808/     DE5 : 8B                          glo     R11
     808/     DE6 : FC 02                       adi     ((2))#256
     808/     DE8 : A1                          plo     R1
     808/     DE9 : 9B                          ghi     R11
     808/     DEA : 7C 00                       adci    ((2))>>8; was/256
     808/     DEC : B1                          phi     R1
     808/     DED : =>FALSE                     else
     808/     DED :                                     ldAD    R1,R11
     808/     DED : [808]                       endif
     809/     DED : (MACRO)             	ld2 R11,'O',R11,0
     809/     DED : =>TRUE                      if      ('O'='O')
     809/     DED :  (MACRO-2)                          ldAX    memAddr,R11,0
     809/     DED : 8B                          glo     R11
     809/     DEE : FC 00                       adi     (0)#256
     809/     DF0 : AE                          plo     MEMADDR
     809/     DF1 : 9B                          ghi     R11
     809/     DF2 : 7C 00                       adci    (0)>>8; was/256
     809/     DF4 : BE                          phi     MEMADDR
     809/     DF5 : =>FALSE                     else
     809/     DF5 :                                     ldAD    memAddr,R11
     809/     DF5 : [809]                       endif
     809/     DF5 : 4E                          lda     memAddr
     809/     DF6 : BB                          phi     R11
     809/     DF7 : 0E                          ldn     memAddr
     809/     DF8 : AB                          plo     R11
     810/     DF9 : (MACRO)             	cpy2 R12,R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 76 - 2/13/2013 16:29:36


     810/     DF9 : 8B                          glo     R11
     810/     DFA : AC                          plo     R12
     810/     DFB : 9B                          ghi     R11
     810/     DFC : BC                          phi     R12
     811/     DFD : (MACRO)             	Ccall _printstr
     811/     DFD : D4                          sep     RCALL
     811/     DFE : 06 D8                       dw      _PRINTSTR
     812/     E00 :                     ;					argslot+=1; //next argument slot
     813/     E00 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     813/     E00 : =>TRUE                      if      ('O'='O')
     813/     E00 :  (MACRO-2)                          ldAX    R0,R0,(1)
     813/     E00 : 80                          glo     R0
     813/     E01 : FC 01                       adi     ((1))#256
     813/     E03 : A0                          plo     R0
     813/     E04 : 90                          ghi     R0
     813/     E05 : 7C 00                       adci    ((1))>>8; was/256
     813/     E07 : B0                          phi     R0
     813/     E08 : =>FALSE                     else
     813/     E08 :                                     ldAD    R0,R0
     813/     E08 : [813]                       endif
     814/     E08 :                     ;					break;
     815/     E08 : C0 10 56            	lbr L74
     816/     E0B :                     L78:
     817/     E0B :                     ;					putc((unsigned int) *this++);
     818/     E0B : (MACRO)             	cpy2 R11,R1
     818/     E0B : 81                          glo     R1
     818/     E0C : AB                          plo     R11
     818/     E0D : 91                          ghi     R1
     818/     E0E : BB                          phi     R11
     819/     E0F : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     819/     E0F : =>TRUE                      if      ('O'='O')
     819/     E0F :  (MACRO-2)                          ldAX    R1,R11,(2)
     819/     E0F : 8B                          glo     R11
     819/     E10 : FC 02                       adi     ((2))#256
     819/     E12 : A1                          plo     R1
     819/     E13 : 9B                          ghi     R11
     819/     E14 : 7C 00                       adci    ((2))>>8; was/256
     819/     E16 : B1                          phi     R1
     819/     E17 : =>FALSE                     else
     819/     E17 :                                     ldAD    R1,R11
     819/     E17 : [819]                       endif
     820/     E17 : (MACRO)             	ld2 R11,'O',R11,0
     820/     E17 : =>TRUE                      if      ('O'='O')
     820/     E17 :  (MACRO-2)                          ldAX    memAddr,R11,0
     820/     E17 : 8B                          glo     R11
     820/     E18 : FC 00                       adi     (0)#256
     820/     E1A : AE                          plo     MEMADDR
     820/     E1B : 9B                          ghi     R11
     820/     E1C : 7C 00                       adci    (0)>>8; was/256
     820/     E1E : BE                          phi     MEMADDR
     820/     E1F : =>FALSE                     else
     820/     E1F :                                     ldAD    memAddr,R11
     820/     E1F : [820]                       endif
     820/     E1F : 4E                          lda     memAddr
     820/     E20 : BB                          phi     R11
     820/     E21 : 0E                          ldn     memAddr
     820/     E22 : AB                          plo     R11
     821/     E23 : (MACRO)             	cpy1 R12,R11
     821/     E23 : 8B                          glo     R11
     821/     E24 : AC                          plo     R12
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 77 - 2/13/2013 16:29:36


     822/     E25 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     822/     E25 : F8 00                       ldi     0
     822/     E27 : BC                          phi     12
     823/     E28 : (MACRO)             	Ccall _putc
     823/     E28 : D4                          sep     RCALL
     823/     E29 : 15 13                       dw      _PUTC
     824/     E2B :                     ;					argslot+=1; //next argument slot
     825/     E2B : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     825/     E2B : =>TRUE                      if      ('O'='O')
     825/     E2B :  (MACRO-2)                          ldAX    R0,R0,(1)
     825/     E2B : 80                          glo     R0
     825/     E2C : FC 01                       adi     ((1))#256
     825/     E2E : A0                          plo     R0
     825/     E2F : 90                          ghi     R0
     825/     E30 : 7C 00                       adci    ((1))>>8; was/256
     825/     E32 : B0                          phi     R0
     825/     E33 : =>FALSE                     else
     825/     E33 :                                     ldAD    R0,R0
     825/     E33 : [825]                       endif
     826/     E33 :                     ;					break;
     827/     E33 : C0 10 56            	lbr L74
     828/     E36 :                     L79:
     829/     E36 :                     ;					putx(((unsigned int) *this)>>8);
     830/     E36 : (MACRO)             	ld2 R11,'O',R1,0
     830/     E36 : =>TRUE                      if      ('O'='O')
     830/     E36 :  (MACRO-2)                          ldAX    memAddr,R1,0
     830/     E36 : 81                          glo     R1
     830/     E37 : FC 00                       adi     (0)#256
     830/     E39 : AE                          plo     MEMADDR
     830/     E3A : 91                          ghi     R1
     830/     E3B : 7C 00                       adci    (0)>>8; was/256
     830/     E3D : BE                          phi     MEMADDR
     830/     E3E : =>FALSE                     else
     830/     E3E :                                     ldAD    memAddr,R1
     830/     E3E : [830]                       endif
     830/     E3E : 4E                          lda     memAddr
     830/     E3F : BB                          phi     R11
     830/     E40 : 0E                          ldn     memAddr
     830/     E41 : AB                          plo     R11
     831/     E42 : (MACRO)             	shrU2I R11,8
     831/     E42 :                             rept    8
     831/     E42 :                             shrU2   R11
     831/     E42 :                             endm
     831/     E42 :  (MACRO-2)                  shrU2   R11
     831/     E42 : 9B                          ghi     R11
     831/     E43 : F6                          shr
     831/     E44 : BB                          phi     R11
     831/     E45 : 8B                          glo     R11
     831/     E46 : 76                          shrc
     831/     E47 : AB                          plo     R11
     831/     E48 :  (MACRO-2)                  shrU2   R11
     831/     E48 : 9B                          ghi     R11
     831/     E49 : F6                          shr
     831/     E4A : BB                          phi     R11
     831/     E4B : 8B                          glo     R11
     831/     E4C : 76                          shrc
     831/     E4D : AB                          plo     R11
     831/     E4E :  (MACRO-2)                  shrU2   R11
     831/     E4E : 9B                          ghi     R11
     831/     E4F : F6                          shr
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 78 - 2/13/2013 16:29:36


     831/     E50 : BB                          phi     R11
     831/     E51 : 8B                          glo     R11
     831/     E52 : 76                          shrc
     831/     E53 : AB                          plo     R11
     831/     E54 :  (MACRO-2)                  shrU2   R11
     831/     E54 : 9B                          ghi     R11
     831/     E55 : F6                          shr
     831/     E56 : BB                          phi     R11
     831/     E57 : 8B                          glo     R11
     831/     E58 : 76                          shrc
     831/     E59 : AB                          plo     R11
     831/     E5A :  (MACRO-2)                  shrU2   R11
     831/     E5A : 9B                          ghi     R11
     831/     E5B : F6                          shr
     831/     E5C : BB                          phi     R11
     831/     E5D : 8B                          glo     R11
     831/     E5E : 76                          shrc
     831/     E5F : AB                          plo     R11
     831/     E60 :  (MACRO-2)                  shrU2   R11
     831/     E60 : 9B                          ghi     R11
     831/     E61 : F6                          shr
     831/     E62 : BB                          phi     R11
     831/     E63 : 8B                          glo     R11
     831/     E64 : 76                          shrc
     831/     E65 : AB                          plo     R11
     831/     E66 :  (MACRO-2)                  shrU2   R11
     831/     E66 : 9B                          ghi     R11
     831/     E67 : F6                          shr
     831/     E68 : BB                          phi     R11
     831/     E69 : 8B                          glo     R11
     831/     E6A : 76                          shrc
     831/     E6B : AB                          plo     R11
     831/     E6C :  (MACRO-2)                  shrU2   R11
     831/     E6C : 9B                          ghi     R11
     831/     E6D : F6                          shr
     831/     E6E : BB                          phi     R11
     831/     E6F : 8B                          glo     R11
     831/     E70 : 76                          shrc
     831/     E71 : AB                          plo     R11
     832/     E72 : (MACRO)             	cpy1 R12,R11
     832/     E72 : 8B                          glo     R11
     832/     E73 : AC                          plo     R12
     833/     E74 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     833/     E74 : F8 00                       ldi     0
     833/     E76 : BC                          phi     12
     834/     E77 : (MACRO)             	Ccall _putx
     834/     E77 : D4                          sep     RCALL
     834/     E78 : 0B 62                       dw      _PUTX
     835/     E7A :                     ;					putx(((unsigned int) *this++)&255);
     836/     E7A : (MACRO)             	cpy2 R11,R1
     836/     E7A : 81                          glo     R1
     836/     E7B : AB                          plo     R11
     836/     E7C : 91                          ghi     R1
     836/     E7D : BB                          phi     R11
     837/     E7E : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     837/     E7E : =>TRUE                      if      ('O'='O')
     837/     E7E :  (MACRO-2)                          ldAX    R1,R11,(2)
     837/     E7E : 8B                          glo     R11
     837/     E7F : FC 02                       adi     ((2))#256
     837/     E81 : A1                          plo     R1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 79 - 2/13/2013 16:29:36


     837/     E82 : 9B                          ghi     R11
     837/     E83 : 7C 00                       adci    ((2))>>8; was/256
     837/     E85 : B1                          phi     R1
     837/     E86 : =>FALSE                     else
     837/     E86 :                                     ldAD    R1,R11
     837/     E86 : [837]                       endif
     838/     E86 : (MACRO)             	ld2 R11,'O',R11,0
     838/     E86 : =>TRUE                      if      ('O'='O')
     838/     E86 :  (MACRO-2)                          ldAX    memAddr,R11,0
     838/     E86 : 8B                          glo     R11
     838/     E87 : FC 00                       adi     (0)#256
     838/     E89 : AE                          plo     MEMADDR
     838/     E8A : 9B                          ghi     R11
     838/     E8B : 7C 00                       adci    (0)>>8; was/256
     838/     E8D : BE                          phi     MEMADDR
     838/     E8E : =>FALSE                     else
     838/     E8E :                                     ldAD    memAddr,R11
     838/     E8E : [838]                       endif
     838/     E8E : 4E                          lda     memAddr
     838/     E8F : BB                          phi     R11
     838/     E90 : 0E                          ldn     memAddr
     838/     E91 : AB                          plo     R11
     839/     E92 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     839/     E92 : 8B                          glo     R11
     839/     E93 : FA FF                       ANI     (255)#256
     839/     E95 : AB                          plo     R11
     839/     E96 : 9B                          ghi     R11
     839/     E97 : FA 00                       ANI     (255)>>8; was/256
     839/     E99 : BB                          phi     R11
     840/     E9A : (MACRO)             	cpy1 R12,R11
     840/     E9A : 8B                          glo     R11
     840/     E9B : AC                          plo     R12
     841/     E9C : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     841/     E9C : F8 00                       ldi     0
     841/     E9E : BC                          phi     12
     842/     E9F : (MACRO)             	Ccall _putx
     842/     E9F : D4                          sep     RCALL
     842/     EA0 : 0B 62                       dw      _PUTX
     843/     EA2 :                     ;					argslot+=1; //next argument slot
     844/     EA2 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     844/     EA2 : =>TRUE                      if      ('O'='O')
     844/     EA2 :  (MACRO-2)                          ldAX    R0,R0,(1)
     844/     EA2 : 80                          glo     R0
     844/     EA3 : FC 01                       adi     ((1))#256
     844/     EA5 : A0                          plo     R0
     844/     EA6 : 90                          ghi     R0
     844/     EA7 : 7C 00                       adci    ((1))>>8; was/256
     844/     EA9 : B0                          phi     R0
     844/     EAA : =>FALSE                     else
     844/     EAA :                                     ldAD    R0,R0
     844/     EAA : [844]                       endif
     845/     EAA :                     ;					break;
     846/     EAA : C0 10 56            	lbr L74
     847/     EAD :                     L80:
     848/     EAD :                     ;					if (*ptr){ //as long as there's something there
     849/     EAD : (MACRO)             	ld2 R11,'O',sp,(0+16)
     849/     EAD : =>TRUE                      if      ('O'='O')
     849/     EAD :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     849/     EAD : 82                          glo     SP
     849/     EAE : FC 10                       adi     ((0+16))#256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 80 - 2/13/2013 16:29:36


     849/     EB0 : AE                          plo     MEMADDR
     849/     EB1 : 92                          ghi     SP
     849/     EB2 : 7C 00                       adci    ((0+16))>>8; was/256
     849/     EB4 : BE                          phi     MEMADDR
     849/     EB5 : =>FALSE                     else
     849/     EB5 :                                     ldAD    memAddr,SP
     849/     EB5 : [849]                       endif
     849/     EB5 : 4E                          lda     memAddr
     849/     EB6 : BB                          phi     R11
     849/     EB7 : 0E                          ldn     memAddr
     849/     EB8 : AB                          plo     R11
     850/     EB9 : (MACRO)             	ld1 R11,'O',R11,0
     850/     EB9 : =>TRUE                      if      ('O'='O')
     850/     EB9 :  (MACRO-2)                          ldAX    memAddr,R11,0
     850/     EB9 : 8B                          glo     R11
     850/     EBA : FC 00                       adi     (0)#256
     850/     EBC : AE                          plo     MEMADDR
     850/     EBD : 9B                          ghi     R11
     850/     EBE : 7C 00                       adci    (0)>>8; was/256
     850/     EC0 : BE                          phi     MEMADDR
     850/     EC1 : =>FALSE                     else
     850/     EC1 :                                     ldAD    memAddr,R11
     850/     EC1 : [850]                       endif
     850/     EC1 : 0E                          ldn     memAddr
     850/     EC2 : AB                          plo     R11
     851/     EC3 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     851/     EC3 : F8 00                       ldi     0
     851/     EC5 : BB                          phi     11
     852/     EC6 : (MACRO)             	jeqU2I r11,0,L81
     852/     EC6 : 8B                          glo     R11
     852/     EC7 : FF 00                       smi     (0)#256
     852/     EC9 : CA 0E D2                    lbnz    $$nobr
     852/     ECC : 9B                          ghi     R11
     852/     ECD : 7F 00                       smbi    (0)>>8; was/256
     852/     ECF : C2 10 45                    lbz     L81
     852/     ED2 :                     $$nobr:
     853/     ED2 :                     ;						xord=*ptr++;
     854/     ED2 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     854/     ED2 : =>TRUE                      if      ('O'='O')
     854/     ED2 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     854/     ED2 : 82                          glo     SP
     854/     ED3 : FC 10                       adi     ((0+16))#256
     854/     ED5 : AE                          plo     MEMADDR
     854/     ED6 : 92                          ghi     SP
     854/     ED7 : 7C 00                       adci    ((0+16))>>8; was/256
     854/     ED9 : BE                          phi     MEMADDR
     854/     EDA : =>FALSE                     else
     854/     EDA :                                     ldAD    memAddr,SP
     854/     EDA : [854]                       endif
     854/     EDA : 4E                          lda     memAddr
     854/     EDB : BB                          phi     R11
     854/     EDC : 0E                          ldn     memAddr
     854/     EDD : AB                          plo     R11
     855/     EDE : (MACRO)             	ldA2 R10,'O',R11,(1); reg:addr
     855/     EDE : =>TRUE                      if      ('O'='O')
     855/     EDE :  (MACRO-2)                          ldAX    R10,R11,(1)
     855/     EDE : 8B                          glo     R11
     855/     EDF : FC 01                       adi     ((1))#256
     855/     EE1 : AA                          plo     R10
     855/     EE2 : 9B                          ghi     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 81 - 2/13/2013 16:29:36


     855/     EE3 : 7C 00                       adci    ((1))>>8; was/256
     855/     EE5 : BA                          phi     R10
     855/     EE6 : =>FALSE                     else
     855/     EE6 :                                     ldAD    R10,R11
     855/     EE6 : [855]                       endif
     856/     EE6 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     856/     EE6 : =>TRUE                      if      ('O'='O')
     856/     EE6 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     856/     EE6 : 82                          glo     SP
     856/     EE7 : FC 10                       adi     ((0+16))#256
     856/     EE9 : AE                          plo     MEMADDR
     856/     EEA : 92                          ghi     SP
     856/     EEB : 7C 00                       adci    ((0+16))>>8; was/256
     856/     EED : BE                          phi     MEMADDR
     856/     EEE : =>FALSE                     else
     856/     EEE :                                     ldAD    memAddr,SP
     856/     EEE : [856]                       endif
     856/     EEE : 9A                          ghi     R10
     856/     EEF : 5E                          str     memAddr
     856/     EF0 : 1E                          inc     memAddr
     856/     EF1 : 8A                          glo     R10
     856/     EF2 : 5E                          str     memAddr
     857/     EF3 : (MACRO)             	ld1 R11,'O',R11,0
     857/     EF3 : =>TRUE                      if      ('O'='O')
     857/     EF3 :  (MACRO-2)                          ldAX    memAddr,R11,0
     857/     EF3 : 8B                          glo     R11
     857/     EF4 : FC 00                       adi     (0)#256
     857/     EF6 : AE                          plo     MEMADDR
     857/     EF7 : 9B                          ghi     R11
     857/     EF8 : 7C 00                       adci    (0)>>8; was/256
     857/     EFA : BE                          phi     MEMADDR
     857/     EFB : =>FALSE                     else
     857/     EFB :                                     ldAD    memAddr,R11
     857/     EFB : [857]                       endif
     857/     EFB : 0E                          ldn     memAddr
     857/     EFC : AB                          plo     R11
     858/     EFD : (MACRO)             	st1 R11,'O',sp,(-3+16)
     858/     EFD : =>TRUE                      if      ('O'='O')
     858/     EFD :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
     858/     EFD : 82                          glo     SP
     858/     EFE : FC 0D                       adi     ((-3+16))#256
     858/     F00 : AE                          plo     MEMADDR
     858/     F01 : 92                          ghi     SP
     858/     F02 : 7C 00                       adci    ((-3+16))>>8; was/256
     858/     F04 : BE                          phi     MEMADDR
     858/     F05 : =>FALSE                     else
     858/     F05 :                                     ldAD    memAddr,SP
     858/     F05 : [858]                       endif
     858/     F05 : 8B                          glo     R11
     858/     F06 : 5E                          str     memAddr
     859/     F07 :                     ;						if (argslot&1) {
     860/     F07 : (MACRO)             	alu2I R11,R0,1,ani,ani
     860/     F07 : 80                          glo     R0
     860/     F08 : FA 01                       ANI     (1)#256
     860/     F0A : AB                          plo     R11
     860/     F0B : 90                          ghi     R0
     860/     F0C : FA 00                       ANI     (1)>>8; was/256
     860/     F0E : BB                          phi     R11
     861/     F0F :                     	;removed ?	cpy2 R11,R0
     862/     F0F : (MACRO)             	jeqU2I r11,0,L83
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 82 - 2/13/2013 16:29:36


     862/     F0F : 8B                          glo     R11
     862/     F10 : FF 00                       smi     (0)#256
     862/     F12 : CA 0F 1B                    lbnz    $$nobr
     862/     F15 : 9B                          ghi     R11
     862/     F16 : 7F 00                       smbi    (0)>>8; was/256
     862/     F18 : C2 0F 2B                    lbz     L83
     862/     F1B :                     $$nobr:
     863/     F1B :                     ;							this++;
     864/     F1B : (MACRO)             	ldA2 R1,'O',R1,(2); reg:addr
     864/     F1B : =>TRUE                      if      ('O'='O')
     864/     F1B :  (MACRO-2)                          ldAX    R1,R1,(2)
     864/     F1B : 81                          glo     R1
     864/     F1C : FC 02                       adi     ((2))#256
     864/     F1E : A1                          plo     R1
     864/     F1F : 91                          ghi     R1
     864/     F20 : 7C 00                       adci    ((2))>>8; was/256
     864/     F22 : B1                          phi     R1
     864/     F23 : =>FALSE                     else
     864/     F23 :                                     ldAD    R1,R1
     864/     F23 : [864]                       endif
     865/     F23 :                     ;							argslot++;
     866/     F23 : (MACRO)             	ldA2 R0,'O',R0,(1); reg:addr
     866/     F23 : =>TRUE                      if      ('O'='O')
     866/     F23 :  (MACRO-2)                          ldAX    R0,R0,(1)
     866/     F23 : 80                          glo     R0
     866/     F24 : FC 01                       adi     ((1))#256
     866/     F26 : A0                          plo     R0
     866/     F27 : 90                          ghi     R0
     866/     F28 : 7C 00                       adci    ((1))>>8; was/256
     866/     F2A : B0                          phi     R0
     866/     F2B : =>FALSE                     else
     866/     F2B :                                     ldAD    R0,R0
     866/     F2B : [866]                       endif
     867/     F2B :                     ;						}
     868/     F2B :                     L83:
     869/     F2B :                     ;						if(xord=='d'){
     870/     F2B : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     870/     F2B : =>TRUE                      if      ('O'='O')
     870/     F2B :  (MACRO-2)                          ldAX    memAddr,SP,(-3+16)
     870/     F2B : 82                          glo     SP
     870/     F2C : FC 0D                       adi     ((-3+16))#256
     870/     F2E : AE                          plo     MEMADDR
     870/     F2F : 92                          ghi     SP
     870/     F30 : 7C 00                       adci    ((-3+16))>>8; was/256
     870/     F32 : BE                          phi     MEMADDR
     870/     F33 : =>FALSE                     else
     870/     F33 :                                     ldAD    memAddr,SP
     870/     F33 : [870]                       endif
     870/     F33 : 0E                          ldn     memAddr
     870/     F34 : AB                          plo     R11
     871/     F35 : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     871/     F35 : F8 00                       ldi     0
     871/     F37 : BB                          phi     11
     872/     F38 : (MACRO)             	jneU2I r11,100,L85; NE
     872/     F38 : 8B                          glo     R11
     872/     F39 : FF 64                       smi     (100)#256
     872/     F3B : CA 0F 62                    lbnz    L85
     872/     F3E : 9B                          ghi     R11
     872/     F3F : 7F 00                       smbi    (100)>>8; was/256
     872/     F41 : CA 0F 62                    lbnz    L85
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 83 - 2/13/2013 16:29:36


     873/     F44 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     874/     F44 : (MACRO)             	ld4 Rp1p2,'O',R1,0
     874/     F44 : =>TRUE                      if      ('O'='O')
     874/     F44 :  (MACRO-2)                          ldAX    memAddr,R1,0
     874/     F44 : 81                          glo     R1
     874/     F45 : FC 00                       adi     (0)#256
     874/     F47 : AE                          plo     MEMADDR
     874/     F48 : 91                          ghi     R1
     874/     F49 : 7C 00                       adci    (0)>>8; was/256
     874/     F4B : BE                          phi     MEMADDR
     874/     F4C : =>FALSE                     else
     874/     F4C :                                     ldAD    memAddr,R1
     874/     F4C : [874]                       endif
     874/     F4C : 4E                          lda     memAddr
     874/     F4D : BC                          phi     RP1P2-1   ;long register pairs are addressed by their second member
     874/     F4E : 4E                          lda     memAddr ;but load and store start with the 1st
     874/     F4F : AC                          plo     RP1P2-1
     874/     F50 : 4E                          lda     memAddr
     874/     F51 : BD                          phi     RP1P2
     874/     F52 : 0E                          ldn     memAddr
     874/     F53 : AD                          plo     RP1P2
     875/     F54 : (MACRO)             	Ccall _printlint
     875/     F54 : D4                          sep     RCALL
     875/     F55 : 0A 6D                       dw      _PRINTLINT
     876/     F57 :                     ;							this+=2;				// and advances it 4 bytes
     877/     F57 : (MACRO)             	ldA2 R1,'O',R1,(4); reg:addr
     877/     F57 : =>TRUE                      if      ('O'='O')
     877/     F57 :  (MACRO-2)                          ldAX    R1,R1,(4)
     877/     F57 : 81                          glo     R1
     877/     F58 : FC 04                       adi     ((4))#256
     877/     F5A : A1                          plo     R1
     877/     F5B : 91                          ghi     R1
     877/     F5C : 7C 00                       adci    ((4))>>8; was/256
     877/     F5E : B1                          phi     R1
     877/     F5F : =>FALSE                     else
     877/     F5F :                                     ldAD    R1,R1
     877/     F5F : [877]                       endif
     878/     F5F :                     ;						} else{
     879/     F5F : C0 10 3A            	lbr L86
     880/     F62 :                     L85:
     881/     F62 :                     ;							putx(((unsigned int) *this)>>8);
     882/     F62 : (MACRO)             	ld2 R11,'O',R1,0
     882/     F62 : =>TRUE                      if      ('O'='O')
     882/     F62 :  (MACRO-2)                          ldAX    memAddr,R1,0
     882/     F62 : 81                          glo     R1
     882/     F63 : FC 00                       adi     (0)#256
     882/     F65 : AE                          plo     MEMADDR
     882/     F66 : 91                          ghi     R1
     882/     F67 : 7C 00                       adci    (0)>>8; was/256
     882/     F69 : BE                          phi     MEMADDR
     882/     F6A : =>FALSE                     else
     882/     F6A :                                     ldAD    memAddr,R1
     882/     F6A : [882]                       endif
     882/     F6A : 4E                          lda     memAddr
     882/     F6B : BB                          phi     R11
     882/     F6C : 0E                          ldn     memAddr
     882/     F6D : AB                          plo     R11
     883/     F6E : (MACRO)             	shrU2I R11,8
     883/     F6E :                             rept    8
     883/     F6E :                             shrU2   R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 84 - 2/13/2013 16:29:36


     883/     F6E :                             endm
     883/     F6E :  (MACRO-2)                  shrU2   R11
     883/     F6E : 9B                          ghi     R11
     883/     F6F : F6                          shr
     883/     F70 : BB                          phi     R11
     883/     F71 : 8B                          glo     R11
     883/     F72 : 76                          shrc
     883/     F73 : AB                          plo     R11
     883/     F74 :  (MACRO-2)                  shrU2   R11
     883/     F74 : 9B                          ghi     R11
     883/     F75 : F6                          shr
     883/     F76 : BB                          phi     R11
     883/     F77 : 8B                          glo     R11
     883/     F78 : 76                          shrc
     883/     F79 : AB                          plo     R11
     883/     F7A :  (MACRO-2)                  shrU2   R11
     883/     F7A : 9B                          ghi     R11
     883/     F7B : F6                          shr
     883/     F7C : BB                          phi     R11
     883/     F7D : 8B                          glo     R11
     883/     F7E : 76                          shrc
     883/     F7F : AB                          plo     R11
     883/     F80 :  (MACRO-2)                  shrU2   R11
     883/     F80 : 9B                          ghi     R11
     883/     F81 : F6                          shr
     883/     F82 : BB                          phi     R11
     883/     F83 : 8B                          glo     R11
     883/     F84 : 76                          shrc
     883/     F85 : AB                          plo     R11
     883/     F86 :  (MACRO-2)                  shrU2   R11
     883/     F86 : 9B                          ghi     R11
     883/     F87 : F6                          shr
     883/     F88 : BB                          phi     R11
     883/     F89 : 8B                          glo     R11
     883/     F8A : 76                          shrc
     883/     F8B : AB                          plo     R11
     883/     F8C :  (MACRO-2)                  shrU2   R11
     883/     F8C : 9B                          ghi     R11
     883/     F8D : F6                          shr
     883/     F8E : BB                          phi     R11
     883/     F8F : 8B                          glo     R11
     883/     F90 : 76                          shrc
     883/     F91 : AB                          plo     R11
     883/     F92 :  (MACRO-2)                  shrU2   R11
     883/     F92 : 9B                          ghi     R11
     883/     F93 : F6                          shr
     883/     F94 : BB                          phi     R11
     883/     F95 : 8B                          glo     R11
     883/     F96 : 76                          shrc
     883/     F97 : AB                          plo     R11
     883/     F98 :  (MACRO-2)                  shrU2   R11
     883/     F98 : 9B                          ghi     R11
     883/     F99 : F6                          shr
     883/     F9A : BB                          phi     R11
     883/     F9B : 8B                          glo     R11
     883/     F9C : 76                          shrc
     883/     F9D : AB                          plo     R11
     884/     F9E : (MACRO)             	cpy1 R12,R11
     884/     F9E : 8B                          glo     R11
     884/     F9F : AC                          plo     R12
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 85 - 2/13/2013 16:29:36


     885/     FA0 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     885/     FA0 : F8 00                       ldi     0
     885/     FA2 : BC                          phi     12
     886/     FA3 : (MACRO)             	Ccall _putx
     886/     FA3 : D4                          sep     RCALL
     886/     FA4 : 0B 62                       dw      _PUTX
     887/     FA6 :                     ;							putx(((unsigned int) *this++)&255);
     888/     FA6 : (MACRO)             	cpy2 R11,R1
     888/     FA6 : 81                          glo     R1
     888/     FA7 : AB                          plo     R11
     888/     FA8 : 91                          ghi     R1
     888/     FA9 : BB                          phi     R11
     889/     FAA : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     889/     FAA : =>TRUE                      if      ('O'='O')
     889/     FAA :  (MACRO-2)                          ldAX    R1,R11,(2)
     889/     FAA : 8B                          glo     R11
     889/     FAB : FC 02                       adi     ((2))#256
     889/     FAD : A1                          plo     R1
     889/     FAE : 9B                          ghi     R11
     889/     FAF : 7C 00                       adci    ((2))>>8; was/256
     889/     FB1 : B1                          phi     R1
     889/     FB2 : =>FALSE                     else
     889/     FB2 :                                     ldAD    R1,R11
     889/     FB2 : [889]                       endif
     890/     FB2 : (MACRO)             	ld2 R11,'O',R11,0
     890/     FB2 : =>TRUE                      if      ('O'='O')
     890/     FB2 :  (MACRO-2)                          ldAX    memAddr,R11,0
     890/     FB2 : 8B                          glo     R11
     890/     FB3 : FC 00                       adi     (0)#256
     890/     FB5 : AE                          plo     MEMADDR
     890/     FB6 : 9B                          ghi     R11
     890/     FB7 : 7C 00                       adci    (0)>>8; was/256
     890/     FB9 : BE                          phi     MEMADDR
     890/     FBA : =>FALSE                     else
     890/     FBA :                                     ldAD    memAddr,R11
     890/     FBA : [890]                       endif
     890/     FBA : 4E                          lda     memAddr
     890/     FBB : BB                          phi     R11
     890/     FBC : 0E                          ldn     memAddr
     890/     FBD : AB                          plo     R11
     891/     FBE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     891/     FBE : 8B                          glo     R11
     891/     FBF : FA FF                       ANI     (255)#256
     891/     FC1 : AB                          plo     R11
     891/     FC2 : 9B                          ghi     R11
     891/     FC3 : FA 00                       ANI     (255)>>8; was/256
     891/     FC5 : BB                          phi     R11
     892/     FC6 : (MACRO)             	cpy1 R12,R11
     892/     FC6 : 8B                          glo     R11
     892/     FC7 : AC                          plo     R12
     893/     FC8 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     893/     FC8 : F8 00                       ldi     0
     893/     FCA : BC                          phi     12
     894/     FCB : (MACRO)             	Ccall _putx
     894/     FCB : D4                          sep     RCALL
     894/     FCC : 0B 62                       dw      _PUTX
     895/     FCE :                     ;							putx(((unsigned int) *this)>>8);
     896/     FCE : (MACRO)             	ld2 R11,'O',R1,0
     896/     FCE : =>TRUE                      if      ('O'='O')
     896/     FCE :  (MACRO-2)                          ldAX    memAddr,R1,0
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 86 - 2/13/2013 16:29:36


     896/     FCE : 81                          glo     R1
     896/     FCF : FC 00                       adi     (0)#256
     896/     FD1 : AE                          plo     MEMADDR
     896/     FD2 : 91                          ghi     R1
     896/     FD3 : 7C 00                       adci    (0)>>8; was/256
     896/     FD5 : BE                          phi     MEMADDR
     896/     FD6 : =>FALSE                     else
     896/     FD6 :                                     ldAD    memAddr,R1
     896/     FD6 : [896]                       endif
     896/     FD6 : 4E                          lda     memAddr
     896/     FD7 : BB                          phi     R11
     896/     FD8 : 0E                          ldn     memAddr
     896/     FD9 : AB                          plo     R11
     897/     FDA : (MACRO)             	shrU2I R11,8
     897/     FDA :                             rept    8
     897/     FDA :                             shrU2   R11
     897/     FDA :                             endm
     897/     FDA :  (MACRO-2)                  shrU2   R11
     897/     FDA : 9B                          ghi     R11
     897/     FDB : F6                          shr
     897/     FDC : BB                          phi     R11
     897/     FDD : 8B                          glo     R11
     897/     FDE : 76                          shrc
     897/     FDF : AB                          plo     R11
     897/     FE0 :  (MACRO-2)                  shrU2   R11
     897/     FE0 : 9B                          ghi     R11
     897/     FE1 : F6                          shr
     897/     FE2 : BB                          phi     R11
     897/     FE3 : 8B                          glo     R11
     897/     FE4 : 76                          shrc
     897/     FE5 : AB                          plo     R11
     897/     FE6 :  (MACRO-2)                  shrU2   R11
     897/     FE6 : 9B                          ghi     R11
     897/     FE7 : F6                          shr
     897/     FE8 : BB                          phi     R11
     897/     FE9 : 8B                          glo     R11
     897/     FEA : 76                          shrc
     897/     FEB : AB                          plo     R11
     897/     FEC :  (MACRO-2)                  shrU2   R11
     897/     FEC : 9B                          ghi     R11
     897/     FED : F6                          shr
     897/     FEE : BB                          phi     R11
     897/     FEF : 8B                          glo     R11
     897/     FF0 : 76                          shrc
     897/     FF1 : AB                          plo     R11
     897/     FF2 :  (MACRO-2)                  shrU2   R11
     897/     FF2 : 9B                          ghi     R11
     897/     FF3 : F6                          shr
     897/     FF4 : BB                          phi     R11
     897/     FF5 : 8B                          glo     R11
     897/     FF6 : 76                          shrc
     897/     FF7 : AB                          plo     R11
     897/     FF8 :  (MACRO-2)                  shrU2   R11
     897/     FF8 : 9B                          ghi     R11
     897/     FF9 : F6                          shr
     897/     FFA : BB                          phi     R11
     897/     FFB : 8B                          glo     R11
     897/     FFC : 76                          shrc
     897/     FFD : AB                          plo     R11
     897/     FFE :  (MACRO-2)                  shrU2   R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 87 - 2/13/2013 16:29:36


     897/     FFE : 9B                          ghi     R11
     897/     FFF : F6                          shr
     897/    1000 : BB                          phi     R11
     897/    1001 : 8B                          glo     R11
     897/    1002 : 76                          shrc
     897/    1003 : AB                          plo     R11
     897/    1004 :  (MACRO-2)                  shrU2   R11
     897/    1004 : 9B                          ghi     R11
     897/    1005 : F6                          shr
     897/    1006 : BB                          phi     R11
     897/    1007 : 8B                          glo     R11
     897/    1008 : 76                          shrc
     897/    1009 : AB                          plo     R11
     898/    100A : (MACRO)             	cpy1 R12,R11
     898/    100A : 8B                          glo     R11
     898/    100B : AC                          plo     R12
     899/    100C : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     899/    100C : F8 00                       ldi     0
     899/    100E : BC                          phi     12
     900/    100F : (MACRO)             	Ccall _putx
     900/    100F : D4                          sep     RCALL
     900/    1010 : 0B 62                       dw      _PUTX
     901/    1012 :                     ;							putx(((unsigned int) *this++)&255);
     902/    1012 : (MACRO)             	cpy2 R11,R1
     902/    1012 : 81                          glo     R1
     902/    1013 : AB                          plo     R11
     902/    1014 : 91                          ghi     R1
     902/    1015 : BB                          phi     R11
     903/    1016 : (MACRO)             	ldA2 R1,'O',R11,(2); reg:addr
     903/    1016 : =>TRUE                      if      ('O'='O')
     903/    1016 :  (MACRO-2)                          ldAX    R1,R11,(2)
     903/    1016 : 8B                          glo     R11
     903/    1017 : FC 02                       adi     ((2))#256
     903/    1019 : A1                          plo     R1
     903/    101A : 9B                          ghi     R11
     903/    101B : 7C 00                       adci    ((2))>>8; was/256
     903/    101D : B1                          phi     R1
     903/    101E : =>FALSE                     else
     903/    101E :                                     ldAD    R1,R11
     903/    101E : [903]                       endif
     904/    101E : (MACRO)             	ld2 R11,'O',R11,0
     904/    101E : =>TRUE                      if      ('O'='O')
     904/    101E :  (MACRO-2)                          ldAX    memAddr,R11,0
     904/    101E : 8B                          glo     R11
     904/    101F : FC 00                       adi     (0)#256
     904/    1021 : AE                          plo     MEMADDR
     904/    1022 : 9B                          ghi     R11
     904/    1023 : 7C 00                       adci    (0)>>8; was/256
     904/    1025 : BE                          phi     MEMADDR
     904/    1026 : =>FALSE                     else
     904/    1026 :                                     ldAD    memAddr,R11
     904/    1026 : [904]                       endif
     904/    1026 : 4E                          lda     memAddr
     904/    1027 : BB                          phi     R11
     904/    1028 : 0E                          ldn     memAddr
     904/    1029 : AB                          plo     R11
     905/    102A : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     905/    102A : 8B                          glo     R11
     905/    102B : FA FF                       ANI     (255)#256
     905/    102D : AB                          plo     R11
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 88 - 2/13/2013 16:29:36


     905/    102E : 9B                          ghi     R11
     905/    102F : FA 00                       ANI     (255)>>8; was/256
     905/    1031 : BB                          phi     R11
     906/    1032 : (MACRO)             	cpy1 R12,R11
     906/    1032 : 8B                          glo     R11
     906/    1033 : AC                          plo     R12
     907/    1034 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     907/    1034 : F8 00                       ldi     0
     907/    1036 : BC                          phi     12
     908/    1037 : (MACRO)             	Ccall _putx
     908/    1037 : D4                          sep     RCALL
     908/    1038 : 0B 62                       dw      _PUTX
     909/    103A :                     ;						}
     910/    103A :                     L86:
     911/    103A :                     ;						argslot+=2;
     912/    103A : (MACRO)             	ldA2 R0,'O',R0,(2); reg:addr
     912/    103A : =>TRUE                      if      ('O'='O')
     912/    103A :  (MACRO-2)                          ldAX    R0,R0,(2)
     912/    103A : 80                          glo     R0
     912/    103B : FC 02                       adi     ((2))#256
     912/    103D : A0                          plo     R0
     912/    103E : 90                          ghi     R0
     912/    103F : 7C 00                       adci    ((2))>>8; was/256
     912/    1041 : B0                          phi     R0
     912/    1042 : =>FALSE                     else
     912/    1042 :                                     ldAD    R0,R0
     912/    1042 : [912]                       endif
     913/    1042 :                     ;						break;
     914/    1042 : C0 10 56            	lbr L74
     915/    1045 :                     L81:
     916/    1045 :                     L73:
     917/    1045 :                     ;					putc('%');putc(c);
     918/    1045 : (MACRO)             	ldA2 R12,'D',(37),0; reg:addr
     918/    1045 : =>FALSE                     if      ('D'='O')
     918/    1045 :                                     ldAX    R12,(37),0
     918/    1045 : =>TRUE                      else
     918/    1045 :  (MACRO-2)                          ldAD    R12,(37)
     918/    1045 : F8 25                       ldi     ((37))&255
     918/    1047 : AC                          plo     R12
     918/    1048 : F8 00                       ldi     ((37))>>8; was/256
     918/    104A : BC                          phi     R12
     918/    104B : [918]                       endif
     919/    104B : (MACRO)             	Ccall _putc
     919/    104B : D4                          sep     RCALL
     919/    104C : 15 13                       dw      _PUTC
     920/    104E : (MACRO)             	cpy1 R12,R7
     920/    104E : 87                          glo     R7
     920/    104F : AC                          plo     R12
     921/    1050 : (MACRO)             	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
     921/    1050 : F8 00                       ldi     0
     921/    1052 : BC                          phi     12
     922/    1053 : (MACRO)             	Ccall _putc
     922/    1053 : D4                          sep     RCALL
     922/    1054 : 15 13                       dw      _PUTC
     923/    1056 :                     ;			} //switch
     924/    1056 :                     L74:
     925/    1056 :                     ;		} //%
     926/    1056 :                     L72:
     927/    1056 :                     ;	} //while
     928/    1056 :                     L69:
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 89 - 2/13/2013 16:29:36


     929/    1056 :                     ;    while(*ptr) {
     930/    1056 : (MACRO)             	ld2 R11,'O',sp,(0+16)
     930/    1056 : =>TRUE                      if      ('O'='O')
     930/    1056 :  (MACRO-2)                          ldAX    memAddr,SP,(0+16)
     930/    1056 : 82                          glo     SP
     930/    1057 : FC 10                       adi     ((0+16))#256
     930/    1059 : AE                          plo     MEMADDR
     930/    105A : 92                          ghi     SP
     930/    105B : 7C 00                       adci    ((0+16))>>8; was/256
     930/    105D : BE                          phi     MEMADDR
     930/    105E : =>FALSE                     else
     930/    105E :                                     ldAD    memAddr,SP
     930/    105E : [930]                       endif
     930/    105E : 4E                          lda     memAddr
     930/    105F : BB                          phi     R11
     930/    1060 : 0E                          ldn     memAddr
     930/    1061 : AB                          plo     R11
     931/    1062 : (MACRO)             	ld1 R11,'O',R11,0
     931/    1062 : =>TRUE                      if      ('O'='O')
     931/    1062 :  (MACRO-2)                          ldAX    memAddr,R11,0
     931/    1062 : 8B                          glo     R11
     931/    1063 : FC 00                       adi     (0)#256
     931/    1065 : AE                          plo     MEMADDR
     931/    1066 : 9B                          ghi     R11
     931/    1067 : 7C 00                       adci    (0)>>8; was/256
     931/    1069 : BE                          phi     MEMADDR
     931/    106A : =>FALSE                     else
     931/    106A :                                     ldAD    memAddr,R11
     931/    106A : [931]                       endif
     931/    106A : 0E                          ldn     memAddr
     931/    106B : AB                          plo     R11
     932/    106C : (MACRO)             	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
     932/    106C : F8 00                       ldi     0
     932/    106E : BB                          phi     11
     933/    106F : (MACRO)             	jneU2I r11,0,L68; NE
     933/    106F : 8B                          glo     R11
     933/    1070 : FF 00                       smi     (0)#256
     933/    1072 : CA 0C 41                    lbnz    L68
     933/    1075 : 9B                          ghi     R11
     933/    1076 : 7F 00                       smbi    (0)>>8; was/256
     933/    1078 : CA 0C 41                    lbnz    L68
     934/    107B :                     ;} //prtf
     935/    107B :                     L67:
     936/    107B : (MACRO)             	alu2I memaddr,sp,(4),adi,adci
     936/    107B : 82                          glo     SP
     936/    107C : FC 04                       ADI     ((4))#256
     936/    107E : AE                          plo     MEMADDR
     936/    107F : 92                          ghi     SP
     936/    1080 : 7C 00                       ADCI     ((4))>>8; was/256
     936/    1082 : BE                          phi     MEMADDR
     937/    1083 : (MACRO)             	rldmi r7,memaddr
     937/    1083 : 4E                          lda     MEMADDR     ;R7 MEMADDR is primed to the spot to start the reloads
     937/    1084 : B7                          phi     R7
     937/    1085 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     937/    1086 : A7                          plo     R7
     938/    1087 : (MACRO)             	rldmi r1,memaddr
     938/    1087 : 4E                          lda     MEMADDR     ;R1 MEMADDR is primed to the spot to start the reloads
     938/    1088 : B1                          phi     R1
     938/    1089 : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     938/    108A : A1                          plo     R1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 90 - 2/13/2013 16:29:36


     939/    108B : (MACRO)             	rldmi r0,memaddr
     939/    108B : 4E                          lda     MEMADDR     ;R0 MEMADDR is primed to the spot to start the reloads
     939/    108C : B0                          phi     R0
     939/    108D : 4E                          lda     MEMADDR     ;and it end up where needed to do the next one
     939/    108E : A0                          plo     R0
     940/    108F : (MACRO)             	alu2I sp,sp,14,adi,adci; virtual frame release
     940/    108F : 82                          glo     SP
     940/    1090 : FC 0E                       ADI     (14)#256
     940/    1092 : A2                          plo     SP
     940/    1093 : 92                          ghi     SP
     940/    1094 : 7C 00                       ADCI     (14)>>8; was/256
     940/    1096 : B2                          phi     SP
     941/    1097 : (MACRO)             	Cretn
     941/    1097 : D5                          sep     RRET
     942/    1098 :                     
     943/    1098 :                     _exit:
     944/    1098 : (MACRO)             	alu2I sp,sp,4,smi,smbi
     944/    1098 : 82                          glo     SP
     944/    1099 : FF 04                       SMI     (4)#256
     944/    109B : A2                          plo     SP
     944/    109C : 92                          ghi     SP
     944/    109D : 7F 00                       SMBI     (4)>>8; was/256
     944/    109F : B2                          phi     SP
     945/    10A0 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     945/    10A0 : =>TRUE                      if      ('O'='O')
     945/    10A0 :  (MACRO-2)                          ldAX    memAddr,SP,(6)
     945/    10A0 : 82                          glo     SP
     945/    10A1 : FC 06                       adi     ((6))#256
     945/    10A3 : AE                          plo     MEMADDR
     945/    10A4 : 92                          ghi     SP
     945/    10A5 : 7C 00                       adci    ((6))>>8; was/256
     945/    10A7 : BE                          phi     MEMADDR
     945/    10A8 : =>FALSE                     else
     945/    10A8 :                                     ldAD    memAddr,SP
     945/    10A8 : [945]                       endif
     945/    10A8 : 9C                          ghi     R12
     945/    10A9 : 5E                          str     memAddr
     945/    10AA : 1E                          inc     memAddr
     945/    10AB : 8C                          glo     R12
     945/    10AC : 5E                          str     memAddr
     946/    10AD :                     ;void exit(int code){
     947/    10AD :                     ;	printf("exit %d\n",code);
     948/    10AD : (MACRO)             	ldA2 R12,'D',(L92),0; reg:addr
     948/    10AD : =>FALSE                     if      ('D'='O')
     948/    10AD :                                     ldAX    R12,(L92),0
     948/    10AD : =>TRUE                      else
     948/    10AD :  (MACRO-2)                          ldAD    R12,(L92)
     948/    10AD : F8 CE                       ldi     ((L92))&255
     948/    10AF : AC                          plo     R12
     948/    10B0 : F8 10                       ldi     ((L92))>>8; was/256
     948/    10B2 : BC                          phi     R12
     948/    10B3 : [948]                       endif
     949/    10B3 : (MACRO)             	ld2 R13,'O',sp,(0+6)
     949/    10B3 : =>TRUE                      if      ('O'='O')
     949/    10B3 :  (MACRO-2)                          ldAX    memAddr,SP,(0+6)
     949/    10B3 : 82                          glo     SP
     949/    10B4 : FC 06                       adi     ((0+6))#256
     949/    10B6 : AE                          plo     MEMADDR
     949/    10B7 : 92                          ghi     SP
     949/    10B8 : 7C 00                       adci    ((0+6))>>8; was/256
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 91 - 2/13/2013 16:29:36


     949/    10BA : BE                          phi     MEMADDR
     949/    10BB : =>FALSE                     else
     949/    10BB :                                     ldAD    memAddr,SP
     949/    10BB : [949]                       endif
     949/    10BB : 4E                          lda     memAddr
     949/    10BC : BD                          phi     R13
     949/    10BD : 0E                          ldn     memAddr
     949/    10BE : AD                          plo     R13
     950/    10BF : (MACRO)             	Ccall _printf
     950/    10BF : D4                          sep     RCALL
     950/    10C0 : 0B E8                       dw      _PRINTF
     951/    10C2 :                     L93:
     952/    10C2 :                     ;	while(1);
     953/    10C2 :                     L94:
     954/    10C2 : C0 10 C2            	lbr L93
     955/    10C5 :                     ;}
     956/    10C5 :                     L91:
     957/    10C5 : (MACRO)             	alu2I sp,sp,4,adi,adci; virtual frame release
     957/    10C5 : 82                          glo     SP
     957/    10C6 : FC 04                       ADI     (4)#256
     957/    10C8 : A2                          plo     SP
     957/    10C9 : 92                          ghi     SP
     957/    10CA : 7C 00                       ADCI     (4)>>8; was/256
     957/    10CC : B2                          phi     SP
     958/    10CD : (MACRO)             	Cretn
     958/    10CD : D5                          sep     RRET
     959/    10CE :                     
     960/    10CE :                     L92:
     961/    10CE : 65                  	db 101
     962/    10CF : 78                  	db 120
     963/    10D0 : 69                  	db 105
     964/    10D1 : 74                  	db 116
     965/    10D2 : 20                  	db 32
     966/    10D3 : 25                  	db 37
     967/    10D4 : 64                  	db 100
     968/    10D5 : 0A                  	db 10
     969/    10D6 : 00                  	db 0
     970/    10D7 :                     	include lcc1802EpiloNG.inc
(1)    1/    10D7 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    10D7 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    10D7 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    10D7 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    10D7 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    10D7 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    10D7 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    10D7 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    10D7 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    10D7 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    10D7 : =EH                 rwork	equ	memAddr	;work register
(1)   12/    10D7 :                     lcc1802init:	
(1)   13/    10D7 : (MACRO)             	ldiReg	RCALL,_call
(1)   13/    10D7 : F8 01                       ldi     (_CALL)&255
(1)   13/    10D9 : A4                          plo     RCALL
(1)   13/    10DA : F8 12                       ldi     (_CALL)>>8; was/256
(1)   13/    10DC : B4                          phi     RCALL
(1)   14/    10DD : (MACRO)             	ldiReg	RRET,_return
(1)   14/    10DD : F8 12                       ldi     (_RETURN)&255
(1)   14/    10DF : A5                          plo     RRET
(1)   14/    10E0 : F8 12                       ldi     (_RETURN)>>8; was/256
(1)   14/    10E2 : B5                          phi     RRET
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 92 - 2/13/2013 16:29:36


(1)   15/    10E3 : (MACRO)             	ldiReg	SP,0x3fff	;wjr jan 1 start stack at 16K-1
(1)   15/    10E3 : F8 FF                       ldi     (0X3FFF)&255
(1)   15/    10E5 : A2                          plo     SP
(1)   15/    10E6 : F8 3F                       ldi     (0X3FFF)>>8; was/256
(1)   15/    10E8 : B2                          phi     SP
(1)   16/    10E9 : E2                  	sex	SP
(1)   17/    10EA : (MACRO)             	ldiReg	RPC,$$_00000
(1)   17/    10EA : F8 F1                       ldi     ($$_00000)&255
(1)   17/    10EC : A3                          plo     RPC
(1)   17/    10ED : F8 10                       ldi     ($$_00000)>>8; was/256
(1)   17/    10EF : B3                          phi     RPC
(1)   18/    10F0 : D3                  	sep	RPC
(1)   19/    10F1 :                     $$_00000:
(1)   20/    10F1 : (MACRO)             	Ccall _main	;call the main routine
(1)   20/    10F1 : D4                          sep     RCALL
(1)   20/    10F2 : 04 7C                       dw      _MAIN
(1)   21/    10F4 : C0 10 F4            $$_die:	lbr	$$_die		;loop here when main returns
(1)   22/    10F7 : DE AD               	db	0xde,0xad
(1)   23/    10F9 :                     
(1)   24/    10F9 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   25/    10F9 :                     _setqOn:
(1)   26/    10F9 : 7B                  	seq
(1)   27/    10FA : (MACRO)             	Cretn
(1)   27/    10FA : D5                          sep     RRET
(1)   28/    10FB :                     _setqOff:
(1)   29/    10FB : 7A                  	req
(1)   30/    10FC : (MACRO)             	Cretn
(1)   30/    10FC : D5                          sep     RRET
(1)   31/    10FD :                     
(1)   32/    10FD :                     _modU2:	;16 bit unsigned remainder
(1)   33/    10FD :                     	; just calls the 16 bit division then puts remainder into return value
(1)   34/    10FD : (MACRO)                 Ccall _divU2
(1)   34/    10FD : D4                          sep     RCALL
(1)   34/    10FE : 12 49                       dw      _DIVU2
(1)   35/    1100 : 8D                      glo regArg2
(1)   36/    1101 : AF                      plo retVal
(1)   37/    1102 : 9D                      ghi regArg2
(1)   38/    1103 : BF                      phi retVal
(1)   39/    1104 : (MACRO)                 Cretn
(1)   39/    1104 : D5                          sep     RRET
(1)   40/    1105 :                         
(1)   41/    1105 :                     _modI2:	;16 bit signed remainder
(1)   42/    1105 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   43/    1105 : (MACRO)                 Ccall _divI2
(1)   43/    1105 : D4                          sep     RCALL
(1)   43/    1106 : 12 A4                       dw      _DIVI2
(1)   44/    1108 : 8D                      glo regArg2
(1)   45/    1109 : AF                      plo retVal
(1)   46/    110A : 9D                      ghi regArg2
(1)   47/    110B : BF                      phi retVal
(1)   48/    110C : (MACRO)                 Cretn
(1)   48/    110C : D5                          sep     RRET
(1)   49/    110D :                     
(1)   50/    110D :                     _out4:	
(1)   51/    110D : 8C                  	glo	regArg1
(1)   52/    110E : 22                  	dec	sp
(1)   53/    110F : 52                  	str	sp
(1)   54/    1110 : 64                  	out	4
(1)   55/    1111 : (MACRO)             	Cretn
(1)   55/    1111 : D5                          sep     RRET
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 93 - 2/13/2013 16:29:36


(1)   56/    1112 :                     
(1)   57/    1112 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   58/    1112 :                     	align 256
(1)   59/    1200 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   60/    1200 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   61/    1200 : D3                  	sep     R3 ;go to subroutine
(1)   62/    1201 : E2                  _call	sex	SP ;make sure X=SP
(1)   63/    1202 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   64/    1203 : 22                  	dec	sp
(1)   65/    1204 : 73                  	stxd
(1)   66/    1205 : 86                  	glo	retAddr
(1)   67/    1206 : 52                  	str	sp	
(1)   68/    1207 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   69/    1208 : A6                  	plo	retAddr
(1)   70/    1209 : 93                  	ghi	RPC
(1)   71/    120A : B6                  	phi	retAddr
(1)   72/    120B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   73/    120C : B3                  	phi	RPC
(1)   74/    120D : 46                  	lda	retAddr
(1)   75/    120E : A3                  	plo	RPC
(1)   76/    120F : 30 00               	br	_call-1
(1)   77/    1211 :                     
(1)   78/    1211 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   79/    1211 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   80/    1211 : D3                  	sep	RPC	;return to the original program
(1)   81/    1212 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   82/    1213 : A3                  	plo	RPC
(1)   83/    1214 : 96                  	ghi	retAddr
(1)   84/    1215 : B3                  	phi	RPC
(1)   85/    1216 : 42                  	lda	SP	;pick up old return address
(1)   86/    1217 : A6                  	plo	retAddr
(1)   87/    1218 : 42                  	lda	SP
(1)   88/    1219 : B6                  	phi	retAddr
(1)   89/    121A : 30 11               	br	_return-1
(1)   90/    121C :                     
(1)   91/    121C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   92/    121C : F8 24               	ldi	(100-15-10-2)/2
(1)   93/    121E : FF 01               $$mslp:	smi	1
(1)   94/    1220 : 3A 1E               	bnz	$$mslp
(1)   95/    1222 : (MACRO)             	Cretn
(1)   95/    1222 : D5                          sep     RRET
(1)   96/    1223 :                     
(1)   97/    1223 :                     
(1)   98/    1223 :                     	
(1)   99/    1223 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  100/    1223 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  101/    1223 :                     _mulu2:		
(1)  102/    1223 : 22                      dec sp
(1)  103/    1224 : F8 10                   ldi 16
(1)  104/    1226 : AE                      plo	rwork	;bit count
(1)  105/    1227 : F8 00                   ldi 0
(1)  106/    1229 : BF                      phi	retVal	;quotient
(1)  107/    122A : AF                      plo retVal
(1)  108/    122B :                     $$MultLoop16_16:
(1)  109/    122B : 9C                      ghi regArg1
(1)  110/    122C : F6                      shr
(1)  111/    122D : BC                      phi regArg1
(1)  112/    122E : 8C                      glo regArg1
(1)  113/    122F : 76                      shrc
(1)  114/    1230 : AC                      plo regArg1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 94 - 2/13/2013 16:29:36


(1)  115/    1231 : 3B 3D                   bnf $$MultSkip16_16
(1)  116/    1233 : 8D                      glo regArg2
(1)  117/    1234 : 52                      str sp
(1)  118/    1235 : 8F                      glo retVal
(1)  119/    1236 : F4                      add 
(1)  120/    1237 : AF                      plo retVal
(1)  121/    1238 : 9D                      ghi regArg2
(1)  122/    1239 : 52                      str sp
(1)  123/    123A : 9F                      ghi retVal
(1)  124/    123B : 74                      adc
(1)  125/    123C : BF                      phi retVal
(1)  126/    123D :                     $$MultSkip16_16:
(1)  127/    123D : 8D                      glo regArg2
(1)  128/    123E : FE                      shl
(1)  129/    123F : AD                      plo regArg2
(1)  130/    1240 : 9D                      ghi regArg2
(1)  131/    1241 : 7E                      shlc
(1)  132/    1242 : BD                      phi regArg2
(1)  133/    1243 : 2E                      dec rwork
(1)  134/    1244 : 8E                      glo rwork
(1)  135/    1245 : 3A 2B                   bnz $$MultLoop16_16
(1)  136/    1247 : 12                      inc sp
(1)  137/    1248 : D5                      sep 5
(1)  138/    1249 :                     
(1)  139/    1249 :                     
(1)  140/    1249 :                     _divU2:
(1)  141/    1249 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  142/    1249 :                     	; This is really an unsigned 23 bit divide
(1)  143/    1249 :                     	;thanks to Ted Rossin
(1)  144/    1249 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  145/    1249 : 22                      dec sp
(1)  146/    124A : F8 10                   ldi 16
(1)  147/    124C : AE                      plo rwork
(1)  148/    124D : F8 00                   ldi 0
(1)  149/    124F : BF                      phi retVal
(1)  150/    1250 : AF                      plo retVal
(1)  151/    1251 : BE                      phi rwork
(1)  152/    1252 :                     $$DivLoop16_16:
(1)  153/    1252 : 8C                      glo regArg1
(1)  154/    1253 : FE                      shl
(1)  155/    1254 : AC                      plo regArg1
(1)  156/    1255 : 9C                      ghi regArg1
(1)  157/    1256 : 7E                      shlc
(1)  158/    1257 : BC                      phi regArg1
(1)  159/    1258 : 8F                      glo retVal
(1)  160/    1259 : 7E                      shlc
(1)  161/    125A : AF                      plo retVal
(1)  162/    125B : 9F                      ghi retVal
(1)  163/    125C : 7E                      shlc
(1)  164/    125D : BF                      phi retVal
(1)  165/    125E : 9E                      ghi rwork
(1)  166/    125F : 7E                      shlc
(1)  167/    1260 : BE                      phi rwork
(1)  168/    1261 : 3B 73                   bnf $$DivSub16_16
(1)  169/    1263 : 8D                      glo regArg2
(1)  170/    1264 : 52                      str sp
(1)  171/    1265 : 8F                      glo retVal
(1)  172/    1266 : F4                      add 
(1)  173/    1267 : AF                      plo retVal
(1)  174/    1268 : 9D                      ghi regArg2
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 95 - 2/13/2013 16:29:36


(1)  175/    1269 : 52                      str sp
(1)  176/    126A : 9F                      ghi retVal
(1)  177/    126B : 74                      adc 
(1)  178/    126C : BF                      phi retVal
(1)  179/    126D : 9E                      ghi rwork
(1)  180/    126E : 7C 00                   adci 0
(1)  181/    1270 : BE                      phi rwork
(1)  182/    1271 : 30 81                   br $$DivSkip16_16
(1)  183/    1273 :                     $$DivSub16_16:
(1)  184/    1273 : 8D                      glo regArg2
(1)  185/    1274 : 52                      str sp
(1)  186/    1275 : 8F                      glo retVal
(1)  187/    1276 : F7                      sm
(1)  188/    1277 : AF                      plo retVal
(1)  189/    1278 : 9D                      ghi regArg2
(1)  190/    1279 : 52                      str sp
(1)  191/    127A : 9F                      ghi retVal
(1)  192/    127B : 77                      smb 
(1)  193/    127C : BF                      phi retVal
(1)  194/    127D : 9E                      ghi rwork
(1)  195/    127E : 7F 00                   smbi 0
(1)  196/    1280 : BE                      phi rwork 
(1)  197/    1281 :                     $$DivSkip16_16:
(1)  198/    1281 : FE                      shl
(1)  199/    1282 : 33 88                   bdf $$DivSkipClear16_16
(1)  200/    1284 :                     $$DivSetBit16_16:
(1)  201/    1284 : 8C                      glo regArg1
(1)  202/    1285 : F9 01                   ori  0x01
(1)  203/    1287 : AC                      plo regArg1
(1)  204/    1288 :                     $$DivSkipClear16_16:
(1)  205/    1288 : 2E                      dec rwork
(1)  206/    1289 : 8E                      glo rwork
(1)  207/    128A : 3A 52                   bnz $$DivLoop16_16
(1)  208/    128C : 9E                      ghi rwork
(1)  209/    128D : FE                      shl
(1)  210/    128E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  211/    1290 : 8D                      glo regArg2
(1)  212/    1291 : 52                      str sp
(1)  213/    1292 : 8F                      glo retVal
(1)  214/    1293 : F4                      add
(1)  215/    1294 : AF                      plo retVal
(1)  216/    1295 : 9D                      ghi regArg2
(1)  217/    1296 : 52                      str sp
(1)  218/    1297 : 9F                      ghi retVal
(1)  219/    1298 : 74                      adc
(1)  220/    1299 : BF                      phi retVal
(1)  221/    129A :                     $$DivSkipFinalAdd16_16:
(1)  222/    129A : 12                      inc sp
(1)  223/    129B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  224/    129B : 8F                      glo retVal
(1)  225/    129C : AD                      plo regArg2
(1)  226/    129D : 9F                      ghi retVal
(1)  227/    129E : BD                      phi regArg2
(1)  228/    129F : 8C                      glo regArg1
(1)  229/    12A0 : AF                      plo retVal
(1)  230/    12A1 : 9C                      ghi regArg1
(1)  231/    12A2 : BF                      phi retVal
(1)  232/    12A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  233/    12A3 : D5                      sep 5
(1)  234/    12A4 :                     
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 96 - 2/13/2013 16:29:36


(1)  235/    12A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  236/    12A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  237/    12A4 :                     _divI2:
(1)  238/    12A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  239/    12A4 : 22                      dec	sp	;leave a work area available
(1)  240/    12A5 : 9C                      ghi regArg1
(1)  241/    12A6 : 52                      str sp	;save the sign of the 1st arg
(1)  242/    12A7 : FE                      shl
(1)  243/    12A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  244/    12AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  244/    12AA : 8C                          glo     REGARG1                     ;(flip all the bits and add 1)
(1)  244/    12AB : FB FF                       xri     0xff
(1)  244/    12AD : AC                          plo     REGARG1
(1)  244/    12AE : 9C                          ghi     REGARG1
(1)  244/    12AF : FB FF                       xri     0xff
(1)  244/    12B1 : BC                          phi     REGARG1
(1)  244/    12B2 : 1C                          inc     REGARG1
(1)  245/    12B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  246/    12B3 : 9D                      ghi regArg2
(1)  247/    12B4 : F3                      xor	
(1)  248/    12B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  249/    12B6 : 9D                      ghi regArg2
(1)  250/    12B7 : FE                      shl
(1)  251/    12B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  252/    12BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  252/    12BA : 8D                          glo     REGARG2                     ;(flip all the bits and add 1)
(1)  252/    12BB : FB FF                       xri     0xff
(1)  252/    12BD : AD                          plo     REGARG2
(1)  252/    12BE : 9D                          ghi     REGARG2
(1)  252/    12BF : FB FF                       xri     0xff
(1)  252/    12C1 : BD                          phi     REGARG2
(1)  252/    12C2 : 1D                          inc     REGARG2
(1)  253/    12C3 :                     $$pos2: ; both args now +v
(1)  254/    12C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  254/    12C3 : D4                          sep     RCALL
(1)  254/    12C4 : 12 49                       dw      _DIVU2
(1)  255/    12C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  256/    12C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  257/    12C7 : FE                      shl
(1)  258/    12C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  259/    12CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  259/    12CA : 8F                          glo     RETVAL                     ;(flip all the bits and add 1)
(1)  259/    12CB : FB FF                       xri     0xff
(1)  259/    12CD : AF                          plo     RETVAL
(1)  259/    12CE : 9F                          ghi     RETVAL
(1)  259/    12CF : FB FF                       xri     0xff
(1)  259/    12D1 : BF                          phi     RETVAL
(1)  259/    12D2 : 1F                          inc     RETVAL
(1)  260/    12D3 :                     $$done:
(1)  261/    12D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  262/    12D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  262/    12D3 : D5                          sep     RRET
(1)  263/    12D4 :                     
(1)  264/    12D4 :                     
(1)  265/    12D4 :                     	align 256    ;32 bit operations follow
(1)  266/    1300 :                     _divu4:
(1)  267/    1300 :                     ;This is an unsigned 32 bit restoring division
(1)  268/    1300 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  269/    1300 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  270/    1300 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 97 - 2/13/2013 16:29:36


(1)  271/    1300 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  272/    1300 :                     
(1)  273/    1300 : F8 20               	ldi 32		;set loop count
(1)  274/    1302 : AE                  	plo memaddr	;in temp register
(1)  275/    1303 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  275/    1303 : F8 00                       ldi     (0)&255
(1)  275/    1305 : AD                          plo     RP1P2
(1)  275/    1306 : F8 00                       ldi     ((0)>>8)&255; 
(1)  275/    1308 : BD                          phi     RP1P2
(1)  275/    1309 : F8 00                       ldi     ((0)>>16)&255; 
(1)  275/    130B : AC                          plo     RP1P2-1
(1)  275/    130C : F8 00                       ldi     ((0)>>24)&255; 
(1)  275/    130E : BC                          phi     RP1P2-1
(1)  276/    130F :                     $$loop:
(1)  277/    130F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  277/    130F : 89                          glo     RL8     ;start with low byte of second register
(1)  277/    1310 : FE                          shl             ;shift left once
(1)  277/    1311 : A9                          plo     RL8     ; save it
(1)  277/    1312 : 99                          ghi     RL8     ;high byte of second RL8
(1)  277/    1313 : 7E                          shlc            ;shift one bit carrying
(1)  277/    1314 : B9                          phi     RL8     ;save it
(1)  277/    1315 : 88                          glo     RL8-1   ;now the bottom byte of top RL8
(1)  277/    1316 : 7E                          shlc
(1)  277/    1317 : A8                          plo     RL8-1
(1)  277/    1318 : 98                          ghi     RL8-1   ;finally the top byte of the high order RL8
(1)  277/    1319 : 7E                          shlc            ;gets the last shift
(1)  277/    131A : B8                          phi     RL8-1   ;and we're done
(1)  278/    131B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  278/    131B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  278/    131C : 7E                          shlc            ;shift left once continuing carry
(1)  278/    131D : AD                          plo     RP1P2     ; save it
(1)  278/    131E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  278/    131F : 7E                          shlc            ;shift one bit carrying
(1)  278/    1320 : BD                          phi     RP1P2     ;save it
(1)  278/    1321 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  278/    1322 : 7E                          shlc
(1)  278/    1323 : AC                          plo     RP1P2-1
(1)  278/    1324 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  278/    1325 : 7E                          shlc            ;gets the last shift
(1)  278/    1326 : BC                          phi     RP1P2-1   ;and we're done
(1)  279/    1327 :                     
(1)  280/    1327 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  280/    1327 : 22                          dec     sp ;make a work ares
(1)  280/    1328 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  280/    1329 : 52                          str     sp      ;so arithmetic operations start there
(1)  280/    132A : 8D                          glo     RP1P2
(1)  280/    132B : F7                          SM             ;calculate the low order byte
(1)  280/    132C : AD                          plo     RP1P2
(1)  280/    132D : 9B                          ghi     RL10
(1)  280/    132E : 52                          str     sp
(1)  280/    132F : 9D                          ghi     RP1P2
(1)  280/    1330 : 77                          SMB             ;calculate the second byte
(1)  280/    1331 : BD                          phi     RP1P2
(1)  280/    1332 : 8A                          glo     RL10-1
(1)  280/    1333 : 52                          str     sp
(1)  280/    1334 : 8C                          glo     RP1P2-1
(1)  280/    1335 : 77                          SMB             ;calculate the third byte
(1)  280/    1336 : AC                          plo     RP1P2-1
(1)  280/    1337 : 9A                          ghi     RL10-1
(1)  280/    1338 : 52                          str     sp
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 98 - 2/13/2013 16:29:36


(1)  280/    1339 : 9C                          ghi     RP1P2-1
(1)  280/    133A : 77                          SMB             ;calculate the high byte
(1)  280/    133B : BC                          phi     RP1P2-1
(1)  280/    133C : 12                          inc     sp      ;release the work area
(1)  281/    133D :                     
(1)  282/    133D : FA 80               	ani 0x80	;check the top bit
(1)  283/    133F : 32 5D               	bz $$norestore	;if it's 0
(1)  284/    1341 : 89                  		glo RL8
(1)  285/    1342 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  286/    1344 : A9                  		plo RL8
(1)  287/    1345 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  287/    1345 : 22                          dec     sp ;make a work ares
(1)  287/    1346 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  287/    1347 : 52                          str     sp      ;so arithmetic operations start there
(1)  287/    1348 : 8D                          glo     RP1P2
(1)  287/    1349 : F4                          ADD             ;calculate the low order byte
(1)  287/    134A : AD                          plo     RP1P2
(1)  287/    134B : 9B                          ghi     RL10
(1)  287/    134C : 52                          str     sp
(1)  287/    134D : 9D                          ghi     RP1P2
(1)  287/    134E : 74                          ADC             ;calculate the second byte
(1)  287/    134F : BD                          phi     RP1P2
(1)  287/    1350 : 8A                          glo     RL10-1
(1)  287/    1351 : 52                          str     sp
(1)  287/    1352 : 8C                          glo     RP1P2-1
(1)  287/    1353 : 74                          ADC             ;calculate the third byte
(1)  287/    1354 : AC                          plo     RP1P2-1
(1)  287/    1355 : 9A                          ghi     RL10-1
(1)  287/    1356 : 52                          str     sp
(1)  287/    1357 : 9C                          ghi     RP1P2-1
(1)  287/    1358 : 74                          ADC             ;calculate the high byte
(1)  287/    1359 : BC                          phi     RP1P2-1
(1)  287/    135A : 12                          inc     sp      ;release the work area
(1)  288/    135B : 30 61               	br $$endlp 	;else
(1)  289/    135D :                     $$norestore:
(1)  290/    135D : 89                  		glo RL8
(1)  291/    135E : F9 01               		ori 1	;turn on the bottom bit
(1)  292/    1360 : A9                  		plo RL8
(1)  293/    1361 :                     	;end if
(1)  294/    1361 :                     $$endlp:
(1)  295/    1361 : 2E                  	dec memaddr	;check the cycle count
(1)  296/    1362 : 8E                  	glo memaddr
(1)  297/    1363 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  298/    1365 :                     	
(1)  299/    1365 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  299/    1365 : D5                          sep     RRET
(1)  300/    1366 :                     		
(1)  301/    1366 :                     
(1)  302/    1366 :                     _mulu4:
(1)  303/    1366 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  304/    1366 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  305/    1366 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  306/    1366 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  307/    1366 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  308/    1366 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  309/    1366 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  310/    1366 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  311/    1366 :                     	;for 10 we subtract and shift
(1)  312/    1366 :                     	;for 00 and 11 we just shift
(1)  313/    1366 :                     
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 99 - 2/13/2013 16:29:36


(1)  314/    1366 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  314/    1366 : F8 00                       ldi     (0)&255
(1)  314/    1368 : AD                          plo     RP1P2
(1)  314/    1369 : F8 00                       ldi     ((0)>>8)&255; 
(1)  314/    136B : BD                          phi     RP1P2
(1)  314/    136C : F8 00                       ldi     ((0)>>16)&255; 
(1)  314/    136E : AC                          plo     RP1P2-1
(1)  314/    136F : F8 00                       ldi     ((0)>>24)&255; 
(1)  314/    1371 : BC                          phi     RP1P2-1
(1)  315/    1372 : F8 20                   ldi 32
(1)  316/    1374 : AE                      plo memaddr		;cycle count
(1)  317/    1375 : FC 00                   adi 0		;clear df
(1)  318/    1377 :                     $$mloop:
(1)  319/    1377 : 89                      glo RL8
(1)  320/    1378 : FA 01                   ani 1		;isolate bottom bit of result
(1)  321/    137A : 3B 96                   bnf	$$check_sub	;
(1)  322/    137C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  323/    137E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  324/    137E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  324/    137E : 22                          dec     sp ;make a work ares
(1)  324/    137F : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  324/    1380 : 52                          str     sp      ;so arithmetic operations start there
(1)  324/    1381 : 8D                          glo     RP1P2
(1)  324/    1382 : F4                          ADD             ;calculate the low order byte
(1)  324/    1383 : AD                          plo     RP1P2
(1)  324/    1384 : 9B                          ghi     RL10
(1)  324/    1385 : 52                          str     sp
(1)  324/    1386 : 9D                          ghi     RP1P2
(1)  324/    1387 : 74                          ADC             ;calculate the second byte
(1)  324/    1388 : BD                          phi     RP1P2
(1)  324/    1389 : 8A                          glo     RL10-1
(1)  324/    138A : 52                          str     sp
(1)  324/    138B : 8C                          glo     RP1P2-1
(1)  324/    138C : 74                          ADC             ;calculate the third byte
(1)  324/    138D : AC                          plo     RP1P2-1
(1)  324/    138E : 9A                          ghi     RL10-1
(1)  324/    138F : 52                          str     sp
(1)  324/    1390 : 9C                          ghi     RP1P2-1
(1)  324/    1391 : 74                          ADC             ;calculate the high byte
(1)  324/    1392 : BC                          phi     RP1P2-1
(1)  324/    1393 : 12                          inc     sp      ;release the work area
(1)  325/    1394 : 30 AE                   br $$shift
(1)  326/    1396 :                     $$check_sub:
(1)  327/    1396 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  328/    1398 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  329/    1398 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  329/    1398 : 22                          dec     sp ;make a work ares
(1)  329/    1399 : 8B                          glo     RL10    ;long register pairs are addressed by their second member
(1)  329/    139A : 52                          str     sp      ;so arithmetic operations start there
(1)  329/    139B : 8D                          glo     RP1P2
(1)  329/    139C : F7                          SM             ;calculate the low order byte
(1)  329/    139D : AD                          plo     RP1P2
(1)  329/    139E : 9B                          ghi     RL10
(1)  329/    139F : 52                          str     sp
(1)  329/    13A0 : 9D                          ghi     RP1P2
(1)  329/    13A1 : 77                          SMB             ;calculate the second byte
(1)  329/    13A2 : BD                          phi     RP1P2
(1)  329/    13A3 : 8A                          glo     RL10-1
(1)  329/    13A4 : 52                          str     sp
(1)  329/    13A5 : 8C                          glo     RP1P2-1
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 100 - 2/13/2013 16:29:36


(1)  329/    13A6 : 77                          SMB             ;calculate the third byte
(1)  329/    13A7 : AC                          plo     RP1P2-1
(1)  329/    13A8 : 9A                          ghi     RL10-1
(1)  329/    13A9 : 52                          str     sp
(1)  329/    13AA : 9C                          ghi     RP1P2-1
(1)  329/    13AB : 77                          SMB             ;calculate the high byte
(1)  329/    13AC : BC                          phi     RP1P2-1
(1)  329/    13AD : 12                          inc     sp      ;release the work area
(1)  330/    13AE :                     $$shift:
(1)  331/    13AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  331/    13AE : 9C                          ghi     RP1P2-1   ;long RP1P2 pairs start at RP1P2-1
(1)  331/    13AF : FE                          shl             ;set DF to the sign
(1)  331/    13B0 : 9C                          ghi     RP1P2-1   ;get the top byte back
(1)  331/    13B1 : 76                          shrc            ;shift one bit extending the sign
(1)  331/    13B2 : BC                          phi     RP1P2-1
(1)  331/    13B3 : 8C                          glo     RP1P2-1
(1)  331/    13B4 : 76                          shrc
(1)  331/    13B5 : AC                          plo     RP1P2-1
(1)  331/    13B6 : 9D                          ghi     RP1P2     ;get the top byte of the low order RP1P2
(1)  331/    13B7 : 76                          shrc            ;shift one bit extending the sign
(1)  331/    13B8 : BD                          phi     RP1P2
(1)  331/    13B9 : 8D                          glo     RP1P2     ;finish with the low byte of the 2nd RP1P2 of the pair
(1)  331/    13BA : 76                          shrc
(1)  331/    13BB : AD                          plo     RP1P2
(1)  332/    13BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  332/    13BC : 98                          ghi     RL8-1   ;long RL8 pairs start at RL8-1
(1)  332/    13BD : 76                          shrc            ;shift one bit extending the sign
(1)  332/    13BE : B8                          phi     RL8-1
(1)  332/    13BF : 88                          glo     RL8-1
(1)  332/    13C0 : 76                          shrc
(1)  332/    13C1 : A8                          plo     RL8-1
(1)  332/    13C2 : 99                          ghi     RL8     ;get the top byte of the low order RL8
(1)  332/    13C3 : 76                          shrc            ;shift one bit extending the sign
(1)  332/    13C4 : B9                          phi     RL8
(1)  332/    13C5 : 89                          glo     RL8     ;finish with the low byte of the 2nd RL8 of the pair
(1)  332/    13C6 : 76                          shrc
(1)  332/    13C7 : A9                          plo     RL8
(1)  333/    13C8 :                     
(1)  334/    13C8 : 2E                      dec memaddr		;cycle count
(1)  335/    13C9 : 8E                      glo memaddr
(1)  336/    13CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  337/    13CC :                         
(1)  338/    13CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  338/    13CC : D5                          sep     RRET
(1)  339/    13CD :                     
(1)  340/    13CD :                     	align 256
(1)  341/    1400 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  342/    1400 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  343/    1400 :                     _divI4:
(1)  344/    1400 : 22                      dec	sp	;leave a work area available
(1)  345/    1401 : 98                      ghi RL8-1	;get the top of the dividend
(1)  346/    1402 : 52                      str sp	;save the sign of the 1st arg
(1)  347/    1403 : FE                      shl
(1)  348/    1404 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  349/    1406 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  349/    1406 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  349/    1406 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/    1407 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  349/    1409 : A9                          plo     RL8
(1)  349/    140A : 99                          ghi     RL8
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 101 - 2/13/2013 16:29:36


(1)  349/    140B : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  349/    140D : B9                          phi     RL8
(1)  349/    140E : 88                          glo     RL8-1
(1)  349/    140F : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  349/    1411 : A8                          plo     RL8-1
(1)  349/    1412 : 98                          ghi     RL8-1
(1)  349/    1413 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  349/    1415 : B8                          phi     RL8-1
(1)  349/    1416 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  349/    1416 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  349/    1417 : FC 01                       ADI     (1)&255
(1)  349/    1419 : A9                          plo     RL8
(1)  349/    141A : 99                          ghi     RL8
(1)  349/    141B : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  349/    141D : B9                          phi     RL8
(1)  349/    141E : 88                          glo     RL8-1
(1)  349/    141F : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  349/    1421 : A8                          plo     RL8-1
(1)  349/    1422 : 98                          ghi     RL8-1
(1)  349/    1423 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  349/    1425 : B8                          phi     RL8-1
(1)  350/    1426 :                     $$pos1: ;1st is now +v, check 2nd
(1)  351/    1426 : 9A                      ghi RL10-1
(1)  352/    1427 : F3                      xor	
(1)  353/    1428 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  354/    1429 : 9A                      ghi RL10-1
(1)  355/    142A : FE                      shl
(1)  356/    142B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  357/    142D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  357/    142D :  (MACRO-2)                  alu4I   RL10,RL10,0xffffffff,xri,xri      ;flip all the bits
(1)  357/    142D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/    142E : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  357/    1430 : AB                          plo     RL10
(1)  357/    1431 : 9B                          ghi     RL10
(1)  357/    1432 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  357/    1434 : BB                          phi     RL10
(1)  357/    1435 : 8A                          glo     RL10-1
(1)  357/    1436 : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  357/    1438 : AA                          plo     RL10-1
(1)  357/    1439 : 9A                          ghi     RL10-1
(1)  357/    143A : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  357/    143C : BA                          phi     RL10-1
(1)  357/    143D :  (MACRO-2)                  alu4i   RL10,RL10,1,adi,adci              ;and add 1
(1)  357/    143D : 8B                          glo     RL10    ;long regs are equated to the second reg which has the low order word 
(1)  357/    143E : FC 01                       ADI     (1)&255
(1)  357/    1440 : AB                          plo     RL10
(1)  357/    1441 : 9B                          ghi     RL10
(1)  357/    1442 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  357/    1444 : BB                          phi     RL10
(1)  357/    1445 : 8A                          glo     RL10-1
(1)  357/    1446 : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  357/    1448 : AA                          plo     RL10-1
(1)  357/    1449 : 9A                          ghi     RL10-1
(1)  357/    144A : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  357/    144C : BA                          phi     RL10-1
(1)  358/    144D :                     $$pos2: ; both args now +v
(1)  359/    144D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  359/    144D : D4                          sep     RCALL
(1)  359/    144E : 13 00                       dw      _DIVU4
(1)  360/    1450 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 102 - 2/13/2013 16:29:36


(1)  361/    1450 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  362/    1451 : FE                      shl
(1)  363/    1452 : 3B 74                   bnf $$done ;if the signs were different
(1)  364/    1454 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  364/    1454 :  (MACRO-2)                  alu4I   RL8,RL8,0xffffffff,xri,xri      ;flip all the bits
(1)  364/    1454 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/    1455 : FB FF                       XRI     (0XFFFFFFFF)&255
(1)  364/    1457 : A9                          plo     RL8
(1)  364/    1458 : 99                          ghi     RL8
(1)  364/    1459 : FB FF                       XRI     ((0XFFFFFFFF)>>8)&255; 
(1)  364/    145B : B9                          phi     RL8
(1)  364/    145C : 88                          glo     RL8-1
(1)  364/    145D : FB FF                       XRI     ((0XFFFFFFFF)>>16)&255; 
(1)  364/    145F : A8                          plo     RL8-1
(1)  364/    1460 : 98                          ghi     RL8-1
(1)  364/    1461 : FB FF                       XRI     ((0XFFFFFFFF)>>24)&255; 
(1)  364/    1463 : B8                          phi     RL8-1
(1)  364/    1464 :  (MACRO-2)                  alu4i   RL8,RL8,1,adi,adci              ;and add 1
(1)  364/    1464 : 89                          glo     RL8    ;long regs are equated to the second reg which has the low order word 
(1)  364/    1465 : FC 01                       ADI     (1)&255
(1)  364/    1467 : A9                          plo     RL8
(1)  364/    1468 : 99                          ghi     RL8
(1)  364/    1469 : 7C 00                       ADCI     ((1)>>8)&255; 
(1)  364/    146B : B9                          phi     RL8
(1)  364/    146C : 88                          glo     RL8-1
(1)  364/    146D : 7C 00                       ADCI     ((1)>>16)&255; 
(1)  364/    146F : A8                          plo     RL8-1
(1)  364/    1470 : 98                          ghi     RL8-1
(1)  364/    1471 : 7C 00                       ADCI     ((1)>>24)&255; 
(1)  364/    1473 : B8                          phi     RL8-1
(1)  365/    1474 :                     $$done:
(1)  366/    1474 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  366/    1474 : D5                          sep     RRET
(1)  367/    1475 :                     
(1)  368/    1475 :                     _dubdabx:	
(1)  369/    1475 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  370/    1475 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  371/    1475 :                     ;long interger is passed in rp1p2
(1)  372/    1475 :                     ;buffer pointer is passed at sp+2+4
(1)  373/    1475 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  374/    1475 :                     ;r8-11 are used as temps
(1)  375/    1475 :                     ;r8 is the working pointer
(1)  376/    1475 :                     ;r9.0 is bit count(32)
(1)  377/    1475 :                     ;r10.0 is digit count
(1)  378/    1475 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  378/    1475 : =>TRUE                      if      ('O'='O')
(1)  378/    1475 :  (MACRO-2)                          ldAX    memAddr,SP,(2+4)
(1)  378/    1475 : 82                          glo     SP
(1)  378/    1476 : FC 06                       adi     ((2+4))#256
(1)  378/    1478 : AE                          plo     MEMADDR
(1)  378/    1479 : 92                          ghi     SP
(1)  378/    147A : 7C 00                       adci    ((2+4))>>8; was/256
(1)  378/    147C : BE                          phi     MEMADDR
(1)  378/    147D : =>FALSE                     else
(1)  378/    147D :                                     ldAD    memAddr,SP
(1)  378/    147D : [378]                       endif
(1)  378/    147D : 4E                          lda     memAddr
(1)  378/    147E : B8                          phi     R8
(1)  378/    147F : 0E                          ldn     memAddr
(1)  378/    1480 : A8                          plo     R8
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 103 - 2/13/2013 16:29:36


(1)  379/    1481 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  379/    1481 : 88                          glo     R8
(1)  379/    1482 : AF                          plo     R15
(1)  379/    1483 : 98                          ghi     R8
(1)  379/    1484 : BF                          phi     R15
(1)  380/    1485 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  381/    1487 : A9                  	plo r9
(1)  382/    1488 :                     $$clrlp:	;clear the passed buffer
(1)  383/    1488 : F8 00               	ldi 0	
(1)  384/    148A : 58                  	str r8	;clear a byte
(1)  385/    148B : 18                  	inc r8
(1)  386/    148C : 29                  	dec r9
(1)  387/    148D : 89                  	glo r9	;check the count
(1)  388/    148E : 3A 88               	bnz $$clrlp ;back for more
(1)  389/    1490 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  389/    1490 : 8F                          glo     R15
(1)  389/    1491 : A8                          plo     R8
(1)  389/    1492 : 9F                          ghi     R15
(1)  389/    1493 : B8                          phi     R8
(1)  390/    1494 :                     
(1)  391/    1494 : F8 20               	ldi 32	;bit count
(1)  392/    1496 : AF                  	plo r15
(1)  393/    1497 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  394/    1497 :                     $$cktop:
(1)  395/    1497 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  396/    1498 : FE                  	shl		;check for a 1
(1)  397/    1499 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  398/    149B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  398/    149B : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  398/    149C : FE                          shl             ;shift left once
(1)  398/    149D : AD                          plo     RP1P2     ; save it
(1)  398/    149E : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  398/    149F : 7E                          shlc            ;shift one bit carrying
(1)  398/    14A0 : BD                          phi     RP1P2     ;save it
(1)  398/    14A1 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  398/    14A2 : 7E                          shlc
(1)  398/    14A3 : AC                          plo     RP1P2-1
(1)  398/    14A4 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  398/    14A5 : 7E                          shlc            ;gets the last shift
(1)  398/    14A6 : BC                          phi     RP1P2-1   ;and we're done
(1)  399/    14A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  400/    14A8 : 8F                  	glo r15
(1)  401/    14A9 : 3A 97               	bnz $$cktop	;
(1)  402/    14AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  403/    14AC :                     $$bitloop:
(1)  404/    14AC : F8 0A               	ldi 10	;digit count
(1)  405/    14AE : A9                  	plo r9
(1)  406/    14AF :                     $$dcklp:
(1)  407/    14AF : 08                  	ldn r8 	;pick up a digit
(1)  408/    14B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  409/    14B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  410/    14B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  411/    14B6 : 58                  	str r8	;put it back
(1)  412/    14B7 :                     $$dnoadd:
(1)  413/    14B7 : 18                  	inc r8
(1)  414/    14B8 : 29                  	dec r9	;decrement digit count
(1)  415/    14B9 : 89                  	glo r9
(1)  416/    14BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  417/    14BC :                     	
(1)  418/    14BC : (MACRO)             	shl4 rp1p2 ;shift the input number
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 104 - 2/13/2013 16:29:36


(1)  418/    14BC : 8D                          glo     RP1P2     ;start with low byte of second register
(1)  418/    14BD : FE                          shl             ;shift left once
(1)  418/    14BE : AD                          plo     RP1P2     ; save it
(1)  418/    14BF : 9D                          ghi     RP1P2     ;high byte of second RP1P2
(1)  418/    14C0 : 7E                          shlc            ;shift one bit carrying
(1)  418/    14C1 : BD                          phi     RP1P2     ;save it
(1)  418/    14C2 : 8C                          glo     RP1P2-1   ;now the bottom byte of top RP1P2
(1)  418/    14C3 : 7E                          shlc
(1)  418/    14C4 : AC                          plo     RP1P2-1
(1)  418/    14C5 : 9C                          ghi     RP1P2-1   ;finally the top byte of the high order RP1P2
(1)  418/    14C6 : 7E                          shlc            ;gets the last shift
(1)  418/    14C7 : BC                          phi     RP1P2-1   ;and we're done
(1)  419/    14C8 :                     	
(1)  420/    14C8 : F8 0A               	ldi 10	;load the digit count again
(1)  421/    14CA : A9                  	plo r9
(1)  422/    14CB :                     ;r8 is now just past the units location and ready to walk back
(1)  423/    14CB :                     $$dshlp:
(1)  424/    14CB : 28                  	dec r8	;walk back from 0's position
(1)  425/    14CC : 08                  	ldn r8	;get the digit back
(1)  426/    14CD : 7E                  	shlc	;continue the shift
(1)  427/    14CE : BF                  	phi r15 ;save it for the carry test
(1)  428/    14CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  429/    14D1 : 58                  	str r8	;put the digit back
(1)  430/    14D2 : 9F                  	ghi r15	;now test for carry
(1)  431/    14D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  432/    14D5 : 29                  	dec r9	;decrement the digit count
(1)  433/    14D6 : 89                  	glo r9
(1)  434/    14D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  435/    14D9 :                     	
(1)  436/    14D9 : 2F                  	dec r15
(1)  437/    14DA : 8F                  	glo r15
(1)  438/    14DB : 3A AC               	bnz $$bitloop
(1)  439/    14DD :                     	
(1)  440/    14DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  440/    14DD : 88                          glo     R8
(1)  440/    14DE : AF                          plo     R15
(1)  440/    14DF : 98                          ghi     R8
(1)  440/    14E0 : BF                          phi     R15
(1)  441/    14E1 : F8 0A               	ldi 10		;digit count again
(1)  442/    14E3 : A9                  	plo r9
(1)  443/    14E4 :                     $$upnxt:
(1)  444/    14E4 : 08                  	ldn r8		;get digit
(1)  445/    14E5 : F9 30               	ori 0x30	;make ascii
(1)  446/    14E7 : 58                  	str r8		;put it back
(1)  447/    14E8 : 18                  	inc r8		;next digit
(1)  448/    14E9 : 29                  	dec r9		;counter
(1)  449/    14EA : 89                  	glo r9
(1)  450/    14EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  451/    14ED :                     	
(1)  452/    14ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  453/    14EF : A9                  	plo r9
(1)  454/    14F0 :                     $$cknext:
(1)  455/    14F0 : 0F                  	ldn r15		;check digit
(1)  456/    14F1 : FF 30               	smi 0x30	;for '0'
(1)  457/    14F3 : 3A FA               	bnz $$done
(1)  458/    14F5 : 1F                  	inc r15		;next digit
(1)  459/    14F6 : 29                  	dec r9		;reduce count
(1)  460/    14F7 : 89                  	glo r9
(1)  461/    14F8 : 3A F0               	bnz $$cknext
(1)  462/    14FA :                     $$done:
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm(lcc1802EpiloNG.inc) - page 105 - 2/13/2013 16:29:36


(1)  463/    14FA : (MACRO)             	cretn
(1)  463/    14FA : D5                          sep     RRET
(1)  464/    14FB :                     	
(1)  465/    14FB :                     	
(1)  466/    14FB :                     _modU4:	;32 bit unsigned remainder
(1)  467/    14FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  468/    14FB : (MACRO)                 Ccall _divU4
(1)  468/    14FB : D4                          sep     RCALL
(1)  468/    14FC : 13 00                       dw      _DIVU4
(1)  469/    14FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  469/    14FE :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  469/    14FE : 8D                          glo     RP1P2
(1)  469/    14FF : A9                          plo     RL8
(1)  469/    1500 : 9D                          ghi     RP1P2
(1)  469/    1501 : B9                          phi     RL8
(1)  469/    1502 :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  469/    1502 : 8C                          glo     RP1P2-1
(1)  469/    1503 : A8                          plo     RL8-1
(1)  469/    1504 : 9C                          ghi     RP1P2-1
(1)  469/    1505 : B8                          phi     RL8-1
(1)  470/    1506 : (MACRO)                 Cretn
(1)  470/    1506 : D5                          sep     RRET
(1)  471/    1507 :                         
(1)  472/    1507 :                     _modI4:	;32 bit signed remainder
(1)  473/    1507 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  474/    1507 : (MACRO)                 Ccall _divI4
(1)  474/    1507 : D4                          sep     RCALL
(1)  474/    1508 : 14 00                       dw      _DIVI4
(1)  475/    150A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  475/    150A :  (MACRO-2)                  cpy2    RL8,RP1P2 ;long reg pairs are addressed as the low order pair
(1)  475/    150A : 8D                          glo     RP1P2
(1)  475/    150B : A9                          plo     RL8
(1)  475/    150C : 9D                          ghi     RP1P2
(1)  475/    150D : B9                          phi     RL8
(1)  475/    150E :  (MACRO-2)                  cpy2    RL8-1,RP1P2-1
(1)  475/    150E : 8C                          glo     RP1P2-1
(1)  475/    150F : A8                          plo     RL8-1
(1)  475/    1510 : 9C                          ghi     RP1P2-1
(1)  475/    1511 : B8                          phi     RL8-1
(1)  476/    1512 : (MACRO)                 Cretn
(1)  476/    1512 : D5                          sep     RRET
(1)  477/    1513 :                         
(1)  478/    1513 :                     	
(1)  479/    1513 :                      
     971/    1513 :                     	include putc.inc
(1)    1/    1513 :                     ;putc.inc contains character output runtime routine for LCC-xr18
(1)    2/    1513 :                     ;input is in bottom byte of regArg1 (r13 as of the christmas compiler)
(1)    3/    1513 :                     _putc:
(1)    4/    1513 :                     _out5:	
(1)    5/    1513 : 8C                  	glo	regArg1
(1)    6/    1514 : 22                  	dec	sp
(1)    7/    1515 : 52                  	str	sp
(1)    8/    1516 : 65                  	out	5
(1)    9/    1517 : (MACRO)             	Cretn
(1)    9/    1517 : D5                          sep     RRET
     972/    1518 :                     
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 106 - 2/13/2013 16:29:36


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BITLOOP160 :                  14AC C | *BRANCHEXT :                      0 - |
 BVTABLE82 :                    65F C | *CASESENSITIVE :                  0 - |
 CHECK_SUB158 :                1396 C |  CKNEXT160 :                   14F0 C |
 CKTOP160 :                    1497 C |  CLRLP160 :                    1488 C |
*CONSTPI :        3.141592653589793 - | *DATE :                   2/13/2013 - |
 DCKLP160 :                    14AF C |  DIVLOOP16_16155 :             1252 C |
*DIVSETBIT16_16155 :           1284 C |  DIVSKIP16_16155 :             1281 C |
 DIVSKIPCLEAR16_16155 :        1288 C |  DIVSKIPFINALADD16_16155 :     129A C |
 DIVSUB16_16155 :              1273 C |  DNOADD160 :                   14B7 C |
 DONE156 :                     12D3 C |  DONE159 :                     1474 C |
 DONE160 :                     14FA C |  DSHLP160 :                    14CB C |
 ENDLP157 :                    1361 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            2A C |  L10 :                          22D C |
*L11 :                          30C C |  L12 :                          2CF C |
*L13 :                          2D8 C |  L15 :                          2E7 C |
*L16 :                          3A5 C |  L17 :                          321 C |
*L18 :                          473 C |  L19 :                          3AE C |
*L20 :                          3AF C | *L21 :                          4AE C |
 L22 :                          493 C |  L23 :                          4AB C |
*L25 :                          4F4 C |  L26 :                          4DE C |
*L27 :                          4E1 C |  L29 :                          4E2 C |
*L3 :                            84 C | *L30 :                          611 C |
 L31 :                          5C1 C |  L32 :                          603 C |
*L33 :                          667 C | *L35 :                          6CF C |
 L36 :                          680 C | *L37 :                          680 C |
 L39 :                          69E C | *L4 :                           12F C |
*L40 :                          72A C |  L41 :                          6F5 C |
 L42 :                          711 C | *L44 :                          92A C |
 L45 :                          819 C |  L46 :                          829 C |
 L47 :                          832 C |  L48 :                          8FA C |
*L5 :                           1B6 C |  L50 :                          83B C |
*L51 :                          83B C |  L53 :                          848 C |
 L54 :                          8E9 C |  L57 :                          897 C |
*L58 :                          A10 C |  L59 :                          9DD C |
*L6 :                           24B C | *L61 :                          A64 C |
*L62 :                          AC2 C | *L63 :                          B59 C |
 L64 :                          B34 C |  L65 :                          B59 C |
*L66 :                          BDF C | *L67 :                         107B C |
 L68 :                          C41 C |  L69 :                         1056 C |
 L7 :                           1EE C |  L71 :                          C88 C |
 L72 :                         1056 C |  L73 :                         1045 C |
 L74 :                         1056 C |  L76 :                          DBB C |
 L77 :                          DE1 C |  L78 :                          E0B C |
 L79 :                          E36 C | *L8 :                           21E C |
 L80 :                          EAD C |  L81 :                         1045 C |
 L83 :                          F2B C |  L85 :                          F62 C |
 L86 :                         103A C | *L87 :                          D09 C |
 L88 :                          D68 C | *L89 :                          D41 C |
*L90 :                          DA0 C | *L91 :                         10C5 C |
 L92 :                         10CE C |  L93 :                         10C2 C |
*L94 :                         10C2 C |  LCC1802INIT :                 10D7 C |
 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 107 - 2/13/2013 16:29:36


*LISTON :                         1 - |  LOOP157 :                     130F C |
*MACEXP :                         1 - |  MEMADDR :                        E - |
 MLOOP158 :                    1377 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP153 :                     121E C |
 MULTLOOP16_16154 :            122B C |  MULTSKIP16_16154 :            123D C |
*NESTMAX :                      100 - |  NORESTORE157 :                135D C |
 OUTIT82 :                      65C C | *PACKING :                        0 - |
*PADDING :                        1 - |  POS1156 :                     12B3 C |
 POS1159 :                     1426 C |  POS2156 :                     12C3 C |
 POS2159 :                     144D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 R13 :                            D - | *R14 :                            E - |
 R15 :                            F - | *R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - |  RL0 :                            1 - |
 RL10 :                           B - |  RL12 :                           D - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - |  RT2 :                            9 - |
 RWORK :                          E - |  SETBITOFF82 :                  657 C |
 SHIFT158 :                    13AE C |  SLP39 :                         11 C |
 SP :                             2 - | *TIME :                    16:29:36 - |
*TRUE :                           1 - |  UPNXT160 :                    14E4 C |
*VERSION :                     142F - |  _00000145 :                   10F1 C |
 _CALL :                       1201 C |  _DELAY :                       4B7 C |
 _DIE145 :                     10F4 C |  _DIGITALWRITE :                50D C |
*_DIGITALWRITE2 :               640 C | *_DIGITALWRITEBV :              667 C |
 _DIVI2 :                      12A4 C |  _DIVI4 :                      1400 C |
 _DIVU2 :                      1249 C |  _DIVU4 :                      1300 C |
 _DUBDABX :                    1475 C | *_EXIT :                       1098 C |
 _ITOA :                        73F C |  _LTOA :                        947 C |
 _MAIN :                        47C C |  _MODI2 :                      1105 C |
*_MODI4 :                      1507 C | *_MODU2 :                      10FD C |
*_MODU4 :                      14FB C | *_MULU2 :                      1223 C |
*_MULU4 :                      1366 C | *_OLDUINOINCLUDER :             61A C |
 _ONEMS :                      121C C |  _OUT4 :                       110D C |
 _OUT5 :                       1513 C |  _PIN4 :                          3 C |
 _PRINTF :                      BE8 C |  _PRINTINT :                    A2D C |
 _PRINTLINT :                   A6D C |  _PRINTSTR :                    6D8 C |
 _PUTC :                       1513 C |  _PUTX :                        B62 C |
 _PUTXN :                       ACB C |  _RETURN :                     1212 C |
 _SEND :                          4 C |  _SENDCOMMAND :                  2B C |
 _SENDDATA :                     8D C |  _SETDISPLAY :                  1BF C |
 _SETDISPLAYTO1802 :            32D C |  _SETLED :                      138 C |
*_SETQOFF :                    10FB C | *_SETQON :                     10F9 C |
 _SPARKLE :                     3B0 C |  _STRCPY :                      668 C |
 _TMS1638INIT :                 268 C |

    219 symbols
     77 unused symbols

 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 108 - 2/13/2013 16:29:36


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
INC4                                  | INTERRUPTS                           
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | LD1                                  
LD2                                   | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | NEGI2                                
NEGI4                                 | NOINTERRUPTS                         
POPR                                  | PUSHR                                
RLDMI                                 | SAVMI                                
SEXT                                  | SEXT4                                
SHL2                                  | SHL2I                                
SHL2R                                 | SHL4                                 
SHL4I                                 | SHL4R                                
SHLC4                                 | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST4                                   | ZEXT                                 
ZEXT4                                 |

     69 macros

 AS V1.42 Beta [Bld 84] - source file tms1638demo.asm - page 109 - 2/13/2013 16:29:36


  codepages:
  ----------

STANDARD (0 changed characters)


0.13 seconds assembly time

   2241 lines source file
   7040 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
