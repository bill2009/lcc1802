; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Tue Mar 26 08:07:25 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloNO.inc
	listing on
	align 4
_f0:
	dd 0x0
	align 4
_f1:
	dd 0x3f800000
	align 4
_f2:
	dd 0x40000000
	align 4
_f3:
	dd 0x40400000
	align 4
_f6:
	dd 0x40c00000
	align 4
_fbigone:
	dd 0x4ab71b00
	align 4
_l0:
	dd 0
	align 4
_l1:
	dd 1
	align 4
_l2:
	dd 2
	align 4
_l3:
	dd 3
_fsp:
	reserve 0; save room for local variables
	pushr r7
	reserve 12; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;void fsp(float f1){
;	fsplit.uf=f1;
	ld4 RL10,'O',sp,(0+16);INDIRF4(addr)
	st4 RL10,'D',(_fsplit),0; ASGNF4(addr,reg)
;	printf("fsplit.uc[1]&&0x80=%x\n",fsplit.uc[1]&&0x80);
	ldaD R12,L3; reg:acon
	ld1 R11,'D',(_fsplit+1),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L6; EQ 0
	ldaD R7,1; reg:acon
	lbr L7
L6:
	ld2z R7
L7:
	cpy2 R13,R7 ;LOADI2(reg)
	Ccall _printf
;	printf("fsplit.uf=%lx,fsplit.uc[0]=%x\n",fsplit.uf,fsplit.uc[0]);
	ldaD R12,L8; reg:acon
	ld4 RL10,'D',(_fsplit),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	ld1 R11,'D',(_fsplit),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;	fsign=fsplit.uc[0]&0x80;
	ld1 R11,'D',(_fsplit),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	st2 R11,'D',(_fsign),0
;	fexp=fsplit.uc[0]<<1;
	ld1 R11,'D',(_fsplit),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,1
	st2 R11,'D',(_fexp),0
;	if (fsplit.uc[1]&0x80) fexp+=1;
	ld1 R11,'D',(_fsplit+1),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L9; EQ 0
	ld2 R11,'D',(_fexp),0 ;reg:INDIRI2(addr)
	incm R11,1
	st2 R11,'D',(_fexp),0
L9:
;	fsplit.uc[0]=0; fsplit.uc[1]|=0x80;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_fsplit),0; ASGNU1
	ldaD R11,_fsplit+1; reg:acon
	ld1 R10,'D',(_fsplit+1),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,128,ori,ori ;removed copy
	str1 R10,R11; ASGNU1(indaddr,reg)
;	printf("fsplit.uf=%lx,fsplit.uc[0]=%x\n",fsplit.uf,fsplit.uc[0]);
	ldaD R12,L8; reg:acon
	ld4 RL10,'D',(_fsplit),0;INDIRF4(addr)
	st4 RL10,'O',sp,(4); arg+f**
	ld1 R11,'D',(_fsplit),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(8); arg+f**
	Ccall _printf
;	printf("sign=%d,exponent=%d,mantissa=%ld\n",fsign,fexp,fsplit.ul);
	ldaD R12,L13; reg:acon
	ld2 R13,'D',(_fsign),0 ;reg:INDIRI2(addr)
	ld2 R11,'D',(_fexp),0 ;reg:INDIRI2(addr)
	st2 r11,'O',sp,(4); arg+f**
	ld4 RL10,'D',(_fsplit),0
	st4 RL10,'O',sp,(8); arg+f**
	Ccall _printf
;	shifto=23-(fexp-127);
	ldaD R11,23; reg:acon
	ld2 R10,'D',(_fexp),0 ;reg:INDIRI2(addr)
	alu2I R10,R10,127,smi,smbi
	alu2 R11,R11,R10,sm,smb
	st2 R11,'D',(_shifto),0
;	l1=fsplit.ul>>shifto;
	ld4 RL10,'D',(_fsplit),0
	ld2 R9,'D',(_shifto),0 ;reg:INDIRI2(addr)
	shRU4R RL10,R9
	st4 RL10,'D',(_l1),0
;	printf("shifto=%d,whole part=%ld\n",shifto,l1);
	ldaD R12,L14; reg:acon
	ld2 R13,'D',(_shifto),0 ;reg:INDIRI2(addr)
	ld4 RL10,'D',(_l1),0
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _printf
;}
L2:
	release 12; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_fpdis:
	reserve 8
;void fpdis(funion f){
;	S=f.ui&0x8000; //sign
	ld2 RL10,'O',R12,0
	zext4 RL10 ;CVUI4: widen unsigned int to signed long (zero extend)
	ldI4 RL8,32768 ;loading a long integer constant
	alu4 RL10,RL10,RL8,and,and
	cpy2 R11,RL10 ;LOADI2(reg)
	st2 R11,'O',sp,(-10+10)
;	M=f.ul&0x007fffff;
	ld4 RL10,'O',R12,0
	ldI4 RL8,0x7fffff ;loading a long unsigned constant
	alu4 RL10,RL10,RL8,and,and
	st4 RL10,'O',sp,(-8+10)
;	E=f.uc[0]<<1;
	ld1 R11,'O',R12,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,1
	st2 R11,'O',sp,(-4+10)
;	if (f.uc[1]&0x80) E+=1;
	ld1 R11,'O',R12,(1)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L16; EQ 0
	ld2 R11,'O',sp,(-4+10) ;reg:INDIRI2(addr)
	incm R11,1
	st2 R11,'O',sp,(-4+10)
L16:
;}
L15:
	release 8
	Cretn

_fpnorm:
	reserve 8; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 16; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
;float fpnorm(long L){
;	funion u; int E=150,S=0;
	ldaD R7,150; reg:acon
	ld2z R11
	st2 R11,'O',sp,(-10+32)
;	u.ul=L;
	cpy4 RL10,RL0; LOADU4(reg)
	st4 RL10,'O',sp,(-8+32); ASGNU4
;	if (L){
	ldI4 RL10,0 ;loading a long integer constant
	jeqI4 rL0,rL10,L19
;		u.ul=L;
	cpy4 RL10,RL0; LOADU4(reg)
	st4 RL10,'O',sp,(-8+32); ASGNU4
;		if (u.sl<0){
	ld4 RL10,'O',sp,(-8+32)
	ldI4 RL8,0 ;loading a long integer constant
	jcI4 RL10,RL8,lbdf,L24; GE is flipped test from LT
;			u.sl=-u.sl;
	ld4 RL10,'O',sp,(-8+32)
	negI4 RL10,RL10 ;was alu4I RL10,RL10,0,sdi,sdbi
	st4 RL10,'O',sp,(-8+32)
;			S=1;
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(-10+32)
;		}
	lbr L24
L23:
;		while(u.uc[0]){
;			printf(">> ");
	ldaD R12,L26; reg:acon
	Ccall _printf
;			u.ul>>=1;
	ld4 RL10,'O',sp,(-8+32)
	shrU4I RL10,1
	st4 RL10,'O',sp,(-8+32); ASGNU4
;			E++;
	incm R7,1
;		}
L24:
;		while(u.uc[0]){
	ld1 R11,'O',sp,(-8+32)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L23; NE 0
	lbr L28
L27:
;		while(!(u.uc[1]&0x80)){
;			printf("<< ");
	ldaD R12,L31; reg:acon
	Ccall _printf
;			u.ul<<=1;
	ld4 RL10,'O',sp,(-8+32)
	shl4I RL10,1; LSHU4(reg,con)
	st4 RL10,'O',sp,(-8+32); ASGNU4
;			E--;
	decm R7,1
;		}
L28:
;		while(!(u.uc[1]&0x80)){
	ld1 R11,'O',sp,(-7+32)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L27; EQ 0
;		printf("\nFor %ld, mantissa is %ld, exp is %d, sign is %d\n",L,u.ul,E,S);
	ldaD R12,L32; reg:acon
	st4 RL0,'O',sp,(4); arg+f**
	ld4 RL10,'O',sp,(-8+32)
	st4 RL10,'O',sp,(8); arg+f**
	st2 r7,'O',sp,(12); arg+f**
	ld2 R11,'O',sp,(-10+32) ;reg:INDIRI2(addr)
	st2 r11,'O',sp,(14); arg+f**
	Ccall _printf
;		u.uc[0]=E>>1;
	cpy2 R11,R7
	shrI2I R11,1
	st1 R11,'O',sp,(-8+32); ASGNU1
;		if (!(E&1)){
	alu2I R11,R7,1,ani,ani
	;removed ?	cpy2 R11,R7
	jnzU2 r11,L33; NE 0
;			u.uc[1]&=0x7f;
	ld1 R11,'O',sp,(-7+32)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,127,ani,ani
	;removed ?	cpy2 R11,R11
	st1 R11,'O',sp,(-7+32); ASGNU1
;		}
L33:
;		if (S){
	ld2 R11,'O',sp,(-10+32) ;reg:INDIRI2(addr)
	jzU2 r11,L20; EQ 0
;			u.uc[0]|=0x80;
	ld1 R11,'O',sp,(-8+32)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ori,ori ;removed copy
	st1 R11,'O',sp,(-8+32); ASGNU1
;		}
;	} else{
	lbr L20
L19:
;		u.uf=0;
	ld4 RL10,'D',(L38),0;INDIRF4(addr)
	st4 RL10,'O',sp,(-8+32); ASGNF4(addr,reg)
;	}
L20:
;	printf("Hex return is %lx\n",u.ul);
	ldaD R12,L39; reg:acon
	ld4 RL10,'O',sp,(-8+32)
	st4 RL10,'O',sp,(4); arg+f**
	Ccall _printf
;	return u.uf;
	ld4 RL10,'O',sp,(-8+32);INDIRF4(addr)
	cpy4 rp1p2,RL10
L18:
	release 16; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 8; release room for local variables 
	Cretn

_main:
	reserve 8
;{
;	printstr("hello World!\n");
	ldaD R12,L41; reg:acon
	Ccall _printstr
;	printf("cvif4(1)=%lx\n",(float)l1);
	ldaD R12,L42; reg:acon
	ld4 RL8,'D',(_l1),0
	ccall cvif4; CVIF4(reg) convert long to float
	st4 RL8,'O',sp,(4); arg+f**
	Ccall _printf
;	printf("cvif4(2)=%lx\n",(float)l2);
	ldaD R12,L43; reg:acon
	ld4 RL8,'D',(_l2),0
	ccall cvif4; CVIF4(reg) convert long to float
	st4 RL8,'O',sp,(4); arg+f**
	Ccall _printf
;}
L40:
	release 8
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L48
L45:
L46:
	incm R13,1
	incm R12,1
L48:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jnzU2 r11,L45; NE 0
;	return(save);
	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
L44:
	release 2
	Cretn

_printstr:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L51
L50:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L51:
	ld1 R11,'O',R7,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L50; NE 0
;}
L49:
	release 4; release room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_itoa:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	jcI2I r11,0,lbdf,L54; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11 ;LOADU2(reg)*
;	} else{
	lbr L55
L54:
;		n=s;
	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
	cpy2 R1,R11 ;LOADU2(reg)*
;	}
L55:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L57
L56:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R0
	lbr L62
L59:
L60:
	incm R0,1
	alu2 R1,R1,R7,sm,smb
L62:
	jcU2 r1,r7,lbdf,L59 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
	jnzU2 r11,L66; NE 0
	jnzU2 r0,L66; NE 0
	jneU2I r7,1,L63; NE
L66:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldA2 R10,'O',R0,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	incm R11,1
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldaD R11,121; reg:acon
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
;		}
L63:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)*
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R11,R15 ;LOADU2(reg)*
	cpy2 R7,R11 ;LOADU2(reg)*
;	}
L57:
;	while(k>0){
	jnzU2 r7,L56; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
L53:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_ltoa:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L68; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	incm R7,1
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L68:
;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R7 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
L67:
	release 6; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L70:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L71:
	release 18
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L73; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	} else {
	lbr L74
L73:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;	}
L74:
;}
L72:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putxn
;}
L75:
	release 4
	Cretn

_printf:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L78
L77:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	jeqU2I r11,37,L80;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;		} else{
	lbr L81
L80:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	st2 R11,'O',sp,(-5+16)
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,105,L85;EQI2(reg,con)
	ldaD R10,108; reg:acon
	jeqI2 r11,r10,L89; EQI2(reg,reg)
	jcI2 r10,r11,lbnf,L97 ;GT is reversed operands from LT
L96:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,88; reg:acon
	jeqI2 r11,r10,L88; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L82; LT=lbnf i.e. subtract B from A and jump if borrow 
L98:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,99,L87;EQI2(reg,con)
	jeqU2I r11,100,L85;EQI2(reg,con)
	lbr L82
L97:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	ldaD R10,115; reg:acon
	jeqI2 r11,r10,L86; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L82; LT=lbnf i.e. subtract B from A and jump if borrow 
L99:
	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
	jeqU2I r11,120,L88;EQI2(reg,con)
	lbr L82
L85:
;					printint(*this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L83
L86:
;					printstr((char*) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L83
L87:
;					putc((unsigned int) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L83
L88:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L83
L89:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L90; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	cpy2 R10,R11
	incm R10,1
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L92; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L92:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L94; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L95
L94:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putx
;						}
L95:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L83
L90:
L82:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
	Ccall _putc
;			} //switch
L83:
;		} //%
L81:
;	} //while
L78:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L77; NE 0
;} //prtf
L76:
	release 4; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L101; reg:acon
	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
	Ccall _printf
L102:
;	while(1);
L103:
	lbr L102
;}
L100:
	release 4
	Cretn

_memcmp:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R1
;    p1 = (unsigned char *)Ptr1;
	cpy2 R0,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	st2 R13,'O',sp,(-4+10); ASGNP2
	lbr L107
L106:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	incm R0,1
	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
	cpy2 R9,R10
	incm R9,1
	st2 R9,'O',sp,(-4+10); ASGNP2
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R1,R11,R10,sm,smb
;    }
L107:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jeqU2I r11,0,L109;EQU2(reg,con)
	jzU2 r1,L106; EQ 0
L109:
;    return v;
	cpy2 R15,R1 ;LOADI2(reg)
L105:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_memcpy:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R1,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L112
L111:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	incm R0,1
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L112:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L111; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L110:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_memset:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R1,R12 ;LOADP2(reg)
	lbr L116
L115:
;        *p++ = (unsigned char)c;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,1
	cpy2 R10,R13 ;LOADU2(reg)*
	str1 R10,R11; ASGNU1(indaddr,reg)
L116:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)*
	cpy2 R7,R11
	decm R7,1
	jnzU2 r11,L115; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L114:
	release 0; release room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_i1:
	db 2 dup (0); zerofill global
_shifto:
	db 2 dup (0); zerofill global
_fexp:
	db 2 dup (0); zerofill global
_fsign:
	db 2 dup (0); zerofill global
	align 4
_fsplit:
	db 4 dup (0); zerofill global
L101:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
L43:
	db 99
	db 118
	db 105
	db 102
	db 52
	db 40
	db 50
	db 41
	db 61
	db 37
	db 108
	db 120
	db 10
	db 0
L42:
	db 99
	db 118
	db 105
	db 102
	db 52
	db 40
	db 49
	db 41
	db 61
	db 37
	db 108
	db 120
	db 10
	db 0
L41:
	db 104
	db 101
	db 108
	db 108
	db 111
	db 32
	db 87
	db 111
	db 114
	db 108
	db 100
	db 33
	db 10
	db 0
L39:
	db 72
	db 101
	db 120
	db 32
	db 114
	db 101
	db 116
	db 117
	db 114
	db 110
	db 32
	db 105
	db 115
	db 32
	db 37
	db 108
	db 120
	db 10
	db 0
	align 4
L38:
	dd 0x0
L32:
	db 10
	db 70
	db 111
	db 114
	db 32
	db 37
	db 108
	db 100
	db 44
	db 32
	db 109
	db 97
	db 110
	db 116
	db 105
	db 115
	db 115
	db 97
	db 32
	db 105
	db 115
	db 32
	db 37
	db 108
	db 100
	db 44
	db 32
	db 101
	db 120
	db 112
	db 32
	db 105
	db 115
	db 32
	db 37
	db 100
	db 44
	db 32
	db 115
	db 105
	db 103
	db 110
	db 32
	db 105
	db 115
	db 32
	db 37
	db 100
	db 10
	db 0
L31:
	db 60
	db 60
	db 32
	db 0
L26:
	db 62
	db 62
	db 32
	db 0
L14:
	db 115
	db 104
	db 105
	db 102
	db 116
	db 111
	db 61
	db 37
	db 100
	db 44
	db 119
	db 104
	db 111
	db 108
	db 101
	db 32
	db 112
	db 97
	db 114
	db 116
	db 61
	db 37
	db 108
	db 100
	db 10
	db 0
L13:
	db 115
	db 105
	db 103
	db 110
	db 61
	db 37
	db 100
	db 44
	db 101
	db 120
	db 112
	db 111
	db 110
	db 101
	db 110
	db 116
	db 61
	db 37
	db 100
	db 44
	db 109
	db 97
	db 110
	db 116
	db 105
	db 115
	db 115
	db 97
	db 61
	db 37
	db 108
	db 100
	db 10
	db 0
L8:
	db 102
	db 115
	db 112
	db 108
	db 105
	db 116
	db 46
	db 117
	db 102
	db 61
	db 37
	db 108
	db 120
	db 44
	db 102
	db 115
	db 112
	db 108
	db 105
	db 116
	db 46
	db 117
	db 99
	db 91
	db 48
	db 93
	db 61
	db 37
	db 120
	db 10
	db 0
L3:
	db 102
	db 115
	db 112
	db 108
	db 105
	db 116
	db 46
	db 117
	db 99
	db 91
	db 49
	db 93
	db 38
	db 38
	db 48
	db 120
	db 56
	db 48
	db 61
	db 37
	db 120
	db 10
	db 0
	include lcc1802EpiloNO.inc
	include LCC1802fp.inc
	include IO1802.inc
