; generated by lcc-xr18ng $Version: 2.2 - XR18NG - The Birthday Compiler $ on Wed Feb 13 16:29:29 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloNG.inc
	listing on
_PIN4:
	db 0
_send:
;void send(unsigned char data){ //shift out a byte -lsb first
;	asm("	ldi 8	; loop count\n"
	ldi 8	; loop count
	plo rt1	; in temp register
	lda2 rt2,'D',_PIN4,0	;point rt2 to PIN4 which holds current output data
	ldn	 rt2	;pick up PIN4 value
	ani	 0x7f!(1<<4) ;turn off data and strobe bits
	str  rt2
	;and put it back
$$slp: ; we will do this 8 times
	sex  rt2		;temporarily use rt2 as X
	glo regArg1	; get the data byte
	ani	0x01 ;isolate the bottom bit
   lsz     ;need to have it in the top position though
   ldi 0x80 ;there it is
	or		 ; combine PIN4 with the current data bit
	sex sp	;return to normal index reg
	dec sp	; work space
	str sp	;prep for output
	out 4 	;put it out
	ori 1<<4 ;blip the spi clock
	dec sp	; work space
	str sp	;prep for output
	out 4 	;put it out
	glo	regArg1	; get the data back
	shr		; rotate the next bit into position
	plo regArg1	;prepare to repeat
	dec rt1 ;decrement loop count
	glo rt1	;get the loop count
	lbnz $$slp ; back for more
;}
L1:
	Cretn

_sendCommand:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
;void sendCommand(uchar cmd){
;  digitalWrite(strobePin, LOW);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(0),0; reg:addr
	Ccall _digitalWrite
;  send(cmd);
	ld1 R12,'O',sp,(0+6)
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _send
;  digitalWrite(strobePin, HIGH);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(1),0; reg:addr
	Ccall _digitalWrite
;}
L3:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_sendData:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
	ld2 R11,'O',sp,(2+6)
	st1 R11,'O',sp,(2+6)
;void sendData(uchar address, uchar data){
;  sendCommand(0x44);
	ldA2 R12,'D',(68),0; reg:addr
	Ccall _sendCommand
;  digitalWrite(strobePin, LOW);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(0),0; reg:addr
	Ccall _digitalWrite
;  send(0xC0 | address);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,192,ori,ori ;removed copy
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _send
;  send(data);
	ld1 R12,'O',sp,(2+6)
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _send
;  digitalWrite(strobePin, HIGH);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(1),0; reg:addr
	Ccall _digitalWrite
;}
L4:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_setLED:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
	ld2 R11,'O',sp,(2+6)
	st1 R11,'O',sp,(2+6)
;{
;    sendData((pos << 1) + 1, color);
	ld1 R11,'O',sp,(2+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,1
	ldA2 R11,'O',R11,(1); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R13,'O',sp,(0+6)
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _sendData
;}
L5:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_setDisplay:
	alu2I sp,sp,10,smi,smbi
	alu2I memaddr,sp,(9),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	cpy2 r7,r12; function(2055) 1
	cpy2 r1,r13; function(1030) 1
;void setDisplay(const unsigned char values[], unsigned char size){
;  for (i = 0; i<size; i++) {
	ldA2 R0,'D',(0),0; reg:addr
	lbr L10
L7:
;    sendData(i<<1, values[i]);
	cpy1 R11,R0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R10,R11
	shl2I R10,1
	cpy1 R12,R10
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R11,R11,R7,add,adc
	ld1 R13,'O',R11,0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _sendData
;  }
L8:
;  for (i = 0; i<size; i++) {
	cpy1 R11,R0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(1); reg:addr
	cpy1 R0,R11
L10:
	cpy1 R11,R0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy1 R10,R1
	zExt 10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2 r11,r10,lbnf,L7; LT=lbnf i.e. subtract B from A and jump if borrow 
;}
L6:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	alu2I sp,sp,10,adi,adci; virtual frame release
	Cretn

_tms1638init:
	alu2I sp,sp,6,smi,smbi
	alu2I memaddr,sp,(5),adi,adci
	sex	memaddr
	savmi r7
	sex sp
;void tms1638init(){
;  digitalWrite(strobePin, HIGH);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(1),0; reg:addr
	Ccall _digitalWrite
;  digitalWrite(tmclockpin, HIGH);
	ldA2 R12,'D',(4),0; reg:addr
	ldA2 R13,'D',(1),0; reg:addr
	Ccall _digitalWrite
;  sendCommand(0x40);
	ldA2 R12,'D',(64),0; reg:addr
	Ccall _sendCommand
;  sendCommand(0x80 | (8) | min(7, 3));
	ldA2 R12,'D',(139),0; reg:addr
	Ccall _sendCommand
;  digitalWrite(strobePin, LOW);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(0),0; reg:addr
	Ccall _digitalWrite
;  send(0xC0);
	ldA2 R12,'D',(192),0; reg:addr
	Ccall _send
;  for (i = 0; i < 16; i++) {
	ldA2 R7,'D',(0),0; reg:addr
	lbr L15
L12:
;    send(0x00);
	ldA2 R12,'D',(0),0; reg:addr
	Ccall _send
;  }
L13:
;  for (i = 0; i < 16; i++) {
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(1); reg:addr
	cpy1 R7,R11
L15:
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,16,lbnf,L12  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  digitalWrite(strobePin, HIGH);
	ldA2 R12,'D',(5),0; reg:addr
	ldA2 R13,'D',(1),0; reg:addr
	Ccall _digitalWrite
;}
L11:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	alu2I sp,sp,6,adi,adci; virtual frame release
	Cretn

L17:
	db 0
	db 0
	db 0
	db 0
	db 6
	db 127
	db 63
	db 91
	db 0
	db 0
	db 0
	db 0
_setDisplayTo1802:
	alu2I sp,sp,16,smi,smbi
	st2 r12,'O',sp,(18); flag1 
	ld2 R11,'O',sp,(0+18)
	st1 R11,'O',sp,(0+18)
;{
;const unsigned char RCA_DATA[] = {
	ldA2 R11,'O',sp,(-14+18); reg:addr
	ldA2 R8,'D',(L17),0; reg:addr
	blkcpy r11,r8,12; ASGNB(reg,INDIRB(reg))
;  setDisplay(RCA_DATA+offset, 8);
	ld1 R11,'O',sp,(0+18)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R10,'O',sp,(-14+18); reg:addr
	alu2 R12,R11,R10,add,adc
	ldA2 R13,'D',(8),0; reg:addr
	Ccall _setDisplay
;}
L16:
	alu2I sp,sp,16,adi,adci; virtual frame release
	Cretn

L19:
	db 3
L20:
	db 1
_sparkle:
	alu2I sp,sp,4,smi,smbi
;	static unsigned char pos=3,color=tmsred;
;  		delay(150);
	ldA2 R12,'D',(1),0; reg:addr
	ld1 R13,'D',(L19),0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _setLED
;  		setLED(tmsgreen,pos);
	ldA2 R12,'D',(150),0; reg:addr
	Ccall _delay
;  		delay(150);
	ldA2 R12,'D',(2),0; reg:addr
	ld1 R13,'D',(L19),0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _setLED
;  		pos=(pos+1)%8;
	ldA2 R12,'D',(150),0; reg:addr
	Ccall _delay
;  		setLED(tmsred,pos);
	ld1 R11,'D',(L19),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R12,'O',R11,(1); reg:addr
	ldA2 R13,'D',(8),0; reg:addr
	Ccall _modi2
	cpy2 R11,R15
	st1 R11,'D',(L19),0
;  		delay(150);
	ldA2 R12,'D',(1),0; reg:addr
	ld1 R13,'D',(L19),0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _setLED
;  		setLED(tmsgreen,pos);
	ldA2 R12,'D',(150),0; reg:addr
	Ccall _delay
;  		pos=(pos+1)%8;
	ldA2 R12,'D',(2),0; reg:addr
	ld1 R13,'D',(L19),0
	zExt 13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _setLED
;}
	ld1 R11,'D',(L19),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R12,'O',R11,(1); reg:addr
	ldA2 R13,'D',(8),0; reg:addr
	Ccall _modi2
	cpy2 R11,R15
	st1 R11,'D',(L19),0
;
L18:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_main:
	alu2I sp,sp,4,smi,smbi
;  tms1638init();
;  delay(10);
	Ccall _tms1638init
;  while(1){
	ldA2 R12,'D',(10),0; reg:addr
	Ccall _delay
	lbr L23
L22:
;    setDisplayTo1802(4);
;    sparkle();
	ldA2 R12,'D',(4),0; reg:addr
	Ccall _setDisplayTo1802
;    setDisplayTo1802(0);
	Ccall _sparkle
;    sparkle();
	ldA2 R12,'D',(0),0; reg:addr
	Ccall _setDisplayTo1802
;  }
	Ccall _sparkle
;}
L23:
;    setDisplayTo1802(4);
	lbr L22
;#include "olduino.c"
L21:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_delay:
	alu2I sp,sp,8,smi,smbi
	alu2I memaddr,sp,(7),adi,adci
	sex	memaddr
	savmi r1
	savmi r7
	sex sp
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldA2 R1,'D',(1),0; reg:addr
	lbr L29
L26:
;		oneMs();
	Ccall _oneMs
;	}
L27:
;	for (i=1;i!=howlong;i++){
	inc R1
L29:
	jneU2 r1,r7,L26; NE
;}
L25:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	alu2I sp,sp,8,adi,adci; virtual frame release
	Cretn

_digitalWrite:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
	ld2 R11,'O',sp,(2+6)
	st1 R11,'O',sp,(2+6)
;void digitalWrite(unsigned char n, unsigned char hilo){ //set a bit in the output port on or off
;    if (LOW==hilo){ //turn it off
	ld1 R11,'O',sp,(2+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L31; NE
;        PIN4= PIN4 & ~ (1<<n); //with AND
	ld1 R11,'D',(_PIN4),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R10,'D',(1),0; reg:addr
	ld1 R9,'O',sp,(0+6)
	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2R R10,R9; lshi2(r,r)
	alu2I R10,R10,-1,xri,xri; was?	cpy2 R10,R10+xor2I R10,-1
	alu2 R11,R11,R10,and,and
	st1 R11,'D',(_PIN4),0
;    } else { //turn it on
	lbr L32
L31:
;        PIN4=PIN4|(1<<n); //with OR
	ld1 R11,'D',(_PIN4),0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R10,'D',(1),0; reg:addr
	ld1 R9,'O',sp,(0+6)
	zExt 9 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2R R10,R9; lshi2(r,r)
	alu2 R11,R11,R10,or,or
	st1 R11,'D',(_PIN4),0
;    }
L32:
;    OUT4(PIN4); //
	ld1 R12,'D',(_PIN4),0
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _OUT4
;}
L30:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L33:
	Cretn

_strcpy:
	alu2I sp,sp,2,smi,smbi
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L39
L36:
L37:
	ldA2 R11,'D',(1),0; reg:addr
	alu2 R13,R13,R11,add,adc
	alu2 R12,R12,R11,add,adc
L39:
	ld1 R11,'O',R13,0
	st1 R11,'O',R12,0
	cpy1 R11,R11
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L36; NE
;	return(save);
	ld2 R15,'O',sp,(-4+4)
L35:
	alu2I sp,sp,2,adi,adci; virtual frame release
	Cretn

_printstr:
	alu2I sp,sp,6,smi,smbi
	alu2I memaddr,sp,(5),adi,adci
	sex	memaddr
	savmi r7
	sex sp
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L42
L41:
;    while(*ptr) out5(*ptr++);
	cpy2 R11,R7
	ldA2 R7,'O',R11,(1); reg:addr
	ld1 R12,'O',R11,0
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out5
L42:
	ld1 R11,'O',R7,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L41; NE
;}
L40:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	alu2I sp,sp,6,adi,adci; virtual frame release
	Cretn

_itoa:
	alu2I sp,sp,14,smi,smbi
	alu2I memaddr,sp,(9),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ldA2 R11,'D',(0),0; reg:addr
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16)
	jcI2I r11,0,lbdf,L45; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldA2 R10,'D',(45),0; reg:addr
	st1 R10,'O',R11,0
	ld2 R11,'O',sp,(-6+16)
	ldA2 R11,'O',R11,(1); reg:addr
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11
;	} else{
	lbr L46
L45:
;		n=s;
	ld2 R11,'O',sp,(0+16)
	cpy2 R1,R11
;	}
L46:
;	k=10000;
	ldA2 R7,'D',(10000),0; reg:addr
	lbr L48
L47:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ldA2 R0,'D',(0),0; reg:addr
	lbr L53
L50:
L51:
	inc R0
	alu2 R1,R1,R7,sm,smb
L53:
	jcU2 r1,r7,lbdf,L50 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ldA2 R11,'D',(0),0; reg:addr
	ld2 R10,'O',sp,(-4+16); INDIRU2(addr)
	jneU2 r10,r11,L57; NE
	jneU2 r0,r11,L57; NE
	jneU2I r7,1,L54; NE
L57:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldA2 R10,'O',R0,(48); reg:addr
	st1 R10,'O',R11,0
	ld2 R11,'O',sp,(-6+16)
	ldA2 R11,'O',R11,(1); reg:addr
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldA2 R11,'D',(121),0; reg:addr
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;		}
L54:
;		k=k/10;
	cpy2 R12,R7
	ldA2 R13,'D',(10),0; reg:addr
	Ccall _divu2
	cpy2 R7,R15
;	}
L48:
;	while(k>0){
	jnzU2 r7,L47; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16)
	ldA2 R10,'D',(0),0; reg:addr
	st1 R10,'O',R11,0
;	return buffer;
	ld2 R15,'O',sp,(2+16)
L44:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	alu2I sp,sp,14,adi,adci; virtual frame release
	Cretn

_ltoa:
	alu2I sp,sp,12,smi,smbi
	alu2I memaddr,sp,(11),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+14)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L59; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7
	ldA2 R7,'O',R11,(1); reg:addr
	ldA2 R10,'D',(45),0; reg:addr
	st1 R10,'O',R11,0
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L59:
;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15
	cpy2 R12,R7
	cpy2 R13,R11
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+14)
L58:
	alu2I memaddr,sp,(6),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	alu2I sp,sp,12,adi,adci; virtual frame release
	Cretn

_printint:
	alu2I sp,sp,12,smi,smbi
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L61:
	alu2I sp,sp,12,adi,adci; virtual frame release
	Cretn

_printlint:
	alu2I sp,sp,18,smi,smbi
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15
	cpy2 R12,R11
	Ccall _printstr
;}
L62:
	alu2I sp,sp,18,adi,adci; virtual frame release
	Cretn

_putxn:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L64; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;	} else {
	lbr L65
L64:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;	}
L65:
;}
L63:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_putx:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6)
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putxn
;}
L66:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

_printf:
	alu2I sp,sp,14,smi,smbi
	alu2I memaddr,sp,(9),adi,adci
	sex	memaddr
	savmi r0
	savmi r1
	savmi r7
	sex sp
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ldA2 R0,'D',(0),0; reg:addr
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	ldA2 R1,'O',R1,(2); reg:addr
	ldA2 R0,'O',R0,(1); reg:addr
	lbr L69
L68:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R7,'O',R11,0
;		if (c!='%'){
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,37,L71
;			putc(c);
	cpy1 R12,R7
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;		} else{
	lbr L72
L71:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R7,'O',R11,0
;			switch (c){
	cpy1 R11,R7
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 R11,'O',sp,(-5+16)
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,105,L76
	ldA2 R10,'D',(108),0; reg:addr
	jeqI2 r11,r10,L80
	jcI2 r10,r11,lbnf,L88 ;GT is reveresed operands from LT
L87:
	ld2 R11,'O',sp,(-5+16)
	ldA2 R10,'D',(88),0; reg:addr
	jeqI2 r11,r10,L79
	jcI2 r11,r10,lbnf,L73; LT=lbnf i.e. subtract B from A and jump if borrow 
L89:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,99,L78
	jeqU2I r11,100,L76
	lbr L73
L88:
	ld2 R11,'O',sp,(-5+16)
	ldA2 R10,'D',(115),0; reg:addr
	jeqI2 r11,r10,L77
	jcI2 r11,r10,lbnf,L73; LT=lbnf i.e. subtract B from A and jump if borrow 
L90:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,120,L79
	lbr L73
L76:
;					printint(*this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R12,'O',R11,0
	Ccall _printint
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L74
L77:
;					printstr((char*) *this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	cpy2 R12,R11
	Ccall _printstr
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L74
L78:
;					putc((unsigned int) *this++);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L74
L79:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;					argslot+=1; //next argument slot
	ldA2 R0,'O',R0,(1); reg:addr
;					break;
	lbr L74
L80:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,0,L81
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16)
	ldA2 R10,'O',R11,(1); reg:addr
	st2 R10,'O',sp,(0+16); ASGNP2
	ld1 R11,'O',R11,0
	st1 R11,'O',sp,(-3+16)
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jeqU2I r11,0,L83
;							this++;
	ldA2 R1,'O',R1,(2); reg:addr
;							argslot++;
	ldA2 R0,'O',R0,(1); reg:addr
;						}
L83:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L85; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	ldA2 R1,'O',R1,(4); reg:addr
;						} else{
	lbr L86
L85:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1
	ldA2 R1,'O',R11,(2); reg:addr
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;						}
L86:
;						argslot+=2;
	ldA2 R0,'O',R0,(2); reg:addr
;						break;
	lbr L74
L81:
L73:
;					putc('%');putc(c);
	ldA2 R12,'D',(37),0; reg:addr
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putc
;			} //switch
L74:
;		} //%
L72:
;	} //while
L69:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt 11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,0,L68; NE
;} //prtf
L67:
	alu2I memaddr,sp,(4),adi,adci
	rldmi r7,memaddr
	rldmi r1,memaddr
	rldmi r0,memaddr
	alu2I sp,sp,14,adi,adci; virtual frame release
	Cretn

_exit:
	alu2I sp,sp,4,smi,smbi
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldA2 R12,'D',(L92),0; reg:addr
	ld2 R13,'O',sp,(0+6)
	Ccall _printf
L93:
;	while(1);
L94:
	lbr L93
;}
L91:
	alu2I sp,sp,4,adi,adci; virtual frame release
	Cretn

L92:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
	include lcc1802EpiloNG.inc
	include putc.inc
