 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 1 - 5/16/2013 14:54:56


       1/       0 :                     ; generated by lcc-xr182b $Version: 5.0 - XR182b $ on Thu May 16 14:49:50 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  840/       0 :                     	listing	on
(1)  841/       0 : C0 11 B2            	lbr	lcc1802Init
(1)  842/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     _main: ;copt is peeping you now!
      13/       3 : (MACRO)             	pushr r7
      14/       8 : (MACRO)             	reserve 4; save room for outgoing arguments
      15/       C :                     ;{
      16/       C :                     ;	printf("generates 92 solutions. \n15863724 is first\n\n");
      17/       C : (MACRO)             	ldaD R12,L2; reg:acon
      18/      12 : (MACRO)             	Ccall _printf
      19/      15 :                     ;	for (i = 0; i < 15; i++)
      20/      15 : (MACRO)             	ld2z R7
      21/      19 :                     L3:
      22/      19 :                     ;		up[i] = down[i] = 1;
      23/      19 : (MACRO)             	ldaD R11,1; reg:acon
      24/      1F : (MACRO)             	cpy2 R10,R7
      25/      23 : (MACRO)             	shl2I R10,1
      26/      29 : (MACRO)             	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
      27/      36 : (MACRO)             	st2 R11,'O',R10,(_up); ASGNI2(addr,reg)*;
      28/      43 :                     L4:
      29/      43 :                     ;	for (i = 0; i < 15; i++)
      30/      43 : (MACRO)             	incm R7,1
      31/      44 : (MACRO)             	jcI2I r7,15,lbnf,L3  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
      32/      55 :                     ;	for (i = 0; i < 8; i++)
      33/      55 : (MACRO)             	ld2z R7
      34/      59 :                     L7:
      35/      59 :                     ;		rows[i] = 1;
      36/      59 : (MACRO)             	ldaD R11,1; reg:acon
      37/      5F : (MACRO)             	cpy2 R10,R7
      38/      63 : (MACRO)             	shl2I R10,1
      39/      69 : (MACRO)             	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
      40/      76 :                     L8:
      41/      76 :                     ;	for (i = 0; i < 8; i++)
      42/      76 : (MACRO)             	incm R7,1
      43/      77 : (MACRO)             	jcI2I r7,8,lbnf,L7  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
      44/      88 :                     ;	queens(0);
      45/      88 : (MACRO)             	ld2z R12
      46/      8C : (MACRO)             	Ccall _queens; CALLI2(ar)
      47/      8F :                     ;	printf("...and...\n84136275 is last\nTook about 25 sec on 1.6mhz elf with Christmas compiler\n");
      48/      8F : (MACRO)             	ldaD R12,L11; reg:acon
      49/      95 : (MACRO)             	Ccall _printf
      50/      98 :                     ;	printf("Took about 22 sec on 1.6mhz elf with Birthday compiler\n");
      51/      98 : (MACRO)             	ldaD R12,L12; reg:acon
      52/      9E : (MACRO)             	Ccall _printf
      53/      A1 :                     ;	printf("Took about 17 sec on 1.6mhz elf with St Judy's compiler(from run1802 to 92nd solution)\n");
      54/      A1 : (MACRO)             	ldaD R12,L13; reg:acon
      55/      A7 : (MACRO)             	Ccall _printf
      56/      AA :                     ;	return 0;
      57/      AA : (MACRO)             	ld2z R15
      58/      AE :                     L1:
      59/      AE : (MACRO)             	release 4; release room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 2 - 5/16/2013 14:54:56


      60/      B2 : (MACRO)             	popr r7
      61/      B6 : (MACRO)             	Cretn
      62/      B7 :                     
      63/      B7 :                     _queens:
      64/      B7 : (MACRO)             	pushr r6
      65/      BC : (MACRO)             	pushr r7
      66/      C1 : (MACRO)             	reserve 4; save room for outgoing arguments
      67/      C5 : (MACRO)             	cpy2 r7,r12; function(2053) 1
      68/      C9 :                     ;{
      69/      C9 :                     ;	for (r = 0; r < 8; r++){
      70/      C9 : (MACRO)             	ld2z R6
      71/      CD :                     L15:
      72/      CD :                     ;		if (rows[r] && up[r-c+7] && down[r+c]) {
      73/      CD : (MACRO)             	cpy2 R11,R6
      74/      D1 : (MACRO)             	shl2I R11,1
      75/      D7 : (MACRO)             	ld2 R11,'O',R11,(_rows) ;reg:INDIRI2(addr)
      76/      E3 : (MACRO)             	jzU2 r11,L19; EQ 0
      77/      EB : (MACRO)             	alu2 R11,R6,R7,sm,smb
      78/      F7 : (MACRO)             	shl2I R11,1
      79/      FD : (MACRO)             	ld2 R11,'O',R11,(_up+14) ;reg:INDIRI2(addr)
      80/     109 : (MACRO)             	jzU2 r11,L19; EQ 0
      81/     111 : (MACRO)             	alu2 R11,R6,R7,add,adc; ADDI2(r,r)
      82/     11D : (MACRO)             	shl2I R11,1
      83/     123 : (MACRO)             	ld2 R11,'O',R11,(_down) ;reg:INDIRI2(addr)
      84/     12F : (MACRO)             	jzU2 r11,L19; EQ 0
      85/     137 :                     ;			rows[r] = up[r-c+7] = down[r+c] = 0;
      86/     137 : (MACRO)             	ld2z R11
      87/     13B : (MACRO)             	alu2 R10,R6,R7,add,adc; ADDI2(r,r)
      88/     147 : (MACRO)             	shl2I R10,1
      89/     14D : (MACRO)             	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
      90/     15A : (MACRO)             	alu2 R10,R6,R7,sm,smb
      91/     166 : (MACRO)             	shl2I R10,1
      92/     16C : (MACRO)             	st2 R11,'O',R10,(_up+14); ASGNI2(addr,reg)*;
      93/     179 : (MACRO)             	cpy2 R10,R6
      94/     17D : (MACRO)             	shl2I R10,1
      95/     183 : (MACRO)             	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
      96/     190 :                     ;			x[c] = r;
      97/     190 : (MACRO)             	cpy2 R11,R7
      98/     194 : (MACRO)             	shl2I R11,1
      99/     19A : (MACRO)             	st2 R6,'O',R11,(_x); ASGNI2(addr,reg)*;
     100/     1A7 :                     ;			if (c == 7)
     101/     1A7 : (MACRO)             	jneU2I r7,7,L23; NE
     102/     1B3 :                     ;				print();
     103/     1B3 : (MACRO)             	Ccall _print; CALLI2(ar)
     104/     1B6 : C0 01 C1            	lbr L24
     105/     1B9 :                     L23:
     106/     1B9 :                     ;				queens(c + 1);
     107/     1B9 : (MACRO)             	cpy2 R12,R7 ;reg:ADDI2(consm,reg)
     108/     1BD : (MACRO)             	incm R12,1
     109/     1BE : (MACRO)             	Ccall _queens; CALLI2(ar)
     110/     1C1 :                     L24:
     111/     1C1 :                     ;			rows[r] = up[r-c+7] = down[r+c] = 1;
     112/     1C1 : (MACRO)             	ldaD R11,1; reg:acon
     113/     1C7 : (MACRO)             	alu2 R10,R6,R7,add,adc; ADDI2(r,r)
     114/     1D3 : (MACRO)             	shl2I R10,1
     115/     1D9 : (MACRO)             	st2 R11,'O',R10,(_down); ASGNI2(addr,reg)*;
     116/     1E6 : (MACRO)             	alu2 R10,R6,R7,sm,smb
     117/     1F2 : (MACRO)             	shl2I R10,1
     118/     1F8 : (MACRO)             	st2 R11,'O',R10,(_up+14); ASGNI2(addr,reg)*;
     119/     205 : (MACRO)             	cpy2 R10,R6
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 3 - 5/16/2013 14:54:56


     120/     209 : (MACRO)             	shl2I R10,1
     121/     20F : (MACRO)             	st2 R11,'O',R10,(_rows); ASGNI2(addr,reg)*;
     122/     21C :                     ;		}
     123/     21C :                     L19:
     124/     21C :                     ;	}
     125/     21C :                     L16:
     126/     21C :                     ;	for (r = 0; r < 8; r++){
     127/     21C : (MACRO)             	incm R6,1
     128/     21D : (MACRO)             	jcI2I r6,8,lbnf,L15  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     129/     22E : (MACRO)             	ld2z R15
     130/     232 :                     ;}
     131/     232 :                     L14:
     132/     232 : (MACRO)             	release 4; release room for outgoing arguments
     133/     236 : (MACRO)             	popr r7
     134/     23A : (MACRO)             	popr r6
     135/     23E : (MACRO)             	Cretn
     136/     23F :                     
     137/     23F :                     _print:
     138/     23F : (MACRO)             	pushr r7
     139/     244 : (MACRO)             	reserve 4; save room for outgoing arguments
     140/     248 :                     ;{
     141/     248 :                     ;	for (k = 0; k < 8; k++)
     142/     248 : (MACRO)             	ld2z R7
     143/     24C :                     L27:
     144/     24C :                     ;		printf("%c", x[k]+'1');
     145/     24C : (MACRO)             	ldaD R12,L31; reg:acon
     146/     252 : (MACRO)             	cpy2 R11,R7
     147/     256 : (MACRO)             	shl2I R11,1
     148/     25C : (MACRO)             	ld2 R11,'O',R11,(_x) ;reg:INDIRI2(addr)
     149/     268 : (MACRO)             	ldA2 R13,'O',R11,(49); reg:addr
     150/     270 : (MACRO)             	Ccall _printf
     151/     273 :                     L28:
     152/     273 :                     ;	for (k = 0; k < 8; k++)
     153/     273 : (MACRO)             	incm R7,1
     154/     274 : (MACRO)             	jcI2I r7,8,lbnf,L27  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     155/     285 :                     ;	printf("\n");
     156/     285 : (MACRO)             	ldaD R12,L32; reg:acon
     157/     28B : (MACRO)             	Ccall _printf
     158/     28E : (MACRO)             	ld2z R15
     159/     292 :                     ;}
     160/     292 :                     L26:
     161/     292 : (MACRO)             	release 4; release room for outgoing arguments
     162/     296 : (MACRO)             	popr r7
     163/     29A : (MACRO)             	Cretn
     164/     29B :                     
     165/     29B :                     _strcpy:
     166/     29B : (MACRO)             	reserve 2
     167/     29D :                     ;{
     168/     29D :                     ;	char *save = to;
     169/     29D : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     170/     2AA :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     171/     2AA : C0 02 AF            	lbr L37
     172/     2AD :                     L34:
     173/     2AD :                     L35:
     174/     2AD : (MACRO)             	incm R13,1
     175/     2AE : (MACRO)             	incm R12,1
     176/     2AF :                     L37:
     177/     2AF : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
     178/     2B1 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
     179/     2B3 : (MACRO)             	jnzU1 r11,L34; NEI2(CVUI2(reg),con0)
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 4 - 5/16/2013 14:54:56


     180/     2B7 :                     ;	return(save);
     181/     2B7 : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
     182/     2C3 :                     L33:
     183/     2C3 : (MACRO)             	release 2
     184/     2C5 : (MACRO)             	Cretn
     185/     2C6 :                     
     186/     2C6 :                     _strlen:
     187/     2C6 : (MACRO)             	pushr r7
     188/     2CB :                     ;{
     189/     2CB :                     ;	unsigned int slen = 0 ;
     190/     2CB : (MACRO)             	ld2z R7
     191/     2CF : C0 02 D4            	lbr L40
     192/     2D2 :                     L39:
     193/     2D2 :                     ;	while (*str != 0) {
     194/     2D2 :                     ;      slen++ ;
     195/     2D2 : (MACRO)             	incm R7,1
     196/     2D3 :                     ;      str++ ;
     197/     2D3 : (MACRO)             	incm R12,1
     198/     2D4 :                     ;   }
     199/     2D4 :                     L40:
     200/     2D4 :                     ;	while (*str != 0) {
     201/     2D4 : (MACRO)             	ldn1 R11,R12;reg:  INDIRU1(indaddr)
     202/     2D6 : (MACRO)             	jnzU1 r11,L39; NEI2(CVUI2(reg),con0)
     203/     2DA :                     ;   return slen;
     204/     2DA : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
     205/     2DE :                     L38:
     206/     2DE : (MACRO)             	popr r7
     207/     2E2 : (MACRO)             	Cretn
     208/     2E3 :                     
     209/     2E3 :                     _printstr:
     210/     2E3 : (MACRO)             	pushr r7
     211/     2E8 : (MACRO)             	reserve 4; save room for outgoing arguments
     212/     2EC : (MACRO)             	cpy2 r7,r12; function(2055) 1
     213/     2F0 :                     ;void printstr(char *ptr){
     214/     2F0 : C0 03 0E            	lbr L44
     215/     2F3 :                     L43:
     216/     2F3 :                     ;    while(*ptr) out(5,*ptr++);
     217/     2F3 : (MACRO)             	ldaD R12,5; reg:acon
     218/     2F9 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg) opt1
     219/     2FD : (MACRO)             	incm R7,1
     220/     2FE : (MACRO)             	ld1 R13,'O',R11,0
     221/     308 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     222/     30B : (MACRO)             	Ccall _out; CALLI2(ar)
     223/     30E :                     L44:
     224/     30E : (MACRO)             	ldn1 R11,R7;reg:  INDIRU1(indaddr)
     225/     310 : (MACRO)             	jnzU1 r11,L43; NEI2(CVUI2(reg),con0)
     226/     314 :                     ;}
     227/     314 :                     L42:
     228/     314 : (MACRO)             	release 4; release room for outgoing arguments
     229/     318 : (MACRO)             	popr r7
     230/     31C : (MACRO)             	Cretn
     231/     31D :                     
     232/     31D :                     	align 4
     233/     320 :                     _round_nums:
     234/     320 : 3F 00 00 00         	dd 0x3f000000
     235/     324 : 3D 4C CC CD         	dd 0x3d4ccccd
     236/     328 : 3B A3 D7 0A         	dd 0x3ba3d70a
     237/     32C : 3A 03 12 6F         	dd 0x3a03126f
     238/     330 : 38 51 B7 17         	dd 0x3851b717
     239/     334 : 36 A7 C5 AC         	dd 0x36a7c5ac
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 5 - 5/16/2013 14:54:56


     240/     338 : 35 06 37 BD         	dd 0x350637bd
     241/     33C : 33 56 BF 95         	dd 0x3356bf95
     242/     340 :                     	align 4
     243/     340 :                     _mult_nums:
     244/     340 : 3F 80 00 00         	dd 0x3f800000
     245/     344 : 41 20 00 00         	dd 0x41200000
     246/     348 : 42 C8 00 00         	dd 0x42c80000
     247/     34C : 44 7A 00 00         	dd 0x447a0000
     248/     350 : 46 1C 40 00         	dd 0x461c4000
     249/     354 : 47 C3 50 00         	dd 0x47c35000
     250/     358 : 49 74 24 00         	dd 0x49742400
     251/     35C : 4B 18 96 80         	dd 0x4b189680
     252/     360 :                     _ftoa:
     253/     360 : (MACRO)             	reserve 62; save room for local variables
     254/     36A : (MACRO)             	pushr r0
     255/     36F : (MACRO)             	pushr r1
     256/     374 : (MACRO)             	pushr r6
     257/     379 : (MACRO)             	pushr r7
     258/     37E : (MACRO)             	reserve 8; save room for outgoing arguments
     259/     386 : (MACRO)             	cpy4 RL6,RL12; halfbaked&floaty
     260/     38E : (MACRO)             	ld2 R1,'O',sp,(6+80); reg:INDIRU2(addr)
     261/     39A :                     ;{
     262/     39A :                     ;   char *output = outbfr ;
     263/     39A : (MACRO)             	ld2 R0,'O',sp,(4+80);reg:  INDIRP2(addr)
     264/     3A6 :                     ;   if (flt < 0.0) {
     265/     3A6 : (MACRO)             	ld4 RL10,'D',(L49),0;INDIRF4(addr)
     266/     3B4 : (MACRO)             	jcF4 RL6,RL10,lbdf,L47;GEF4(reg,reg) - reverse test
     267/     3F9 :                     ;      *output++ = '-' ;
     268/     3F9 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
     269/     3FD : (MACRO)             	cpy2 R0,R11
     270/     401 : (MACRO)             	incm R0,1
     271/     402 : (MACRO)             	ldaD R10,45; reg:acon
     272/     408 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     273/     40A :                     ;      flt *= -1.0 ;
     274/     40A : (MACRO)             	ld4 RL8,'D',(L50),0;INDIRF4(addr)
     275/     418 : (MACRO)             	cpy4 RL10,RL6; LOADU4(reg)
     276/     420 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     277/     423 : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
     278/     42B :                     ;   } else {
     279/     42B : C0 04 42            	lbr L48
     280/     42E :                     L47:
     281/     42E :                     ;      if (use_leading_plus) {
     282/     42E : C0 04 42            	lbr L51
     283/     431 :                     ;         *output++ = '+' ;
     284/     431 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
     285/     435 : (MACRO)             	cpy2 R0,R11
     286/     439 : (MACRO)             	incm R0,1
     287/     43A : (MACRO)             	ldaD R10,43; reg:acon
     288/     440 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     289/     442 :                     ;      }
     290/     442 :                     L51:
     291/     442 :                     ;   }
     292/     442 :                     L48:
     293/     442 :                     ;   if (dec_digits < 8) {
     294/     442 : (MACRO)             	jcI2I r1,8,lbdf,L53; GE is flipped test from LT
     295/     453 :                     ;      flt += round_nums[dec_digits] ;
     296/     453 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     297/     45B : (MACRO)             	cpy2 R11,R1
     298/     45F : (MACRO)             	shl2I R11,2
     299/     46B : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 6 - 5/16/2013 14:54:56


     300/     47B : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     301/     47E : (MACRO)             	cpy4 RL6,RL8; LOADU4(reg)
     302/     486 :                     ;   }
     303/     486 :                     L53:
     304/     486 :                     ;	mult=mult_nums[dec_digits];
     305/     486 : (MACRO)             	cpy2 R11,R1
     306/     48A : (MACRO)             	shl2I R11,2
     307/     496 : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
     308/     4A6 : (MACRO)             	st4 RL10,'O',sp,(-12+80); ASGNF4(addr,reg)
     309/     4B9 :                     ;   wholeNum = flt;
     310/     4B9 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     311/     4C1 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     312/     4C4 : (MACRO)             	st4 RL8,'O',sp,(-8+80)
     313/     4D7 :                     ;   decimalNum = ((flt - wholeNum) * mult);
     314/     4D7 : (MACRO)             	cpy4 RL8,RL6; LOADU4(reg)
     315/     4DF : (MACRO)             	st4 RL8,'O',sp,(-64+80); ASGNF4(addr,reg)
     316/     4F2 : (MACRO)             	ld4 RL8,'O',sp,(-8+80);reg:  INDIRI4(addr)
     317/     502 : (MACRO)             	Ccall cvif4; emit2
     318/     505 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     319/     50D : (MACRO)             	ld4 RL8,'O',sp,(-64+80);INDIRF4(addr)
     320/     51D : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     321/     520 : (MACRO)             	ld4 RL10,'O',sp,(-12+80);INDIRF4(addr)
     322/     530 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     323/     533 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     324/     536 : (MACRO)             	st4 RL8,'O',sp,(-16+80)
     325/     549 :                     ;   strcpy(output,dubdabx(wholeNum,output,1));
     326/     549 : (MACRO)             	ld4 Rp1p2,'O',sp,(-8+80);reg:  INDIRI4(addr)
     327/     559 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
     328/     566 : (MACRO)             	ldaD R11,1; reg:acon
     329/     56C : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     330/     579 : (MACRO)             	Ccall _dubdabx
     331/     57C : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     332/     580 : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     333/     584 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     334/     588 : (MACRO)             	Ccall _strcpy
     335/     58B :                     ;   output+=strlen(output);
     336/     58B : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     337/     58F : (MACRO)             	Ccall _strlen;CALLU2(ar)*
     338/     592 : (MACRO)             	alu2 R0,R15,R0,add,adc
     339/     59E :                     ;   if (dec_digits > 0) {
     340/     59E : (MACRO)             	jzU2 r1,L55; EQ 0
     341/     5A6 :                     ;		*output++ = '.' ;
     342/     5A6 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
     343/     5AA : (MACRO)             	cpy2 R0,R11
     344/     5AE : (MACRO)             	incm R0,1
     345/     5AF : (MACRO)             	ldaD R10,46; reg:acon
     346/     5B5 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     347/     5B7 :                     ;		strcpy(output,dubdabx(decimalNum,output,dec_digits));
     348/     5B7 : (MACRO)             	ld4 Rp1p2,'O',sp,(-16+80);reg:  INDIRI4(addr)
     349/     5C7 : (MACRO)             	st2 r0,'O',sp,(4); arg+f**
     350/     5D4 : (MACRO)             	cpy2 R11,R1 ;LOADI2(reg)*
     351/     5D8 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     352/     5E5 : (MACRO)             	Ccall _dubdabx
     353/     5E8 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     354/     5EC : (MACRO)             	cpy2 R12,R0 ;LOADP2(reg)
     355/     5F0 : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     356/     5F4 : (MACRO)             	Ccall _strcpy
     357/     5F7 :                     ;	}
     358/     5F7 :                     L55:
     359/     5F7 :                     ;   return outbfr;
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 7 - 5/16/2013 14:54:56


     360/     5F7 : (MACRO)             	ld2 R15,'O',sp,(4+80);reg:  INDIRP2(addr)
     361/     603 :                     L46:
     362/     603 : (MACRO)             	release 8; release room for outgoing arguments
     363/     60B : (MACRO)             	popr r7
     364/     60F : (MACRO)             	popr r6
     365/     613 : (MACRO)             	popr r1
     366/     617 : (MACRO)             	popr r0
     367/     61B : (MACRO)             	release 62; release room for local variables 
     368/     623 : (MACRO)             	Cretn
     369/     624 :                     
     370/     624 :                     _itoa:
     371/     624 : (MACRO)             	reserve 2; save room for local variables
     372/     626 : (MACRO)             	pushr r0
     373/     62B : (MACRO)             	pushr r1
     374/     630 : (MACRO)             	pushr r6
     375/     635 : (MACRO)             	pushr r7
     376/     63A : (MACRO)             	reserve 4; save room for outgoing arguments
     377/     63E : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     378/     64B : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     379/     658 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     380/     658 :                     ;	unsigned int flag=0;
     381/     658 : (MACRO)             	ld2z R0
     382/     65C :                     ;	char * bptr; bptr=buffer;
     383/     65C : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
     384/     668 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
     385/     675 :                     ;	if (s<0){
     386/     675 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     387/     681 : (MACRO)             	jcI2I r11,0,lbdf,L58; GE is flipped test from LT
     388/     692 :                     ;		*bptr='-';bptr++;
     389/     692 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
     390/     69E : (MACRO)             	ldaD R10,45; reg:acon
     391/     6A4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     392/     6A6 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
     393/     6B2 : (MACRO)             	incm R11,1
     394/     6B3 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
     395/     6C0 :                     ;		n=-s;
     396/     6C0 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     397/     6CC : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     398/     6D5 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
     399/     6D9 :                     ;	} else{
     400/     6D9 : C0 06 EC            	lbr L59
     401/     6DC :                     L58:
     402/     6DC :                     ;		n=s;
     403/     6DC : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     404/     6E8 : (MACRO)             	cpy2 R6,R11 ;LOADU2(reg)*
     405/     6EC :                     ;	}
     406/     6EC :                     L59:
     407/     6EC :                     ;	k=10000;
     408/     6EC : (MACRO)             	ldaD R7,10000; reg:acon
     409/     6F2 : C0 07 79            	lbr L61
     410/     6F5 :                     L60:
     411/     6F5 :                     ;	while(k>0){
     412/     6F5 :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     413/     6F5 : (MACRO)             	ld2z R1
     414/     6F9 : C0 07 09            	lbr L66
     415/     6FC :                     L63:
     416/     6FC :                     L64:
     417/     6FC : (MACRO)             	incm R1,1
     418/     6FD : (MACRO)             	alu2 R6,R6,R7,sm,smb
     419/     709 :                     L66:
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 8 - 5/16/2013 14:54:56


     420/     709 : (MACRO)             	jcU2 r6,r7,lbdf,L63 ;LE is flipped test & operands
     421/     716 :                     ;		if (flag || r>0||k==1){
     422/     716 : (MACRO)             	jnzU2 r0,L70; NE 0
     423/     71E : (MACRO)             	jnzU2 r1,L70; NE 0
     424/     726 : (MACRO)             	jneU2I r7,1,L67; NE
     425/     732 :                     L70:
     426/     732 :                     ;			*bptr=('0'+r);bptr++;
     427/     732 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
     428/     73E : (MACRO)             	ldA2 R10,'O',R1,(48); reg:addr
     429/     746 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     430/     748 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
     431/     754 : (MACRO)             	incm R11,1
     432/     755 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNP2
     433/     762 :                     ;			flag='y';
     434/     762 : (MACRO)             	ldaD R0,121; reg:acon
     435/     768 :                     ;		}
     436/     768 :                     L67:
     437/     768 :                     ;		k=k/10;
     438/     768 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
     439/     76C : (MACRO)             	ldaD R13,10; reg:acon
     440/     772 : (MACRO)             	Ccall _divu2
     441/     775 : (MACRO)             	cpy2 R7,R15 ;LOADU2(reg)*
     442/     779 :                     ;	}
     443/     779 :                     L61:
     444/     779 :                     ;	while(k>0){
     445/     779 : (MACRO)             	jnzU2 r7,L60; NE 0
     446/     781 :                     ;	*bptr='\0';
     447/     781 : (MACRO)             	ld2 R11,'O',sp,(-4+16);reg:  INDIRP2(addr)
     448/     78D : (MACRO)             	ldaD R10,0; reg:acon
     449/     793 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     450/     795 :                     ;	return buffer;
     451/     795 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
     452/     7A1 :                     L57:
     453/     7A1 : (MACRO)             	release 4; release room for outgoing arguments
     454/     7A5 : (MACRO)             	popr r7
     455/     7A9 : (MACRO)             	popr r6
     456/     7AD : (MACRO)             	popr r1
     457/     7B1 : (MACRO)             	popr r0
     458/     7B5 : (MACRO)             	release 2; release room for local variables 
     459/     7B7 : (MACRO)             	Cretn
     460/     7B8 :                     
     461/     7B8 :                     _ltoa:
     462/     7B8 : (MACRO)             	pushr r1
     463/     7BD : (MACRO)             	pushr r6
     464/     7C2 : (MACRO)             	pushr r7
     465/     7C7 : (MACRO)             	reserve 8; save room for outgoing arguments
     466/     7CF : (MACRO)             	cpy4 RL6,RL12; halfbaked
     467/     7D7 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     468/     7D7 :                     ;	char* bptr=buffer;
     469/     7D7 : (MACRO)             	ld2 R1,'O',sp,(4+16);reg:  INDIRP2(addr)
     470/     7E3 :                     ;	if (s<0){
     471/     7E3 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     472/     7EF : (MACRO)             	jcI4 RL6,RL10,lbdf,L72; GE is flipped test from LT
     473/     80B :                     ;		*bptr++='-';
     474/     80B : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     475/     80F : (MACRO)             	cpy2 R1,R11
     476/     813 : (MACRO)             	incm R1,1
     477/     814 : (MACRO)             	ldaD R10,45; reg:acon
     478/     81A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     479/     81C :                     ;		s=-s;
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 9 - 5/16/2013 14:54:56


     480/     81C : (MACRO)             	negI4 RL6,RL6 ;was alu4I RL6,RL6,0,sdi,sdbi
     481/     83C :                     ;	}
     482/     83C :                     L72:
     483/     83C :                     ;	strcpy(bptr,dubdabx(s,bptr,1)); //uses assembler double-dabble routine
     484/     83C : (MACRO)             	cpy4 Rp1p2,RL6; LOADI4*
     485/     844 : (MACRO)             	st2 r1,'O',sp,(4); arg+f**
     486/     851 : (MACRO)             	ldaD R11,1; reg:acon
     487/     857 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     488/     864 : (MACRO)             	Ccall _dubdabx
     489/     867 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     490/     86B : (MACRO)             	cpy2 R12,R1 ;LOADP2(reg)
     491/     86F : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     492/     873 : (MACRO)             	Ccall _strcpy
     493/     876 :                     ;	return buffer;
     494/     876 : (MACRO)             	ld2 R15,'O',sp,(4+16);reg:  INDIRP2(addr)
     495/     882 :                     L71:
     496/     882 : (MACRO)             	release 8; release room for outgoing arguments
     497/     88A : (MACRO)             	popr r7
     498/     88E : (MACRO)             	popr r6
     499/     892 : (MACRO)             	popr r1
     500/     896 : (MACRO)             	Cretn
     501/     897 :                     
     502/     897 :                     _printint:
     503/     897 : (MACRO)             	reserve 12
     504/     8A1 : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     505/     8AE :                     ;void printint(int s){ //print an integer
     506/     8AE :                     ;	itoa(s,buffer);
     507/     8AE : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
     508/     8BA : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     509/     8C2 : (MACRO)             	Ccall _itoa
     510/     8C5 :                     ;	printstr(buffer);
     511/     8C5 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     512/     8CD : (MACRO)             	Ccall _printstr
     513/     8D0 :                     ;}
     514/     8D0 :                     L74:
     515/     8D0 : (MACRO)             	release 12
     516/     8D8 : (MACRO)             	Cretn
     517/     8D9 :                     
     518/     8D9 :                     _printlint:
     519/     8D9 : (MACRO)             	reserve 18
     520/     8E3 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     521/     8F0 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     522/     8FD :                     ;void printlint(long s){ //print a long integer
     523/     8FD :                     ;	printstr(ltoa(s,buffer));
     524/     8FD : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
     525/     90D : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     526/     915 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     527/     922 : (MACRO)             	Ccall _ltoa
     528/     925 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     529/     929 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     530/     92D : (MACRO)             	Ccall _printstr
     531/     930 :                     ;}
     532/     930 :                     L75:
     533/     930 : (MACRO)             	release 18
     534/     938 : (MACRO)             	Cretn
     535/     939 :                     
     536/     939 :                     _printflt:
     537/     939 : (MACRO)             	reserve 28
     538/     943 : (MACRO)             	st2 r12,'O',sp,(30); flag1 
     539/     950 : (MACRO)             	st2 r13,'O',sp,(32); flag1 
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 10 - 5/16/2013 14:54:56


     540/     95D :                     ;void printflt(float s){ //print a float
     541/     95D :                     ;	printstr(ftoa(s,buffer,3));
     542/     95D : (MACRO)             	ld4 Rp1p2,'O',sp,(0+30);INDIRF4(addr)
     543/     96D : (MACRO)             	ldA2 R11,'O',sp,(-22+30); reg:addr
     544/     975 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     545/     982 : (MACRO)             	ldaD R11,3; reg:acon
     546/     988 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     547/     995 : (MACRO)             	Ccall _ftoa
     548/     998 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     549/     99C : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     550/     9A0 : (MACRO)             	Ccall _printstr
     551/     9A3 :                     ;}
     552/     9A3 :                     L76:
     553/     9A3 : (MACRO)             	release 28
     554/     9AB : (MACRO)             	Cretn
     555/     9AC :                     
     556/     9AC :                     _putxn:
     557/     9AC : (MACRO)             	reserve 4
     558/     9B0 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     559/     9BD : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     560/     9C9 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     561/     9D3 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     562/     9D3 :                     ;	if (x<10){
     563/     9D3 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     564/     9DD : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     565/     9E0 : (MACRO)             	jcI2I r11,10,lbdf,L78; GE is flipped test from LT
     566/     9F1 :                     ;		putc(x+'0');
     567/     9F1 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     568/     9FB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     569/     9FE : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     570/     A06 : (MACRO)             	cpy1 R12,R11
     571/     A08 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     572/     A0B : (MACRO)             	Ccall _putc
     573/     A0E :                     ;	} else {
     574/     A0E : C0 0A 36            	lbr L79
     575/     A11 :                     L78:
     576/     A11 :                     ;		putc(x+'A'-10);
     577/     A11 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     578/     A1B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     579/     A1E : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     580/     A26 : (MACRO)             	alu2I R11,R11,10,smi,smbi
     581/     A2E : (MACRO)             	cpy1 R12,R11
     582/     A30 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     583/     A33 : (MACRO)             	Ccall _putc
     584/     A36 :                     ;	}
     585/     A36 :                     L79:
     586/     A36 :                     ;}
     587/     A36 :                     L77:
     588/     A36 : (MACRO)             	release 4
     589/     A3A : (MACRO)             	Cretn
     590/     A3B :                     
     591/     A3B :                     _putx:
     592/     A3B : (MACRO)             	reserve 4
     593/     A3F : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     594/     A4C : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     595/     A58 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     596/     A62 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     597/     A62 :                     ;	putxn(x>>4);
     598/     A62 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     599/     A6C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 11 - 5/16/2013 14:54:56


     600/     A6F : (MACRO)             	shrI2I R11,4
     601/     A8F : (MACRO)             	cpy1 R12,R11
     602/     A91 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     603/     A94 : (MACRO)             	Ccall _putxn
     604/     A97 :                     ;	putxn(x & 0x0F);
     605/     A97 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     606/     AA1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     607/     AA4 : (MACRO)             	alu2I R11,R11,15,ani,ani
     608/     AAC :                     	;removed ?	cpy2 R11,R11
     609/     AAC : (MACRO)             	cpy1 R12,R11
     610/     AAE : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     611/     AB1 : (MACRO)             	Ccall _putxn
     612/     AB4 :                     ;}
     613/     AB4 :                     L80:
     614/     AB4 : (MACRO)             	release 4
     615/     AB8 : (MACRO)             	Cretn
     616/     AB9 :                     
     617/     AB9 :                     _printf:
     618/     AB9 : (MACRO)             	reserve 2; save room for local variables
     619/     ABB : (MACRO)             	pushr r0
     620/     AC0 : (MACRO)             	pushr r1
     621/     AC5 : (MACRO)             	pushr r6
     622/     ACA : (MACRO)             	pushr r7
     623/     ACF : (MACRO)             	reserve 4; save room for outgoing arguments
     624/     AD3 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     625/     AE0 : (MACRO)             	st2 r13,'O',sp,(18); flag2
     626/     AED :                     ;void printf(char *ptr,...){ //limited implementation of printf
     627/     AED :                     ;	int argslot=0;	//used to align longs
     628/     AED : (MACRO)             	ld2z R1
     629/     AF1 :                     ;	int * this=(int *)&ptr;
     630/     AF1 : (MACRO)             	ldA2 R6,'O',sp,(0+16); reg:addr
     631/     AF9 :                     ;	this++; argslot++; //advance argument pointer and slot #
     632/     AF9 : (MACRO)             	incm R6,2
     633/     AFB : (MACRO)             	incm R1,1
     634/     AFC : C0 0E 99            	lbr L83
     635/     AFF :                     L82:
     636/     AFF :                     ;    while(*ptr) {
     637/     AFF :                     ;		c=*ptr++;
     638/     AFF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     639/     B0B : (MACRO)             	cpy2 R10,R11
     640/     B0F : (MACRO)             	incm R10,1
     641/     B10 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     642/     B1D : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     643/     B1F :                     ;		if (c!='%'){
     644/     B1F : (MACRO)             	cpy1 R11,R7
     645/     B21 : (MACRO)             	zExt R11 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     646/     B24 : (MACRO)             	jeqU2I r11,37,L85;EQI2(reg,con)
     647/     B30 :                     ;			putc(c);
     648/     B30 : (MACRO)             	cpy1 R12,R7
     649/     B32 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     650/     B35 : (MACRO)             	Ccall _putc
     651/     B38 :                     ;		} else{
     652/     B38 : C0 0E 99            	lbr L86
     653/     B3B :                     L85:
     654/     B3B :                     ;			c=*ptr++;
     655/     B3B : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     656/     B47 : (MACRO)             	cpy2 R10,R11
     657/     B4B : (MACRO)             	incm R10,1
     658/     B4C : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     659/     B59 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 12 - 5/16/2013 14:54:56


     660/     B5B :                     ;			switch (c){
     661/     B5B : (MACRO)             	cpy1 R0,R7
     662/     B5D : (MACRO)             	zExt R0 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     663/     B60 : (MACRO)             	jcI2I r0,99,lbnf,L106  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     664/     B71 : (MACRO)             	jnI2I r0,108,lbnf,L107; GT reverse  the subtraction
     665/     B82 : (MACRO)             	cpy2 R11,R0
     666/     B86 : (MACRO)             	shl2I R11,1
     667/     B8C : (MACRO)             	ld2 R11,'O',R11,(L108-198);reg:  INDIRP2(addr)
     668/     B98 : (MACRO)             	jumpv r11; JUMPV(reg)
     669/     BA2 :                     L108:
     670/     BA2 : 0C 3E               	dw L92
     671/     BA4 : 0C 00               	dw L90
     672/     BA6 : 0E 88               	dw L87
     673/     BA8 : 0E 38               	dw L101
     674/     BAA : 0E 88               	dw L87
     675/     BAC : 0E 88               	dw L87
     676/     BAE : 0C 00               	dw L90
     677/     BB0 : 0E 88               	dw L87
     678/     BB2 : 0E 88               	dw L87
     679/     BB4 : 0C CE               	dw L94
     680/     BB6 :                     L106:
     681/     BB6 : (MACRO)             	jeqU2I r0,88,L93;EQI2(reg,con)
     682/     BC2 : C0 0E 88            	lbr L87
     683/     BC5 :                     L107:
     684/     BC5 : (MACRO)             	ldaD R11,115; reg:acon
     685/     BCB : (MACRO)             	jeqI2 r0,r11,L91; EQI2(reg,reg)
     686/     BDD : (MACRO)             	jcI2 r0,r11,lbnf,L87; LT=lbnf i.e. subtract B from A and jump if borrow 
     687/     BF1 :                     L110:
     688/     BF1 : (MACRO)             	jeqU2I r0,120,L93;EQI2(reg,con)
     689/     BFD : C0 0E 88            	lbr L87
     690/     C00 :                     L90:
     691/     C00 :                     ;					printint(*this++);
     692/     C00 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     693/     C04 : (MACRO)             	cpy2 R6,R11
     694/     C08 : (MACRO)             	incm R6,2
     695/     C0A : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
     696/     C16 : (MACRO)             	Ccall _printint
     697/     C19 :                     ;					argslot+=1; //next argument slot
     698/     C19 : (MACRO)             	incm R1,1
     699/     C1A :                     ;					break;
     700/     C1A : C0 0E 99            	lbr L88
     701/     C1D :                     L91:
     702/     C1D :                     ;					printstr((char*) *this++);
     703/     C1D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     704/     C21 : (MACRO)             	cpy2 R6,R11
     705/     C25 : (MACRO)             	incm R6,2
     706/     C27 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     707/     C33 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     708/     C37 : (MACRO)             	Ccall _printstr
     709/     C3A :                     ;					argslot+=1; //next argument slot
     710/     C3A : (MACRO)             	incm R1,1
     711/     C3B :                     ;					break;
     712/     C3B : C0 0E 99            	lbr L88
     713/     C3E :                     L92:
     714/     C3E :                     ;					putc((unsigned int) *this++);
     715/     C3E : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     716/     C42 : (MACRO)             	cpy2 R6,R11
     717/     C46 : (MACRO)             	incm R6,2
     718/     C48 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     719/     C54 : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 13 - 5/16/2013 14:54:56


     720/     C56 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     721/     C59 : (MACRO)             	Ccall _putc
     722/     C5C :                     ;					argslot+=1; //next argument slot
     723/     C5C : (MACRO)             	incm R1,1
     724/     C5D :                     ;					break;
     725/     C5D : C0 0E 99            	lbr L88
     726/     C60 :                     L93:
     727/     C60 :                     ;					putx(((unsigned int) *this)>>8);
     728/     C60 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
     729/     C6C : (MACRO)             	shrU2I R11,8
     730/     C9C : (MACRO)             	cpy1 R12,R11
     731/     C9E : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     732/     CA1 : (MACRO)             	Ccall _putx
     733/     CA4 :                     ;					putx(((unsigned int) *this++)&255);
     734/     CA4 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     735/     CA8 : (MACRO)             	cpy2 R6,R11
     736/     CAC : (MACRO)             	incm R6,2
     737/     CAE : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     738/     CBA : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     739/     CC2 : (MACRO)             	cpy1 R12,R11
     740/     CC4 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     741/     CC7 : (MACRO)             	Ccall _putx
     742/     CCA :                     ;					argslot+=1; //next argument slot
     743/     CCA : (MACRO)             	incm R1,1
     744/     CCB :                     ;					break;
     745/     CCB : C0 0E 99            	lbr L88
     746/     CCE :                     L94:
     747/     CCE :                     ;					if (*ptr){ //as long as there's something there
     748/     CCE : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     749/     CDA : (MACRO)             	ld1 R11,'O',R11,0
     750/     CE4 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     751/     CE7 : (MACRO)             	jzU2 r11,L95; EQ 0
     752/     CEF :                     ;						xord=*ptr++;
     753/     CEF : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     754/     CFB : (MACRO)             	cpy2 R10,R11
     755/     CFF : (MACRO)             	incm R10,1
     756/     D00 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     757/     D0D : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     758/     D0F : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     759/     D19 :                     ;						if (argslot&1) {
     760/     D19 : (MACRO)             	alu2I R11,R1,1,ani,ani
     761/     D21 :                     	;removed ?	cpy2 R11,R1
     762/     D21 : (MACRO)             	jzU2 r11,L97; EQ 0
     763/     D29 :                     ;							this++;
     764/     D29 : (MACRO)             	incm R6,2
     765/     D2B :                     ;							argslot++;
     766/     D2B : (MACRO)             	incm R1,1
     767/     D2C :                     ;						}
     768/     D2C :                     L97:
     769/     D2C :                     ;						if(xord=='d'){
     770/     D2C : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     771/     D36 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     772/     D39 : (MACRO)             	jneU2I r11,100,L99; NE
     773/     D45 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     774/     D45 : (MACRO)             	ld4 Rp1p2,'O',R6,0;reg:  INDIRI4(addr)
     775/     D55 : (MACRO)             	Ccall _printlint
     776/     D58 :                     ;							this+=2;				// and advances it 4 bytes
     777/     D58 : (MACRO)             	incm R6,4
     778/     D5C :                     ;						} else{
     779/     D5C : C0 0E 33            	lbr L100
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 14 - 5/16/2013 14:54:56


     780/     D5F :                     L99:
     781/     D5F :                     ;							putx(((unsigned int) *this)>>8);
     782/     D5F : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
     783/     D6B : (MACRO)             	shrU2I R11,8
     784/     D9B : (MACRO)             	cpy1 R12,R11
     785/     D9D : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     786/     DA0 : (MACRO)             	Ccall _putx
     787/     DA3 :                     ;							putx(((unsigned int) *this++)&255);
     788/     DA3 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     789/     DA7 : (MACRO)             	cpy2 R6,R11
     790/     DAB : (MACRO)             	incm R6,2
     791/     DAD : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     792/     DB9 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     793/     DC1 : (MACRO)             	cpy1 R12,R11
     794/     DC3 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     795/     DC6 : (MACRO)             	Ccall _putx
     796/     DC9 :                     ;							putx(((unsigned int) *this)>>8);
     797/     DC9 : (MACRO)             	ld2 R11,'O',R6,0 ;reg:INDIRI2(addr)
     798/     DD5 : (MACRO)             	shrU2I R11,8
     799/     E05 : (MACRO)             	cpy1 R12,R11
     800/     E07 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     801/     E0A : (MACRO)             	Ccall _putx
     802/     E0D :                     ;							putx(((unsigned int) *this++)&255);
     803/     E0D : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     804/     E11 : (MACRO)             	cpy2 R6,R11
     805/     E15 : (MACRO)             	incm R6,2
     806/     E17 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     807/     E23 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     808/     E2B : (MACRO)             	cpy1 R12,R11
     809/     E2D : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     810/     E30 : (MACRO)             	Ccall _putx
     811/     E33 :                     ;						}
     812/     E33 :                     L100:
     813/     E33 :                     ;						argslot+=2;
     814/     E33 : (MACRO)             	incm R1,2
     815/     E35 :                     ;						break;
     816/     E35 : C0 0E 99            	lbr L88
     817/     E38 :                     L95:
     818/     E38 :                     L101:
     819/     E38 :                     ;					if (*ptr){ //as long as there's something there
     820/     E38 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     821/     E44 : (MACRO)             	ld1 R11,'O',R11,0
     822/     E4E : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     823/     E51 : (MACRO)             	jzU2 r11,L102; EQ 0
     824/     E59 :                     ;						if (argslot&1) { //adjust alignment
     825/     E59 : (MACRO)             	alu2I R11,R1,1,ani,ani
     826/     E61 :                     	;removed ?	cpy2 R11,R1
     827/     E61 : (MACRO)             	jzU2 r11,L104; EQ 0
     828/     E69 :                     ;							this++;
     829/     E69 : (MACRO)             	incm R6,2
     830/     E6B :                     ;							argslot++;
     831/     E6B : (MACRO)             	incm R1,1
     832/     E6C :                     ;						}
     833/     E6C :                     L104:
     834/     E6C :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
     835/     E6C : (MACRO)             	ld4 Rp1p2,'O',R6,0;INDIRF4(addr)
     836/     E7C : (MACRO)             	Ccall _printflt
     837/     E7F :                     ;						this+=2;				// and advances it 4 bytes
     838/     E7F : (MACRO)             	incm R6,4
     839/     E83 :                     ;						argslot+=2;
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 15 - 5/16/2013 14:54:56


     840/     E83 : (MACRO)             	incm R1,2
     841/     E85 :                     ;						break;
     842/     E85 : C0 0E 99            	lbr L88
     843/     E88 :                     L102:
     844/     E88 :                     L87:
     845/     E88 :                     ;					putc('%');putc(c);
     846/     E88 : (MACRO)             	ldaD R12,37; reg:acon
     847/     E8E : (MACRO)             	Ccall _putc
     848/     E91 : (MACRO)             	cpy1 R12,R7
     849/     E93 : (MACRO)             	zExt R12 ;CVUI2(reg)*: widen unsigned char to signed int (zero extend)*
     850/     E96 : (MACRO)             	Ccall _putc
     851/     E99 :                     ;			} //switch
     852/     E99 :                     L88:
     853/     E99 :                     ;		} //%
     854/     E99 :                     L86:
     855/     E99 :                     ;	} //while
     856/     E99 :                     L83:
     857/     E99 :                     ;    while(*ptr) {
     858/     E99 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     859/     EA5 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     860/     EA7 : (MACRO)             	jnzU1 r11,L82; NEI2(CVUI2(reg),con0)
     861/     EAB :                     ;} //prtf
     862/     EAB :                     L81:
     863/     EAB : (MACRO)             	release 4; release room for outgoing arguments
     864/     EAF : (MACRO)             	popr r7
     865/     EB3 : (MACRO)             	popr r6
     866/     EB7 : (MACRO)             	popr r1
     867/     EBB : (MACRO)             	popr r0
     868/     EBF : (MACRO)             	release 2; release room for local variables 
     869/     EC1 : (MACRO)             	Cretn
     870/     EC2 :                     
     871/     EC2 :                     _exit:
     872/     EC2 : (MACRO)             	reserve 4
     873/     EC6 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     874/     ED3 :                     ;void exit(int code){
     875/     ED3 :                     ;	printf("exit %d\n",code);
     876/     ED3 : (MACRO)             	ldaD R12,L112; reg:acon
     877/     ED9 : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
     878/     EE5 : (MACRO)             	Ccall _printf
     879/     EE8 :                     L113:
     880/     EE8 :                     ;	while(1);
     881/     EE8 :                     L114:
     882/     EE8 : C0 0E E8            	lbr L113
     883/     EEB :                     ;}
     884/     EEB :                     L111:
     885/     EEB : (MACRO)             	release 4
     886/     EEF : (MACRO)             	Cretn
     887/     EF0 :                     
     888/     EF0 :                     _memcmp:
     889/     EF0 : (MACRO)             	pushr r0
     890/     EF5 : (MACRO)             	pushr r1
     891/     EFA : (MACRO)             	pushr r6
     892/     EFF : (MACRO)             	pushr r7
     893/     F04 : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
     894/     F10 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     895/     F10 :                     ;    int v = 0;
     896/     F10 : (MACRO)             	ld2z R6
     897/     F14 :                     ;    p1 = (unsigned char *)Ptr1;
     898/     F14 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
     899/     F18 :                     ;    p2 = (unsigned char *)Ptr2;
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 16 - 5/16/2013 14:54:56


     900/     F18 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
     901/     F1C : C0 0F 57            	lbr L118
     902/     F1F :                     L117:
     903/     F1F :                     ;    while(Count-- > 0 && v == 0) {
     904/     F1F :                     ;        v = *(p1++) - *(p2++);
     905/     F1F : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     906/     F23 : (MACRO)             	cpy2 R1,R11
     907/     F27 : (MACRO)             	incm R1,1
     908/     F28 : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
     909/     F2C : (MACRO)             	cpy2 R0,R10
     910/     F30 : (MACRO)             	incm R0,1
     911/     F31 : (MACRO)             	ld1 R11,'O',R11,0
     912/     F3B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     913/     F3E : (MACRO)             	ld1 R10,'O',R10,0
     914/     F48 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     915/     F4B : (MACRO)             	alu2 R6,R11,R10,sm,smb
     916/     F57 :                     ;    }
     917/     F57 :                     L118:
     918/     F57 :                     ;    while(Count-- > 0 && v == 0) {
     919/     F57 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     920/     F5B : (MACRO)             	cpy2 R7,R11
     921/     F5F : (MACRO)             	decm R7,1
     922/     F60 : (MACRO)             	jzU2 r11,L120; EQ 0
     923/     F68 : (MACRO)             	jzU2 r6,L117; EQ 0
     924/     F70 :                     L120:
     925/     F70 :                     ;    return v;
     926/     F70 : (MACRO)             	cpy2 R15,R6 ;LOADI2(reg)*
     927/     F74 :                     L116:
     928/     F74 : (MACRO)             	popr r7
     929/     F78 : (MACRO)             	popr r6
     930/     F7C : (MACRO)             	popr r1
     931/     F80 : (MACRO)             	popr r0
     932/     F84 : (MACRO)             	Cretn
     933/     F85 :                     
     934/     F85 :                     _memcpy:
     935/     F85 : (MACRO)             	pushr r1
     936/     F8A : (MACRO)             	pushr r6
     937/     F8F : (MACRO)             	pushr r7
     938/     F94 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
     939/     FA0 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     940/     FA0 :                     ;        char* dst8 = (char*)dest;
     941/     FA0 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
     942/     FA4 :                     ;        char* src8 = (char*)src;
     943/     FA4 : (MACRO)             	cpy2 R1,R13 ;LOADP2(reg)
     944/     FA8 : C0 0F C1            	lbr L123
     945/     FAB :                     L122:
     946/     FAB :                     ;        while (count--) {
     947/     FAB :                     ;            *dst8++ = *src8++;
     948/     FAB : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     949/     FAF : (MACRO)             	cpy2 R6,R11
     950/     FB3 : (MACRO)             	incm R6,1
     951/     FB4 : (MACRO)             	cpy2 R10,R1 ;LOADP2(reg)
     952/     FB8 : (MACRO)             	cpy2 R1,R10
     953/     FBC : (MACRO)             	incm R1,1
     954/     FBD : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     955/     FBF : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     956/     FC1 :                     ;        }
     957/     FC1 :                     L123:
     958/     FC1 :                     ;        while (count--) {
     959/     FC1 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 17 - 5/16/2013 14:54:56


     960/     FC5 : (MACRO)             	cpy2 R7,R11
     961/     FC9 : (MACRO)             	decm R7,1
     962/     FCA : (MACRO)             	jnzU2 r11,L122; NE 0
     963/     FD2 :                     ;        return dest;
     964/     FD2 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     965/     FD6 :                     L121:
     966/     FD6 : (MACRO)             	popr r7
     967/     FDA : (MACRO)             	popr r6
     968/     FDE : (MACRO)             	popr r1
     969/     FE2 : (MACRO)             	Cretn
     970/     FE3 :                     
     971/     FE3 :                     _memset:
     972/     FE3 : (MACRO)             	pushr r6
     973/     FE8 : (MACRO)             	pushr r7
     974/     FED : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
     975/     FF9 :                     ;{
     976/     FF9 :                     ;    unsigned char* p=s;
     977/     FF9 : (MACRO)             	cpy2 R6,R12 ;LOADP2(reg)
     978/     FFD : C0 10 0F            	lbr L127
     979/    1000 :                     L126:
     980/    1000 :                     ;        *p++ = (unsigned char)c;
     981/    1000 : (MACRO)             	cpy2 R11,R6 ;LOADP2(reg)
     982/    1004 : (MACRO)             	cpy2 R6,R11
     983/    1008 : (MACRO)             	incm R6,1
     984/    1009 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
     985/    100D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     986/    100F :                     L127:
     987/    100F :                     ;    while(n--)
     988/    100F : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     989/    1013 : (MACRO)             	cpy2 R7,R11
     990/    1017 : (MACRO)             	decm R7,1
     991/    1018 : (MACRO)             	jnzU2 r11,L126; NE 0
     992/    1020 :                     ;    return s;
     993/    1020 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
     994/    1024 :                     L125:
     995/    1024 : (MACRO)             	popr r7
     996/    1028 : (MACRO)             	popr r6
     997/    102C : (MACRO)             	Cretn
     998/    102D :                     
     999/    102D :                     _x:
    1000/    102D : 00 00 00 00 00 00   	db 16 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 
    1001/    103D :                     _rows:
    1002/    103D : 00 00 00 00 00 00   	db 16 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 
    1003/    104D :                     _down:
    1004/    104D : 00 00 00 00 00 00   	db 30 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
    1005/    106B :                     _up:
    1006/    106B : 00 00 00 00 00 00   	db 30 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
    1007/    1089 :                     L112:
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 18 - 5/16/2013 14:54:56


    1008/    1089 : 65                  	db 101
    1009/    108A : 78                  	db 120
    1010/    108B : 69                  	db 105
    1011/    108C : 74                  	db 116
    1012/    108D : 20                  	db 32
    1013/    108E : 25                  	db 37
    1014/    108F : 64                  	db 100
    1015/    1090 : 0A                  	db 10
    1016/    1091 : 00                  	db 0
    1017/    1092 :                     	align 4
    1018/    1094 :                     L50:
    1019/    1094 : BF 80 00 00         	dd 0xbf800000
    1020/    1098 :                     	align 4
    1021/    1098 :                     L49:
    1022/    1098 : 00 00 00 00         	dd 0x0
    1023/    109C :                     L32:
    1024/    109C : 0A                  	db 10
    1025/    109D : 00                  	db 0
    1026/    109E :                     L31:
    1027/    109E : 25                  	db 37
    1028/    109F : 63                  	db 99
    1029/    10A0 : 00                  	db 0
    1030/    10A1 :                     L13:
    1031/    10A1 : 54                  	db 84
    1032/    10A2 : 6F                  	db 111
    1033/    10A3 : 6F                  	db 111
    1034/    10A4 : 6B                  	db 107
    1035/    10A5 : 20                  	db 32
    1036/    10A6 : 61                  	db 97
    1037/    10A7 : 62                  	db 98
    1038/    10A8 : 6F                  	db 111
    1039/    10A9 : 75                  	db 117
    1040/    10AA : 74                  	db 116
    1041/    10AB : 20                  	db 32
    1042/    10AC : 31                  	db 49
    1043/    10AD : 37                  	db 55
    1044/    10AE : 20                  	db 32
    1045/    10AF : 73                  	db 115
    1046/    10B0 : 65                  	db 101
    1047/    10B1 : 63                  	db 99
    1048/    10B2 : 20                  	db 32
    1049/    10B3 : 6F                  	db 111
    1050/    10B4 : 6E                  	db 110
    1051/    10B5 : 20                  	db 32
    1052/    10B6 : 31                  	db 49
    1053/    10B7 : 2E                  	db 46
    1054/    10B8 : 36                  	db 54
    1055/    10B9 : 6D                  	db 109
    1056/    10BA : 68                  	db 104
    1057/    10BB : 7A                  	db 122
    1058/    10BC : 20                  	db 32
    1059/    10BD : 65                  	db 101
    1060/    10BE : 6C                  	db 108
    1061/    10BF : 66                  	db 102
    1062/    10C0 : 20                  	db 32
    1063/    10C1 : 77                  	db 119
    1064/    10C2 : 69                  	db 105
    1065/    10C3 : 74                  	db 116
    1066/    10C4 : 68                  	db 104
    1067/    10C5 : 20                  	db 32
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 19 - 5/16/2013 14:54:56


    1068/    10C6 : 53                  	db 83
    1069/    10C7 : 74                  	db 116
    1070/    10C8 : 20                  	db 32
    1071/    10C9 : 4A                  	db 74
    1072/    10CA : 75                  	db 117
    1073/    10CB : 64                  	db 100
    1074/    10CC : 79                  	db 121
    1075/    10CD : 27                  	db 39
    1076/    10CE : 73                  	db 115
    1077/    10CF : 20                  	db 32
    1078/    10D0 : 63                  	db 99
    1079/    10D1 : 6F                  	db 111
    1080/    10D2 : 6D                  	db 109
    1081/    10D3 : 70                  	db 112
    1082/    10D4 : 69                  	db 105
    1083/    10D5 : 6C                  	db 108
    1084/    10D6 : 65                  	db 101
    1085/    10D7 : 72                  	db 114
    1086/    10D8 : 28                  	db 40
    1087/    10D9 : 66                  	db 102
    1088/    10DA : 72                  	db 114
    1089/    10DB : 6F                  	db 111
    1090/    10DC : 6D                  	db 109
    1091/    10DD : 20                  	db 32
    1092/    10DE : 72                  	db 114
    1093/    10DF : 75                  	db 117
    1094/    10E0 : 6E                  	db 110
    1095/    10E1 : 31                  	db 49
    1096/    10E2 : 38                  	db 56
    1097/    10E3 : 30                  	db 48
    1098/    10E4 : 32                  	db 50
    1099/    10E5 : 20                  	db 32
    1100/    10E6 : 74                  	db 116
    1101/    10E7 : 6F                  	db 111
    1102/    10E8 : 20                  	db 32
    1103/    10E9 : 39                  	db 57
    1104/    10EA : 32                  	db 50
    1105/    10EB : 6E                  	db 110
    1106/    10EC : 64                  	db 100
    1107/    10ED : 20                  	db 32
    1108/    10EE : 73                  	db 115
    1109/    10EF : 6F                  	db 111
    1110/    10F0 : 6C                  	db 108
    1111/    10F1 : 75                  	db 117
    1112/    10F2 : 74                  	db 116
    1113/    10F3 : 69                  	db 105
    1114/    10F4 : 6F                  	db 111
    1115/    10F5 : 6E                  	db 110
    1116/    10F6 : 29                  	db 41
    1117/    10F7 : 0A                  	db 10
    1118/    10F8 : 00                  	db 0
    1119/    10F9 :                     L12:
    1120/    10F9 : 54                  	db 84
    1121/    10FA : 6F                  	db 111
    1122/    10FB : 6F                  	db 111
    1123/    10FC : 6B                  	db 107
    1124/    10FD : 20                  	db 32
    1125/    10FE : 61                  	db 97
    1126/    10FF : 62                  	db 98
    1127/    1100 : 6F                  	db 111
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 20 - 5/16/2013 14:54:56


    1128/    1101 : 75                  	db 117
    1129/    1102 : 74                  	db 116
    1130/    1103 : 20                  	db 32
    1131/    1104 : 32                  	db 50
    1132/    1105 : 32                  	db 50
    1133/    1106 : 20                  	db 32
    1134/    1107 : 73                  	db 115
    1135/    1108 : 65                  	db 101
    1136/    1109 : 63                  	db 99
    1137/    110A : 20                  	db 32
    1138/    110B : 6F                  	db 111
    1139/    110C : 6E                  	db 110
    1140/    110D : 20                  	db 32
    1141/    110E : 31                  	db 49
    1142/    110F : 2E                  	db 46
    1143/    1110 : 36                  	db 54
    1144/    1111 : 6D                  	db 109
    1145/    1112 : 68                  	db 104
    1146/    1113 : 7A                  	db 122
    1147/    1114 : 20                  	db 32
    1148/    1115 : 65                  	db 101
    1149/    1116 : 6C                  	db 108
    1150/    1117 : 66                  	db 102
    1151/    1118 : 20                  	db 32
    1152/    1119 : 77                  	db 119
    1153/    111A : 69                  	db 105
    1154/    111B : 74                  	db 116
    1155/    111C : 68                  	db 104
    1156/    111D : 20                  	db 32
    1157/    111E : 42                  	db 66
    1158/    111F : 69                  	db 105
    1159/    1120 : 72                  	db 114
    1160/    1121 : 74                  	db 116
    1161/    1122 : 68                  	db 104
    1162/    1123 : 64                  	db 100
    1163/    1124 : 61                  	db 97
    1164/    1125 : 79                  	db 121
    1165/    1126 : 20                  	db 32
    1166/    1127 : 63                  	db 99
    1167/    1128 : 6F                  	db 111
    1168/    1129 : 6D                  	db 109
    1169/    112A : 70                  	db 112
    1170/    112B : 69                  	db 105
    1171/    112C : 6C                  	db 108
    1172/    112D : 65                  	db 101
    1173/    112E : 72                  	db 114
    1174/    112F : 0A                  	db 10
    1175/    1130 : 00                  	db 0
    1176/    1131 :                     L11:
    1177/    1131 : 2E                  	db 46
    1178/    1132 : 2E                  	db 46
    1179/    1133 : 2E                  	db 46
    1180/    1134 : 61                  	db 97
    1181/    1135 : 6E                  	db 110
    1182/    1136 : 64                  	db 100
    1183/    1137 : 2E                  	db 46
    1184/    1138 : 2E                  	db 46
    1185/    1139 : 2E                  	db 46
    1186/    113A : 0A                  	db 10
    1187/    113B : 38                  	db 56
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 21 - 5/16/2013 14:54:56


    1188/    113C : 34                  	db 52
    1189/    113D : 31                  	db 49
    1190/    113E : 33                  	db 51
    1191/    113F : 36                  	db 54
    1192/    1140 : 32                  	db 50
    1193/    1141 : 37                  	db 55
    1194/    1142 : 35                  	db 53
    1195/    1143 : 20                  	db 32
    1196/    1144 : 69                  	db 105
    1197/    1145 : 73                  	db 115
    1198/    1146 : 20                  	db 32
    1199/    1147 : 6C                  	db 108
    1200/    1148 : 61                  	db 97
    1201/    1149 : 73                  	db 115
    1202/    114A : 74                  	db 116
    1203/    114B : 0A                  	db 10
    1204/    114C : 54                  	db 84
    1205/    114D : 6F                  	db 111
    1206/    114E : 6F                  	db 111
    1207/    114F : 6B                  	db 107
    1208/    1150 : 20                  	db 32
    1209/    1151 : 61                  	db 97
    1210/    1152 : 62                  	db 98
    1211/    1153 : 6F                  	db 111
    1212/    1154 : 75                  	db 117
    1213/    1155 : 74                  	db 116
    1214/    1156 : 20                  	db 32
    1215/    1157 : 32                  	db 50
    1216/    1158 : 35                  	db 53
    1217/    1159 : 20                  	db 32
    1218/    115A : 73                  	db 115
    1219/    115B : 65                  	db 101
    1220/    115C : 63                  	db 99
    1221/    115D : 20                  	db 32
    1222/    115E : 6F                  	db 111
    1223/    115F : 6E                  	db 110
    1224/    1160 : 20                  	db 32
    1225/    1161 : 31                  	db 49
    1226/    1162 : 2E                  	db 46
    1227/    1163 : 36                  	db 54
    1228/    1164 : 6D                  	db 109
    1229/    1165 : 68                  	db 104
    1230/    1166 : 7A                  	db 122
    1231/    1167 : 20                  	db 32
    1232/    1168 : 65                  	db 101
    1233/    1169 : 6C                  	db 108
    1234/    116A : 66                  	db 102
    1235/    116B : 20                  	db 32
    1236/    116C : 77                  	db 119
    1237/    116D : 69                  	db 105
    1238/    116E : 74                  	db 116
    1239/    116F : 68                  	db 104
    1240/    1170 : 20                  	db 32
    1241/    1171 : 43                  	db 67
    1242/    1172 : 68                  	db 104
    1243/    1173 : 72                  	db 114
    1244/    1174 : 69                  	db 105
    1245/    1175 : 73                  	db 115
    1246/    1176 : 74                  	db 116
    1247/    1177 : 6D                  	db 109
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 22 - 5/16/2013 14:54:56


    1248/    1178 : 61                  	db 97
    1249/    1179 : 73                  	db 115
    1250/    117A : 20                  	db 32
    1251/    117B : 63                  	db 99
    1252/    117C : 6F                  	db 111
    1253/    117D : 6D                  	db 109
    1254/    117E : 70                  	db 112
    1255/    117F : 69                  	db 105
    1256/    1180 : 6C                  	db 108
    1257/    1181 : 65                  	db 101
    1258/    1182 : 72                  	db 114
    1259/    1183 : 0A                  	db 10
    1260/    1184 : 00                  	db 0
    1261/    1185 :                     L2:
    1262/    1185 : 67                  	db 103
    1263/    1186 : 65                  	db 101
    1264/    1187 : 6E                  	db 110
    1265/    1188 : 65                  	db 101
    1266/    1189 : 72                  	db 114
    1267/    118A : 61                  	db 97
    1268/    118B : 74                  	db 116
    1269/    118C : 65                  	db 101
    1270/    118D : 73                  	db 115
    1271/    118E : 20                  	db 32
    1272/    118F : 39                  	db 57
    1273/    1190 : 32                  	db 50
    1274/    1191 : 20                  	db 32
    1275/    1192 : 73                  	db 115
    1276/    1193 : 6F                  	db 111
    1277/    1194 : 6C                  	db 108
    1278/    1195 : 75                  	db 117
    1279/    1196 : 74                  	db 116
    1280/    1197 : 69                  	db 105
    1281/    1198 : 6F                  	db 111
    1282/    1199 : 6E                  	db 110
    1283/    119A : 73                  	db 115
    1284/    119B : 2E                  	db 46
    1285/    119C : 20                  	db 32
    1286/    119D : 0A                  	db 10
    1287/    119E : 31                  	db 49
    1288/    119F : 35                  	db 53
    1289/    11A0 : 38                  	db 56
    1290/    11A1 : 36                  	db 54
    1291/    11A2 : 33                  	db 51
    1292/    11A3 : 37                  	db 55
    1293/    11A4 : 32                  	db 50
    1294/    11A5 : 34                  	db 52
    1295/    11A6 : 20                  	db 32
    1296/    11A7 : 69                  	db 105
    1297/    11A8 : 73                  	db 115
    1298/    11A9 : 20                  	db 32
    1299/    11AA : 66                  	db 102
    1300/    11AB : 69                  	db 105
    1301/    11AC : 72                  	db 114
    1302/    11AD : 73                  	db 115
    1303/    11AE : 74                  	db 116
    1304/    11AF : 0A                  	db 10
    1305/    11B0 : 0A                  	db 10
    1306/    11B1 : 00                  	db 0
    1307/    11B2 :                     	include lcc1802Epilofl.inc
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 23 - 5/16/2013 14:54:56


(1)    1/    11B2 :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    11B2 :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    11B2 :                     ;this is the version published with the lcc1802121229 release
(1)    4/    11B2 :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    11B2 :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    11B2 :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    11B2 :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    11B2 :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    11B2 :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    11B2 :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    11B2 :                     ;feb 27 changed stack to start at 7fff
(1)   12/    11B2 :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    11B2 :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    11B2 :                     ;april 4 adding digit count argument to dubdabx
(1)   15/    11B2 :                     
(1)   16/    11B2 : =EH                 rwork	equ	memAddr	;work register
(1)   17/    11B2 :                     lcc1802init:	
(1)   18/    11B2 : (MACRO)             	ldiReg	RCALL,_call
(1)   19/    11B8 : (MACRO)             	ldiReg	RRET,_return
(1)   20/    11BE : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   21/    11C4 : E2                  	sex	SP
(1)   22/    11C5 : (MACRO)             	ldiReg	RPC,$$_00000
(1)   23/    11CB : D3                  	sep	RPC
(1)   24/    11CC :                     $$_00000:
(1)   25/    11CC : (MACRO)             	Ccall _main	;call the main routine
(1)   26/    11CF : C0 11 CF            $$_die:	lbr	$$_die		;loop here when main returns
(1)   27/    11D2 : DE AD               	db	0xde,0xad
(1)   28/    11D4 :                     
(1)   29/    11D4 :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   30/    11D4 :                     _setqOn:
(1)   31/    11D4 : 7B                  	seq
(1)   32/    11D5 : (MACRO)             	Cretn
(1)   33/    11D6 :                     _setqOff:
(1)   34/    11D6 : 7A                  	req
(1)   35/    11D7 : (MACRO)             	Cretn
(1)   36/    11D8 :                     
(1)   37/    11D8 :                     _modU2:	;16 bit unsigned remainder
(1)   38/    11D8 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   39/    11D8 : (MACRO)                 Ccall _divU2
(1)   40/    11DB : 8D                      glo regArg2
(1)   41/    11DC : AF                      plo retVal
(1)   42/    11DD : 9D                      ghi regArg2
(1)   43/    11DE : BF                      phi retVal
(1)   44/    11DF : (MACRO)                 Cretn
(1)   45/    11E0 :                         
(1)   46/    11E0 :                     _modI2:	;16 bit signed remainder
(1)   47/    11E0 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   48/    11E0 : (MACRO)                 Ccall _divI2
(1)   49/    11E3 : 8D                      glo regArg2
(1)   50/    11E4 : AF                      plo retVal
(1)   51/    11E5 : 9D                      ghi regArg2
(1)   52/    11E6 : BF                      phi retVal
(1)   53/    11E7 : (MACRO)                 Cretn
(1)   54/    11E8 :                     
(1)   55/    11E8 :                     _out4:	
(1)   56/    11E8 : 8C                  	glo	regArg1
(1)   57/    11E9 : 22                  	dec	sp
(1)   58/    11EA : 52                  	str	sp
(1)   59/    11EB : 64                  	out	4
(1)   60/    11EC : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 24 - 5/16/2013 14:54:56


(1)   61/    11ED :                     
(1)   62/    11ED :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   63/    11ED :                     	align 256
(1)   64/    1200 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   65/    1200 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   66/    1200 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   67/    1200 : D3                  	sep     R3 ;go to subroutine
(1)   68/    1201 : E2                  _call	sex	SP ;make sure X=SP
(1)   69/    1202 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   70/    1203 : 22                  	dec	sp
(1)   71/    1204 : 73                  	stxd
(1)   72/    1205 : 96                  	ghi	retAddr
(1)   73/    1206 : 52                  	str	sp	
(1)   74/    1207 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   75/    1208 : A6                  	plo	retAddr
(1)   76/    1209 : 93                  	ghi	RPC
(1)   77/    120A : B6                  	phi	retAddr
(1)   78/    120B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   79/    120C : B3                  	phi	RPC
(1)   80/    120D : 46                  	lda	retAddr
(1)   81/    120E : A3                  	plo	RPC
(1)   82/    120F : 30 00               	br	_call-1
(1)   83/    1211 :                     
(1)   84/    1211 :                     ;Standard subroutine return 
(1)   85/    1211 : D3                  	sep	RPC	;return to the original program
(1)   86/    1212 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   87/    1213 : A3                  	plo	RPC
(1)   88/    1214 : 96                  	ghi	retAddr
(1)   89/    1215 : B3                  	phi	RPC
(1)   90/    1216 : 42                  	lda	SP	;pick up old return address
(1)   91/    1217 : B6                  	phi	retAddr
(1)   92/    1218 : 42                  	lda	SP
(1)   93/    1219 : A6                  	plo	retAddr
(1)   94/    121A : 30 11               	br	_return-1
(1)   95/    121C :                     
(1)   96/    121C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   97/    121C : F8 24               	ldi	(100-15-10-2)/2
(1)   98/    121E : FF 01               $$mslp:	smi	1
(1)   99/    1220 : 3A 1E               	bnz	$$mslp
(1)  100/    1222 : (MACRO)             	Cretn
(1)  101/    1223 :                     
(1)  102/    1223 :                     
(1)  103/    1223 :                     	
(1)  104/    1223 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  105/    1223 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  106/    1223 :                     _mulu2:		
(1)  107/    1223 : 22                      dec sp
(1)  108/    1224 : F8 10                   ldi 16
(1)  109/    1226 : AE                      plo	rwork	;bit count
(1)  110/    1227 : F8 00                   ldi 0
(1)  111/    1229 : BF                      phi	retVal	;quotient
(1)  112/    122A : AF                      plo retVal
(1)  113/    122B :                     $$MultLoop16_16:
(1)  114/    122B : 9C                      ghi regArg1
(1)  115/    122C : F6                      shr
(1)  116/    122D : BC                      phi regArg1
(1)  117/    122E : 8C                      glo regArg1
(1)  118/    122F : 76                      shrc
(1)  119/    1230 : AC                      plo regArg1
(1)  120/    1231 : 3B 3D                   bnf $$MultSkip16_16
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 25 - 5/16/2013 14:54:56


(1)  121/    1233 : 8D                      glo regArg2
(1)  122/    1234 : 52                      str sp
(1)  123/    1235 : 8F                      glo retVal
(1)  124/    1236 : F4                      add 
(1)  125/    1237 : AF                      plo retVal
(1)  126/    1238 : 9D                      ghi regArg2
(1)  127/    1239 : 52                      str sp
(1)  128/    123A : 9F                      ghi retVal
(1)  129/    123B : 74                      adc
(1)  130/    123C : BF                      phi retVal
(1)  131/    123D :                     $$MultSkip16_16:
(1)  132/    123D : 8D                      glo regArg2
(1)  133/    123E : FE                      shl
(1)  134/    123F : AD                      plo regArg2
(1)  135/    1240 : 9D                      ghi regArg2
(1)  136/    1241 : 7E                      shlc
(1)  137/    1242 : BD                      phi regArg2
(1)  138/    1243 : 2E                      dec rwork
(1)  139/    1244 : 8E                      glo rwork
(1)  140/    1245 : 3A 2B                   bnz $$MultLoop16_16
(1)  141/    1247 : 12                      inc sp
(1)  142/    1248 : D5                      sep 5
(1)  143/    1249 :                     
(1)  144/    1249 :                     
(1)  145/    1249 :                     _divU2:
(1)  146/    1249 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  147/    1249 :                     	; This is really an unsigned 23 bit divide
(1)  148/    1249 :                     	;thanks to Ted Rossin
(1)  149/    1249 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  150/    1249 : 22                      dec sp
(1)  151/    124A : F8 10                   ldi 16
(1)  152/    124C : AE                      plo rwork
(1)  153/    124D : F8 00                   ldi 0
(1)  154/    124F : BF                      phi retVal
(1)  155/    1250 : AF                      plo retVal
(1)  156/    1251 : BE                      phi rwork
(1)  157/    1252 :                     $$DivLoop16_16:
(1)  158/    1252 : 8C                      glo regArg1
(1)  159/    1253 : FE                      shl
(1)  160/    1254 : AC                      plo regArg1
(1)  161/    1255 : 9C                      ghi regArg1
(1)  162/    1256 : 7E                      shlc
(1)  163/    1257 : BC                      phi regArg1
(1)  164/    1258 : 8F                      glo retVal
(1)  165/    1259 : 7E                      shlc
(1)  166/    125A : AF                      plo retVal
(1)  167/    125B : 9F                      ghi retVal
(1)  168/    125C : 7E                      shlc
(1)  169/    125D : BF                      phi retVal
(1)  170/    125E : 9E                      ghi rwork
(1)  171/    125F : 7E                      shlc
(1)  172/    1260 : BE                      phi rwork
(1)  173/    1261 : 3B 73                   bnf $$DivSub16_16
(1)  174/    1263 : 8D                      glo regArg2
(1)  175/    1264 : 52                      str sp
(1)  176/    1265 : 8F                      glo retVal
(1)  177/    1266 : F4                      add 
(1)  178/    1267 : AF                      plo retVal
(1)  179/    1268 : 9D                      ghi regArg2
(1)  180/    1269 : 52                      str sp
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 26 - 5/16/2013 14:54:56


(1)  181/    126A : 9F                      ghi retVal
(1)  182/    126B : 74                      adc 
(1)  183/    126C : BF                      phi retVal
(1)  184/    126D : 9E                      ghi rwork
(1)  185/    126E : 7C 00                   adci 0
(1)  186/    1270 : BE                      phi rwork
(1)  187/    1271 : 30 81                   br $$DivSkip16_16
(1)  188/    1273 :                     $$DivSub16_16:
(1)  189/    1273 : 8D                      glo regArg2
(1)  190/    1274 : 52                      str sp
(1)  191/    1275 : 8F                      glo retVal
(1)  192/    1276 : F7                      sm
(1)  193/    1277 : AF                      plo retVal
(1)  194/    1278 : 9D                      ghi regArg2
(1)  195/    1279 : 52                      str sp
(1)  196/    127A : 9F                      ghi retVal
(1)  197/    127B : 77                      smb 
(1)  198/    127C : BF                      phi retVal
(1)  199/    127D : 9E                      ghi rwork
(1)  200/    127E : 7F 00                   smbi 0
(1)  201/    1280 : BE                      phi rwork 
(1)  202/    1281 :                     $$DivSkip16_16:
(1)  203/    1281 : FE                      shl
(1)  204/    1282 : 33 88                   bdf $$DivSkipClear16_16
(1)  205/    1284 :                     $$DivSetBit16_16:
(1)  206/    1284 : 8C                      glo regArg1
(1)  207/    1285 : F9 01                   ori  0x01
(1)  208/    1287 : AC                      plo regArg1
(1)  209/    1288 :                     $$DivSkipClear16_16:
(1)  210/    1288 : 2E                      dec rwork
(1)  211/    1289 : 8E                      glo rwork
(1)  212/    128A : 3A 52                   bnz $$DivLoop16_16
(1)  213/    128C : 9E                      ghi rwork
(1)  214/    128D : FE                      shl
(1)  215/    128E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  216/    1290 : 8D                      glo regArg2
(1)  217/    1291 : 52                      str sp
(1)  218/    1292 : 8F                      glo retVal
(1)  219/    1293 : F4                      add
(1)  220/    1294 : AF                      plo retVal
(1)  221/    1295 : 9D                      ghi regArg2
(1)  222/    1296 : 52                      str sp
(1)  223/    1297 : 9F                      ghi retVal
(1)  224/    1298 : 74                      adc
(1)  225/    1299 : BF                      phi retVal
(1)  226/    129A :                     $$DivSkipFinalAdd16_16:
(1)  227/    129A : 12                      inc sp
(1)  228/    129B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  229/    129B : 8F                      glo retVal
(1)  230/    129C : AD                      plo regArg2
(1)  231/    129D : 9F                      ghi retVal
(1)  232/    129E : BD                      phi regArg2
(1)  233/    129F : 8C                      glo regArg1
(1)  234/    12A0 : AF                      plo retVal
(1)  235/    12A1 : 9C                      ghi regArg1
(1)  236/    12A2 : BF                      phi retVal
(1)  237/    12A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  238/    12A3 : D5                      sep 5
(1)  239/    12A4 :                     
(1)  240/    12A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 27 - 5/16/2013 14:54:56


(1)  241/    12A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  242/    12A4 :                     _divI2:
(1)  243/    12A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  244/    12A4 : 22                      dec	sp	;leave a work area available
(1)  245/    12A5 : 9C                      ghi regArg1
(1)  246/    12A6 : 52                      str sp	;save the sign of the 1st arg
(1)  247/    12A7 : FE                      shl
(1)  248/    12A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  249/    12AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  250/    12B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  251/    12B3 : 9D                      ghi regArg2
(1)  252/    12B4 : F3                      xor	
(1)  253/    12B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  254/    12B6 : 9D                      ghi regArg2
(1)  255/    12B7 : FE                      shl
(1)  256/    12B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  257/    12BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  258/    12C3 :                     $$pos2: ; both args now +v
(1)  259/    12C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  260/    12C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  261/    12C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  262/    12C7 : FE                      shl
(1)  263/    12C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  264/    12CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  265/    12D3 :                     $$done:
(1)  266/    12D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  267/    12D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  268/    12D4 :                     
(1)  269/    12D4 :                     
(1)  270/    12D4 :                     	align 256    ;32 bit operations follow
(1)  271/    1300 :                     _divu4:
(1)  272/    1300 :                     ;This is an unsigned 32 bit restoring division
(1)  273/    1300 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  274/    1300 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  275/    1300 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  276/    1300 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  277/    1300 :                     
(1)  278/    1300 : F8 20               	ldi 32		;set loop count
(1)  279/    1302 : AE                  	plo memaddr	;in temp register
(1)  280/    1303 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  281/    130F :                     $$loop:
(1)  282/    130F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  283/    131B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  284/    1327 :                     
(1)  285/    1327 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  286/    133D :                     
(1)  287/    133D : FA 80               	ani 0x80	;check the top bit
(1)  288/    133F : 32 5D               	bz $$norestore	;if it's 0
(1)  289/    1341 : 89                  		glo RL8
(1)  290/    1342 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  291/    1344 : A9                  		plo RL8
(1)  292/    1345 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  293/    135B : 30 61               	br $$endlp 	;else
(1)  294/    135D :                     $$norestore:
(1)  295/    135D : 89                  		glo RL8
(1)  296/    135E : F9 01               		ori 1	;turn on the bottom bit
(1)  297/    1360 : A9                  		plo RL8
(1)  298/    1361 :                     	;end if
(1)  299/    1361 :                     $$endlp:
(1)  300/    1361 : 2E                  	dec memaddr	;check the cycle count
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 28 - 5/16/2013 14:54:56


(1)  301/    1362 : 8E                  	glo memaddr
(1)  302/    1363 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  303/    1365 :                     	
(1)  304/    1365 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  305/    1366 :                     		
(1)  306/    1366 :                     
(1)  307/    1366 :                     _mulu4:
(1)  308/    1366 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  309/    1366 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  310/    1366 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  311/    1366 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  312/    1366 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  313/    1366 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  314/    1366 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  315/    1366 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  316/    1366 :                     	;for 10 we subtract and shift
(1)  317/    1366 :                     	;for 00 and 11 we just shift
(1)  318/    1366 :                     
(1)  319/    1366 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  320/    1372 : F8 20                   ldi 32
(1)  321/    1374 : AE                      plo memaddr		;cycle count
(1)  322/    1375 : FC 00                   adi 0		;clear df
(1)  323/    1377 :                     $$mloop:
(1)  324/    1377 : 89                      glo RL8
(1)  325/    1378 : FA 01                   ani 1		;isolate bottom bit of result
(1)  326/    137A : 3B 96                   bnf	$$check_sub	;
(1)  327/    137C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  328/    137E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  329/    137E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  330/    1394 : 30 AE                   br $$shift
(1)  331/    1396 :                     $$check_sub:
(1)  332/    1396 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  333/    1398 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  334/    1398 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  335/    13AE :                     $$shift:
(1)  336/    13AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  337/    13BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  338/    13C8 :                     
(1)  339/    13C8 : 2E                      dec memaddr		;cycle count
(1)  340/    13C9 : 8E                      glo memaddr
(1)  341/    13CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  342/    13CC :                         
(1)  343/    13CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  344/    13CD :                     
(1)  345/    13CD :                     	align 256
(1)  346/    1400 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  347/    1400 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  348/    1400 :                     _divI4:
(1)  349/    1400 : 22                      dec	sp	;leave a work area available
(1)  350/    1401 : 98                      ghi RL8-1	;get the top of the dividend
(1)  351/    1402 : 52                      str sp	;save the sign of the 1st arg
(1)  352/    1403 : FE                      shl
(1)  353/    1404 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  354/    1406 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  355/    1426 :                     $$pos1: ;1st is now +v, check 2nd
(1)  356/    1426 : 9A                      ghi RL10-1
(1)  357/    1427 : F3                      xor	
(1)  358/    1428 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  359/    1429 : 9A                      ghi RL10-1
(1)  360/    142A : FE                      shl
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 29 - 5/16/2013 14:54:56


(1)  361/    142B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  362/    142D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  363/    144D :                     $$pos2: ; both args now +v
(1)  364/    144D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  365/    1450 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  366/    1450 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  367/    1451 : FE                      shl
(1)  368/    1452 : 3B 74                   bnf $$done ;if the signs were different
(1)  369/    1454 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  370/    1474 :                     $$done:
(1)  371/    1474 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  372/    1475 :                     
(1)  373/    1475 :                     _dubdabx:	
(1)  374/    1475 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  375/    1475 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  376/    1475 :                     ;long interger is passed in rp1p2
(1)  377/    1475 :                     ;buffer pointer is passed at sp+2+4
(1)  378/    1475 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  379/    1475 :                     ;r8-11 are used as temps
(1)  380/    1475 :                     ;r8 is the working pointer
(1)  381/    1475 :                     ;r15.0 is bit count(32) and the return value register
(1)  382/    1475 :                     ;r9.0 is digit count
(1)  383/    1475 :                     ;r10 is the number of digits wanted in the result including leading 0's - 0 means no leading 0's
(1)  384/    1475 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  385/    1481 : (MACRO)             	ld2 r10,'O',sp,(2+4+2); pick up the number of digits wanted
(1)  386/    148D : (MACRO)             	cpy2 r15,r8 ;save address for now
(1)  387/    1491 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  388/    1493 : A9                  	plo r9
(1)  389/    1494 :                     $$clrlp:	;clear the passed buffer
(1)  390/    1494 : F8 00               	ldi 0	
(1)  391/    1496 : 58                  	str r8	;clear a byte
(1)  392/    1497 : 18                  	inc r8
(1)  393/    1498 : 29                  	dec r9
(1)  394/    1499 : 89                  	glo r9	;check the count
(1)  395/    149A : 3A 94               	bnz $$clrlp ;back for more
(1)  396/    149C : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  397/    14A0 :                     
(1)  398/    14A0 : F8 20               	ldi 32	;bit count
(1)  399/    14A2 : AF                  	plo r15
(1)  400/    14A3 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  401/    14A3 :                     $$cktop:
(1)  402/    14A3 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  403/    14A4 : FE                  	shl		;check for a 1
(1)  404/    14A5 : 33 B8               	bdf $$bitloop	;move on if we have one
(1)  405/    14A7 : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  406/    14B3 : 2F                  	dec r15		;reduce the number of times to shift
(1)  407/    14B4 : 8F                  	glo r15
(1)  408/    14B5 : 3A A3               	bnz $$cktop	;
(1)  409/    14B7 : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  410/    14B8 :                     $$bitloop:
(1)  411/    14B8 : F8 0A               	ldi 10	;digit count
(1)  412/    14BA : A9                  	plo r9
(1)  413/    14BB :                     $$dcklp:
(1)  414/    14BB : 08                  	ldn r8 	;pick up a digit
(1)  415/    14BC : FF 05               	smi 5	;see if it's greater than 4
(1)  416/    14BE : 3B C3               	bnf $$dnoadd ;if not, bypass add
(1)  417/    14C0 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  418/    14C2 : 58                  	str r8	;put it back
(1)  419/    14C3 :                     $$dnoadd:
(1)  420/    14C3 : 18                  	inc r8
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 30 - 5/16/2013 14:54:56


(1)  421/    14C4 : 29                  	dec r9	;decrement digit count
(1)  422/    14C5 : 89                  	glo r9
(1)  423/    14C6 : 3A BB               	bnz $$dcklp ;and back for next digit
(1)  424/    14C8 :                     	
(1)  425/    14C8 : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  426/    14D4 :                     	
(1)  427/    14D4 : F8 0A               	ldi 10	;load the digit count again
(1)  428/    14D6 : A9                  	plo r9
(1)  429/    14D7 :                     ;r8 is now just past the units location and ready to walk back
(1)  430/    14D7 :                     $$dshlp:
(1)  431/    14D7 : 28                  	dec r8	;walk back from 0's position
(1)  432/    14D8 : 08                  	ldn r8	;get the digit back
(1)  433/    14D9 : 7E                  	shlc	;continue the shift
(1)  434/    14DA : BF                  	phi r15 ;save it for the carry test
(1)  435/    14DB : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  436/    14DD : 58                  	str r8	;put the digit back
(1)  437/    14DE : 9F                  	ghi r15	;now test for carry
(1)  438/    14DF : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  439/    14E1 : 29                  	dec r9	;decrement the digit count
(1)  440/    14E2 : 89                  	glo r9
(1)  441/    14E3 : 3A D7               	bnz $$dshlp ;back for more if needed
(1)  442/    14E5 :                     	
(1)  443/    14E5 : 2F                  	dec r15
(1)  444/    14E6 : 8F                  	glo r15
(1)  445/    14E7 : 3A B8               	bnz $$bitloop
(1)  446/    14E9 :                     	
(1)  447/    14E9 : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  448/    14ED : F8 0A               	ldi 10		;digit count again
(1)  449/    14EF : A9                  	plo r9
(1)  450/    14F0 :                     $$upnxt:
(1)  451/    14F0 : 08                  	ldn r8		;get digit
(1)  452/    14F1 : F9 30               	ori 0x30	;make ascii
(1)  453/    14F3 : 58                  	str r8		;put it back
(1)  454/    14F4 : 18                  	inc r8		;next digit
(1)  455/    14F5 : 29                  	dec r9		;counter
(1)  456/    14F6 : 89                  	glo r9
(1)  457/    14F7 : 3A F0               	bnz $$upnxt	;upgrade all 10 spots
(1)  458/    14F9 :                     	
(1)  459/    14F9 : (MACRO)             	ldaX memaddr,sp,(2+4+2+1)	;point to lsb of desired digit count
(1)  460/    1501 : EE                  	sex memaddr	;set up
(1)  461/    1502 : F8 0A               	ldi 10		;max number of 0's to skip
(1)  462/    1504 : F7                  	sm		;desired number of digits to skip
(1)  463/    1505 : E2                  	sex sp		;reset index register
(1)  464/    1506 : A9                  	plo r9		;number of leading 0's to skip
(1)  465/    1507 :                     $$cknext:
(1)  466/    1507 : 0F                  	ldn r15		;check digit
(1)  467/    1508 : FF 30               	smi 0x30	;for '0'
(1)  468/    150A : 3A 11               	bnz $$done
(1)  469/    150C : 1F                  	inc r15		;next digit
(1)  470/    150D : 29                  	dec r9		;reduce count
(1)  471/    150E : 89                  	glo r9
(1)  472/    150F : 3A 07               	bnz $$cknext
(1)  473/    1511 :                     $$done:
(1)  474/    1511 : (MACRO)             	cretn
(1)  475/    1512 :                     	
(1)  476/    1512 :                     	
(1)  477/    1512 :                     _modU4:	;32 bit unsigned remainder
(1)  478/    1512 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  479/    1512 : (MACRO)                 Ccall _divU4
(1)  480/    1515 : (MACRO)                 cpy4 RL8,Rp1p2
 AS V1.42 Beta [Bld 87] - source file 8q.asm(lcc1802Epilofl.inc) - page 31 - 5/16/2013 14:54:56


(1)  481/    151D : (MACRO)                 Cretn
(1)  482/    151E :                         
(1)  483/    151E :                     _modI4:	;32 bit signed remainder
(1)  484/    151E :                     	; just calls the 32 bit division then puts remainder into return value
(1)  485/    151E : (MACRO)                 Ccall _divI4
(1)  486/    1521 : (MACRO)                 cpy4 RL8,Rp1p2
(1)  487/    1529 : (MACRO)                 Cretn
(1)  488/    152A :                         
(1)  489/    152A :                     	
(1)  490/    152A :                      
    1308/    152A :                     	include LCC1802fp.inc
(1)    1/    152A :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    152A :                     ;maybe originally from RCA
(1)    3/    152A :                     ;these routines use ALL the registers from 6-15!
(1)    4/    152A :                     ;8-15 were more or less available to start with
(1)    5/    152A :                     ;it saves 6 when it uses it
(1)    6/    152A :                     ;I save 7 on entry and restore on exit
(1)    7/    152A :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    152A : =BH                 FB	equ	11	;was R9
(1)    9/    152A : =9H                 F9	equ	9	;was R7
(1)   10/    152A : =7H                 F7	equ	7	;was RB
(1)   11/    152A :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    152A :                     ; *** Convert signed long to float
(1)   13/    152A :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    152A :                     ; *** result in same register
(1)   15/    152A :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    152A :                     	align 256
(1)   17/    1600 : F8 00               cvif4:	ldi	0
(1)   18/    1602 : BE                  	phi	memaddr	;sign
(1)   19/    1603 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    1605 : AE                  	plo	memaddr	;
(1)   21/    1606 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    1607 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    1609 : FE                  	shl		;sign bit to df
(1)   24/    160A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    160C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    160D : BE                  	phi	memaddr	;save it
(1)   27/    160E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    162E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    1630 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    1631 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    1633 : 99                  	ghi	RL8	;next byte
(1)   32/    1634 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    1636 : 89                  	glo	RL8	;last byte
(1)   34/    1637 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    1639 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    163A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    163C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    163D : (MACRO)             	shru4	RL8
(1)   39/    1649 : 30 39               	br	$$sgnpos
(1)   40/    164B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    164C : FA 80               	ani	0x80	;isolate it
(1)   42/    164E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    1650 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    1651 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    165D : 30 4B               	br	$$shl
(1)   46/    165F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    1660 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    1661 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    1662 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 32 - 5/16/2013 14:54:56


(1)   50/    1664 : 88                  	glo	RL8-1	;get the byte
(1)   51/    1665 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    1667 : A8                  	plo	RL8-1	;put it back
(1)   53/    1668 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    1669 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    166B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    166C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    166E : B8                  	phi	RL8-1	;place it
(1)   58/    166F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    1670 :                     	
(1)   60/    1670 :                     
(1)   61/    1670 :                     
(1)   62/    1670 :                     ; *** Convert float to signed long
(1)   63/    1670 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    1670 :                     ; *** result in same register
(1)   65/    1670 :                     	align 256
(1)   66/    1700 :                     cvfi4:
(1)   67/    1700 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    1701 : BE                  	phi	memaddr ;save for later
(1)   69/    1702 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    1703 : FE                  	shl		;shift to df
(1)   71/    1704 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    1705 : 7E                  	shlc		;combine with 0
(1)   73/    1706 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    1706 : 22                  	dec	sp
(1)   75/    1707 : 52                  	str	sp
(1)   76/    1708 : F8 96               	ldi	150
(1)   77/    170A : F7                  	sm		;calculate shift count needed
(1)   78/    170B :                     ;*******note - the df flag set here is tested later
(1)   79/    170B : AE                  	plo	memaddr
(1)   80/    170C : 12                  	inc	sp	;release work area
(1)   81/    170D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    170D : F8 00               	ldi	0
(1)   83/    170F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    1710 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    1711 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    1713 : A8                  	plo	RL8-1	;put it back
(1)   87/    1714 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    1715 : 32 3B               	bz	$$sign
(1)   89/    1717 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    1717 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    1719 :                     
(1)   92/    1719 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    1725 : 2E                  	dec	memaddr	;check shift count
(1)   94/    1726 : 8E                  	glo	memaddr
(1)   95/    1727 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    1729 : 30 3B               	br	$$sign
(1)   97/    172B :                     
(1)   98/    172B :                     ;handle negative shift as best I can - gigo
(1)   99/    172B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    1737 : 1E                  	inc	memaddr
(1)  101/    1738 : 8E                  	glo	memaddr
(1)  102/    1739 : 3A 2B               	bnz	$$lsh	
(1)  103/    173B :                     	
(1)  104/    173B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    173C : FE                  	shl		;shift sign bit into df
(1)  106/    173D : 3B 61               	bnf	$$done
(1)  107/    173F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    175F : 30 61               	br	$$done	; and return
(1)  109/    1761 :                     
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 33 - 5/16/2013 14:54:56


(1)  110/    1761 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    1762 :                     
(1)  112/    1762 :                     ; *** Check if character is numeric
(1)  113/    1762 :                     ; *** D - char to check
(1)  114/    1762 :                     ; *** Returns DF=1 if numeric
(1)  115/    1762 :                     ; ***         DF=0 if not
(1)  116/    1762 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    1763 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    1765 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    1767 : FF 0A                          smi     10                  ; see if above
(1)  120/    1769 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    176B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    176D : C8                             lskp
(1)  123/    176E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    1770 : 8E                             glo     r14                 ; recover character
(1)  125/    1771 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    1772 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    1772 :                     ; *******************************
(1)  128/    1772 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    1773 : F6                             shr
(1)  130/    1774 : B8                             phi   r8
(1)  131/    1775 : 88                             glo   r8
(1)  132/    1776 : 76                             shrc
(1)  133/    1777 : A8                             plo   r8
(1)  134/    1778 : 99                             ghi   F9                    ; shift low word right
(1)  135/    1779 : 76                             shrc
(1)  136/    177A : B9                             phi   F9
(1)  137/    177B : 89                             glo   F9
(1)  138/    177C : 76                             shrc
(1)  139/    177D : A9                             plo   F9
(1)  140/    177E : (MACRO)                        Cretn
(1)  141/    177F :                     
(1)  142/    177F :                     ; ******************************
(1)  143/    177F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    177F :                     ; ******************************
(1)  145/    177F : 89                  fp_shl_1:  glo   F9
(1)  146/    1780 : FE                             shl
(1)  147/    1781 : A9                             plo   F9
(1)  148/    1782 : 99                             ghi   F9
(1)  149/    1783 : 7E                             shlc
(1)  150/    1784 : B9                             phi   F9
(1)  151/    1785 : 88                             glo   r8
(1)  152/    1786 : 7E                             shlc
(1)  153/    1787 : A8                             plo   r8
(1)  154/    1788 : 98                             ghi   r8
(1)  155/    1789 : 7E                             shlc
(1)  156/    178A : B8                             phi   r8
(1)  157/    178B : D5                             sep   RRET
(1)  158/    178C :                     
(1)  159/    178C :                     ; **********************
(1)  160/    178C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    178C :                     ; **********************
(1)  162/    178C : 8B                  fp_add_12: glo   FB
(1)  163/    178D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    178E : 52                             str   r2
(1)  165/    178F : 89                             glo   F9
(1)  166/    1790 : F4                             add
(1)  167/    1791 : A9                             plo   F9
(1)  168/    1792 : 9B                             ghi   FB
(1)  169/    1793 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 34 - 5/16/2013 14:54:56


(1)  170/    1794 : 99                             ghi   F9
(1)  171/    1795 : 74                             adc
(1)  172/    1796 : B9                             phi   F9
(1)  173/    1797 : 8A                             glo   R10
(1)  174/    1798 : 52                             str   r2
(1)  175/    1799 : 88                             glo   r8
(1)  176/    179A : 74                             adc
(1)  177/    179B : A8                             plo   r8
(1)  178/    179C : 9A                             ghi   R10
(1)  179/    179D : 52                             str   r2
(1)  180/    179E : 98                             ghi   r8
(1)  181/    179F : 74                             adc
(1)  182/    17A0 : B8                             phi   r8
(1)  183/    17A1 : 12                             inc	r2	;wjr - release work area
(1)  184/    17A2 : (MACRO)                        Cretn
(1)  185/    17A3 :                     
(1)  186/    17A3 :                     ; *******************************
(1)  187/    17A3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    17A3 :                     ; *******************************
(1)  189/    17A3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    17A4 : F6                             shr
(1)  191/    17A5 : BF                             phi   R15
(1)  192/    17A6 : 8F                             glo   R15
(1)  193/    17A7 : 76                             shrc
(1)  194/    17A8 : AF                             plo   R15
(1)  195/    17A9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    17AA : 76                             shrc
(1)  197/    17AB : BD                             phi   R13
(1)  198/    17AC : 8D                             glo   R13
(1)  199/    17AD : 76                             shrc
(1)  200/    17AE : AD                             plo   R13
(1)  201/    17AF : (MACRO)                        Cretn
(1)  202/    17B0 :                     
(1)  203/    17B0 :                     ; *************************************
(1)  204/    17B0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    17B0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    17B0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    17B0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    17B0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    17B0 :                     ; *************************************
(1)  210/    17B0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    17B1 : FA 80                          ani   080h                  ; check it
(1)  212/    17B3 : CA 17 C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    17B6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    17B9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    17BA : FF 01                          smi   1                     ; minus 1
(1)  216/    17BC : BF                             phi   R15                    ; and put it back
(1)  217/    17BD : C0 17 B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    17C0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    17C1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    17C2 : A8                             plo   r8                    ; set aside
(1)  221/    17C3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    17C4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    17C5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    17C6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    17C7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    17C8 : A8                             plo   r8                    ; and put it back
(1)  227/    17C9 : 87                             glo   F7                   ; get signs
(1)  228/    17CA : F6                             shr                         ; get sign 1
(1)  229/    17CB : 98                             ghi   r8                    ; recover exponent
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 35 - 5/16/2013 14:54:56


(1)  230/    17CC : 76                             shrc                        ; shift in sign
(1)  231/    17CD : B8                             phi   r8                    ; put it back
(1)  232/    17CE : 12                             inc	r2	;wjr release work area
(1)  233/    17CF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    17D3 : (MACRO)             	   popr R12	;wjr
(1)  235/    17D7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    17DB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    17DC :                     
(1)  238/    17DC :                     ; ************************************
(1)  239/    17DC :                     ; *** Get exponenst from arguments ***
(1)  240/    17DC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    17DC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    17DC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    17DC :                     ; ***          RF.0 - exp2         ***
(1)  244/    17DC :                     ; ************************************
(1)  245/    17DC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    17DD : FE                             shl                         ; shift it into DF
(1)  247/    17DE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    17DF : 7E                             shlc                        ; shift in first bit
(1)  249/    17E0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    17E1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    17E1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    17E2 : FE                             shl                         ; shift it into DF
(1)  253/    17E3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    17E4 : 7E                             shlc                        ; shift in first bit
(1)  255/    17E5 : AF                             plo   R15                    ; put into RF
(1)  256/    17E6 : D5                             sep   RRET                  ; return to caller
(1)  257/    17E7 :                     
(1)  258/    17E7 :                     ; ************************************
(1)  259/    17E7 :                     ; *** Get signs from arguments     ***
(1)  260/    17E7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    17E7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    17E7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    17E7 :                     ; ************************************
(1)  264/    17E7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    17E8 : FE                             shl                         ; shift into DF
(1)  266/    17E9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    17EA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    17EB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    17EC : A7                             plo   F7                    ; save them
(1)  270/    17ED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    17EE :                     
(1)  272/    17EE :                     ; ***************************************
(1)  273/    17EE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    17EE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    17EE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    17EE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    17EE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    17EE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    17EE :                     ; ***        F7.0 - signs        ***
(1)  280/    17EE :                     ; ***************************************
(1)  281/    17EE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    17EF : CA 18 07                       lbnz  add_a1nz
(1)  283/    17F2 : 88                             glo   r8
(1)  284/    17F3 : CA 18 07                       lbnz  add_a1nz
(1)  285/    17F6 : 99                             ghi   F9
(1)  286/    17F7 : CA 18 07                       lbnz  add_a1nz
(1)  287/    17FA : 89                             glo   F9
(1)  288/    17FB : CA 18 07                       lbnz  add_a1nz
(1)  289/    17FE : 9A                             ghi   R10                    ; transfer arg2 to answer
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 36 - 5/16/2013 14:54:56


(1)  290/    17FF : B8                             phi   r8
(1)  291/    1800 : 8A                             glo   R10
(1)  292/    1801 : A8                             plo   r8
(1)  293/    1802 : 9B                             ghi   FB
(1)  294/    1803 : B9                             phi   F9
(1)  295/    1804 : 8B                             glo   FB
(1)  296/    1805 : A9                             plo   F9
(1)  297/    1806 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    1807 :                     
(1)  299/    1807 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    1808 : CA 18 18                       lbnz  add_a2nz
(1)  301/    180B : 8A                             glo   R10
(1)  302/    180C : CA 18 18                       lbnz  add_a2nz
(1)  303/    180F : 9B                             ghi   FB
(1)  304/    1810 : CA 18 18                       lbnz  add_a2nz
(1)  305/    1813 : 8B                             glo   FB
(1)  306/    1814 : CA 18 18                       lbnz  add_a2nz
(1)  307/    1817 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    1818 :                                
(1)  309/    1818 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    181D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    1822 : (MACRO)             	   pushr R13	;wjr
(1)  312/    1827 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    1828 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    182B : 9F                             ghi   R15
(1)  315/    182C : 52                             str   r2
(1)  316/    182D : 8F                             glo   R15
(1)  317/    182E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    182F : CB 18 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    1832 :                     
(1)  320/    1832 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    1833 : AE                             plo   R14
(1)  322/    1834 : 9A                             ghi   R10
(1)  323/    1835 : B8                             phi   r8
(1)  324/    1836 : 8E                             glo   R14
(1)  325/    1837 : BA                             phi   R10
(1)  326/    1838 : 88                             glo   r8
(1)  327/    1839 : AE                             plo   R14
(1)  328/    183A : 8A                             glo   R10
(1)  329/    183B : A8                             plo   r8
(1)  330/    183C : 8E                             glo   R14
(1)  331/    183D : AA                             plo   R10
(1)  332/    183E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    183F : AE                             plo   R14
(1)  334/    1840 : 9B                             ghi   FB
(1)  335/    1841 : B9                             phi   F9
(1)  336/    1842 : 8E                             glo   R14
(1)  337/    1843 : BB                             phi   FB
(1)  338/    1844 : 89                             glo   F9
(1)  339/    1845 : AE                             plo   R14
(1)  340/    1846 : 8B                             glo   FB
(1)  341/    1847 : A9                             plo   F9
(1)  342/    1848 : 8E                             glo   R14
(1)  343/    1849 : AB                             plo   FB
(1)  344/    184A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    184B : AE                             plo   R14
(1)  346/    184C : 8F                             glo   R15
(1)  347/    184D : BF                             phi   R15
(1)  348/    184E : 8E                             glo   R14
(1)  349/    184F : AF                             plo   R15
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 37 - 5/16/2013 14:54:56


(1)  350/    1850 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    1853 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    1855 : B8                             phi   r8
(1)  353/    1856 : BA                             phi   R10
(1)  354/    1857 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    1859 : 52                             str   r2
(1)  356/    185A : 88                             glo   r8
(1)  357/    185B : F1                             or
(1)  358/    185C : A8                             plo   r8
(1)  359/    185D : 8A                             glo   R10
(1)  360/    185E : F1                             or
(1)  361/    185F : AA                             plo   R10
(1)  362/    1860 : 9F                             ghi   R15                    ; get exp1
(1)  363/    1861 : 52                             str   r2                    ; place into memory
(1)  364/    1862 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    1863 : F7                             sm                          ; see if match to exp1
(1)  366/    1864 : C2 18 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    1867 : 8F                             glo   R15                    ; need to increase it
(1)  368/    1868 : FC 01                          adi   1
(1)  369/    186A : AF                             plo   R15
(1)  370/    186B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    186C : F6                             shr
(1)  372/    186D : AA                             plo   R10
(1)  373/    186E : 9B                             ghi   FB
(1)  374/    186F : 76                             shrc
(1)  375/    1870 : BB                             phi   FB
(1)  376/    1871 : 8B                             glo   FB
(1)  377/    1872 : 76                             shrc
(1)  378/    1873 : AB                             plo   FB
(1)  379/    1874 : C0 18 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    1877 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    1878 : 52                             str   r2
(1)  382/    1879 : F6                             shr
(1)  383/    187A : F3                             xor
(1)  384/    187B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    187D : CA 18 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    1880 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    1883 : C0 18 BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    1886 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    1887 : 52                             str   r2
(1)  390/    1888 : 89                             glo   F9
(1)  391/    1889 : F7                             sm
(1)  392/    188A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    188B : 9B                             ghi   FB
(1)  394/    188C : 52                             str   r2
(1)  395/    188D : 99                             ghi   F9
(1)  396/    188E : 77                             smb
(1)  397/    188F : BC                             phi   R12
(1)  398/    1890 : 8A                             glo   R10
(1)  399/    1891 : 52                             str   r2
(1)  400/    1892 : 88                             glo   r8
(1)  401/    1893 : 77                             smb
(1)  402/    1894 : AD                             plo   R13
(1)  403/    1895 : 9A                             ghi   R10
(1)  404/    1896 : 52                             str   r2
(1)  405/    1897 : 98                             ghi   r8
(1)  406/    1898 : 77                             smb
(1)  407/    1899 : BD                             phi   R13
(1)  408/    189A : CB 18 A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    189D : 9D                             ghi   R13                    ; transfer result to arg1
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 38 - 5/16/2013 14:54:56


(1)  410/    189E : B8                             phi   r8
(1)  411/    189F : 8D                             glo   R13
(1)  412/    18A0 : A8                             plo   r8
(1)  413/    18A1 : 9C                             ghi   R12
(1)  414/    18A2 : B9                             phi   F9
(1)  415/    18A3 : 8C                             glo   R12
(1)  416/    18A4 : A9                             plo   F9
(1)  417/    18A5 : C0 18 BF                       lbr   add_fnl               ; finalize
(1)  418/    18A8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    18A9 : 52                             str   r2
(1)  420/    18AA : 8B                             glo   FB
(1)  421/    18AB : F7                             sm
(1)  422/    18AC : A9                             plo   F9
(1)  423/    18AD : 99                             ghi   F9
(1)  424/    18AE : 52                             str   r2
(1)  425/    18AF : 9B                             ghi   FB
(1)  426/    18B0 : 77                             smb
(1)  427/    18B1 : B9                             phi   F9
(1)  428/    18B2 : 88                             glo   r8
(1)  429/    18B3 : 52                             str   r2
(1)  430/    18B4 : 8A                             glo   R10
(1)  431/    18B5 : 77                             smb
(1)  432/    18B6 : A8                             plo   r8
(1)  433/    18B7 : 98                             ghi   r8
(1)  434/    18B8 : 52                             str   r2
(1)  435/    18B9 : 9A                             ghi   R10
(1)  436/    18BA : 77                             smb
(1)  437/    18BB : B8                             phi   r8
(1)  438/    18BC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    18BD : FE                             shl
(1)  440/    18BE : A7                             plo   F7
(1)  441/    18BF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    18C0 : CA 18 DD                       lbnz  add_nz                ; jump if not
(1)  443/    18C3 : 88                             glo   r8
(1)  444/    18C4 : CA 18 DD                       lbnz  add_nz
(1)  445/    18C7 : 99                             ghi   F9
(1)  446/    18C8 : CA 18 DD                       lbnz  add_nz
(1)  447/    18CB : 89                             glo   F9
(1)  448/    18CC : CA 18 DD                       lbnz  add_nz
(1)  449/    18CF : 12                             inc	r2	;wjr release work area
(1)  450/    18D0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    18D4 : (MACRO)             	   popr R12	;wjr
(1)  452/    18D8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    18DC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    18DD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    18DE : C2 18 EB                       lbz   add_nx                ; jump if not
(1)  456/    18E1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    18E4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    18E5 : FC 01                          adi   1                     ; increment it
(1)  459/    18E7 : BF                             phi   R15                    ; and put it back
(1)  460/    18E8 : C0 18 DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    18EB :                     
(1)  462/    18EB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    18EC : F6                             shr
(1)  464/    18ED : A7                             plo   F7
(1)  465/    18EE : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    18F1 :                     
(1)  467/    18F1 :                     ; ***************************************
(1)  468/    18F1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    18F1 :                     ; *** R8:F9 - Arg 1                   ***
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 39 - 5/16/2013 14:54:56


(1)  470/    18F1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    18F1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    18F1 :                     ; ***************************************
(1)  473/    18F1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    18F2 : FB 80                          xri   080h
(1)  475/    18F4 : BA                             phi   R10                    ; and put it back
(1)  476/    18F5 : C0 17 EE                       lbr   fp_add                ; now just add
(1)  477/    18F8 :                     
(1)  478/    18F8 :                     ; ***************************************
(1)  479/    18F8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    18F8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    18F8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    18F8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    18F8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    18F8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    18F8 :                     ; ***        F7.0 - signs        ***
(1)  486/    18F8 :                     ; ***************************************
(1)  487/    18F8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    18F9 : CA 19 09                       lbnz  div_a1nz
(1)  489/    18FC : 88                             glo   r8
(1)  490/    18FD : CA 19 09                       lbnz  div_a1nz
(1)  491/    1900 : 99                             ghi   F9
(1)  492/    1901 : CA 19 09                       lbnz  div_a1nz
(1)  493/    1904 : 89                             glo   F9
(1)  494/    1905 : CA 19 09                       lbnz  div_a1nz
(1)  495/    1908 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    1909 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    190A : CA 19 27                       lbnz  div_a2nz
(1)  498/    190D : 8A                             glo   R10
(1)  499/    190E : CA 19 27                       lbnz  div_a2nz
(1)  500/    1911 : 9B                             ghi   FB
(1)  501/    1912 : CA 19 27                       lbnz  div_a2nz
(1)  502/    1915 : 8B                             glo   FB
(1)  503/    1916 : CA 19 27                       lbnz  div_a2nz
(1)  504/    1919 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    191A : FA 80                          ani   080h                  ; want only sign
(1)  506/    191C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    191E : B8                             phi   r8                    ; put into answer
(1)  508/    191F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    1921 : A8                             plo   r8 
(1)  510/    1922 : F8 00                          ldi   0
(1)  511/    1924 : B9                             phi   F9
(1)  512/    1925 : A9                             plo   F9
(1)  513/    1926 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    1927 :                     
(1)  515/    1927 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    192C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    1931 : (MACRO)             	   pushr R13	;wjr
(1)  518/    1936 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    1937 :                     
(1)  520/    1937 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    193A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    193D : 8F                             glo   R15                    ; get exp2
(1)  523/    193E : FF 7F                          smi   127                   ; remove bias
(1)  524/    1940 : 52                             str   r2                    ; place into memory
(1)  525/    1941 : 9F                             ghi   R15                    ; get exp1
(1)  526/    1942 : FF 7F                          smi   127                   ; remove bias
(1)  527/    1944 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    1945 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    1947 : 73                             stxd                        ; save onto stack
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 40 - 5/16/2013 14:54:56


(1)  530/    1948 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    1949 : 52                             str   r2
(1)  532/    194A : F6                             shr
(1)  533/    194B : F3                             xor
(1)  534/    194C : 73                             stxd                        ; place onto stack
(1)  535/    194D : F8 00                          ldi   0                     ; setup man
(1)  536/    194F : BA                             phi   R10
(1)  537/    1950 : 8A                             glo   R10
(1)  538/    1951 : F9 80                          ori   080h
(1)  539/    1953 : AA                             plo   R10
(1)  540/    1954 : F8 00                          ldi   0                     ; setup div
(1)  541/    1956 : B8                             phi   r8
(1)  542/    1957 : 88                             glo   r8
(1)  543/    1958 : F9 80                          ori   080h
(1)  544/    195A : A8                             plo   r8
(1)  545/    195B : F8 00                          ldi   0                     ; setup result
(1)  546/    195D : BC                             phi   R12
(1)  547/    195E : AC                             plo   R12
(1)  548/    195F : B7                             phi   F7
(1)  549/    1960 : A7                             plo   F7
(1)  550/    1961 : AF                             plo   R15                    ; setup quotient
(1)  551/    1962 : BF                             phi   R15
(1)  552/    1963 : BD                             phi   R13
(1)  553/    1964 : AD                             plo   R13
(1)  554/    1965 : F8 80                          ldi   080h
(1)  555/    1967 : AF                             plo   R15
(1)  556/    1968 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    1969 : CA 19 7B                       lbnz  div_go1
(1)  558/    196C : 88                             glo   r8
(1)  559/    196D : CA 19 7B                       lbnz  div_go1
(1)  560/    1970 : 99                             ghi   F9
(1)  561/    1971 : CA 19 7B                       lbnz  div_go1
(1)  562/    1974 : 89                             glo   F9
(1)  563/    1975 : CA 19 7B                       lbnz  div_go1
(1)  564/    1978 : C0 19 DB                       lbr   div_z
(1)  565/    197B : 9A                  div_go1:   ghi   R10
(1)  566/    197C : CA 19 8E                       lbnz  div_go
(1)  567/    197F : 8A                             glo   R10
(1)  568/    1980 : CA 19 8E                       lbnz  div_go
(1)  569/    1983 : 9B                             ghi   FB
(1)  570/    1984 : CA 19 8E                       lbnz  div_go
(1)  571/    1987 : 8B                             glo   FB
(1)  572/    1988 : CA 19 8E                       lbnz  div_go
(1)  573/    198B : C0 19 DB                       lbr   div_z                 ; nothing more to do
(1)  574/    198E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    198F : 52                             str   r2
(1)  576/    1990 : 89                             glo   F9
(1)  577/    1991 : F7                             sm
(1)  578/    1992 : 9B                             ghi   FB
(1)  579/    1993 : 52                             str   r2
(1)  580/    1994 : 99                             ghi   F9
(1)  581/    1995 : 77                             smb
(1)  582/    1996 : 8A                             glo   R10
(1)  583/    1997 : 52                             str   r2
(1)  584/    1998 : 88                             glo   r8
(1)  585/    1999 : 77                             smb
(1)  586/    199A : 9A                             ghi   R10
(1)  587/    199B : 52                             str   r2
(1)  588/    199C : 98                             ghi   r8
(1)  589/    199D : 77                             smb
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 41 - 5/16/2013 14:54:56


(1)  590/    199E : CB 19 C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    19A1 : 8B                             glo   FB                    ; div -= man
(1)  592/    19A2 : 52                             str   r2
(1)  593/    19A3 : 89                             glo   F9
(1)  594/    19A4 : F7                             sm
(1)  595/    19A5 : A9                             plo   F9
(1)  596/    19A6 : 9B                             ghi   FB
(1)  597/    19A7 : 52                             str   r2
(1)  598/    19A8 : 99                             ghi   F9
(1)  599/    19A9 : 77                             smb
(1)  600/    19AA : B9                             phi   F9
(1)  601/    19AB : 8A                             glo   R10
(1)  602/    19AC : 52                             str   r2
(1)  603/    19AD : 88                             glo   r8
(1)  604/    19AE : 77                             smb
(1)  605/    19AF : A8                             plo   r8
(1)  606/    19B0 : 9A                             ghi   R10
(1)  607/    19B1 : 52                             str   r2
(1)  608/    19B2 : 98                             ghi   r8
(1)  609/    19B3 : 77                             smb
(1)  610/    19B4 : B8                             phi   r8
(1)  611/    19B5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    19B6 : 52                             str   r2
(1)  613/    19B7 : 9C                             ghi   R12
(1)  614/    19B8 : F1                             or
(1)  615/    19B9 : BC                             phi   R12
(1)  616/    19BA : 8F                             glo   R15
(1)  617/    19BB : 52                             str   r2
(1)  618/    19BC : 8C                             glo   R12
(1)  619/    19BD : F1                             or
(1)  620/    19BE : AC                             plo   R12
(1)  621/    19BF : 9D                             ghi   R13
(1)  622/    19C0 : 52                             str   r2
(1)  623/    19C1 : 97                             ghi   F7
(1)  624/    19C2 : F1                             or
(1)  625/    19C3 : B7                             phi   F7
(1)  626/    19C4 : 8D                             glo   R13
(1)  627/    19C5 : 52                             str   r2
(1)  628/    19C6 : 87                             glo   F7
(1)  629/    19C7 : F1                             or
(1)  630/    19C8 : A7                             plo   F7
(1)  631/    19C9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    19CA : 17 A3                          dw    fp_shr_fd
(1)  633/    19CC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    19CD : F6                             shr
(1)  635/    19CE : BA                             phi   R10
(1)  636/    19CF : 8A                             glo   R10
(1)  637/    19D0 : 76                             shrc
(1)  638/    19D1 : AA                             plo   R10
(1)  639/    19D2 : 9B                             ghi   FB
(1)  640/    19D3 : 76                             shrc
(1)  641/    19D4 : BB                             phi   FB
(1)  642/    19D5 : 8B                             glo   FB
(1)  643/    19D6 : 76                             shrc
(1)  644/    19D7 : AB                             plo   FB
(1)  645/    19D8 : C0 19 68                       lbr   div_lp                ; loop back until done
(1)  646/    19DB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    19DC : B8                             phi   r8
(1)  648/    19DD : 8C                             glo   R12
(1)  649/    19DE : A8                             plo   r8
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 42 - 5/16/2013 14:54:56


(1)  650/    19DF : 97                             ghi   F7
(1)  651/    19E0 : B9                             phi   F9
(1)  652/    19E1 : 87                             glo   F7
(1)  653/    19E2 : A9                             plo   F9
(1)  654/    19E3 : 60                             irx                         ; recover sign
(1)  655/    19E4 : 72                             ldxa
(1)  656/    19E5 : A7                             plo   F7
(1)  657/    19E6 : F0                             ldx                         ; recover answer exponent
(1)  658/    19E7 : BF                             phi   R15
(1)  659/    19E8 : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    19EB :                     
(1)  661/    19EB :                     ; ***************************************
(1)  662/    19EB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    19EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    19EB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    19EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    19EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    19EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    19EB :                     ; ***        F7.0 - signs             ***
(1)  669/    19EB :                     ; ***************************************
(1)  670/    19EB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    19F0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    19F5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    19FA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  674/    19FB :                     
(1)  675/    19FB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    19FE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    1A01 : 8F                             glo   R15                    ; get exp2
(1)  678/    1A02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    1A04 : 52                             str   r2                    ; place into memory
(1)  680/    1A05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    1A06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    1A08 : F4                             add                         ; add in exponent 2
(1)  683/    1A09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    1A0B : 73                             stxd                        ; place onto stack
(1)  685/    1A0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    1A0D : 52                             str   r2
(1)  687/    1A0E : F6                             shr
(1)  688/    1A0F : F3                             xor
(1)  689/    1A10 : 73                             stxd                        ; place onto stack
(1)  690/    1A11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    1A12 : 73                             stxd                        ; save on stack
(1)  692/    1A13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    1A14 : 73                             stxd
(1)  694/    1A15 : 86                             glo   r6
(1)  695/    1A16 : 73                             stxd
(1)  696/    1A17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    1A19 : 73                             stxd
(1)  698/    1A1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    1A1B : AE                             plo   R14
(1)  700/    1A1C : B6                             phi   r6
(1)  701/    1A1D : A6                             plo   r6
(1)  702/    1A1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    1A1F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    1A20 : F9 80                          ori   080h
(1)  705/    1A22 : A8                             plo   r8
(1)  706/    1A23 : F8 00                          ldi   0
(1)  707/    1A25 : BC                             phi   R12                    ; set result to 0
(1)  708/    1A26 : AC                             plo   R12
(1)  709/    1A27 : B7                             phi   F7
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 43 - 5/16/2013 14:54:56


(1)  710/    1A28 : A7                             plo   F7
(1)  711/    1A29 : BF                             phi   R15
(1)  712/    1A2A : AF                             plo   R15
(1)  713/    1A2B : BD                             phi   R13
(1)  714/    1A2C : AD                             plo   R13
(1)  715/    1A2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    1A2E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    1A2F : F9 80                          ori   080h
(1)  718/    1A31 : AA                             plo   R10
(1)  719/    1A32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    1A33 : CA 1A 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    1A36 : 9B                             ghi   FB
(1)  722/    1A37 : CA 1A 42                       lbnz  mul_go1
(1)  723/    1A3A : 8A                             glo   R10
(1)  724/    1A3B : CA 1A 42                       lbnz  mul_go1
(1)  725/    1A3E : 9A                             ghi   R10
(1)  726/    1A3F : C2 1A BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    1A42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    1A43 : F6                             shr
(1)  729/    1A44 : BA                             phi   R10
(1)  730/    1A45 : 8A                             glo   R10
(1)  731/    1A46 : 76                             shrc
(1)  732/    1A47 : AA                             plo   R10
(1)  733/    1A48 : 9B                             ghi   FB
(1)  734/    1A49 : 76                             shrc
(1)  735/    1A4A : BB                             phi   FB
(1)  736/    1A4B : 8B                             glo   FB
(1)  737/    1A4C : 76                             shrc
(1)  738/    1A4D : AB                             plo   FB
(1)  739/    1A4E : CB 1A 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    1A51 : 89                             glo   F9                    ; res += mul
(1)  741/    1A52 : 52                             str   r2
(1)  742/    1A53 : 87                             glo   F7
(1)  743/    1A54 : F4                             add
(1)  744/    1A55 : A7                             plo   F7
(1)  745/    1A56 : 99                             ghi   F9
(1)  746/    1A57 : 52                             str   r2
(1)  747/    1A58 : 97                             ghi   F7
(1)  748/    1A59 : 74                             adc
(1)  749/    1A5A : B7                             phi   F7
(1)  750/    1A5B : 88                             glo   r8
(1)  751/    1A5C : 52                             str   r2
(1)  752/    1A5D : 8C                             glo   R12
(1)  753/    1A5E : 74                             adc
(1)  754/    1A5F : AC                             plo   R12
(1)  755/    1A60 : 98                             ghi   r8
(1)  756/    1A61 : 52                             str   r2
(1)  757/    1A62 : 9C                             ghi   R12
(1)  758/    1A63 : 74                             adc
(1)  759/    1A64 : BC                             phi   R12
(1)  760/    1A65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    1A66 : 52                             str   r2
(1)  762/    1A67 : 8D                             glo   R13
(1)  763/    1A68 : F4                             add
(1)  764/    1A69 : AD                             plo   R13
(1)  765/    1A6A : 96                             ghi   r6
(1)  766/    1A6B : 52                             str   r2
(1)  767/    1A6C : 96                             ghi   r6
(1)  768/    1A6D : 52                             str   r2
(1)  769/    1A6E : 9D                             ghi   R13
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 44 - 5/16/2013 14:54:56


(1)  770/    1A6F : 74                             adc
(1)  771/    1A70 : BD                             phi   R13
(1)  772/    1A71 : 8E                             glo   R14
(1)  773/    1A72 : 52                             str   r2
(1)  774/    1A73 : 8F                             glo   R15
(1)  775/    1A74 : 74                             adc
(1)  776/    1A75 : AF                             plo   R15
(1)  777/    1A76 : 9E                             ghi   R14
(1)  778/    1A77 : 52                             str   r2
(1)  779/    1A78 : 9F                             ghi   R15
(1)  780/    1A79 : 74                             adc
(1)  781/    1A7A : BF                             phi   R15
(1)  782/    1A7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    1A7C : C2 1A 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    1A7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    1A80 : FC 01                          adi   1
(1)  786/    1A82 : AD                             plo   R13
(1)  787/    1A83 : 9D                             ghi   R13
(1)  788/    1A84 : 7C 00                          adci  0
(1)  789/    1A86 : BD                             phi   R13
(1)  790/    1A87 : 8F                             glo   R15
(1)  791/    1A88 : 7C 00                          adci  0
(1)  792/    1A8A : AF                             plo   R15
(1)  793/    1A8B : 9F                             ghi   R15
(1)  794/    1A8C : 7C 00                          adci  0
(1)  795/    1A8E : BF                             phi   R15
(1)  796/    1A8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    1A90 : F0                             ldx
(1)  798/    1A91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    1A93 : 73                             stxd                        ; and put it back
(1)  800/    1A94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    1A95 : FE                             shl
(1)  802/    1A96 : A9                             plo   F9
(1)  803/    1A97 : 99                             ghi   F9
(1)  804/    1A98 : 7E                             shlc
(1)  805/    1A99 : B9                             phi   F9
(1)  806/    1A9A : 88                             glo   r8
(1)  807/    1A9B : 7E                             shlc
(1)  808/    1A9C : A8                             plo   r8
(1)  809/    1A9D : 98                             ghi   r8
(1)  810/    1A9E : 7E                             shlc
(1)  811/    1A9F : B8                             phi   r8
(1)  812/    1AA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    1AA1 : FE                             shl
(1)  814/    1AA2 : A6                             plo   r6
(1)  815/    1AA3 : 96                             ghi   r6
(1)  816/    1AA4 : 7E                             shlc
(1)  817/    1AA5 : B6                             phi   r6
(1)  818/    1AA6 : 8E                             glo   R14
(1)  819/    1AA7 : 7E                             shlc
(1)  820/    1AA8 : AE                             plo   R14
(1)  821/    1AA9 : 9E                             ghi   R14
(1)  822/    1AAA : 7E                             shlc
(1)  823/    1AAB : BE                             phi   R14
(1)  824/    1AAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    1AAD : C2 1A 32                       lbz   mul_lp1               ; jump if not
(1)  826/    1AB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    1AB2 : B8                             phi   r8
(1)  828/    1AB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    1AB4 : F9 01                          ori   1
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 45 - 5/16/2013 14:54:56


(1)  830/    1AB6 : A6                             plo   r6
(1)  831/    1AB7 : C0 1A 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    1ABA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    1ABB : 72                             ldxa
(1)  834/    1ABC : AE                             plo   R14                    ; set aside
(1)  835/    1ABD : 72                             ldxa
(1)  836/    1ABE : A6                             plo   r6
(1)  837/    1ABF : 72                             ldxa
(1)  838/    1AC0 : B6                             phi   r6
(1)  839/    1AC1 : F0                             ldx
(1)  840/    1AC2 : BE                             phi   R14
(1)  841/    1AC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    1AC4 : B8                             phi   r8
(1)  843/    1AC5 : 8C                             glo   R12
(1)  844/    1AC6 : A8                             plo   r8
(1)  845/    1AC7 : 97                             ghi   F7
(1)  846/    1AC8 : B9                             phi   F9
(1)  847/    1AC9 : 87                             glo   F7
(1)  848/    1ACA : A9                             plo   F9
(1)  849/    1ACB : 8E                             glo   R14
(1)  850/    1ACC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    1ACD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    1ACE : FF 02                          smi   2                     ; see if <2
(1)  853/    1AD0 : CB 1A E4                       lbnf  mul_nxt1              ; jump if so
(1)  854/    1AD3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    1AD4 : 17 72                          dw    fp_shr_1
(1)  856/    1AD6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    1AD7 : 17 A3                          dw    fp_shr_fd
(1)  858/    1AD9 : CB 1A E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    1ADC : 88                             glo   r8                    ; set high bit
(1)  860/    1ADD : F9 80                          ori   080h
(1)  861/    1ADF : A8                             plo   r8
(1)  862/    1AE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    1AE1 : C0 1A CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    1AE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    1AE5 : 72                             ldxa
(1)  866/    1AE6 : A7                             plo   F7
(1)  867/    1AE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    1AE8 : AC                             plo   R12
(1)  869/    1AE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    1AEA : CA 1A FC                       lbnz  mul_lp3a
(1)  871/    1AED : 8F                             glo   R15
(1)  872/    1AEE : CA 1A FC                       lbnz  mul_lp3a
(1)  873/    1AF1 : 9D                             ghi   R13
(1)  874/    1AF2 : CA 1A FC                       lbnz  mul_lp3a
(1)  875/    1AF5 : 8D                             glo   R13
(1)  876/    1AF6 : CA 1A FC                       lbnz  mul_lp3a
(1)  877/    1AF9 : C0 1B 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    1AFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    1AFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    1B00 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    1B03 : CB 1A E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    1B06 : 88                             glo   r8                    ; set high bit
(1)  883/    1B07 : F9 80                          ori   080h
(1)  884/    1B09 : A8                             plo   r8
(1)  885/    1B0A : C0 1A E9                       lbr   mul_lp3
(1)  886/    1B0D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    1B0E : BF                             phi   R15                    ; to high R15
(1)  888/    1B0F : C0 17 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    1B12 :                     
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 46 - 5/16/2013 14:54:56


(1)  890/    1B12 :                     ; ***************************************
(1)  891/    1B12 :                     ; *** Convert ascii to floating point ***
(1)  892/    1B12 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    1B12 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    1B12 :                     ; ***************************************
(1)  895/    1B12 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    1B13 : FF 20                          smi   ' '                   ; check for space
(1)  897/    1B15 : C2 1B 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    1B18 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    1B19 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    1B1A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    1B1C : CA 1B 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    1B1F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    1B21 : 73                             stxd                        ; place onto stack
(1)  904/    1B22 : 1F                             inc   R15                    ; move past sign
(1)  905/    1B23 : C0 1B 30                       lbr   atof_go1              ; and continue
(1)  906/    1B26 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    1B28 : 73                             stxd                        ; place onto stack
(1)  908/    1B29 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    1B2A : FF 2B                          smi   '+'
(1)  910/    1B2C : CA 1B 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    1B2F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    1B30 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    1B32 : B8                             phi   r8
(1)  914/    1B33 : A8                             plo   r8
(1)  915/    1B34 : B9                             phi   F9
(1)  916/    1B35 : A9                             plo   F9
(1)  917/    1B36 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    1B37 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    1B3A : CB 1B 67                       lbnf  atof_no1              ; jump if not
(1)  920/    1B3D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    1B3E : BA                             phi   R10
(1)  922/    1B3F : 88                             glo   r8
(1)  923/    1B40 : AA                             plo   R10
(1)  924/    1B41 : 99                             ghi   F9
(1)  925/    1B42 : BB                             phi   FB
(1)  926/    1B43 : 89                             glo   F9
(1)  927/    1B44 : AB                             plo   FB
(1)  928/    1B45 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    1B48 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    1B4B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    1B4E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    1B51 : 4F                             lda   R15                    ; get number
(1)  933/    1B52 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    1B54 : 52                             str   r2                    ; setup for add
(1)  935/    1B55 : 89                             glo   F9                    ; add in next digit
(1)  936/    1B56 : F4                             add
(1)  937/    1B57 : A9                             plo   F9
(1)  938/    1B58 : 99                             ghi   F9                    ; propagate carry
(1)  939/    1B59 : 7C 00                          adci  0
(1)  940/    1B5B : B9                             phi   F9
(1)  941/    1B5C : 88                             glo   r8
(1)  942/    1B5D : 7C 00                          adci  0
(1)  943/    1B5F : A8                             plo   r8
(1)  944/    1B60 : 98                             ghi   r8
(1)  945/    1B61 : 7C 00                          adci  0
(1)  946/    1B63 : B8                             phi   r8
(1)  947/    1B64 : C0 1B 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    1B67 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    1B68 : FF 2E                          smi   '.'
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 47 - 5/16/2013 14:54:56


(1)  950/    1B6A : CA 1B 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    1B6D : 1F                             inc   R15                    ; move past decimal
(1)  952/    1B6E : F8 1C               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    1B70 : BA                             phi   R10
(1)  954/    1B71 : F8 A3                          ldi   scratch&255
(1)  955/    1B73 : AA                             plo   R10
(1)  956/    1B74 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    1B76 : AC                             plo   R12
(1)  958/    1B77 : F8 00               atof_lpx:  ldi   0
(1)  959/    1B79 : 5A                             str   R10
(1)  960/    1B7A : 1A                             inc   R10
(1)  961/    1B7B : 2C                             dec   R12
(1)  962/    1B7C : 8C                             glo   R12
(1)  963/    1B7D : CA 1B 77                       lbnz  atof_lpx
(1)  964/    1B80 : F8 1C                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    1B82 : BA                             phi   R10
(1)  966/    1B83 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    1B85 : AA                             plo   R10
(1)  968/    1B86 : F8 01                          ldi   1                     ; setup count
(1)  969/    1B88 : AC                             plo   R12
(1)  970/    1B89 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    1B8B : BC                             phi   R12
(1)  972/    1B8C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    1B8D : FF 11                          smi   17
(1)  974/    1B8F : C2 1B A8                       lbz   atof_dn3              ; jump if so
(1)  975/    1B92 : 0F                             ldn   R15                    ; get character
(1)  976/    1B93 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    1B94 : 17 62                          dw    f_isnum
(1)  978/    1B96 : CB 1B A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    1B99 : 4F                             lda   R15                    ; get character
(1)  980/    1B9A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    1B9C : 5A                             str   R10                    ; write into bcd area
(1)  982/    1B9D : 1A                             inc   R10
(1)  983/    1B9E : 1C                             inc   R12                    ; increment count
(1)  984/    1B9F : CA 1B 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    1BA2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    1BA4 : BC                             phi   R12
(1)  987/    1BA5 : C0 1B 8C                       lbr   atof_lp2
(1)  988/    1BA8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    1BA9 : CA 1B C2                       lbnz  atof_nz
(1)  990/    1BAC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    1BAD : CA 1B C2                       lbnz  atof_nz
(1)  992/    1BB0 : 88                             glo   r8
(1)  993/    1BB1 : CA 1B C2                       lbnz  atof_nz
(1)  994/    1BB4 : 99                             ghi   F9
(1)  995/    1BB5 : CA 1B C2                       lbnz  atof_nz
(1)  996/    1BB8 : 89                             glo   F9
(1)  997/    1BB9 : CA 1B C2                       lbnz  atof_nz
(1)  998/    1BBC : 60                             irx                         ; recover sign
(1)  999/    1BBD : F0                             ldx
(1) 1000/    1BBE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    1BBF : C0 1C 95                       lbr	atof_end               ; and return
(1) 1002/    1BC2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    1BC4 : BC                             phi   R12
(1) 1004/    1BC5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    1BC6 : FA 80                          ani   080h
(1) 1006/    1BC8 : CA 1C 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    1BCB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    1BCE : F8 1C                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    1BD0 : BA                             phi   R10
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 48 - 5/16/2013 14:54:56


(1) 1010/    1BD1 : F8 A3                          ldi   255&scratch
(1) 1011/    1BD3 : AA                             plo   R10
(1) 1012/    1BD4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    1BD6 : 5A                             str   R10
(1) 1014/    1BD7 : F8 1C                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    1BD9 : BA                             phi   R10
(1) 1016/    1BDA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    1BDC : AA                             plo   R10
(1) 1018/    1BDD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    1BDF : AE                             plo   R14
(1) 1020/    1BE0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    1BE2 : AC                             plo   R12
(1) 1022/    1BE3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    1BE4 : 52                             str   r2                    ; in memory for add
(1) 1024/    1BE5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    1BE6 : F4                             add                         ; add in carry
(1) 1026/    1BE7 : 52                             str   r2                    ; place into memory
(1) 1027/    1BE8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    1BE9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    1BEA : 5A                             str   R10                    ; put it back
(1) 1030/    1BEB : FF 0A                          smi   10
(1) 1031/    1BED : CB 1B F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    1BF0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    1BF1 : F8 01                          ldi   1                     ; carry set to 1
(1) 1034/    1BF3 : C8                             lskp                        ; skip next instruction
(1) 1035/    1BF4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    1BF6 : AE                             plo   R14
(1) 1037/    1BF7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    1BF8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    1BF9 : 8C                             glo   R12                    ; see if done
(1) 1040/    1BFA : CA 1B E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    1BFD : F8 1C                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    1BFF : BA                             phi   R10
(1) 1043/    1C00 : F8 A3                          ldi   255&scratch
(1) 1044/    1C02 : AA                             plo   R10
(1) 1045/    1C03 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    1C04 : C2 1C 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    1C07 : 89                             glo   F9                    ; add in the carry
(1) 1048/    1C08 : F9 01                          ori   1
(1) 1049/    1C0A : A9                             plo   F9
(1) 1050/    1C0B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    1C0C : FC 01                          adi   1
(1) 1052/    1C0E : BC                             phi   R12
(1) 1053/    1C0F : C0 1B C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    1C12 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    1C13 : 52                             str   r2                    ; into memory
(1) 1056/    1C14 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    1C16 : F7                             sm
(1) 1058/    1C17 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    1C19 : BD                             phi   R13                    ; set aside
(1) 1060/    1C1A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    1C1B : A9                             plo   F9
(1) 1062/    1C1C : 88                             glo   r8
(1) 1063/    1C1D : B9                             phi   F9
(1) 1064/    1C1E : 98                             ghi   r8
(1) 1065/    1C1F : FE                             shl                         ; shift out high bit
(1) 1066/    1C20 : A8                             plo   r8
(1) 1067/    1C21 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    1C22 : F6                             shr
(1) 1069/    1C23 : B8                             phi   r8                    ; bits 1-7 into high byte
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 49 - 5/16/2013 14:54:56


(1) 1070/    1C24 : 88                             glo   r8                    ; get mantissa
(1) 1071/    1C25 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    1C26 : A8                             plo   r8                    ; and write it
(1) 1073/    1C27 : 60                             irx                         ; point to sign
(1) 1074/    1C28 : 98                             ghi   r8                    ; high byte
(1) 1075/    1C29 : F1                             or                          ; set sign
(1) 1076/    1C2A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    1C2B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    1C2C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    1C2E : C2 1C 37                       lbz   atof_exp
(1) 1080/    1C31 : 0F                             ldn   R15
(1) 1081/    1C32 : FF 45                          smi   'E'
(1) 1082/    1C34 : CA 1C 95                       lbnz  atof_end
(1) 1083/    1C37 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    1C38 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    1C39 : FF 2D                          smi   '-'
(1) 1086/    1C3B : C2 1C 48                       lbz   atof_n
(1) 1087/    1C3E : 0F                             ldn   R15
(1) 1088/    1C3F : FF 2B                          smi   '+'
(1) 1089/    1C41 : C2 1C 45                       lbz   atof_p
(1) 1090/    1C44 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    1C45 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    1C47 : C8                             lskp
(1) 1093/    1C48 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1094/    1C4A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    1C4B : 1F                             inc   R15                    ; move past sign
(1) 1096/    1C4C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    1C4E : AC                             plo   R12
(1) 1098/    1C4F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    1C50 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    1C53 : CB 1C 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    1C56 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    1C57 : 52                             str   r2
(1) 1103/    1C58 : F6                             shr                         ; multiply by 2
(1) 1104/    1C59 : F6                             shr                         ; by 4
(1) 1105/    1C5A : F4                             add                         ; by 5
(1) 1106/    1C5B : F6                             shr                         ; by 10
(1) 1107/    1C5C : 52                             str   r2                    ; put here for add
(1) 1108/    1C5D : 4F                             lda   R15                    ; recover number
(1) 1109/    1C5E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    1C60 : F4                             add                         ; add with total
(1) 1111/    1C61 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    1C62 : C0 1C 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    1C65 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    1C66 : C2 1C 95                       lbz   atof_end              ; jump if so
(1) 1115/    1C69 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    1C6A : 8C                             glo   R12                    ; save count
(1) 1117/    1C6B : 73                             stxd
(1) 1118/    1C6C : 9C                             ghi   R12                    ; save sign
(1) 1119/    1C6D : 73                             stxd
(1) 1120/    1C6E : 8F                             glo   R15
(1) 1121/    1C6F : 73                             stxd
(1) 1122/    1C70 : 9F                             ghi   R15
(1) 1123/    1C71 : 73                             stxd
(1) 1124/    1C72 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    1C74 : BA                             phi   R10
(1) 1126/    1C75 : F8 20                          ldi   020h
(1) 1127/    1C77 : AA                             plo   R10
(1) 1128/    1C78 : F8 00                          ldi   0
(1) 1129/    1C7A : BB                             phi   FB
 AS V1.42 Beta [Bld 87] - source file 8q.asm(LCC1802fp.inc) - page 50 - 5/16/2013 14:54:56


(1) 1130/    1C7B : AB                             plo   FB
(1) 1131/    1C7C : 9C                             ghi   R12
(1) 1132/    1C7D : C2 1C 86                       lbz   atof_div              ; jump if negative
(1) 1133/    1C80 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    1C83 : C0 1C 89                       lbr   atof_go5              ; clean up call
(1) 1135/    1C86 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    1C89 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    1C8A : 72                             ldxa
(1) 1138/    1C8B : BF                             phi   R15
(1) 1139/    1C8C : 72                             ldxa
(1) 1140/    1C8D : AF                             plo   R15
(1) 1141/    1C8E : 72                             ldxa
(1) 1142/    1C8F : BC                             phi   R12
(1) 1143/    1C90 : F0                             ldx
(1) 1144/    1C91 : AC                             plo   R12
(1) 1145/    1C92 : C0 1C 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    1C95 :                     atof_end:
(1) 1147/    1C95 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    1C96 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    1C9A : (MACRO)             	   popr R12	;wjr
(1) 1150/    1C9E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    1CA2 : (MACRO)             	   Cretn
(1) 1152/    1CA3 : 00 00               scratch:   db	00,00
    1309/    1CA5 :                     	include IO1802.inc
(1)    1/    1CA5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1CA5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1CA5 :                     	align 64
(1)    4/    1CC0 :                     _putc:
(1)    5/    1CC0 :                     _out5:	
(1)    6/    1CC0 : 8C                  	glo	regArg1
(1)    7/    1CC1 : 22                  	dec	sp
(1)    8/    1CC2 : 52                  	str	sp
(1)    9/    1CC3 : 65                  	out	5
(1)   10/    1CC4 : (MACRO)             	Cretn
(1)   11/    1CC5 :                     _inp:		;raw port input
(1)   12/    1CC5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    1CC5 : 22                  	dec	sp	;work backwards
(1)   14/    1CC6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    1CC8 : 73                  	stxd		
(1)   16/    1CC9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    1CCA : FA 07               	ani	0x07	;clean it
(1)   18/    1CCC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    1CCE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    1CD0 : 73                  	stxd		;store it for execution
(1)   21/    1CD1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    1CD5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    1CD6 : D8                  	sep	rt1	;execute it
(1)   24/    1CD7 :                     ;we will come back to here with the input byte in D
(1)   25/    1CD7 : 12                  	inc	sp	;step over the work area
(1)   26/    1CD8 : AF                  	plo	retVal	;save it to return
(1)   27/    1CD9 : F8 00               	ldi	0
(1)   28/    1CDB : BF                  	phi	retval	;clear top byte
(1)   29/    1CDC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    1CDD : 12                  	inc	sp	;and the D3
(1)   31/    1CDE : (MACRO)             	Cretn		;and we're done
(1)   32/    1CDF :                     	
(1)   33/    1CDF :                     _out:		;raw port output
(1)   34/    1CDF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    1CDF :                     		;this could be bolder:
(1)   36/    1CDF :                     		;store the program as 6x cc D5 where x is the port number and cc is the char
 AS V1.42 Beta [Bld 87] - source file 8q.asm(IO1802.inc) - page 51 - 5/16/2013 14:54:56


(1)   37/    1CDF :                     		;then SEP sp
(1)   38/    1CDF :                     		;the D5 would return to the calling program and finish fixing the stack.
(1)   39/    1CDF :                     		;saves 6 instrucrions but it's a bit tricky.
(1)   40/    1CDF : 22                  	dec	sp	;work backwards
(1)   41/    1CE0 : F8 D3               	ldi	0xD3	;return instruction
(1)   42/    1CE2 : 73                  	stxd		
(1)   43/    1CE3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the OUT instruction
(1)   44/    1CE7 : 8C                  	glo	regarg1	;get the port number
(1)   45/    1CE8 : FA 07               	ani	0x07	;clean it
(1)   46/    1CEA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   47/    1CEC : 73                  	stxd		;store it for execution
(1)   48/    1CED : 8D                  	glo	regarg2	;get the byte to be written
(1)   49/    1CEE : 52                  	str	sp	;store it where sp points
(1)   50/    1CEF : D8                  	sep	rt1	;execute it
(1)   51/    1CF0 :                     ;we will come back to here with sp stepped up by one
(1)   52/    1CF0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   53/    1CF1 : 12                  	inc	sp	;and the D3
(1)   54/    1CF2 : (MACRO)             	Cretn		;and we're done
(1)   55/    1CF3 :                     	
(1)   56/    1CF3 :                     	
    1310/    1CF3 :                     
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 52 - 5/16/2013 14:54:56


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    1807 C |  ADD_A2NZ :                    1818 C |
 ADD_FNL :                     18BF C |  ADD_LP1 :                     1862 C |
 ADD_LP1DN :                   1877 C |  ADD_NM :                      1886 C |
 ADD_NO :                      18A8 C |  ADD_NS :                      1850 C |
 ADD_NX :                      18EB C |  ADD_NZ :                      18DD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    1C86 C |
 ATOF_DN3 :                    1BA8 C |  ATOF_DN4 :                    1C12 C |
 ATOF_DN5 :                    1C65 C |  ATOF_END :                    1C95 C |
 ATOF_EXP :                    1C37 C |  ATOF_GO1 :                    1B30 C |
 ATOF_GO5 :                    1C89 C |  ATOF_LP1 :                    1B36 C |
 ATOF_LP2 :                    1B8C C |  ATOF_LP3 :                    1BC5 C |
 ATOF_LP4 :                    1BE3 C |  ATOF_LP5 :                    1C4F C |
 ATOF_LPX :                    1B77 C |  ATOF_N :                      1C48 C |
 ATOF_NC4 :                    1C0B C |  ATOF_NDP :                    1B6E C |
 ATOF_NM :                     1B26 C |  ATOF_NO1 :                    1B67 C |
 ATOF_NO4 :                    1BF4 C |  ATOF_NZ :                     1BC2 C |
 ATOF_P :                      1C45 C | *BIGENDIAN :                      0 - |
 BITLOOP185 :                  14B8 C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB183 :                1396 C |
 CKNEXT185 :                   1507 C |  CKTOP185 :                    14A3 C |
 CLRLP185 :                    1494 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       1700 C |  CVIF4 :                       1600 C |
*DATE :                   5/16/2013 - |  DCKLP185 :                    14BB C |
 DIVLOOP16_16180 :             1252 C | *DIVSETBIT16_16180 :           1284 C |
 DIVSKIP16_16180 :             1281 C |  DIVSKIPCLEAR16_16180 :        1288 C |
 DIVSKIPFINALADD16_16180 :     129A C |  DIVSUB16_16180 :              1273 C |
 DIV_A1NZ :                    1909 C |  DIV_A2NZ :                    1927 C |
 DIV_GO :                      198E C |  DIV_GO1 :                     197B C |
 DIV_LP :                      1968 C |  DIV_NOPE :                    19C9 C |
 DIV_Z :                       19DB C |  DNOADD185 :                   14C3 C |
 DONE181 :                     12D3 C |  DONE184 :                     1474 C |
 DONE185 :                     1511 C |  DONE191 :                     166F C |
 DONE192 :                     1761 C |  DSHLP185 :                    14D7 C |
 ENDLP182 :                    1361 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       176E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      17EE C |  FP_ADD_12 :                   178C C |
 FP_ATOF :                     1B12 C |  FP_DIV :                      18F8 C |
 FP_GETEXP :                   17DC C |  FP_GETSGN :                   17E7 C |
 FP_MUL :                      19EB C |  FP_SC_CLN :                   17C0 C |
 FP_SC_UP :                    17B0 C |  FP_SHL_1 :                    177F C |
 FP_SHR_1 :                    1772 C |  FP_SHR_FD :                   17A3 C |
 FP_SUB :                      18F1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     1762 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                            AE C |  L100 :                         E33 C |
 L101 :                         E38 C |  L102 :                         E88 C |
 L104 :                         E6C C |  L106 :                         BB6 C |
 L107 :                         BC5 C |  L108 :                         BA2 C |
 L11 :                         1131 C | *L110 :                         BF1 C |
*L111 :                         EEB C |  L112 :                        1089 C |
 L113 :                         EE8 C | *L114 :                         EE8 C |
*L116 :                         F74 C |  L117 :                         F1F C |
 L118 :                         F57 C |  L12 :                         10F9 C |
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 53 - 5/16/2013 14:54:56


 L120 :                         F70 C | *L121 :                         FD6 C |
 L122 :                         FAB C |  L123 :                         FC1 C |
*L125 :                        1024 C |  L126 :                        1000 C |
 L127 :                        100F C |  L13 :                         10A1 C |
*L14 :                          232 C |  L15 :                           CD C |
*L16 :                          21C C |  L19 :                          21C C |
 L2 :                          1185 C |  L23 :                          1B9 C |
 L24 :                          1C1 C | *L26 :                          292 C |
 L27 :                          24C C | *L28 :                          273 C |
 L3 :                            19 C |  L31 :                         109E C |
 L32 :                         109C C | *L33 :                          2C3 C |
 L34 :                          2AD C | *L35 :                          2AD C |
 L37 :                          2AF C | *L38 :                          2DE C |
 L39 :                          2D2 C | *L4 :                            43 C |
 L40 :                          2D4 C | *L42 :                          314 C |
 L43 :                          2F3 C |  L44 :                          30E C |
*L46 :                          603 C |  L47 :                          42E C |
 L48 :                          442 C |  L49 :                         1098 C |
 L50 :                         1094 C |  L51 :                          442 C |
 L53 :                          486 C |  L55 :                          5F7 C |
*L57 :                          7A1 C |  L58 :                          6DC C |
 L59 :                          6EC C |  L60 :                          6F5 C |
 L61 :                          779 C |  L63 :                          6FC C |
*L64 :                          6FC C |  L66 :                          709 C |
 L67 :                          768 C |  L7 :                            59 C |
 L70 :                          732 C | *L71 :                          882 C |
 L72 :                          83C C | *L74 :                          8D0 C |
*L75 :                          930 C | *L76 :                          9A3 C |
*L77 :                          A36 C |  L78 :                          A11 C |
 L79 :                          A36 C | *L8 :                            76 C |
*L80 :                          AB4 C | *L81 :                          EAB C |
 L82 :                          AFF C |  L83 :                          E99 C |
 L85 :                          B3B C |  L86 :                          E99 C |
 L87 :                          E88 C |  L88 :                          E99 C |
 L90 :                          C00 C |  L91 :                          C1D C |
 L92 :                          C3E C |  L93 :                          C60 C |
 L94 :                          CCE C |  L95 :                          E38 C |
 L97 :                          D2C C |  L99 :                          D5F C |
 LCC1802INIT :                 11B2 C | *LISTON :                         1 - |
 LOOP182 :                     130F C |  LSH192 :                      172B C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP183 :                    1377 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP178 :                     121E C |
 MULTLOOP16_16179 :            122B C |  MULTSKIP16_16179 :            123D C |
 MUL_DN :                      1ABA C |  MUL_GO1 :                     1A42 C |
 MUL_LP1 :                     1A32 C |  MUL_LP2 :                     1ACD C |
 MUL_LP2A :                    1AE0 C |  MUL_LP3 :                     1AE9 C |
 MUL_LP3A :                    1AFC C |  MUL_LP4 :                     1B0D C |
 MUL_NO :                      1A8F C |  MUL_NXT1 :                    1AE4 C |
*NESTMAX :                      100 - |  NORESTORE182 :                135D C |
 NXT191 :                      1630 C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      176B C |
 POS1181 :                     12B3 C |  POS1184 :                     1426 C |
 POS2181 :                     12C3 C |  POS2184 :                     144D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 54 - 5/16/2013 14:54:56


 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
*RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL6 :                            7 - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     1CA3 C |
 SETSGN191 :                   1668 C |  SGNPOS191 :                   1639 C |
 SHDN191 :                     165F C |  SHIFT183 :                    13AE C |
 SHL191 :                      164B C |  SHR192 :                      1719 C |
 SIGN192 :                     173B C |  SP :                             2 - |
*TIME :                    14:54:56 - | *TRUE :                           1 - |
 UPNXT185 :                    14F0 C | *VERSION :                     142F - |
 _00000170 :                   11CC C |  _CALL :                       1201 C |
 _DIE170 :                     11CF C |  _DIVI2 :                      12A4 C |
 _DIVI4 :                      1400 C |  _DIVU2 :                      1249 C |
 _DIVU4 :                      1300 C |  _DOWN :                       104D C |
 _DUBDABX :                    1475 C | *_EXIT :                        EC2 C |
 _FTOA :                        360 C | *_INP :                        1CC5 C |
 _ITOA :                        624 C |  _LTOA :                        7B8 C |
 _MAIN :                          3 C | *_MEMCMP :                      EF0 C |
*_MEMCPY :                      F85 C | *_MEMSET :                      FE3 C |
*_MODI2 :                      11E0 C | *_MODI4 :                      151E C |
*_MODU2 :                      11D8 C | *_MODU4 :                      1512 C |
 _MULT_NUMS :                   340 C | *_MULU2 :                      1223 C |
*_MULU4 :                      1366 C | *_ONEMS :                      121C C |
 _OUT :                        1CDF C | *_OUT4 :                       11E8 C |
*_OUT5 :                       1CC0 C |  _PRINT :                       23F C |
 _PRINTF :                      AB9 C |  _PRINTFLT :                    939 C |
 _PRINTINT :                    897 C |  _PRINTLINT :                   8D9 C |
 _PRINTSTR :                    2E3 C |  _PUTC :                       1CC0 C |
 _PUTX :                        A3B C |  _PUTXN :                       9AC C |
 _QUEENS :                       B7 C |  _RETURN :                     1212 C |
 _ROUND_NUMS :                  320 C |  _ROWS :                       103D C |
*_SETQOFF :                    11D6 C | *_SETQON :                     11D4 C |
 _STRCPY :                      29B C |  _STRLEN :                      2C6 C |
 _UP :                         106B C |  _X :                          102D C |
 __FORW10 :                    1CDC C | *__FORW11 :                    1CF0 C |

    318 symbols
     78 unused symbols

 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 55 - 5/16/2013 14:54:56


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU1                                 | JNZU2                                
JUMPV                                 | JZU1                                 
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     83 macros

 AS V1.42 Beta [Bld 87] - source file 8q.asm - page 56 - 5/16/2013 14:54:56


  codepages:
  ----------

STANDARD (0 changed characters)


0.23 seconds assembly time

   3850 lines source file
   9032 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
