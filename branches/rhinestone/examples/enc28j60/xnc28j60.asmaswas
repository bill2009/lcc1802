; generated by lcc-xr18ng $Version: 2.4 - XR18NO - The Optimized Birthday Compiler $ on Thu Mar 07 16:58:25 2013

SP:	equ	2 ;stack pointer
memAddr: equ	14
retAddr: equ	6
retVal:	equ	15
regArg1: equ	12
regArg2: equ	13
	listing off
	include lcc1802ProloNO.inc
	listing on
_PIN4:
	db 0
_mymac:
	db 116
	db 105
	db 105
	db 45
	db 48
	db 49
_myip:
	db 192
	db 168
	db 1
	db 191
_hisport:
	dw 80
_setup:
	reserve 8
;void setup () {
;  printf("\nEnc28j60 first try\n");
	ldaD R12,L2; reg:acon
	Ccall _printf
;  printf("MAC & IP ");
	ldaD R12,L3; reg:acon
	Ccall _printf
;  hexDump(mymac,6);
	ldaD R12,_mymac; reg:acon
	ldaD R13,6; reg:acon
	Ccall _hexDump
;  hexDump(myip,4);
	ldaD R12,_myip; reg:acon
	ldaD R13,4; reg:acon
	Ccall _hexDump
;  if (ethbegin(700) == 0)
	ldaD R12,700; reg:acon
	Ccall _ethbegin
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnzU2 r11,L4; NE 0
;    printf( "Failed to access Ethernet controller\n");
	ldaD R12,L6; reg:acon
	Ccall _printf
L4:
;  printf("readRegByte(ECON1) returns: %x\n",readRegByte(ECON1));
	ldaD R12,31; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L7; reg:acon
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _printf
;  printf("readRegByte(EREVID) returns: %x\n",(EREVID));
	ldaD R12,114; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L8; reg:acon
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _printf
;  printf("readRegByte(ESTAT) returns: %x\n",readRegByte(ESTAT));
	ldaD R12,29; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L9; reg:acon
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _printf
;  printf("MACtail readback: %x:%x\n",readRegByte(MAADR1),readRegByte(MAADR0));
	ldaD R12,224; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	st2 R11,'O',sp,(-4+10)
	ldaD R12,225; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	ldaD R12,L10; reg:acon
	ld2 R10,'O',sp,(-4+10)
	cpy1 R13,R10
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _printf
;  printf("and we're done\n");
	ldaD R12,L11; reg:acon
	Ccall _printf
;}
L1:
	release 8
	Cretn

_loop:
	reserve 8
;void loop () {
;  len = encpacketReceive();
	Ccall _encpacketReceive
	cpy2 R11,R15 ;LOADU2(reg)
	st2 R11,'O',sp,(-4+10); ASGNU2(addr,reg)
;  pos = tcppacketLoop(len);
	ld2 R12,'O',sp,(-4+10); INDIRU2(addr)
	Ccall _tcppacketLoop
	cpy2 R11,R15 ;LOADU2(reg)
	st2 R11,'O',sp,(-6+10); ASGNU2(addr,reg)
;}
L12:
	release 8
	Cretn

_main:
	reserve 4
;void main(){
;	asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
;	printf("encmule - watch my Q!\n");
	seq	;1 on Q de-activates ethernet chip
	ldaD R12,L15; reg:acon
	Ccall _printf
;	setup();
	Ccall _setup
	lbr L17
L16:
;	while(1){
;		loop();
	Ccall _loop
;	}
L17:
;	while(1){
	lbr L16
;}
L13:
	release 4
	Cretn

_strcpy:
	reserve 2
;{
;	char *save = to;
	st2 R12,'O',sp,(-4+4); ASGNP2
;	for (; (*to = *from) != 0; ++from, ++to);
	lbr L23
L20:
L21:
	inc R13
	inc R12
L23:
	ldn1 R11,R13;reg:  INDIRU1(indaddr)
	str1 R11,R12; ASGNU1(indaddr,reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnzU2 r11,L20; NE 0
;	return(save);
	ld2 R15,'O',sp,(-4+4)
L19:
	release 2
	Cretn

_printstr:
	reserve 0; save room for local variables
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
;void printstr(char *ptr){
	lbr L26
L25:
;    while(*ptr) out(5,*ptr++);
	ldaD R12,5; reg:acon
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	inc R7
	ld1 R13,'O',R11,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _out
L26:
	ld1 R11,'O',R7,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L25; NE 0
;}
L24:
	release 4; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_itoa:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag1 
;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
;	unsigned int flag=0;
	ld2z R11
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;	char * bptr; bptr=buffer;
	ld2 R11,'O',sp,(2+16)
	st2 R11,'O',sp,(-6+16); ASGNP2
;	if (s<0){
	ld2 R11,'O',sp,(0+16)
	jcI2I r11,0,lbdf,L29; GE is flipped test from LT
;		*bptr='-';bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16)
	inc R11
	st2 R11,'O',sp,(-6+16); ASGNP2
;		n=-s;
	ld2 R11,'O',sp,(0+16)
	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
	cpy2 R1,R11 ;LOADU2(reg)
;	} else{
	lbr L30
L29:
;		n=s;
	ld2 R11,'O',sp,(0+16)
	cpy2 R1,R11 ;LOADU2(reg)
;	}
L30:
;	k=10000;
	ldaD R7,10000; reg:acon
	lbr L32
L31:
;	while(k>0){
;		for(r=0;k<=n;r++,n-=k); // was r=n/k
	ld2z R0
	lbr L37
L34:
L35:
	inc R0
	alu2 R1,R1,R7,sm,smb
L37:
	jcU2 r1,r7,lbdf,L34 ;LE is flipped test & operands
;		if (flag || r>0||k==1){
	ld2 R11,'O',sp,(-4+16); INDIRU2(addr)
	jnzU2 r11,L41; NE 0
	jnzU2 r0,L41; NE 0
	jneU2I r7,1,L38; NE
L41:
;			*bptr=('0'+r);bptr++;
	ld2 R11,'O',sp,(-6+16)
	ldA2 R10,'O',R0,(48); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
	ld2 R11,'O',sp,(-6+16)
	inc R11
	st2 R11,'O',sp,(-6+16); ASGNP2
;			flag='y';
	ldaD R11,121; reg:acon
	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)
;		}
L38:
;		k=k/10;
	cpy2 R12,R7 ;LOADU2(reg)
	ldaD R13,10; reg:acon
	Ccall _divu2
	cpy2 R11,R15 ;LOADU2(reg)
	cpy2 R7,R11 ;LOADU2(reg)
;	}
L32:
;	while(k>0){
	jnzU2 r7,L31; NE 0
;	*bptr='\0';
	ld2 R11,'O',sp,(-6+16)
	ldaD R10,0; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;	return buffer;
	ld2 R15,'O',sp,(2+16)
L28:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_ltoa:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
	cpy4 RL0,RL12; halfbaked
;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
;	char* bptr=buffer;
	ld2 R7,'O',sp,(4+14)
;	if (s<0){
	ldI4 RL10,0 ;loading a long integer constant
	jcI4 RL0,RL10,lbdf,L43; GE is flipped test from LT
;		*bptr++='-';
	cpy2 R11,R7 ;LOADP2(reg)
	cpy2 R7,R11
	inc R7
	ldaD R10,45; reg:acon
	str1 R10,R11; ASGNU1(indaddr,reg)
;		s=-s;
	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
;	}
L43:
;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
	cpy4 Rp1p2,RL0; LOADI4*
	st2 r7,'O',sp,(4); arg+f**
	Ccall _dubdabx
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R7 ;LOADP2(reg)
	cpy2 R13,R11 ;LOADP2(reg)
	Ccall _strcpy
;	return buffer;
	ld2 R15,'O',sp,(4+14)
L42:
	release 6; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_printint:
	reserve 12
	st2 r12,'O',sp,(14); flag1 
;void printint(int s){ //print an integer
;	itoa(s,buffer);
	ld2 R12,'O',sp,(0+14)
	ldA2 R13,'O',sp,(-10+14); reg:addr
	Ccall _itoa
;	printstr(buffer);
	ldA2 R12,'O',sp,(-10+14); reg:addr
	Ccall _printstr
;}
L45:
	release 12
	Cretn

_printlint:
	reserve 18
	st2 r12,'O',sp,(20); flag1 
	st2 r13,'O',sp,(22); flag1 
;void printlint(long s){ //print a long integer
;	printstr(ltoa(s,buffer));
	ld4 Rp1p2,'O',sp,(0+20)
	ldA2 R11,'O',sp,(-14+20); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	Ccall _ltoa
	cpy2 R11,R15 ;LOADP2(reg)
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;}
L46:
	release 18
	Cretn

_putxn:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putxn(unsigned char x){ //print a nibble as ascii hex
;	if (x<10){
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jcI2I r11,10,lbdf,L48; GE is flipped test from LT
;		putc(x+'0');
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(48); reg:addr
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putc
;	} else {
	lbr L49
L48:
;		putc(x+'A'-10);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(65); reg:addr
	alu2I R11,R11,10,smi,smbi
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putc
;	}
L49:
;}
L47:
	release 4
	Cretn

_putx:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
;void putx(unsigned char x){ //print a unsigned char as ascii hex
;	putxn(x>>4);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putxn
;	putxn(x & 0x0F);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,15,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putxn
;}
L50:
	release 4
	Cretn

_printf:
	reserve 4; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	st2 r12,'O',sp,(16); flag1 
	st2 r13,'O',sp,(18); flag2
;void printf(char *ptr,...){ //limited implementation of printf
;	int argslot=0;	//used to align longs
	ld2z R0
;	int * this=(int *)&ptr;
	ldA2 R1,'O',sp,(0+16); reg:addr
;	this++; argslot++; //advance argument pointer and slot #
	incm R1,2
	incm R0,1
	lbr L53
L52:
;    while(*ptr) {
;		c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	cpy2 R10,R11
	inc R10
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;		if (c!='%'){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jeqU2I r11,37,L55;EQI2(reg,con)
;			putc(c);
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putc
;		} else{
	lbr L56
L55:
;			c=*ptr++;
	ld2 R11,'O',sp,(0+16)
	cpy2 R10,R11
	inc R10
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R7,R11;reg:  INDIRU1(indaddr)
;			switch (c){
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	st2 R11,'O',sp,(-5+16)
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,105,L60;EQI2(reg,con)
	ldaD R10,108; reg:acon
	jeqI2 r11,r10,L64; EQI2(reg,reg)
	jcI2 r10,r11,lbnf,L72 ;GT is reversed operands from LT
L71:
	ld2 R11,'O',sp,(-5+16)
	ldaD R10,88; reg:acon
	jeqI2 r11,r10,L63; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L57; LT=lbnf i.e. subtract B from A and jump if borrow 
L73:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,99,L62;EQI2(reg,con)
	jeqU2I r11,100,L60;EQI2(reg,con)
	lbr L57
L72:
	ld2 R11,'O',sp,(-5+16)
	ldaD R10,115; reg:acon
	jeqI2 r11,r10,L61; EQI2(reg,reg)
	jcI2 r11,r10,lbnf,L57; LT=lbnf i.e. subtract B from A and jump if borrow 
L74:
	ld2 R11,'O',sp,(-5+16)
	jeqU2I r11,120,L63;EQI2(reg,con)
	lbr L57
L60:
;					printint(*this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R12,'O',R11,0
	Ccall _printint
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L58
L61:
;					printstr((char*) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0
	cpy2 R12,R11 ;LOADP2(reg)
	Ccall _printstr
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L58
L62:
;					putc((unsigned int) *this++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putc
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L58
L63:
;					putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;					putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;					argslot+=1; //next argument slot
	incm R0,1
;					break;
	lbr L58
L64:
;					if (*ptr){ //as long as there's something there
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L65; EQ 0
;						xord=*ptr++;
	ld2 R11,'O',sp,(0+16)
	cpy2 R10,R11
	inc R10
	st2 R10,'O',sp,(0+16); ASGNP2
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+16); ASGNU1
;						if (argslot&1) {
	alu2I R11,R0,1,ani,ani
	;removed ?	cpy2 R11,R0
	jzU2 r11,L67; EQ 0
;							this++;
	incm R1,2
;							argslot++;
	incm R0,1
;						}
L67:
;						if(xord=='d'){
	ld1 R11,'O',sp,(-3+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,100,L69; NE
;							printlint(*(long *)this);//treats "this" as a pointer to long
	ld4 Rp1p2,'O',R1,0
	Ccall _printlint
;							this+=2;				// and advances it 4 bytes
	incm R1,4
;						} else{
	lbr L70
L69:
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this)>>8);
	ld2 R11,'O',R1,0
	shrU2I R11,8
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;							putx(((unsigned int) *this++)&255);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	incm R1,2
	ld2 R11,'O',R11,0
	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putx
;						}
L70:
;						argslot+=2;
	incm R0,2
;						break;
	lbr L58
L65:
L57:
;					putc('%');putc(c);
	ldaD R12,37; reg:acon
	Ccall _putc
	cpy1 R12,R7
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _putc
;			} //switch
L58:
;		} //%
L56:
;	} //while
L53:
;    while(*ptr) {
	ld2 R11,'O',sp,(0+16)
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L52; NE 0
;} //prtf
L51:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 4; release room for local variables 
	Cretn

_exit:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
;void exit(int code){
;	printf("exit %d\n",code);
	ldaD R12,L76; reg:acon
	ld2 R13,'O',sp,(0+6)
	Ccall _printf
L77:
;	while(1);
L78:
	lbr L77
;}
L75:
	release 4
	Cretn

_memcmp:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+10); INDIRU2(addr)
;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
;    int v = 0;
	ld2z R1
;    p1 = (unsigned char *)Ptr1;
	cpy2 R0,R12 ;LOADP2(reg)
;    p2 = (unsigned char *)Ptr2;
	st2 R13,'O',sp,(-4+10); ASGNP2
	lbr L82
L81:
;    while(Count-- > 0 && v == 0) {
;        v = *(p1++) - *(p2++);
	cpy2 R11,R0 ;LOADP2(reg)
	cpy2 R0,R11
	inc R0
	ld2 R10,'O',sp,(-4+10)
	cpy2 R9,R10
	inc R9
	st2 R9,'O',sp,(-4+10); ASGNP2
	ld1 R11,'O',R11,0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',R10,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R1,R11,R10,sm,smb
;    }
L82:
;    while(Count-- > 0 && v == 0) {
	cpy2 R11,R7 ;LOADU2(reg)
	alu2I R7,R11,1,smi,smbi
	jeqU2I r11,0,L84;EQU2(reg,con)
	jzU2 r1,L81; EQ 0
L84:
;    return v;
	cpy2 R15,R1 ;LOADI2(reg)
L80:
	release 0; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_memcpy:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+8); INDIRU2(addr)
;void* memcpy(void* dest, const void* src, unsigned int count) {
;        char* dst8 = (char*)dest;
	cpy2 R1,R12 ;LOADP2(reg)
;        char* src8 = (char*)src;
	cpy2 R0,R13 ;LOADP2(reg)
	lbr L87
L86:
;        while (count--) {
;            *dst8++ = *src8++;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	inc R1
	cpy2 R10,R0 ;LOADP2(reg)
	cpy2 R0,R10
	inc R0
	ldn1 R10,R10;reg:  INDIRU1(indaddr)
	str1 R10,R11; ASGNU1(indaddr,reg)
;        }
L87:
;        while (count--) {
	cpy2 R11,R7 ;LOADU2(reg)
	alu2I R7,R11,1,smi,smbi
	jnzU2 r11,L86; NE 0
;        return dest;
	cpy2 R15,R12 ;LOADP2(reg)
L85:
	release 0; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_memset:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+6); INDIRU2(addr)
;{
;    unsigned char* p=s;
	cpy2 R1,R12 ;LOADP2(reg)
	lbr L91
L90:
;        *p++ = (unsigned char)c;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	inc R1
	cpy2 R10,R13 ;LOADU2(reg)
	str1 R10,R11; ASGNU1(indaddr,reg)
L91:
;    while(n--)
	cpy2 R11,R7 ;LOADU2(reg)
	alu2I R7,R11,1,smi,smbi
	jnzU2 r11,L90; NE 0
;    return s;
	cpy2 R15,R12 ;LOADP2(reg)
L89:
	release 0; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_delay:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;void delay(unsigned int howlong){
;	for (i=1;i!=howlong;i++){
	ldaD R1,1; reg:acon
	lbr L97
L94:
;		oneMs();
	Ccall _oneMs
;	}
L95:
;	for (i=1;i!=howlong;i++){
	inc R1
L97:
	jneU2 r1,r7,L94; NE
;}
L93:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_olduinoincluder:
;void olduinoincluder(){
;	asm("\tinclude olduino.inc\n");
	include olduino.inc
;}
L98:
	Cretn

_enableChip:
	reserve 4
; void enableChip () {
;  digitalWrite(sck,LOW); //make sure the clock is low
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;  asm("	req	;0 on Q activates ethernet chip\n"); //digitalWrite(encss,LOW); //activate the chip select
	req	;0 on Q activates ethernet chip
;}
L100:
	release 4
	Cretn

_disableChip:
; void disableChip () {
;  asm("	seq	;1 on Q de-activates ethernet chip\n"); //digitalWrite(encss,HIGH); //deactivate the chip select
	seq	;1 on Q de-activates ethernet chip
;}
L102:
	Cretn

_SetBank:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+8)
	st1 R11,'O',sp,(0+8); ASGNU1
; void SetBank (uint8_t address) {
;  if ((address & BANK_MASK) != Enc28j60Bank) {
	ld1 R11,'O',sp,(0+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,96,ani,ani
	;removed ?	cpy2 R11,R11
	ld1 R10,'D',(_Enc28j60Bank),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqI2 r11,r10,L105; EQI2(reg,reg)
;    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
	ldaD R12,160; reg:acon
	ldaD R13,31; reg:acon
	ldaD R11,3; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    Enc28j60Bank = address & BANK_MASK;
	ld1 R11,'O',sp,(0+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,96,ani,ani
	;removed ?	cpy2 R11,R11
	st1 R11,'D',(_Enc28j60Bank),0; ASGNU1
;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
	ldaD R12,128; reg:acon
	ldaD R13,31; reg:acon
	ld1 R11,'D',(_Enc28j60Bank),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,5
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;  }
L105:
;}
L104:
	release 6
	Cretn

_xferSPI:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(1030) 1
;uint8_t xferSPI(uint8_t value){
;  for(i=0;i<8;i++){
	ld2z R1
L108:
;    digitalWrite(mosi,(value&0x80));      //by setting mosi for each bit
	ldaD R12,7; reg:acon
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _digitalWrite
;    value=(value<<1)|digitalRead(miso);;
	ldaD R12,15; reg:acon
	Ccall _digitalRead
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R10,R7
	zExt 10 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	shl2I R10,1
	alu2 R11,R10,R11,or,or
	cpy1 R7,R11;LOADU1(reg)
;    digitalWrite(sck,HIGH);              //then pulsing the clock
	ldaD R12,5; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;    digitalWrite(sck,LOW);
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;  }
L109:
;  for(i=0;i<8;i++){
	incm R1,1
	jcI2I r1,8,lbnf,L108  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
;  return value;
	cpy1 R15,R7
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L107:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_readOp:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(0+8)
	st1 R11,'O',sp,(0+8); ASGNU1
	ld2 R11,'O',sp,(2+8)
	st1 R11,'O',sp,(2+8); ASGNU1
;uint8_t readOp(uint8_t op,uint8_t address){
;  enableChip();
	Ccall _enableChip
;  xferSPI(op | (address & ADDR_MASK));
	ld1 R11,'O',sp,(0+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',sp,(2+8)
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,31,ani,ani
	;removed ?	cpy2 R10,R10
	alu2 R11,R11,R10,or,or
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _xferSPI
;  if (address & 0x80)
	ld1 R11,'O',sp,(2+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L113; EQ 0
;    result=xferSPI(00);  //dummy byte if needed
	ld2z R12
	Ccall _xferSPI
	cpy2 R11,R15 ;LOADI2(reg)
	st1 R11,'O',sp,(-3+8); ASGNU1
L113:
;  result=xferSPI(0x00); //then read the result
	ld2z R12
	Ccall _xferSPI
	cpy2 R11,R15 ;LOADI2(reg)
	st1 R11,'O',sp,(-3+8); ASGNU1
;  disableChip();
	Ccall _disableChip
;  return result;
	ld1 R15,'O',sp,(-3+8)
	zExt R15 ;CVUI2: widen unsigned char to signed int (zero extend)
L112:
	release 6
	Cretn

_writeOp:
	reserve 8
	st2 r12,'O',sp,(10); flag1 
	st2 r13,'O',sp,(12); flag1 
	ld2 R11,'O',sp,(0+10)
	st1 R11,'O',sp,(0+10); ASGNU1
	ld2 R11,'O',sp,(2+10)
	st1 R11,'O',sp,(2+10); ASGNU1
	ld2 R11,'O',sp,(4+10)
	st1 R11,'O',sp,(4+10); ASGNU1
;void writeOp(uint8_t op, uint8_t address, uint8_t data){
;  enableChip();
	Ccall _enableChip
;  xferSPI(op|(address& ADDR_MASK));
	ld1 R11,'O',sp,(0+10)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',sp,(2+10)
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,31,ani,ani
	;removed ?	cpy2 R10,R10
	alu2 R11,R11,R10,or,or
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _xferSPI
;  xferSPI(data);
	ld1 R12,'O',sp,(4+10)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _xferSPI
;  disableChip();
	Ccall _disableChip
;}
L115:
	release 8
	Cretn

_readRegByte:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
; uint8_t readRegByte (uint8_t address) {
;    SetBank(address);
	ld1 R12,'O',sp,(0+6)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SetBank
;    return readOp(ENC28J60_READ_CTRL_REG, address);
	ld2z R12
	ld1 R13,'O',sp,(0+6)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _readOp
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L116:
	release 4
	Cretn

_writeRegByte:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(0+8)
	st1 R11,'O',sp,(0+8); ASGNU1
	ld2 R11,'O',sp,(2+8)
	st1 R11,'O',sp,(2+8); ASGNU1
; void writeRegByte (uint8_t address, uint8_t data) {
;    SetBank(address);
	ld1 R12,'O',sp,(0+8)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _SetBank
;    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
	ldaD R12,64; reg:acon
	ld1 R13,'O',sp,(0+8)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'O',sp,(2+8)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;}
L117:
	release 6
	Cretn

_writeReg:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
; void writeReg(uint8_t address, uint16_t data) {
;    writeRegByte(address, data);
	ld1 R12,'O',sp,(0+6)
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld2 R11,'O',sp,(2+6); INDIRU2(addr)
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(address + 1, data >> 8);
	ld1 R11,'O',sp,(0+6)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	incm R11,1
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld2 R11,'O',sp,(2+6); INDIRU2(addr)
	shrU2I R11,8
	cpy1 R13,R11
	zExt 13 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;}
L118:
	release 4
	Cretn

_writePhy:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
; void writePhy (uint8_t address, uint16_t data) {
;    writeRegByte(MIREGADR, address);
	ldaD R12,212; reg:acon
	ld1 R13,'O',sp,(0+6)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeReg(MIWR, data);
	ldaD R12,214; reg:acon
	ld2 R13,'O',sp,(2+6); INDIRU2(addr)
	Ccall _writeReg
L120:
;        ;
L121:
;    while (readRegByte(MISTAT) & MISTAT_BUSY)
	ldaD R12,234; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,1,ani,ani
	;removed ?	cpy2 R11,R11
	jnzU2 r11,L120; NE 0
;}
L119:
	release 4
	Cretn

_ethbegin:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6); INDIRU2(addr)
	st2 R11,'O',sp,(0+6); ASGNU2(addr,reg)
;uint8_t ethbegin (const uint16_t size) {
;  return encinitialize(size, mymac);
	ld2 R12,'O',sp,(0+6); INDIRU2(addr)
	ldaD R13,_mymac; reg:acon
	Ccall _encinitialize
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L123:
	release 4
	Cretn

_encinitSPI:
	reserve 4
;void encinitSPI () {
;    digitalWrite(mosi, HIGH);
	ldaD R12,7; reg:acon
	ldaD R13,1; reg:acon
	Ccall _digitalWrite
;    digitalWrite(mosi, LOW);
	ldaD R12,7; reg:acon
	ld2z R13
	Ccall _digitalWrite
;    digitalWrite(sck, LOW);
	ldaD R12,5; reg:acon
	ld2z R13
	Ccall _digitalWrite
;}
L124:
	release 4
	Cretn

_encinitialize:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 6; save room for outgoing arguments
	st2 r12,'O',sp,(12); flag1 
	cpy2 r7,r13; function(2055) 1
;uint8_t encinitialize (uint16_t size, const uint8_t* macaddr) {
;    bufferSize = size;
	ld2 R11,'O',sp,(0+12); INDIRU2(addr)
	st2 R11,'D',(_bufferSize),0; ASGNU2(addr,reg)
;    encinitSPI();
	Ccall _encinitSPI
;    disableChip();
	Ccall _disableChip
;    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
	ldaD R11,255; reg:acon
	cpy2 R12,R11 ;LOADI2(reg)
	ld2z R13
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
L126:
;        ;
L127:
;    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
	ld2z R12
	ldaD R13,29; reg:acon
	Ccall _readOp
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnzU2 r11,L130; NE 0
	ldaD R1,1; reg:acon
	lbr L131
L130:
	ld2z R1
L131:
	alu2I R11,R1,1,ani,ani
	;removed ?	cpy2 R11,R1
	jnzU2 r11,L126; NE 0
;    gNextPacketPtr = RXSTART_INIT;
	ld2z R11
	st2 R11,'D',(_gNextPacketPtr),0
;    writeReg(ERXST, RXSTART_INIT);
	ldaD R12,8; reg:acon
	ld2z R13
	Ccall _writeReg
;    writeReg(ERXRDPT, RXSTART_INIT);
	ldaD R12,12; reg:acon
	ld2z R13
	Ccall _writeReg
;    writeReg(ERXND, RXSTOP_INIT);
	ldaD R12,10; reg:acon
	ldaD R13,3071; reg:acon
	Ccall _writeReg
;    writeReg(ETXST, TXSTART_INIT);
	ldaD R12,4; reg:acon
	ldaD R13,3072; reg:acon
	Ccall _writeReg
;    writeReg(ETXND, TXSTOP_INIT);
	ldaD R12,6; reg:acon
	ldaD R13,4607; reg:acon
	Ccall _writeReg
;    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
	ldaD R12,56; reg:acon
	ldaD R13,176; reg:acon
	Ccall _writeRegByte
;    writeReg(EPMM0, 0x303f);
	ldaD R12,40; reg:acon
	ldaD R13,12351; reg:acon
	Ccall _writeReg
;    writeReg(EPMCS, 0xf7f9);
	ldaD R12,48; reg:acon
	ldaD R13,0xf7f9; reg:acon
	Ccall _writeReg
;    writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
	ldaD R12,192; reg:acon
	ldaD R13,13; reg:acon
	Ccall _writeRegByte
;    writeRegByte(MACON2, 0x00);
	ldaD R12,193; reg:acon
	ld2z R13
	Ccall _writeRegByte
;    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
	ldaD R12,128; reg:acon
	ldaD R13,194; reg:acon
	ldaD R11,50; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    writeReg(MAIPG, 0x0C12);
	ldaD R12,198; reg:acon
	ldaD R13,3090; reg:acon
	Ccall _writeReg
;    writeRegByte(MABBIPG, 0x12);
	ldaD R12,196; reg:acon
	ldaD R13,18; reg:acon
	Ccall _writeRegByte
;    writeReg(MAMXFL, MAX_FRAMELEN);
	ldaD R12,202; reg:acon
	ldaD R13,1500; reg:acon
	Ccall _writeReg
;    writeRegByte(MAADR5, macaddr[0]);
	ldaD R12,228; reg:acon
	ld1 R13,'O',R7,0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MAADR4, macaddr[1]);
	ldaD R12,229; reg:acon
	ld1 R13,'O',R7,(1)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MAADR3, macaddr[2]);
	ldaD R12,226; reg:acon
	ld1 R13,'O',R7,(2)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MAADR2, macaddr[3]);
	ldaD R12,227; reg:acon
	ld1 R13,'O',R7,(3)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MAADR1, macaddr[4]);
	ldaD R12,224; reg:acon
	ld1 R13,'O',R7,(4)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MAADR0, macaddr[5]);
	ldaD R12,225; reg:acon
	ld1 R13,'O',R7,(5)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writePhy(PHCON2, PHCON2_HDLDIS);
	ldaD R12,16; reg:acon
	ldaD R13,256; reg:acon
	Ccall _writePhy
;    SetBank(ECON1);
	ldaD R12,31; reg:acon
	Ccall _SetBank
;    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	ldaD R12,128; reg:acon
	ldaD R13,27; reg:acon
	ldaD R11,192; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
	ldaD R12,128; reg:acon
	ldaD R13,31; reg:acon
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    return readRegByte(EREVID);
	ldaD R12,114; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L125:
	release 6; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_encpacketReceive:
	reserve 10; save room for local variables
	pushr r7
	reserve 6; save room for outgoing arguments
;uint16_t encpacketReceive() {
;    uint16_t len = 0;
	ld2z R7
;    if (readRegByte(EPKTCNT) > 0) {
	ldaD R12,57; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnI2I r11,0,lbdf,L134 ;LEI2 0 11 L134; LE is flipped test & subtraction
;        writeReg(ERDPT, gNextPacketPtr);
	ld2z R12
	ld2 R11,'D',(_gNextPacketPtr),0
	cpy2 R13,R11 ;LOADU2(reg)
	Ccall _writeReg
;        readBuf(sizeof header, (uint8_t*) &header);
	ldaD R12,6; reg:acon
	ldA2 R13,'O',sp,(-8+20); reg:addr
	Ccall _readBuf
;        headernextPacket=header.nextPacketL+(header.nextPacketH<<8); //assemble next packet pointer
	ld1 R11,'O',sp,(-8+20)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',sp,(-7+20)
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R10,8
	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
	st2 R11,'O',sp,(-10+20); ASGNU2(addr,reg)
;        headerbyteCount=header.byteCountL+(header.byteCountH<<8); //assemble byte count
	ld1 R11,'O',sp,(-6+20)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R10,'O',sp,(-5+20)
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R10,8
	alu2 R11,R11,R10,add,adc; ADDI2(r,r)
	st2 R11,'O',sp,(-12+20); ASGNU2(addr,reg)
;        gNextPacketPtr  = headernextPacket;
	ld2 R11,'O',sp,(-10+20); INDIRU2(addr)
	st2 R11,'D',(_gNextPacketPtr),0
;        len = headerbyteCount - 4; //remove the CRC count
	ld2 R11,'O',sp,(-12+20); INDIRU2(addr)
	alu2I R7,R11,4,smi,smbi
;        if (len>bufferSize-1)
	ld2 R11,'D',(_bufferSize),0; INDIRU2(addr)
	alu2I R11,R11,1,smi,smbi
	jcU2 r11,r7,lbdf,L139 ;LE is flipped test & operands
;            len=bufferSize-1;
	ld2 R11,'D',(_bufferSize),0; INDIRU2(addr)
	alu2I R7,R11,1,smi,smbi
L139:
;        if ((header.statusL & 0x80)==0)
	ld1 R11,'O',sp,(-4+20)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,128,ani,ani
	;removed ?	cpy2 R11,R11
	jnzU2 r11,L141; NE 0
;            len = 0;
	ld2z R7
	lbr L142
L141:
;            readBuf(len, buffer);
	cpy2 R12,R7 ;LOADU2(reg)
	ldaD R13,_buffer; reg:acon
	Ccall _readBuf
L142:
;        buffer[len] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'O',R7,(_buffer); ASGNU1
;        if (gNextPacketPtr - 1 > RXSTOP_INIT)
	ld2 R11,'D',(_gNextPacketPtr),0
	alu2I R11,R11,1,smi,smbi
	jnI2I r11,3071,lbdf,L144 ;LEI2 3071 11 L144; LE is flipped test & subtraction
;            writeReg(ERXRDPT, RXSTOP_INIT);
	ldaD R12,12; reg:acon
	ldaD R13,3071; reg:acon
	Ccall _writeReg
	lbr L145
L144:
;            writeReg(ERXRDPT, gNextPacketPtr - 1);
	ldaD R12,12; reg:acon
	ld2 R11,'D',(_gNextPacketPtr),0
	alu2I R11,R11,1,smi,smbi
	cpy2 R13,R11 ;LOADU2(reg)
	Ccall _writeReg
L145:
;        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	ldaD R12,128; reg:acon
	ldaD R13,30; reg:acon
	ldaD R11,64; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    }
L134:
;    return len;
	cpy2 R15,R7 ;LOADU2(reg)
L132:
	release 6; save room for outgoing arguments
	popr r7
	release 10; release room for local variables 
	Cretn

_readBuf:
	reserve 0; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
	cpy2 r1,r13; function(2055) 1
; void readBuf(uint16_t len, uint8_t* data) {
;    enableChip();
	Ccall _enableChip
;    xferSPI(ENC28J60_READ_BUF_MEM);
	ldaD R12,58; reg:acon
	Ccall _xferSPI
	lbr L148
L147:
;    while (len--) {
;        x=xferSPI(0x00);
	ld2z R12
	Ccall _xferSPI
	cpy2 R11,R15 ;LOADI2(reg)
	cpy1 R0,R11;LOADU1(reg)
;        *data++ = x;
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	inc R1
	str1 R0,R11; ASGNU1(indaddr,reg)
;    }
L148:
;    while (len--) {
	cpy2 R11,R7 ;LOADU2(reg)
	alu2I R7,R11,1,smi,smbi
	jnzU2 r11,L147; NE 0
;    disableChip();
	Ccall _disableChip
;}
L146:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 0; release room for local variables 
	Cretn

_writeBuf:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
	cpy2 r1,r13; function(2055) 1
; void writeBuf(uint16_t len, const uint8_t* data) {
;    enableChip();
	Ccall _enableChip
;    xferSPI(ENC28J60_WRITE_BUF_MEM);
	ldaD R12,122; reg:acon
	Ccall _xferSPI
	lbr L152
L151:
;        xferSPI(*data++);
	cpy2 R11,R1 ;LOADP2(reg)
	cpy2 R1,R11
	inc R1
	ld1 R12,'O',R11,0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _xferSPI
L152:
;    while (len--)
	cpy2 R11,R7 ;LOADU2(reg)
	alu2I R7,R11,1,smi,smbi
	jnzU2 r11,L151; NE 0
;    disableChip();
	Ccall _disableChip
;}
L150:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_encpacketSend:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
;void encpacketSend(uint16_t len) {
	lbr L156
L155:
;        if (readRegByte(EIR) & EIR_TXERIF) {
	ldaD R12,28; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,2,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L158; EQ 0
;            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
	ldaD R11,128; reg:acon
	cpy2 R12,R11 ;LOADI2(reg)
	ldaD R13,31; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
	ldaD R12,160; reg:acon
	ldaD R13,31; reg:acon
	ldaD R11,128; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;        }
L158:
L156:
;    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
	ld2z R12
	ldaD R13,31; reg:acon
	Ccall _readOp
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,8,ani,ani
	;removed ?	cpy2 R11,R11
	jnzU2 r11,L155; NE 0
;    writeReg(EWRPT, TXSTART_INIT);
	ldaD R12,2; reg:acon
	ldaD R13,3072; reg:acon
	Ccall _writeReg
;    writeReg(ETXND, TXSTART_INIT+len);
	ldaD R12,6; reg:acon
	ld2 R11,'O',sp,(0+8); INDIRU2(addr)
	ldA2 R13,'O',R11,(3072); reg:addr
	Ccall _writeReg
;    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
	ldaD R12,122; reg:acon
	ld2z R11
	cpy2 R13,R11 ;LOADI2(reg)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;    writeBuf(len, buffer);
	ld2 R12,'O',sp,(0+8); INDIRU2(addr)
	ldaD R13,_buffer; reg:acon
	Ccall _writeBuf
;    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
	ldaD R12,128; reg:acon
	ldaD R13,31; reg:acon
	ldaD R11,8; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _writeOp
;}
L154:
	release 6
	Cretn

_isLinkUp:
	reserve 4
;int isLinkUp() {
;    return (readPhyByte(PHSTAT2) >> 2) & 1;
	ldaD R12,17; reg:acon
	Ccall _readPhyByte
	cpy2 R11,R15 ;LOADU2(reg)
	shrU2I R11,2
	alu2I R11,R11,1,ani,ani ;removed copy;BANDU2(reg,con)  
	cpy2 R15,R11 ;LOADI2(reg)
L160:
	release 4
	Cretn

_readPhyByte:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	ld2 R11,'O',sp,(0+6)
	st1 R11,'O',sp,(0+6); ASGNU1
; uint16_t readPhyByte (uint8_t address) {
;    writeRegByte(MIREGADR, address);
	ldaD R12,212; reg:acon
	ld1 R13,'O',sp,(0+6)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _writeRegByte
;    writeRegByte(MICMD, MICMD_MIIRD);
	ldaD R12,210; reg:acon
	ldaD R13,1; reg:acon
	Ccall _writeRegByte
L162:
;        ;
L163:
;    while (readRegByte(MISTAT) & MISTAT_BUSY)
	ldaD R12,234; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,1,ani,ani
	;removed ?	cpy2 R11,R11
	jnzU2 r11,L162; NE 0
;    writeRegByte(MICMD, 0x00);
	ldaD R12,210; reg:acon
	ld2z R13
	Ccall _writeRegByte
;    return readRegByte(MIRD+1);
	ldaD R12,217; reg:acon
	Ccall _readRegByte
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	cpy2 R15,R11 ;LOADU2(reg)
L161:
	release 4
	Cretn

_tcpclient_src_port_l:
	db 1
_delaycnt:
	dw 1
_seqnum:
	db 10
_arpreqhdr:
	db 0
	db 1
	db 8
	db 0
	db 6
	db 4
	db 0
	db 1
_iphdr:
	db 69
	db 0
	db 0
	db 130
	db 0
	db 0
	db 64
	db 0
	db 32
_ntpreqhdr:
	db 227
	db 0
	db 4
	db 250
	db 0
	db 1
	db 0
	db 0
	db 0
	db 1
_allOnes:
	db 255
	db 255
	db 255
	db 255
	db 255
	db 255
_tcppacketLoop:
	reserve 8; save room for local variables
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
;word tcppacketLoop (word plen) {
;  if (plen==0) {
	jnzU2 r7,L166; NE 0
;    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
	ld1 R11,'D',(_waitgwmac),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R11,1,ani,ani
	;removed ?	cpy2 R10,R11
	jnzU2 r10,L170; NE 0
	alu2I R11,R11,4,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L168; EQ 0
L170:
	ld2 R11,'D',(_delaycnt),0
	jnzU2 r11,L168; NE 0
	Ccall _isLinkUp
	cpy2 R11,R15 ;LOADI2(reg)
	jzU2 r11,L168; EQ 0
;      client_arp_whohas(gwip);
	ldaD R12,_gwip; reg:acon
	Ccall _client_arp_whohas
L168:
;    delaycnt++;
	ld2 R11,'D',(_delaycnt),0
	incm R11,1
	st2 R11,'D',(_delaycnt),0
;    if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
	ld1 R11,'D',(_tcp_client_state),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,1,L171; NE
	ld1 R11,'D',(_waitgwmac),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,2,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L171; EQ 0
;      tcp_client_state = 2;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;      tcpclient_src_port_l++; // allocate a new port
	ldaD R11,_tcpclient_src_port_l; reg:acon
	ld1 R10,'D',(_tcpclient_src_port_l),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	incm R10,1
	str1 R10,R11; ASGNU1(indaddr,reg)
;      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
	ld1 R11,'D',(_tcp_fd),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,5
	ld1 R10,'D',(_tcpclient_src_port_l),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,31,ani,ani
	;removed ?	cpy2 R10,R10
	alu2 R11,R11,R10,or,or
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld1 R13,'D',(_tcp_client_port_h),0
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	ld1 R11,'D',(_tcp_client_port_l),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	st2 r11,'O',sp,(4); arg+f**
	Ccall _client_syn
;    }
L171:
;    return 0;
	ld2z R15
	lbr L165
L166:
;  if (eth_type_is_arp_and_my_ip(plen)) {
	cpy2 R12,R7 ;LOADU2(reg)
	Ccall _eth_type_is_arp_and_my_ip
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jzU2 r11,L173; EQ 0
;    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
	ld1 R11,'D',(_buffer+21),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,1,L175; NE
;        make_arp_answer_from_request();
	Ccall _make_arp_answer_from_request
;    }
L175:
;    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac()){
	ld1 R11,'D',(_waitgwmac),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,8,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L178; EQ 0
	ld1 R11,'D',(_buffer+21),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,2,L178; NE
	Ccall _client_store_gw_mac
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jzU2 r11,L178; EQ 0
;		waitgwmac = WGW_HAVE_GW_MAC;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_waitgwmac),0; ASGNU1
;	}
L178:
;    return 0;
	ld2z R15
	lbr L165
L173:
;  if (eth_type_is_ip_and_my_ip(plen)==0){
	cpy2 R12,R7 ;LOADU2(reg)
	Ccall _eth_type_is_ip_and_my_ip
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnzU2 r11,L181; NE 0
;    return 0;
	ld2z R15
	lbr L165
L181:
;  if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V) {
	ld1 R11,'D',(_buffer+23),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,1,L183; NE
	ld1 R11,'D',(_buffer+34),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,8,L183; NE
;    if (icmp_cb)
	ld2 R11,'D',(_icmp_cb),0
	jeqU2I r11,0,L187;EQU2(reg,con)
;      (*icmp_cb)(&(gPB[IP_SRC_P]));
	ldaD R12,_buffer+26; reg:acon
	ld2 R11,'D',(_icmp_cb),0
	Ccall r11
L187:
;    make_echo_reply_from_request(plen);
	cpy2 R12,R7 ;LOADU2(reg)
	Ccall _make_echo_reply_from_request
;    return 0;
	ld2z R15
	lbr L165
L183:
;  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
	jcI2I r7,54,lbdf,L190; GE is flipped test from LT
	ld1 R11,'D',(_buffer+23),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,6,L190;EQI2(reg,con)
;    return 0;
	ld2z R15
	lbr L165
L190:
;  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
	ld1 R11,'D',(_buffer+36),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,11,L193; NE
;    if (check_ip_message_is_from(hisip)==0)
	ldaD R12,_hisip; reg:acon
	Ccall _check_ip_message_is_from
	cpy2 R11,R15 ;LOADI2(reg)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnzU2 r11,L196; NE 0
;      return 0;
	ld2z R15
	lbr L165
L196:
;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) {
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,4,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L198; EQ 0
;      if (client_tcp_result_cb)
	ld2 R11,'D',(_client_tcp_result_cb),0
	jeqU2I r11,0,L201;EQU2(reg,con)
;(*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
	ld1 R11,'D',(_buffer+37),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,5
	alu2I R11,R11,7,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ldaD R13,3; reg:acon
	ld2z R11
	st2 r11,'O',sp,(4); arg+f**
	st2 r11,'O',sp,(6); arg+f**
	ld2 R11,'D',(_client_tcp_result_cb),0
	Ccall r11
L201:
;      tcp_client_state = 5;
	ldaD R11,5; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;      return 0;
	ld2z R15
	lbr L165
L198:
;    len = get_tcp_data_len();
	Ccall _get_tcp_data_len
	cpy2 R11,R15 ;LOADU2(reg)
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
;    if (tcp_client_state==2) {
	ld1 R11,'D',(_tcp_client_state),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,2,L204; NE
;      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)) {
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,2,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L206; EQ 0
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,16,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L206; EQ 0
;        make_tcp_ack_from_any(0,0);
	ld2z R11
	cpy2 R12,R11 ;LOADI2(reg)
	cpy2 R13,R11 ;LOADI2(reg)
	Ccall _make_tcp_ack_from_any
;        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
	ldaD R11,24; reg:acon
	st1 R11,'D',(_buffer+47),0; ASGNU1
;        if (client_tcp_datafill_cb)
	ld2 R11,'D',(_client_tcp_datafill_cb),0
	jeqU2I r11,0,L211;EQU2(reg,con)
;          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
	ld1 R11,'D',(_buffer+35),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,5
	alu2I R11,R11,7,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld2 R11,'D',(_client_tcp_datafill_cb),0
	Ccall r11
	cpy2 R11,R15 ;LOADU2(reg)
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
	lbr L212
L211:
;          len = 0;
	ld2z R11
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
L212:
;        tcp_client_state = 3;
	ldaD R11,3; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;        make_tcp_ack_with_data_noflags(len);
	ld2 R12,'O',sp,(-4+20); INDIRU2(addr)
	Ccall _make_tcp_ack_with_data_noflags
;      }else{
	lbr L207
L206:
;        tcp_client_state = 1; // retry
	ldaD R11,1; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;        len++;
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	inc R11
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
;        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,16,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L214; EQ 0
;          len = 0;
	ld2z R11
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
L214:
;        make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	cpy2 R12,R11 ;LOADI2(reg)
	ldaD R13,4; reg:acon
	Ccall _make_tcp_ack_from_any
;      }
L207:
;      return 0;
	ld2z R15
	lbr L165
L204:
;    if (tcp_client_state==3 && len>0) {
	ld1 R11,'D',(_tcp_client_state),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,3,L217; NE
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	jeqU2I r11,0,L217;EQU2(reg,con)
;      tcp_client_state = 4;
	ldaD R11,4; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;      if (client_tcp_result_cb) {
	ld2 R11,'D',(_client_tcp_result_cb),0
	jeqU2I r11,0,L219;EQU2(reg,con)
;        word tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
	ld1 R11,'D',(_buffer+46),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	shl2I R11,2
	ldA2 R11,'O',R11,(34); reg:addr
	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)
;        if (tcpstart>plen-8)
	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
	alu2I R10,R7,8,smi,smbi
	jcU2 r10,r11,lbdf,L222 ;LE is flipped test & operands
;          tcpstart = plen-8; // dummy but save
	alu2I R11,R7,8,smi,smbi
	st2 R11,'O',sp,(-9+20); ASGNU2(addr,reg)
L222:
;        save_len = len;
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)
;        if (tcpstart+len>plen)
	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
	ld2 R10,'O',sp,(-4+20); INDIRU2(addr)
	alu2 R11,R11,R10,add,adc; ADDU2(r,r)
	jcU2 r7,r11,lbdf,L224 ;LE is flipped test & operands
;          save_len = plen-tcpstart;
	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
	alu2 R11,R7,R11,sm,smb
	st2 R11,'O',sp,(-6+20); ASGNU2(addr,reg)
L224:
;        send_fin = (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
	ld1 R11,'D',(_buffer+37),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,5
	alu2I R11,R11,7,ani,ani
	;removed ?	cpy2 R11,R11
	cpy1 R12,R11
	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld2z R13
	ld2 R11,'O',sp,(-9+20); INDIRU2(addr)
	st2 r11,'O',sp,(4); arg+f**
	ld2 R11,'O',sp,(-6+20); INDIRU2(addr)
	st2 r11,'O',sp,(6); arg+f**
	ld2 R11,'D',(_client_tcp_result_cb),0
	Ccall r11
	cpy2 R11,R15 ;LOADI2(reg)
	st1 R11,'O',sp,(-7+20); ASGNU1
;        if (send_fin) {
	ld1 R11,'O',sp,(-7+20)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jzU2 r11,L227; EQ 0
;          make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	cpy2 R12,R11 ;LOADI2(reg)
	ldaD R13,9; reg:acon
	Ccall _make_tcp_ack_from_any
;          tcp_client_state = 5;
	ldaD R11,5; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;          return 0;
	ld2z R15
	lbr L165
L227:
;      }
L219:
;    }
L217:
;    if (tcp_client_state != 5) {
	ld1 R11,'D',(_tcp_client_state),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,5,L229;EQI2(reg,con)
;      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,1,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L231; EQ 0
;        make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	inc R11
	cpy2 R12,R11 ;LOADI2(reg)
	ldaD R13,9; reg:acon
	Ccall _make_tcp_ack_from_any
;        tcp_client_state = 5; // connection terminated
	ldaD R11,5; reg:acon
	st1 R11,'D',(_tcp_client_state),0; ASGNU1
;      } else if (len>0)
	lbr L232
L231:
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	jeqU2I r11,0,L234;EQU2(reg,con)
;        make_tcp_ack_from_any(len,0);
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	cpy2 R12,R11 ;LOADI2(reg)
	ld2z R13
	Ccall _make_tcp_ack_from_any
L234:
L232:
;    }
L229:
;    return 0;
	ld2z R15
	lbr L165
L193:
;  if (gPB[TCP_DST_PORT_H_P] == (hisport >> 8) &&
	ld2 R11,'D',(_hisport),0; INDIRU2(addr)
	ld1 R10,'D',(_buffer+36),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 R9,R11
	shrU2I R9,8
	jneU2 r10,r9,L236; NE
	ld1 R10,'D',(_buffer+37),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jneU2 r10,r11,L236; NE
;      gPB[TCP_DST_PORT_L_P] == ((byte) hisport)) {
;    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,2,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L240; EQ 0
;      make_tcp_synack_from_syn();
	Ccall _make_tcp_synack_from_syn
	lbr L241
L240:
;    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,16,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L243; EQ 0
;      info_data_len = get_tcp_data_len();
	Ccall _get_tcp_data_len
	cpy2 R11,R15 ;LOADU2(reg)
	st2 R11,'D',(_info_data_len),0; ASGNU2(addr,reg)
;      if (info_data_len > 0) {
	ld2 R11,'D',(_info_data_len),0; INDIRU2(addr)
	jeqU2I r11,0,L246;EQU2(reg,con)
;        len = TCP_DATA_START; // TCP_DATA_START is a formula
	ld1 R11,'D',(_buffer+46),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	shl2I R11,2
	ldA2 R11,'O',R11,(34); reg:addr
	st2 R11,'O',sp,(-4+20); ASGNU2(addr,reg)
;        if (len <= plen - 8)
	ld2 R11,'O',sp,(-4+20); INDIRU2(addr)
	alu2I R10,R7,8,smi,smbi
	jcU2 r10,r11,lbnf,L247 ;GT same as LT but operands reversed
;          return len;
	ld2 R15,'O',sp,(-4+20); INDIRU2(addr)
	lbr L165
;      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
L246:
	ld1 R11,'D',(_buffer+47),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,1,ani,ani
	;removed ?	cpy2 R11,R11
	jzU2 r11,L251; EQ 0
;        make_tcp_ack_from_any(0,0);
	ld2z R11
	cpy2 R12,R11 ;LOADI2(reg)
	cpy2 R13,R11 ;LOADI2(reg)
	Ccall _make_tcp_ack_from_any
L251:
L247:
;    }
L243:
L241:
;  }
L236:
;  return 0;
	ld2z R15
L165:
	release 8; save room for outgoing arguments
	popr r7
	release 8; release room for local variables 
	Cretn

_step_seq:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
; void step_seq(word rel_ack_num,byte cp_seq) {
;  i = 4;
	ldaD R7,4; reg:acon
	lbr L256
L255:
;  while(i>0) {
;    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld1 R11,'O',R11,(_buffer-1+38)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R12,R11,R12,add,adc; ADDU2(r,r)
;    tseq = gPB[TCP_SEQACK_H_P+i-1];
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld1 R1,'O',R11,(_buffer-1+42)
;    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	cpy1 R10,R12;LOADU1(reg)
	st1 R10,'O',R11,(_buffer-1+42); ASGNU1
;    if (cp_seq)
	cpy1 R11,R13
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jzU2 r11,L264; EQ 0
;      gPB[TCP_SEQ_H_P+i-1] = tseq;
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	st1 R1,'O',R11,(_buffer-1+38); ASGNU1
	lbr L265
L264:
;      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ldaD R10,0; reg:acon
	st1 R10,'O',R11,(_buffer-1+38); ASGNU1
L265:
;    rel_ack_num = rel_ack_num>>8;
	shrU2I R12,8
;    i--;
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	alu2I R11,R11,1,smi,smbi
	cpy1 R7,R11;LOADU1(reg)
;  }
L256:
;  while(i>0) {
	cpy1 R11,R7
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jnI2I r11,0,lbnf,L255; GT reverse  the subtraction
;}
L254:
	release 0; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_make_tcphead:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
	ld2 R11,'O',sp,(2+8)
	st1 R11,'O',sp,(2+8); ASGNU1
; void make_tcphead(word rel_ack_num,byte cp_seq) {
;  byte i = gPB[TCP_DST_PORT_H_P];
	ldaD R11,_buffer+36; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-4+8); ASGNU1
;  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
	ldaD R11,_buffer+34; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'D',(_buffer+36),0; ASGNU1
;  gPB[TCP_SRC_PORT_H_P] = i;
	ld1 R11,'O',sp,(-4+8)
	st1 R11,'D',(_buffer+34),0; ASGNU1
;  j = gPB[TCP_DST_PORT_L_P];
	ldaD R11,_buffer+37; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'O',sp,(-3+8); ASGNU1
;  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
	ldaD R11,_buffer+35; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'D',(_buffer+37),0; ASGNU1
;  gPB[TCP_SRC_PORT_L_P] = j;
	ld1 R11,'O',sp,(-3+8)
	st1 R11,'D',(_buffer+35),0; ASGNU1
;  step_seq(rel_ack_num,cp_seq);
	ld2 R12,'O',sp,(0+8); INDIRU2(addr)
	ld1 R13,'O',sp,(2+8)
	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _step_seq
;  gPB[TCP_CHECKSUM_H_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+50),0; ASGNU1
;  gPB[TCP_CHECKSUM_L_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+51),0; ASGNU1
;  gPB[TCP_HEADER_LEN_P] = 0x50;
	ldaD R11,80; reg:acon
	st1 R11,'D',(_buffer+46),0; ASGNU1
;}
L270:
	release 6
	Cretn

_make_tcp_synack_from_syn:
	reserve 8
; void make_tcp_synack_from_syn() {
;  gPB[IP_TOTLEN_H_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+16),0; ASGNU1
;  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
	ldaD R11,44; reg:acon
	st1 R11,'D',(_buffer+17),0; ASGNU1
;  make_eth_ip();
	Ccall _make_eth_ip
;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
	ldaD R11,18; reg:acon
	st1 R11,'D',(_buffer+47),0; ASGNU1
;  make_tcphead(1,0);
	ldaD R12,1; reg:acon
	ld2z R13
	Ccall _make_tcphead
;  gPB[TCP_SEQ_H_P+0] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+38),0; ASGNU1
;  gPB[TCP_SEQ_H_P+1] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+39),0; ASGNU1
;  gPB[TCP_SEQ_H_P+2] = seqnum;
	ldaD R11,_seqnum; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'D',(_buffer+40),0; ASGNU1
;  gPB[TCP_SEQ_H_P+3] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+41),0; ASGNU1
;  seqnum += 3;
	ldaD R11,_seqnum; reg:acon
	ld1 R10,'D',(_seqnum),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	incm R10,3
	str1 R10,R11; ASGNU1(indaddr,reg)
;  gPB[TCP_OPTIONS_P] = 2;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_buffer+54),0; ASGNU1
;  gPB[TCP_OPTIONS_P+1] = 4;
	ldaD R11,4; reg:acon
	st1 R11,'D',(_buffer+55),0; ASGNU1
;  gPB[TCP_OPTIONS_P+2] = 0x05;
	ldaD R11,5; reg:acon
	st1 R11,'D',(_buffer+56),0; ASGNU1
;  gPB[TCP_OPTIONS_P+3] = 0x0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+57),0; ASGNU1
;  gPB[TCP_HEADER_LEN_P] = 0x60;
	ldaD R11,96; reg:acon
	st1 R11,'D',(_buffer+46),0; ASGNU1
;  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
	ldaD R11,5; reg:acon
	st1 R11,'D',(_buffer+48),0; ASGNU1
;  gPB[TCP_WIN_SIZE+1] = 0x78;
	ldaD R11,120; reg:acon
	st1 R11,'D',(_buffer+49),0; ASGNU1
;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
	ldaD R12,50; reg:acon
	ldaD R13,26; reg:acon
	ldaD R11,32; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,2; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _fill_checksum
;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
	ldaD R12,58; reg:acon
	Ccall _encpacketSend
;}
L282:
	release 8
	Cretn

_eth_type_is_ip_and_my_ip:
	reserve 0; save room for local variables
	pushr r7
	reserve 6; save room for outgoing arguments
	st2 r12,'O',sp,(10); flag1 
; byte eth_type_is_ip_and_my_ip(word len) {
;  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
	ld2 R11,'O',sp,(0+10); INDIRU2(addr)
	jcU2I r11,42,lbnf,L303 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ld1 R11,'D',(_buffer+12),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,8,L303; NE
	ld1 R11,'D',(_buffer+13),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnzU2 r11,L303; NE 0
	ld1 R11,'D',(_buffer+14),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,69,L303; NE
	ldaD R12,_buffer+30; reg:acon
	ldaD R13,_myip; reg:acon
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcmp
	cpy2 R11,R15 ;LOADI2(reg)
	jnzU2 r11,L303; NE 0
	ldaD R7,1; reg:acon
	lbr L304
L303:
	ld2z R7
L304:
	cpy2 R11,R7 ;LOADU2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L297:
	release 6; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_eth_type_is_arp_and_my_ip:
	reserve 0; save room for local variables
	pushr r7
	reserve 6; save room for outgoing arguments
	st2 r12,'O',sp,(10); flag1 
; byte eth_type_is_arp_and_my_ip(word len) {
;  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
	ld2 R11,'O',sp,(0+10); INDIRU2(addr)
	jcU2I r11,41,lbnf,L310 ;LT=lbnf i.e. subtract immedB from A and jump if borrow
	ld1 R11,'D',(_buffer+12),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,8,L310; NE
	ld1 R11,'D',(_buffer+13),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,6,L310; NE
	ldaD R12,_buffer+38; reg:acon
	ldaD R13,_myip; reg:acon
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcmp
	cpy2 R11,R15 ;LOADI2(reg)
	jnzU2 r11,L310; NE 0
	ldaD R7,1; reg:acon
	lbr L311
L310:
	ld2z R7
L311:
	cpy2 R11,R7 ;LOADU2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L305:
	release 6; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_make_arp_answer_from_request:
	reserve 4
; void make_arp_answer_from_request() {
;  setMACs(gPB + ETH_SRC_MAC);
	ldaD R12,_buffer+6; reg:acon
	Ccall _setMACs
;  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+20),0; ASGNU1
;  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_buffer+21),0; ASGNU1
;  copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
	ldaD R12,_buffer+32; reg:acon
	ldaD R13,_buffer+22; reg:acon
	Ccall _copyMac
;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
	ldaD R12,_buffer+22; reg:acon
	ldaD R13,_mymac; reg:acon
	Ccall _copyMac
;  copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
	ldaD R12,_buffer+38; reg:acon
	ldaD R13,_buffer+28; reg:acon
	Ccall _copyIp
;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
	ldaD R12,_buffer+28; reg:acon
	ldaD R13,_myip; reg:acon
	Ccall _copyIp
;  encpacketSend(42);
	ldaD R12,42; reg:acon
	Ccall _encpacketSend
;}
L312:
	release 4
	Cretn

_make_echo_reply_from_request:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
; void make_echo_reply_from_request(word len) {
;  make_eth_ip();
	Ccall _make_eth_ip
;  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+34),0; ASGNU1
;  if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
	ld1 R11,'D',(_buffer+36),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jnI2I r11,247,lbdf,L324 ;LEI2 247 11 L324; LE is flipped test & subtraction
;      gPB[ICMP_CHECKSUM_P+1]++;
	ldaD R11,_buffer+37; reg:acon
	ld1 R10,'D',(_buffer+37),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	incm R10,1
	str1 R10,R11; ASGNU1(indaddr,reg)
L324:
;  gPB[ICMP_CHECKSUM_P] += 0x08;
	ldaD R11,_buffer+36; reg:acon
	ld1 R10,'D',(_buffer+36),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	ldA2 R10,'O',R10,(8); reg:addr
	str1 R10,R11; ASGNU1(indaddr,reg)
;  encpacketSend(len);
	ld2 R12,'O',sp,(0+6); INDIRU2(addr)
	Ccall _encpacketSend
;}
L322:
	release 4
	Cretn

_make_tcp_ack_from_any:
	reserve 0; save room for local variables
	pushr r7
	reserve 8; save room for outgoing arguments
	st2 r12,'O',sp,(12); flag1 
	st2 r13,'O',sp,(14); flag1 
	ld2 R11,'O',sp,(2+12)
	st1 R11,'O',sp,(2+12); ASGNU1
; void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
;  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
	ld1 R11,'O',sp,(2+12)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R11,R11,16,ori,ori ;removed copy
	st1 R11,'D',(_buffer+47),0; ASGNU1
;  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
	ld1 R11,'O',sp,(2+12)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jeqU2I r11,4,L331;EQI2(reg,con)
	ld2 R11,'O',sp,(0+12)
	jnzU2 r11,L331; NE 0
;    datlentoack = 1;
	ldaD R11,1; reg:acon
	st2 R11,'O',sp,(0+12)
L331:
;  make_tcphead(datlentoack,1); // no options
	ld2 R11,'O',sp,(0+12)
	cpy2 R12,R11 ;LOADU2(reg)
	ldaD R13,1; reg:acon
	Ccall _make_tcphead
;  j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
	ldaD R7,40; reg:acon
;  gPB[IP_TOTLEN_H_P] = j>>8;
	cpy2 R11,R7
	shrU2I R11,8
	st1 R11,'D',(_buffer+16),0; ASGNU1
;  gPB[IP_TOTLEN_L_P] = j;
	cpy1 R11,R7;LOADU1(reg)
	st1 R11,'D',(_buffer+17),0; ASGNU1
;  make_eth_ip();
	Ccall _make_eth_ip
;  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
	ldaD R11,4; reg:acon
	st1 R11,'D',(_buffer+48),0; ASGNU1
;  gPB[TCP_WIN_SIZE+1] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+49),0; ASGNU1
;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
	ldaD R12,50; reg:acon
	ldaD R13,26; reg:acon
	ldaD R11,28; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,2; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _fill_checksum
;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
	ldaD R12,54; reg:acon
	Ccall _encpacketSend
;}
L329:
	release 8; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_make_tcp_ack_with_data_noflags:
	reserve 0; save room for local variables
	pushr r1
	pushr r7
	reserve 8; save room for outgoing arguments
	cpy2 r7,r12; function(2054) 1
; void make_tcp_ack_with_data_noflags(word dlen) {
;  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
	ldA2 R1,'O',R7,(40); reg:addr
;  gPB[IP_TOTLEN_H_P] = j>>8;
	cpy2 R11,R1
	shrU2I R11,8
	st1 R11,'D',(_buffer+16),0; ASGNU1
;  gPB[IP_TOTLEN_L_P] = j;
	cpy1 R11,R1;LOADU1(reg)
	st1 R11,'D',(_buffer+17),0; ASGNU1
;  fill_ip_hdr_checksum();
	Ccall _fill_ip_hdr_checksum
;  gPB[TCP_CHECKSUM_H_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+50),0; ASGNU1
;  gPB[TCP_CHECKSUM_L_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+51),0; ASGNU1
;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
	ldaD R12,50; reg:acon
	ldaD R13,26; reg:acon
	ldA2 R11,'O',R7,(28); reg:addr
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,2; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _fill_checksum
;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
	ldA2 R11,'O',R7,(40); reg:addr
	ldA2 R12,'O',R11,(14); reg:addr
	Ccall _encpacketSend
;}
L337:
	release 8; save room for outgoing arguments
	popr r7
	popr r1
	release 0; release room for local variables 
	Cretn

_get_tcp_data_len:
	reserve 0; save room for local variables
	pushr r7
	reserve 0; save room for outgoing arguments
; word get_tcp_data_len() {
;  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
	ld1 R11,'D',(_buffer+16),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shl2I R11,8
	ld1 R10,'D',(_buffer+17),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2 R7,R11,R10,or,or
;  i -= IP_HEADER_LEN;
	alu2I R7,R7,20,smi,smbi
;  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
	ld1 R11,'D',(_buffer+46),0
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	shrI2I R11,4
	shl2I R11,2
	alu2 R7,R7,R11,sm,smb
;  if (i<=0)
	jnI2I r7,0,lbnf,L346; GT reverse  the subtraction
;    i = 0;
	ld2z R7
L346:
;  return (word)i;
	cpy2 R15,R7 ;LOADU2(reg)
L342:
	release 0; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_check_ip_message_is_from:
	reserve 0; save room for local variables
	pushr r7
	reserve 6; save room for outgoing arguments
	st2 r12,'O',sp,(10); flag1 
; byte check_ip_message_is_from(const byte *ip) {
;  return memcmp(gPB + IP_SRC_P, ip, 4) == 0;
	ldaD R12,_buffer+26; reg:acon
	ld2 R13,'O',sp,(0+10)
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcmp
	cpy2 R11,R15 ;LOADI2(reg)
	jnzU2 r11,L351; NE 0
	ldaD R7,1; reg:acon
	lbr L352
L351:
	ld2z R7
L352:
	cpy2 R11,R7 ;LOADU2(reg)
	cpy1 R15,R11
	zExt 15 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
L348:
	release 6; save room for outgoing arguments
	popr r7
	release 0; release room for local variables 
	Cretn

_fill_checksum:
	reserve 8; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 0; save room for outgoing arguments
	ld2 R7,'O',sp,(4+16); INDIRU2(addr)
	ld2 R11,'O',sp,(6+16)
	st1 R11,'O',sp,(6+16); ASGNU1
; void fill_checksum(byte dest, byte off, word len,byte type) {
;  const byte* ptr = gPB + off;
	cpy1 R11,R13
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ldA2 R11,'O',R11,(_buffer); reg:addr
	st2 R11,'O',sp,(-4+16); ASGNP2
; long sum = type==1 ? IP_PROTO_UDP_V+len-8 :
	ld1 R11,'O',sp,(6+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,1,L356; NE
	ldA2 R11,'O',R7,(17); reg:addr
	alu2I R11,R11,8,smi,smbi
	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)
	lbr L357
L356:
	ld1 R11,'O',sp,(6+16)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	jneU2I r11,2,L358; NE
	ldA2 R11,'O',R7,(6); reg:addr
	alu2I R11,R11,8,smi,smbi
	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)
	lbr L359
L358:
	ld2z R11
	st2 R11,'O',sp,(-10+16); ASGNU2(addr,reg)
L359:
	ld2 R11,'O',sp,(-10+16); INDIRU2(addr)
	st2 R11,'O',sp,(-8+16); ASGNU2(addr,reg)
L357:
	ld2 RL0,'O',sp,(-8+16)
	zext4 RL0 ;CVUI4: widen unsigned int to signed long (zero extend)
	lbr L361
L360:
;  while(len >1) {
;    sum += (word) (((unsigned long)*ptr<<8)|*(ptr+1));
	ld2 R11,'O',sp,(-4+16)
	ld1 R10,'O',R11,0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 RL8,R10
	sext4 RL8; CVIU4
	shl4I RL8,8; LSHU4(reg,con)
	ld1 R11,'O',R11,(1)
	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 RL10,R11
	sext4 RL10; CVIU4
	alu4 RL10,RL8,RL10,or,or
	cpy2 R11,RL10 ;LOADU2(reg)
	cpy2 RL10,R11
	zext4 RL10; CVUI4 jan 16
	alu4 RL0,RL0,RL10,add,adc
;    ptr+=2;
	ld2 R11,'O',sp,(-4+16)
	incm R11,2
	st2 R11,'O',sp,(-4+16); ASGNP2
;    len-=2;
	alu2I R7,R7,2,smi,smbi
;  }
L361:
;  while(len >1) {
	jnU2I r7,1,lbnf,L360; GT reverse the subtraction
;  if (len)
	jeqU2I r7,0,L366;EQU2(reg,con)
;    sum += ((unsigned long)*ptr)<<8;
	cpy4 RL10,RL0; LOADU4(reg)
	ld2 R9,'O',sp,(-4+16)
	ld1 R9,'O',R9,0
	zExt R9 ;CVUI2: widen unsigned char to signed int (zero extend)
	cpy2 RL8,R9
	sext4 RL8; CVIU4
	shl4I RL8,8; LSHU4(reg,con)
	alu4 RL10,RL10,RL8,add,adc
	cpy4 RL0,RL10; LOADI4*
	lbr L366
L365:
;    sum = (word) sum + (sum >> 16);
	cpy2 R11,RL0 ;LOADU2(reg)
	cpy2 RL10,R11
	zext4 RL10; CVUI4 jan 16
	cpy4 RL8,RL0
	shrI4I RL8,16
	alu4 RL0,RL10,RL8,add,adc
L366:
;  while (sum>>16)
	cpy4 RL10,RL0
	shrI4I RL10,16
	ldI4 RL8,0 ;loading a long integer constant
	jneU4 rL10,rL8,L365; NE
;  ck = ~ (word) sum;
	cpy2 R11,RL0 ;LOADU2(reg)
	alu2I R11,R11,-1,xri,xri; was?	cpy2 R11,R11+xor2I R11,-1
	st2 R11,'O',sp,(-6+16); ASGNU2(addr,reg)
;  gPB[dest] = ck>>8;
	cpy1 R11,R12
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld2 R10,'O',sp,(-6+16); INDIRU2(addr)
	shrU2I R10,8
	st1 R10,'O',R11,(_buffer); ASGNU1
;  gPB[dest+1] = ck;
	cpy1 R11,R12
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	ld2 R10,'O',sp,(-6+16); INDIRU2(addr)
	st1 R10,'O',R11,(_buffer+1); ASGNU1
;}
L353:
	release 0; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 8; release room for local variables 
	Cretn

_fill_ip_hdr_checksum:
	reserve 8
; void fill_ip_hdr_checksum() {
;  gPB[IP_CHECKSUM_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+24),0; ASGNU1
;  gPB[IP_CHECKSUM_P+1] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+25),0; ASGNU1
;  gPB[IP_FLAGS_P] = 0x40; // don't fragment
	ldaD R11,64; reg:acon
	st1 R11,'D',(_buffer+20),0; ASGNU1
;  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+21),0; ASGNU1
;  gPB[IP_TTL_P] = 64; // ttl
	ldaD R11,64; reg:acon
	st1 R11,'D',(_buffer+22),0; ASGNU1
;  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
	ldaD R12,24; reg:acon
	ldaD R13,14; reg:acon
	ldaD R11,20; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	ld2z R11
	st2 r11,'O',sp,(6); arg+f**
	Ccall _fill_checksum
;}
L369:
	release 8
	Cretn

_make_eth_ip:
	reserve 4
; void make_eth_ip() {
;  setMACs(gPB + ETH_SRC_MAC);
	ldaD R12,_buffer+6; reg:acon
	Ccall _setMACs
;  copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
	ldaD R12,_buffer+30; reg:acon
	ldaD R13,_buffer+26; reg:acon
	Ccall _copyIp
;  copyIp(gPB + IP_SRC_P, myip);
	ldaD R12,_buffer+26; reg:acon
	ldaD R13,_myip; reg:acon
	Ccall _copyIp
;  fill_ip_hdr_checksum();
	Ccall _fill_ip_hdr_checksum
;}
L375:
	release 4
	Cretn

_client_store_gw_mac:
	reserve 6
; byte client_store_gw_mac() {
;  if (memcmp(gPB + ETH_ARP_SRC_IP_P, gwip, 4) != 0)
	ldaD R12,_buffer+28; reg:acon
	ldaD R13,_gwip; reg:acon
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcmp
	cpy2 R11,R15 ;LOADI2(reg)
	jzU2 r11,L381; EQ 0
;    return 0;
	ld2z R15
	lbr L380
L381:
;  copyMac(gwmacaddr, gPB + ETH_ARP_SRC_MAC_P);
	ldaD R12,_gwmacaddr; reg:acon
	ldaD R13,_buffer+22; reg:acon
	Ccall _copyMac
;  return 1;
	ldaD R15,1; reg:acon
L380:
	release 6
	Cretn

_setMACs:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
; void setMACs (const byte *mac) {
;  copyMac(gPB + ETH_DST_MAC, mac);
	ldaD R12,_buffer; reg:acon
	ld2 R13,'O',sp,(0+6)
	Ccall _copyMac
;  copyMac(gPB + ETH_SRC_MAC, mymac);
	ldaD R12,_buffer+6; reg:acon
	ldaD R13,_mymac; reg:acon
	Ccall _copyMac
;}
L385:
	release 4
	Cretn

_client_arp_whohas:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
; void client_arp_whohas(byte *ip_we_search) {
;  setMACs(allOnes);
	ldaD R12,_allOnes; reg:acon
	Ccall _setMACs
;  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
	ldaD R11,8; reg:acon
	st1 R11,'D',(_buffer+12),0; ASGNU1
;  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
	ldaD R11,6; reg:acon
	st1 R11,'D',(_buffer+13),0; ASGNU1
;  memcpy(gPB + ETH_ARP_P,arpreqhdr,8);
	ldaD R12,_buffer+14; reg:acon
	ldaD R13,_arpreqhdr; reg:acon
	ldaD R11,8; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcpy
;  memset(gPB + ETH_ARP_DST_MAC_P, 0, 6);
	ldaD R12,_buffer+32; reg:acon
	ld2z R13
	ldaD R11,6; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memset
;  copyMac(gPB + ETH_ARP_SRC_MAC_P, mymac);
	ldaD R12,_buffer+22; reg:acon
	ldaD R13,_mymac; reg:acon
	Ccall _copyMac
;  copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
	ldaD R12,_buffer+38; reg:acon
	ld2 R13,'O',sp,(0+8)
	Ccall _copyIp
;  copyIp(gPB + ETH_ARP_SRC_IP_P, myip);
	ldaD R12,_buffer+28; reg:acon
	ldaD R13,_myip; reg:acon
	Ccall _copyIp
;  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
	ldaD R11,_waitgwmac; reg:acon
	ld1 R10,'D',(_waitgwmac),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	alu2I R10,R10,8,ori,ori ;removed copy
	str1 R10,R11; ASGNU1(indaddr,reg)
;  encpacketSend(42);
	ldaD R12,42; reg:acon
	Ccall _encpacketSend
;}
L387:
	release 6
	Cretn

_client_syn:
	reserve 8
	st2 r12,'O',sp,(10); flag1 
	st2 r13,'O',sp,(12); flag1 
	ld2 R11,'O',sp,(0+10)
	st1 R11,'O',sp,(0+10); ASGNU1
	ld2 R11,'O',sp,(2+10)
	st1 R11,'O',sp,(2+10); ASGNU1
	ld2 R11,'O',sp,(4+10)
	st1 R11,'O',sp,(4+10); ASGNU1
; void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
;  setMACandIPs(gwmacaddr, hisip);
	ldaD R12,_gwmacaddr; reg:acon
	ldaD R13,_hisip; reg:acon
	Ccall _setMACandIPs
;  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
	ldaD R11,8; reg:acon
	st1 R11,'D',(_buffer+12),0; ASGNU1
;  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+13),0; ASGNU1
;  memcpy(gPB + IP_P,iphdr,9);
	ldaD R12,_buffer+14; reg:acon
	ldaD R13,_iphdr; reg:acon
	ldaD R11,9; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcpy
;  gPB[IP_TOTLEN_L_P] = 44; // good for syn
	ldaD R11,44; reg:acon
	st1 R11,'D',(_buffer+17),0; ASGNU1
;  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
	ldaD R11,6; reg:acon
	st1 R11,'D',(_buffer+23),0; ASGNU1
;  fill_ip_hdr_checksum();
	Ccall _fill_ip_hdr_checksum
;  gPB[TCP_DST_PORT_H_P] = dstport_h;
	ld1 R11,'O',sp,(2+10)
	st1 R11,'D',(_buffer+36),0; ASGNU1
;  gPB[TCP_DST_PORT_L_P] = dstport_l;
	ld1 R11,'O',sp,(4+10)
	st1 R11,'D',(_buffer+37),0; ASGNU1
;  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
	ldaD R11,11; reg:acon
	st1 R11,'D',(_buffer+34),0; ASGNU1
;  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
	ld1 R11,'O',sp,(0+10)
	st1 R11,'D',(_buffer+35),0; ASGNU1
;  memset(gPB + TCP_SEQ_H_P, 0, 8);
	ldaD R12,_buffer+38; reg:acon
	ld2z R13
	ldaD R11,8; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memset
;  gPB[TCP_SEQ_H_P+2] = seqnum;
	ldaD R11,_seqnum; reg:acon
	ldn1 R11,R11;reg:  INDIRU1(indaddr)
	st1 R11,'D',(_buffer+40),0; ASGNU1
;  seqnum += 3;
	ldaD R11,_seqnum; reg:acon
	ld1 R10,'D',(_seqnum),0
	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
	incm R10,3
	str1 R10,R11; ASGNU1(indaddr,reg)
;  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
	ldaD R11,96; reg:acon
	st1 R11,'D',(_buffer+46),0; ASGNU1
;  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_buffer+47),0; ASGNU1
;  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
	ldaD R11,3; reg:acon
	st1 R11,'D',(_buffer+48),0; ASGNU1
;  gPB[TCP_WIN_SIZE+1] = 0x0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+49),0; ASGNU1
;  gPB[TCP_CHECKSUM_H_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+50),0; ASGNU1
;  gPB[TCP_CHECKSUM_L_P] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+51),0; ASGNU1
;  gPB[TCP_CHECKSUM_L_P+1] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+52),0; ASGNU1
;  gPB[TCP_CHECKSUM_L_P+2] = 0;
	ldaD R11,0; reg:acon
	st1 R11,'D',(_buffer+53),0; ASGNU1
;  gPB[TCP_OPTIONS_P] = 2;
	ldaD R11,2; reg:acon
	st1 R11,'D',(_buffer+54),0; ASGNU1
;  gPB[TCP_OPTIONS_P+1] = 4;
	ldaD R11,4; reg:acon
	st1 R11,'D',(_buffer+55),0; ASGNU1
;  gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
	ldaD R11,2; reg:acon
	st1 R11,'D',(_buffer+56),0; ASGNU1
;  gPB[TCP_OPTIONS_P+3] = (byte) CLIENTMSS;
	ldaD R11,550; reg:acon
	st1 R11,'D',(_buffer+57),0; ASGNU1
;  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
	ldaD R12,50; reg:acon
	ldaD R13,26; reg:acon
	ldaD R11,32; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	ldaD R11,2; reg:acon
	st2 r11,'O',sp,(6); arg+f**
	Ccall _fill_checksum
;  encpacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
	ldaD R12,58; reg:acon
	Ccall _encpacketSend
;}
L395:
	release 8
	Cretn

_setMACandIPs:
	reserve 4
	st2 r12,'O',sp,(6); flag1 
	st2 r13,'O',sp,(8); flag1 
; void setMACandIPs (const byte *mac, const byte *dst) {
;  setMACs(mac);
	ld2 R12,'O',sp,(0+6)
	Ccall _setMACs
;  copyIp(gPB + IP_DST_P, dst);
	ldaD R12,_buffer+30; reg:acon
	ld2 R13,'O',sp,(2+6)
	Ccall _copyIp
;  copyIp(gPB + IP_SRC_P, myip);
	ldaD R12,_buffer+26; reg:acon
	ldaD R13,_myip; reg:acon
	Ccall _copyIp
;}
L419:
	release 4
	Cretn

_hexDump:
	reserve 2; save room for local variables
	pushr r0
	pushr r1
	pushr r7
	reserve 4; save room for outgoing arguments
	cpy2 r7,r12; function(2055) 1
	cpy2 r1,r13; function(2054) 1
;void hexDump(uint8_t *data, uint16_t len) {
;  uint8_t cnt = 0;
	ldaD R0,0; reg:acon
;  printf("dumping %d\n",len);
	ldaD R12,L423; reg:acon
	cpy2 R13,R1 ;LOADU2(reg)
	Ccall _printf
;  for (i = 0; i < len; i++) {
	ld2z R11
	st2 R11,'O',sp,(-4+14)
	lbr L427
L424:
;    putx(data[i]);
	ld2 R11,'O',sp,(-4+14)
	alu2 R11,R11,R7,add,adc
	ld1 R12,'O',R11,0
	zExt R12 ;CVUI2: widen unsigned char to signed int (zero extend)
	Ccall _putx
;    cnt++;
	cpy1 R11,R0
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	incm R11,1
	cpy1 R0,R11;LOADU1(reg)
;    if (cnt == 8) {
	cpy1 R11,R0
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jneU2I r11,8,L428; NE
;      putc(' ');
	ldaD R12,32; reg:acon
	Ccall _putc
;    }
L428:
;    if (cnt == 16) {
	cpy1 R11,R0
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jneU2I r11,16,L430; NE
;      printf("\n");
	ldaD R12,L432; reg:acon
	Ccall _printf
;      cnt = 0;
	ldaD R0,0; reg:acon
;    }
L430:
;  }
L425:
;  for (i = 0; i < len; i++) {
	ld2 R11,'O',sp,(-4+14)
	incm R11,1
	st2 R11,'O',sp,(-4+14)
L427:
	ld2 R11,'O',sp,(-4+14)
	jcU2 r11,r1,lbnf,L424; LT=lbnf i.e. subtract B from A and jump if borrow 
;  if (cnt != 0) {
	cpy1 R11,R0
	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)
	jzU2 r11,L433; EQ 0
;    printf("\n");
	ldaD R12,L432; reg:acon
	Ccall _printf
;  }
L433:
;}
L422:
	release 4; save room for outgoing arguments
	popr r7
	popr r1
	popr r0
	release 2; release room for local variables 
	Cretn

_copyIp:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
;void copyIp (byte *dst, const byte *src) {
;    memcpy(dst, src, 4);
	ld2 R12,'O',sp,(0+8)
	ld2 R13,'O',sp,(2+8)
	ldaD R11,4; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcpy
;}
L435:
	release 6
	Cretn

_copyMac:
	reserve 6
	st2 r12,'O',sp,(8); flag1 
	st2 r13,'O',sp,(10); flag1 
;void copyMac (byte *dst, const byte *src) {
;    memcpy(dst, src, 6);
	ld2 R12,'O',sp,(0+8)
	ld2 R13,'O',sp,(2+8)
	ldaD R11,6; reg:acon
	st2 r11,'O',sp,(4); arg+f**
	Ccall _memcpy
;}
L436:
	release 6
	Cretn

_info_data_len:
	db 2 dup (0); zerofill global
_waitgwmac:
	db 1 dup (0); zerofill global
_gwmacaddr:
	db 6 dup (0); zerofill global
_icmp_cb:
	db 2 dup (0); zerofill global
_client_hoststr:
	db 2 dup (0); zerofill global
_client_urlbuf_var:
	db 2 dup (0); zerofill global
_client_urlbuf:
	db 2 dup (0); zerofill global
_client_postval:
	db 2 dup (0); zerofill global
_client_additionalheaderline:
	db 2 dup (0); zerofill global
_client_browser_cb:
	db 2 dup (0); zerofill global
_www_fd:
	db 1 dup (0); zerofill global
_client_tcp_datafill_cb:
	db 2 dup (0); zerofill global
_client_tcp_result_cb:
	db 2 dup (0); zerofill global
_tcp_client_port_l:
	db 1 dup (0); zerofill global
_tcp_client_port_h:
	db 1 dup (0); zerofill global
_tcp_client_state:
	db 1 dup (0); zerofill global
_tcp_fd:
	db 1 dup (0); zerofill global
_buffer:
	db 700 dup (0); zerofill global
_hisip:
	db 4 dup (0); zerofill global
_dnsip:
	db 4 dup (0); zerofill global
_dhcpip:
	db 4 dup (0); zerofill global
_gwip:
	db 4 dup (0); zerofill global
_mymask:
	db 4 dup (0); zerofill global
_gNextPacketPtr:
	db 2 dup (0); zerofill global
_Enc28j60Bank:
	db 1 dup (0); zerofill global
_bufferSize:
	db 2 dup (0); zerofill global
L432:
	db 10
	db 0
L423:
	db 100
	db 117
	db 109
	db 112
	db 105
	db 110
	db 103
	db 32
	db 37
	db 100
	db 10
	db 0
L76:
	db 101
	db 120
	db 105
	db 116
	db 32
	db 37
	db 100
	db 10
	db 0
L15:
	db 101
	db 110
	db 99
	db 109
	db 117
	db 108
	db 101
	db 32
	db 45
	db 32
	db 119
	db 97
	db 116
	db 99
	db 104
	db 32
	db 109
	db 121
	db 32
	db 81
	db 33
	db 10
	db 0
L11:
	db 97
	db 110
	db 100
	db 32
	db 119
	db 101
	db 39
	db 114
	db 101
	db 32
	db 100
	db 111
	db 110
	db 101
	db 10
	db 0
L10:
	db 77
	db 65
	db 67
	db 116
	db 97
	db 105
	db 108
	db 32
	db 114
	db 101
	db 97
	db 100
	db 98
	db 97
	db 99
	db 107
	db 58
	db 32
	db 37
	db 120
	db 58
	db 37
	db 120
	db 10
	db 0
L9:
	db 114
	db 101
	db 97
	db 100
	db 82
	db 101
	db 103
	db 66
	db 121
	db 116
	db 101
	db 40
	db 69
	db 83
	db 84
	db 65
	db 84
	db 41
	db 32
	db 114
	db 101
	db 116
	db 117
	db 114
	db 110
	db 115
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L8:
	db 114
	db 101
	db 97
	db 100
	db 82
	db 101
	db 103
	db 66
	db 121
	db 116
	db 101
	db 40
	db 69
	db 82
	db 69
	db 86
	db 73
	db 68
	db 41
	db 32
	db 114
	db 101
	db 116
	db 117
	db 114
	db 110
	db 115
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L7:
	db 114
	db 101
	db 97
	db 100
	db 82
	db 101
	db 103
	db 66
	db 121
	db 116
	db 101
	db 40
	db 69
	db 67
	db 79
	db 78
	db 49
	db 41
	db 32
	db 114
	db 101
	db 116
	db 117
	db 114
	db 110
	db 115
	db 58
	db 32
	db 37
	db 120
	db 10
	db 0
L6:
	db 70
	db 97
	db 105
	db 108
	db 101
	db 100
	db 32
	db 116
	db 111
	db 32
	db 97
	db 99
	db 99
	db 101
	db 115
	db 115
	db 32
	db 69
	db 116
	db 104
	db 101
	db 114
	db 110
	db 101
	db 116
	db 32
	db 99
	db 111
	db 110
	db 116
	db 114
	db 111
	db 108
	db 108
	db 101
	db 114
	db 10
	db 0
L3:
	db 77
	db 65
	db 67
	db 32
	db 38
	db 32
	db 73
	db 80
	db 32
	db 0
L2:
	db 10
	db 69
	db 110
	db 99
	db 50
	db 56
	db 106
	db 54
	db 48
	db 32
	db 102
	db 105
	db 114
	db 115
	db 116
	db 32
	db 116
	db 114
	db 121
	db 10
	db 0
	include lcc1802EpiloNO.inc
	include IO1802.inc
