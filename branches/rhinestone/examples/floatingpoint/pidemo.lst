 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 1 - 4/3/2013 16:00:11


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Wed Apr 03 16:00:03 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  830/       0 :                     	listing	on
(1)  831/       0 : C0 13 EB            	lbr	lcc1802Init
(1)  832/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     	align 4
      13/       4 :                     _round_nums:
      14/       4 : 3F 00 00 00         	dd 0x3f000000
      15/       8 : 3D 4C CC CD         	dd 0x3d4ccccd
      16/       C : 3B A3 D7 0A         	dd 0x3ba3d70a
      17/      10 : 3A 03 12 6F         	dd 0x3a03126f
      18/      14 : 38 51 B7 17         	dd 0x3851b717
      19/      18 : 36 A7 C5 AC         	dd 0x36a7c5ac
      20/      1C : 35 06 37 BD         	dd 0x350637bd
      21/      20 : 33 56 BF 95         	dd 0x3356bf95
      22/      24 :                     	align 4
      23/      24 :                     _mult_nums:
      24/      24 : 3F 80 00 00         	dd 0x3f800000
      25/      28 : 41 20 00 00         	dd 0x41200000
      26/      2C : 42 C8 00 00         	dd 0x42c80000
      27/      30 : 44 7A 00 00         	dd 0x447a0000
      28/      34 : 46 1C 40 00         	dd 0x461c4000
      29/      38 : 47 C3 50 00         	dd 0x47c35000
      30/      3C : 49 74 24 00         	dd 0x49742400
      31/      40 : 4B 18 96 80         	dd 0x4b189680
      32/      44 :                     	align 4
      33/      44 :                     _denom:
      34/      44 : 3F 80 00 00         	dd 0x3f800000
      35/      48 :                     	align 4
      36/      48 :                     _PI4:
      37/      48 : 3F 80 00 00         	dd 0x3f800000
      38/      4C :                     	align 4
      39/      4C :                     _sign:
      40/      4C : 3F 80 00 00         	dd 0x3f800000
      41/      50 :                     _main:
      42/      50 : (MACRO)             	reserve 18
      43/      5A :                     ;void main(){
      44/      5A :                     ;	printf("begin\n");
      45/      5A : (MACRO)             	ldaD R12,L2; reg:acon
      46/      60 : (MACRO)             	Ccall _printf
      47/      63 :                     ;	for (n=1;n<=20;n++){
      48/      63 : (MACRO)             	ldaD R11,1; reg:acon
      49/      69 : (MACRO)             	st2 R11,'D',(_n),0
      50/      74 :                     L3:
      51/      74 :                     ;		denom=(denom+2.0);
      52/      74 : (MACRO)             	ld4 RL8,'D',(_denom),0;INDIRF4(addr)
      53/      82 : (MACRO)             	ld4 RL10,'D',(L7),0;INDIRF4(addr)
      54/      90 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
      55/      93 : (MACRO)             	st4 RL8,'D',(_denom),0; ASGNF4(addr,reg)
      56/      A4 :                     ;		sign*=-1;
      57/      A4 : (MACRO)             	ld4 RL8,'D',(L8),0;INDIRF4(addr)
      58/      B2 : (MACRO)             	ld4 RL10,'D',(_sign),0;INDIRF4(addr)
      59/      C0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 2 - 4/3/2013 16:00:11


      60/      C3 : (MACRO)             	st4 RL8,'D',(_sign),0; ASGNF4(addr,reg)
      61/      D4 :                     ;		PI4=PI4+sign/denom;
      62/      D4 : (MACRO)             	ld4 RL8,'D',(_PI4),0;INDIRF4(addr)
      63/      E2 : (MACRO)             	st4 RL8,'O',sp,(-8+20); ASGNF4(addr,reg)
      64/      F5 : (MACRO)             	ld4 RL8,'D',(_sign),0;INDIRF4(addr)
      65/     103 : (MACRO)             	ld4 RL10,'D',(_denom),0;INDIRF4(addr)
      66/     111 : (MACRO)             	Ccall fp_div ;DIVF4(reg,reg)
      67/     114 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
      68/     11C : (MACRO)             	ld4 RL8,'O',sp,(-8+20);INDIRF4(addr)
      69/     12C : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
      70/     12F : (MACRO)             	st4 RL8,'D',(_PI4),0; ASGNF4(addr,reg)
      71/     140 :                     ;		printf("N=%d, denom=%f, PI=%f\n",n,denom,PI4*4);
      72/     140 : (MACRO)             	ldaD R12,L9; reg:acon
      73/     146 : (MACRO)             	ld2 R13,'D',(_n),0 ;reg:INDIRI2(addr)
      74/     150 : (MACRO)             	ld4 RL10,'D',(_denom),0;INDIRF4(addr)
      75/     15E : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
      76/     171 : (MACRO)             	ld4 RL8,'D',(L10),0;INDIRF4(addr)
      77/     17F : (MACRO)             	ld4 RL10,'D',(_PI4),0;INDIRF4(addr)
      78/     18D : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
      79/     190 : (MACRO)             	st4 RL8,'O',sp,(8); arg+f**
      80/     1A3 : (MACRO)             	Ccall _printf
      81/     1A6 :                     ;	}
      82/     1A6 :                     L4:
      83/     1A6 :                     ;	for (n=1;n<=20;n++){
      84/     1A6 : (MACRO)             	ld2 R11,'D',(_n),0 ;reg:INDIRI2(addr)
      85/     1B0 : (MACRO)             	incm R11,1
      86/     1B1 : (MACRO)             	st2 R11,'D',(_n),0
      87/     1BC : (MACRO)             	ld2 R11,'D',(_n),0 ;reg:INDIRI2(addr)
      88/     1C6 : (MACRO)             	jnI2I r11,20,lbdf,L3 ;LEI2 20 11 L3; LE is flipped test & subtraction
      89/     1D7 :                     ;	printf("end\n");
      90/     1D7 : (MACRO)             	ldaD R12,L11; reg:acon
      91/     1DD : (MACRO)             	Ccall _printf
      92/     1E0 :                     ;}
      93/     1E0 :                     L1:
      94/     1E0 : (MACRO)             	release 18
      95/     1E8 : (MACRO)             	Cretn
      96/     1E9 :                     
      97/     1E9 :                     _strcpy:
      98/     1E9 : (MACRO)             	reserve 2
      99/     1EB :                     ;{
     100/     1EB :                     ;	char *save = to;
     101/     1EB : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     102/     1F8 :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     103/     1F8 : C0 01 FD            	lbr L16
     104/     1FB :                     L13:
     105/     1FB :                     L14:
     106/     1FB : (MACRO)             	incm R13,1
     107/     1FC : (MACRO)             	incm R12,1
     108/     1FD :                     L16:
     109/     1FD : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
     110/     1FF : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
     111/     201 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     112/     204 : (MACRO)             	jnzU2 r11,L13; NE 0
     113/     20C :                     ;	return(save);
     114/     20C : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
     115/     218 :                     L12:
     116/     218 : (MACRO)             	release 2
     117/     21A : (MACRO)             	Cretn
     118/     21B :                     
     119/     21B :                     _printstr:
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 3 - 4/3/2013 16:00:11


     120/     21B : (MACRO)             	reserve 0; save room for local variables
     121/     21B : (MACRO)             	pushr r7
     122/     220 : (MACRO)             	reserve 4; save room for outgoing arguments
     123/     224 : (MACRO)             	cpy2 r7,r12; function(2055) 1
     124/     228 :                     ;void printstr(char *ptr){
     125/     228 : C0 02 4A            	lbr L19
     126/     22B :                     L18:
     127/     22B :                     ;    while(*ptr) out(5,*ptr++);
     128/     22B : (MACRO)             	ldaD R12,5; reg:acon
     129/     231 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     130/     235 : (MACRO)             	cpy2 R7,R11
     131/     239 : (MACRO)             	incm R7,1
     132/     23A : (MACRO)             	ld1 R13,'O',R11,0
     133/     244 : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     134/     247 : (MACRO)             	Ccall _out
     135/     24A :                     L19:
     136/     24A : (MACRO)             	ld1 R11,'O',R7,0
     137/     254 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     138/     257 : (MACRO)             	jnzU2 r11,L18; NE 0
     139/     25F :                     ;}
     140/     25F :                     L17:
     141/     25F : (MACRO)             	release 4; release room for outgoing arguments
     142/     263 : (MACRO)             	popr r7
     143/     267 : (MACRO)             	release 0; release room for local variables 
     144/     267 : (MACRO)             	Cretn
     145/     268 :                     
     146/     268 :                     _ftoa:
     147/     268 : (MACRO)             	reserve 66; save room for local variables
     148/     272 : (MACRO)             	pushr r0
     149/     277 : (MACRO)             	pushr r1
     150/     27C : (MACRO)             	pushr r7
     151/     281 : (MACRO)             	reserve 4; save room for outgoing arguments
     152/     285 : (MACRO)             	cpy4 RL0,RL12; halfbaked&floaty
     153/     28D : (MACRO)             	ld2 R7,'O',sp,(6+78); reg:INDIRU2(addr)
     154/     299 :                     ;{
     155/     299 :                     ;   char *output = outbfr ;
     156/     299 : (MACRO)             	ld2 R11,'O',sp,(4+78);reg:  INDIRP2(addr)
     157/     2A5 : (MACRO)             	st2 R11,'O',sp,(-54+78); ASGNP2
     158/     2B2 :                     ;   if (flt < 0.0) {
     159/     2B2 : (MACRO)             	ld4 RL10,'D',(L24),0;INDIRF4(addr)
     160/     2C0 : (MACRO)             	jcF4 RL0,RL10,lbdf,L22;GEF4(reg,reg) - reverse test
     161/     305 :                     ;      *output++ = '-' ;
     162/     305 : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     163/     311 : (MACRO)             	cpy2 R10,R11
     164/     315 : (MACRO)             	incm R10,1
     165/     316 : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     166/     323 : (MACRO)             	ldaD R10,45; reg:acon
     167/     329 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     168/     32B :                     ;      flt *= -1.0 ;
     169/     32B : (MACRO)             	ld4 RL8,'D',(L25),0;INDIRF4(addr)
     170/     339 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
     171/     341 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     172/     344 : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
     173/     34C :                     ;   } else {
     174/     34C : C0 03 78            	lbr L23
     175/     34F :                     L22:
     176/     34F :                     ;      if (use_leading_plus) {
     177/     34F : C0 03 78            	lbr L26
     178/     352 :                     ;         *output++ = '+' ;
     179/     352 : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 4 - 4/3/2013 16:00:11


     180/     35E : (MACRO)             	cpy2 R10,R11
     181/     362 : (MACRO)             	incm R10,1
     182/     363 : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     183/     370 : (MACRO)             	ldaD R10,43; reg:acon
     184/     376 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     185/     378 :                     ;      }
     186/     378 :                     L26:
     187/     378 :                     ;   }
     188/     378 :                     L23:
     189/     378 :                     ;   if (dec_digits < 8) {
     190/     378 : (MACRO)             	jcI2I r7,8,lbdf,L28; GE is flipped test from LT
     191/     389 :                     ;      flt += round_nums[dec_digits] ;
     192/     389 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     193/     391 : (MACRO)             	cpy2 R11,R7
     194/     395 : (MACRO)             	shl2I R11,2
     195/     3A1 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
     196/     3B1 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     197/     3B4 : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
     198/     3BC :                     ;   }
     199/     3BC :                     L28:
     200/     3BC :                     ;	mult=mult_nums[dec_digits];
     201/     3BC : (MACRO)             	cpy2 R11,R7
     202/     3C0 : (MACRO)             	shl2I R11,2
     203/     3CC : (MACRO)             	ld4 RL10,'O',R11,(_mult_nums);INDIRF4(addr)
     204/     3DC : (MACRO)             	st4 RL10,'O',sp,(-60+78); ASGNF4(addr,reg)
     205/     3EF :                     ;   wholeNum = flt;
     206/     3EF : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     207/     3F7 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     208/     3FA : (MACRO)             	st4 RL8,'O',sp,(-8+78)
     209/     40D :                     ;   decimalNum = ((flt - wholeNum) * mult);
     210/     40D : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     211/     415 : (MACRO)             	st4 RL8,'O',sp,(-64+78); ASGNF4(addr,reg)
     212/     428 : (MACRO)             	ld4 RL8,'O',sp,(-8+78);reg:  INDIRI4(addr)
     213/     438 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     214/     43B : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     215/     443 : (MACRO)             	ld4 RL8,'O',sp,(-64+78);INDIRF4(addr)
     216/     453 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     217/     456 : (MACRO)             	ld4 RL10,'O',sp,(-60+78);INDIRF4(addr)
     218/     466 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     219/     469 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     220/     46C : (MACRO)             	st4 RL8,'O',sp,(-52+78)
     221/     47F :                     ;   idx = 0 ;
     222/     47F : (MACRO)             	ld2z R11
     223/     483 : (MACRO)             	st2 R11,'O',sp,(-4+78); ASGNU2(addr,reg)*
     224/     490 : C0 05 80            	lbr L31
     225/     493 :                     L30:
     226/     493 :                     ;   while (wholeNum != 0) {
     227/     493 :                     ;      tbfr[idx++] = '0' + (wholeNum % 10) ;
     228/     493 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     229/     49F : (MACRO)             	st2 R11,'O',sp,(-66+78); ASGNU2(addr,reg)*
     230/     4AC : (MACRO)             	cpy2 R10,R11
     231/     4B0 : (MACRO)             	incm R10,1
     232/     4B1 : (MACRO)             	st2 R10,'O',sp,(-4+78); ASGNU2(addr,reg)*
     233/     4BE : (MACRO)             	ld4 RL8,'O',sp,(-8+78);reg:  INDIRI4(addr)
     234/     4CE : (MACRO)             	ldI4 RL10,10 ;loading a long integer constant
     235/     4DA : (MACRO)             	Ccall _modi4
     236/     4DD : (MACRO)             	cpy4 RL10,RL8; LOADI4*
     237/     4E5 : (MACRO)             	ldA2 R9,'O',sp,(-48+78); reg:addr
     238/     4ED : (MACRO)             	ld2 R8,'O',sp,(-66+78); reg:INDIRU2(addr)
     239/     4F9 : (MACRO)             	alu2 R9,R8,R9,add,adc
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 5 - 4/3/2013 16:00:11


     240/     505 : (MACRO)             	st2 R9,'O',sp,(-68+78); ASGNP2
     241/     512 : (MACRO)             	ldI4 RL8,48 ;loading a long integer constant
     242/     51E : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     243/     534 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     244/     538 : (MACRO)             	ld2 R10,'O',sp,(-68+78);reg:  INDIRP2(addr)
     245/     544 : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
     246/     546 :                     ;      wholeNum /= 10 ;
     247/     546 : (MACRO)             	ld4 RL8,'O',sp,(-8+78);reg:  INDIRI4(addr)
     248/     556 : (MACRO)             	ldI4 RL10,10 ;loading a long integer constant
     249/     562 : (MACRO)             	Ccall _divi4; DIVI4(reg,reg)
     250/     565 : (MACRO)             	cpy4 RL10,RL8; LOADI4*
     251/     56D : (MACRO)             	st4 RL10,'O',sp,(-8+78)
     252/     580 :                     ;   }
     253/     580 :                     L31:
     254/     580 :                     ;   while (wholeNum != 0) {
     255/     580 : (MACRO)             	ld4 RL10,'O',sp,(-8+78);reg:  INDIRI4(addr)
     256/     590 : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
     257/     59C : (MACRO)             	jneU4 rL10,rL8,L30; NE
     258/     5C3 :                     ;   if (idx == 0) {
     259/     5C3 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     260/     5CF : (MACRO)             	jnzU2 r11,L36; NE 0
     261/     5D7 :                     ;      *output++ = '0' ;
     262/     5D7 : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     263/     5E3 : (MACRO)             	cpy2 R10,R11
     264/     5E7 : (MACRO)             	incm R10,1
     265/     5E8 : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     266/     5F5 : (MACRO)             	ldaD R10,48; reg:acon
     267/     5FB : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     268/     5FD :                     ;   } else {
     269/     5FD : C0 06 71            	lbr L34
     270/     600 :                     L35:
     271/     600 :                     ;      while (idx > 0) {
     272/     600 :                     ;         *output++ = tbfr[idx-1] ;  //lint !e771
     273/     600 : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     274/     60C : (MACRO)             	cpy2 R10,R11
     275/     610 : (MACRO)             	incm R10,1
     276/     611 : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     277/     61E : (MACRO)             	ld2 R10,'O',sp,(-4+78); reg:INDIRU2(addr)
     278/     62A : (MACRO)             	decm R10,1
     279/     62B : (MACRO)             	ldA2 R9,'O',sp,(-48+78); reg:addr
     280/     633 : (MACRO)             	alu2 R10,R10,R9,add,adc
     281/     63F : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     282/     641 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     283/     643 :                     ;         idx-- ;
     284/     643 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     285/     64F : (MACRO)             	decm R11,1
     286/     650 : (MACRO)             	st2 R11,'O',sp,(-4+78); ASGNU2(addr,reg)*
     287/     65D :                     ;      }
     288/     65D :                     L36:
     289/     65D :                     ;      while (idx > 0) {
     290/     65D : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     291/     669 : (MACRO)             	jnzU2 r11,L35; NE 0
     292/     671 :                     ;   }
     293/     671 :                     L34:
     294/     671 :                     ;   if (dec_digits > 0) {
     295/     671 : (MACRO)             	jeqU2I r7,0,L38;EQU2(reg,con)
     296/     67D :                     ;      *output++ = '.' ;
     297/     67D : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     298/     689 : (MACRO)             	cpy2 R10,R11
     299/     68D : (MACRO)             	incm R10,1
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 6 - 4/3/2013 16:00:11


     300/     68E : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     301/     69B : (MACRO)             	ldaD R10,46; reg:acon
     302/     6A1 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     303/     6A3 :                     ;      idx = 0 ;
     304/     6A3 : (MACRO)             	ld2z R11
     305/     6A7 : (MACRO)             	st2 R11,'O',sp,(-4+78); ASGNU2(addr,reg)*
     306/     6B4 : C0 07 A4            	lbr L41
     307/     6B7 :                     L40:
     308/     6B7 :                     ;      while (decimalNum != 0) {
     309/     6B7 :                     ;         tbfr[idx++] = '0' + (decimalNum % 10) ;
     310/     6B7 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     311/     6C3 : (MACRO)             	st2 R11,'O',sp,(-66+78); ASGNU2(addr,reg)*
     312/     6D0 : (MACRO)             	cpy2 R10,R11
     313/     6D4 : (MACRO)             	incm R10,1
     314/     6D5 : (MACRO)             	st2 R10,'O',sp,(-4+78); ASGNU2(addr,reg)*
     315/     6E2 : (MACRO)             	ld4 RL8,'O',sp,(-52+78);reg:  INDIRI4(addr)
     316/     6F2 : (MACRO)             	ldI4 RL10,10 ;loading a long integer constant
     317/     6FE : (MACRO)             	Ccall _modi4
     318/     701 : (MACRO)             	cpy4 RL10,RL8; LOADI4*
     319/     709 : (MACRO)             	ldA2 R9,'O',sp,(-48+78); reg:addr
     320/     711 : (MACRO)             	ld2 R8,'O',sp,(-66+78); reg:INDIRU2(addr)
     321/     71D : (MACRO)             	alu2 R9,R8,R9,add,adc
     322/     729 : (MACRO)             	st2 R9,'O',sp,(-68+78); ASGNP2
     323/     736 : (MACRO)             	ldI4 RL8,48 ;loading a long integer constant
     324/     742 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     325/     758 : (MACRO)             	cpy2 R11,RL10 ;LOADU2(reg)*
     326/     75C : (MACRO)             	ld2 R10,'O',sp,(-68+78);reg:  INDIRP2(addr)
     327/     768 : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
     328/     76A :                     ;         decimalNum /= 10 ;
     329/     76A : (MACRO)             	ld4 RL8,'O',sp,(-52+78);reg:  INDIRI4(addr)
     330/     77A : (MACRO)             	ldI4 RL10,10 ;loading a long integer constant
     331/     786 : (MACRO)             	Ccall _divi4; DIVI4(reg,reg)
     332/     789 : (MACRO)             	cpy4 RL10,RL8; LOADI4*
     333/     791 : (MACRO)             	st4 RL10,'O',sp,(-52+78)
     334/     7A4 :                     ;      }
     335/     7A4 :                     L41:
     336/     7A4 :                     ;      while (decimalNum != 0) {
     337/     7A4 : (MACRO)             	ld4 RL10,'O',sp,(-52+78);reg:  INDIRI4(addr)
     338/     7B4 : (MACRO)             	ldI4 RL8,0 ;loading a long integer constant
     339/     7C0 : (MACRO)             	jneU4 rL10,rL8,L40; NE
     340/     7E7 : C0 08 24            	lbr L44
     341/     7EA :                     L43:
     342/     7EA :                     ;      while (idx < dec_digits) {
     343/     7EA :                     ;         tbfr[idx++] = '0' ;
     344/     7EA : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     345/     7F6 : (MACRO)             	cpy2 R10,R11
     346/     7FA : (MACRO)             	incm R10,1
     347/     7FB : (MACRO)             	st2 R10,'O',sp,(-4+78); ASGNU2(addr,reg)*
     348/     808 : (MACRO)             	ldA2 R10,'O',sp,(-48+78); reg:addr
     349/     810 : (MACRO)             	alu2 R11,R11,R10,add,adc
     350/     81C : (MACRO)             	ldaD R10,48; reg:acon
     351/     822 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     352/     824 :                     ;      }
     353/     824 :                     L44:
     354/     824 :                     ;      while (idx < dec_digits) {
     355/     824 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     356/     830 : (MACRO)             	jcU2 r11,r7,lbnf,L43; LT=lbnf i.e. subtract B from A and jump if borrow 
     357/     83D :                     ;      if (idx == 0) {
     358/     83D : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     359/     849 : (MACRO)             	jnzU2 r11,L49; NE 0
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 7 - 4/3/2013 16:00:11


     360/     851 :                     ;         *output++ = '0' ;
     361/     851 : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     362/     85D : (MACRO)             	cpy2 R10,R11
     363/     861 : (MACRO)             	incm R10,1
     364/     862 : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     365/     86F : (MACRO)             	ldaD R10,48; reg:acon
     366/     875 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     367/     877 :                     ;      } else {
     368/     877 : C0 08 EB            	lbr L47
     369/     87A :                     L48:
     370/     87A :                     ;         while (idx > 0) {
     371/     87A :                     ;            *output++ = tbfr[idx-1] ;
     372/     87A : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     373/     886 : (MACRO)             	cpy2 R10,R11
     374/     88A : (MACRO)             	incm R10,1
     375/     88B : (MACRO)             	st2 R10,'O',sp,(-54+78); ASGNP2
     376/     898 : (MACRO)             	ld2 R10,'O',sp,(-4+78); reg:INDIRU2(addr)
     377/     8A4 : (MACRO)             	decm R10,1
     378/     8A5 : (MACRO)             	ldA2 R9,'O',sp,(-48+78); reg:addr
     379/     8AD : (MACRO)             	alu2 R10,R10,R9,add,adc
     380/     8B9 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     381/     8BB : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     382/     8BD :                     ;            idx-- ;
     383/     8BD : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     384/     8C9 : (MACRO)             	decm R11,1
     385/     8CA : (MACRO)             	st2 R11,'O',sp,(-4+78); ASGNU2(addr,reg)*
     386/     8D7 :                     ;         }
     387/     8D7 :                     L49:
     388/     8D7 :                     ;         while (idx > 0) {
     389/     8D7 : (MACRO)             	ld2 R11,'O',sp,(-4+78); reg:INDIRU2(addr)
     390/     8E3 : (MACRO)             	jnzU2 r11,L48; NE 0
     391/     8EB :                     ;      }
     392/     8EB :                     L47:
     393/     8EB :                     ;   }
     394/     8EB :                     L38:
     395/     8EB :                     ;   *output = 0 ;
     396/     8EB : (MACRO)             	ld2 R11,'O',sp,(-54+78);reg:  INDIRP2(addr)
     397/     8F7 : (MACRO)             	ldaD R10,0; reg:acon
     398/     8FD : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     399/     8FF :                     ;   return outbfr;
     400/     8FF : (MACRO)             	ld2 R15,'O',sp,(4+78);reg:  INDIRP2(addr)
     401/     90B :                     L21:
     402/     90B : (MACRO)             	release 4; release room for outgoing arguments
     403/     90F : (MACRO)             	popr r7
     404/     913 : (MACRO)             	popr r1
     405/     917 : (MACRO)             	popr r0
     406/     91B : (MACRO)             	release 66; release room for local variables 
     407/     923 : (MACRO)             	Cretn
     408/     924 :                     
     409/     924 :                     _itoa:
     410/     924 : (MACRO)             	reserve 4; save room for local variables
     411/     928 : (MACRO)             	pushr r0
     412/     92D : (MACRO)             	pushr r1
     413/     932 : (MACRO)             	pushr r7
     414/     937 : (MACRO)             	reserve 4; save room for outgoing arguments
     415/     93B : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     416/     948 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     417/     955 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     418/     955 :                     ;	unsigned int flag=0;
     419/     955 : (MACRO)             	ld2z R11
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 8 - 4/3/2013 16:00:11


     420/     959 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     421/     966 :                     ;	char * bptr; bptr=buffer;
     422/     966 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
     423/     972 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     424/     97F :                     ;	if (s<0){
     425/     97F : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     426/     98B : (MACRO)             	jcI2I r11,0,lbdf,L52; GE is flipped test from LT
     427/     99C :                     ;		*bptr='-';bptr++;
     428/     99C : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     429/     9A8 : (MACRO)             	ldaD R10,45; reg:acon
     430/     9AE : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     431/     9B0 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     432/     9BC : (MACRO)             	incm R11,1
     433/     9BD : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     434/     9CA :                     ;		n=-s;
     435/     9CA : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     436/     9D6 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     437/     9DF : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     438/     9E3 :                     ;	} else{
     439/     9E3 : C0 09 F6            	lbr L53
     440/     9E6 :                     L52:
     441/     9E6 :                     ;		n=s;
     442/     9E6 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     443/     9F2 : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     444/     9F6 :                     ;	}
     445/     9F6 :                     L53:
     446/     9F6 :                     ;	k=10000;
     447/     9F6 : (MACRO)             	ldaD R7,10000; reg:acon
     448/     9FC : C0 0A A0            	lbr L55
     449/     9FF :                     L54:
     450/     9FF :                     ;	while(k>0){
     451/     9FF :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     452/     9FF : (MACRO)             	ld2z R0
     453/     A03 : C0 0A 13            	lbr L60
     454/     A06 :                     L57:
     455/     A06 :                     L58:
     456/     A06 : (MACRO)             	incm R0,1
     457/     A07 : (MACRO)             	alu2 R1,R1,R7,sm,smb
     458/     A13 :                     L60:
     459/     A13 : (MACRO)             	jcU2 r1,r7,lbdf,L57 ;LE is flipped test & operands
     460/     A20 :                     ;		if (flag || r>0||k==1){
     461/     A20 : (MACRO)             	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
     462/     A2C : (MACRO)             	jnzU2 r11,L64; NE 0
     463/     A34 : (MACRO)             	jnzU2 r0,L64; NE 0
     464/     A3C : (MACRO)             	jneU2I r7,1,L61; NE
     465/     A48 :                     L64:
     466/     A48 :                     ;			*bptr=('0'+r);bptr++;
     467/     A48 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     468/     A54 : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     469/     A5C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     470/     A5E : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     471/     A6A : (MACRO)             	incm R11,1
     472/     A6B : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     473/     A78 :                     ;			flag='y';
     474/     A78 : (MACRO)             	ldaD R11,121; reg:acon
     475/     A7E : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     476/     A8B :                     ;		}
     477/     A8B :                     L61:
     478/     A8B :                     ;		k=k/10;
     479/     A8B : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 9 - 4/3/2013 16:00:11


     480/     A8F : (MACRO)             	ldaD R13,10; reg:acon
     481/     A95 : (MACRO)             	Ccall _divu2
     482/     A98 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     483/     A9C : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
     484/     AA0 :                     ;	}
     485/     AA0 :                     L55:
     486/     AA0 :                     ;	while(k>0){
     487/     AA0 : (MACRO)             	jnzU2 r7,L54; NE 0
     488/     AA8 :                     ;	*bptr='\0';
     489/     AA8 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     490/     AB4 : (MACRO)             	ldaD R10,0; reg:acon
     491/     ABA : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     492/     ABC :                     ;	return buffer;
     493/     ABC : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
     494/     AC8 :                     L51:
     495/     AC8 : (MACRO)             	release 4; release room for outgoing arguments
     496/     ACC : (MACRO)             	popr r7
     497/     AD0 : (MACRO)             	popr r1
     498/     AD4 : (MACRO)             	popr r0
     499/     AD8 : (MACRO)             	release 4; release room for local variables 
     500/     ADC : (MACRO)             	Cretn
     501/     ADD :                     
     502/     ADD :                     _ltoa:
     503/     ADD : (MACRO)             	reserve 0; save room for local variables
     504/     ADD : (MACRO)             	pushr r0
     505/     AE2 : (MACRO)             	pushr r1
     506/     AE7 : (MACRO)             	pushr r7
     507/     AEC : (MACRO)             	reserve 6; save room for outgoing arguments
     508/     AF2 : (MACRO)             	cpy4 RL0,RL12; halfbaked
     509/     AFA :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     510/     AFA :                     ;	char* bptr=buffer;
     511/     AFA : (MACRO)             	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
     512/     B06 :                     ;	if (s<0){
     513/     B06 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     514/     B12 : (MACRO)             	jcI4 RL0,RL10,lbdf,L66; GE is flipped test from LT
     515/     B2E :                     ;		*bptr++='-';
     516/     B2E : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     517/     B32 : (MACRO)             	cpy2 R7,R11
     518/     B36 : (MACRO)             	incm R7,1
     519/     B37 : (MACRO)             	ldaD R10,45; reg:acon
     520/     B3D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     521/     B3F :                     ;		s=-s;
     522/     B3F : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     523/     B5F :                     ;	}
     524/     B5F :                     L66:
     525/     B5F :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     526/     B5F : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     527/     B67 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     528/     B74 : (MACRO)             	Ccall _dubdabx
     529/     B77 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     530/     B7B : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
     531/     B7F : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     532/     B83 : (MACRO)             	Ccall _strcpy
     533/     B86 :                     ;	return buffer;
     534/     B86 : (MACRO)             	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
     535/     B92 :                     L65:
     536/     B92 : (MACRO)             	release 6; release room for outgoing arguments
     537/     B98 : (MACRO)             	popr r7
     538/     B9C : (MACRO)             	popr r1
     539/     BA0 : (MACRO)             	popr r0
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 10 - 4/3/2013 16:00:11


     540/     BA4 : (MACRO)             	release 0; release room for local variables 
     541/     BA4 : (MACRO)             	Cretn
     542/     BA5 :                     
     543/     BA5 :                     _printint:
     544/     BA5 : (MACRO)             	reserve 12
     545/     BAF : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     546/     BBC :                     ;void printint(int s){ //print an integer
     547/     BBC :                     ;	itoa(s,buffer);
     548/     BBC : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
     549/     BC8 : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     550/     BD0 : (MACRO)             	Ccall _itoa
     551/     BD3 :                     ;	printstr(buffer);
     552/     BD3 : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     553/     BDB : (MACRO)             	Ccall _printstr
     554/     BDE :                     ;}
     555/     BDE :                     L68:
     556/     BDE : (MACRO)             	release 12
     557/     BE6 : (MACRO)             	Cretn
     558/     BE7 :                     
     559/     BE7 :                     _printlint:
     560/     BE7 : (MACRO)             	reserve 18
     561/     BF1 : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     562/     BFE : (MACRO)             	st2 r13,'O',sp,(22); flag1 
     563/     C0B :                     ;void printlint(long s){ //print a long integer
     564/     C0B :                     ;	printstr(ltoa(s,buffer));
     565/     C0B : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
     566/     C1B : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     567/     C23 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     568/     C30 : (MACRO)             	Ccall _ltoa
     569/     C33 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     570/     C37 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     571/     C3B : (MACRO)             	Ccall _printstr
     572/     C3E :                     ;}
     573/     C3E :                     L69:
     574/     C3E : (MACRO)             	release 18
     575/     C46 : (MACRO)             	Cretn
     576/     C47 :                     
     577/     C47 :                     _printflt:
     578/     C47 : (MACRO)             	reserve 24
     579/     C51 : (MACRO)             	st2 r12,'O',sp,(26); flag1 
     580/     C5E : (MACRO)             	st2 r13,'O',sp,(28); flag1 
     581/     C6B :                     ;void printflt(float s){ //print a float
     582/     C6B :                     ;	printstr(ftoa(s,buffer,6));
     583/     C6B : (MACRO)             	ld4 Rp1p2,'O',sp,(0+26);INDIRF4(addr)
     584/     C7B : (MACRO)             	ldA2 R11,'O',sp,(-18+26); reg:addr
     585/     C83 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     586/     C90 : (MACRO)             	ldaD R11,6; reg:acon
     587/     C96 : (MACRO)             	st2 r11,'O',sp,(6); arg+f**
     588/     CA3 : (MACRO)             	Ccall _ftoa
     589/     CA6 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     590/     CAA : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     591/     CAE : (MACRO)             	Ccall _printstr
     592/     CB1 :                     ;}
     593/     CB1 :                     L70:
     594/     CB1 : (MACRO)             	release 24
     595/     CB9 : (MACRO)             	Cretn
     596/     CBA :                     
     597/     CBA :                     _putxn:
     598/     CBA : (MACRO)             	reserve 4
     599/     CBE : (MACRO)             	st2 r12,'O',sp,(6); flag1 
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 11 - 4/3/2013 16:00:11


     600/     CCB : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     601/     CD7 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     602/     CE1 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     603/     CE1 :                     ;	if (x<10){
     604/     CE1 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     605/     CEB : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     606/     CEE : (MACRO)             	jcI2I r11,10,lbdf,L72; GE is flipped test from LT
     607/     CFF :                     ;		putc(x+'0');
     608/     CFF : (MACRO)             	ld1 R11,'O',sp,(0+6)
     609/     D09 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     610/     D0C : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     611/     D14 : (MACRO)             	cpy1 R12,R11
     612/     D16 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     613/     D19 : (MACRO)             	Ccall _putc
     614/     D1C :                     ;	} else {
     615/     D1C : C0 0D 44            	lbr L73
     616/     D1F :                     L72:
     617/     D1F :                     ;		putc(x+'A'-10);
     618/     D1F : (MACRO)             	ld1 R11,'O',sp,(0+6)
     619/     D29 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     620/     D2C : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     621/     D34 : (MACRO)             	alu2I R11,R11,10,smi,smbi
     622/     D3C : (MACRO)             	cpy1 R12,R11
     623/     D3E : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     624/     D41 : (MACRO)             	Ccall _putc
     625/     D44 :                     ;	}
     626/     D44 :                     L73:
     627/     D44 :                     ;}
     628/     D44 :                     L71:
     629/     D44 : (MACRO)             	release 4
     630/     D48 : (MACRO)             	Cretn
     631/     D49 :                     
     632/     D49 :                     _putx:
     633/     D49 : (MACRO)             	reserve 4
     634/     D4D : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     635/     D5A : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     636/     D66 : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     637/     D70 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     638/     D70 :                     ;	putxn(x>>4);
     639/     D70 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     640/     D7A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     641/     D7D : (MACRO)             	shrI2I R11,4
     642/     D9D : (MACRO)             	cpy1 R12,R11
     643/     D9F : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     644/     DA2 : (MACRO)             	Ccall _putxn
     645/     DA5 :                     ;	putxn(x & 0x0F);
     646/     DA5 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     647/     DAF : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     648/     DB2 : (MACRO)             	alu2I R11,R11,15,ani,ani
     649/     DBA :                     	;removed ?	cpy2 R11,R11
     650/     DBA : (MACRO)             	cpy1 R12,R11
     651/     DBC : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     652/     DBF : (MACRO)             	Ccall _putxn
     653/     DC2 :                     ;}
     654/     DC2 :                     L74:
     655/     DC2 : (MACRO)             	release 4
     656/     DC6 : (MACRO)             	Cretn
     657/     DC7 :                     
     658/     DC7 :                     _printf:
     659/     DC7 : (MACRO)             	reserve 4; save room for local variables
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 12 - 4/3/2013 16:00:11


     660/     DCB : (MACRO)             	pushr r0
     661/     DD0 : (MACRO)             	pushr r1
     662/     DD5 : (MACRO)             	pushr r7
     663/     DDA : (MACRO)             	reserve 4; save room for outgoing arguments
     664/     DDE : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     665/     DEB : (MACRO)             	st2 r13,'O',sp,(18); flag2
     666/     DF8 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     667/     DF8 :                     ;	int argslot=0;	//used to align longs
     668/     DF8 : (MACRO)             	ld2z R0
     669/     DFC :                     ;	int * this=(int *)&ptr;
     670/     DFC : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     671/     E04 :                     ;	this++; argslot++; //advance argument pointer and slot #
     672/     E04 : (MACRO)             	incm R1,2
     673/     E06 : (MACRO)             	incm R0,1
     674/     E07 : C0 11 DD            	lbr L77
     675/     E0A :                     L76:
     676/     E0A :                     ;    while(*ptr) {
     677/     E0A :                     ;		c=*ptr++;
     678/     E0A : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     679/     E16 : (MACRO)             	cpy2 R10,R11
     680/     E1A : (MACRO)             	incm R10,1
     681/     E1B : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     682/     E28 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     683/     E2A :                     ;		if (c!='%'){
     684/     E2A : (MACRO)             	cpy1 R11,R7
     685/     E2C : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     686/     E2F : (MACRO)             	jeqU2I r11,37,L79;EQI2(reg,con)
     687/     E3B :                     ;			putc(c);
     688/     E3B : (MACRO)             	cpy1 R12,R7
     689/     E3D : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     690/     E40 : (MACRO)             	Ccall _putc
     691/     E43 :                     ;		} else{
     692/     E43 : C0 11 DD            	lbr L80
     693/     E46 :                     L79:
     694/     E46 :                     ;			c=*ptr++;
     695/     E46 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     696/     E52 : (MACRO)             	cpy2 R10,R11
     697/     E56 : (MACRO)             	incm R10,1
     698/     E57 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     699/     E64 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     700/     E66 :                     ;			switch (c){
     701/     E66 : (MACRO)             	cpy1 R11,R7
     702/     E68 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     703/     E6B : (MACRO)             	st2 R11,'O',sp,(-5+16)
     704/     E78 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     705/     E84 : (MACRO)             	jcI2I r11,99,lbnf,L100  ;LT=lbnf i.e. subtract immedB from A and jump if borrow
     706/     E95 : (MACRO)             	jnI2I r11,108,lbnf,L101; GT reverse  the subtraction
     707/     EA6 : (MACRO)             	shl2I R11,1
     708/     EAC : (MACRO)             	ld2 R11,'O',R11,(L102-198);reg:  INDIRP2(addr)
     709/     EB8 : (MACRO)             	jumpv r11; JUMPV(reg)
     710/     EC2 :                     L102:
     711/     EC2 : 0F 82               	dw L86
     712/     EC4 : 0F 44               	dw L84
     713/     EC6 : 11 CC               	dw L81
     714/     EC8 : 11 7C               	dw L95
     715/     ECA : 11 CC               	dw L81
     716/     ECC : 11 CC               	dw L81
     717/     ECE : 0F 44               	dw L84
     718/     ED0 : 11 CC               	dw L81
     719/     ED2 : 11 CC               	dw L81
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 13 - 4/3/2013 16:00:11


     720/     ED4 : 10 12               	dw L88
     721/     ED6 :                     L100:
     722/     ED6 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     723/     EE2 : (MACRO)             	jeqU2I r11,88,L87;EQI2(reg,con)
     724/     EEE : C0 11 CC            	lbr L81
     725/     EF1 :                     L101:
     726/     EF1 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     727/     EFD : (MACRO)             	ldaD R10,115; reg:acon
     728/     F03 : (MACRO)             	jeqI2 r11,r10,L85; EQI2(reg,reg)
     729/     F15 : (MACRO)             	jcI2 r11,r10,lbnf,L81; LT=lbnf i.e. subtract B from A and jump if borrow 
     730/     F29 :                     L104:
     731/     F29 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     732/     F35 : (MACRO)             	jeqU2I r11,120,L87;EQI2(reg,con)
     733/     F41 : C0 11 CC            	lbr L81
     734/     F44 :                     L84:
     735/     F44 :                     ;					printint(*this++);
     736/     F44 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     737/     F48 : (MACRO)             	cpy2 R1,R11
     738/     F4C : (MACRO)             	incm R1,2
     739/     F4E : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
     740/     F5A : (MACRO)             	Ccall _printint
     741/     F5D :                     ;					argslot+=1; //next argument slot
     742/     F5D : (MACRO)             	incm R0,1
     743/     F5E :                     ;					break;
     744/     F5E : C0 11 DD            	lbr L82
     745/     F61 :                     L85:
     746/     F61 :                     ;					printstr((char*) *this++);
     747/     F61 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     748/     F65 : (MACRO)             	cpy2 R1,R11
     749/     F69 : (MACRO)             	incm R1,2
     750/     F6B : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     751/     F77 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     752/     F7B : (MACRO)             	Ccall _printstr
     753/     F7E :                     ;					argslot+=1; //next argument slot
     754/     F7E : (MACRO)             	incm R0,1
     755/     F7F :                     ;					break;
     756/     F7F : C0 11 DD            	lbr L82
     757/     F82 :                     L86:
     758/     F82 :                     ;					putc((unsigned int) *this++);
     759/     F82 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     760/     F86 : (MACRO)             	cpy2 R1,R11
     761/     F8A : (MACRO)             	incm R1,2
     762/     F8C : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     763/     F98 : (MACRO)             	cpy1 R12,R11
     764/     F9A : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     765/     F9D : (MACRO)             	Ccall _putc
     766/     FA0 :                     ;					argslot+=1; //next argument slot
     767/     FA0 : (MACRO)             	incm R0,1
     768/     FA1 :                     ;					break;
     769/     FA1 : C0 11 DD            	lbr L82
     770/     FA4 :                     L87:
     771/     FA4 :                     ;					putx(((unsigned int) *this)>>8);
     772/     FA4 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     773/     FB0 : (MACRO)             	shrU2I R11,8
     774/     FE0 : (MACRO)             	cpy1 R12,R11
     775/     FE2 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     776/     FE5 : (MACRO)             	Ccall _putx
     777/     FE8 :                     ;					putx(((unsigned int) *this++)&255);
     778/     FE8 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     779/     FEC : (MACRO)             	cpy2 R1,R11
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 14 - 4/3/2013 16:00:11


     780/     FF0 : (MACRO)             	incm R1,2
     781/     FF2 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     782/     FFE : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     783/    1006 : (MACRO)             	cpy1 R12,R11
     784/    1008 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     785/    100B : (MACRO)             	Ccall _putx
     786/    100E :                     ;					argslot+=1; //next argument slot
     787/    100E : (MACRO)             	incm R0,1
     788/    100F :                     ;					break;
     789/    100F : C0 11 DD            	lbr L82
     790/    1012 :                     L88:
     791/    1012 :                     ;					if (*ptr){ //as long as there's something there
     792/    1012 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     793/    101E : (MACRO)             	ld1 R11,'O',R11,0
     794/    1028 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     795/    102B : (MACRO)             	jzU2 r11,L89; EQ 0
     796/    1033 :                     ;						xord=*ptr++;
     797/    1033 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     798/    103F : (MACRO)             	cpy2 R10,R11
     799/    1043 : (MACRO)             	incm R10,1
     800/    1044 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     801/    1051 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     802/    1053 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     803/    105D :                     ;						if (argslot&1) {
     804/    105D : (MACRO)             	alu2I R11,R0,1,ani,ani
     805/    1065 :                     	;removed ?	cpy2 R11,R0
     806/    1065 : (MACRO)             	jzU2 r11,L91; EQ 0
     807/    106D :                     ;							this++;
     808/    106D : (MACRO)             	incm R1,2
     809/    106F :                     ;							argslot++;
     810/    106F : (MACRO)             	incm R0,1
     811/    1070 :                     ;						}
     812/    1070 :                     L91:
     813/    1070 :                     ;						if(xord=='d'){
     814/    1070 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     815/    107A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     816/    107D : (MACRO)             	jneU2I r11,100,L93; NE
     817/    1089 :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     818/    1089 : (MACRO)             	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
     819/    1099 : (MACRO)             	Ccall _printlint
     820/    109C :                     ;							this+=2;				// and advances it 4 bytes
     821/    109C : (MACRO)             	incm R1,4
     822/    10A0 :                     ;						} else{
     823/    10A0 : C0 11 77            	lbr L94
     824/    10A3 :                     L93:
     825/    10A3 :                     ;							putx(((unsigned int) *this)>>8);
     826/    10A3 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     827/    10AF : (MACRO)             	shrU2I R11,8
     828/    10DF : (MACRO)             	cpy1 R12,R11
     829/    10E1 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     830/    10E4 : (MACRO)             	Ccall _putx
     831/    10E7 :                     ;							putx(((unsigned int) *this++)&255);
     832/    10E7 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     833/    10EB : (MACRO)             	cpy2 R1,R11
     834/    10EF : (MACRO)             	incm R1,2
     835/    10F1 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     836/    10FD : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     837/    1105 : (MACRO)             	cpy1 R12,R11
     838/    1107 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     839/    110A : (MACRO)             	Ccall _putx
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 15 - 4/3/2013 16:00:11


     840/    110D :                     ;							putx(((unsigned int) *this)>>8);
     841/    110D : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     842/    1119 : (MACRO)             	shrU2I R11,8
     843/    1149 : (MACRO)             	cpy1 R12,R11
     844/    114B : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     845/    114E : (MACRO)             	Ccall _putx
     846/    1151 :                     ;							putx(((unsigned int) *this++)&255);
     847/    1151 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     848/    1155 : (MACRO)             	cpy2 R1,R11
     849/    1159 : (MACRO)             	incm R1,2
     850/    115B : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     851/    1167 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     852/    116F : (MACRO)             	cpy1 R12,R11
     853/    1171 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     854/    1174 : (MACRO)             	Ccall _putx
     855/    1177 :                     ;						}
     856/    1177 :                     L94:
     857/    1177 :                     ;						argslot+=2;
     858/    1177 : (MACRO)             	incm R0,2
     859/    1179 :                     ;						break;
     860/    1179 : C0 11 DD            	lbr L82
     861/    117C :                     L89:
     862/    117C :                     L95:
     863/    117C :                     ;					if (*ptr){ //as long as there's something there
     864/    117C : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     865/    1188 : (MACRO)             	ld1 R11,'O',R11,0
     866/    1192 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     867/    1195 : (MACRO)             	jzU2 r11,L96; EQ 0
     868/    119D :                     ;						if (argslot&1) { //adjust alignment
     869/    119D : (MACRO)             	alu2I R11,R0,1,ani,ani
     870/    11A5 :                     	;removed ?	cpy2 R11,R0
     871/    11A5 : (MACRO)             	jzU2 r11,L98; EQ 0
     872/    11AD :                     ;							this++;
     873/    11AD : (MACRO)             	incm R1,2
     874/    11AF :                     ;							argslot++;
     875/    11AF : (MACRO)             	incm R0,1
     876/    11B0 :                     ;						}
     877/    11B0 :                     L98:
     878/    11B0 :                     ;						printflt(*(float *)this);//treats "this" as a pointer to float
     879/    11B0 : (MACRO)             	ld4 Rp1p2,'O',R1,0;INDIRF4(addr)
     880/    11C0 : (MACRO)             	Ccall _printflt
     881/    11C3 :                     ;						this+=2;				// and advances it 4 bytes
     882/    11C3 : (MACRO)             	incm R1,4
     883/    11C7 :                     ;						argslot+=2;
     884/    11C7 : (MACRO)             	incm R0,2
     885/    11C9 :                     ;						break;
     886/    11C9 : C0 11 DD            	lbr L82
     887/    11CC :                     L96:
     888/    11CC :                     L81:
     889/    11CC :                     ;					putc('%');putc(c);
     890/    11CC : (MACRO)             	ldaD R12,37; reg:acon
     891/    11D2 : (MACRO)             	Ccall _putc
     892/    11D5 : (MACRO)             	cpy1 R12,R7
     893/    11D7 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     894/    11DA : (MACRO)             	Ccall _putc
     895/    11DD :                     ;			} //switch
     896/    11DD :                     L82:
     897/    11DD :                     ;		} //%
     898/    11DD :                     L80:
     899/    11DD :                     ;	} //while
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 16 - 4/3/2013 16:00:11


     900/    11DD :                     L77:
     901/    11DD :                     ;    while(*ptr) {
     902/    11DD : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     903/    11E9 : (MACRO)             	ld1 R11,'O',R11,0
     904/    11F3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     905/    11F6 : (MACRO)             	jnzU2 r11,L76; NE 0
     906/    11FE :                     ;} //prtf
     907/    11FE :                     L75:
     908/    11FE : (MACRO)             	release 4; release room for outgoing arguments
     909/    1202 : (MACRO)             	popr r7
     910/    1206 : (MACRO)             	popr r1
     911/    120A : (MACRO)             	popr r0
     912/    120E : (MACRO)             	release 4; release room for local variables 
     913/    1212 : (MACRO)             	Cretn
     914/    1213 :                     
     915/    1213 :                     _exit:
     916/    1213 : (MACRO)             	reserve 4
     917/    1217 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     918/    1224 :                     ;void exit(int code){
     919/    1224 :                     ;	printf("exit %d\n",code);
     920/    1224 : (MACRO)             	ldaD R12,L106; reg:acon
     921/    122A : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
     922/    1236 : (MACRO)             	Ccall _printf
     923/    1239 :                     L107:
     924/    1239 :                     ;	while(1);
     925/    1239 :                     L108:
     926/    1239 : C0 12 39            	lbr L107
     927/    123C :                     ;}
     928/    123C :                     L105:
     929/    123C : (MACRO)             	release 4
     930/    1240 : (MACRO)             	Cretn
     931/    1241 :                     
     932/    1241 :                     _memcmp:
     933/    1241 : (MACRO)             	reserve 2; save room for local variables
     934/    1243 : (MACRO)             	pushr r0
     935/    1248 : (MACRO)             	pushr r1
     936/    124D : (MACRO)             	pushr r7
     937/    1252 : (MACRO)             	reserve 0; save room for outgoing arguments
     938/    1252 : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
     939/    125E :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
     940/    125E :                     ;    int v = 0;
     941/    125E : (MACRO)             	ld2z R1
     942/    1262 :                     ;    p1 = (unsigned char *)Ptr1;
     943/    1262 : (MACRO)             	cpy2 R0,R12 ;LOADP2(reg)
     944/    1266 :                     ;    p2 = (unsigned char *)Ptr2;
     945/    1266 : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
     946/    1273 : C0 12 C3            	lbr L112
     947/    1276 :                     L111:
     948/    1276 :                     ;    while(Count-- > 0 && v == 0) {
     949/    1276 :                     ;        v = *(p1++) - *(p2++);
     950/    1276 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
     951/    127A : (MACRO)             	cpy2 R0,R11
     952/    127E : (MACRO)             	incm R0,1
     953/    127F : (MACRO)             	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
     954/    128B : (MACRO)             	cpy2 R9,R10
     955/    128F : (MACRO)             	incm R9,1
     956/    1290 : (MACRO)             	st2 R9,'O',sp,(-4+10); ASGNP2
     957/    129D : (MACRO)             	ld1 R11,'O',R11,0
     958/    12A7 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     959/    12AA : (MACRO)             	ld1 R10,'O',R10,0
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 17 - 4/3/2013 16:00:11


     960/    12B4 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
     961/    12B7 : (MACRO)             	alu2 R1,R11,R10,sm,smb
     962/    12C3 :                     ;    }
     963/    12C3 :                     L112:
     964/    12C3 :                     ;    while(Count-- > 0 && v == 0) {
     965/    12C3 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     966/    12C7 : (MACRO)             	cpy2 R7,R11
     967/    12CB : (MACRO)             	decm R7,1
     968/    12CC : (MACRO)             	jeqU2I r11,0,L114;EQU2(reg,con)
     969/    12D8 : (MACRO)             	jzU2 r1,L111; EQ 0
     970/    12E0 :                     L114:
     971/    12E0 :                     ;    return v;
     972/    12E0 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)
     973/    12E4 :                     L110:
     974/    12E4 : (MACRO)             	release 0; release room for outgoing arguments
     975/    12E4 : (MACRO)             	popr r7
     976/    12E8 : (MACRO)             	popr r1
     977/    12EC : (MACRO)             	popr r0
     978/    12F0 : (MACRO)             	release 2; release room for local variables 
     979/    12F2 : (MACRO)             	Cretn
     980/    12F3 :                     
     981/    12F3 :                     _memcpy:
     982/    12F3 : (MACRO)             	reserve 0; save room for local variables
     983/    12F3 : (MACRO)             	pushr r0
     984/    12F8 : (MACRO)             	pushr r1
     985/    12FD : (MACRO)             	pushr r7
     986/    1302 : (MACRO)             	reserve 0; save room for outgoing arguments
     987/    1302 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
     988/    130E :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
     989/    130E :                     ;        char* dst8 = (char*)dest;
     990/    130E : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
     991/    1312 :                     ;        char* src8 = (char*)src;
     992/    1312 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
     993/    1316 : C0 13 2F            	lbr L117
     994/    1319 :                     L116:
     995/    1319 :                     ;        while (count--) {
     996/    1319 :                     ;            *dst8++ = *src8++;
     997/    1319 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     998/    131D : (MACRO)             	cpy2 R1,R11
     999/    1321 : (MACRO)             	incm R1,1
    1000/    1322 : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
    1001/    1326 : (MACRO)             	cpy2 R0,R10
    1002/    132A : (MACRO)             	incm R0,1
    1003/    132B : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    1004/    132D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1005/    132F :                     ;        }
    1006/    132F :                     L117:
    1007/    132F :                     ;        while (count--) {
    1008/    132F : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1009/    1333 : (MACRO)             	cpy2 R7,R11
    1010/    1337 : (MACRO)             	decm R7,1
    1011/    1338 : (MACRO)             	jnzU2 r11,L116; NE 0
    1012/    1340 :                     ;        return dest;
    1013/    1340 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1014/    1344 :                     L115:
    1015/    1344 : (MACRO)             	release 0; release room for outgoing arguments
    1016/    1344 : (MACRO)             	popr r7
    1017/    1348 : (MACRO)             	popr r1
    1018/    134C : (MACRO)             	popr r0
    1019/    1350 : (MACRO)             	release 0; release room for local variables 
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 18 - 4/3/2013 16:00:11


    1020/    1350 : (MACRO)             	Cretn
    1021/    1351 :                     
    1022/    1351 :                     _memset:
    1023/    1351 : (MACRO)             	reserve 0; save room for local variables
    1024/    1351 : (MACRO)             	pushr r1
    1025/    1356 : (MACRO)             	pushr r7
    1026/    135B : (MACRO)             	reserve 0; save room for outgoing arguments
    1027/    135B : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1028/    1367 :                     ;{
    1029/    1367 :                     ;    unsigned char* p=s;
    1030/    1367 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1031/    136B : C0 13 7D            	lbr L121
    1032/    136E :                     L120:
    1033/    136E :                     ;        *p++ = (unsigned char)c;
    1034/    136E : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1035/    1372 : (MACRO)             	cpy2 R1,R11
    1036/    1376 : (MACRO)             	incm R1,1
    1037/    1377 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    1038/    137B : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1039/    137D :                     L121:
    1040/    137D :                     ;    while(n--)
    1041/    137D : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1042/    1381 : (MACRO)             	cpy2 R7,R11
    1043/    1385 : (MACRO)             	decm R7,1
    1044/    1386 : (MACRO)             	jnzU2 r11,L120; NE 0
    1045/    138E :                     ;    return s;
    1046/    138E : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1047/    1392 :                     L119:
    1048/    1392 : (MACRO)             	release 0; release room for outgoing arguments
    1049/    1392 : (MACRO)             	popr r7
    1050/    1396 : (MACRO)             	popr r1
    1051/    139A : (MACRO)             	release 0; release room for local variables 
    1052/    139A : (MACRO)             	Cretn
    1053/    139B :                     
    1054/    139B :                     _n:
    1055/    139B : 00 00               	db 2 dup (0); zerofill global
    1056/    139D :                     	align 4
    1057/    13A0 :                     _term:
    1058/    13A0 : 00 00 00 00         	db 4 dup (0); zerofill global
    1059/    13A4 :                     L106:
    1060/    13A4 : 65                  	db 101
    1061/    13A5 : 78                  	db 120
    1062/    13A6 : 69                  	db 105
    1063/    13A7 : 74                  	db 116
    1064/    13A8 : 20                  	db 32
    1065/    13A9 : 25                  	db 37
    1066/    13AA : 64                  	db 100
    1067/    13AB : 0A                  	db 10
    1068/    13AC : 00                  	db 0
    1069/    13AD :                     	align 4
    1070/    13B0 :                     L25:
    1071/    13B0 : BF 80 00 00         	dd 0xbf800000
    1072/    13B4 :                     	align 4
    1073/    13B4 :                     L24:
    1074/    13B4 : 00 00 00 00         	dd 0x0
    1075/    13B8 :                     L11:
    1076/    13B8 : 65                  	db 101
    1077/    13B9 : 6E                  	db 110
    1078/    13BA : 64                  	db 100
    1079/    13BB : 0A                  	db 10
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 19 - 4/3/2013 16:00:11


    1080/    13BC : 00                  	db 0
    1081/    13BD :                     	align 4
    1082/    13C0 :                     L10:
    1083/    13C0 : 40 80 00 00         	dd 0x40800000
    1084/    13C4 :                     L9:
    1085/    13C4 : 4E                  	db 78
    1086/    13C5 : 3D                  	db 61
    1087/    13C6 : 25                  	db 37
    1088/    13C7 : 64                  	db 100
    1089/    13C8 : 2C                  	db 44
    1090/    13C9 : 20                  	db 32
    1091/    13CA : 64                  	db 100
    1092/    13CB : 65                  	db 101
    1093/    13CC : 6E                  	db 110
    1094/    13CD : 6F                  	db 111
    1095/    13CE : 6D                  	db 109
    1096/    13CF : 3D                  	db 61
    1097/    13D0 : 25                  	db 37
    1098/    13D1 : 66                  	db 102
    1099/    13D2 : 2C                  	db 44
    1100/    13D3 : 20                  	db 32
    1101/    13D4 : 50                  	db 80
    1102/    13D5 : 49                  	db 73
    1103/    13D6 : 3D                  	db 61
    1104/    13D7 : 25                  	db 37
    1105/    13D8 : 66                  	db 102
    1106/    13D9 : 0A                  	db 10
    1107/    13DA : 00                  	db 0
    1108/    13DB :                     	align 4
    1109/    13DC :                     L8:
    1110/    13DC : BF 80 00 00         	dd 0xbf800000
    1111/    13E0 :                     	align 4
    1112/    13E0 :                     L7:
    1113/    13E0 : 40 00 00 00         	dd 0x40000000
    1114/    13E4 :                     L2:
    1115/    13E4 : 62                  	db 98
    1116/    13E5 : 65                  	db 101
    1117/    13E6 : 67                  	db 103
    1118/    13E7 : 69                  	db 105
    1119/    13E8 : 6E                  	db 110
    1120/    13E9 : 0A                  	db 10
    1121/    13EA : 00                  	db 0
    1122/    13EB :                     	include lcc1802Epilofl.inc
(1)    1/    13EB :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    13EB :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    13EB :                     ;this is the version published with the lcc1802121229 release
(1)    4/    13EB :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    13EB :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    13EB :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    13EB :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    13EB :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    13EB :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    13EB :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    13EB :                     ;feb 27 changed stack to start at 7fff
(1)   12/    13EB :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    13EB :                     ;mar 28,2013 - LCCepilofl.inc changes scrt to standard big-endian stack
(1)   14/    13EB :                     
(1)   15/    13EB : =EH                 rwork	equ	memAddr	;work register
(1)   16/    13EB :                     lcc1802init:	
(1)   17/    13EB : (MACRO)             	ldiReg	RCALL,_call
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 20 - 4/3/2013 16:00:11


(1)   18/    13F1 : (MACRO)             	ldiReg	RRET,_return
(1)   19/    13F7 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   20/    13FD : E2                  	sex	SP
(1)   21/    13FE : (MACRO)             	ldiReg	RPC,$$_00000
(1)   22/    1404 : D3                  	sep	RPC
(1)   23/    1405 :                     $$_00000:
(1)   24/    1405 : (MACRO)             	Ccall _main	;call the main routine
(1)   25/    1408 : C0 14 08            $$_die:	lbr	$$_die		;loop here when main returns
(1)   26/    140B : DE AD               	db	0xde,0xad
(1)   27/    140D :                     
(1)   28/    140D :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   29/    140D :                     _setqOn:
(1)   30/    140D : 7B                  	seq
(1)   31/    140E : (MACRO)             	Cretn
(1)   32/    140F :                     _setqOff:
(1)   33/    140F : 7A                  	req
(1)   34/    1410 : (MACRO)             	Cretn
(1)   35/    1411 :                     
(1)   36/    1411 :                     _modU2:	;16 bit unsigned remainder
(1)   37/    1411 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   38/    1411 : (MACRO)                 Ccall _divU2
(1)   39/    1414 : 8D                      glo regArg2
(1)   40/    1415 : AF                      plo retVal
(1)   41/    1416 : 9D                      ghi regArg2
(1)   42/    1417 : BF                      phi retVal
(1)   43/    1418 : (MACRO)                 Cretn
(1)   44/    1419 :                         
(1)   45/    1419 :                     _modI2:	;16 bit signed remainder
(1)   46/    1419 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   47/    1419 : (MACRO)                 Ccall _divI2
(1)   48/    141C : 8D                      glo regArg2
(1)   49/    141D : AF                      plo retVal
(1)   50/    141E : 9D                      ghi regArg2
(1)   51/    141F : BF                      phi retVal
(1)   52/    1420 : (MACRO)                 Cretn
(1)   53/    1421 :                     
(1)   54/    1421 :                     _out4:	
(1)   55/    1421 : 8C                  	glo	regArg1
(1)   56/    1422 : 22                  	dec	sp
(1)   57/    1423 : 52                  	str	sp
(1)   58/    1424 : 64                  	out	4
(1)   59/    1425 : (MACRO)             	Cretn
(1)   60/    1426 :                     
(1)   61/    1426 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   62/    1426 :                     	align 256
(1)   63/    1500 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   64/    1500 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   65/    1500 :                     ;Standard Call routine invoked as D4xxxx - big-endian stack convention
(1)   66/    1500 : D3                  	sep     R3 ;go to subroutine
(1)   67/    1501 : E2                  _call	sex	SP ;make sure X=SP
(1)   68/    1502 : 86                  	glo	retAddr ;save previous return pointer on stack
(1)   69/    1503 : 22                  	dec	sp
(1)   70/    1504 : 73                  	stxd
(1)   71/    1505 : 96                  	ghi	retAddr
(1)   72/    1506 : 52                  	str	sp	
(1)   73/    1507 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   74/    1508 : A6                  	plo	retAddr
(1)   75/    1509 : 93                  	ghi	RPC
(1)   76/    150A : B6                  	phi	retAddr
(1)   77/    150B : 46                  	lda	retAddr ;pick up subroutine address into RPC
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 21 - 4/3/2013 16:00:11


(1)   78/    150C : B3                  	phi	RPC
(1)   79/    150D : 46                  	lda	retAddr
(1)   80/    150E : A3                  	plo	RPC
(1)   81/    150F : 30 00               	br	_call-1
(1)   82/    1511 :                     
(1)   83/    1511 :                     ;Standard subroutine return 
(1)   84/    1511 : D3                  	sep	RPC	;return to the original program
(1)   85/    1512 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   86/    1513 : A3                  	plo	RPC
(1)   87/    1514 : 96                  	ghi	retAddr
(1)   88/    1515 : B3                  	phi	RPC
(1)   89/    1516 : 42                  	lda	SP	;pick up old return address
(1)   90/    1517 : B6                  	phi	retAddr
(1)   91/    1518 : 42                  	lda	SP
(1)   92/    1519 : A6                  	plo	retAddr
(1)   93/    151A : 30 11               	br	_return-1
(1)   94/    151C :                     
(1)   95/    151C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   96/    151C : F8 24               	ldi	(100-15-10-2)/2
(1)   97/    151E : FF 01               $$mslp:	smi	1
(1)   98/    1520 : 3A 1E               	bnz	$$mslp
(1)   99/    1522 : (MACRO)             	Cretn
(1)  100/    1523 :                     
(1)  101/    1523 :                     
(1)  102/    1523 :                     	
(1)  103/    1523 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  104/    1523 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  105/    1523 :                     _mulu2:		
(1)  106/    1523 : 22                      dec sp
(1)  107/    1524 : F8 10                   ldi 16
(1)  108/    1526 : AE                      plo	rwork	;bit count
(1)  109/    1527 : F8 00                   ldi 0
(1)  110/    1529 : BF                      phi	retVal	;quotient
(1)  111/    152A : AF                      plo retVal
(1)  112/    152B :                     $$MultLoop16_16:
(1)  113/    152B : 9C                      ghi regArg1
(1)  114/    152C : F6                      shr
(1)  115/    152D : BC                      phi regArg1
(1)  116/    152E : 8C                      glo regArg1
(1)  117/    152F : 76                      shrc
(1)  118/    1530 : AC                      plo regArg1
(1)  119/    1531 : 3B 3D                   bnf $$MultSkip16_16
(1)  120/    1533 : 8D                      glo regArg2
(1)  121/    1534 : 52                      str sp
(1)  122/    1535 : 8F                      glo retVal
(1)  123/    1536 : F4                      add 
(1)  124/    1537 : AF                      plo retVal
(1)  125/    1538 : 9D                      ghi regArg2
(1)  126/    1539 : 52                      str sp
(1)  127/    153A : 9F                      ghi retVal
(1)  128/    153B : 74                      adc
(1)  129/    153C : BF                      phi retVal
(1)  130/    153D :                     $$MultSkip16_16:
(1)  131/    153D : 8D                      glo regArg2
(1)  132/    153E : FE                      shl
(1)  133/    153F : AD                      plo regArg2
(1)  134/    1540 : 9D                      ghi regArg2
(1)  135/    1541 : 7E                      shlc
(1)  136/    1542 : BD                      phi regArg2
(1)  137/    1543 : 2E                      dec rwork
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 22 - 4/3/2013 16:00:11


(1)  138/    1544 : 8E                      glo rwork
(1)  139/    1545 : 3A 2B                   bnz $$MultLoop16_16
(1)  140/    1547 : 12                      inc sp
(1)  141/    1548 : D5                      sep 5
(1)  142/    1549 :                     
(1)  143/    1549 :                     
(1)  144/    1549 :                     _divU2:
(1)  145/    1549 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  146/    1549 :                     	; This is really an unsigned 23 bit divide
(1)  147/    1549 :                     	;thanks to Ted Rossin
(1)  148/    1549 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  149/    1549 : 22                      dec sp
(1)  150/    154A : F8 10                   ldi 16
(1)  151/    154C : AE                      plo rwork
(1)  152/    154D : F8 00                   ldi 0
(1)  153/    154F : BF                      phi retVal
(1)  154/    1550 : AF                      plo retVal
(1)  155/    1551 : BE                      phi rwork
(1)  156/    1552 :                     $$DivLoop16_16:
(1)  157/    1552 : 8C                      glo regArg1
(1)  158/    1553 : FE                      shl
(1)  159/    1554 : AC                      plo regArg1
(1)  160/    1555 : 9C                      ghi regArg1
(1)  161/    1556 : 7E                      shlc
(1)  162/    1557 : BC                      phi regArg1
(1)  163/    1558 : 8F                      glo retVal
(1)  164/    1559 : 7E                      shlc
(1)  165/    155A : AF                      plo retVal
(1)  166/    155B : 9F                      ghi retVal
(1)  167/    155C : 7E                      shlc
(1)  168/    155D : BF                      phi retVal
(1)  169/    155E : 9E                      ghi rwork
(1)  170/    155F : 7E                      shlc
(1)  171/    1560 : BE                      phi rwork
(1)  172/    1561 : 3B 73                   bnf $$DivSub16_16
(1)  173/    1563 : 8D                      glo regArg2
(1)  174/    1564 : 52                      str sp
(1)  175/    1565 : 8F                      glo retVal
(1)  176/    1566 : F4                      add 
(1)  177/    1567 : AF                      plo retVal
(1)  178/    1568 : 9D                      ghi regArg2
(1)  179/    1569 : 52                      str sp
(1)  180/    156A : 9F                      ghi retVal
(1)  181/    156B : 74                      adc 
(1)  182/    156C : BF                      phi retVal
(1)  183/    156D : 9E                      ghi rwork
(1)  184/    156E : 7C 00                   adci 0
(1)  185/    1570 : BE                      phi rwork
(1)  186/    1571 : 30 81                   br $$DivSkip16_16
(1)  187/    1573 :                     $$DivSub16_16:
(1)  188/    1573 : 8D                      glo regArg2
(1)  189/    1574 : 52                      str sp
(1)  190/    1575 : 8F                      glo retVal
(1)  191/    1576 : F7                      sm
(1)  192/    1577 : AF                      plo retVal
(1)  193/    1578 : 9D                      ghi regArg2
(1)  194/    1579 : 52                      str sp
(1)  195/    157A : 9F                      ghi retVal
(1)  196/    157B : 77                      smb 
(1)  197/    157C : BF                      phi retVal
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 23 - 4/3/2013 16:00:11


(1)  198/    157D : 9E                      ghi rwork
(1)  199/    157E : 7F 00                   smbi 0
(1)  200/    1580 : BE                      phi rwork 
(1)  201/    1581 :                     $$DivSkip16_16:
(1)  202/    1581 : FE                      shl
(1)  203/    1582 : 33 88                   bdf $$DivSkipClear16_16
(1)  204/    1584 :                     $$DivSetBit16_16:
(1)  205/    1584 : 8C                      glo regArg1
(1)  206/    1585 : F9 01                   ori  0x01
(1)  207/    1587 : AC                      plo regArg1
(1)  208/    1588 :                     $$DivSkipClear16_16:
(1)  209/    1588 : 2E                      dec rwork
(1)  210/    1589 : 8E                      glo rwork
(1)  211/    158A : 3A 52                   bnz $$DivLoop16_16
(1)  212/    158C : 9E                      ghi rwork
(1)  213/    158D : FE                      shl
(1)  214/    158E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  215/    1590 : 8D                      glo regArg2
(1)  216/    1591 : 52                      str sp
(1)  217/    1592 : 8F                      glo retVal
(1)  218/    1593 : F4                      add
(1)  219/    1594 : AF                      plo retVal
(1)  220/    1595 : 9D                      ghi regArg2
(1)  221/    1596 : 52                      str sp
(1)  222/    1597 : 9F                      ghi retVal
(1)  223/    1598 : 74                      adc
(1)  224/    1599 : BF                      phi retVal
(1)  225/    159A :                     $$DivSkipFinalAdd16_16:
(1)  226/    159A : 12                      inc sp
(1)  227/    159B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  228/    159B : 8F                      glo retVal
(1)  229/    159C : AD                      plo regArg2
(1)  230/    159D : 9F                      ghi retVal
(1)  231/    159E : BD                      phi regArg2
(1)  232/    159F : 8C                      glo regArg1
(1)  233/    15A0 : AF                      plo retVal
(1)  234/    15A1 : 9C                      ghi regArg1
(1)  235/    15A2 : BF                      phi retVal
(1)  236/    15A3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  237/    15A3 : D5                      sep 5
(1)  238/    15A4 :                     
(1)  239/    15A4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  240/    15A4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  241/    15A4 :                     _divI2:
(1)  242/    15A4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  243/    15A4 : 22                      dec	sp	;leave a work area available
(1)  244/    15A5 : 9C                      ghi regArg1
(1)  245/    15A6 : 52                      str sp	;save the sign of the 1st arg
(1)  246/    15A7 : FE                      shl
(1)  247/    15A8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  248/    15AA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  249/    15B3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  250/    15B3 : 9D                      ghi regArg2
(1)  251/    15B4 : F3                      xor	
(1)  252/    15B5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  253/    15B6 : 9D                      ghi regArg2
(1)  254/    15B7 : FE                      shl
(1)  255/    15B8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  256/    15BA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  257/    15C3 :                     $$pos2: ; both args now +v
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 24 - 4/3/2013 16:00:11


(1)  258/    15C3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  259/    15C6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  260/    15C6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  261/    15C7 : FE                      shl
(1)  262/    15C8 : 3B D3                   bnf $$done ;if the signs were different
(1)  263/    15CA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  264/    15D3 :                     $$done:
(1)  265/    15D3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  266/    15D3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  267/    15D4 :                     
(1)  268/    15D4 :                     
(1)  269/    15D4 :                     	align 256    ;32 bit operations follow
(1)  270/    1600 :                     _divu4:
(1)  271/    1600 :                     ;This is an unsigned 32 bit restoring division
(1)  272/    1600 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  273/    1600 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  274/    1600 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  275/    1600 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  276/    1600 :                     
(1)  277/    1600 : F8 20               	ldi 32		;set loop count
(1)  278/    1602 : AE                  	plo memaddr	;in temp register
(1)  279/    1603 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
(1)  280/    160F :                     $$loop:
(1)  281/    160F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  282/    161B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  283/    1627 :                     
(1)  284/    1627 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  285/    163D :                     
(1)  286/    163D : FA 80               	ani 0x80	;check the top bit
(1)  287/    163F : 32 5D               	bz $$norestore	;if it's 0
(1)  288/    1641 : 89                  		glo RL8
(1)  289/    1642 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  290/    1644 : A9                  		plo RL8
(1)  291/    1645 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  292/    165B : 30 61               	br $$endlp 	;else
(1)  293/    165D :                     $$norestore:
(1)  294/    165D : 89                  		glo RL8
(1)  295/    165E : F9 01               		ori 1	;turn on the bottom bit
(1)  296/    1660 : A9                  		plo RL8
(1)  297/    1661 :                     	;end if
(1)  298/    1661 :                     $$endlp:
(1)  299/    1661 : 2E                  	dec memaddr	;check the cycle count
(1)  300/    1662 : 8E                  	glo memaddr
(1)  301/    1663 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  302/    1665 :                     	
(1)  303/    1665 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  304/    1666 :                     		
(1)  305/    1666 :                     
(1)  306/    1666 :                     _mulu4:
(1)  307/    1666 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  308/    1666 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  309/    1666 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  310/    1666 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  311/    1666 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  312/    1666 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  313/    1666 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  314/    1666 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  315/    1666 :                     	;for 10 we subtract and shift
(1)  316/    1666 :                     	;for 00 and 11 we just shift
(1)  317/    1666 :                     
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 25 - 4/3/2013 16:00:11


(1)  318/    1666 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  319/    1672 : F8 20                   ldi 32
(1)  320/    1674 : AE                      plo memaddr		;cycle count
(1)  321/    1675 : FC 00                   adi 0		;clear df
(1)  322/    1677 :                     $$mloop:
(1)  323/    1677 : 89                      glo RL8
(1)  324/    1678 : FA 01                   ani 1		;isolate bottom bit of result
(1)  325/    167A : 3B 96                   bnf	$$check_sub	;
(1)  326/    167C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  327/    167E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  328/    167E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  329/    1694 : 30 AE                   br $$shift
(1)  330/    1696 :                     $$check_sub:
(1)  331/    1696 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  332/    1698 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  333/    1698 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  334/    16AE :                     $$shift:
(1)  335/    16AE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  336/    16BC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  337/    16C8 :                     
(1)  338/    16C8 : 2E                      dec memaddr		;cycle count
(1)  339/    16C9 : 8E                      glo memaddr
(1)  340/    16CA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  341/    16CC :                         
(1)  342/    16CC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  343/    16CD :                     
(1)  344/    16CD :                     	align 256
(1)  345/    1700 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  346/    1700 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  347/    1700 :                     _divI4:
(1)  348/    1700 : 22                      dec	sp	;leave a work area available
(1)  349/    1701 : 98                      ghi RL8-1	;get the top of the dividend
(1)  350/    1702 : 52                      str sp	;save the sign of the 1st arg
(1)  351/    1703 : FE                      shl
(1)  352/    1704 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  353/    1706 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  354/    1726 :                     $$pos1: ;1st is now +v, check 2nd
(1)  355/    1726 : 9A                      ghi RL10-1
(1)  356/    1727 : F3                      xor	
(1)  357/    1728 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  358/    1729 : 9A                      ghi RL10-1
(1)  359/    172A : FE                      shl
(1)  360/    172B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  361/    172D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  362/    174D :                     $$pos2: ; both args now +v
(1)  363/    174D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  364/    1750 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  365/    1750 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  366/    1751 : FE                      shl
(1)  367/    1752 : 3B 74                   bnf $$done ;if the signs were different
(1)  368/    1754 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  369/    1774 :                     $$done:
(1)  370/    1774 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  371/    1775 :                     
(1)  372/    1775 :                     _dubdabx:	
(1)  373/    1775 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  374/    1775 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  375/    1775 :                     ;long interger is passed in rp1p2
(1)  376/    1775 :                     ;buffer pointer is passed at sp+2+4
(1)  377/    1775 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 26 - 4/3/2013 16:00:11


(1)  378/    1775 :                     ;r8-11 are used as temps
(1)  379/    1775 :                     ;r8 is the working pointer
(1)  380/    1775 :                     ;r9.0 is bit count(32)
(1)  381/    1775 :                     ;r10.0 is digit count
(1)  382/    1775 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  383/    1781 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  384/    1785 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  385/    1787 : A9                  	plo r9
(1)  386/    1788 :                     $$clrlp:	;clear the passed buffer
(1)  387/    1788 : F8 00               	ldi 0	
(1)  388/    178A : 58                  	str r8	;clear a byte
(1)  389/    178B : 18                  	inc r8
(1)  390/    178C : 29                  	dec r9
(1)  391/    178D : 89                  	glo r9	;check the count
(1)  392/    178E : 3A 88               	bnz $$clrlp ;back for more
(1)  393/    1790 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  394/    1794 :                     
(1)  395/    1794 : F8 20               	ldi 32	;bit count
(1)  396/    1796 : AF                  	plo r15
(1)  397/    1797 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  398/    1797 :                     $$cktop:
(1)  399/    1797 : 9C                  	ghi rp1p2-1	;get the top bit of the number
(1)  400/    1798 : FE                  	shl		;check for a 1
(1)  401/    1799 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  402/    179B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  403/    17A7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  404/    17A8 : 8F                  	glo r15
(1)  405/    17A9 : 3A 97               	bnz $$cktop	;
(1)  406/    17AB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  407/    17AC :                     $$bitloop:
(1)  408/    17AC : F8 0A               	ldi 10	;digit count
(1)  409/    17AE : A9                  	plo r9
(1)  410/    17AF :                     $$dcklp:
(1)  411/    17AF : 08                  	ldn r8 	;pick up a digit
(1)  412/    17B0 : FF 05               	smi 5	;see if it's greater than 4
(1)  413/    17B2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  414/    17B4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  415/    17B6 : 58                  	str r8	;put it back
(1)  416/    17B7 :                     $$dnoadd:
(1)  417/    17B7 : 18                  	inc r8
(1)  418/    17B8 : 29                  	dec r9	;decrement digit count
(1)  419/    17B9 : 89                  	glo r9
(1)  420/    17BA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  421/    17BC :                     	
(1)  422/    17BC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  423/    17C8 :                     	
(1)  424/    17C8 : F8 0A               	ldi 10	;load the digit count again
(1)  425/    17CA : A9                  	plo r9
(1)  426/    17CB :                     ;r8 is now just past the units location and ready to walk back
(1)  427/    17CB :                     $$dshlp:
(1)  428/    17CB : 28                  	dec r8	;walk back from 0's position
(1)  429/    17CC : 08                  	ldn r8	;get the digit back
(1)  430/    17CD : 7E                  	shlc	;continue the shift
(1)  431/    17CE : BF                  	phi r15 ;save it for the carry test
(1)  432/    17CF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  433/    17D1 : 58                  	str r8	;put the digit back
(1)  434/    17D2 : 9F                  	ghi r15	;now test for carry
(1)  435/    17D3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  436/    17D5 : 29                  	dec r9	;decrement the digit count
(1)  437/    17D6 : 89                  	glo r9
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(lcc1802Epilofl.inc) - page 27 - 4/3/2013 16:00:11


(1)  438/    17D7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  439/    17D9 :                     	
(1)  440/    17D9 : 2F                  	dec r15
(1)  441/    17DA : 8F                  	glo r15
(1)  442/    17DB : 3A AC               	bnz $$bitloop
(1)  443/    17DD :                     	
(1)  444/    17DD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  445/    17E1 : F8 0A               	ldi 10		;digit count again
(1)  446/    17E3 : A9                  	plo r9
(1)  447/    17E4 :                     $$upnxt:
(1)  448/    17E4 : 08                  	ldn r8		;get digit
(1)  449/    17E5 : F9 30               	ori 0x30	;make ascii
(1)  450/    17E7 : 58                  	str r8		;put it back
(1)  451/    17E8 : 18                  	inc r8		;next digit
(1)  452/    17E9 : 29                  	dec r9		;counter
(1)  453/    17EA : 89                  	glo r9
(1)  454/    17EB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  455/    17ED :                     	
(1)  456/    17ED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  457/    17EF : A9                  	plo r9
(1)  458/    17F0 :                     $$cknext:
(1)  459/    17F0 : 0F                  	ldn r15		;check digit
(1)  460/    17F1 : FF 30               	smi 0x30	;for '0'
(1)  461/    17F3 : 3A FA               	bnz $$done
(1)  462/    17F5 : 1F                  	inc r15		;next digit
(1)  463/    17F6 : 29                  	dec r9		;reduce count
(1)  464/    17F7 : 89                  	glo r9
(1)  465/    17F8 : 3A F0               	bnz $$cknext
(1)  466/    17FA :                     $$done:
(1)  467/    17FA : (MACRO)             	cretn
(1)  468/    17FB :                     	
(1)  469/    17FB :                     	
(1)  470/    17FB :                     _modU4:	;32 bit unsigned remainder
(1)  471/    17FB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  472/    17FB : (MACRO)                 Ccall _divU4
(1)  473/    17FE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  474/    1806 : (MACRO)                 Cretn
(1)  475/    1807 :                         
(1)  476/    1807 :                     _modI4:	;32 bit signed remainder
(1)  477/    1807 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  478/    1807 : (MACRO)                 Ccall _divI4
(1)  479/    180A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  480/    1812 : (MACRO)                 Cretn
(1)  481/    1813 :                         
(1)  482/    1813 :                     	
(1)  483/    1813 :                      
    1123/    1813 :                     	include LCC1802fp.inc
(1)    1/    1813 :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    1813 :                     ;maybe originally from RCA
(1)    3/    1813 :                     ;these routines use ALL the registers from 6-15!
(1)    4/    1813 :                     ;8-15 were more or less available to start with
(1)    5/    1813 :                     ;it saves 6 when it uses it
(1)    6/    1813 :                     ;I save 7 on entry and restore on exit
(1)    7/    1813 :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    1813 : =BH                 FB	equ	11	;was R9
(1)    9/    1813 : =9H                 F9	equ	9	;was R7
(1)   10/    1813 : =7H                 F7	equ	7	;was RB
(1)   11/    1813 :                     ;April 1 added code to fp_add to restore resgisters when returning a 0 - around add_nz:
(1)   12/    1813 :                     ; *** Convert signed long to float
(1)   13/    1813 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 28 - 4/3/2013 16:00:11


(1)   14/    1813 :                     ; *** result in same register
(1)   15/    1813 :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    1813 :                     	align 256
(1)   17/    1900 : F8 00               cvif4:	ldi	0
(1)   18/    1902 : BE                  	phi	memaddr	;sign
(1)   19/    1903 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    1905 : AE                  	plo	memaddr	;
(1)   21/    1906 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    1907 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    1909 : FE                  	shl		;sign bit to df
(1)   24/    190A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    190C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    190D : BE                  	phi	memaddr	;save it
(1)   27/    190E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    192E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    1930 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    1931 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    1933 : 99                  	ghi	RL8	;next byte
(1)   32/    1934 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    1936 : 89                  	glo	RL8	;last byte
(1)   34/    1937 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    1939 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
(1)   36/    193A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    193C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    193D : (MACRO)             	shru4	RL8
(1)   39/    1949 : 30 39               	br	$$sgnpos
(1)   40/    194B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    194C : FA 80               	ani	0x80	;isolate it
(1)   42/    194E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    1950 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    1951 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    195D : 30 4B               	br	$$shl
(1)   46/    195F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    1960 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    1961 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    1962 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    1964 : 88                  	glo	RL8-1	;get the byte
(1)   51/    1965 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    1967 : A8                  	plo	RL8-1	;put it back
(1)   53/    1968 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    1969 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    196B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    196C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    196E : B8                  	phi	RL8-1	;place it
(1)   58/    196F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    1970 :                     	
(1)   60/    1970 :                     
(1)   61/    1970 :                     
(1)   62/    1970 :                     ; *** Convert float to signed long
(1)   63/    1970 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    1970 :                     ; *** result in same register
(1)   65/    1970 :                     	align 256
(1)   66/    1A00 :                     cvfi4:
(1)   67/    1A00 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    1A01 : BE                  	phi	memaddr ;save for later
(1)   69/    1A02 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    1A03 : FE                  	shl		;shift to df
(1)   71/    1A04 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    1A05 : 7E                  	shlc		;combine with 0
(1)   73/    1A06 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 29 - 4/3/2013 16:00:11


(1)   74/    1A06 : 22                  	dec	sp
(1)   75/    1A07 : 52                  	str	sp
(1)   76/    1A08 : F8 96               	ldi	150
(1)   77/    1A0A : F7                  	sm		;calculate shift count needed
(1)   78/    1A0B :                     ;*******note - the df flag set here is tested later
(1)   79/    1A0B : AE                  	plo	memaddr
(1)   80/    1A0C : 12                  	inc	sp	;release work area
(1)   81/    1A0D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    1A0D : F8 00               	ldi	0
(1)   83/    1A0F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    1A10 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    1A11 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    1A13 : A8                  	plo	RL8-1	;put it back
(1)   87/    1A14 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    1A15 : 32 3B               	bz	$$sign
(1)   89/    1A17 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    1A17 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    1A19 :                     
(1)   92/    1A19 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    1A25 : 2E                  	dec	memaddr	;check shift count
(1)   94/    1A26 : 8E                  	glo	memaddr
(1)   95/    1A27 : 3A 19               	bnz	$$shr	;complete the shift
(1)   96/    1A29 : 30 3B               	br	$$sign
(1)   97/    1A2B :                     
(1)   98/    1A2B :                     ;handle negative shift as best I can - gigo
(1)   99/    1A2B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    1A37 : 1E                  	inc	memaddr
(1)  101/    1A38 : 8E                  	glo	memaddr
(1)  102/    1A39 : 3A 2B               	bnz	$$lsh	
(1)  103/    1A3B :                     	
(1)  104/    1A3B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    1A3C : FE                  	shl		;shift sign bit into df
(1)  106/    1A3D : 3B 61               	bnf	$$done
(1)  107/    1A3F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    1A5F : 30 61               	br	$$done	; and return
(1)  109/    1A61 :                     
(1)  110/    1A61 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    1A62 :                     
(1)  112/    1A62 :                     ; *** Check if character is numeric
(1)  113/    1A62 :                     ; *** D - char to check
(1)  114/    1A62 :                     ; *** Returns DF=1 if numeric
(1)  115/    1A62 :                     ; ***         DF=0 if not
(1)  116/    1A62 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    1A63 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    1A65 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    1A67 : FF 0A                          smi     10                  ; see if above
(1)  120/    1A69 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    1A6B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    1A6D : C8                             lskp
(1)  123/    1A6E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    1A70 : 8E                             glo     r14                 ; recover character
(1)  125/    1A71 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    1A72 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    1A72 :                     ; *******************************
(1)  128/    1A72 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    1A73 : F6                             shr
(1)  130/    1A74 : B8                             phi   r8
(1)  131/    1A75 : 88                             glo   r8
(1)  132/    1A76 : 76                             shrc
(1)  133/    1A77 : A8                             plo   r8
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 30 - 4/3/2013 16:00:11


(1)  134/    1A78 : 99                             ghi   F9                    ; shift low word right
(1)  135/    1A79 : 76                             shrc
(1)  136/    1A7A : B9                             phi   F9
(1)  137/    1A7B : 89                             glo   F9
(1)  138/    1A7C : 76                             shrc
(1)  139/    1A7D : A9                             plo   F9
(1)  140/    1A7E : (MACRO)                        Cretn
(1)  141/    1A7F :                     
(1)  142/    1A7F :                     ; ******************************
(1)  143/    1A7F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    1A7F :                     ; ******************************
(1)  145/    1A7F : 89                  fp_shl_1:  glo   F9
(1)  146/    1A80 : FE                             shl
(1)  147/    1A81 : A9                             plo   F9
(1)  148/    1A82 : 99                             ghi   F9
(1)  149/    1A83 : 7E                             shlc
(1)  150/    1A84 : B9                             phi   F9
(1)  151/    1A85 : 88                             glo   r8
(1)  152/    1A86 : 7E                             shlc
(1)  153/    1A87 : A8                             plo   r8
(1)  154/    1A88 : 98                             ghi   r8
(1)  155/    1A89 : 7E                             shlc
(1)  156/    1A8A : B8                             phi   r8
(1)  157/    1A8B : D5                             sep   RRET
(1)  158/    1A8C :                     
(1)  159/    1A8C :                     ; **********************
(1)  160/    1A8C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    1A8C :                     ; **********************
(1)  162/    1A8C : 8B                  fp_add_12: glo   FB
(1)  163/    1A8D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    1A8E : 52                             str   r2
(1)  165/    1A8F : 89                             glo   F9
(1)  166/    1A90 : F4                             add
(1)  167/    1A91 : A9                             plo   F9
(1)  168/    1A92 : 9B                             ghi   FB
(1)  169/    1A93 : 52                             str   r2
(1)  170/    1A94 : 99                             ghi   F9
(1)  171/    1A95 : 74                             adc
(1)  172/    1A96 : B9                             phi   F9
(1)  173/    1A97 : 8A                             glo   R10
(1)  174/    1A98 : 52                             str   r2
(1)  175/    1A99 : 88                             glo   r8
(1)  176/    1A9A : 74                             adc
(1)  177/    1A9B : A8                             plo   r8
(1)  178/    1A9C : 9A                             ghi   R10
(1)  179/    1A9D : 52                             str   r2
(1)  180/    1A9E : 98                             ghi   r8
(1)  181/    1A9F : 74                             adc
(1)  182/    1AA0 : B8                             phi   r8
(1)  183/    1AA1 : 12                             inc	r2	;wjr - release work area
(1)  184/    1AA2 : (MACRO)                        Cretn
(1)  185/    1AA3 :                     
(1)  186/    1AA3 :                     ; *******************************
(1)  187/    1AA3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    1AA3 :                     ; *******************************
(1)  189/    1AA3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    1AA4 : F6                             shr
(1)  191/    1AA5 : BF                             phi   R15
(1)  192/    1AA6 : 8F                             glo   R15
(1)  193/    1AA7 : 76                             shrc
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 31 - 4/3/2013 16:00:11


(1)  194/    1AA8 : AF                             plo   R15
(1)  195/    1AA9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    1AAA : 76                             shrc
(1)  197/    1AAB : BD                             phi   R13
(1)  198/    1AAC : 8D                             glo   R13
(1)  199/    1AAD : 76                             shrc
(1)  200/    1AAE : AD                             plo   R13
(1)  201/    1AAF : (MACRO)                        Cretn
(1)  202/    1AB0 :                     
(1)  203/    1AB0 :                     ; *************************************
(1)  204/    1AB0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    1AB0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    1AB0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    1AB0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    1AB0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    1AB0 :                     ; *************************************
(1)  210/    1AB0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    1AB1 : FA 80                          ani   080h                  ; check it
(1)  212/    1AB3 : CA 1A C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    1AB6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    1AB9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    1ABA : FF 01                          smi   1                     ; minus 1
(1)  216/    1ABC : BF                             phi   R15                    ; and put it back
(1)  217/    1ABD : C0 1A B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    1AC0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    1AC1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    1AC2 : A8                             plo   r8                    ; set aside
(1)  221/    1AC3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    1AC4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    1AC5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    1AC6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    1AC7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    1AC8 : A8                             plo   r8                    ; and put it back
(1)  227/    1AC9 : 87                             glo   F7                   ; get signs
(1)  228/    1ACA : F6                             shr                         ; get sign 1
(1)  229/    1ACB : 98                             ghi   r8                    ; recover exponent
(1)  230/    1ACC : 76                             shrc                        ; shift in sign
(1)  231/    1ACD : B8                             phi   r8                    ; put it back
(1)  232/    1ACE : 12                             inc	r2	;wjr release work area
(1)  233/    1ACF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    1AD3 : (MACRO)             	   popr R12	;wjr
(1)  235/    1AD7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    1ADB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    1ADC :                     
(1)  238/    1ADC :                     ; ************************************
(1)  239/    1ADC :                     ; *** Get exponenst from arguments ***
(1)  240/    1ADC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    1ADC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    1ADC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    1ADC :                     ; ***          RF.0 - exp2         ***
(1)  244/    1ADC :                     ; ************************************
(1)  245/    1ADC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    1ADD : FE                             shl                         ; shift it into DF
(1)  247/    1ADE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    1ADF : 7E                             shlc                        ; shift in first bit
(1)  249/    1AE0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    1AE1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    1AE1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    1AE2 : FE                             shl                         ; shift it into DF
(1)  253/    1AE3 : 9A                             ghi   R10                    ; get top 7 bits
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 32 - 4/3/2013 16:00:11


(1)  254/    1AE4 : 7E                             shlc                        ; shift in first bit
(1)  255/    1AE5 : AF                             plo   R15                    ; put into RF
(1)  256/    1AE6 : D5                             sep   RRET                  ; return to caller
(1)  257/    1AE7 :                     
(1)  258/    1AE7 :                     ; ************************************
(1)  259/    1AE7 :                     ; *** Get signs from arguments     ***
(1)  260/    1AE7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    1AE7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    1AE7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    1AE7 :                     ; ************************************
(1)  264/    1AE7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    1AE8 : FE                             shl                         ; shift into DF
(1)  266/    1AE9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    1AEA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    1AEB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    1AEC : A7                             plo   F7                    ; save them
(1)  270/    1AED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    1AEE :                     
(1)  272/    1AEE :                     ; ***************************************
(1)  273/    1AEE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    1AEE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    1AEE :                     ; *** RA:FB - Arg 2                   ***
(1)  276/    1AEE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    1AEE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    1AEE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    1AEE :                     ; ***        F7.0 - signs        ***
(1)  280/    1AEE :                     ; ***************************************
(1)  281/    1AEE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    1AEF : CA 1B 07                       lbnz  add_a1nz
(1)  283/    1AF2 : 88                             glo   r8
(1)  284/    1AF3 : CA 1B 07                       lbnz  add_a1nz
(1)  285/    1AF6 : 99                             ghi   F9
(1)  286/    1AF7 : CA 1B 07                       lbnz  add_a1nz
(1)  287/    1AFA : 89                             glo   F9
(1)  288/    1AFB : CA 1B 07                       lbnz  add_a1nz
(1)  289/    1AFE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    1AFF : B8                             phi   r8
(1)  291/    1B00 : 8A                             glo   R10
(1)  292/    1B01 : A8                             plo   r8
(1)  293/    1B02 : 9B                             ghi   FB
(1)  294/    1B03 : B9                             phi   F9
(1)  295/    1B04 : 8B                             glo   FB
(1)  296/    1B05 : A9                             plo   F9
(1)  297/    1B06 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    1B07 :                     
(1)  299/    1B07 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    1B08 : CA 1B 18                       lbnz  add_a2nz
(1)  301/    1B0B : 8A                             glo   R10
(1)  302/    1B0C : CA 1B 18                       lbnz  add_a2nz
(1)  303/    1B0F : 9B                             ghi   FB
(1)  304/    1B10 : CA 1B 18                       lbnz  add_a2nz
(1)  305/    1B13 : 8B                             glo   FB
(1)  306/    1B14 : CA 1B 18                       lbnz  add_a2nz
(1)  307/    1B17 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    1B18 :                                
(1)  309/    1B18 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    1B1D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    1B22 : (MACRO)             	   pushr R13	;wjr
(1)  312/    1B27 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    1B28 : (MACRO)             	   Ccall fp_getexp             ; get exponents
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 33 - 4/3/2013 16:00:11


(1)  314/    1B2B : 9F                             ghi   R15
(1)  315/    1B2C : 52                             str   r2
(1)  316/    1B2D : 8F                             glo   R15
(1)  317/    1B2E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    1B2F : CB 1B 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    1B32 :                     
(1)  320/    1B32 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    1B33 : AE                             plo   R14
(1)  322/    1B34 : 9A                             ghi   R10
(1)  323/    1B35 : B8                             phi   r8
(1)  324/    1B36 : 8E                             glo   R14
(1)  325/    1B37 : BA                             phi   R10
(1)  326/    1B38 : 88                             glo   r8
(1)  327/    1B39 : AE                             plo   R14
(1)  328/    1B3A : 8A                             glo   R10
(1)  329/    1B3B : A8                             plo   r8
(1)  330/    1B3C : 8E                             glo   R14
(1)  331/    1B3D : AA                             plo   R10
(1)  332/    1B3E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    1B3F : AE                             plo   R14
(1)  334/    1B40 : 9B                             ghi   FB
(1)  335/    1B41 : B9                             phi   F9
(1)  336/    1B42 : 8E                             glo   R14
(1)  337/    1B43 : BB                             phi   FB
(1)  338/    1B44 : 89                             glo   F9
(1)  339/    1B45 : AE                             plo   R14
(1)  340/    1B46 : 8B                             glo   FB
(1)  341/    1B47 : A9                             plo   F9
(1)  342/    1B48 : 8E                             glo   R14
(1)  343/    1B49 : AB                             plo   FB
(1)  344/    1B4A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    1B4B : AE                             plo   R14
(1)  346/    1B4C : 8F                             glo   R15
(1)  347/    1B4D : BF                             phi   R15
(1)  348/    1B4E : 8E                             glo   R14
(1)  349/    1B4F : AF                             plo   R15
(1)  350/    1B50 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    1B53 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    1B55 : B8                             phi   r8
(1)  353/    1B56 : BA                             phi   R10
(1)  354/    1B57 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    1B59 : 52                             str   r2
(1)  356/    1B5A : 88                             glo   r8
(1)  357/    1B5B : F1                             or
(1)  358/    1B5C : A8                             plo   r8
(1)  359/    1B5D : 8A                             glo   R10
(1)  360/    1B5E : F1                             or
(1)  361/    1B5F : AA                             plo   R10
(1)  362/    1B60 : 9F                             ghi   R15                    ; get exp1
(1)  363/    1B61 : 52                             str   r2                    ; place into memory
(1)  364/    1B62 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    1B63 : F7                             sm                          ; see if match to exp1
(1)  366/    1B64 : C2 1B 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    1B67 : 8F                             glo   R15                    ; need to increase it
(1)  368/    1B68 : FC 01                          adi   1
(1)  369/    1B6A : AF                             plo   R15
(1)  370/    1B6B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    1B6C : F6                             shr
(1)  372/    1B6D : AA                             plo   R10
(1)  373/    1B6E : 9B                             ghi   FB
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 34 - 4/3/2013 16:00:11


(1)  374/    1B6F : 76                             shrc
(1)  375/    1B70 : BB                             phi   FB
(1)  376/    1B71 : 8B                             glo   FB
(1)  377/    1B72 : 76                             shrc
(1)  378/    1B73 : AB                             plo   FB
(1)  379/    1B74 : C0 1B 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    1B77 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    1B78 : 52                             str   r2
(1)  382/    1B79 : F6                             shr
(1)  383/    1B7A : F3                             xor
(1)  384/    1B7B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    1B7D : CA 1B 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    1B80 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    1B83 : C0 1B BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    1B86 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    1B87 : 52                             str   r2
(1)  390/    1B88 : 89                             glo   F9
(1)  391/    1B89 : F7                             sm
(1)  392/    1B8A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    1B8B : 9B                             ghi   FB
(1)  394/    1B8C : 52                             str   r2
(1)  395/    1B8D : 99                             ghi   F9
(1)  396/    1B8E : 77                             smb
(1)  397/    1B8F : BC                             phi   R12
(1)  398/    1B90 : 8A                             glo   R10
(1)  399/    1B91 : 52                             str   r2
(1)  400/    1B92 : 88                             glo   r8
(1)  401/    1B93 : 77                             smb
(1)  402/    1B94 : AD                             plo   R13
(1)  403/    1B95 : 9A                             ghi   R10
(1)  404/    1B96 : 52                             str   r2
(1)  405/    1B97 : 98                             ghi   r8
(1)  406/    1B98 : 77                             smb
(1)  407/    1B99 : BD                             phi   R13
(1)  408/    1B9A : CB 1B A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    1B9D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    1B9E : B8                             phi   r8
(1)  411/    1B9F : 8D                             glo   R13
(1)  412/    1BA0 : A8                             plo   r8
(1)  413/    1BA1 : 9C                             ghi   R12
(1)  414/    1BA2 : B9                             phi   F9
(1)  415/    1BA3 : 8C                             glo   R12
(1)  416/    1BA4 : A9                             plo   F9
(1)  417/    1BA5 : C0 1B BF                       lbr   add_fnl               ; finalize
(1)  418/    1BA8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    1BA9 : 52                             str   r2
(1)  420/    1BAA : 8B                             glo   FB
(1)  421/    1BAB : F7                             sm
(1)  422/    1BAC : A9                             plo   F9
(1)  423/    1BAD : 99                             ghi   F9
(1)  424/    1BAE : 52                             str   r2
(1)  425/    1BAF : 9B                             ghi   FB
(1)  426/    1BB0 : 77                             smb
(1)  427/    1BB1 : B9                             phi   F9
(1)  428/    1BB2 : 88                             glo   r8
(1)  429/    1BB3 : 52                             str   r2
(1)  430/    1BB4 : 8A                             glo   R10
(1)  431/    1BB5 : 77                             smb
(1)  432/    1BB6 : A8                             plo   r8
(1)  433/    1BB7 : 98                             ghi   r8
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 35 - 4/3/2013 16:00:11


(1)  434/    1BB8 : 52                             str   r2
(1)  435/    1BB9 : 9A                             ghi   R10
(1)  436/    1BBA : 77                             smb
(1)  437/    1BBB : B8                             phi   r8
(1)  438/    1BBC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    1BBD : FE                             shl
(1)  440/    1BBE : A7                             plo   F7
(1)  441/    1BBF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    1BC0 : CA 1B DD                       lbnz  add_nz                ; jump if not
(1)  443/    1BC3 : 88                             glo   r8
(1)  444/    1BC4 : CA 1B DD                       lbnz  add_nz
(1)  445/    1BC7 : 99                             ghi   F9
(1)  446/    1BC8 : CA 1B DD                       lbnz  add_nz
(1)  447/    1BCB : 89                             glo   F9
(1)  448/    1BCC : CA 1B DD                       lbnz  add_nz
(1)  449/    1BCF : 12                             inc	r2	;wjr release work area
(1)  450/    1BD0 : (MACRO)             	   popr R13	;wjr restore param regs
(1)  451/    1BD4 : (MACRO)             	   popr R12	;wjr
(1)  452/    1BD8 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  453/    1BDC : (MACRO)                        Cretn                       ; return the zero
(1)  454/    1BDD : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  455/    1BDE : C2 1B EB                       lbz   add_nx                ; jump if not
(1)  456/    1BE1 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  457/    1BE4 : 9F                             ghi   R15                    ; get exp1
(1)  458/    1BE5 : FC 01                          adi   1                     ; increment it
(1)  459/    1BE7 : BF                             phi   R15                    ; and put it back
(1)  460/    1BE8 : C0 1B DD                       lbr   add_nz                ; keep going until not > 24 bits
(1)  461/    1BEB :                     
(1)  462/    1BEB : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  463/    1BEC : F6                             shr
(1)  464/    1BED : A7                             plo   F7
(1)  465/    1BEE : C0 1A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  466/    1BF1 :                     
(1)  467/    1BF1 :                     ; ***************************************
(1)  468/    1BF1 :                     ; *** sub 2 SP floating point numbers ***
(1)  469/    1BF1 :                     ; *** R8:F9 - Arg 1                   ***
(1)  470/    1BF1 :                     ; *** RA:FB - Arg 2                   ***
(1)  471/    1BF1 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  472/    1BF1 :                     ; ***************************************
(1)  473/    1BF1 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  474/    1BF2 : FB 80                          xri   080h
(1)  475/    1BF4 : BA                             phi   R10                    ; and put it back
(1)  476/    1BF5 : C0 1A EE                       lbr   fp_add                ; now just add
(1)  477/    1BF8 :                     
(1)  478/    1BF8 :                     ; ***************************************
(1)  479/    1BF8 :                     ; *** Div 2 SP floating point numbers ***
(1)  480/    1BF8 :                     ; *** R8:F9 - Arg 1                   ***
(1)  481/    1BF8 :                     ; *** RA:FB - Arg 2                   ***
(1)  482/    1BF8 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  483/    1BF8 :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  484/    1BF8 :                     ; ***        RF.1 - exponent of arg2  ***
(1)  485/    1BF8 :                     ; ***        F7.0 - signs        ***
(1)  486/    1BF8 :                     ; ***************************************
(1)  487/    1BF8 : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  488/    1BF9 : CA 1C 09                       lbnz  div_a1nz
(1)  489/    1BFC : 88                             glo   r8
(1)  490/    1BFD : CA 1C 09                       lbnz  div_a1nz
(1)  491/    1C00 : 99                             ghi   F9
(1)  492/    1C01 : CA 1C 09                       lbnz  div_a1nz
(1)  493/    1C04 : 89                             glo   F9
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 36 - 4/3/2013 16:00:11


(1)  494/    1C05 : CA 1C 09                       lbnz  div_a1nz
(1)  495/    1C08 : (MACRO)                        Cretn	                ; just return the zero
(1)  496/    1C09 : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  497/    1C0A : CA 1C 27                       lbnz  div_a2nz
(1)  498/    1C0D : 8A                             glo   R10
(1)  499/    1C0E : CA 1C 27                       lbnz  div_a2nz
(1)  500/    1C11 : 9B                             ghi   FB
(1)  501/    1C12 : CA 1C 27                       lbnz  div_a2nz
(1)  502/    1C15 : 8B                             glo   FB
(1)  503/    1C16 : CA 1C 27                       lbnz  div_a2nz
(1)  504/    1C19 : 98                             ghi   r8                    ; need sign of arg1
(1)  505/    1C1A : FA 80                          ani   080h                  ; want only sign
(1)  506/    1C1C : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  507/    1C1E : B8                             phi   r8                    ; put into answer
(1)  508/    1C1F : F8 80                          ldi   080h                  ; build rest of answer
(1)  509/    1C21 : A8                             plo   r8 
(1)  510/    1C22 : F8 00                          ldi   0
(1)  511/    1C24 : B9                             phi   F9
(1)  512/    1C25 : A9                             plo   F9
(1)  513/    1C26 : (MACRO)                        Cretn                  	; and return to caller
(1)  514/    1C27 :                     
(1)  515/    1C27 : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  516/    1C2C : (MACRO)             	   pushr R12	;wjr save param regs
(1)  517/    1C31 : (MACRO)             	   pushr R13	;wjr
(1)  518/    1C36 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  519/    1C37 :                     
(1)  520/    1C37 : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  521/    1C3A : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  522/    1C3D : 8F                             glo   R15                    ; get exp2
(1)  523/    1C3E : FF 7F                          smi   127                   ; remove bias
(1)  524/    1C40 : 52                             str   r2                    ; place into memory
(1)  525/    1C41 : 9F                             ghi   R15                    ; get exp1
(1)  526/    1C42 : FF 7F                          smi   127                   ; remove bias
(1)  527/    1C44 : F7                             sm                          ; perform exp1 - exp2
(1)  528/    1C45 : FC 7F                          adi   127                   ; put bias back in
(1)  529/    1C47 : 73                             stxd                        ; save onto stack
(1)  530/    1C48 : 87                             glo   F7                    ; determine sign for answer
(1)  531/    1C49 : 52                             str   r2
(1)  532/    1C4A : F6                             shr
(1)  533/    1C4B : F3                             xor
(1)  534/    1C4C : 73                             stxd                        ; place onto stack
(1)  535/    1C4D : F8 00                          ldi   0                     ; setup man
(1)  536/    1C4F : BA                             phi   R10
(1)  537/    1C50 : 8A                             glo   R10
(1)  538/    1C51 : F9 80                          ori   080h
(1)  539/    1C53 : AA                             plo   R10
(1)  540/    1C54 : F8 00                          ldi   0                     ; setup div
(1)  541/    1C56 : B8                             phi   r8
(1)  542/    1C57 : 88                             glo   r8
(1)  543/    1C58 : F9 80                          ori   080h
(1)  544/    1C5A : A8                             plo   r8
(1)  545/    1C5B : F8 00                          ldi   0                     ; setup result
(1)  546/    1C5D : BC                             phi   R12
(1)  547/    1C5E : AC                             plo   R12
(1)  548/    1C5F : B7                             phi   F7
(1)  549/    1C60 : A7                             plo   F7
(1)  550/    1C61 : AF                             plo   R15                    ; setup quotient
(1)  551/    1C62 : BF                             phi   R15
(1)  552/    1C63 : BD                             phi   R13
(1)  553/    1C64 : AD                             plo   R13
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 37 - 4/3/2013 16:00:11


(1)  554/    1C65 : F8 80                          ldi   080h
(1)  555/    1C67 : AF                             plo   R15
(1)  556/    1C68 : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  557/    1C69 : CA 1C 7B                       lbnz  div_go1
(1)  558/    1C6C : 88                             glo   r8
(1)  559/    1C6D : CA 1C 7B                       lbnz  div_go1
(1)  560/    1C70 : 99                             ghi   F9
(1)  561/    1C71 : CA 1C 7B                       lbnz  div_go1
(1)  562/    1C74 : 89                             glo   F9
(1)  563/    1C75 : CA 1C 7B                       lbnz  div_go1
(1)  564/    1C78 : C0 1C DB                       lbr   div_z
(1)  565/    1C7B : 9A                  div_go1:   ghi   R10
(1)  566/    1C7C : CA 1C 8E                       lbnz  div_go
(1)  567/    1C7F : 8A                             glo   R10
(1)  568/    1C80 : CA 1C 8E                       lbnz  div_go
(1)  569/    1C83 : 9B                             ghi   FB
(1)  570/    1C84 : CA 1C 8E                       lbnz  div_go
(1)  571/    1C87 : 8B                             glo   FB
(1)  572/    1C88 : CA 1C 8E                       lbnz  div_go
(1)  573/    1C8B : C0 1C DB                       lbr   div_z                 ; nothing more to do
(1)  574/    1C8E : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  575/    1C8F : 52                             str   r2
(1)  576/    1C90 : 89                             glo   F9
(1)  577/    1C91 : F7                             sm
(1)  578/    1C92 : 9B                             ghi   FB
(1)  579/    1C93 : 52                             str   r2
(1)  580/    1C94 : 99                             ghi   F9
(1)  581/    1C95 : 77                             smb
(1)  582/    1C96 : 8A                             glo   R10
(1)  583/    1C97 : 52                             str   r2
(1)  584/    1C98 : 88                             glo   r8
(1)  585/    1C99 : 77                             smb
(1)  586/    1C9A : 9A                             ghi   R10
(1)  587/    1C9B : 52                             str   r2
(1)  588/    1C9C : 98                             ghi   r8
(1)  589/    1C9D : 77                             smb
(1)  590/    1C9E : CB 1C C9                       lbnf  div_nope              ; jump if div was smaller
(1)  591/    1CA1 : 8B                             glo   FB                    ; div -= man
(1)  592/    1CA2 : 52                             str   r2
(1)  593/    1CA3 : 89                             glo   F9
(1)  594/    1CA4 : F7                             sm
(1)  595/    1CA5 : A9                             plo   F9
(1)  596/    1CA6 : 9B                             ghi   FB
(1)  597/    1CA7 : 52                             str   r2
(1)  598/    1CA8 : 99                             ghi   F9
(1)  599/    1CA9 : 77                             smb
(1)  600/    1CAA : B9                             phi   F9
(1)  601/    1CAB : 8A                             glo   R10
(1)  602/    1CAC : 52                             str   r2
(1)  603/    1CAD : 88                             glo   r8
(1)  604/    1CAE : 77                             smb
(1)  605/    1CAF : A8                             plo   r8
(1)  606/    1CB0 : 9A                             ghi   R10
(1)  607/    1CB1 : 52                             str   r2
(1)  608/    1CB2 : 98                             ghi   r8
(1)  609/    1CB3 : 77                             smb
(1)  610/    1CB4 : B8                             phi   r8
(1)  611/    1CB5 : 9F                             ghi   R15                    ; merge quotient into result
(1)  612/    1CB6 : 52                             str   r2
(1)  613/    1CB7 : 9C                             ghi   R12
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 38 - 4/3/2013 16:00:11


(1)  614/    1CB8 : F1                             or
(1)  615/    1CB9 : BC                             phi   R12
(1)  616/    1CBA : 8F                             glo   R15
(1)  617/    1CBB : 52                             str   r2
(1)  618/    1CBC : 8C                             glo   R12
(1)  619/    1CBD : F1                             or
(1)  620/    1CBE : AC                             plo   R12
(1)  621/    1CBF : 9D                             ghi   R13
(1)  622/    1CC0 : 52                             str   r2
(1)  623/    1CC1 : 97                             ghi   F7
(1)  624/    1CC2 : F1                             or
(1)  625/    1CC3 : B7                             phi   F7
(1)  626/    1CC4 : 8D                             glo   R13
(1)  627/    1CC5 : 52                             str   r2
(1)  628/    1CC6 : 87                             glo   F7
(1)  629/    1CC7 : F1                             or
(1)  630/    1CC8 : A7                             plo   F7
(1)  631/    1CC9 : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  632/    1CCA : 1A A3                          dw    fp_shr_fd
(1)  633/    1CCC : 9A                             ghi   R10                    ; shift divisor right
(1)  634/    1CCD : F6                             shr
(1)  635/    1CCE : BA                             phi   R10
(1)  636/    1CCF : 8A                             glo   R10
(1)  637/    1CD0 : 76                             shrc
(1)  638/    1CD1 : AA                             plo   R10
(1)  639/    1CD2 : 9B                             ghi   FB
(1)  640/    1CD3 : 76                             shrc
(1)  641/    1CD4 : BB                             phi   FB
(1)  642/    1CD5 : 8B                             glo   FB
(1)  643/    1CD6 : 76                             shrc
(1)  644/    1CD7 : AB                             plo   FB
(1)  645/    1CD8 : C0 1C 68                       lbr   div_lp                ; loop back until done
(1)  646/    1CDB : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  647/    1CDC : B8                             phi   r8
(1)  648/    1CDD : 8C                             glo   R12
(1)  649/    1CDE : A8                             plo   r8
(1)  650/    1CDF : 97                             ghi   F7
(1)  651/    1CE0 : B9                             phi   F9
(1)  652/    1CE1 : 87                             glo   F7
(1)  653/    1CE2 : A9                             plo   F9
(1)  654/    1CE3 : 60                             irx                         ; recover sign
(1)  655/    1CE4 : 72                             ldxa
(1)  656/    1CE5 : A7                             plo   F7
(1)  657/    1CE6 : F0                             ldx                         ; recover answer exponent
(1)  658/    1CE7 : BF                             phi   R15
(1)  659/    1CE8 : C0 1A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  660/    1CEB :                     
(1)  661/    1CEB :                     ; ***************************************
(1)  662/    1CEB :                     ; *** Mul 2 SP floating point numbers ***
(1)  663/    1CEB :                     ; *** R8:F9 - Arg 1                   ***
(1)  664/    1CEB :                     ; *** RA:FB - Arg 2                   ***
(1)  665/    1CEB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  666/    1CEB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  667/    1CEB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  668/    1CEB :                     ; ***        F7.0 - signs             ***
(1)  669/    1CEB :                     ; ***************************************
(1)  670/    1CEB : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  671/    1CF0 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  672/    1CF5 : (MACRO)             	   pushr R13	;wjr
(1)  673/    1CFA : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 39 - 4/3/2013 16:00:11


(1)  674/    1CFB :                     
(1)  675/    1CFB : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  676/    1CFE : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  677/    1D01 : 8F                             glo   R15                    ; get exp2
(1)  678/    1D02 : FF 7F                          smi   127                   ; remove bias
(1)  679/    1D04 : 52                             str   r2                    ; place into memory
(1)  680/    1D05 : 9F                             ghi   R15                    ; get exp1
(1)  681/    1D06 : FF 7F                          smi   127                   ; remove bias
(1)  682/    1D08 : F4                             add                         ; add in exponent 2
(1)  683/    1D09 : FC 7F                          adi   127                   ; put bias back in
(1)  684/    1D0B : 73                             stxd                        ; place onto stack
(1)  685/    1D0C : 87                             glo   F7                    ; determine sign for answer
(1)  686/    1D0D : 52                             str   r2
(1)  687/    1D0E : F6                             shr
(1)  688/    1D0F : F3                             xor
(1)  689/    1D10 : 73                             stxd                        ; place onto stack
(1)  690/    1D11 : 9E                             ghi   R14                    ; get baud constant
(1)  691/    1D12 : 73                             stxd                        ; save on stack
(1)  692/    1D13 : 96                             ghi   r6                    ; save return position on stack
(1)  693/    1D14 : 73                             stxd
(1)  694/    1D15 : 86                             glo   r6
(1)  695/    1D16 : 73                             stxd
(1)  696/    1D17 : F8 00                          ldi   0                     ; initial value of ct
(1)  697/    1D19 : 73                             stxd
(1)  698/    1D1A : BE                             phi   R14                    ; set mulH to 0
(1)  699/    1D1B : AE                             plo   R14
(1)  700/    1D1C : B6                             phi   r6
(1)  701/    1D1D : A6                             plo   r6
(1)  702/    1D1E : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  703/    1D1F : 88                             glo   r8                    ; be sure high bit is set
(1)  704/    1D20 : F9 80                          ori   080h
(1)  705/    1D22 : A8                             plo   r8
(1)  706/    1D23 : F8 00                          ldi   0
(1)  707/    1D25 : BC                             phi   R12                    ; set result to 0
(1)  708/    1D26 : AC                             plo   R12
(1)  709/    1D27 : B7                             phi   F7
(1)  710/    1D28 : A7                             plo   F7
(1)  711/    1D29 : BF                             phi   R15
(1)  712/    1D2A : AF                             plo   R15
(1)  713/    1D2B : BD                             phi   R13
(1)  714/    1D2C : AD                             plo   R13
(1)  715/    1D2D : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  716/    1D2E : 8A                             glo   R10                    ; be sure high bit is set
(1)  717/    1D2F : F9 80                          ori   080h
(1)  718/    1D31 : AA                             plo   R10
(1)  719/    1D32 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  720/    1D33 : CA 1D 42                       lbnz  mul_go1               ; jump if not zero
(1)  721/    1D36 : 9B                             ghi   FB
(1)  722/    1D37 : CA 1D 42                       lbnz  mul_go1
(1)  723/    1D3A : 8A                             glo   R10
(1)  724/    1D3B : CA 1D 42                       lbnz  mul_go1
(1)  725/    1D3E : 9A                             ghi   R10
(1)  726/    1D3F : C2 1D BA                       lbz   mul_dn                ; jump if muliplier is zero
(1)  727/    1D42 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  728/    1D43 : F6                             shr
(1)  729/    1D44 : BA                             phi   R10
(1)  730/    1D45 : 8A                             glo   R10
(1)  731/    1D46 : 76                             shrc
(1)  732/    1D47 : AA                             plo   R10
(1)  733/    1D48 : 9B                             ghi   FB
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 40 - 4/3/2013 16:00:11


(1)  734/    1D49 : 76                             shrc
(1)  735/    1D4A : BB                             phi   FB
(1)  736/    1D4B : 8B                             glo   FB
(1)  737/    1D4C : 76                             shrc
(1)  738/    1D4D : AB                             plo   FB
(1)  739/    1D4E : CB 1D 8F                       lbnf  mul_no                ; jump if low bit was zero
(1)  740/    1D51 : 89                             glo   F9                    ; res += mul
(1)  741/    1D52 : 52                             str   r2
(1)  742/    1D53 : 87                             glo   F7
(1)  743/    1D54 : F4                             add
(1)  744/    1D55 : A7                             plo   F7
(1)  745/    1D56 : 99                             ghi   F9
(1)  746/    1D57 : 52                             str   r2
(1)  747/    1D58 : 97                             ghi   F7
(1)  748/    1D59 : 74                             adc
(1)  749/    1D5A : B7                             phi   F7
(1)  750/    1D5B : 88                             glo   r8
(1)  751/    1D5C : 52                             str   r2
(1)  752/    1D5D : 8C                             glo   R12
(1)  753/    1D5E : 74                             adc
(1)  754/    1D5F : AC                             plo   R12
(1)  755/    1D60 : 98                             ghi   r8
(1)  756/    1D61 : 52                             str   r2
(1)  757/    1D62 : 9C                             ghi   R12
(1)  758/    1D63 : 74                             adc
(1)  759/    1D64 : BC                             phi   R12
(1)  760/    1D65 : 86                             glo   r6                    ; now high 32 bits
(1)  761/    1D66 : 52                             str   r2
(1)  762/    1D67 : 8D                             glo   R13
(1)  763/    1D68 : F4                             add
(1)  764/    1D69 : AD                             plo   R13
(1)  765/    1D6A : 96                             ghi   r6
(1)  766/    1D6B : 52                             str   r2
(1)  767/    1D6C : 96                             ghi   r6
(1)  768/    1D6D : 52                             str   r2
(1)  769/    1D6E : 9D                             ghi   R13
(1)  770/    1D6F : 74                             adc
(1)  771/    1D70 : BD                             phi   R13
(1)  772/    1D71 : 8E                             glo   R14
(1)  773/    1D72 : 52                             str   r2
(1)  774/    1D73 : 8F                             glo   R15
(1)  775/    1D74 : 74                             adc
(1)  776/    1D75 : AF                             plo   R15
(1)  777/    1D76 : 9E                             ghi   R14
(1)  778/    1D77 : 52                             str   r2
(1)  779/    1D78 : 9F                             ghi   R15
(1)  780/    1D79 : 74                             adc
(1)  781/    1D7A : BF                             phi   R15
(1)  782/    1D7B : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  783/    1D7C : C2 1D 8F                       lbz   mul_no                ; jump if no carry is needed
(1)  784/    1D7F : 8D                             glo   R13                    ; move the carry on over
(1)  785/    1D80 : FC 01                          adi   1
(1)  786/    1D82 : AD                             plo   R13
(1)  787/    1D83 : 9D                             ghi   R13
(1)  788/    1D84 : 7C 00                          adci  0
(1)  789/    1D86 : BD                             phi   R13
(1)  790/    1D87 : 8F                             glo   R15
(1)  791/    1D88 : 7C 00                          adci  0
(1)  792/    1D8A : AF                             plo   R15
(1)  793/    1D8B : 9F                             ghi   R15
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 41 - 4/3/2013 16:00:11


(1)  794/    1D8C : 7C 00                          adci  0
(1)  795/    1D8E : BF                             phi   R15
(1)  796/    1D8F : 60                  mul_no:    irx                         ; recover ct
(1)  797/    1D90 : F0                             ldx
(1)  798/    1D91 : FC 01                          adi   1                     ; increment by 1
(1)  799/    1D93 : 73                             stxd                        ; and put it back
(1)  800/    1D94 : 89                             glo   F9                    ; shift mulL left
(1)  801/    1D95 : FE                             shl
(1)  802/    1D96 : A9                             plo   F9
(1)  803/    1D97 : 99                             ghi   F9
(1)  804/    1D98 : 7E                             shlc
(1)  805/    1D99 : B9                             phi   F9
(1)  806/    1D9A : 88                             glo   r8
(1)  807/    1D9B : 7E                             shlc
(1)  808/    1D9C : A8                             plo   r8
(1)  809/    1D9D : 98                             ghi   r8
(1)  810/    1D9E : 7E                             shlc
(1)  811/    1D9F : B8                             phi   r8
(1)  812/    1DA0 : 86                             glo   r6                    ; shift mulH left
(1)  813/    1DA1 : FE                             shl
(1)  814/    1DA2 : A6                             plo   r6
(1)  815/    1DA3 : 96                             ghi   r6
(1)  816/    1DA4 : 7E                             shlc
(1)  817/    1DA5 : B6                             phi   r6
(1)  818/    1DA6 : 8E                             glo   R14
(1)  819/    1DA7 : 7E                             shlc
(1)  820/    1DA8 : AE                             plo   R14
(1)  821/    1DA9 : 9E                             ghi   R14
(1)  822/    1DAA : 7E                             shlc
(1)  823/    1DAB : BE                             phi   R14
(1)  824/    1DAC : 98                             ghi   r8                    ; see if a carry is needed
(1)  825/    1DAD : C2 1D 32                       lbz   mul_lp1               ; jump if not
(1)  826/    1DB0 : F8 00                          ldi   0                     ; zero the high byte
(1)  827/    1DB2 : B8                             phi   r8
(1)  828/    1DB3 : 86                             glo   r6                    ; add in the carry
(1)  829/    1DB4 : F9 01                          ori   1
(1)  830/    1DB6 : A6                             plo   r6
(1)  831/    1DB7 : C0 1D 32                       lbr   mul_lp1               ; loop back for more
(1)  832/    1DBA : 60                  mul_dn:    irx                         ; recover ct
(1)  833/    1DBB : 72                             ldxa
(1)  834/    1DBC : AE                             plo   R14                    ; set aside
(1)  835/    1DBD : 72                             ldxa
(1)  836/    1DBE : A6                             plo   r6
(1)  837/    1DBF : 72                             ldxa
(1)  838/    1DC0 : B6                             phi   r6
(1)  839/    1DC1 : F0                             ldx
(1)  840/    1DC2 : BE                             phi   R14
(1)  841/    1DC3 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  842/    1DC4 : B8                             phi   r8
(1)  843/    1DC5 : 8C                             glo   R12
(1)  844/    1DC6 : A8                             plo   r8
(1)  845/    1DC7 : 97                             ghi   F7
(1)  846/    1DC8 : B9                             phi   F9
(1)  847/    1DC9 : 87                             glo   F7
(1)  848/    1DCA : A9                             plo   F9
(1)  849/    1DCB : 8E                             glo   R14
(1)  850/    1DCC : AC                             plo   R12                    ; put ct into RC.0
(1)  851/    1DCD : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  852/    1DCE : FF 02                          smi   2                     ; see if <2
(1)  853/    1DD0 : CB 1D E4                       lbnf  mul_nxt1              ; jump if so
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 42 - 4/3/2013 16:00:11


(1)  854/    1DD3 : D4                             sep   RCALL                 ; shift answer to the right
(1)  855/    1DD4 : 1A 72                          dw    fp_shr_1
(1)  856/    1DD6 : D4                             sep   RCALL                 ; shift resH right
(1)  857/    1DD7 : 1A A3                          dw    fp_shr_fd
(1)  858/    1DD9 : CB 1D E0                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  859/    1DDC : 88                             glo   r8                    ; set high bit
(1)  860/    1DDD : F9 80                          ori   080h
(1)  861/    1DDF : A8                             plo   r8
(1)  862/    1DE0 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  863/    1DE1 : C0 1D CD                       lbr   mul_lp2               ; loop back to keep checking
(1)  864/    1DE4 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  865/    1DE5 : 72                             ldxa
(1)  866/    1DE6 : A7                             plo   F7
(1)  867/    1DE7 : F0                             ldx                         ; recover answer exponent
(1)  868/    1DE8 : AC                             plo   R12
(1)  869/    1DE9 : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  870/    1DEA : CA 1D FC                       lbnz  mul_lp3a
(1)  871/    1DED : 8F                             glo   R15
(1)  872/    1DEE : CA 1D FC                       lbnz  mul_lp3a
(1)  873/    1DF1 : 9D                             ghi   R13
(1)  874/    1DF2 : CA 1D FC                       lbnz  mul_lp3a
(1)  875/    1DF5 : 8D                             glo   R13
(1)  876/    1DF6 : CA 1D FC                       lbnz  mul_lp3a
(1)  877/    1DF9 : C0 1E 0D                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  878/    1DFC : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  879/    1DFD : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
(1)  880/    1E00 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  881/    1E03 : CB 1D E9                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  882/    1E06 : 88                             glo   r8                    ; set high bit
(1)  883/    1E07 : F9 80                          ori   080h
(1)  884/    1E09 : A8                             plo   r8
(1)  885/    1E0A : C0 1D E9                       lbr   mul_lp3
(1)  886/    1E0D : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  887/    1E0E : BF                             phi   R15                    ; to high R15
(1)  888/    1E0F : C0 1A B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  889/    1E12 :                     
(1)  890/    1E12 :                     ; ***************************************
(1)  891/    1E12 :                     ; *** Convert ascii to floating point ***
(1)  892/    1E12 :                     ; *** RF - buffer to ascii text       ***
(1)  893/    1E12 :                     ; *** Returns: R8:F9 - number         ***
(1)  894/    1E12 :                     ; ***************************************
(1)  895/    1E12 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  896/    1E13 : FF 20                          smi   ' '                   ; check for space
(1)  897/    1E15 : C2 1E 12                       lbz   fp_atof               ; move past any spaces
(1)  898/    1E18 : 2F                             dec   R15                    ; point back to nonspace chara
(1)  899/    1E19 : 0F                             ldn   R15                    ; check for possible sign
(1)  900/    1E1A : FF 2D                          smi   '-'                   ; first check for minus
(1)  901/    1E1C : CA 1E 26                       lbnz   atof_nm              ; jump if not minus
(1)  902/    1E1F : F8 80                          ldi   080h                  ; high bit set for minus
(1)  903/    1E21 : 73                             stxd                        ; place onto stack
(1)  904/    1E22 : 1F                             inc   R15                    ; move past sign
(1)  905/    1E23 : C0 1E 30                       lbr   atof_go1              ; and continue
(1)  906/    1E26 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  907/    1E28 : 73                             stxd                        ; place onto stack
(1)  908/    1E29 : 0F                             ldn   R15                    ; now check for + sign
(1)  909/    1E2A : FF 2B                          smi   '+'
(1)  910/    1E2C : CA 1E 30                       lbnz  atof_go1              ; jump if not plus
(1)  911/    1E2F : 1F                             inc   R15                    ; move past plus sign
(1)  912/    1E30 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  913/    1E32 : B8                             phi   r8
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 43 - 4/3/2013 16:00:11


(1)  914/    1E33 : A8                             plo   r8
(1)  915/    1E34 : B9                             phi   F9
(1)  916/    1E35 : A9                             plo   F9
(1)  917/    1E36 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  918/    1E37 : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  919/    1E3A : CB 1E 67                       lbnf  atof_no1              ; jump if not
(1)  920/    1E3D : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  921/    1E3E : BA                             phi   R10
(1)  922/    1E3F : 88                             glo   r8
(1)  923/    1E40 : AA                             plo   R10
(1)  924/    1E41 : 99                             ghi   F9
(1)  925/    1E42 : BB                             phi   FB
(1)  926/    1E43 : 89                             glo   F9
(1)  927/    1E44 : AB                             plo   FB
(1)  928/    1E45 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  929/    1E48 : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  930/    1E4B : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  931/    1E4E : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  932/    1E51 : 4F                             lda   R15                    ; get number
(1)  933/    1E52 : FF 30                          smi   '0'                   ; convert to binary
(1)  934/    1E54 : 52                             str   r2                    ; setup for add
(1)  935/    1E55 : 89                             glo   F9                    ; add in next digit
(1)  936/    1E56 : F4                             add
(1)  937/    1E57 : A9                             plo   F9
(1)  938/    1E58 : 99                             ghi   F9                    ; propagate carry
(1)  939/    1E59 : 7C 00                          adci  0
(1)  940/    1E5B : B9                             phi   F9
(1)  941/    1E5C : 88                             glo   r8
(1)  942/    1E5D : 7C 00                          adci  0
(1)  943/    1E5F : A8                             plo   r8
(1)  944/    1E60 : 98                             ghi   r8
(1)  945/    1E61 : 7C 00                          adci  0
(1)  946/    1E63 : B8                             phi   r8
(1)  947/    1E64 : C0 1E 36                       lbr   atof_lp1              ; loop until no more digits
(1)  948/    1E67 : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  949/    1E68 : FF 2E                          smi   '.'
(1)  950/    1E6A : CA 1E 6E                       lbnz  atof_ndp              ; jump if none
(1)  951/    1E6D : 1F                             inc   R15                    ; move past decimal
(1)  952/    1E6E : F8 1F               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  953/    1E70 : BA                             phi   R10
(1)  954/    1E71 : F8 A3                          ldi   scratch&255
(1)  955/    1E73 : AA                             plo   R10
(1)  956/    1E74 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  957/    1E76 : AC                             plo   R12
(1)  958/    1E77 : F8 00               atof_lpx:  ldi   0
(1)  959/    1E79 : 5A                             str   R10
(1)  960/    1E7A : 1A                             inc   R10
(1)  961/    1E7B : 2C                             dec   R12
(1)  962/    1E7C : 8C                             glo   R12
(1)  963/    1E7D : CA 1E 77                       lbnz  atof_lpx
(1)  964/    1E80 : F8 1F                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  965/    1E82 : BA                             phi   R10
(1)  966/    1E83 : F8 A4                          ldi   (scratch+1)&255
(1)  967/    1E85 : AA                             plo   R10
(1)  968/    1E86 : F8 01                          ldi   1                     ; setup count
(1)  969/    1E88 : AC                             plo   R12
(1)  970/    1E89 : F8 00                          ldi   0                     ; setup exp flag
(1)  971/    1E8B : BC                             phi   R12
(1)  972/    1E8C : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  973/    1E8D : FF 11                          smi   17
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 44 - 4/3/2013 16:00:11


(1)  974/    1E8F : C2 1E A8                       lbz   atof_dn3              ; jump if so
(1)  975/    1E92 : 0F                             ldn   R15                    ; get character
(1)  976/    1E93 : D4                             sep   RCALL                 ; is it numeric
(1)  977/    1E94 : 1A 62                          dw    f_isnum
(1)  978/    1E96 : CB 1E A8                       lbnf  atof_dn3              ; jump if not
(1)  979/    1E99 : 4F                             lda   R15                    ; get character
(1)  980/    1E9A : FF 30                          smi   '0'                   ; converto to binary
(1)  981/    1E9C : 5A                             str   R10                    ; write into bcd area
(1)  982/    1E9D : 1A                             inc   R10
(1)  983/    1E9E : 1C                             inc   R12                    ; increment count
(1)  984/    1E9F : CA 1E 8C                       lbnz  atof_lp2              ; loop back until done
(1)  985/    1EA2 : F8 01                          ldi   1                     ; set non zero flag
(1)  986/    1EA4 : BC                             phi   R12
(1)  987/    1EA5 : C0 1E 8C                       lbr   atof_lp2
(1)  988/    1EA8 : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  989/    1EA9 : CA 1E C2                       lbnz  atof_nz
(1)  990/    1EAC : 98                             ghi   r8                    ; check for non-zero integer
(1)  991/    1EAD : CA 1E C2                       lbnz  atof_nz
(1)  992/    1EB0 : 88                             glo   r8
(1)  993/    1EB1 : CA 1E C2                       lbnz  atof_nz
(1)  994/    1EB4 : 99                             ghi   F9
(1)  995/    1EB5 : CA 1E C2                       lbnz  atof_nz
(1)  996/    1EB8 : 89                             glo   F9
(1)  997/    1EB9 : CA 1E C2                       lbnz  atof_nz
(1)  998/    1EBC : 60                             irx                         ; recover sign
(1)  999/    1EBD : F0                             ldx
(1) 1000/    1EBE : B8                             phi   r8                    ; put in high of zero
(1) 1001/    1EBF : C0 1F 95                       lbr	atof_end               ; and return
(1) 1002/    1EC2 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1) 1003/    1EC4 : BC                             phi   R12
(1) 1004/    1EC5 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1005/    1EC6 : FA 80                          ani   080h
(1) 1006/    1EC8 : CA 1F 12                       lbnz  atof_dn4              ; jump if so
(1) 1007/    1ECB : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1008/    1ECE : F8 1F                          ldi   scratch>>8          ; point to bcd number
(1) 1009/    1ED0 : BA                             phi   R10
(1) 1010/    1ED1 : F8 A3                          ldi   255&scratch
(1) 1011/    1ED3 : AA                             plo   R10
(1) 1012/    1ED4 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1013/    1ED6 : 5A                             str   R10
(1) 1014/    1ED7 : F8 1F                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1015/    1ED9 : BA                             phi   R10
(1) 1016/    1EDA : F8 B2                          ldi   255&(scratch+15)
(1) 1017/    1EDC : AA                             plo   R10
(1) 1018/    1EDD : F8 00                          ldi   0                     ; set carry forward
(1) 1019/    1EDF : AE                             plo   R14
(1) 1020/    1EE0 : F8 10                          ldi   16                    ; setup count
(1) 1021/    1EE2 : AC                             plo   R12
(1) 1022/    1EE3 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1023/    1EE4 : 52                             str   r2                    ; in memory for add
(1) 1024/    1EE5 : 0A                             ldn   R10                    ; get bcd digit
(1) 1025/    1EE6 : F4                             add                         ; add in carry
(1) 1026/    1EE7 : 52                             str   r2                    ; place into memory
(1) 1027/    1EE8 : 0A                             ldn   R10                    ; recover bcd digit
(1) 1028/    1EE9 : F4                             add                         ; digit now doubled with carry
(1) 1029/    1EEA : 5A                             str   R10                    ; put it back
(1) 1030/    1EEB : FF 0A                          smi   10
(1) 1031/    1EED : CB 1E F4                       lbnf  atof_no4              ; jump if below 10
(1) 1032/    1EF0 : 5A                             str   R10                    ; store value - 10
(1) 1033/    1EF1 : F8 01                          ldi   1                     ; carry set to 1
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 45 - 4/3/2013 16:00:11


(1) 1034/    1EF3 : C8                             lskp                        ; skip next instruction
(1) 1035/    1EF4 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1036/    1EF6 : AE                             plo   R14
(1) 1037/    1EF7 : 2A                             dec   R10                    ; move to previous digit
(1) 1038/    1EF8 : 2C                             dec   R12                    ; decrement digit count
(1) 1039/    1EF9 : 8C                             glo   R12                    ; see if done
(1) 1040/    1EFA : CA 1E E3                       lbnz  atof_lp4              ; jump if not
(1) 1041/    1EFD : F8 1F                          ldi   scratch>>8	       ; point to first digit
(1) 1042/    1EFF : BA                             phi   R10
(1) 1043/    1F00 : F8 A3                          ldi   255&scratch
(1) 1044/    1F02 : AA                             plo   R10
(1) 1045/    1F03 : 0A                             ldn   R10                    ; retrieve it
(1) 1046/    1F04 : C2 1F 0B                       lbz   atof_nc4              ; jump if no carry
(1) 1047/    1F07 : 89                             glo   F9                    ; add in the carry
(1) 1048/    1F08 : F9 01                          ori   1
(1) 1049/    1F0A : A9                             plo   F9
(1) 1050/    1F0B : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1051/    1F0C : FC 01                          adi   1
(1) 1052/    1F0E : BC                             phi   R12
(1) 1053/    1F0F : C0 1E C5                       lbr   atof_lp3              ; loop until full
(1) 1054/    1F12 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1055/    1F13 : 52                             str   r2                    ; into memory
(1) 1056/    1F14 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1057/    1F16 : F7                             sm
(1) 1058/    1F17 : FC 7F                          adi   127                   ; add in bias
(1) 1059/    1F19 : BD                             phi   R13                    ; set aside
(1) 1060/    1F1A : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1061/    1F1B : A9                             plo   F9
(1) 1062/    1F1C : 88                             glo   r8
(1) 1063/    1F1D : B9                             phi   F9
(1) 1064/    1F1E : 98                             ghi   r8
(1) 1065/    1F1F : FE                             shl                         ; shift out high bit
(1) 1066/    1F20 : A8                             plo   r8
(1) 1067/    1F21 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1068/    1F22 : F6                             shr
(1) 1069/    1F23 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1070/    1F24 : 88                             glo   r8                    ; get mantissa
(1) 1071/    1F25 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1072/    1F26 : A8                             plo   r8                    ; and write it
(1) 1073/    1F27 : 60                             irx                         ; point to sign
(1) 1074/    1F28 : 98                             ghi   r8                    ; high byte
(1) 1075/    1F29 : F1                             or                          ; set sign
(1) 1076/    1F2A : B8                             phi   r8                    ; done with base conversion
(1) 1077/    1F2B : 0F                             ldn   R15                    ; get next byte
(1) 1078/    1F2C : FF 65                          smi   'e'                   ; check for exponents
(1) 1079/    1F2E : C2 1F 37                       lbz   atof_exp
(1) 1080/    1F31 : 0F                             ldn   R15
(1) 1081/    1F32 : FF 45                          smi   'E'
(1) 1082/    1F34 : CA 1F 95                       lbnz  atof_end
(1) 1083/    1F37 : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1084/    1F38 : 0F                             ldn   R15                    ; check for sign
(1) 1085/    1F39 : FF 2D                          smi   '-'
(1) 1086/    1F3B : C2 1F 48                       lbz   atof_n
(1) 1087/    1F3E : 0F                             ldn   R15
(1) 1088/    1F3F : FF 2B                          smi   '+'
(1) 1089/    1F41 : C2 1F 45                       lbz   atof_p
(1) 1090/    1F44 : 2F                             dec   R15                    ; positive if no sign
(1) 1091/    1F45 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1092/    1F47 : C8                             lskp
(1) 1093/    1F48 : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(LCC1802fp.inc) - page 46 - 4/3/2013 16:00:11


(1) 1094/    1F4A : BC                             phi   R12                    ; place into sign variable
(1) 1095/    1F4B : 1F                             inc   R15                    ; move past sign
(1) 1096/    1F4C : F8 00                          ldi   0                     ; setup intial count
(1) 1097/    1F4E : AC                             plo   R12
(1) 1098/    1F4F : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1099/    1F50 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1100/    1F53 : CB 1F 65                       lbnf  atof_dn5              ; jump if not
(1) 1101/    1F56 : 8C                             glo   R12                    ; make copy of exponent
(1) 1102/    1F57 : 52                             str   r2
(1) 1103/    1F58 : F6                             shr                         ; multiply by 2
(1) 1104/    1F59 : F6                             shr                         ; by 4
(1) 1105/    1F5A : F4                             add                         ; by 5
(1) 1106/    1F5B : F6                             shr                         ; by 10
(1) 1107/    1F5C : 52                             str   r2                    ; put here for add
(1) 1108/    1F5D : 4F                             lda   R15                    ; recover number
(1) 1109/    1F5E : FF 30                          smi   '0'                   ; convert to binary
(1) 1110/    1F60 : F4                             add                         ; add with total
(1) 1111/    1F61 : AC                             plo   R12                    ; copy back to R12
(1) 1112/    1F62 : C0 1F 4F                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1113/    1F65 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1114/    1F66 : C2 1F 95                       lbz   atof_end              ; jump if so
(1) 1115/    1F69 : 2C                             dec   R12                    ; otherwise decrement count
(1) 1116/    1F6A : 8C                             glo   R12                    ; save count
(1) 1117/    1F6B : 73                             stxd
(1) 1118/    1F6C : 9C                             ghi   R12                    ; save sign
(1) 1119/    1F6D : 73                             stxd
(1) 1120/    1F6E : 8F                             glo   R15
(1) 1121/    1F6F : 73                             stxd
(1) 1122/    1F70 : 9F                             ghi   R15
(1) 1123/    1F71 : 73                             stxd
(1) 1124/    1F72 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1125/    1F74 : BA                             phi   R10
(1) 1126/    1F75 : F8 20                          ldi   020h
(1) 1127/    1F77 : AA                             plo   R10
(1) 1128/    1F78 : F8 00                          ldi   0
(1) 1129/    1F7A : BB                             phi   FB
(1) 1130/    1F7B : AB                             plo   FB
(1) 1131/    1F7C : 9C                             ghi   R12
(1) 1132/    1F7D : C2 1F 86                       lbz   atof_div              ; jump if negative
(1) 1133/    1F80 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1134/    1F83 : C0 1F 89                       lbr   atof_go5              ; clean up call
(1) 1135/    1F86 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1136/    1F89 : 60                  atof_go5:  irx                         ; recover variables
(1) 1137/    1F8A : 72                             ldxa
(1) 1138/    1F8B : BF                             phi   R15
(1) 1139/    1F8C : 72                             ldxa
(1) 1140/    1F8D : AF                             plo   R15
(1) 1141/    1F8E : 72                             ldxa
(1) 1142/    1F8F : BC                             phi   R12
(1) 1143/    1F90 : F0                             ldx
(1) 1144/    1F91 : AC                             plo   R12
(1) 1145/    1F92 : C0 1F 65                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1146/    1F95 :                     atof_end:
(1) 1147/    1F95 : 12                  	   inc	r2	;wjr release work area
(1) 1148/    1F96 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1149/    1F9A : (MACRO)             	   popr R12	;wjr
(1) 1150/    1F9E : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1151/    1FA2 : (MACRO)             	   Cretn
(1) 1152/    1FA3 : 00 00               scratch:   db	00,00
    1124/    1FA5 :                     	include IO1802.inc
 AS V1.42 Beta [Bld 87] - source file pidemo.asm(IO1802.inc) - page 47 - 4/3/2013 16:00:11


(1)    1/    1FA5 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    1FA5 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    1FA5 :                     	align 64
(1)    4/    1FC0 :                     _putc:
(1)    5/    1FC0 :                     _out5:	
(1)    6/    1FC0 : 8C                  	glo	regArg1
(1)    7/    1FC1 : 22                  	dec	sp
(1)    8/    1FC2 : 52                  	str	sp
(1)    9/    1FC3 : 65                  	out	5
(1)   10/    1FC4 : (MACRO)             	Cretn
(1)   11/    1FC5 :                     _inp:		;raw port input
(1)   12/    1FC5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    1FC5 : 22                  	dec	sp	;work backwards
(1)   14/    1FC6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    1FC8 : 73                  	stxd		
(1)   16/    1FC9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    1FCA : FA 07               	ani	0x07	;clean it
(1)   18/    1FCC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    1FCE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    1FD0 : 73                  	stxd		;store it for execution
(1)   21/    1FD1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    1FD5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    1FD6 : D8                  	sep	rt1	;execute it
(1)   24/    1FD7 :                     ;we will come back to here with the input byte in D
(1)   25/    1FD7 : 12                  	inc	sp	;step over the work area
(1)   26/    1FD8 : AF                  	plo	retVal	;save it to return
(1)   27/    1FD9 : F8 00               	ldi	0
(1)   28/    1FDB : BF                  	phi	retval	;clear top byte
(1)   29/    1FDC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    1FDD : 12                  	inc	sp	;and the D3
(1)   31/    1FDE : (MACRO)             	Cretn		;and we're done
(1)   32/    1FDF :                     	
(1)   33/    1FDF :                     _out:		;raw port output
(1)   34/    1FDF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    1FDF : 22                  	dec	sp	;work backwards
(1)   36/    1FE0 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    1FE2 : 73                  	stxd		
(1)   38/    1FE3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    1FE7 : 8C                  	glo	regarg1	;get the port number
(1)   40/    1FE8 : FA 07               	ani	0x07	;clean it
(1)   41/    1FEA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    1FEC : 73                  	stxd		;store it for execution
(1)   43/    1FED : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    1FEE : 52                  	str	sp	;store it where sp points
(1)   45/    1FEF : D8                  	sep	rt1	;execute it
(1)   46/    1FF0 :                     ;we will come back to here with sp stepped up by one
(1)   47/    1FF0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    1FF1 : 12                  	inc	sp	;and the D3
(1)   49/    1FF2 : (MACRO)             	Cretn		;and we're done
(1)   50/    1FF3 :                     	
(1)   51/    1FF3 :                     	
    1125/    1FF3 :                     
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 48 - 4/3/2013 16:00:11


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    1B07 C |  ADD_A2NZ :                    1B18 C |
 ADD_FNL :                     1BBF C |  ADD_LP1 :                     1B62 C |
 ADD_LP1DN :                   1B77 C |  ADD_NM :                      1B86 C |
 ADD_NO :                      1BA8 C |  ADD_NS :                      1B50 C |
 ADD_NX :                      1BEB C |  ADD_NZ :                      1BDD C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    1F86 C |
 ATOF_DN3 :                    1EA8 C |  ATOF_DN4 :                    1F12 C |
 ATOF_DN5 :                    1F65 C |  ATOF_END :                    1F95 C |
 ATOF_EXP :                    1F37 C |  ATOF_GO1 :                    1E30 C |
 ATOF_GO5 :                    1F89 C |  ATOF_LP1 :                    1E36 C |
 ATOF_LP2 :                    1E8C C |  ATOF_LP3 :                    1EC5 C |
 ATOF_LP4 :                    1EE3 C |  ATOF_LP5 :                    1F4F C |
 ATOF_LPX :                    1E77 C |  ATOF_N :                      1F48 C |
 ATOF_NC4 :                    1F0B C |  ATOF_NDP :                    1E6E C |
 ATOF_NM :                     1E26 C |  ATOF_NO1 :                    1E67 C |
 ATOF_NO4 :                    1EF4 C |  ATOF_NZ :                     1EC2 C |
 ATOF_P :                      1F45 C | *BIGENDIAN :                      0 - |
 BITLOOP177 :                  17AC C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB175 :                1696 C |
 CKNEXT177 :                   17F0 C |  CKTOP177 :                    1797 C |
 CLRLP177 :                    1788 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       1A00 C |  CVIF4 :                       1900 C |
*DATE :                    4/3/2013 - |  DCKLP177 :                    17AF C |
 DIVLOOP16_16172 :             1552 C | *DIVSETBIT16_16172 :           1584 C |
 DIVSKIP16_16172 :             1581 C |  DIVSKIPCLEAR16_16172 :        1588 C |
 DIVSKIPFINALADD16_16172 :     159A C |  DIVSUB16_16172 :              1573 C |
 DIV_A1NZ :                    1C09 C |  DIV_A2NZ :                    1C27 C |
 DIV_GO :                      1C8E C |  DIV_GO1 :                     1C7B C |
 DIV_LP :                      1C68 C |  DIV_NOPE :                    1CC9 C |
 DIV_Z :                       1CDB C |  DNOADD177 :                   17B7 C |
 DONE173 :                     15D3 C |  DONE176 :                     1774 C |
 DONE177 :                     17FA C |  DONE183 :                     196F C |
 DONE184 :                     1A61 C |  DSHLP177 :                    17CB C |
 ENDLP174 :                    1661 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       1A6E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      1AEE C |  FP_ADD_12 :                   1A8C C |
 FP_ATOF :                     1E12 C |  FP_DIV :                      1BF8 C |
 FP_GETEXP :                   1ADC C |  FP_GETSGN :                   1AE7 C |
 FP_MUL :                      1CEB C |  FP_SC_CLN :                   1AC0 C |
 FP_SC_UP :                    1AB0 C |  FP_SHL_1 :                    1A7F C |
 FP_SHR_1 :                    1A72 C |  FP_SHR_FD :                   1AA3 C |
 FP_SUB :                      1BF1 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     1A62 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*L1 :                           1E0 C |  L10 :                         13C0 C |
 L100 :                         ED6 C |  L101 :                         EF1 C |
 L102 :                         EC2 C | *L104 :                         F29 C |
*L105 :                        123C C |  L106 :                        13A4 C |
 L107 :                        1239 C | *L108 :                        1239 C |
 L11 :                         13B8 C | *L110 :                        12E4 C |
 L111 :                        1276 C |  L112 :                        12C3 C |
 L114 :                        12E0 C | *L115 :                        1344 C |
 L116 :                        1319 C |  L117 :                        132F C |
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 49 - 4/3/2013 16:00:11


*L119 :                        1392 C | *L12 :                          218 C |
 L120 :                        136E C |  L121 :                        137D C |
 L13 :                          1FB C | *L14 :                          1FB C |
 L16 :                          1FD C | *L17 :                          25F C |
 L18 :                          22B C |  L19 :                          24A C |
 L2 :                          13E4 C | *L21 :                          90B C |
 L22 :                          34F C |  L23 :                          378 C |
 L24 :                         13B4 C |  L25 :                         13B0 C |
 L26 :                          378 C |  L28 :                          3BC C |
 L3 :                            74 C |  L30 :                          493 C |
 L31 :                          580 C |  L34 :                          671 C |
 L35 :                          600 C |  L36 :                          65D C |
 L38 :                          8EB C | *L4 :                           1A6 C |
 L40 :                          6B7 C |  L41 :                          7A4 C |
 L43 :                          7EA C |  L44 :                          824 C |
 L47 :                          8EB C |  L48 :                          87A C |
 L49 :                          8D7 C | *L51 :                          AC8 C |
 L52 :                          9E6 C |  L53 :                          9F6 C |
 L54 :                          9FF C |  L55 :                          AA0 C |
 L57 :                          A06 C | *L58 :                          A06 C |
 L60 :                          A13 C |  L61 :                          A8B C |
 L64 :                          A48 C | *L65 :                          B92 C |
 L66 :                          B5F C | *L68 :                          BDE C |
*L69 :                          C3E C |  L7 :                          13E0 C |
*L70 :                          CB1 C | *L71 :                          D44 C |
 L72 :                          D1F C |  L73 :                          D44 C |
*L74 :                          DC2 C | *L75 :                         11FE C |
 L76 :                          E0A C |  L77 :                         11DD C |
 L79 :                          E46 C |  L8 :                          13DC C |
 L80 :                         11DD C |  L81 :                         11CC C |
 L82 :                         11DD C |  L84 :                          F44 C |
 L85 :                          F61 C |  L86 :                          F82 C |
 L87 :                          FA4 C |  L88 :                         1012 C |
 L89 :                         117C C |  L9 :                          13C4 C |
 L91 :                         1070 C |  L93 :                         10A3 C |
 L94 :                         1177 C |  L95 :                         117C C |
 L96 :                         11CC C |  L98 :                         11B0 C |
 LCC1802INIT :                 13EB C | *LISTON :                         1 - |
 LOOP174 :                     160F C |  LSH184 :                      1A2B C |
*MACEXP :                         0 - |  MEMADDR :                        E - |
 MLOOP175 :                    1677 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MSLP170 :                     151E C |
 MULTLOOP16_16171 :            152B C |  MULTSKIP16_16171 :            153D C |
 MUL_DN :                      1DBA C |  MUL_GO1 :                     1D42 C |
 MUL_LP1 :                     1D32 C |  MUL_LP2 :                     1DCD C |
 MUL_LP2A :                    1DE0 C |  MUL_LP3 :                     1DE9 C |
 MUL_LP3A :                    1DFC C |  MUL_LP4 :                     1E0D C |
 MUL_NO :                      1D8F C |  MUL_NXT1 :                    1DE4 C |
*NESTMAX :                      100 - |  NORESTORE174 :                165D C |
 NXT183 :                      1930 C | *PACKING :                        0 - |
*PADDING :                        1 - | *PASSES :                      1A6B C |
 POS1173 :                     15B3 C |  POS1176 :                     1726 C |
 POS2173 :                     15C3 C |  POS2176 :                     174D C |
 R0 :                             0 - |  R1 :                             1 - |
 R10 :                            A - |  R11 :                            B - |
 R12 :                            C - |  R13 :                            D - |
 R14 :                            E - |  R15 :                            F - |
 R2 :                             2 - |  R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
 R6 :                             6 - |  R7 :                             7 - |
 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 50 - 4/3/2013 16:00:11


 R8 :                             8 - |  R9 :                             9 - |
 RCALL :                          4 - |  REGARG1 :                        C - |
 REGARG2 :                        D - | *RELAXED :                        1 - |
 RETADDR :                        6 - |  RETVAL :                         F - |
 RL0 :                            1 - |  RL10 :                           B - |
 RL12 :                           D - |  RL8 :                            9 - |
 RP1P2 :                          D - |  RPC :                            3 - |
 RRET :                           5 - |  RT1 :                            8 - |
*RT2 :                            9 - |  RWORK :                          E - |
 SCRATCH :                     1FA3 C |  SETSGN183 :                   1968 C |
 SGNPOS183 :                   1939 C |  SHDN183 :                     195F C |
 SHIFT175 :                    16AE C |  SHL183 :                      194B C |
 SHR184 :                      1A19 C |  SIGN184 :                     1A3B C |
 SP :                             2 - | *TIME :                    16:00:11 - |
*TRUE :                           1 - |  UPNXT177 :                    17E4 C |
*VERSION :                     142F - |  _00000162 :                   1405 C |
 _CALL :                       1501 C |  _DENOM :                        44 C |
 _DIE162 :                     1408 C |  _DIVI2 :                      15A4 C |
 _DIVI4 :                      1700 C |  _DIVU2 :                      1549 C |
 _DIVU4 :                      1600 C |  _DUBDABX :                    1775 C |
*_EXIT :                       1213 C |  _FTOA :                        268 C |
*_INP :                        1FC5 C |  _ITOA :                        924 C |
 _LTOA :                        ADD C |  _MAIN :                         50 C |
*_MEMCMP :                     1241 C | *_MEMCPY :                     12F3 C |
*_MEMSET :                     1351 C | *_MODI2 :                      1419 C |
 _MODI4 :                      1807 C | *_MODU2 :                      1411 C |
*_MODU4 :                      17FB C |  _MULT_NUMS :                    24 C |
*_MULU2 :                      1523 C | *_MULU4 :                      1666 C |
 _N :                          139B C | *_ONEMS :                      151C C |
 _OUT :                        1FDF C | *_OUT4 :                       1421 C |
*_OUT5 :                       1FC0 C |  _PI4 :                          48 C |
 _PRINTF :                      DC7 C |  _PRINTFLT :                    C47 C |
 _PRINTINT :                    BA5 C |  _PRINTLINT :                   BE7 C |
 _PRINTSTR :                    21B C |  _PUTC :                       1FC0 C |
 _PUTX :                        D49 C |  _PUTXN :                       CBA C |
 _RETURN :                     1512 C |  _ROUND_NUMS :                    4 C |
*_SETQOFF :                    140F C | *_SETQON :                     140D C |
 _SIGN :                         4C C |  _STRCPY :                      1E9 C |
*_TERM :                       13A0 C |  __FORW7 :                     1FDC C |
*__FORW8 :                     1FF0 C |

    313 symbols
     71 unused symbols

 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 51 - 4/3/2013 16:00:11


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | JUMPV                                
JZU2                                  | LD1                                  
LD2                                   | LD2Z                                 
LD4                                   | LDA2                                 
LDAD                                  | LDAX                                 
LDI4                                  | LDIREG                               
LDN1                                  | NEGI2                                
NEGI4                                 | POPR                                 
PUSHR                                 | RELEASE                              
RELEASEL                              | RELEASES                             
RESERVE                               | RESERVEL                             
RESERVES                              | RLDMI                                
SAVMI                                 | SEXT                                 
SEXT4                                 | SHL2                                 
SHL2I                                 | SHL2R                                
SHL4                                  | SHL4I                                
SHL4R                                 | SHLC4                                
SHRC4                                 | SHRI2                                
SHRI2I                                | SHRI2R                               
SHRI4                                 | SHRI4I                               
SHRI4R                                | SHRU2                                
SHRU2I                                | SHRU2R                               
SHRU4                                 | SHRU4I                               
SHRU4R                                | ST1                                  
ST2                                   | ST4                                  
STR1                                  | ZEXT                                 
ZEXT4                                 |

     81 macros

 AS V1.42 Beta [Bld 87] - source file pidemo.asm - page 52 - 4/3/2013 16:00:11


  codepages:
  ----------

STANDARD (0 changed characters)


0.28 seconds assembly time

   3643 lines source file
   9908 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
