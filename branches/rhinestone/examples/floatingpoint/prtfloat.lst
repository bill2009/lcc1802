 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 1 - 3/28/2013 8:52:10


       1/       0 :                     ; generated by lcc-xr18fl $Version: 4.0 - XR18FL - St. Judy's Compiler $ on Thu Mar 28 08:52:04 2013
       2/       0 :                     
       3/       0 : =2H                 SP:	equ	2 ;stack pointer
       4/       0 : =EH                 memAddr: equ	14
       5/       0 : =6H                 retAddr: equ	6
       6/       0 : =FH                 retVal:	equ	15
       7/       0 : =CH                 regArg1: equ	12
       8/       0 : =DH                 regArg2: equ	13
(1)  824/       0 :                     	listing	on
(1)  825/       0 : C0 1A BC            	lbr	lcc1802Init
(1)  826/       3 :                     	
      11/       3 :                     	listing on
      12/       3 :                     	align 4
      13/       4 :                     _round_nums:
      14/       4 : 3F 00 00 00         	dd 0x3f000000
      15/       8 : 3D 4C CC CD         	dd 0x3d4ccccd
      16/       C : 3B A3 D7 0A         	dd 0x3ba3d70a
      17/      10 : 3A 03 12 6F         	dd 0x3a03126f
      18/      14 : 38 51 B7 17         	dd 0x3851b717
      19/      18 : 36 A7 C5 AC         	dd 0x36a7c5ac
      20/      1C : 35 06 37 BD         	dd 0x350637bd
      21/      20 : 33 56 BF 95         	dd 0x3356bf95
      22/      24 :                     _my_strlen:
      23/      24 : (MACRO)             	reserve 0; save room for local variables
      24/      24 : (MACRO)             	pushr r7
      25/      29 : (MACRO)             	reserve 0; save room for outgoing arguments
      26/      29 :                     ;{
      27/      29 :                     ;	unsigned int slen = 0 ;
      28/      29 : (MACRO)             	ld2z R7
      29/      2D :                     ;   if (str == 0)
      30/      2D : (MACRO)             	cpy2 R11,R12 ;LOADU2(reg)*
      31/      31 : (MACRO)             	jnzU2 r11,L5; NE 0
      32/      39 :                     ;      return 0;
      33/      39 : (MACRO)             	ld2z R15
      34/      3D : C0 00 5B            	lbr L1
      35/      40 :                     L4:
      36/      40 :                     ;   while (*str != 0) {
      37/      40 :                     ;      slen++ ;
      38/      40 : (MACRO)             	incm R7,1
      39/      41 :                     ;      str++ ;
      40/      41 : (MACRO)             	incm R12,1
      41/      42 :                     ;   }
      42/      42 :                     L5:
      43/      42 :                     ;   while (*str != 0) {
      44/      42 : (MACRO)             	ld1 R11,'O',R12,0
      45/      4C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
      46/      4F : (MACRO)             	jnzU2 r11,L4; NE 0
      47/      57 :                     ;   return slen;
      48/      57 : (MACRO)             	cpy2 R15,R7 ;LOADU2(reg)*
      49/      5B :                     L1:
      50/      5B : (MACRO)             	release 0; release room for outgoing arguments
      51/      5B : (MACRO)             	popr r7
      52/      5F : (MACRO)             	release 0; release room for local variables 
      53/      5F : (MACRO)             	Cretn
      54/      60 :                     
      55/      60 :                     L8:
      56/      60 : 00 00 00 00 00 00   	db 128 dup (0); zerofill global
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 2 - 3/28/2013 8:52:10


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 
      57/      E0 :                     _ftoa:
      58/      E0 : (MACRO)             	reserve 142; save room for local variables
      59/      EA : (MACRO)             	pushr r0
      60/      EF : (MACRO)             	pushr r1
      61/      F4 : (MACRO)             	pushr r7
      62/      F9 : (MACRO)             	reserve 16; save room for outgoing arguments
      63/     103 : (MACRO)             	cpy2 r7,r12; function(2055) 1
      64/     107 : (MACRO)             	ld4 RL0,'O',sp,(4+166);INDIRF4(addr)
      65/     117 :                     ;{
      66/     117 :                     ;   char *output = (outbfr == 0) ? local_bfr : outbfr ;
      67/     117 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
      68/     11B : (MACRO)             	jnzU2 r11,L10; NE 0
      69/     123 : (MACRO)             	ldaD R11,L8; reg:acon
      70/     129 : (MACRO)             	st2 R11,'O',sp,(-66+166); ASGNP2
      71/     136 : C0 01 46            	lbr L11
      72/     139 :                     L10:
      73/     139 : (MACRO)             	st2 R7,'O',sp,(-66+166); ASGNP2
      74/     146 :                     L11:
      75/     146 : (MACRO)             	ld2 R11,'O',sp,(-66+166);reg:  INDIRP2(addr)
      76/     152 : (MACRO)             	st2 R11,'O',sp,(-58+166); ASGNP2
      77/     15F :                     ;   if (flt < 0.0) {
      78/     15F : (MACRO)             	ld4 RL10,'D',(L14),0;INDIRF4(addr)
      79/     16D : (MACRO)             	jcF4 RL0,RL10,lbdf,L12;GEF4(reg,reg) - reverse test
      80/     1B2 :                     ;      *output++ = '-' ;
      81/     1B2 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
      82/     1BE : (MACRO)             	cpy2 R10,R11
      83/     1C2 : (MACRO)             	incm R10,1
      84/     1C3 : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
      85/     1D0 : (MACRO)             	ldaD R10,45; reg:acon
      86/     1D6 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
      87/     1D8 :                     ;      flt *= -1.0 ;
      88/     1D8 : (MACRO)             	ld4 RL8,'D',(L15),0;INDIRF4(addr)
      89/     1E6 : (MACRO)             	cpy4 RL10,RL0; LOADU4(reg)
      90/     1EE : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
      91/     1F1 : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
      92/     1F9 :                     ;   } else {
      93/     1F9 : C0 02 25            	lbr L13
      94/     1FC :                     L12:
      95/     1FC :                     ;      if (use_leading_plus) {
      96/     1FC : C0 02 25            	lbr L16
      97/     1FF :                     ;         *output++ = '+' ;
      98/     1FF : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 3 - 3/28/2013 8:52:10


      99/     20B : (MACRO)             	cpy2 R10,R11
     100/     20F : (MACRO)             	incm R10,1
     101/     210 : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     102/     21D : (MACRO)             	ldaD R10,43; reg:acon
     103/     223 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     104/     225 :                     ;      }
     105/     225 :                     L16:
     106/     225 :                     ;   }
     107/     225 :                     L13:
     108/     225 :                     ;   if (dec_digits < 8) {
     109/     225 : (MACRO)             	ld2 R11,'O',sp,(8+166); reg:INDIRU2(addr)
     110/     231 : (MACRO)             	jcI2I r11,8,lbdf,L18; GE is flipped test from LT
     111/     242 :                     ;      flt += round_nums[dec_digits] ;
     112/     242 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     113/     24A : (MACRO)             	ld2 R11,'O',sp,(8+166); reg:INDIRU2(addr)
     114/     256 : (MACRO)             	shl2I R11,2
     115/     262 : (MACRO)             	ld4 RL10,'O',R11,(_round_nums);INDIRF4(addr)
     116/     272 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     117/     275 : (MACRO)             	cpy4 RL0,RL8; LOADU4(reg)
     118/     27D :                     ;   }
     119/     27D :                     L18:
     120/     27D :                     ;   mult = 1 ;
     121/     27D : (MACRO)             	ldI4 RL10,1 ;loading a long unsigned constant
     122/     289 : (MACRO)             	st4 RL10,'O',sp,(-56+166); ASGNU4
     123/     29C :                     ;   for (idx=0; idx < dec_digits; idx++)
     124/     29C : (MACRO)             	ld2z R11
     125/     2A0 : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     126/     2AD : C0 03 04            	lbr L23
     127/     2B0 :                     L20:
     128/     2B0 :                     ;      mult *= 10 ;
     129/     2B0 : (MACRO)             	ldI4 RL8,10 ;loading a long unsigned constant
     130/     2BC : (MACRO)             	ld4 RL10,'O',sp,(-56+166);reg:  INDIRU4(addr)
     131/     2CC : (MACRO)             	Ccall _mulu4
     132/     2CF : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     133/     2D7 : (MACRO)             	st4 RL10,'O',sp,(-56+166); ASGNU4
     134/     2EA :                     L21:
     135/     2EA :                     ;   for (idx=0; idx < dec_digits; idx++)
     136/     2EA : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     137/     2F6 : (MACRO)             	incm R11,1
     138/     2F7 : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     139/     304 :                     L23:
     140/     304 : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     141/     310 : (MACRO)             	ld2 R10,'O',sp,(8+166); reg:INDIRU2(addr)
     142/     31C : (MACRO)             	jcU2 r11,r10,lbnf,L20; LT=lbnf i.e. subtract B from A and jump if borrow 
     143/     329 :                     ;   printf("mult=%ld\n", mult) ;
     144/     329 : (MACRO)             	ldaD R12,L24; reg:acon
     145/     32F : (MACRO)             	ld4 RL10,'O',sp,(-56+166);reg:  INDIRU4(addr)
     146/     33F : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     147/     352 : (MACRO)             	Ccall _printf
     148/     355 :                     ;   wholeNum = (unsigned long) flt*mult ;
     149/     355 : (MACRO)             	ld4 RL10,'D',(L28),0;INDIRF4(addr)
     150/     363 : (MACRO)             	jcF4 RL0,RL10,lbnf,L26;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
     151/     3A8 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     152/     3B0 : (MACRO)             	cpy4 RL10,RL10; LOADU4(reg)
     153/     3B8 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     154/     3BB : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     155/     3BE : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     156/     3C6 : (MACRO)             	ldI4 RL8,0x80000000 ;loading a long unsigned constant
     157/     3D2 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     158/     3E8 : (MACRO)             	st4 RL10,'O',sp,(-72+166); ASGNU4
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 4 - 3/28/2013 8:52:10


     159/     3FB : C0 04 24            	lbr L27
     160/     3FE :                     L26:
     161/     3FE : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     162/     406 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     163/     409 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     164/     411 : (MACRO)             	st4 RL10,'O',sp,(-72+166); ASGNU4
     165/     424 :                     L27:
     166/     424 : (MACRO)             	ld4 RL8,'O',sp,(-72+166);reg:  INDIRU4(addr)
     167/     434 : (MACRO)             	ld4 RL10,'O',sp,(-56+166);reg:  INDIRU4(addr)
     168/     444 : (MACRO)             	Ccall _mulu4
     169/     447 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     170/     44F : (MACRO)             	st4 RL10,'O',sp,(-8+166); ASGNU4
     171/     462 :                     ;   fltdec=flt-wholeNum;
     172/     462 : (MACRO)             	ld4 RL10,'O',sp,(-8+166);reg:  INDIRU4(addr)
     173/     472 : (MACRO)             	st4 RL10,'O',sp,(-84+166); ASGNU4
     174/     485 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     175/     48D : (MACRO)             	st4 RL8,'O',sp,(-76+166); ASGNF4(addr,reg)
     176/     4A0 : (MACRO)             	ld4 RL8,'D',(L29),0;INDIRF4(addr)
     177/     4AE : (MACRO)             	st4 RL8,'O',sp,(-80+166); ASGNF4(addr,reg)
     178/     4C1 : (MACRO)             	cpy4 RL8,RL10
     179/     4C9 : (MACRO)             	shrU4I RL8,1
     180/     4D5 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     181/     4D8 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     182/     4E0 : (MACRO)             	ld4 RL8,'O',sp,(-80+166);INDIRF4(addr)
     183/     4F0 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     184/     4F3 : (MACRO)             	st4 RL8,'O',sp,(-88+166); ASGNF4(addr,reg)
     185/     506 : (MACRO)             	ld4 RL10,'O',sp,(-84+166);reg:  INDIRU4(addr)
     186/     516 : (MACRO)             	alu4I RL10,RL10,1,ani,ani
     187/     526 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     188/     52E : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     189/     531 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     190/     539 : (MACRO)             	ld4 RL8,'O',sp,(-88+166);INDIRF4(addr)
     191/     549 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     192/     54C : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     193/     554 : (MACRO)             	ld4 RL8,'O',sp,(-76+166);INDIRF4(addr)
     194/     564 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     195/     567 : (MACRO)             	st4 RL8,'O',sp,(-64+166); ASGNF4(addr,reg)
     196/     57A :                     ;   decimalNum = (unsigned long) ((flt - wholeNum) * mult);
     197/     57A : (MACRO)             	ld4 RL10,'D',(L29),0;INDIRF4(addr)
     198/     588 : (MACRO)             	st4 RL10,'O',sp,(-96+166); ASGNF4(addr,reg)
     199/     59B : (MACRO)             	ld4 RL8,'O',sp,(-8+166);reg:  INDIRU4(addr)
     200/     5AB : (MACRO)             	st4 RL8,'O',sp,(-104+166); ASGNU4
     201/     5BE : (MACRO)             	ldaD R11,1; reg:acon
     202/     5C4 : (MACRO)             	st2 R11,'O',sp,(-98+166); ASGNU2(addr,reg)*
     203/     5D1 : (MACRO)             	ld4 RL10,'O',sp,(-56+166);reg:  INDIRU4(addr)
     204/     5E1 : (MACRO)             	st4 RL10,'O',sp,(-108+166); ASGNU4
     205/     5F4 : (MACRO)             	cpy4 RL8,RL0; LOADU4(reg)
     206/     5FC : (MACRO)             	st4 RL8,'O',sp,(-112+166); ASGNF4(addr,reg)
     207/     60F : (MACRO)             	ld4 RL10,'O',sp,(-96+166);INDIRF4(addr)
     208/     61F : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     209/     627 : (MACRO)             	st4 RL8,'O',sp,(-116+166); ASGNF4(addr,reg)
     210/     63A : (MACRO)             	ld4 RL10,'O',sp,(-104+166);reg:  INDIRU4(addr)
     211/     64A : (MACRO)             	shrU4I RL10,1
     212/     656 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     213/     65E : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     214/     661 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     215/     669 : (MACRO)             	ld4 RL8,'O',sp,(-116+166);INDIRF4(addr)
     216/     679 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     217/     67C : (MACRO)             	st4 RL8,'O',sp,(-120+166); ASGNF4(addr,reg)
     218/     68F : (MACRO)             	ld2 R11,'O',sp,(-98+166); reg:INDIRU2(addr)
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 5 - 3/28/2013 8:52:10


     219/     69B : (MACRO)             	ld4 RL8,'O',sp,(-104+166);reg:  INDIRU4(addr)
     220/     6AB : (MACRO)             	alu4 RL10,RL8,R11,and,and
     221/     6C1 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     222/     6C9 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     223/     6CC : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     224/     6D4 : (MACRO)             	ld4 RL8,'O',sp,(-120+166);INDIRF4(addr)
     225/     6E4 : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     226/     6E7 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     227/     6EF : (MACRO)             	ld4 RL8,'O',sp,(-112+166);INDIRF4(addr)
     228/     6FF : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     229/     702 : (MACRO)             	st4 RL8,'O',sp,(-124+166); ASGNF4(addr,reg)
     230/     715 : (MACRO)             	ld4 RL10,'O',sp,(-96+166);INDIRF4(addr)
     231/     725 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     232/     72D : (MACRO)             	st4 RL8,'O',sp,(-128+166); ASGNF4(addr,reg)
     233/     740 : (MACRO)             	ld4 RL10,'O',sp,(-108+166);reg:  INDIRU4(addr)
     234/     750 : (MACRO)             	shrU4I RL10,1
     235/     75C : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     236/     764 : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     237/     767 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     238/     76F : (MACRO)             	ld4 RL8,'O',sp,(-128+166);INDIRF4(addr)
     239/     77F : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     240/     782 : (MACRO)             	st4 RL8,'O',sp,(-132+166); ASGNF4(addr,reg)
     241/     795 : (MACRO)             	ld2 R11,'O',sp,(-98+166); reg:INDIRU2(addr)
     242/     7A1 : (MACRO)             	ld4 RL8,'O',sp,(-108+166);reg:  INDIRU4(addr)
     243/     7B1 : (MACRO)             	alu4 RL10,RL8,R11,and,and
     244/     7C7 : (MACRO)             	cpy4 RL8,RL10; LOADI4*
     245/     7CF : (MACRO)             	ccall cvif4; CVIF4(reg) convert long to float
     246/     7D2 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     247/     7DA : (MACRO)             	ld4 RL8,'O',sp,(-132+166);INDIRF4(addr)
     248/     7EA : (MACRO)             	Ccall fp_add ;ADDF4(reg,reg)
     249/     7ED : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     250/     7F5 : (MACRO)             	ld4 RL8,'O',sp,(-124+166);INDIRF4(addr)
     251/     805 : (MACRO)             	Ccall fp_mul ;MULF4(reg,reg)
     252/     808 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     253/     810 : (MACRO)             	st4 RL10,'O',sp,(-140+166); ASGNF4(addr,reg)
     254/     823 : (MACRO)             	ld4 RL8,'D',(L28),0;INDIRF4(addr)
     255/     831 : (MACRO)             	st4 RL8,'O',sp,(-136+166); ASGNF4(addr,reg)
     256/     844 : (MACRO)             	jcF4 RL10,RL8,lbnf,L31;LTF4(reg,reg)LT=lbnf i.e. subtract B from A and jump if borrow
     257/     889 : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     258/     891 : (MACRO)             	ld4 RL10,'O',sp,(-136+166);INDIRF4(addr)
     259/     8A1 : (MACRO)             	cpy4 RL10,RL10; LOADU4(reg)
     260/     8A9 : (MACRO)             	Ccall fp_sub ;SUBF4(reg,reg)
     261/     8AC : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     262/     8AF : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     263/     8B7 : (MACRO)             	ldI4 RL8,0x80000000 ;loading a long unsigned constant
     264/     8C3 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     265/     8D9 : (MACRO)             	st4 RL10,'O',sp,(-92+166); ASGNU4
     266/     8EC : C0 09 25            	lbr L32
     267/     8EF :                     L31:
     268/     8EF : (MACRO)             	ld4 RL10,'O',sp,(-140+166);INDIRF4(addr)
     269/     8FF : (MACRO)             	cpy4 RL8,RL10; LOADU4(reg)
     270/     907 : (MACRO)             	ccall cvfi4; CVFI4(reg) convert float to long
     271/     90A : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     272/     912 : (MACRO)             	st4 RL10,'O',sp,(-92+166); ASGNU4
     273/     925 :                     L32:
     274/     925 : (MACRO)             	ld4 RL10,'O',sp,(-92+166);reg:  INDIRU4(addr)
     275/     935 : (MACRO)             	st4 RL10,'O',sp,(-52+166); ASGNU4
     276/     948 :                     ;printf("whole=%ld,fltdec=%lx, decimal=%ld\n",wholeNum,fltdec, decimalNum);
     277/     948 : (MACRO)             	ldaD R12,L33; reg:acon
     278/     94E : (MACRO)             	ld4 RL10,'O',sp,(-8+166);reg:  INDIRU4(addr)
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 6 - 3/28/2013 8:52:10


     279/     95E : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     280/     971 : (MACRO)             	ld4 RL10,'O',sp,(-64+166);INDIRF4(addr)
     281/     981 : (MACRO)             	st4 RL10,'O',sp,(8); arg+f**
     282/     994 : (MACRO)             	ld4 RL10,'O',sp,(-52+166);reg:  INDIRU4(addr)
     283/     9A4 : (MACRO)             	st4 RL10,'O',sp,(12); arg+f**
     284/     9B7 : (MACRO)             	Ccall _printf
     285/     9BA :                     ;   idx = 0 ;
     286/     9BA : (MACRO)             	ld2z R11
     287/     9BE : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     288/     9CB : C0 0A B9            	lbr L35
     289/     9CE :                     L34:
     290/     9CE :                     ;   while (wholeNum != 0) {
     291/     9CE :                     ;      tbfr[idx++] = '0' + (wholeNum % 10) ;
     292/     9CE : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     293/     9DA : (MACRO)             	st2 R11,'O',sp,(-142+166); ASGNU2(addr,reg)*
     294/     9E7 : (MACRO)             	cpy2 R10,R11
     295/     9EB : (MACRO)             	incm R10,1
     296/     9EC : (MACRO)             	st2 R10,'O',sp,(-4+166); ASGNU2(addr,reg)*
     297/     9F9 : (MACRO)             	ld4 RL8,'O',sp,(-8+166);reg:  INDIRU4(addr)
     298/     A09 : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     299/     A15 : (MACRO)             	Ccall _modu4
     300/     A18 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     301/     A20 : (MACRO)             	ldA2 R9,'O',sp,(-48+166); reg:addr
     302/     A28 : (MACRO)             	ld2 R8,'O',sp,(-142+166); reg:INDIRU2(addr)
     303/     A34 : (MACRO)             	alu2 R9,R8,R9,add,adc
     304/     A40 : (MACRO)             	st2 R9,'O',sp,(-144+166); ASGNP2
     305/     A4D : (MACRO)             	ldI4 RL8,48 ;loading a long unsigned constant
     306/     A59 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     307/     A6F : (MACRO)             	cpy1 R11,RL10;LOADU1(reg)
     308/     A71 : (MACRO)             	ld2 R10,'O',sp,(-144+166);reg:  INDIRP2(addr)
     309/     A7D : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
     310/     A7F :                     ;      wholeNum /= 10 ;
     311/     A7F : (MACRO)             	ld4 RL8,'O',sp,(-8+166);reg:  INDIRU4(addr)
     312/     A8F : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     313/     A9B : (MACRO)             	Ccall _divu4
     314/     A9E : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     315/     AA6 : (MACRO)             	st4 RL10,'O',sp,(-8+166); ASGNU4
     316/     AB9 :                     ;   }
     317/     AB9 :                     L35:
     318/     AB9 :                     ;   while (wholeNum != 0) {
     319/     AB9 : (MACRO)             	ld4 RL10,'O',sp,(-8+166);reg:  INDIRU4(addr)
     320/     AC9 : (MACRO)             	ldI4 RL8,0 ;loading a long unsigned constant
     321/     AD5 : (MACRO)             	jneU4 rL10,rL8,L34; NE
     322/     AFC :                     ;   if (idx == 0) {
     323/     AFC : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     324/     B08 : (MACRO)             	jnzU2 r11,L40; NE 0
     325/     B10 :                     ;      *output++ = '0' ;
     326/     B10 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     327/     B1C : (MACRO)             	cpy2 R10,R11
     328/     B20 : (MACRO)             	incm R10,1
     329/     B21 : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     330/     B2E : (MACRO)             	ldaD R10,48; reg:acon
     331/     B34 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     332/     B36 :                     ;   } else {
     333/     B36 : C0 0B AA            	lbr L38
     334/     B39 :                     L39:
     335/     B39 :                     ;      while (idx > 0) {
     336/     B39 :                     ;         *output++ = tbfr[idx-1] ;  //lint !e771
     337/     B39 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     338/     B45 : (MACRO)             	cpy2 R10,R11
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 7 - 3/28/2013 8:52:10


     339/     B49 : (MACRO)             	incm R10,1
     340/     B4A : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     341/     B57 : (MACRO)             	ld2 R10,'O',sp,(-4+166); reg:INDIRU2(addr)
     342/     B63 : (MACRO)             	decm R10,1
     343/     B64 : (MACRO)             	ldA2 R9,'O',sp,(-48+166); reg:addr
     344/     B6C : (MACRO)             	alu2 R10,R10,R9,add,adc
     345/     B78 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     346/     B7A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     347/     B7C :                     ;         idx-- ;
     348/     B7C : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     349/     B88 : (MACRO)             	decm R11,1
     350/     B89 : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     351/     B96 :                     ;      }
     352/     B96 :                     L40:
     353/     B96 :                     ;      while (idx > 0) {
     354/     B96 : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     355/     BA2 : (MACRO)             	jnzU2 r11,L39; NE 0
     356/     BAA :                     ;   }
     357/     BAA :                     L38:
     358/     BAA :                     ;   if (dec_digits > 0) {
     359/     BAA : (MACRO)             	ld2 R11,'O',sp,(8+166); reg:INDIRU2(addr)
     360/     BB6 : (MACRO)             	jeqU2I r11,0,L42;EQU2(reg,con)
     361/     BC2 :                     ;      *output++ = '.' ;
     362/     BC2 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     363/     BCE : (MACRO)             	cpy2 R10,R11
     364/     BD2 : (MACRO)             	incm R10,1
     365/     BD3 : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     366/     BE0 : (MACRO)             	ldaD R10,46; reg:acon
     367/     BE6 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     368/     BE8 :                     ;      idx = 0 ;
     369/     BE8 : (MACRO)             	ld2z R11
     370/     BEC : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     371/     BF9 : C0 0C E7            	lbr L45
     372/     BFC :                     L44:
     373/     BFC :                     ;      while (decimalNum != 0) {
     374/     BFC :                     ;         tbfr[idx++] = '0' + (decimalNum % 10) ;
     375/     BFC : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     376/     C08 : (MACRO)             	st2 R11,'O',sp,(-142+166); ASGNU2(addr,reg)*
     377/     C15 : (MACRO)             	cpy2 R10,R11
     378/     C19 : (MACRO)             	incm R10,1
     379/     C1A : (MACRO)             	st2 R10,'O',sp,(-4+166); ASGNU2(addr,reg)*
     380/     C27 : (MACRO)             	ld4 RL8,'O',sp,(-52+166);reg:  INDIRU4(addr)
     381/     C37 : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     382/     C43 : (MACRO)             	Ccall _modu4
     383/     C46 : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     384/     C4E : (MACRO)             	ldA2 R9,'O',sp,(-48+166); reg:addr
     385/     C56 : (MACRO)             	ld2 R8,'O',sp,(-142+166); reg:INDIRU2(addr)
     386/     C62 : (MACRO)             	alu2 R9,R8,R9,add,adc
     387/     C6E : (MACRO)             	st2 R9,'O',sp,(-144+166); ASGNP2
     388/     C7B : (MACRO)             	ldI4 RL8,48 ;loading a long unsigned constant
     389/     C87 : (MACRO)             	alu4 RL10,RL10,RL8,add,adc
     390/     C9D : (MACRO)             	cpy1 R11,RL10;LOADU1(reg)
     391/     C9F : (MACRO)             	ld2 R10,'O',sp,(-144+166);reg:  INDIRP2(addr)
     392/     CAB : (MACRO)             	str1 R11,R10; ASGNU1(indaddr,reg)
     393/     CAD :                     ;         decimalNum /= 10 ;
     394/     CAD : (MACRO)             	ld4 RL8,'O',sp,(-52+166);reg:  INDIRU4(addr)
     395/     CBD : (MACRO)             	ldI4 RL10,10 ;loading a long unsigned constant
     396/     CC9 : (MACRO)             	Ccall _divu4
     397/     CCC : (MACRO)             	cpy4 RL10,RL8; LOADU4(reg)
     398/     CD4 : (MACRO)             	st4 RL10,'O',sp,(-52+166); ASGNU4
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 8 - 3/28/2013 8:52:10


     399/     CE7 :                     ;      }
     400/     CE7 :                     L45:
     401/     CE7 :                     ;      while (decimalNum != 0) {
     402/     CE7 : (MACRO)             	ld4 RL10,'O',sp,(-52+166);reg:  INDIRU4(addr)
     403/     CF7 : (MACRO)             	ldI4 RL8,0 ;loading a long unsigned constant
     404/     D03 : (MACRO)             	jneU4 rL10,rL8,L44; NE
     405/     D2A : C0 0D 67            	lbr L48
     406/     D2D :                     L47:
     407/     D2D :                     ;      while (idx < dec_digits) {
     408/     D2D :                     ;         tbfr[idx++] = '0' ;
     409/     D2D : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     410/     D39 : (MACRO)             	cpy2 R10,R11
     411/     D3D : (MACRO)             	incm R10,1
     412/     D3E : (MACRO)             	st2 R10,'O',sp,(-4+166); ASGNU2(addr,reg)*
     413/     D4B : (MACRO)             	ldA2 R10,'O',sp,(-48+166); reg:addr
     414/     D53 : (MACRO)             	alu2 R11,R11,R10,add,adc
     415/     D5F : (MACRO)             	ldaD R10,48; reg:acon
     416/     D65 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     417/     D67 :                     ;      }
     418/     D67 :                     L48:
     419/     D67 :                     ;      while (idx < dec_digits) {
     420/     D67 : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     421/     D73 : (MACRO)             	ld2 R10,'O',sp,(8+166); reg:INDIRU2(addr)
     422/     D7F : (MACRO)             	jcU2 r11,r10,lbnf,L47; LT=lbnf i.e. subtract B from A and jump if borrow 
     423/     D8C :                     ;      if (idx == 0) {
     424/     D8C : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     425/     D98 : (MACRO)             	jnzU2 r11,L53; NE 0
     426/     DA0 :                     ;         *output++ = '0' ;
     427/     DA0 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     428/     DAC : (MACRO)             	cpy2 R10,R11
     429/     DB0 : (MACRO)             	incm R10,1
     430/     DB1 : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     431/     DBE : (MACRO)             	ldaD R10,48; reg:acon
     432/     DC4 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     433/     DC6 :                     ;      } else {
     434/     DC6 : C0 0E 3A            	lbr L51
     435/     DC9 :                     L52:
     436/     DC9 :                     ;         while (idx > 0) {
     437/     DC9 :                     ;            *output++ = tbfr[idx-1] ;
     438/     DC9 : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     439/     DD5 : (MACRO)             	cpy2 R10,R11
     440/     DD9 : (MACRO)             	incm R10,1
     441/     DDA : (MACRO)             	st2 R10,'O',sp,(-58+166); ASGNP2
     442/     DE7 : (MACRO)             	ld2 R10,'O',sp,(-4+166); reg:INDIRU2(addr)
     443/     DF3 : (MACRO)             	decm R10,1
     444/     DF4 : (MACRO)             	ldA2 R9,'O',sp,(-48+166); reg:addr
     445/     DFC : (MACRO)             	alu2 R10,R10,R9,add,adc
     446/     E08 : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
     447/     E0A : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     448/     E0C :                     ;            idx-- ;
     449/     E0C : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     450/     E18 : (MACRO)             	decm R11,1
     451/     E19 : (MACRO)             	st2 R11,'O',sp,(-4+166); ASGNU2(addr,reg)*
     452/     E26 :                     ;         }
     453/     E26 :                     L53:
     454/     E26 :                     ;         while (idx > 0) {
     455/     E26 : (MACRO)             	ld2 R11,'O',sp,(-4+166); reg:INDIRU2(addr)
     456/     E32 : (MACRO)             	jnzU2 r11,L52; NE 0
     457/     E3A :                     ;      }
     458/     E3A :                     L51:
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 9 - 3/28/2013 8:52:10


     459/     E3A :                     ;   }
     460/     E3A :                     L42:
     461/     E3A :                     ;   *output = 0 ;
     462/     E3A : (MACRO)             	ld2 R11,'O',sp,(-58+166);reg:  INDIRP2(addr)
     463/     E46 : (MACRO)             	ldaD R10,0; reg:acon
     464/     E4C : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     465/     E4E :                     ;   output = (outbfr == 0) ? local_bfr : outbfr ;
     466/     E4E : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
     467/     E52 : (MACRO)             	jnzU2 r11,L56; NE 0
     468/     E5A : (MACRO)             	ldaD R11,L8; reg:acon
     469/     E60 : (MACRO)             	st2 R11,'O',sp,(-142+166); ASGNP2
     470/     E6D : C0 0E 7D            	lbr L57
     471/     E70 :                     L56:
     472/     E70 : (MACRO)             	st2 R7,'O',sp,(-142+166); ASGNP2
     473/     E7D :                     L57:
     474/     E7D : (MACRO)             	ld2 R11,'O',sp,(-142+166);reg:  INDIRP2(addr)
     475/     E89 : (MACRO)             	st2 R11,'O',sp,(-58+166); ASGNP2
     476/     E96 :                     ;   return my_strlen(output) ;
     477/     E96 : (MACRO)             	ld2 R12,'O',sp,(-58+166);reg:  INDIRP2(addr)
     478/     EA2 : (MACRO)             	Ccall _my_strlen;CALLU2(ar)*
     479/     EA5 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     480/     EA9 : (MACRO)             	cpy2 R15,R11 ;LOADU2(reg)*
     481/     EAD :                     L7:
     482/     EAD : (MACRO)             	release 16; release room for outgoing arguments
     483/     EB5 : (MACRO)             	popr r7
     484/     EB9 : (MACRO)             	popr r1
     485/     EBD : (MACRO)             	popr r0
     486/     EC1 : (MACRO)             	release 142; release room for local variables 
     487/     EC9 : (MACRO)             	Cretn
     488/     ECA :                     
     489/     ECA :                     	align 4
     490/     ECC :                     _pi:
     491/     ECC : 40 49 0F D0         	dd 0x40490fd0
     492/     ED0 :                     _gbuffer:
     493/     ED0 : 00                  	db 0
     494/     ED1 : 00                  	db 0
     495/     ED2 : 00                  	db 0
     496/     ED3 : 00                  	db 0
     497/     ED4 : 00                  	db 0
     498/     ED5 : 00                  	db 0
     499/     ED6 : 00                  	db 0
     500/     ED7 : 00                  	db 0
     501/     ED8 : 00                  	db 0
     502/     ED9 : 00                  	db 0
     503/     EDA : 00                  	db 0
     504/     EDB : 00                  	db 0
     505/     EDC : 00                  	db 0
     506/     EDD : 00                  	db 0
     507/     EDE : 00                  	db 0
     508/     EDF : 00                  	db 0
     509/     EE0 : 00 00 00 00 00 00   	db 112 dup(0) ;zerofill
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 10 - 3/28/2013 8:52:10


                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 
     510/     F50 :                     _len:
     511/     F50 : 00 42               	dw 66
     512/     F52 :                     _main:
     513/     F52 : (MACRO)             	reserve 10
     514/     F5C :                     ;{
     515/     F5C :                     ;	printstr("hello World!\n");
     516/     F5C : (MACRO)             	ldaD R12,L59; reg:acon
     517/     F62 : (MACRO)             	Ccall _printstr
     518/     F65 :                     ;	len=ftoa(gbuffer,pi,3);
     519/     F65 : (MACRO)             	ldaD R12,_gbuffer; reg:acon
     520/     F6B : (MACRO)             	ld4 RL10,'D',(_pi),0;INDIRF4(addr)
     521/     F79 : (MACRO)             	st4 RL10,'O',sp,(4); arg+f**
     522/     F8C : (MACRO)             	ldaD R11,3; reg:acon
     523/     F92 : (MACRO)             	st2 r11,'O',sp,(8); arg+f**
     524/     F9F : (MACRO)             	Ccall _ftoa;CALLU2(ar)*
     525/     FA2 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     526/     FA6 : (MACRO)             	st2 R11,'D',(_len),0
     527/     FB1 :                     ;	printf("ftoa returns %d, gbuffer contains %s\n",len,gbuffer);
     528/     FB1 : (MACRO)             	ldaD R12,L60; reg:acon
     529/     FB7 : (MACRO)             	ld2 R13,'D',(_len),0 ;reg:INDIRI2(addr)
     530/     FC1 : (MACRO)             	ldaD R11,_gbuffer; reg:acon
     531/     FC7 : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     532/     FD4 : (MACRO)             	Ccall _printf
     533/     FD7 :                     ;}
     534/     FD7 :                     L58:
     535/     FD7 : (MACRO)             	release 10
     536/     FDF : (MACRO)             	Cretn
     537/     FE0 :                     
     538/     FE0 :                     _strcpy:
     539/     FE0 : (MACRO)             	reserve 2
     540/     FE2 :                     ;{
     541/     FE2 :                     ;	char *save = to;
     542/     FE2 : (MACRO)             	st2 R12,'O',sp,(-4+4); ASGNP2
     543/     FEF :                     ;	for (; (*to = *from) != 0; ++from, ++to);
     544/     FEF : C0 0F F4            	lbr L65
     545/     FF2 :                     L62:
     546/     FF2 :                     L63:
     547/     FF2 : (MACRO)             	incm R13,1
     548/     FF3 : (MACRO)             	incm R12,1
     549/     FF4 :                     L65:
     550/     FF4 : (MACRO)             	ldn1 R11,R13;reg:  INDIRU1(indaddr)
     551/     FF6 : (MACRO)             	str1 R11,R12; ASGNU1(indaddr,reg)
     552/     FF8 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     553/     FFB : (MACRO)             	jnzU2 r11,L62; NE 0
     554/    1003 :                     ;	return(save);
     555/    1003 : (MACRO)             	ld2 R15,'O',sp,(-4+4);reg:  INDIRP2(addr)
     556/    100F :                     L61:
     557/    100F : (MACRO)             	release 2
     558/    1011 : (MACRO)             	Cretn
     559/    1012 :                     
     560/    1012 :                     _printstr:
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 11 - 3/28/2013 8:52:10


     561/    1012 : (MACRO)             	reserve 0; save room for local variables
     562/    1012 : (MACRO)             	pushr r7
     563/    1017 : (MACRO)             	reserve 4; save room for outgoing arguments
     564/    101B : (MACRO)             	cpy2 r7,r12; function(2055) 1
     565/    101F :                     ;void printstr(char *ptr){
     566/    101F : C0 10 41            	lbr L68
     567/    1022 :                     L67:
     568/    1022 :                     ;    while(*ptr) out(5,*ptr++);
     569/    1022 : (MACRO)             	ldaD R12,5; reg:acon
     570/    1028 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     571/    102C : (MACRO)             	cpy2 R7,R11
     572/    1030 : (MACRO)             	incm R7,1
     573/    1031 : (MACRO)             	ld1 R13,'O',R11,0
     574/    103B : (MACRO)             	zExt R13 ;CVUI2: widen unsigned char to signed int (zero extend)
     575/    103E : (MACRO)             	Ccall _out
     576/    1041 :                     L68:
     577/    1041 : (MACRO)             	ld1 R11,'O',R7,0
     578/    104B : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     579/    104E : (MACRO)             	jnzU2 r11,L67; NE 0
     580/    1056 :                     ;}
     581/    1056 :                     L66:
     582/    1056 : (MACRO)             	release 4; release room for outgoing arguments
     583/    105A : (MACRO)             	popr r7
     584/    105E : (MACRO)             	release 0; release room for local variables 
     585/    105E : (MACRO)             	Cretn
     586/    105F :                     
     587/    105F :                     _itoa:
     588/    105F : (MACRO)             	reserve 4; save room for local variables
     589/    1063 : (MACRO)             	pushr r0
     590/    1068 : (MACRO)             	pushr r1
     591/    106D : (MACRO)             	pushr r7
     592/    1072 : (MACRO)             	reserve 4; save room for outgoing arguments
     593/    1076 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     594/    1083 : (MACRO)             	st2 r13,'O',sp,(18); flag1 
     595/    1090 :                     ;char * itoa(int s, char *buffer){ //convert an integer to printable ascii in a buffer supplied by the caller
     596/    1090 :                     ;	unsigned int flag=0;
     597/    1090 : (MACRO)             	ld2z R11
     598/    1094 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     599/    10A1 :                     ;	char * bptr; bptr=buffer;
     600/    10A1 : (MACRO)             	ld2 R11,'O',sp,(2+16);reg:  INDIRP2(addr)
     601/    10AD : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     602/    10BA :                     ;	if (s<0){
     603/    10BA : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     604/    10C6 : (MACRO)             	jcI2I r11,0,lbdf,L71; GE is flipped test from LT
     605/    10D7 :                     ;		*bptr='-';bptr++;
     606/    10D7 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     607/    10E3 : (MACRO)             	ldaD R10,45; reg:acon
     608/    10E9 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     609/    10EB : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     610/    10F7 : (MACRO)             	incm R11,1
     611/    10F8 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     612/    1105 :                     ;		n=-s;
     613/    1105 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
     614/    1111 : (MACRO)             	negI2 R11,R11 ;was alu2I R11,R11,0,sdi,sdbi
     615/    111A : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     616/    111E :                     ;	} else{
     617/    111E : C0 11 31            	lbr L72
     618/    1121 :                     L71:
     619/    1121 :                     ;		n=s;
     620/    1121 : (MACRO)             	ld2 R11,'O',sp,(0+16) ;reg:INDIRI2(addr)
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 12 - 3/28/2013 8:52:10


     621/    112D : (MACRO)             	cpy2 R1,R11 ;LOADU2(reg)*
     622/    1131 :                     ;	}
     623/    1131 :                     L72:
     624/    1131 :                     ;	k=10000;
     625/    1131 : (MACRO)             	ldaD R7,10000; reg:acon
     626/    1137 : C0 11 DB            	lbr L74
     627/    113A :                     L73:
     628/    113A :                     ;	while(k>0){
     629/    113A :                     ;		for(r=0;k<=n;r++,n-=k); // was r=n/k
     630/    113A : (MACRO)             	ld2z R0
     631/    113E : C0 11 4E            	lbr L79
     632/    1141 :                     L76:
     633/    1141 :                     L77:
     634/    1141 : (MACRO)             	incm R0,1
     635/    1142 : (MACRO)             	alu2 R1,R1,R7,sm,smb
     636/    114E :                     L79:
     637/    114E : (MACRO)             	jcU2 r1,r7,lbdf,L76 ;LE is flipped test & operands
     638/    115B :                     ;		if (flag || r>0||k==1){
     639/    115B : (MACRO)             	ld2 R11,'O',sp,(-4+16); reg:INDIRU2(addr)
     640/    1167 : (MACRO)             	jnzU2 r11,L83; NE 0
     641/    116F : (MACRO)             	jnzU2 r0,L83; NE 0
     642/    1177 : (MACRO)             	jneU2I r7,1,L80; NE
     643/    1183 :                     L83:
     644/    1183 :                     ;			*bptr=('0'+r);bptr++;
     645/    1183 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     646/    118F : (MACRO)             	ldA2 R10,'O',R0,(48); reg:addr
     647/    1197 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     648/    1199 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     649/    11A5 : (MACRO)             	incm R11,1
     650/    11A6 : (MACRO)             	st2 R11,'O',sp,(-6+16); ASGNP2
     651/    11B3 :                     ;			flag='y';
     652/    11B3 : (MACRO)             	ldaD R11,121; reg:acon
     653/    11B9 : (MACRO)             	st2 R11,'O',sp,(-4+16); ASGNU2(addr,reg)*
     654/    11C6 :                     ;		}
     655/    11C6 :                     L80:
     656/    11C6 :                     ;		k=k/10;
     657/    11C6 : (MACRO)             	cpy2 R12,R7 ;LOADU2(reg)*
     658/    11CA : (MACRO)             	ldaD R13,10; reg:acon
     659/    11D0 : (MACRO)             	Ccall _divu2
     660/    11D3 : (MACRO)             	cpy2 R11,R15 ;LOADU2(reg)*
     661/    11D7 : (MACRO)             	cpy2 R7,R11 ;LOADU2(reg)*
     662/    11DB :                     ;	}
     663/    11DB :                     L74:
     664/    11DB :                     ;	while(k>0){
     665/    11DB : (MACRO)             	jnzU2 r7,L73; NE 0
     666/    11E3 :                     ;	*bptr='\0';
     667/    11E3 : (MACRO)             	ld2 R11,'O',sp,(-6+16);reg:  INDIRP2(addr)
     668/    11EF : (MACRO)             	ldaD R10,0; reg:acon
     669/    11F5 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     670/    11F7 :                     ;	return buffer;
     671/    11F7 : (MACRO)             	ld2 R15,'O',sp,(2+16);reg:  INDIRP2(addr)
     672/    1203 :                     L70:
     673/    1203 : (MACRO)             	release 4; release room for outgoing arguments
     674/    1207 : (MACRO)             	popr r7
     675/    120B : (MACRO)             	popr r1
     676/    120F : (MACRO)             	popr r0
     677/    1213 : (MACRO)             	release 4; release room for local variables 
     678/    1217 : (MACRO)             	Cretn
     679/    1218 :                     
     680/    1218 :                     _ltoa:
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 13 - 3/28/2013 8:52:10


     681/    1218 : (MACRO)             	reserve 0; save room for local variables
     682/    1218 : (MACRO)             	pushr r0
     683/    121D : (MACRO)             	pushr r1
     684/    1222 : (MACRO)             	pushr r7
     685/    1227 : (MACRO)             	reserve 6; save room for outgoing arguments
     686/    122D : (MACRO)             	cpy4 RL0,RL12; halfbaked
     687/    1235 :                     ;char * ltoa(long s, char *buffer){ //convert a long integer to printable ascii in a buffer supplied by the caller
     688/    1235 :                     ;	char* bptr=buffer;
     689/    1235 : (MACRO)             	ld2 R7,'O',sp,(4+14);reg:  INDIRP2(addr)
     690/    1241 :                     ;	if (s<0){
     691/    1241 : (MACRO)             	ldI4 RL10,0 ;loading a long integer constant
     692/    124D : (MACRO)             	jcI4 RL0,RL10,lbdf,L85; GE is flipped test from LT
     693/    1269 :                     ;		*bptr++='-';
     694/    1269 : (MACRO)             	cpy2 R11,R7 ;LOADP2(reg)
     695/    126D : (MACRO)             	cpy2 R7,R11
     696/    1271 : (MACRO)             	incm R7,1
     697/    1272 : (MACRO)             	ldaD R10,45; reg:acon
     698/    1278 : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
     699/    127A :                     ;		s=-s;
     700/    127A : (MACRO)             	negI4 RL0,RL0 ;was alu4I RL0,RL0,0,sdi,sdbi
     701/    129A :                     ;	}
     702/    129A :                     L85:
     703/    129A :                     ;	strcpy(bptr,dubdabx(s,bptr)); //uses assembler double-dabble routine
     704/    129A : (MACRO)             	cpy4 Rp1p2,RL0; LOADI4*
     705/    12A2 : (MACRO)             	st2 r7,'O',sp,(4); arg+f**
     706/    12AF : (MACRO)             	Ccall _dubdabx
     707/    12B2 : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     708/    12B6 : (MACRO)             	cpy2 R12,R7 ;LOADP2(reg)
     709/    12BA : (MACRO)             	cpy2 R13,R11 ;LOADP2(reg)
     710/    12BE : (MACRO)             	Ccall _strcpy
     711/    12C1 :                     ;	return buffer;
     712/    12C1 : (MACRO)             	ld2 R15,'O',sp,(4+14);reg:  INDIRP2(addr)
     713/    12CD :                     L84:
     714/    12CD : (MACRO)             	release 6; release room for outgoing arguments
     715/    12D3 : (MACRO)             	popr r7
     716/    12D7 : (MACRO)             	popr r1
     717/    12DB : (MACRO)             	popr r0
     718/    12DF : (MACRO)             	release 0; release room for local variables 
     719/    12DF : (MACRO)             	Cretn
     720/    12E0 :                     
     721/    12E0 :                     _printint:
     722/    12E0 : (MACRO)             	reserve 12
     723/    12EA : (MACRO)             	st2 r12,'O',sp,(14); flag1 
     724/    12F7 :                     ;void printint(int s){ //print an integer
     725/    12F7 :                     ;	itoa(s,buffer);
     726/    12F7 : (MACRO)             	ld2 R12,'O',sp,(0+14) ;reg:INDIRI2(addr)
     727/    1303 : (MACRO)             	ldA2 R13,'O',sp,(-10+14); reg:addr
     728/    130B : (MACRO)             	Ccall _itoa
     729/    130E :                     ;	printstr(buffer);
     730/    130E : (MACRO)             	ldA2 R12,'O',sp,(-10+14); reg:addr
     731/    1316 : (MACRO)             	Ccall _printstr
     732/    1319 :                     ;}
     733/    1319 :                     L87:
     734/    1319 : (MACRO)             	release 12
     735/    1321 : (MACRO)             	Cretn
     736/    1322 :                     
     737/    1322 :                     _printlint:
     738/    1322 : (MACRO)             	reserve 18
     739/    132C : (MACRO)             	st2 r12,'O',sp,(20); flag1 
     740/    1339 : (MACRO)             	st2 r13,'O',sp,(22); flag1 
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 14 - 3/28/2013 8:52:10


     741/    1346 :                     ;void printlint(long s){ //print a long integer
     742/    1346 :                     ;	printstr(ltoa(s,buffer));
     743/    1346 : (MACRO)             	ld4 Rp1p2,'O',sp,(0+20);reg:  INDIRI4(addr)
     744/    1356 : (MACRO)             	ldA2 R11,'O',sp,(-14+20); reg:addr
     745/    135E : (MACRO)             	st2 r11,'O',sp,(4); arg+f**
     746/    136B : (MACRO)             	Ccall _ltoa
     747/    136E : (MACRO)             	cpy2 R11,R15 ;LOADP2(reg)
     748/    1372 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     749/    1376 : (MACRO)             	Ccall _printstr
     750/    1379 :                     ;}
     751/    1379 :                     L88:
     752/    1379 : (MACRO)             	release 18
     753/    1381 : (MACRO)             	Cretn
     754/    1382 :                     
     755/    1382 :                     _putxn:
     756/    1382 : (MACRO)             	reserve 4
     757/    1386 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     758/    1393 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     759/    139F : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     760/    13A9 :                     ;void putxn(unsigned char x){ //print a nibble as ascii hex
     761/    13A9 :                     ;	if (x<10){
     762/    13A9 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     763/    13B3 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     764/    13B6 : (MACRO)             	jcI2I r11,10,lbdf,L90; GE is flipped test from LT
     765/    13C7 :                     ;		putc(x+'0');
     766/    13C7 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     767/    13D1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     768/    13D4 : (MACRO)             	ldA2 R11,'O',R11,(48); reg:addr
     769/    13DC : (MACRO)             	cpy1 R12,R11
     770/    13DE : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     771/    13E1 : (MACRO)             	Ccall _putc
     772/    13E4 :                     ;	} else {
     773/    13E4 : C0 14 0C            	lbr L91
     774/    13E7 :                     L90:
     775/    13E7 :                     ;		putc(x+'A'-10);
     776/    13E7 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     777/    13F1 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     778/    13F4 : (MACRO)             	ldA2 R11,'O',R11,(65); reg:addr
     779/    13FC : (MACRO)             	alu2I R11,R11,10,smi,smbi
     780/    1404 : (MACRO)             	cpy1 R12,R11
     781/    1406 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     782/    1409 : (MACRO)             	Ccall _putc
     783/    140C :                     ;	}
     784/    140C :                     L91:
     785/    140C :                     ;}
     786/    140C :                     L89:
     787/    140C : (MACRO)             	release 4
     788/    1410 : (MACRO)             	Cretn
     789/    1411 :                     
     790/    1411 :                     _putx:
     791/    1411 : (MACRO)             	reserve 4
     792/    1415 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
     793/    1422 : (MACRO)             	ld2 R11,'O',sp,(0+6) ;reg:INDIRI2(addr)
     794/    142E : (MACRO)             	st1 R11,'O',sp,(0+6); ASGNU1
     795/    1438 :                     ;void putx(unsigned char x){ //print a unsigned char as ascii hex
     796/    1438 :                     ;	putxn(x>>4);
     797/    1438 : (MACRO)             	ld1 R11,'O',sp,(0+6)
     798/    1442 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     799/    1445 : (MACRO)             	shrI2I R11,4
     800/    1465 : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 15 - 3/28/2013 8:52:10


     801/    1467 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     802/    146A : (MACRO)             	Ccall _putxn
     803/    146D :                     ;	putxn(x & 0x0F);
     804/    146D : (MACRO)             	ld1 R11,'O',sp,(0+6)
     805/    1477 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     806/    147A : (MACRO)             	alu2I R11,R11,15,ani,ani
     807/    1482 :                     	;removed ?	cpy2 R11,R11
     808/    1482 : (MACRO)             	cpy1 R12,R11
     809/    1484 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     810/    1487 : (MACRO)             	Ccall _putxn
     811/    148A :                     ;}
     812/    148A :                     L92:
     813/    148A : (MACRO)             	release 4
     814/    148E : (MACRO)             	Cretn
     815/    148F :                     
     816/    148F :                     _printf:
     817/    148F : (MACRO)             	reserve 4; save room for local variables
     818/    1493 : (MACRO)             	pushr r0
     819/    1498 : (MACRO)             	pushr r1
     820/    149D : (MACRO)             	pushr r7
     821/    14A2 : (MACRO)             	reserve 4; save room for outgoing arguments
     822/    14A6 : (MACRO)             	st2 r12,'O',sp,(16); flag1 
     823/    14B3 : (MACRO)             	st2 r13,'O',sp,(18); flag2
     824/    14C0 :                     ;void printf(char *ptr,...){ //limited implementation of printf
     825/    14C0 :                     ;	int argslot=0;	//used to align longs
     826/    14C0 : (MACRO)             	ld2z R0
     827/    14C4 :                     ;	int * this=(int *)&ptr;
     828/    14C4 : (MACRO)             	ldA2 R1,'O',sp,(0+16); reg:addr
     829/    14CC :                     ;	this++; argslot++; //advance argument pointer and slot #
     830/    14CC : (MACRO)             	incm R1,2
     831/    14CE : (MACRO)             	incm R0,1
     832/    14CF : C0 18 7F            	lbr L95
     833/    14D2 :                     L94:
     834/    14D2 :                     ;    while(*ptr) {
     835/    14D2 :                     ;		c=*ptr++;
     836/    14D2 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     837/    14DE : (MACRO)             	cpy2 R10,R11
     838/    14E2 : (MACRO)             	incm R10,1
     839/    14E3 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     840/    14F0 : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     841/    14F2 :                     ;		if (c!='%'){
     842/    14F2 : (MACRO)             	cpy1 R11,R7
     843/    14F4 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     844/    14F7 : (MACRO)             	jeqU2I r11,37,L97;EQI2(reg,con)
     845/    1503 :                     ;			putc(c);
     846/    1503 : (MACRO)             	cpy1 R12,R7
     847/    1505 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     848/    1508 : (MACRO)             	Ccall _putc
     849/    150B :                     ;		} else{
     850/    150B : C0 18 7F            	lbr L98
     851/    150E :                     L97:
     852/    150E :                     ;			c=*ptr++;
     853/    150E : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     854/    151A : (MACRO)             	cpy2 R10,R11
     855/    151E : (MACRO)             	incm R10,1
     856/    151F : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     857/    152C : (MACRO)             	ldn1 R7,R11;reg:  INDIRU1(indaddr)
     858/    152E :                     ;			switch (c){
     859/    152E : (MACRO)             	cpy1 R11,R7
     860/    1530 : (MACRO)             	zExt 11 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 16 - 3/28/2013 8:52:10


     861/    1533 : (MACRO)             	st2 R11,'O',sp,(-5+16)
     862/    1540 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     863/    154C : (MACRO)             	jeqU2I r11,105,L102;EQI2(reg,con)
     864/    1558 : (MACRO)             	ldaD R10,108; reg:acon
     865/    155E : (MACRO)             	jeqI2 r11,r10,L106; EQI2(reg,reg)
     866/    1570 : (MACRO)             	jcI2 r10,r11,lbnf,L114 ;GT is reversed operands from LT
     867/    1584 :                     L113:
     868/    1584 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     869/    1590 : (MACRO)             	ldaD R10,88; reg:acon
     870/    1596 : (MACRO)             	jeqI2 r11,r10,L105; EQI2(reg,reg)
     871/    15A8 : (MACRO)             	jcI2 r11,r10,lbnf,L99; LT=lbnf i.e. subtract B from A and jump if borrow 
     872/    15BC :                     L115:
     873/    15BC : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     874/    15C8 : (MACRO)             	jeqU2I r11,99,L104;EQI2(reg,con)
     875/    15D4 : (MACRO)             	jeqU2I r11,100,L102;EQI2(reg,con)
     876/    15E0 : C0 18 6E            	lbr L99
     877/    15E3 :                     L114:
     878/    15E3 : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     879/    15EF : (MACRO)             	ldaD R10,115; reg:acon
     880/    15F5 : (MACRO)             	jeqI2 r11,r10,L103; EQI2(reg,reg)
     881/    1607 : (MACRO)             	jcI2 r11,r10,lbnf,L99; LT=lbnf i.e. subtract B from A and jump if borrow 
     882/    161B :                     L116:
     883/    161B : (MACRO)             	ld2 R11,'O',sp,(-5+16) ;reg:INDIRI2(addr)
     884/    1627 : (MACRO)             	jeqU2I r11,120,L105;EQI2(reg,con)
     885/    1633 : C0 18 6E            	lbr L99
     886/    1636 :                     L102:
     887/    1636 :                     ;					printint(*this++);
     888/    1636 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     889/    163A : (MACRO)             	cpy2 R1,R11
     890/    163E : (MACRO)             	incm R1,2
     891/    1640 : (MACRO)             	ld2 R12,'O',R11,0 ;reg:INDIRI2(addr)
     892/    164C : (MACRO)             	Ccall _printint
     893/    164F :                     ;					argslot+=1; //next argument slot
     894/    164F : (MACRO)             	incm R0,1
     895/    1650 :                     ;					break;
     896/    1650 : C0 18 7F            	lbr L100
     897/    1653 :                     L103:
     898/    1653 :                     ;					printstr((char*) *this++);
     899/    1653 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     900/    1657 : (MACRO)             	cpy2 R1,R11
     901/    165B : (MACRO)             	incm R1,2
     902/    165D : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     903/    1669 : (MACRO)             	cpy2 R12,R11 ;LOADP2(reg)
     904/    166D : (MACRO)             	Ccall _printstr
     905/    1670 :                     ;					argslot+=1; //next argument slot
     906/    1670 : (MACRO)             	incm R0,1
     907/    1671 :                     ;					break;
     908/    1671 : C0 18 7F            	lbr L100
     909/    1674 :                     L104:
     910/    1674 :                     ;					putc((unsigned int) *this++);
     911/    1674 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     912/    1678 : (MACRO)             	cpy2 R1,R11
     913/    167C : (MACRO)             	incm R1,2
     914/    167E : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     915/    168A : (MACRO)             	cpy1 R12,R11
     916/    168C : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     917/    168F : (MACRO)             	Ccall _putc
     918/    1692 :                     ;					argslot+=1; //next argument slot
     919/    1692 : (MACRO)             	incm R0,1
     920/    1693 :                     ;					break;
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 17 - 3/28/2013 8:52:10


     921/    1693 : C0 18 7F            	lbr L100
     922/    1696 :                     L105:
     923/    1696 :                     ;					putx(((unsigned int) *this)>>8);
     924/    1696 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     925/    16A2 : (MACRO)             	shrU2I R11,8
     926/    16D2 : (MACRO)             	cpy1 R12,R11
     927/    16D4 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     928/    16D7 : (MACRO)             	Ccall _putx
     929/    16DA :                     ;					putx(((unsigned int) *this++)&255);
     930/    16DA : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     931/    16DE : (MACRO)             	cpy2 R1,R11
     932/    16E2 : (MACRO)             	incm R1,2
     933/    16E4 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     934/    16F0 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     935/    16F8 : (MACRO)             	cpy1 R12,R11
     936/    16FA : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     937/    16FD : (MACRO)             	Ccall _putx
     938/    1700 :                     ;					argslot+=1; //next argument slot
     939/    1700 : (MACRO)             	incm R0,1
     940/    1701 :                     ;					break;
     941/    1701 : C0 18 7F            	lbr L100
     942/    1704 :                     L106:
     943/    1704 :                     ;					if (*ptr){ //as long as there's something there
     944/    1704 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     945/    1710 : (MACRO)             	ld1 R11,'O',R11,0
     946/    171A : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     947/    171D : (MACRO)             	jzU2 r11,L107; EQ 0
     948/    1725 :                     ;						xord=*ptr++;
     949/    1725 : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
     950/    1731 : (MACRO)             	cpy2 R10,R11
     951/    1735 : (MACRO)             	incm R10,1
     952/    1736 : (MACRO)             	st2 R10,'O',sp,(0+16); ASGNP2
     953/    1743 : (MACRO)             	ldn1 R11,R11;reg:  INDIRU1(indaddr)
     954/    1745 : (MACRO)             	st1 R11,'O',sp,(-3+16); ASGNU1
     955/    174F :                     ;						if (argslot&1) {
     956/    174F : (MACRO)             	alu2I R11,R0,1,ani,ani
     957/    1757 :                     	;removed ?	cpy2 R11,R0
     958/    1757 : (MACRO)             	jzU2 r11,L109; EQ 0
     959/    175F :                     ;							this++;
     960/    175F : (MACRO)             	incm R1,2
     961/    1761 :                     ;							argslot++;
     962/    1761 : (MACRO)             	incm R0,1
     963/    1762 :                     ;						}
     964/    1762 :                     L109:
     965/    1762 :                     ;						if(xord=='d'){
     966/    1762 : (MACRO)             	ld1 R11,'O',sp,(-3+16)
     967/    176C : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
     968/    176F : (MACRO)             	jneU2I r11,100,L111; NE
     969/    177B :                     ;							printlint(*(long *)this);//treats "this" as a pointer to long
     970/    177B : (MACRO)             	ld4 Rp1p2,'O',R1,0;reg:  INDIRI4(addr)
     971/    178B : (MACRO)             	Ccall _printlint
     972/    178E :                     ;							this+=2;				// and advances it 4 bytes
     973/    178E : (MACRO)             	incm R1,4
     974/    1792 :                     ;						} else{
     975/    1792 : C0 18 69            	lbr L112
     976/    1795 :                     L111:
     977/    1795 :                     ;							putx(((unsigned int) *this)>>8);
     978/    1795 : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     979/    17A1 : (MACRO)             	shrU2I R11,8
     980/    17D1 : (MACRO)             	cpy1 R12,R11
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 18 - 3/28/2013 8:52:10


     981/    17D3 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     982/    17D6 : (MACRO)             	Ccall _putx
     983/    17D9 :                     ;							putx(((unsigned int) *this++)&255);
     984/    17D9 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
     985/    17DD : (MACRO)             	cpy2 R1,R11
     986/    17E1 : (MACRO)             	incm R1,2
     987/    17E3 : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
     988/    17EF : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
     989/    17F7 : (MACRO)             	cpy1 R12,R11
     990/    17F9 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     991/    17FC : (MACRO)             	Ccall _putx
     992/    17FF :                     ;							putx(((unsigned int) *this)>>8);
     993/    17FF : (MACRO)             	ld2 R11,'O',R1,0 ;reg:INDIRI2(addr)
     994/    180B : (MACRO)             	shrU2I R11,8
     995/    183B : (MACRO)             	cpy1 R12,R11
     996/    183D : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
     997/    1840 : (MACRO)             	Ccall _putx
     998/    1843 :                     ;							putx(((unsigned int) *this++)&255);
     999/    1843 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1000/    1847 : (MACRO)             	cpy2 R1,R11
    1001/    184B : (MACRO)             	incm R1,2
    1002/    184D : (MACRO)             	ld2 R11,'O',R11,0 ;reg:INDIRI2(addr)
    1003/    1859 : (MACRO)             	alu2I R11,R11,255,ani,ani ;removed copy;BANDU2(reg,con)  
    1004/    1861 : (MACRO)             	cpy1 R12,R11
    1005/    1863 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1006/    1866 : (MACRO)             	Ccall _putx
    1007/    1869 :                     ;						}
    1008/    1869 :                     L112:
    1009/    1869 :                     ;						argslot+=2;
    1010/    1869 : (MACRO)             	incm R0,2
    1011/    186B :                     ;						break;
    1012/    186B : C0 18 7F            	lbr L100
    1013/    186E :                     L107:
    1014/    186E :                     L99:
    1015/    186E :                     ;					putc('%');putc(c);
    1016/    186E : (MACRO)             	ldaD R12,37; reg:acon
    1017/    1874 : (MACRO)             	Ccall _putc
    1018/    1877 : (MACRO)             	cpy1 R12,R7
    1019/    1879 : (MACRO)             	zExt 12 ;CVUI2(reg): widen unsigned char to signed int (zero extend)*
    1020/    187C : (MACRO)             	Ccall _putc
    1021/    187F :                     ;			} //switch
    1022/    187F :                     L100:
    1023/    187F :                     ;		} //%
    1024/    187F :                     L98:
    1025/    187F :                     ;	} //while
    1026/    187F :                     L95:
    1027/    187F :                     ;    while(*ptr) {
    1028/    187F : (MACRO)             	ld2 R11,'O',sp,(0+16);reg:  INDIRP2(addr)
    1029/    188B : (MACRO)             	ld1 R11,'O',R11,0
    1030/    1895 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1031/    1898 : (MACRO)             	jnzU2 r11,L94; NE 0
    1032/    18A0 :                     ;} //prtf
    1033/    18A0 :                     L93:
    1034/    18A0 : (MACRO)             	release 4; release room for outgoing arguments
    1035/    18A4 : (MACRO)             	popr r7
    1036/    18A8 : (MACRO)             	popr r1
    1037/    18AC : (MACRO)             	popr r0
    1038/    18B0 : (MACRO)             	release 4; release room for local variables 
    1039/    18B4 : (MACRO)             	Cretn
    1040/    18B5 :                     
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 19 - 3/28/2013 8:52:10


    1041/    18B5 :                     _exit:
    1042/    18B5 : (MACRO)             	reserve 4
    1043/    18B9 : (MACRO)             	st2 r12,'O',sp,(6); flag1 
    1044/    18C6 :                     ;void exit(int code){
    1045/    18C6 :                     ;	printf("exit %d\n",code);
    1046/    18C6 : (MACRO)             	ldaD R12,L118; reg:acon
    1047/    18CC : (MACRO)             	ld2 R13,'O',sp,(0+6) ;reg:INDIRI2(addr)
    1048/    18D8 : (MACRO)             	Ccall _printf
    1049/    18DB :                     L119:
    1050/    18DB :                     ;	while(1);
    1051/    18DB :                     L120:
    1052/    18DB : C0 18 DB            	lbr L119
    1053/    18DE :                     ;}
    1054/    18DE :                     L117:
    1055/    18DE : (MACRO)             	release 4
    1056/    18E2 : (MACRO)             	Cretn
    1057/    18E3 :                     
    1058/    18E3 :                     _memcmp:
    1059/    18E3 : (MACRO)             	reserve 2; save room for local variables
    1060/    18E5 : (MACRO)             	pushr r0
    1061/    18EA : (MACRO)             	pushr r1
    1062/    18EF : (MACRO)             	pushr r7
    1063/    18F4 : (MACRO)             	reserve 0; save room for outgoing arguments
    1064/    18F4 : (MACRO)             	ld2 R7,'O',sp,(4+10); reg:INDIRU2(addr)
    1065/    1900 :                     ;int memcmp(const void *Ptr1, const void *Ptr2, unsigned int Count){
    1066/    1900 :                     ;    int v = 0;
    1067/    1900 : (MACRO)             	ld2z R1
    1068/    1904 :                     ;    p1 = (unsigned char *)Ptr1;
    1069/    1904 : (MACRO)             	cpy2 R0,R12 ;LOADP2(reg)
    1070/    1908 :                     ;    p2 = (unsigned char *)Ptr2;
    1071/    1908 : (MACRO)             	st2 R13,'O',sp,(-4+10); ASGNP2
    1072/    1915 : C0 19 65            	lbr L124
    1073/    1918 :                     L123:
    1074/    1918 :                     ;    while(Count-- > 0 && v == 0) {
    1075/    1918 :                     ;        v = *(p1++) - *(p2++);
    1076/    1918 : (MACRO)             	cpy2 R11,R0 ;LOADP2(reg)
    1077/    191C : (MACRO)             	cpy2 R0,R11
    1078/    1920 : (MACRO)             	incm R0,1
    1079/    1921 : (MACRO)             	ld2 R10,'O',sp,(-4+10);reg:  INDIRP2(addr)
    1080/    192D : (MACRO)             	cpy2 R9,R10
    1081/    1931 : (MACRO)             	incm R9,1
    1082/    1932 : (MACRO)             	st2 R9,'O',sp,(-4+10); ASGNP2
    1083/    193F : (MACRO)             	ld1 R11,'O',R11,0
    1084/    1949 : (MACRO)             	zExt R11 ;CVUI2: widen unsigned char to signed int (zero extend)
    1085/    194C : (MACRO)             	ld1 R10,'O',R10,0
    1086/    1956 : (MACRO)             	zExt R10 ;CVUI2: widen unsigned char to signed int (zero extend)
    1087/    1959 : (MACRO)             	alu2 R1,R11,R10,sm,smb
    1088/    1965 :                     ;    }
    1089/    1965 :                     L124:
    1090/    1965 :                     ;    while(Count-- > 0 && v == 0) {
    1091/    1965 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1092/    1969 : (MACRO)             	cpy2 R7,R11
    1093/    196D : (MACRO)             	decm R7,1
    1094/    196E : (MACRO)             	jeqU2I r11,0,L126;EQU2(reg,con)
    1095/    197A : (MACRO)             	jzU2 r1,L123; EQ 0
    1096/    1982 :                     L126:
    1097/    1982 :                     ;    return v;
    1098/    1982 : (MACRO)             	cpy2 R15,R1 ;LOADI2(reg)
    1099/    1986 :                     L122:
    1100/    1986 : (MACRO)             	release 0; release room for outgoing arguments
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 20 - 3/28/2013 8:52:10


    1101/    1986 : (MACRO)             	popr r7
    1102/    198A : (MACRO)             	popr r1
    1103/    198E : (MACRO)             	popr r0
    1104/    1992 : (MACRO)             	release 2; release room for local variables 
    1105/    1994 : (MACRO)             	Cretn
    1106/    1995 :                     
    1107/    1995 :                     _memcpy:
    1108/    1995 : (MACRO)             	reserve 0; save room for local variables
    1109/    1995 : (MACRO)             	pushr r0
    1110/    199A : (MACRO)             	pushr r1
    1111/    199F : (MACRO)             	pushr r7
    1112/    19A4 : (MACRO)             	reserve 0; save room for outgoing arguments
    1113/    19A4 : (MACRO)             	ld2 R7,'O',sp,(4+8); reg:INDIRU2(addr)
    1114/    19B0 :                     ;void* memcpy(void* dest, const void* src, unsigned int count) {
    1115/    19B0 :                     ;        char* dst8 = (char*)dest;
    1116/    19B0 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1117/    19B4 :                     ;        char* src8 = (char*)src;
    1118/    19B4 : (MACRO)             	cpy2 R0,R13 ;LOADP2(reg)
    1119/    19B8 : C0 19 D1            	lbr L129
    1120/    19BB :                     L128:
    1121/    19BB :                     ;        while (count--) {
    1122/    19BB :                     ;            *dst8++ = *src8++;
    1123/    19BB : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
    1124/    19BF : (MACRO)             	cpy2 R1,R11
    1125/    19C3 : (MACRO)             	incm R1,1
    1126/    19C4 : (MACRO)             	cpy2 R10,R0 ;LOADP2(reg)
    1127/    19C8 : (MACRO)             	cpy2 R0,R10
    1128/    19CC : (MACRO)             	incm R0,1
    1129/    19CD : (MACRO)             	ldn1 R10,R10;reg:  INDIRU1(indaddr)
    1130/    19CF : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1131/    19D1 :                     ;        }
    1132/    19D1 :                     L129:
    1133/    19D1 :                     ;        while (count--) {
    1134/    19D1 : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1135/    19D5 : (MACRO)             	cpy2 R7,R11
    1136/    19D9 : (MACRO)             	decm R7,1
    1137/    19DA : (MACRO)             	jnzU2 r11,L128; NE 0
    1138/    19E2 :                     ;        return dest;
    1139/    19E2 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1140/    19E6 :                     L127:
    1141/    19E6 : (MACRO)             	release 0; release room for outgoing arguments
    1142/    19E6 : (MACRO)             	popr r7
    1143/    19EA : (MACRO)             	popr r1
    1144/    19EE : (MACRO)             	popr r0
    1145/    19F2 : (MACRO)             	release 0; release room for local variables 
    1146/    19F2 : (MACRO)             	Cretn
    1147/    19F3 :                     
    1148/    19F3 :                     _memset:
    1149/    19F3 : (MACRO)             	reserve 0; save room for local variables
    1150/    19F3 : (MACRO)             	pushr r1
    1151/    19F8 : (MACRO)             	pushr r7
    1152/    19FD : (MACRO)             	reserve 0; save room for outgoing arguments
    1153/    19FD : (MACRO)             	ld2 R7,'O',sp,(4+6); reg:INDIRU2(addr)
    1154/    1A09 :                     ;{
    1155/    1A09 :                     ;    unsigned char* p=s;
    1156/    1A09 : (MACRO)             	cpy2 R1,R12 ;LOADP2(reg)
    1157/    1A0D : C0 1A 1F            	lbr L133
    1158/    1A10 :                     L132:
    1159/    1A10 :                     ;        *p++ = (unsigned char)c;
    1160/    1A10 : (MACRO)             	cpy2 R11,R1 ;LOADP2(reg)
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 21 - 3/28/2013 8:52:10


    1161/    1A14 : (MACRO)             	cpy2 R1,R11
    1162/    1A18 : (MACRO)             	incm R1,1
    1163/    1A19 : (MACRO)             	cpy2 R10,R13 ;LOADU2(reg)*
    1164/    1A1D : (MACRO)             	str1 R10,R11; ASGNU1(indaddr,reg)
    1165/    1A1F :                     L133:
    1166/    1A1F :                     ;    while(n--)
    1167/    1A1F : (MACRO)             	cpy2 R11,R7 ;LOADU2(reg)*
    1168/    1A23 : (MACRO)             	cpy2 R7,R11
    1169/    1A27 : (MACRO)             	decm R7,1
    1170/    1A28 : (MACRO)             	jnzU2 r11,L132; NE 0
    1171/    1A30 :                     ;    return s;
    1172/    1A30 : (MACRO)             	cpy2 R15,R12 ;LOADP2(reg)
    1173/    1A34 :                     L131:
    1174/    1A34 : (MACRO)             	release 0; release room for outgoing arguments
    1175/    1A34 : (MACRO)             	popr r7
    1176/    1A38 : (MACRO)             	popr r1
    1177/    1A3C : (MACRO)             	release 0; release room for local variables 
    1178/    1A3C : (MACRO)             	Cretn
    1179/    1A3D :                     
    1180/    1A3D :                     L118:
    1181/    1A3D : 65                  	db 101
    1182/    1A3E : 78                  	db 120
    1183/    1A3F : 69                  	db 105
    1184/    1A40 : 74                  	db 116
    1185/    1A41 : 20                  	db 32
    1186/    1A42 : 25                  	db 37
    1187/    1A43 : 64                  	db 100
    1188/    1A44 : 0A                  	db 10
    1189/    1A45 : 00                  	db 0
    1190/    1A46 :                     L60:
    1191/    1A46 : 66                  	db 102
    1192/    1A47 : 74                  	db 116
    1193/    1A48 : 6F                  	db 111
    1194/    1A49 : 61                  	db 97
    1195/    1A4A : 20                  	db 32
    1196/    1A4B : 72                  	db 114
    1197/    1A4C : 65                  	db 101
    1198/    1A4D : 74                  	db 116
    1199/    1A4E : 75                  	db 117
    1200/    1A4F : 72                  	db 114
    1201/    1A50 : 6E                  	db 110
    1202/    1A51 : 73                  	db 115
    1203/    1A52 : 20                  	db 32
    1204/    1A53 : 25                  	db 37
    1205/    1A54 : 64                  	db 100
    1206/    1A55 : 2C                  	db 44
    1207/    1A56 : 20                  	db 32
    1208/    1A57 : 67                  	db 103
    1209/    1A58 : 62                  	db 98
    1210/    1A59 : 75                  	db 117
    1211/    1A5A : 66                  	db 102
    1212/    1A5B : 66                  	db 102
    1213/    1A5C : 65                  	db 101
    1214/    1A5D : 72                  	db 114
    1215/    1A5E : 20                  	db 32
    1216/    1A5F : 63                  	db 99
    1217/    1A60 : 6F                  	db 111
    1218/    1A61 : 6E                  	db 110
    1219/    1A62 : 74                  	db 116
    1220/    1A63 : 61                  	db 97
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 22 - 3/28/2013 8:52:10


    1221/    1A64 : 69                  	db 105
    1222/    1A65 : 6E                  	db 110
    1223/    1A66 : 73                  	db 115
    1224/    1A67 : 20                  	db 32
    1225/    1A68 : 25                  	db 37
    1226/    1A69 : 73                  	db 115
    1227/    1A6A : 0A                  	db 10
    1228/    1A6B : 00                  	db 0
    1229/    1A6C :                     L59:
    1230/    1A6C : 68                  	db 104
    1231/    1A6D : 65                  	db 101
    1232/    1A6E : 6C                  	db 108
    1233/    1A6F : 6C                  	db 108
    1234/    1A70 : 6F                  	db 111
    1235/    1A71 : 20                  	db 32
    1236/    1A72 : 57                  	db 87
    1237/    1A73 : 6F                  	db 111
    1238/    1A74 : 72                  	db 114
    1239/    1A75 : 6C                  	db 108
    1240/    1A76 : 64                  	db 100
    1241/    1A77 : 21                  	db 33
    1242/    1A78 : 0A                  	db 10
    1243/    1A79 : 00                  	db 0
    1244/    1A7A :                     L33:
    1245/    1A7A : 77                  	db 119
    1246/    1A7B : 68                  	db 104
    1247/    1A7C : 6F                  	db 111
    1248/    1A7D : 6C                  	db 108
    1249/    1A7E : 65                  	db 101
    1250/    1A7F : 3D                  	db 61
    1251/    1A80 : 25                  	db 37
    1252/    1A81 : 6C                  	db 108
    1253/    1A82 : 64                  	db 100
    1254/    1A83 : 2C                  	db 44
    1255/    1A84 : 66                  	db 102
    1256/    1A85 : 6C                  	db 108
    1257/    1A86 : 74                  	db 116
    1258/    1A87 : 64                  	db 100
    1259/    1A88 : 65                  	db 101
    1260/    1A89 : 63                  	db 99
    1261/    1A8A : 3D                  	db 61
    1262/    1A8B : 25                  	db 37
    1263/    1A8C : 6C                  	db 108
    1264/    1A8D : 78                  	db 120
    1265/    1A8E : 2C                  	db 44
    1266/    1A8F : 20                  	db 32
    1267/    1A90 : 64                  	db 100
    1268/    1A91 : 65                  	db 101
    1269/    1A92 : 63                  	db 99
    1270/    1A93 : 69                  	db 105
    1271/    1A94 : 6D                  	db 109
    1272/    1A95 : 61                  	db 97
    1273/    1A96 : 6C                  	db 108
    1274/    1A97 : 3D                  	db 61
    1275/    1A98 : 25                  	db 37
    1276/    1A99 : 6C                  	db 108
    1277/    1A9A : 64                  	db 100
    1278/    1A9B : 0A                  	db 10
    1279/    1A9C : 00                  	db 0
    1280/    1A9D :                     	align 4
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 23 - 3/28/2013 8:52:10


    1281/    1AA0 :                     L29:
    1282/    1AA0 : 40 00 00 00         	dd 0x40000000
    1283/    1AA4 :                     	align 4
    1284/    1AA4 :                     L28:
    1285/    1AA4 : 4F 00 00 00         	dd 0x4f000000
    1286/    1AA8 :                     L24:
    1287/    1AA8 : 6D                  	db 109
    1288/    1AA9 : 75                  	db 117
    1289/    1AAA : 6C                  	db 108
    1290/    1AAB : 74                  	db 116
    1291/    1AAC : 3D                  	db 61
    1292/    1AAD : 25                  	db 37
    1293/    1AAE : 6C                  	db 108
    1294/    1AAF : 64                  	db 100
    1295/    1AB0 : 0A                  	db 10
    1296/    1AB1 : 00                  	db 0
    1297/    1AB2 :                     	align 4
    1298/    1AB4 :                     L15:
    1299/    1AB4 : BF 80 00 00         	dd 0xbf800000
    1300/    1AB8 :                     	align 4
    1301/    1AB8 :                     L14:
    1302/    1AB8 : 00 00 00 00         	dd 0x0
    1303/    1ABC :                     	include lcc1802EpiloNO.inc
(1)    1/    1ABC :                     ;lcc1802Epilog.inc initialization and runtime functions needed for lcc1802 programs
(1)    2/    1ABC :                     ;Dec 21 2012 - out5/putc moved to separate putc.inc for christmas compiler
(1)    3/    1ABC :                     ;this is the version published with the lcc1802121229 release
(1)    4/    1ABC :                     ;jan 1 2013 incleasing stack beginning lcation to 3fff (16K)
(1)    5/    1ABC :                     ;jan 2 removed test routines, moved code not needing short branches to before the align 256
(1)    6/    1ABC :                     ;jan 11 going back to SCRT conventions for NG compiler
(1)    7/    1ABC :                     ;Jan 21 adding _mulu4 32 bit multiplication - really s.b. mulI4
(1)    8/    1ABC :                     ;Jan 28 archived before beginning work on Birthday Compiler
(1)    9/    1ABC :                     ;Feb 5 dubdab algorithm being brought in for ltoa itoa
(1)   10/    1ABC :                     ;Feb 12 fixed bugs in modi2/u2
(1)   11/    1ABC :                     ;feb 27 changed stack to start at 7fff
(1)   12/    1ABC :                     ;mar 3, 2013 saved as epiloNO for optimization round
(1)   13/    1ABC : =EH                 rwork	equ	memAddr	;work register
(1)   14/    1ABC :                     lcc1802init:	
(1)   15/    1ABC : (MACRO)             	ldiReg	RCALL,_call
(1)   16/    1AC2 : (MACRO)             	ldiReg	RRET,_return
(1)   17/    1AC8 : (MACRO)             	ldiReg	SP,0x7fff	;wjr jan 1 start stack at 32K-1
(1)   18/    1ACE : E2                  	sex	SP
(1)   19/    1ACF : (MACRO)             	ldiReg	RPC,$$_00000
(1)   20/    1AD5 : D3                  	sep	RPC
(1)   21/    1AD6 :                     $$_00000:
(1)   22/    1AD6 : (MACRO)             	Ccall _main	;call the main routine
(1)   23/    1AD9 : C0 1A D9            $$_die:	lbr	$$_die		;loop here when main returns
(1)   24/    1ADC : DE AD               	db	0xde,0xad
(1)   25/    1ADE :                     
(1)   26/    1ADE :                     ;the following routines don't have short jumps and don't need to worry about alignment
(1)   27/    1ADE :                     _setqOn:
(1)   28/    1ADE : 7B                  	seq
(1)   29/    1ADF : (MACRO)             	Cretn
(1)   30/    1AE0 :                     _setqOff:
(1)   31/    1AE0 : 7A                  	req
(1)   32/    1AE1 : (MACRO)             	Cretn
(1)   33/    1AE2 :                     
(1)   34/    1AE2 :                     _modU2:	;16 bit unsigned remainder
(1)   35/    1AE2 :                     	; just calls the 16 bit division then puts remainder into return value
(1)   36/    1AE2 : (MACRO)                 Ccall _divU2
(1)   37/    1AE5 : 8D                      glo regArg2
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 24 - 3/28/2013 8:52:10


(1)   38/    1AE6 : AF                      plo retVal
(1)   39/    1AE7 : 9D                      ghi regArg2
(1)   40/    1AE8 : BF                      phi retVal
(1)   41/    1AE9 : (MACRO)                 Cretn
(1)   42/    1AEA :                         
(1)   43/    1AEA :                     _modI2:	;16 bit signed remainder
(1)   44/    1AEA :                     	; just calls the 16 bit division then puts remainder into return value
(1)   45/    1AEA : (MACRO)                 Ccall _divI2
(1)   46/    1AED : 8D                      glo regArg2
(1)   47/    1AEE : AF                      plo retVal
(1)   48/    1AEF : 9D                      ghi regArg2
(1)   49/    1AF0 : BF                      phi retVal
(1)   50/    1AF1 : (MACRO)                 Cretn
(1)   51/    1AF2 :                     
(1)   52/    1AF2 :                     _out4:	
(1)   53/    1AF2 : 8C                  	glo	regArg1
(1)   54/    1AF3 : 22                  	dec	sp
(1)   55/    1AF4 : 52                  	str	sp
(1)   56/    1AF5 : 64                  	out	4
(1)   57/    1AF6 : (MACRO)             	Cretn
(1)   58/    1AF7 :                     
(1)   59/    1AF7 :                     ;the following routines have short branches so all the code has to stay within the same page
(1)   60/    1AF7 :                     	align 256
(1)   61/    1B00 :                     ;non-standard Call routine invoked as D4xxxx - using z80 stack convention
(1)   62/    1B00 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   63/    1B00 : D3                  	sep     R3 ;go to subroutine
(1)   64/    1B01 : E2                  _call	sex	SP ;make sure X=SP
(1)   65/    1B02 : 96                  	ghi	retAddr ;save previous return pointer on stack
(1)   66/    1B03 : 22                  	dec	sp
(1)   67/    1B04 : 73                  	stxd
(1)   68/    1B05 : 86                  	glo	retAddr
(1)   69/    1B06 : 52                  	str	sp	
(1)   70/    1B07 : 83                  	glo	RPC ;copy old PC to retAddr
(1)   71/    1B08 : A6                  	plo	retAddr
(1)   72/    1B09 : 93                  	ghi	RPC
(1)   73/    1B0A : B6                  	phi	retAddr
(1)   74/    1B0B : 46                  	lda	retAddr ;pick up subroutine address into RPC
(1)   75/    1B0C : B3                  	phi	RPC
(1)   76/    1B0D : 46                  	lda	retAddr
(1)   77/    1B0E : A3                  	plo	RPC
(1)   78/    1B0F : 30 00               	br	_call-1
(1)   79/    1B11 :                     
(1)   80/    1B11 :                     ;non-standard subroutine return - using z80 stack discipline (decrement 1st, little endian)
(1)   81/    1B11 :                     ;requires programs to save the return address if they destroy it (by using call for example)
(1)   82/    1B11 : D3                  	sep	RPC	;return to the original program
(1)   83/    1B12 : 86                  _return	glo	retAddr	;transfer the current return address to RPC
(1)   84/    1B13 : A3                  	plo	RPC
(1)   85/    1B14 : 96                  	ghi	retAddr
(1)   86/    1B15 : B3                  	phi	RPC
(1)   87/    1B16 : 42                  	lda	SP	;pick up old return address
(1)   88/    1B17 : A6                  	plo	retAddr
(1)   89/    1B18 : 42                  	lda	SP
(1)   90/    1B19 : B6                  	phi	retAddr
(1)   91/    1B1A : 30 11               	br	_return-1
(1)   92/    1B1C :                     
(1)   93/    1B1C :                     _oneMs:		;execute 100 instructions including call(15)/return(10) sequence. takes about 1 ms
(1)   94/    1B1C : F8 24               	ldi	(100-15-10-2)/2
(1)   95/    1B1E : FF 01               $$mslp:	smi	1
(1)   96/    1B20 : 3A 1E               	bnz	$$mslp
(1)   97/    1B22 : (MACRO)             	Cretn
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 25 - 3/28/2013 8:52:10


(1)   98/    1B23 :                     
(1)   99/    1B23 :                     
(1)  100/    1B23 :                     	
(1)  101/    1B23 :                     ;16 bit unsigned multiply thanks to Ted Rossin!
(1)  102/    1B23 :                     ;retVal=regArg1*regArg2. uses register rwork as a work regitsr
(1)  103/    1B23 :                     _mulu2:		
(1)  104/    1B23 : 22                      dec sp
(1)  105/    1B24 : F8 10                   ldi 16
(1)  106/    1B26 : AE                      plo	rwork	;bit count
(1)  107/    1B27 : F8 00                   ldi 0
(1)  108/    1B29 : BF                      phi	retVal	;quotient
(1)  109/    1B2A : AF                      plo retVal
(1)  110/    1B2B :                     $$MultLoop16_16:
(1)  111/    1B2B : 9C                      ghi regArg1
(1)  112/    1B2C : F6                      shr
(1)  113/    1B2D : BC                      phi regArg1
(1)  114/    1B2E : 8C                      glo regArg1
(1)  115/    1B2F : 76                      shrc
(1)  116/    1B30 : AC                      plo regArg1
(1)  117/    1B31 : 3B 3D                   bnf $$MultSkip16_16
(1)  118/    1B33 : 8D                      glo regArg2
(1)  119/    1B34 : 52                      str sp
(1)  120/    1B35 : 8F                      glo retVal
(1)  121/    1B36 : F4                      add 
(1)  122/    1B37 : AF                      plo retVal
(1)  123/    1B38 : 9D                      ghi regArg2
(1)  124/    1B39 : 52                      str sp
(1)  125/    1B3A : 9F                      ghi retVal
(1)  126/    1B3B : 74                      adc
(1)  127/    1B3C : BF                      phi retVal
(1)  128/    1B3D :                     $$MultSkip16_16:
(1)  129/    1B3D : 8D                      glo regArg2
(1)  130/    1B3E : FE                      shl
(1)  131/    1B3F : AD                      plo regArg2
(1)  132/    1B40 : 9D                      ghi regArg2
(1)  133/    1B41 : 7E                      shlc
(1)  134/    1B42 : BD                      phi regArg2
(1)  135/    1B43 : 2E                      dec rwork
(1)  136/    1B44 : 8E                      glo rwork
(1)  137/    1B45 : 3A 2B                   bnz $$MultLoop16_16
(1)  138/    1B47 : 12                      inc sp
(1)  139/    1B48 : D5                      sep 5
(1)  140/    1B49 :                     
(1)  141/    1B49 :                     
(1)  142/    1B49 :                     _divU2:
(1)  143/    1B49 :                     	; retVal = regArg1/regArg2  (remainder in regArg1)
(1)  144/    1B49 :                     	; This is really an unsigned 23 bit divide
(1)  145/    1B49 :                     	;thanks to Ted Rossin
(1)  146/    1B49 :                     	;bodged Dec 12 to shuffle registers at the end.
(1)  147/    1B49 : 22                      dec sp
(1)  148/    1B4A : F8 10                   ldi 16
(1)  149/    1B4C : AE                      plo rwork
(1)  150/    1B4D : F8 00                   ldi 0
(1)  151/    1B4F : BF                      phi retVal
(1)  152/    1B50 : AF                      plo retVal
(1)  153/    1B51 : BE                      phi rwork
(1)  154/    1B52 :                     $$DivLoop16_16:
(1)  155/    1B52 : 8C                      glo regArg1
(1)  156/    1B53 : FE                      shl
(1)  157/    1B54 : AC                      plo regArg1
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 26 - 3/28/2013 8:52:10


(1)  158/    1B55 : 9C                      ghi regArg1
(1)  159/    1B56 : 7E                      shlc
(1)  160/    1B57 : BC                      phi regArg1
(1)  161/    1B58 : 8F                      glo retVal
(1)  162/    1B59 : 7E                      shlc
(1)  163/    1B5A : AF                      plo retVal
(1)  164/    1B5B : 9F                      ghi retVal
(1)  165/    1B5C : 7E                      shlc
(1)  166/    1B5D : BF                      phi retVal
(1)  167/    1B5E : 9E                      ghi rwork
(1)  168/    1B5F : 7E                      shlc
(1)  169/    1B60 : BE                      phi rwork
(1)  170/    1B61 : 3B 73                   bnf $$DivSub16_16
(1)  171/    1B63 : 8D                      glo regArg2
(1)  172/    1B64 : 52                      str sp
(1)  173/    1B65 : 8F                      glo retVal
(1)  174/    1B66 : F4                      add 
(1)  175/    1B67 : AF                      plo retVal
(1)  176/    1B68 : 9D                      ghi regArg2
(1)  177/    1B69 : 52                      str sp
(1)  178/    1B6A : 9F                      ghi retVal
(1)  179/    1B6B : 74                      adc 
(1)  180/    1B6C : BF                      phi retVal
(1)  181/    1B6D : 9E                      ghi rwork
(1)  182/    1B6E : 7C 00                   adci 0
(1)  183/    1B70 : BE                      phi rwork
(1)  184/    1B71 : 30 81                   br $$DivSkip16_16
(1)  185/    1B73 :                     $$DivSub16_16:
(1)  186/    1B73 : 8D                      glo regArg2
(1)  187/    1B74 : 52                      str sp
(1)  188/    1B75 : 8F                      glo retVal
(1)  189/    1B76 : F7                      sm
(1)  190/    1B77 : AF                      plo retVal
(1)  191/    1B78 : 9D                      ghi regArg2
(1)  192/    1B79 : 52                      str sp
(1)  193/    1B7A : 9F                      ghi retVal
(1)  194/    1B7B : 77                      smb 
(1)  195/    1B7C : BF                      phi retVal
(1)  196/    1B7D : 9E                      ghi rwork
(1)  197/    1B7E : 7F 00                   smbi 0
(1)  198/    1B80 : BE                      phi rwork 
(1)  199/    1B81 :                     $$DivSkip16_16:
(1)  200/    1B81 : FE                      shl
(1)  201/    1B82 : 33 88                   bdf $$DivSkipClear16_16
(1)  202/    1B84 :                     $$DivSetBit16_16:
(1)  203/    1B84 : 8C                      glo regArg1
(1)  204/    1B85 : F9 01                   ori  0x01
(1)  205/    1B87 : AC                      plo regArg1
(1)  206/    1B88 :                     $$DivSkipClear16_16:
(1)  207/    1B88 : 2E                      dec rwork
(1)  208/    1B89 : 8E                      glo rwork
(1)  209/    1B8A : 3A 52                   bnz $$DivLoop16_16
(1)  210/    1B8C : 9E                      ghi rwork
(1)  211/    1B8D : FE                      shl
(1)  212/    1B8E : 3B 9A                   bnf $$DivSkipFinalAdd16_16
(1)  213/    1B90 : 8D                      glo regArg2
(1)  214/    1B91 : 52                      str sp
(1)  215/    1B92 : 8F                      glo retVal
(1)  216/    1B93 : F4                      add
(1)  217/    1B94 : AF                      plo retVal
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 27 - 3/28/2013 8:52:10


(1)  218/    1B95 : 9D                      ghi regArg2
(1)  219/    1B96 : 52                      str sp
(1)  220/    1B97 : 9F                      ghi retVal
(1)  221/    1B98 : 74                      adc
(1)  222/    1B99 : BF                      phi retVal
(1)  223/    1B9A :                     $$DivSkipFinalAdd16_16:
(1)  224/    1B9A : 12                      inc sp
(1)  225/    1B9B :                     ;here I have the quotient in regArg1 and remainder in retVal
(1)  226/    1B9B : 8F                      glo retVal
(1)  227/    1B9C : AD                      plo regArg2
(1)  228/    1B9D : 9F                      ghi retVal
(1)  229/    1B9E : BD                      phi regArg2
(1)  230/    1B9F : 8C                      glo regArg1
(1)  231/    1BA0 : AF                      plo retVal
(1)  232/    1BA1 : 9C                      ghi regArg1
(1)  233/    1BA2 : BF                      phi retVal
(1)  234/    1BA3 :                         ;return with quotient in retVal and remainder in regArg2
(1)  235/    1BA3 : D5                      sep 5
(1)  236/    1BA4 :                     
(1)  237/    1BA4 :                     ;signed integer division retVal=regArg1/regArg2, remainder in regArg1
(1)  238/    1BA4 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  239/    1BA4 :                     _divI2:
(1)  240/    1BA4 :                         ;pushr retAddr	;save the return address NG doesnot need
(1)  241/    1BA4 : 22                      dec	sp	;leave a work area available
(1)  242/    1BA5 : 9C                      ghi regArg1
(1)  243/    1BA6 : 52                      str sp	;save the sign of the 1st arg
(1)  244/    1BA7 : FE                      shl
(1)  245/    1BA8 : 3B B3                   bnf $$pos1	;if the 1st arg is -v
(1)  246/    1BAA : (MACRO)                 negI2 regArg1,regArg1 ;flip it to positive
(1)  247/    1BB3 :                     $$pos1: ;1st is now +v, check 2nd
(1)  248/    1BB3 : 9D                      ghi regArg2
(1)  249/    1BB4 : F3                      xor	
(1)  250/    1BB5 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  251/    1BB6 : 9D                      ghi regArg2
(1)  252/    1BB7 : FE                      shl
(1)  253/    1BB8 : 3B C3                   bnf $$pos2	;if the 2nd arg is -v
(1)  254/    1BBA : (MACRO)                 negI2 regArg2,regArg2 ;flip it to +v
(1)  255/    1BC3 :                     $$pos2: ; both args now +v
(1)  256/    1BC3 : (MACRO)                 Ccall _divU2	;call unsigned division
(1)  257/    1BC6 :                     ;now the quotient is in retVal and the remainder is in regArg2
(1)  258/    1BC6 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  259/    1BC7 : FE                      shl
(1)  260/    1BC8 : 3B D3                   bnf $$done ;if the signs were different
(1)  261/    1BCA : (MACRO)                 negI2 retVal,retVal ;negate the quotient
(1)  262/    1BD3 :                     $$done:
(1)  263/    1BD3 :                         ;popr RetAddr ;restore the return address NG doesnot need
(1)  264/    1BD3 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  265/    1BD4 :                     
(1)  266/    1BD4 :                     
(1)  267/    1BD4 :                     	align 256    ;32 bit operations follow
(1)  268/    1C00 :                     _divu4:
(1)  269/    1C00 :                     ;This is an unsigned 32 bit restoring division
(1)  270/    1C00 :                     ;The arguments are in RL8 and RL10, the result RL8/RL10 is in RL8, and the remainder is in Rp1p2
(1)  271/    1C00 :                     ;Rp1p2:RL8 form a 64 bit work area A:Q
(1)  272/    1C00 :                     ;the dividend, in RL10 is repeatedly combined with the top 32 bits and the two shifted left
(1)  273/    1C00 :                     ;the algorithm is described in http://www2.informatik.hu-berlin.de/~rok/ca/TEMP/CA_2000/engl/ca12/ca12_1-4.pdf
(1)  274/    1C00 :                     
(1)  275/    1C00 : F8 20               	ldi 32		;set loop count
(1)  276/    1C02 : AE                  	plo memaddr	;in temp register
(1)  277/    1C03 : (MACRO)             	ldi4 Rp1p2,0	;clear Rp1p2
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 28 - 3/28/2013 8:52:10


(1)  278/    1C0F :                     $$loop:
(1)  279/    1C0F : (MACRO)             	shL4 RL8	;shift bottom 32 bits left 1
(1)  280/    1C1B : (MACRO)             	shLC4 Rp1p2	;continue the shift into the top 32 bits
(1)  281/    1C27 :                     
(1)  282/    1C27 : (MACRO)             	alu4 Rp1p2,Rp1p2,RL10,sm,smb	;subtract dividend from top 32 bits
(1)  283/    1C3D :                     
(1)  284/    1C3D : FA 80               	ani 0x80	;check the top bit
(1)  285/    1C3F : 32 5D               	bz $$norestore	;if it's 0
(1)  286/    1C41 : 89                  		glo RL8
(1)  287/    1C42 : FA FE               		ani 0xfe	;turn off the bottom bit
(1)  288/    1C44 : A9                  		plo RL8
(1)  289/    1C45 : (MACRO)             		alu4 Rp1p2,Rp1p2,RL10,add,adc
(1)  290/    1C5B : 30 61               	br $$endlp 	;else
(1)  291/    1C5D :                     $$norestore:
(1)  292/    1C5D : 89                  		glo RL8
(1)  293/    1C5E : F9 01               		ori 1	;turn on the bottom bit
(1)  294/    1C60 : A9                  		plo RL8
(1)  295/    1C61 :                     	;end if
(1)  296/    1C61 :                     $$endlp:
(1)  297/    1C61 : 2E                  	dec memaddr	;check the cycle count
(1)  298/    1C62 : 8E                  	glo memaddr
(1)  299/    1C63 : 3A 0F               	bnz $$loop	;back for more if needed
(1)  300/    1C65 :                     	
(1)  301/    1C65 : (MACRO)             	Cretn		;and we're done - quotient is in RL8, remainder in Rp1p2
(1)  302/    1C66 :                     		
(1)  303/    1C66 :                     
(1)  304/    1C66 :                     _mulu4:
(1)  305/    1C66 :                     	;this is a 32 bit signed multiplication using booth's algorithm
(1)  306/    1C66 :                     	;much thanks to David Schultz for the code and Charles Richmond for help with the algorithm
(1)  307/    1C66 :                     	;input is in register pairs R8:R9 and R10:R11 (called RL8 and RL10)
(1)  308/    1C66 :                     	;output is in R8:R9, with the top 32 bits in r12:13 (called Rp1p2)
(1)  309/    1C66 :                     	;the bottom byte of memaddr is used as a cycle count
(1)  310/    1C66 :                     	;initially	R12:13=0,	R8:R9=operand 1, DF=0
(1)  311/    1C66 :                     	;for 32 cycles we check the low bit of R8:R9 and DF
(1)  312/    1C66 :                     	;for 01 we add the R10:R11 to R12:13 and shift the whole 64 bits right once into DF
(1)  313/    1C66 :                     	;for 10 we subtract and shift
(1)  314/    1C66 :                     	;for 00 and 11 we just shift
(1)  315/    1C66 :                     
(1)  316/    1C66 : (MACRO)                 ldi4 rp1p2,0	;eventual product top 32 bits
(1)  317/    1C72 : F8 20                   ldi 32
(1)  318/    1C74 : AE                      plo memaddr		;cycle count
(1)  319/    1C75 : FC 00                   adi 0		;clear df
(1)  320/    1C77 :                     $$mloop:
(1)  321/    1C77 : 89                      glo RL8
(1)  322/    1C78 : FA 01                   ani 1		;isolate bottom bit of result
(1)  323/    1C7A : 3B 96                   bnf	$$check_sub	;
(1)  324/    1C7C : 3A AE                   bnz	$$shift		;that would be the 11 case
(1)  325/    1C7E :                     ;this is case 01: add second operand to top 32 bits and shift all 64 bits right
(1)  326/    1C7E : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,add,adc	;32 bit add
(1)  327/    1C94 : 30 AE                   br $$shift
(1)  328/    1C96 :                     $$check_sub:
(1)  329/    1C96 : 32 AE                   bz $$shift	;that would be the 00 case
(1)  330/    1C98 :                     ;this is case 10: subtract 2nd operand from top 32 bits then shift right
(1)  331/    1C98 : (MACRO)                 alu4 Rp1p2,Rp1p2,RL10,sm,smb
(1)  332/    1CAE :                     $$shift:
(1)  333/    1CAE : (MACRO)                 shRI4 Rp1p2		;shift the top 32 bits
(1)  334/    1CBC : (MACRO)                 shRC4 RL8		;continue the shift to the bottom 32 bits
(1)  335/    1CC8 :                     
(1)  336/    1CC8 : 2E                      dec memaddr		;cycle count
(1)  337/    1CC9 : 8E                      glo memaddr
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 29 - 3/28/2013 8:52:10


(1)  338/    1CCA : 3A 77                   bnz $$mloop		;repeat cycle once for each bit position
(1)  339/    1CCC :                         
(1)  340/    1CCC : (MACRO)                 cretn	;and we're done. if Rp1p2 is not 0 or -1 we've overflowed 
(1)  341/    1CCD :                     
(1)  342/    1CCD :                     	align 256
(1)  343/    1D00 :                     ;signed integer division RL8=RL8/RL10, remainder in Rp1p2
(1)  344/    1D00 :                     ;uses unsigned division of absolute values then negates the quotient if the signs were originally different
(1)  345/    1D00 :                     _divI4:
(1)  346/    1D00 : 22                      dec	sp	;leave a work area available
(1)  347/    1D01 : 98                      ghi RL8-1	;get the top of the dividend
(1)  348/    1D02 : 52                      str sp	;save the sign of the 1st arg
(1)  349/    1D03 : FE                      shl
(1)  350/    1D04 : 3B 26                   bnf $$pos1	;if the 1st arg is -v
(1)  351/    1D06 : (MACRO)                 negI4 RL8,RL8 ;flip it to positive
(1)  352/    1D26 :                     $$pos1: ;1st is now +v, check 2nd
(1)  353/    1D26 : 9A                      ghi RL10-1
(1)  354/    1D27 : F3                      xor	
(1)  355/    1D28 : 52                      str sp ;the stack now has bit 8 set if the signs are different
(1)  356/    1D29 : 9A                      ghi RL10-1
(1)  357/    1D2A : FE                      shl
(1)  358/    1D2B : 3B 4D                   bnf $$pos2	;if the 2nd arg is -v
(1)  359/    1D2D : (MACRO)                 negI4 RL10,RL10 ;flip it to +v
(1)  360/    1D4D :                     $$pos2: ; both args now +v
(1)  361/    1D4D : (MACRO)                 Ccall _divU4	;call unsigned division
(1)  362/    1D50 :                     ;now the quotient is in RL8 and the remainder is in Rp1p2
(1)  363/    1D50 : 42                      lda	sp ;get back the sign bits and restore SP
(1)  364/    1D51 : FE                      shl
(1)  365/    1D52 : 3B 74                   bnf $$done ;if the signs were different
(1)  366/    1D54 : (MACRO)                 negI4 RL8,RL8 ;negate the quotient
(1)  367/    1D74 :                     $$done:
(1)  368/    1D74 : (MACRO)                 Cretn ;and we're done - I hope!
(1)  369/    1D75 :                     
(1)  370/    1D75 :                     _dubdabx:	
(1)  371/    1D75 :                     ;experimental binay-ascii conversion using the double-dabble algorithm
(1)  372/    1D75 :                     ;thanks to Charles Richmond for the suggestion and code
(1)  373/    1D75 :                     ;long interger is passed in rp1p2
(1)  374/    1D75 :                     ;buffer pointer is passed at sp+2+4
(1)  375/    1D75 :                     ;a pointer to the 1st non-zero byte in the buffer is passed back in r15
(1)  376/    1D75 :                     ;r8-11 are used as temps
(1)  377/    1D75 :                     ;r8 is the working pointer
(1)  378/    1D75 :                     ;r9.0 is bit count(32)
(1)  379/    1D75 :                     ;r10.0 is digit count
(1)  380/    1D75 : (MACRO)             	ld2 r8,'O',sp,(2+4); pick up the buffer pointer
(1)  381/    1D81 : (MACRO)             	cpy2 r15,r8 ;save it for now
(1)  382/    1D85 : F8 0B               	ldi 11	;digit count+1 for trailing 0
(1)  383/    1D87 : A9                  	plo r9
(1)  384/    1D88 :                     $$clrlp:	;clear the passed buffer
(1)  385/    1D88 : F8 00               	ldi 0	
(1)  386/    1D8A : 58                  	str r8	;clear a byte
(1)  387/    1D8B : 18                  	inc r8
(1)  388/    1D8C : 29                  	dec r9
(1)  389/    1D8D : 89                  	glo r9	;check the count
(1)  390/    1D8E : 3A 88               	bnz $$clrlp ;back for more
(1)  391/    1D90 : (MACRO)             	cpy2 r8,r15 ;get the address back
(1)  392/    1D94 :                     
(1)  393/    1D94 : F8 20               	ldi 32	;bit count
(1)  394/    1D96 : AF                  	plo r15
(1)  395/    1D97 :                     ;now i'm going to spin off any leading 0's in the binary number
(1)  396/    1D97 :                     $$cktop:
(1)  397/    1D97 : 9C                  	ghi rp1p2-1	;get the top bit of the number
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 30 - 3/28/2013 8:52:10


(1)  398/    1D98 : FE                  	shl		;check for a 1
(1)  399/    1D99 : 33 AC               	bdf $$bitloop	;move on if we have one
(1)  400/    1D9B : (MACRO)             	shl4 rp1p2	;shift the input number
(1)  401/    1DA7 : 2F                  	dec r15		;reduce the number of times to shift
(1)  402/    1DA8 : 8F                  	glo r15
(1)  403/    1DA9 : 3A 97               	bnz $$cktop	;
(1)  404/    1DAB : 1F                  	inc r15		;our whole number was 0 but force at least one pass
(1)  405/    1DAC :                     $$bitloop:
(1)  406/    1DAC : F8 0A               	ldi 10	;digit count
(1)  407/    1DAE : A9                  	plo r9
(1)  408/    1DAF :                     $$dcklp:
(1)  409/    1DAF : 08                  	ldn r8 	;pick up a digit
(1)  410/    1DB0 : FF 05               	smi 5	;see if it's greater than 4
(1)  411/    1DB2 : 3B B7               	bnf $$dnoadd ;if not, bypass add
(1)  412/    1DB4 : FC 08               	adi 0x08	;add the 5 black and 3 more
(1)  413/    1DB6 : 58                  	str r8	;put it back
(1)  414/    1DB7 :                     $$dnoadd:
(1)  415/    1DB7 : 18                  	inc r8
(1)  416/    1DB8 : 29                  	dec r9	;decrement digit count
(1)  417/    1DB9 : 89                  	glo r9
(1)  418/    1DBA : 3A AF               	bnz $$dcklp ;and back for next digit
(1)  419/    1DBC :                     	
(1)  420/    1DBC : (MACRO)             	shl4 rp1p2 ;shift the input number
(1)  421/    1DC8 :                     	
(1)  422/    1DC8 : F8 0A               	ldi 10	;load the digit count again
(1)  423/    1DCA : A9                  	plo r9
(1)  424/    1DCB :                     ;r8 is now just past the units location and ready to walk back
(1)  425/    1DCB :                     $$dshlp:
(1)  426/    1DCB : 28                  	dec r8	;walk back from 0's position
(1)  427/    1DCC : 08                  	ldn r8	;get the digit back
(1)  428/    1DCD : 7E                  	shlc	;continue the shift
(1)  429/    1DCE : BF                  	phi r15 ;save it for the carry test
(1)  430/    1DCF : FA 0F               	ani 0x0f ;clear the 10 bit
(1)  431/    1DD1 : 58                  	str r8	;put the digit back
(1)  432/    1DD2 : 9F                  	ghi r15	;now test for carry
(1)  433/    1DD3 : FF 10               	smi 0x10 ; this will make df 1 if the 10 bit is set
(1)  434/    1DD5 : 29                  	dec r9	;decrement the digit count
(1)  435/    1DD6 : 89                  	glo r9
(1)  436/    1DD7 : 3A CB               	bnz $$dshlp ;back for more if needed
(1)  437/    1DD9 :                     	
(1)  438/    1DD9 : 2F                  	dec r15
(1)  439/    1DDA : 8F                  	glo r15
(1)  440/    1DDB : 3A AC               	bnz $$bitloop
(1)  441/    1DDD :                     	
(1)  442/    1DDD : (MACRO)             	cpy2 r15,r8	;save the starting location of the digits
(1)  443/    1DE1 : F8 0A               	ldi 10		;digit count again
(1)  444/    1DE3 : A9                  	plo r9
(1)  445/    1DE4 :                     $$upnxt:
(1)  446/    1DE4 : 08                  	ldn r8		;get digit
(1)  447/    1DE5 : F9 30               	ori 0x30	;make ascii
(1)  448/    1DE7 : 58                  	str r8		;put it back
(1)  449/    1DE8 : 18                  	inc r8		;next digit
(1)  450/    1DE9 : 29                  	dec r9		;counter
(1)  451/    1DEA : 89                  	glo r9
(1)  452/    1DEB : 3A E4               	bnz $$upnxt	;upgrade all 10 spots
(1)  453/    1DED :                     	
(1)  454/    1DED : F8 09               	ldi 9		;now to skip up to 9 zeros
(1)  455/    1DEF : A9                  	plo r9
(1)  456/    1DF0 :                     $$cknext:
(1)  457/    1DF0 : 0F                  	ldn r15		;check digit
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(lcc1802EpiloNO.inc) - page 31 - 3/28/2013 8:52:10


(1)  458/    1DF1 : FF 30               	smi 0x30	;for '0'
(1)  459/    1DF3 : 3A FA               	bnz $$done
(1)  460/    1DF5 : 1F                  	inc r15		;next digit
(1)  461/    1DF6 : 29                  	dec r9		;reduce count
(1)  462/    1DF7 : 89                  	glo r9
(1)  463/    1DF8 : 3A F0               	bnz $$cknext
(1)  464/    1DFA :                     $$done:
(1)  465/    1DFA : (MACRO)             	cretn
(1)  466/    1DFB :                     	
(1)  467/    1DFB :                     	
(1)  468/    1DFB :                     _modU4:	;32 bit unsigned remainder
(1)  469/    1DFB :                     	; just calls the 32 bit division then puts remainder into return value
(1)  470/    1DFB : (MACRO)                 Ccall _divU4
(1)  471/    1DFE : (MACRO)                 cpy4 RL8,Rp1p2
(1)  472/    1E06 : (MACRO)                 Cretn
(1)  473/    1E07 :                         
(1)  474/    1E07 :                     _modI4:	;32 bit signed remainder
(1)  475/    1E07 :                     	; just calls the 32 bit division then puts remainder into return value
(1)  476/    1E07 : (MACRO)                 Ccall _divI4
(1)  477/    1E0A : (MACRO)                 cpy4 RL8,Rp1p2
(1)  478/    1E12 : (MACRO)                 Cretn
(1)  479/    1E13 :                         
(1)  480/    1E13 :                     	
(1)  481/    1E13 :                      
    1304/    1E13 :                     	include LCC1802fp.inc
(1)    1/    1E13 :                     ;from http://www.elf-emulation.com/software/fp.asm - thanks to mike Reilley
(1)    2/    1E13 :                     ;maybe originally from RCA
(1)    3/    1E13 :                     ;these routines use ALL the registers from 6-15!
(1)    4/    1E13 :                     ;8-15 were more or less available to start with
(1)    5/    1E13 :                     ;it saves 6 when it uses it
(1)    6/    1E13 :                     ;I save 7 on entry and restore on exit
(1)    7/    1E13 :                     ;to keep my sanity I renamed some register equates where I was changing them e.g. F7 used to be RB
(1)    8/    1E13 : =BH                 FB	equ	11	;was R9
(1)    9/    1E13 : =9H                 F9	equ	9	;was R7
(1)   10/    1E13 : =7H                 F7	equ	7	;was RB
(1)   11/    1E13 :                     
(1)   12/    1E13 :                     ; *** Convert signed long to float
(1)   13/    1E13 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   14/    1E13 :                     ; *** result in same register
(1)   15/    1E13 :                     ; *** uses memaddr.1 for sign, .0 for shift count/exponent
(1)   16/    1E13 :                     	align 256
(1)   17/    1F00 : F8 00               cvif4:	ldi	0
(1)   18/    1F02 : BE                  	phi	memaddr	;sign
(1)   19/    1F03 : F8 96               	ldi	150	;150 is  the 127 exponent bias plus the 23 required to shift a long 1 to bit 23
(1)   20/    1F05 : AE                  	plo	memaddr	;
(1)   21/    1F06 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   22/    1F07 : 32 30               	bz	$$nxt	;keep testing for 0
(1)   23/    1F09 : FE                  	shl		;sign bit to df
(1)   24/    1F0A : 3B 39               	bnf	$$sgnpos ;number is >0
(1)   25/    1F0C : 76                  	shrc		;shift it back so we know byte is non-zerro
(1)   26/    1F0D : BE                  	phi	memaddr	;save it
(1)   27/    1F0E : (MACRO)             	negi4	RL8,RL8	;flip the number
(1)   28/    1F2E : 30 39               	br	$$sgnpos ;go handle positive long
(1)   29/    1F30 : 88                  $$nxt:	glo	RL8-1	;next byte
(1)   30/    1F31 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   31/    1F33 : 99                  	ghi	RL8	;next byte
(1)   32/    1F34 : 3A 39               	bnz	$$sgnpos ;sign is positive, number is not 0
(1)   33/    1F36 : 89                  	glo	RL8	;last byte
(1)   34/    1F37 : 32 6F               	bz	$$done	;the whole thing is zero so we're done
(1)   35/    1F39 : 98                  $$sgnpos: ghi	RL8-1	;top byte - begin shifting right to clear it
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 32 - 3/28/2013 8:52:10


(1)   36/    1F3A : 32 4B               	bz	$$shl	;if it's zero we're done right shifting
(1)   37/    1F3C : 1E                  	inc	memaddr	;increase exponent 1 for each right shift
(1)   38/    1F3D : (MACRO)             	shru4	RL8
(1)   39/    1F49 : 30 39               	br	$$sgnpos
(1)   40/    1F4B : 88                  $$shl:	glo	RL8-1	;check bit 23
(1)   41/    1F4C : FA 80               	ani	0x80	;isolate it
(1)   42/    1F4E : 3A 5F               	bnz	$$shdn	;if it's on we're done here
(1)   43/    1F50 : 2E                  	dec	memaddr	;decrease exponent 1 for each left shift
(1)   44/    1F51 : (MACRO)             	shl4	RL8	;shift mantissa left one
(1)   45/    1F5D : 30 4B               	br	$$shl
(1)   46/    1F5F : 8E                  $$shdn:	glo	memaddr	;get the exponent
(1)   47/    1F60 : F6                  	shr		;shift right so it can go into bits 31-24
(1)   48/    1F61 : B8                  	phi	RL8-1	;put top bits of exponent into place
(1)   49/    1F62 : 33 68               	bdf	$$setsgn ;if the bit 0 is on we're done
(1)   50/    1F64 : 88                  	glo	RL8-1	;get the byte
(1)   51/    1F65 : FA 7F               	ani	0x7f	;clear bit 23
(1)   52/    1F67 : A8                  	plo	RL8-1	;put it back
(1)   53/    1F68 : 9E                  $$setsgn: ghi	memaddr	;get the original sign byte
(1)   54/    1F69 : 32 6F               	bz	$$done	;sign bit is already zero so we're done
(1)   55/    1F6B : 98                  	ghi	RL8-1	;get the sign byte
(1)   56/    1F6C : F9 80               	ori	0x80	;set the sign bit
(1)   57/    1F6E : B8                  	phi	RL8-1	;place it
(1)   58/    1F6F : (MACRO)             $$done:	Cretn		;and we're done
(1)   59/    1F70 :                     	
(1)   60/    1F70 :                     
(1)   61/    1F70 :                     
(1)   62/    1F70 :                     ; *** Convert float to signed long
(1)   63/    1F70 :                     ; *** RL8-1:RL8 is the number to convert(8:9)
(1)   64/    1F70 :                     ; *** result in same register
(1)   65/    1F70 :                     	align 256
(1)   66/    2000 :                     cvfi4:
(1)   67/    2000 : 98                  	ghi	RL8-1	;get sign and bits 7-1 of exponent
(1)   68/    2001 : BE                  	phi	memaddr ;save for later
(1)   69/    2002 : 88                  	glo	RL8-1	;get bit 0 of exponent
(1)   70/    2003 : FE                  	shl		;shift to df
(1)   71/    2004 : 9E                  	ghi	memaddr	;get exponent 7-1
(1)   72/    2005 : 7E                  	shlc		;combine with 0
(1)   73/    2006 :                     ;the following sequence is equivalent to sdi 150; I did it this way to coddle my emulator which doesn't do this properly.
(1)   74/    2006 : 22                  	dec	sp
(1)   75/    2007 : 52                  	str	sp
(1)   76/    2008 : F8 96               	ldi	150
(1)   77/    200A : F7                  	sm		;calculate shift count needed
(1)   78/    200B :                     ;*******note - the df flag set here is tested later
(1)   79/    200B : AE                  	plo	memaddr
(1)   80/    200C : 12                  	inc	sp	;release work area
(1)   81/    200D :                     ;end of sdi 150 sequence - now convert the mantissa to unsigned long
(1)   82/    200D : F8 00               	ldi	0
(1)   83/    200F : B8                  	phi	RL8-1	;clear the top byte of the float
(1)   84/    2010 : 88                  	glo	RL8-1	;get the next byte
(1)   85/    2011 : F9 80               	ori	0x80	;add in the implied 1 bit
(1)   86/    2013 : A8                  	plo	RL8-1	;put it back
(1)   87/    2014 : 8E                  	glo	memaddr	;make sure there's at least 1 shift
(1)   88/    2015 : 32 3B               	bz	$$sign
(1)   89/    2017 :                     ;**********note df is set from subtraction before setting mantissa
(1)   90/    2017 : 3B 2B               	bnf	$$lsh ; if the shift count is negative
(1)   91/    2019 :                     
(1)   92/    2019 : (MACRO)             $$shr:	shru4	RL8
(1)   93/    2025 : 2E                  	dec	memaddr	;check shift count
(1)   94/    2026 : 8E                  	glo	memaddr
(1)   95/    2027 : 3A 19               	bnz	$$shr	;complete the shift
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 33 - 3/28/2013 8:52:10


(1)   96/    2029 : 30 3B               	br	$$sign
(1)   97/    202B :                     
(1)   98/    202B :                     ;handle negative shift as best I can - gigo
(1)   99/    202B : (MACRO)             $$lsh: 	shl4	RL8	;shift once
(1)  100/    2037 : 1E                  	inc	memaddr
(1)  101/    2038 : 8E                  	glo	memaddr
(1)  102/    2039 : 3A 2B               	bnz	$$lsh	
(1)  103/    203B :                     	
(1)  104/    203B : 9E                  $$sign:	ghi	memaddr	;now the sign
(1)  105/    203C : FE                  	shl		;shift sign bit into df
(1)  106/    203D : 3B 61               	bnf	$$done
(1)  107/    203F : (MACRO)             	negi4	RL8,RL8	;negate the number if needed
(1)  108/    205F : 30 61               	br	$$done	; and return
(1)  109/    2061 :                     
(1)  110/    2061 : (MACRO)             $$done:	Cretn		;and we're done
(1)  111/    2062 :                     
(1)  112/    2062 :                     ; *** Check if character is numeric
(1)  113/    2062 :                     ; *** D - char to check
(1)  114/    2062 :                     ; *** Returns DF=1 if numeric
(1)  115/    2062 :                     ; ***         DF=0 if not
(1)  116/    2062 : AE                  f_isnum:   plo     r14                 ; save a copy
(1)  117/    2063 : FF 30                          smi     '0'                 ; check for below zero
(1)  118/    2065 : 3B 6E                          bnf     fails               ; jump if below
(1)  119/    2067 : FF 0A                          smi     10                  ; see if above
(1)  120/    2069 : 33 6E                          bdf     fails               ; fails if so
(1)  121/    206B : FF 00               passes:    smi     0                   ; signal success
(1)  122/    206D : C8                             lskp
(1)  123/    206E : FC 00               fails:     adi     0                   ; signal failure
(1)  124/    2070 : 8E                             glo     r14                 ; recover character
(1)  125/    2071 : D5                             sep     RRET                ; and return; *******************************
(1)  126/    2072 :                     ; *** Shift R8:F9 right 1 bit ***
(1)  127/    2072 :                     ; *******************************
(1)  128/    2072 : 98                  fp_shr_1:  ghi   r8                    ; shift high word right
(1)  129/    2073 : F6                             shr
(1)  130/    2074 : B8                             phi   r8
(1)  131/    2075 : 88                             glo   r8
(1)  132/    2076 : 76                             shrc
(1)  133/    2077 : A8                             plo   r8
(1)  134/    2078 : 99                             ghi   F9                    ; shift low word right
(1)  135/    2079 : 76                             shrc
(1)  136/    207A : B9                             phi   F9
(1)  137/    207B : 89                             glo   F9
(1)  138/    207C : 76                             shrc
(1)  139/    207D : A9                             plo   F9
(1)  140/    207E : (MACRO)                        Cretn
(1)  141/    207F :                     
(1)  142/    207F :                     ; ******************************
(1)  143/    207F :                     ; *** Shift R8:F9 left 1 bit ***
(1)  144/    207F :                     ; ******************************
(1)  145/    207F : 89                  fp_shl_1:  glo   F9
(1)  146/    2080 : FE                             shl
(1)  147/    2081 : A9                             plo   F9
(1)  148/    2082 : 99                             ghi   F9
(1)  149/    2083 : 7E                             shlc
(1)  150/    2084 : B9                             phi   F9
(1)  151/    2085 : 88                             glo   r8
(1)  152/    2086 : 7E                             shlc
(1)  153/    2087 : A8                             plo   r8
(1)  154/    2088 : 98                             ghi   r8
(1)  155/    2089 : 7E                             shlc
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 34 - 3/28/2013 8:52:10


(1)  156/    208A : B8                             phi   r8
(1)  157/    208B : D5                             sep   RRET
(1)  158/    208C :                     
(1)  159/    208C :                     ; **********************
(1)  160/    208C :                     ; *** R8:F9 += RA:FB ***
(1)  161/    208C :                     ; **********************
(1)  162/    208C : 8B                  fp_add_12: glo   FB
(1)  163/    208D : 22                  	   dec r2	;wjr - make a work area
(1)  164/    208E : 52                             str   r2
(1)  165/    208F : 89                             glo   F9
(1)  166/    2090 : F4                             add
(1)  167/    2091 : A9                             plo   F9
(1)  168/    2092 : 9B                             ghi   FB
(1)  169/    2093 : 52                             str   r2
(1)  170/    2094 : 99                             ghi   F9
(1)  171/    2095 : 74                             adc
(1)  172/    2096 : B9                             phi   F9
(1)  173/    2097 : 8A                             glo   R10
(1)  174/    2098 : 52                             str   r2
(1)  175/    2099 : 88                             glo   r8
(1)  176/    209A : 74                             adc
(1)  177/    209B : A8                             plo   r8
(1)  178/    209C : 9A                             ghi   R10
(1)  179/    209D : 52                             str   r2
(1)  180/    209E : 98                             ghi   r8
(1)  181/    209F : 74                             adc
(1)  182/    20A0 : B8                             phi   r8
(1)  183/    20A1 : 12                             inc	r2	;wjr - release work area
(1)  184/    20A2 : (MACRO)                        Cretn
(1)  185/    20A3 :                     
(1)  186/    20A3 :                     ; *******************************
(1)  187/    20A3 :                     ; *** Shift RF:RD right 1 bit ***
(1)  188/    20A3 :                     ; *******************************
(1)  189/    20A3 : 9F                  fp_shr_fd: ghi   R15                    ; shift high word right
(1)  190/    20A4 : F6                             shr
(1)  191/    20A5 : BF                             phi   R15
(1)  192/    20A6 : 8F                             glo   R15
(1)  193/    20A7 : 76                             shrc
(1)  194/    20A8 : AF                             plo   R15
(1)  195/    20A9 : 9D                             ghi   R13                    ; shift low word right
(1)  196/    20AA : 76                             shrc
(1)  197/    20AB : BD                             phi   R13
(1)  198/    20AC : 8D                             glo   R13
(1)  199/    20AD : 76                             shrc
(1)  200/    20AE : AD                             plo   R13
(1)  201/    20AF : (MACRO)                        Cretn
(1)  202/    20B0 :                     
(1)  203/    20B0 :                     ; *************************************
(1)  204/    20B0 :                     ; *** Scale number to high bit is 1 ***
(1)  205/    20B0 :                     ; *** R8:F9 - Number to scale       ***
(1)  206/    20B0 :                     ; *** RF.1  - Exponent for number   ***
(1)  207/    20B0 :                     ; *** F7.0  - Sign bit (bit 0) ***
(1)  208/    20B0 :                     ; *** Returns: R8:F9 - final sp num ***
(1)  209/    20B0 :                     ; *************************************
(1)  210/    20B0 : 88                  fp_sc_up:  glo   r8                    ; need high bit to be a 1
(1)  211/    20B1 : FA 80                          ani   080h                  ; check it
(1)  212/    20B3 : CA 20 C0                       lbnz  fp_sc_cln             ; jump if good
(1)  213/    20B6 : (MACRO)                        Ccall fp_shl_1              ; shift answer left
(1)  214/    20B9 : 9F                             ghi   R15                    ; get exp1
(1)  215/    20BA : FF 01                          smi   1                     ; minus 1
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 35 - 3/28/2013 8:52:10


(1)  216/    20BC : BF                             phi   R15                    ; and put it back
(1)  217/    20BD : C0 20 B0                       lbr   fp_sc_up              ; loop back intil msbit is 1
(1)  218/    20C0 : 88                  fp_sc_cln: glo   r8                    ; get high byte
(1)  219/    20C1 : FE                             shl                         ; shift out high 1 bit
(1)  220/    20C2 : A8                             plo   r8                    ; set aside
(1)  221/    20C3 : 9F                             ghi   R15                    ; get exponent byte
(1)  222/    20C4 : B8                             phi   r8                    ; write other 7 bits to r8.1
(1)  223/    20C5 : F6                             shr                         ; shift bit 0 into DF
(1)  224/    20C6 : 88                             glo   r8                    ; get high byte of mantissa
(1)  225/    20C7 : 76                             shrc                        ; shift bit 0 of expnent in
(1)  226/    20C8 : A8                             plo   r8                    ; and put it back
(1)  227/    20C9 : 87                             glo   F7                   ; get signs
(1)  228/    20CA : F6                             shr                         ; get sign 1
(1)  229/    20CB : 98                             ghi   r8                    ; recover exponent
(1)  230/    20CC : 76                             shrc                        ; shift in sign
(1)  231/    20CD : B8                             phi   r8                    ; put it back
(1)  232/    20CE : 12                             inc	r2	;wjr release work area
(1)  233/    20CF : (MACRO)             	   popr R13	;wjr restore param regs
(1)  234/    20D3 : (MACRO)             	   popr R12	;wjr
(1)  235/    20D7 : (MACRO)                        popr	F7	;wjr restore c variable register
(1)  236/    20DB : (MACRO)                        Cretn                       ; return to caller
(1)  237/    20DC :                     
(1)  238/    20DC :                     ; ************************************
(1)  239/    20DC :                     ; *** Get exponenst from arguments ***
(1)  240/    20DC :                     ; *** R8:F9 - Arg 1                ***
(1)  241/    20DC :                     ; *** RA:FB - Arg 2                ***
(1)  242/    20DC :                     ; *** Returns: RF.1 - exp1         ***
(1)  243/    20DC :                     ; ***          RF.0 - exp2         ***
(1)  244/    20DC :                     ; ************************************
(1)  245/    20DC : 88                  fp_getexp: glo   r8                    ; get exponent of arg1 (bit 0)
(1)  246/    20DD : FE                             shl                         ; shift it into DF
(1)  247/    20DE : 98                             ghi   r8                    ; get top 7 bits
(1)  248/    20DF : 7E                             shlc                        ; shift in first bit
(1)  249/    20E0 : BF                             phi   R15                    ; put exp1 into RF.1
(1)  250/    20E1 :                                ;str   r2    wjr - this is never used; place into memory as well
(1)  251/    20E1 : 8A                             glo   R10                    ; get exponent of arg2 (bit 0)
(1)  252/    20E2 : FE                             shl                         ; shift it into DF
(1)  253/    20E3 : 9A                             ghi   R10                    ; get top 7 bits
(1)  254/    20E4 : 7E                             shlc                        ; shift in first bit
(1)  255/    20E5 : AF                             plo   R15                    ; put into RF
(1)  256/    20E6 : D5                             sep   RRET                  ; return to caller
(1)  257/    20E7 :                     
(1)  258/    20E7 :                     ; ************************************
(1)  259/    20E7 :                     ; *** Get signs from arguments     ***
(1)  260/    20E7 :                     ; *** R8:F9 - Arg 1                ***
(1)  261/    20E7 :                     ; *** RA:FB - Arg 2                ***
(1)  262/    20E7 :                     ; *** Returns: F7.0 - signs        ***
(1)  263/    20E7 :                     ; ************************************
(1)  264/    20E7 : 98                  fp_getsgn: ghi   r8                    ; get sign of arg1
(1)  265/    20E8 : FE                             shl                         ; shift into DF
(1)  266/    20E9 : 9A                             ghi   R10                    ; get sign of arg2
(1)  267/    20EA : 7E                             shlc                        ; shift into DF, sign of arg1 to bit 0
(1)  268/    20EB : 7E                             shlc                        ; now shift in sign of arg2
(1)  269/    20EC : A7                             plo   F7                    ; save them
(1)  270/    20ED : (MACRO)                        Cretn                       ; return to caller
(1)  271/    20EE :                     
(1)  272/    20EE :                     ; ***************************************
(1)  273/    20EE :                     ; *** Add 2 SP floating point numbers ***
(1)  274/    20EE :                     ; *** R8:F9 - Arg 1                   ***
(1)  275/    20EE :                     ; *** RA:FB - Arg 2                   ***
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 36 - 3/28/2013 8:52:10


(1)  276/    20EE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  277/    20EE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  278/    20EE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  279/    20EE :                     ; ***        F7.0 - signs        ***
(1)  280/    20EE :                     ; ***************************************
(1)  281/    20EE : 98                  fp_add:   ghi   r8                    ; check arg1 for zero
(1)  282/    20EF : CA 21 07                       lbnz  add_a1nz
(1)  283/    20F2 : 88                             glo   r8
(1)  284/    20F3 : CA 21 07                       lbnz  add_a1nz
(1)  285/    20F6 : 99                             ghi   F9
(1)  286/    20F7 : CA 21 07                       lbnz  add_a1nz
(1)  287/    20FA : 89                             glo   F9
(1)  288/    20FB : CA 21 07                       lbnz  add_a1nz
(1)  289/    20FE : 9A                             ghi   R10                    ; transfer arg2 to answer
(1)  290/    20FF : B8                             phi   r8
(1)  291/    2100 : 8A                             glo   R10
(1)  292/    2101 : A8                             plo   r8
(1)  293/    2102 : 9B                             ghi   FB
(1)  294/    2103 : B9                             phi   F9
(1)  295/    2104 : 8B                             glo   FB
(1)  296/    2105 : A9                             plo   F9
(1)  297/    2106 : (MACRO)                        Cretn                        ; return to caller
(1)  298/    2107 :                     
(1)  299/    2107 : 9A                  add_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  300/    2108 : CA 21 18                       lbnz  add_a2nz
(1)  301/    210B : 8A                             glo   R10
(1)  302/    210C : CA 21 18                       lbnz  add_a2nz
(1)  303/    210F : 9B                             ghi   FB
(1)  304/    2110 : CA 21 18                       lbnz  add_a2nz
(1)  305/    2113 : 8B                             glo   FB
(1)  306/    2114 : CA 21 18                       lbnz  add_a2nz
(1)  307/    2117 : (MACRO)                        Cretn                       ; return arg1 as answer
(1)  308/    2118 :                                
(1)  309/    2118 : (MACRO)             add_a2nz:  pushr F7	;wjr save c variable register
(1)  310/    211D : (MACRO)             	   pushr R12	;wjr save param regs
(1)  311/    2122 : (MACRO)             	   pushr R13	;wjr
(1)  312/    2127 : 22                  	   dec	r2	;wjr - make a work area
(1)  313/    2128 : (MACRO)             	   Ccall fp_getexp             ; get exponents
(1)  314/    212B : 9F                             ghi   R15
(1)  315/    212C : 52                             str   r2
(1)  316/    212D : 8F                             glo   R15
(1)  317/    212E : F7                             sm                          ; perfrom exp2 - exp1
(1)  318/    212F : CB 21 50                       lbnf  add_ns                ; jump if no swap needed
(1)  319/    2132 :                     
(1)  320/    2132 : 98                             ghi   r8                    ; swap arg1 with arg2
(1)  321/    2133 : AE                             plo   R14
(1)  322/    2134 : 9A                             ghi   R10
(1)  323/    2135 : B8                             phi   r8
(1)  324/    2136 : 8E                             glo   R14
(1)  325/    2137 : BA                             phi   R10
(1)  326/    2138 : 88                             glo   r8
(1)  327/    2139 : AE                             plo   R14
(1)  328/    213A : 8A                             glo   R10
(1)  329/    213B : A8                             plo   r8
(1)  330/    213C : 8E                             glo   R14
(1)  331/    213D : AA                             plo   R10
(1)  332/    213E : 99                             ghi   F9                    ; swap arg1 with arg2
(1)  333/    213F : AE                             plo   R14
(1)  334/    2140 : 9B                             ghi   FB
(1)  335/    2141 : B9                             phi   F9
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 37 - 3/28/2013 8:52:10


(1)  336/    2142 : 8E                             glo   R14
(1)  337/    2143 : BB                             phi   FB
(1)  338/    2144 : 89                             glo   F9
(1)  339/    2145 : AE                             plo   R14
(1)  340/    2146 : 8B                             glo   FB
(1)  341/    2147 : A9                             plo   F9
(1)  342/    2148 : 8E                             glo   R14
(1)  343/    2149 : AB                             plo   FB
(1)  344/    214A : 9F                             ghi   R15                    ; swap exponents
(1)  345/    214B : AE                             plo   R14
(1)  346/    214C : 8F                             glo   R15
(1)  347/    214D : BF                             phi   R15
(1)  348/    214E : 8E                             glo   R14
(1)  349/    214F : AF                             plo   R15
(1)  350/    2150 : (MACRO)             add_ns:    ccall fp_getsgn              ; get signs of arguments
(1)  351/    2153 : F8 00                          ldi   0                     ; setup mantissas
(1)  352/    2155 : B8                             phi   r8
(1)  353/    2156 : BA                             phi   R10
(1)  354/    2157 : F8 80                          ldi   128                   ; need to set high bit in mantissa
(1)  355/    2159 : 52                             str   r2
(1)  356/    215A : 88                             glo   r8
(1)  357/    215B : F1                             or
(1)  358/    215C : A8                             plo   r8
(1)  359/    215D : 8A                             glo   R10
(1)  360/    215E : F1                             or
(1)  361/    215F : AA                             plo   R10
(1)  362/    2160 : 9F                             ghi   R15                    ; get exp1
(1)  363/    2161 : 52                             str   r2                    ; place into memory
(1)  364/    2162 : 8F                  add_lp1:   glo   R15                    ; get exp2
(1)  365/    2163 : F7                             sm                          ; see if match to exp1
(1)  366/    2164 : C2 21 77                       lbz   add_lp1dn             ; jump if match
(1)  367/    2167 : 8F                             glo   R15                    ; need to increase it
(1)  368/    2168 : FC 01                          adi   1
(1)  369/    216A : AF                             plo   R15
(1)  370/    216B : 8A                             glo   R10                    ; now shift arg2 over 1 bit
(1)  371/    216C : F6                             shr
(1)  372/    216D : AA                             plo   R10
(1)  373/    216E : 9B                             ghi   FB
(1)  374/    216F : 76                             shrc
(1)  375/    2170 : BB                             phi   FB
(1)  376/    2171 : 8B                             glo   FB
(1)  377/    2172 : 76                             shrc
(1)  378/    2173 : AB                             plo   FB
(1)  379/    2174 : C0 21 62                       lbr   add_lp1               ; keep shifting until exponents match
(1)  380/    2177 : 87                  add_lp1dn: glo   F7                    ; see if signs match
(1)  381/    2178 : 52                             str   r2
(1)  382/    2179 : F6                             shr
(1)  383/    217A : F3                             xor
(1)  384/    217B : FA 01                          ani   1                     ; keep only bottom bit
(1)  385/    217D : CA 21 86                       lbnz  add_nm                ; jump if signs do not match
(1)  386/    2180 : (MACRO)                        Ccall fp_add_12             ; perform arg1 += arg2
(1)  387/    2183 : C0 21 BF                       lbr   add_fnl               ; jump to clean up
(1)  388/    2186 : 8B                  add_nm:    glo   FB                    ; perform arg1 - arg2
(1)  389/    2187 : 52                             str   r2
(1)  390/    2188 : 89                             glo   F9
(1)  391/    2189 : F7                             sm
(1)  392/    218A : AC                             plo   R12                    ; place into RD:RC
(1)  393/    218B : 9B                             ghi   FB
(1)  394/    218C : 52                             str   r2
(1)  395/    218D : 99                             ghi   F9
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 38 - 3/28/2013 8:52:10


(1)  396/    218E : 77                             smb
(1)  397/    218F : BC                             phi   R12
(1)  398/    2190 : 8A                             glo   R10
(1)  399/    2191 : 52                             str   r2
(1)  400/    2192 : 88                             glo   r8
(1)  401/    2193 : 77                             smb
(1)  402/    2194 : AD                             plo   R13
(1)  403/    2195 : 9A                             ghi   R10
(1)  404/    2196 : 52                             str   r2
(1)  405/    2197 : 98                             ghi   r8
(1)  406/    2198 : 77                             smb
(1)  407/    2199 : BD                             phi   R13
(1)  408/    219A : CB 21 A8                       lbnf  add_no                ; jump if arg2 was larger than arg1
(1)  409/    219D : 9D                             ghi   R13                    ; transfer result to arg1
(1)  410/    219E : B8                             phi   r8
(1)  411/    219F : 8D                             glo   R13
(1)  412/    21A0 : A8                             plo   r8
(1)  413/    21A1 : 9C                             ghi   R12
(1)  414/    21A2 : B9                             phi   F9
(1)  415/    21A3 : 8C                             glo   R12
(1)  416/    21A4 : A9                             plo   F9
(1)  417/    21A5 : C0 21 BF                       lbr   add_fnl               ; finalize
(1)  418/    21A8 : 89                  add_no:    glo   F9                    ; perform arg1 = arg2 - arg1
(1)  419/    21A9 : 52                             str   r2
(1)  420/    21AA : 8B                             glo   FB
(1)  421/    21AB : F7                             sm
(1)  422/    21AC : A9                             plo   F9
(1)  423/    21AD : 99                             ghi   F9
(1)  424/    21AE : 52                             str   r2
(1)  425/    21AF : 9B                             ghi   FB
(1)  426/    21B0 : 77                             smb
(1)  427/    21B1 : B9                             phi   F9
(1)  428/    21B2 : 88                             glo   r8
(1)  429/    21B3 : 52                             str   r2
(1)  430/    21B4 : 8A                             glo   R10
(1)  431/    21B5 : 77                             smb
(1)  432/    21B6 : A8                             plo   r8
(1)  433/    21B7 : 98                             ghi   r8
(1)  434/    21B8 : 52                             str   r2
(1)  435/    21B9 : 9A                             ghi   R10
(1)  436/    21BA : 77                             smb
(1)  437/    21BB : B8                             phi   r8
(1)  438/    21BC : 87                             glo   F7                    ; move sign 2 to sign1
(1)  439/    21BD : FE                             shl
(1)  440/    21BE : A7                             plo   F7
(1)  441/    21BF : 98                  add_fnl:   ghi   r8                    ; check for zero result
(1)  442/    21C0 : CA 21 D0                       lbnz  add_nz                ; jump if not
(1)  443/    21C3 : 88                             glo   r8
(1)  444/    21C4 : CA 21 D0                       lbnz  add_nz
(1)  445/    21C7 : 99                             ghi   F9
(1)  446/    21C8 : CA 21 D0                       lbnz  add_nz
(1)  447/    21CB : 89                             glo   F9
(1)  448/    21CC : CA 21 D0                       lbnz  add_nz
(1)  449/    21CF : (MACRO)                        Cretn                       ; return the zero
(1)  450/    21D0 : 98                  add_nz:    ghi   r8                    ; see if answer is beyond 24 bits
(1)  451/    21D1 : C2 21 DE                       lbz   add_nx                ; jump if not
(1)  452/    21D4 : (MACRO)                        Ccall fp_shr_1              ; shift answer to the right
(1)  453/    21D7 : 9F                             ghi   R15                    ; get exp1
(1)  454/    21D8 : FC 01                          adi   1                     ; increment it
(1)  455/    21DA : BF                             phi   R15                    ; and put it back
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 39 - 3/28/2013 8:52:10


(1)  456/    21DB : C0 21 D0                       lbr   add_nz                ; keep going until not > 24 bits
(1)  457/    21DE :                     
(1)  458/    21DE : 87                  add_nx:    glo   F7                    ; move sign 1 to low bit
(1)  459/    21DF : F6                             shr
(1)  460/    21E0 : A7                             plo   F7
(1)  461/    21E1 : C0 20 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  462/    21E4 :                     
(1)  463/    21E4 :                     ; ***************************************
(1)  464/    21E4 :                     ; *** sub 2 SP floating point numbers ***
(1)  465/    21E4 :                     ; *** R8:F9 - Arg 1                   ***
(1)  466/    21E4 :                     ; *** RA:FB - Arg 2                   ***
(1)  467/    21E4 :                     ; *** Returns: R8:F9 - Answer         ***
(1)  468/    21E4 :                     ; ***************************************
(1)  469/    21E4 : 9A                  fp_sub:    ghi   R10                    ; change sign of arg2
(1)  470/    21E5 : FB 80                          xri   080h
(1)  471/    21E7 : BA                             phi   R10                    ; and put it back
(1)  472/    21E8 : C0 20 EE                       lbr   fp_add                ; now just add
(1)  473/    21EB :                     
(1)  474/    21EB :                     ; ***************************************
(1)  475/    21EB :                     ; *** Div 2 SP floating point numbers ***
(1)  476/    21EB :                     ; *** R8:F9 - Arg 1                   ***
(1)  477/    21EB :                     ; *** RA:FB - Arg 2                   ***
(1)  478/    21EB :                     ; *** Returns: R8:F9 - Answer         ***
(1)  479/    21EB :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  480/    21EB :                     ; ***        RF.1 - exponent of arg2  ***
(1)  481/    21EB :                     ; ***        F7.0 - signs        ***
(1)  482/    21EB :                     ; ***************************************
(1)  483/    21EB : 98                  fp_div:    ghi   r8                    ; check arg1 for zero
(1)  484/    21EC : CA 21 FC                       lbnz  div_a1nz
(1)  485/    21EF : 88                             glo   r8
(1)  486/    21F0 : CA 21 FC                       lbnz  div_a1nz
(1)  487/    21F3 : 99                             ghi   F9
(1)  488/    21F4 : CA 21 FC                       lbnz  div_a1nz
(1)  489/    21F7 : 89                             glo   F9
(1)  490/    21F8 : CA 21 FC                       lbnz  div_a1nz
(1)  491/    21FB : (MACRO)                        Cretn	                ; just return the zero
(1)  492/    21FC : 9A                  div_a1nz:  ghi   R10                    ; check arg2 for zero
(1)  493/    21FD : CA 22 1A                       lbnz  div_a2nz
(1)  494/    2200 : 8A                             glo   R10
(1)  495/    2201 : CA 22 1A                       lbnz  div_a2nz
(1)  496/    2204 : 9B                             ghi   FB
(1)  497/    2205 : CA 22 1A                       lbnz  div_a2nz
(1)  498/    2208 : 8B                             glo   FB
(1)  499/    2209 : CA 22 1A                       lbnz  div_a2nz
(1)  500/    220C : 98                             ghi   r8                    ; need sign of arg1
(1)  501/    220D : FA 80                          ani   080h                  ; want only sign
(1)  502/    220F : F9 7F                          ori   07fh                  ; exponent will be all ones
(1)  503/    2211 : B8                             phi   r8                    ; put into answer
(1)  504/    2212 : F8 80                          ldi   080h                  ; build rest of answer
(1)  505/    2214 : A8                             plo   r8 
(1)  506/    2215 : F8 00                          ldi   0
(1)  507/    2217 : B9                             phi   F9
(1)  508/    2218 : A9                             plo   F9
(1)  509/    2219 : (MACRO)                        Cretn                  	; and return to caller
(1)  510/    221A :                     
(1)  511/    221A : (MACRO)             div_a2nz:  pushr F7	;wjr save the C variable
(1)  512/    221F : (MACRO)             	   pushr R12	;wjr save param regs
(1)  513/    2224 : (MACRO)             	   pushr R13	;wjr
(1)  514/    2229 : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  515/    222A :                     
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 40 - 3/28/2013 8:52:10


(1)  516/    222A : (MACRO)             	   Ccall fp_getexp              ; get exponents
(1)  517/    222D : (MACRO)                        Ccall fp_getsgn		; get signs
(1)  518/    2230 : 8F                             glo   R15                    ; get exp2
(1)  519/    2231 : FF 7F                          smi   127                   ; remove bias
(1)  520/    2233 : 52                             str   r2                    ; place into memory
(1)  521/    2234 : 9F                             ghi   R15                    ; get exp1
(1)  522/    2235 : FF 7F                          smi   127                   ; remove bias
(1)  523/    2237 : F7                             sm                          ; perform exp1 - exp2
(1)  524/    2238 : FC 7F                          adi   127                   ; put bias back in
(1)  525/    223A : 73                             stxd                        ; save onto stack
(1)  526/    223B : 87                             glo   F7                    ; determine sign for answer
(1)  527/    223C : 52                             str   r2
(1)  528/    223D : F6                             shr
(1)  529/    223E : F3                             xor
(1)  530/    223F : 73                             stxd                        ; place onto stack
(1)  531/    2240 : F8 00                          ldi   0                     ; setup man
(1)  532/    2242 : BA                             phi   R10
(1)  533/    2243 : 8A                             glo   R10
(1)  534/    2244 : F9 80                          ori   080h
(1)  535/    2246 : AA                             plo   R10
(1)  536/    2247 : F8 00                          ldi   0                     ; setup div
(1)  537/    2249 : B8                             phi   r8
(1)  538/    224A : 88                             glo   r8
(1)  539/    224B : F9 80                          ori   080h
(1)  540/    224D : A8                             plo   r8
(1)  541/    224E : F8 00                          ldi   0                     ; setup result
(1)  542/    2250 : BC                             phi   R12
(1)  543/    2251 : AC                             plo   R12
(1)  544/    2252 : B7                             phi   F7
(1)  545/    2253 : A7                             plo   F7
(1)  546/    2254 : AF                             plo   R15                    ; setup quotient
(1)  547/    2255 : BF                             phi   R15
(1)  548/    2256 : BD                             phi   R13
(1)  549/    2257 : AD                             plo   R13
(1)  550/    2258 : F8 80                          ldi   080h
(1)  551/    225A : AF                             plo   R15
(1)  552/    225B : 98                  div_lp:    ghi   r8                    ; check div for nonzero
(1)  553/    225C : CA 22 6E                       lbnz  div_go1
(1)  554/    225F : 88                             glo   r8
(1)  555/    2260 : CA 22 6E                       lbnz  div_go1
(1)  556/    2263 : 99                             ghi   F9
(1)  557/    2264 : CA 22 6E                       lbnz  div_go1
(1)  558/    2267 : 89                             glo   F9
(1)  559/    2268 : CA 22 6E                       lbnz  div_go1
(1)  560/    226B : C0 22 CE                       lbr   div_z
(1)  561/    226E : 9A                  div_go1:   ghi   R10
(1)  562/    226F : CA 22 81                       lbnz  div_go
(1)  563/    2272 : 8A                             glo   R10
(1)  564/    2273 : CA 22 81                       lbnz  div_go
(1)  565/    2276 : 9B                             ghi   FB
(1)  566/    2277 : CA 22 81                       lbnz  div_go
(1)  567/    227A : 8B                             glo   FB
(1)  568/    227B : CA 22 81                       lbnz  div_go
(1)  569/    227E : C0 22 CE                       lbr   div_z                 ; nothing more to do
(1)  570/    2281 : 8B                  div_go:    glo   FB                    ; see if div > man
(1)  571/    2282 : 52                             str   r2
(1)  572/    2283 : 89                             glo   F9
(1)  573/    2284 : F7                             sm
(1)  574/    2285 : 9B                             ghi   FB
(1)  575/    2286 : 52                             str   r2
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 41 - 3/28/2013 8:52:10


(1)  576/    2287 : 99                             ghi   F9
(1)  577/    2288 : 77                             smb
(1)  578/    2289 : 8A                             glo   R10
(1)  579/    228A : 52                             str   r2
(1)  580/    228B : 88                             glo   r8
(1)  581/    228C : 77                             smb
(1)  582/    228D : 9A                             ghi   R10
(1)  583/    228E : 52                             str   r2
(1)  584/    228F : 98                             ghi   r8
(1)  585/    2290 : 77                             smb
(1)  586/    2291 : CB 22 BC                       lbnf  div_nope              ; jump if div was smaller
(1)  587/    2294 : 8B                             glo   FB                    ; div -= man
(1)  588/    2295 : 52                             str   r2
(1)  589/    2296 : 89                             glo   F9
(1)  590/    2297 : F7                             sm
(1)  591/    2298 : A9                             plo   F9
(1)  592/    2299 : 9B                             ghi   FB
(1)  593/    229A : 52                             str   r2
(1)  594/    229B : 99                             ghi   F9
(1)  595/    229C : 77                             smb
(1)  596/    229D : B9                             phi   F9
(1)  597/    229E : 8A                             glo   R10
(1)  598/    229F : 52                             str   r2
(1)  599/    22A0 : 88                             glo   r8
(1)  600/    22A1 : 77                             smb
(1)  601/    22A2 : A8                             plo   r8
(1)  602/    22A3 : 9A                             ghi   R10
(1)  603/    22A4 : 52                             str   r2
(1)  604/    22A5 : 98                             ghi   r8
(1)  605/    22A6 : 77                             smb
(1)  606/    22A7 : B8                             phi   r8
(1)  607/    22A8 : 9F                             ghi   R15                    ; merge quotient into result
(1)  608/    22A9 : 52                             str   r2
(1)  609/    22AA : 9C                             ghi   R12
(1)  610/    22AB : F1                             or
(1)  611/    22AC : BC                             phi   R12
(1)  612/    22AD : 8F                             glo   R15
(1)  613/    22AE : 52                             str   r2
(1)  614/    22AF : 8C                             glo   R12
(1)  615/    22B0 : F1                             or
(1)  616/    22B1 : AC                             plo   R12
(1)  617/    22B2 : 9D                             ghi   R13
(1)  618/    22B3 : 52                             str   r2
(1)  619/    22B4 : 97                             ghi   F7
(1)  620/    22B5 : F1                             or
(1)  621/    22B6 : B7                             phi   F7
(1)  622/    22B7 : 8D                             glo   R13
(1)  623/    22B8 : 52                             str   r2
(1)  624/    22B9 : 87                             glo   F7
(1)  625/    22BA : F1                             or
(1)  626/    22BB : A7                             plo   F7
(1)  627/    22BC : D4                  div_nope:  sep   RCALL                 ; shift quotient right
(1)  628/    22BD : 20 A3                          dw    fp_shr_fd
(1)  629/    22BF : 9A                             ghi   R10                    ; shift divisor right
(1)  630/    22C0 : F6                             shr
(1)  631/    22C1 : BA                             phi   R10
(1)  632/    22C2 : 8A                             glo   R10
(1)  633/    22C3 : 76                             shrc
(1)  634/    22C4 : AA                             plo   R10
(1)  635/    22C5 : 9B                             ghi   FB
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 42 - 3/28/2013 8:52:10


(1)  636/    22C6 : 76                             shrc
(1)  637/    22C7 : BB                             phi   FB
(1)  638/    22C8 : 8B                             glo   FB
(1)  639/    22C9 : 76                             shrc
(1)  640/    22CA : AB                             plo   FB
(1)  641/    22CB : C0 22 5B                       lbr   div_lp                ; loop back until done
(1)  642/    22CE : 9C                  div_z:     ghi   R12                    ; move result to arg1
(1)  643/    22CF : B8                             phi   r8
(1)  644/    22D0 : 8C                             glo   R12
(1)  645/    22D1 : A8                             plo   r8
(1)  646/    22D2 : 97                             ghi   F7
(1)  647/    22D3 : B9                             phi   F9
(1)  648/    22D4 : 87                             glo   F7
(1)  649/    22D5 : A9                             plo   F9
(1)  650/    22D6 : 60                             irx                         ; recover sign
(1)  651/    22D7 : 72                             ldxa
(1)  652/    22D8 : A7                             plo   F7
(1)  653/    22D9 : F0                             ldx                         ; recover answer exponent
(1)  654/    22DA : BF                             phi   R15
(1)  655/    22DB : C0 20 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  656/    22DE :                     
(1)  657/    22DE :                     ; ***************************************
(1)  658/    22DE :                     ; *** Mul 2 SP floating point numbers ***
(1)  659/    22DE :                     ; *** R8:F9 - Arg 1                   ***
(1)  660/    22DE :                     ; *** RA:FB - Arg 2                   ***
(1)  661/    22DE :                     ; *** Returns: R8:F9 - Answer         ***
(1)  662/    22DE :                     ; *** Usage: RF.0 - exponent of arg1  ***
(1)  663/    22DE :                     ; ***        RF.1 - exponent of arg2  ***
(1)  664/    22DE :                     ; ***        F7.0 - signs             ***
(1)  665/    22DE :                     ; ***************************************
(1)  666/    22DE : (MACRO)             fp_mul:    pushr F7	;wjr save the C variable
(1)  667/    22E3 : (MACRO)             	   pushr R12	;wjr save param regs
(1)  668/    22E8 : (MACRO)             	   pushr R13	;wjr
(1)  669/    22ED : 22                  	   dec r2	;wjr make a work area -r7 is restores and 2 inc'd in the cleanup routine fp_sc_up
(1)  670/    22EE :                     
(1)  671/    22EE : (MACRO)                        Ccall    fp_getexp	       ; get exponents
(1)  672/    22F1 : (MACRO)                        Ccall    fp_getsgn            ; get signs
(1)  673/    22F4 : 8F                             glo   R15                    ; get exp2
(1)  674/    22F5 : FF 7F                          smi   127                   ; remove bias
(1)  675/    22F7 : 52                             str   r2                    ; place into memory
(1)  676/    22F8 : 9F                             ghi   R15                    ; get exp1
(1)  677/    22F9 : FF 7F                          smi   127                   ; remove bias
(1)  678/    22FB : F4                             add                         ; add in exponent 2
(1)  679/    22FC : FC 7F                          adi   127                   ; put bias back in
(1)  680/    22FE : 73                             stxd                        ; place onto stack
(1)  681/    22FF : 87                             glo   F7                    ; determine sign for answer
(1)  682/    2300 : 52                             str   r2
(1)  683/    2301 : F6                             shr
(1)  684/    2302 : F3                             xor
(1)  685/    2303 : 73                             stxd                        ; place onto stack
(1)  686/    2304 : 9E                             ghi   R14                    ; get baud constant
(1)  687/    2305 : 73                             stxd                        ; save on stack
(1)  688/    2306 : 96                             ghi   r6                    ; save return position on stack
(1)  689/    2307 : 73                             stxd
(1)  690/    2308 : 86                             glo   r6
(1)  691/    2309 : 73                             stxd
(1)  692/    230A : F8 00                          ldi   0                     ; initial value of ct
(1)  693/    230C : 73                             stxd
(1)  694/    230D : BE                             phi   R14                    ; set mulH to 0
(1)  695/    230E : AE                             plo   R14
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 43 - 3/28/2013 8:52:10


(1)  696/    230F : B6                             phi   r6
(1)  697/    2310 : A6                             plo   r6
(1)  698/    2311 : B8                             phi   r8                    ; mulL = arg1 & 0xffffff
(1)  699/    2312 : 88                             glo   r8                    ; be sure high bit is set
(1)  700/    2313 : F9 80                          ori   080h
(1)  701/    2315 : A8                             plo   r8
(1)  702/    2316 : F8 00                          ldi   0
(1)  703/    2318 : BC                             phi   R12                    ; set result to 0
(1)  704/    2319 : AC                             plo   R12
(1)  705/    231A : B7                             phi   F7
(1)  706/    231B : A7                             plo   F7
(1)  707/    231C : BF                             phi   R15
(1)  708/    231D : AF                             plo   R15
(1)  709/    231E : BD                             phi   R13
(1)  710/    231F : AD                             plo   R13
(1)  711/    2320 : BA                             phi   R10                    ; arg2 &= 0ffffff
(1)  712/    2321 : 8A                             glo   R10                    ; be sure high bit is set
(1)  713/    2322 : F9 80                          ori   080h
(1)  714/    2324 : AA                             plo   R10
(1)  715/    2325 : 8B                  mul_lp1:   glo   FB                    ; check for zero multiplier
(1)  716/    2326 : CA 23 35                       lbnz  mul_go1               ; jump if not zero
(1)  717/    2329 : 9B                             ghi   FB
(1)  718/    232A : CA 23 35                       lbnz  mul_go1
(1)  719/    232D : 8A                             glo   R10
(1)  720/    232E : CA 23 35                       lbnz  mul_go1
(1)  721/    2331 : 9A                             ghi   R10
(1)  722/    2332 : C2 23 AD                       lbz   mul_dn                ; jump if muliplier is zero
(1)  723/    2335 : 9A                  mul_go1:   ghi   R10                    ; shift multiplier right
(1)  724/    2336 : F6                             shr
(1)  725/    2337 : BA                             phi   R10
(1)  726/    2338 : 8A                             glo   R10
(1)  727/    2339 : 76                             shrc
(1)  728/    233A : AA                             plo   R10
(1)  729/    233B : 9B                             ghi   FB
(1)  730/    233C : 76                             shrc
(1)  731/    233D : BB                             phi   FB
(1)  732/    233E : 8B                             glo   FB
(1)  733/    233F : 76                             shrc
(1)  734/    2340 : AB                             plo   FB
(1)  735/    2341 : CB 23 82                       lbnf  mul_no                ; jump if low bit was zero
(1)  736/    2344 : 89                             glo   F9                    ; res += mul
(1)  737/    2345 : 52                             str   r2
(1)  738/    2346 : 87                             glo   F7
(1)  739/    2347 : F4                             add
(1)  740/    2348 : A7                             plo   F7
(1)  741/    2349 : 99                             ghi   F9
(1)  742/    234A : 52                             str   r2
(1)  743/    234B : 97                             ghi   F7
(1)  744/    234C : 74                             adc
(1)  745/    234D : B7                             phi   F7
(1)  746/    234E : 88                             glo   r8
(1)  747/    234F : 52                             str   r2
(1)  748/    2350 : 8C                             glo   R12
(1)  749/    2351 : 74                             adc
(1)  750/    2352 : AC                             plo   R12
(1)  751/    2353 : 98                             ghi   r8
(1)  752/    2354 : 52                             str   r2
(1)  753/    2355 : 9C                             ghi   R12
(1)  754/    2356 : 74                             adc
(1)  755/    2357 : BC                             phi   R12
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 44 - 3/28/2013 8:52:10


(1)  756/    2358 : 86                             glo   r6                    ; now high 32 bits
(1)  757/    2359 : 52                             str   r2
(1)  758/    235A : 8D                             glo   R13
(1)  759/    235B : F4                             add
(1)  760/    235C : AD                             plo   R13
(1)  761/    235D : 96                             ghi   r6
(1)  762/    235E : 52                             str   r2
(1)  763/    235F : 96                             ghi   r6
(1)  764/    2360 : 52                             str   r2
(1)  765/    2361 : 9D                             ghi   R13
(1)  766/    2362 : 74                             adc
(1)  767/    2363 : BD                             phi   R13
(1)  768/    2364 : 8E                             glo   R14
(1)  769/    2365 : 52                             str   r2
(1)  770/    2366 : 8F                             glo   R15
(1)  771/    2367 : 74                             adc
(1)  772/    2368 : AF                             plo   R15
(1)  773/    2369 : 9E                             ghi   R14
(1)  774/    236A : 52                             str   r2
(1)  775/    236B : 9F                             ghi   R15
(1)  776/    236C : 74                             adc
(1)  777/    236D : BF                             phi   R15
(1)  778/    236E : 9C                             ghi   R12                    ; see if need carry from low to high
(1)  779/    236F : C2 23 82                       lbz   mul_no                ; jump if no carry is needed
(1)  780/    2372 : 8D                             glo   R13                    ; move the carry on over
(1)  781/    2373 : FC 01                          adi   1
(1)  782/    2375 : AD                             plo   R13
(1)  783/    2376 : 9D                             ghi   R13
(1)  784/    2377 : 7C 00                          adci  0
(1)  785/    2379 : BD                             phi   R13
(1)  786/    237A : 8F                             glo   R15
(1)  787/    237B : 7C 00                          adci  0
(1)  788/    237D : AF                             plo   R15
(1)  789/    237E : 9F                             ghi   R15
(1)  790/    237F : 7C 00                          adci  0
(1)  791/    2381 : BF                             phi   R15
(1)  792/    2382 : 60                  mul_no:    irx                         ; recover ct
(1)  793/    2383 : F0                             ldx
(1)  794/    2384 : FC 01                          adi   1                     ; increment by 1
(1)  795/    2386 : 73                             stxd                        ; and put it back
(1)  796/    2387 : 89                             glo   F9                    ; shift mulL left
(1)  797/    2388 : FE                             shl
(1)  798/    2389 : A9                             plo   F9
(1)  799/    238A : 99                             ghi   F9
(1)  800/    238B : 7E                             shlc
(1)  801/    238C : B9                             phi   F9
(1)  802/    238D : 88                             glo   r8
(1)  803/    238E : 7E                             shlc
(1)  804/    238F : A8                             plo   r8
(1)  805/    2390 : 98                             ghi   r8
(1)  806/    2391 : 7E                             shlc
(1)  807/    2392 : B8                             phi   r8
(1)  808/    2393 : 86                             glo   r6                    ; shift mulH left
(1)  809/    2394 : FE                             shl
(1)  810/    2395 : A6                             plo   r6
(1)  811/    2396 : 96                             ghi   r6
(1)  812/    2397 : 7E                             shlc
(1)  813/    2398 : B6                             phi   r6
(1)  814/    2399 : 8E                             glo   R14
(1)  815/    239A : 7E                             shlc
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 45 - 3/28/2013 8:52:10


(1)  816/    239B : AE                             plo   R14
(1)  817/    239C : 9E                             ghi   R14
(1)  818/    239D : 7E                             shlc
(1)  819/    239E : BE                             phi   R14
(1)  820/    239F : 98                             ghi   r8                    ; see if a carry is needed
(1)  821/    23A0 : C2 23 25                       lbz   mul_lp1               ; jump if not
(1)  822/    23A3 : F8 00                          ldi   0                     ; zero the high byte
(1)  823/    23A5 : B8                             phi   r8
(1)  824/    23A6 : 86                             glo   r6                    ; add in the carry
(1)  825/    23A7 : F9 01                          ori   1
(1)  826/    23A9 : A6                             plo   r6
(1)  827/    23AA : C0 23 25                       lbr   mul_lp1               ; loop back for more
(1)  828/    23AD : 60                  mul_dn:    irx                         ; recover ct
(1)  829/    23AE : 72                             ldxa
(1)  830/    23AF : AE                             plo   R14                    ; set aside
(1)  831/    23B0 : 72                             ldxa
(1)  832/    23B1 : A6                             plo   r6
(1)  833/    23B2 : 72                             ldxa
(1)  834/    23B3 : B6                             phi   r6
(1)  835/    23B4 : F0                             ldx
(1)  836/    23B5 : BE                             phi   R14
(1)  837/    23B6 : 9C                             ghi   R12                    ; transfer resL to arg1
(1)  838/    23B7 : B8                             phi   r8
(1)  839/    23B8 : 8C                             glo   R12
(1)  840/    23B9 : A8                             plo   r8
(1)  841/    23BA : 97                             ghi   F7
(1)  842/    23BB : B9                             phi   F9
(1)  843/    23BC : 87                             glo   F7
(1)  844/    23BD : A9                             plo   F9
(1)  845/    23BE : 8E                             glo   R14
(1)  846/    23BF : AC                             plo   R12                    ; put ct into RC.0
(1)  847/    23C0 : 8C                  mul_lp2:   glo   R12                    ; get ct
(1)  848/    23C1 : FF 02                          smi   2                     ; see if <2
(1)  849/    23C3 : CB 23 D7                       lbnf  mul_nxt1              ; jump if so
(1)  850/    23C6 : D4                             sep   RCALL                 ; shift answer to the right
(1)  851/    23C7 : 20 72                          dw    fp_shr_1
(1)  852/    23C9 : D4                             sep   RCALL                 ; shift resH right
(1)  853/    23CA : 20 A3                          dw    fp_shr_fd
(1)  854/    23CC : CB 23 D3                       lbnf  mul_lp2a              ; jump if no carry into low word
(1)  855/    23CF : 88                             glo   r8                    ; set high bit
(1)  856/    23D0 : F9 80                          ori   080h
(1)  857/    23D2 : A8                             plo   r8
(1)  858/    23D3 : 2C                  mul_lp2a:  dec   R12                    ; decrement count
(1)  859/    23D4 : C0 23 C0                       lbr   mul_lp2               ; loop back to keep checking
(1)  860/    23D7 : 60                  mul_nxt1:  irx                         ; recover sign
(1)  861/    23D8 : 72                             ldxa
(1)  862/    23D9 : A7                             plo   F7
(1)  863/    23DA : F0                             ldx                         ; recover answer exponent
(1)  864/    23DB : AC                             plo   R12
(1)  865/    23DC : 9F                  mul_lp3:   ghi   R15                    ; check resH for nonzero
(1)  866/    23DD : CA 23 EF                       lbnz  mul_lp3a
(1)  867/    23E0 : 8F                             glo   R15
(1)  868/    23E1 : CA 23 EF                       lbnz  mul_lp3a
(1)  869/    23E4 : 9D                             ghi   R13
(1)  870/    23E5 : CA 23 EF                       lbnz  mul_lp3a
(1)  871/    23E8 : 8D                             glo   R13
(1)  872/    23E9 : CA 23 EF                       lbnz  mul_lp3a
(1)  873/    23EC : C0 24 00                       lbr   mul_lp4               ; jump if no bits set in resH
(1)  874/    23EF : 1C                  mul_lp3a:  inc   R12                    ; increment exponent
(1)  875/    23F0 : (MACRO)                        Ccall fp_shr_1                ; shift answer to the right
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 46 - 3/28/2013 8:52:10


(1)  876/    23F3 : (MACRO)                        Ccall fp_shr_fd               ; shift resH right
(1)  877/    23F6 : CB 23 DC                       lbnf  mul_lp3               ; jump if no carry into low word
(1)  878/    23F9 : 88                             glo   r8                    ; set high bit
(1)  879/    23FA : F9 80                          ori   080h
(1)  880/    23FC : A8                             plo   r8
(1)  881/    23FD : C0 23 DC                       lbr   mul_lp3
(1)  882/    2400 : 8C                  mul_lp4:   glo   R12                    ; transfer exponent
(1)  883/    2401 : BF                             phi   R15                    ; to high R15
(1)  884/    2402 : C0 20 B0                       lbr   fp_sc_up              ; scale number and build answer
(1)  885/    2405 :                     
(1)  886/    2405 :                     ; ***************************************
(1)  887/    2405 :                     ; *** Convert ascii to floating point ***
(1)  888/    2405 :                     ; *** RF - buffer to ascii text       ***
(1)  889/    2405 :                     ; *** Returns: R8:F9 - number         ***
(1)  890/    2405 :                     ; ***************************************
(1)  891/    2405 : 4F                  fp_atof:   lda   R15                    ; get byte from buffer
(1)  892/    2406 : FF 20                          smi   ' '                   ; check for space
(1)  893/    2408 : C2 24 05                       lbz   fp_atof               ; move past any spaces
(1)  894/    240B : 2F                             dec   R15                    ; point back to nonspace chara
(1)  895/    240C : 0F                             ldn   R15                    ; check for possible sign
(1)  896/    240D : FF 2D                          smi   '-'                   ; first check for minus
(1)  897/    240F : CA 24 19                       lbnz   atof_nm              ; jump if not minus
(1)  898/    2412 : F8 80                          ldi   080h                  ; high bit set for minus
(1)  899/    2414 : 73                             stxd                        ; place onto stack
(1)  900/    2415 : 1F                             inc   R15                    ; move past sign
(1)  901/    2416 : C0 24 23                       lbr   atof_go1              ; and continue
(1)  902/    2419 : F8 00               atof_nm:   ldi   0                     ; indicate positive number
(1)  903/    241B : 73                             stxd                        ; place onto stack
(1)  904/    241C : 0F                             ldn   R15                    ; now check for + sign
(1)  905/    241D : FF 2B                          smi   '+'
(1)  906/    241F : CA 24 23                       lbnz  atof_go1              ; jump if not plus
(1)  907/    2422 : 1F                             inc   R15                    ; move past plus sign
(1)  908/    2423 : F8 00               atof_go1:  ldi   0                     ; setup result
(1)  909/    2425 : B8                             phi   r8
(1)  910/    2426 : A8                             plo   r8
(1)  911/    2427 : B9                             phi   F9
(1)  912/    2428 : A9                             plo   F9
(1)  913/    2429 : 0F                  atof_lp1:  ldn   R15                    ; get next byte from buffer
(1)  914/    242A : (MACRO)                        Ccall f_isnum                ; is it numeric
(1)  915/    242D : CB 24 5A                       lbnf  atof_no1              ; jump if not
(1)  916/    2430 : 98                             ghi   r8                    ; copy arg1 to arg2
(1)  917/    2431 : BA                             phi   R10
(1)  918/    2432 : 88                             glo   r8
(1)  919/    2433 : AA                             plo   R10
(1)  920/    2434 : 99                             ghi   F9
(1)  921/    2435 : BB                             phi   FB
(1)  922/    2436 : 89                             glo   F9
(1)  923/    2437 : AB                             plo   FB
(1)  924/    2438 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 2
(1)  925/    243B : (MACRO)                        Ccall fp_shl_1                 ; multiply arg1 by 4
(1)  926/    243E : (MACRO)                        Ccall fp_add_12                ; multiply arg1 by 5
(1)  927/    2441 : (MACRO)                        Ccall fp_shl_1                ; multiply arg1 by 10
(1)  928/    2444 : 4F                             lda   R15                    ; get number
(1)  929/    2445 : FF 30                          smi   '0'                   ; convert to binary
(1)  930/    2447 : 52                             str   r2                    ; setup for add
(1)  931/    2448 : 89                             glo   F9                    ; add in next digit
(1)  932/    2449 : F4                             add
(1)  933/    244A : A9                             plo   F9
(1)  934/    244B : 99                             ghi   F9                    ; propagate carry
(1)  935/    244C : 7C 00                          adci  0
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 47 - 3/28/2013 8:52:10


(1)  936/    244E : B9                             phi   F9
(1)  937/    244F : 88                             glo   r8
(1)  938/    2450 : 7C 00                          adci  0
(1)  939/    2452 : A8                             plo   r8
(1)  940/    2453 : 98                             ghi   r8
(1)  941/    2454 : 7C 00                          adci  0
(1)  942/    2456 : B8                             phi   r8
(1)  943/    2457 : C0 24 29                       lbr   atof_lp1              ; loop until no more digits
(1)  944/    245A : 0F                  atof_no1:  ldn   R15                    ; check for decimal point
(1)  945/    245B : FF 2E                          smi   '.'
(1)  946/    245D : CA 24 61                       lbnz  atof_ndp              ; jump if none
(1)  947/    2460 : 1F                             inc   R15                    ; move past decimal
(1)  948/    2461 : F8 25               atof_ndp:  ldi   scratch>>8          ; point to scratch area
(1)  949/    2463 : BA                             phi   R10
(1)  950/    2464 : F8 96                          ldi   scratch&255
(1)  951/    2466 : AA                             plo   R10
(1)  952/    2467 : F8 10                          ldi   16                    ; 16 bytes to clear
(1)  953/    2469 : AC                             plo   R12
(1)  954/    246A : F8 00               atof_lpx:  ldi   0
(1)  955/    246C : 5A                             str   R10
(1)  956/    246D : 1A                             inc   R10
(1)  957/    246E : 2C                             dec   R12
(1)  958/    246F : 8C                             glo   R12
(1)  959/    2470 : CA 24 6A                       lbnz  atof_lpx
(1)  960/    2473 : F8 25                          ldi   (scratch+1)>>8      ; point to scratch area
(1)  961/    2475 : BA                             phi   R10
(1)  962/    2476 : F8 97                          ldi   (scratch+1)&255
(1)  963/    2478 : AA                             plo   R10
(1)  964/    2479 : F8 01                          ldi   1                     ; setup count
(1)  965/    247B : AC                             plo   R12
(1)  966/    247C : F8 00                          ldi   0                     ; setup exp flag
(1)  967/    247E : BC                             phi   R12
(1)  968/    247F : 8C                  atof_lp2:  glo   R12                    ; see if done making bcd
(1)  969/    2480 : FF 11                          smi   17
(1)  970/    2482 : C2 24 9B                       lbz   atof_dn3              ; jump if so
(1)  971/    2485 : 0F                             ldn   R15                    ; get character
(1)  972/    2486 : D4                             sep   RCALL                 ; is it numeric
(1)  973/    2487 : 20 62                          dw    f_isnum
(1)  974/    2489 : CB 24 9B                       lbnf  atof_dn3              ; jump if not
(1)  975/    248C : 4F                             lda   R15                    ; get character
(1)  976/    248D : FF 30                          smi   '0'                   ; converto to binary
(1)  977/    248F : 5A                             str   R10                    ; write into bcd area
(1)  978/    2490 : 1A                             inc   R10
(1)  979/    2491 : 1C                             inc   R12                    ; increment count
(1)  980/    2492 : CA 24 7F                       lbnz  atof_lp2              ; loop back until done
(1)  981/    2495 : F8 01                          ldi   1                     ; set non zero flag
(1)  982/    2497 : BC                             phi   R12
(1)  983/    2498 : C0 24 7F                       lbr   atof_lp2
(1)  984/    249B : 9C                  atof_dn3:  ghi   R12                    ; check for non-zero digits
(1)  985/    249C : CA 24 B5                       lbnz  atof_nz
(1)  986/    249F : 98                             ghi   r8                    ; check for non-zero integer
(1)  987/    24A0 : CA 24 B5                       lbnz  atof_nz
(1)  988/    24A3 : 88                             glo   r8
(1)  989/    24A4 : CA 24 B5                       lbnz  atof_nz
(1)  990/    24A7 : 99                             ghi   F9
(1)  991/    24A8 : CA 24 B5                       lbnz  atof_nz
(1)  992/    24AB : 89                             glo   F9
(1)  993/    24AC : CA 24 B5                       lbnz  atof_nz
(1)  994/    24AF : 60                             irx                         ; recover sign
(1)  995/    24B0 : F0                             ldx
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 48 - 3/28/2013 8:52:10


(1)  996/    24B1 : B8                             phi   r8                    ; put in high of zero
(1)  997/    24B2 : C0 25 88                       lbr	atof_end               ; and return
(1)  998/    24B5 : F8 00               atof_nz:   ldi   0                     ; setup dp
(1)  999/    24B7 : BC                             phi   R12
(1) 1000/    24B8 : 98                  atof_lp3:  ghi   r8                    ; check for high bit set
(1) 1001/    24B9 : FA 80                          ani   080h
(1) 1002/    24BB : CA 25 05                       lbnz  atof_dn4              ; jump if so
(1) 1003/    24BE : (MACRO)                        Ccall fp_shl_1                ; shift answer left
(1) 1004/    24C1 : F8 25                          ldi   scratch>>8          ; point to bcd number
(1) 1005/    24C3 : BA                             phi   R10
(1) 1006/    24C4 : F8 96                          ldi   255&scratch
(1) 1007/    24C6 : AA                             plo   R10
(1) 1008/    24C7 : F8 00                          ldi   0                     ; set high byte to zero
(1) 1009/    24C9 : 5A                             str   R10
(1) 1010/    24CA : F8 25                          ldi   (scratch+15)>>8     ; point to last cell
(1) 1011/    24CC : BA                             phi   R10
(1) 1012/    24CD : F8 A5                          ldi   255&(scratch+15)
(1) 1013/    24CF : AA                             plo   R10
(1) 1014/    24D0 : F8 00                          ldi   0                     ; set carry forward
(1) 1015/    24D2 : AE                             plo   R14
(1) 1016/    24D3 : F8 10                          ldi   16                    ; setup count
(1) 1017/    24D5 : AC                             plo   R12
(1) 1018/    24D6 : 8E                  atof_lp4:  glo   R14                    ; get carry
(1) 1019/    24D7 : 52                             str   r2                    ; in memory for add
(1) 1020/    24D8 : 0A                             ldn   R10                    ; get bcd digit
(1) 1021/    24D9 : F4                             add                         ; add in carry
(1) 1022/    24DA : 52                             str   r2                    ; place into memory
(1) 1023/    24DB : 0A                             ldn   R10                    ; recover bcd digit
(1) 1024/    24DC : F4                             add                         ; digit now doubled with carry
(1) 1025/    24DD : 5A                             str   R10                    ; put it back
(1) 1026/    24DE : FF 0A                          smi   10
(1) 1027/    24E0 : CB 24 E7                       lbnf  atof_no4              ; jump if below 10
(1) 1028/    24E3 : 5A                             str   R10                    ; store value - 10
(1) 1029/    24E4 : F8 01                          ldi   1                     ; carry set to 1
(1) 1030/    24E6 : C8                             lskp                        ; skip next instruction
(1) 1031/    24E7 : F8 00               atof_no4:  ldi   0                     ; reset carry
(1) 1032/    24E9 : AE                             plo   R14
(1) 1033/    24EA : 2A                             dec   R10                    ; move to previous digit
(1) 1034/    24EB : 2C                             dec   R12                    ; decrement digit count
(1) 1035/    24EC : 8C                             glo   R12                    ; see if done
(1) 1036/    24ED : CA 24 D6                       lbnz  atof_lp4              ; jump if not
(1) 1037/    24F0 : F8 25                          ldi   scratch>>8	       ; point to first digit
(1) 1038/    24F2 : BA                             phi   R10
(1) 1039/    24F3 : F8 96                          ldi   255&scratch
(1) 1040/    24F5 : AA                             plo   R10
(1) 1041/    24F6 : 0A                             ldn   R10                    ; retrieve it
(1) 1042/    24F7 : C2 24 FE                       lbz   atof_nc4              ; jump if no carry
(1) 1043/    24FA : 89                             glo   F9                    ; add in the carry
(1) 1044/    24FB : F9 01                          ori   1
(1) 1045/    24FD : A9                             plo   F9
(1) 1046/    24FE : 9C                  atof_nc4:  ghi   R12                    ; increment dp
(1) 1047/    24FF : FC 01                          adi   1
(1) 1048/    2501 : BC                             phi   R12
(1) 1049/    2502 : C0 24 B8                       lbr   atof_lp3              ; loop until full
(1) 1050/    2505 : 9C                  atof_dn4:  ghi   R12                    ; get dp
(1) 1051/    2506 : 52                             str   r2                    ; into memory
(1) 1052/    2507 : F8 1F                          ldi   31                    ; need to subtract from 31
(1) 1053/    2509 : F7                             sm
(1) 1054/    250A : FC 7F                          adi   127                   ; add in bias
(1) 1055/    250C : BD                             phi   R13                    ; set aside
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 49 - 3/28/2013 8:52:10


(1) 1056/    250D : 99                             ghi   F9                    ; shift result down 8 bits
(1) 1057/    250E : A9                             plo   F9
(1) 1058/    250F : 88                             glo   r8
(1) 1059/    2510 : B9                             phi   F9
(1) 1060/    2511 : 98                             ghi   r8
(1) 1061/    2512 : FE                             shl                         ; shift out high bit
(1) 1062/    2513 : A8                             plo   r8
(1) 1063/    2514 : 9D                             ghi   R13                    ; get bit 0 of exponent
(1) 1064/    2515 : F6                             shr
(1) 1065/    2516 : B8                             phi   r8                    ; bits 1-7 into high byte
(1) 1066/    2517 : 88                             glo   r8                    ; get mantissa
(1) 1067/    2518 : 76                             shrc                        ; shift in bit 0 of exponent
(1) 1068/    2519 : A8                             plo   r8                    ; and write it
(1) 1069/    251A : 60                             irx                         ; point to sign
(1) 1070/    251B : 98                             ghi   r8                    ; high byte
(1) 1071/    251C : F1                             or                          ; set sign
(1) 1072/    251D : B8                             phi   r8                    ; done with base conversion
(1) 1073/    251E : 0F                             ldn   R15                    ; get next byte
(1) 1074/    251F : FF 65                          smi   'e'                   ; check for exponents
(1) 1075/    2521 : C2 25 2A                       lbz   atof_exp
(1) 1076/    2524 : 0F                             ldn   R15
(1) 1077/    2525 : FF 45                          smi   'E'
(1) 1078/    2527 : CA 25 88                       lbnz  atof_end
(1) 1079/    252A : 1F                  atof_exp:  inc   R15                    ; move past E
(1) 1080/    252B : 0F                             ldn   R15                    ; check for sign
(1) 1081/    252C : FF 2D                          smi   '-'
(1) 1082/    252E : C2 25 3B                       lbz   atof_n
(1) 1083/    2531 : 0F                             ldn   R15
(1) 1084/    2532 : FF 2B                          smi   '+'
(1) 1085/    2534 : C2 25 38                       lbz   atof_p
(1) 1086/    2537 : 2F                             dec   R15                    ; positive if no sign
(1) 1087/    2538 : F8 01               atof_p:    ldi   1                     ; indicate positive exponent
(1) 1088/    253A : C8                             lskp
(1) 1089/    253B : F8 00               atof_n:    ldi   0                     ; indicate negative exponent
(1) 1090/    253D : BC                             phi   R12                    ; place into sign variable
(1) 1091/    253E : 1F                             inc   R15                    ; move past sign
(1) 1092/    253F : F8 00                          ldi   0                     ; setup intial count
(1) 1093/    2541 : AC                             plo   R12
(1) 1094/    2542 : 0F                  atof_lp5:  ldn   R15                    ; get next byte
(1) 1095/    2543 : (MACRO)                        Ccall f_isnum                ; see if numeric
(1) 1096/    2546 : CB 25 58                       lbnf  atof_dn5              ; jump if not
(1) 1097/    2549 : 8C                             glo   R12                    ; make copy of exponent
(1) 1098/    254A : 52                             str   r2
(1) 1099/    254B : F6                             shr                         ; multiply by 2
(1) 1100/    254C : F6                             shr                         ; by 4
(1) 1101/    254D : F4                             add                         ; by 5
(1) 1102/    254E : F6                             shr                         ; by 10
(1) 1103/    254F : 52                             str   r2                    ; put here for add
(1) 1104/    2550 : 4F                             lda   R15                    ; recover number
(1) 1105/    2551 : FF 30                          smi   '0'                   ; convert to binary
(1) 1106/    2553 : F4                             add                         ; add with total
(1) 1107/    2554 : AC                             plo   R12                    ; copy back to R12
(1) 1108/    2555 : C0 25 42                       lbr   atof_lp5              ; loop back until done reading exponent
(1) 1109/    2558 : 8C                  atof_dn5:  glo   R12                    ; see if done
(1) 1110/    2559 : C2 25 88                       lbz   atof_end              ; jump if so
(1) 1111/    255C : 2C                             dec   R12                    ; otherwise decrement count
(1) 1112/    255D : 8C                             glo   R12                    ; save count
(1) 1113/    255E : 73                             stxd
(1) 1114/    255F : 9C                             ghi   R12                    ; save sign
(1) 1115/    2560 : 73                             stxd
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(LCC1802fp.inc) - page 50 - 3/28/2013 8:52:10


(1) 1116/    2561 : 8F                             glo   R15
(1) 1117/    2562 : 73                             stxd
(1) 1118/    2563 : 9F                             ghi   R15
(1) 1119/    2564 : 73                             stxd
(1) 1120/    2565 : F8 41                          ldi   041h                  ; setup 10.0
(1) 1121/    2567 : BA                             phi   R10
(1) 1122/    2568 : F8 20                          ldi   020h
(1) 1123/    256A : AA                             plo   R10
(1) 1124/    256B : F8 00                          ldi   0
(1) 1125/    256D : BB                             phi   FB
(1) 1126/    256E : AB                             plo   FB
(1) 1127/    256F : 9C                             ghi   R12
(1) 1128/    2570 : C2 25 79                       lbz   atof_div              ; jump if negative
(1) 1129/    2573 : (MACRO)                        Ccall fp_mul                 ; multiply by 10
(1) 1130/    2576 : C0 25 7C                       lbr   atof_go5              ; clean up call
(1) 1131/    2579 : (MACRO)             atof_div:  Ccall fp_div                 ; divice by 10
(1) 1132/    257C : 60                  atof_go5:  irx                         ; recover variables
(1) 1133/    257D : 72                             ldxa
(1) 1134/    257E : BF                             phi   R15
(1) 1135/    257F : 72                             ldxa
(1) 1136/    2580 : AF                             plo   R15
(1) 1137/    2581 : 72                             ldxa
(1) 1138/    2582 : BC                             phi   R12
(1) 1139/    2583 : F0                             ldx
(1) 1140/    2584 : AC                             plo   R12
(1) 1141/    2585 : C0 25 58                       lbr   atof_dn5              ; loop until exponent is zero
(1) 1142/    2588 :                     atof_end:
(1) 1143/    2588 : 12                  	   inc	r2	;wjr release work area
(1) 1144/    2589 : (MACRO)             	   popr R13	;wjr restore param regs
(1) 1145/    258D : (MACRO)             	   popr R12	;wjr
(1) 1146/    2591 : (MACRO)             	   popr	F7	;wjr restore c variable
(1) 1147/    2595 : (MACRO)             	   Cretn
(1) 1148/    2596 : 00 00               scratch:   db	00,00
    1305/    2598 :                     	include IO1802.inc
(1)    1/    2598 :                     ;IO1802.inc contains input/output runtime routines for LCC1802
(1)    2/    2598 :                     ;The port is in regArg1, the output byte is in regArg2
(1)    3/    2598 :                     	align 64
(1)    4/    25C0 :                     _putc:
(1)    5/    25C0 :                     _out5:	
(1)    6/    25C0 : 8C                  	glo	regArg1
(1)    7/    25C1 : 22                  	dec	sp
(1)    8/    25C2 : 52                  	str	sp
(1)    9/    25C3 : 65                  	out	5
(1)   10/    25C4 : (MACRO)             	Cretn
(1)   11/    25C5 :                     _inp:		;raw port input
(1)   12/    25C5 :                     		;stores a small tailored program on the stack and executes it
(1)   13/    25C5 : 22                  	dec	sp	;work backwards
(1)   14/    25C6 : F8 D3               	ldi	0xD3	;return instruction
(1)   15/    25C8 : 73                  	stxd		
(1)   16/    25C9 : 8C                  	glo	regarg1	;get the port number
(1)   17/    25CA : FA 07               	ani	0x07	;clean it
(1)   18/    25CC : 32 DC               	bz	+	; inp(0) isn't valid
(1)   19/    25CE : F9 68               	ori	0x68	;make it an input instruction
(1)   20/    25D0 : 73                  	stxd		;store it for execution
(1)   21/    25D1 : (MACRO)             	cpy2	rt1,sp	;rt1&sp now point to an empty byte to be overwritten by the inp instruction
(1)   22/    25D5 : 18                  	inc	rt1	;rt1 points to the 6x instruction
(1)   23/    25D6 : D8                  	sep	rt1	;execute it
(1)   24/    25D7 :                     ;we will come back to here with the input byte in D
(1)   25/    25D7 : 12                  	inc	sp	;step over the work area
(1)   26/    25D8 : AF                  	plo	retVal	;save it to return
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm(IO1802.inc) - page 51 - 3/28/2013 8:52:10


(1)   27/    25D9 : F8 00               	ldi	0
(1)   28/    25DB : BF                  	phi	retval	;clear top byte
(1)   29/    25DC : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   30/    25DD : 12                  	inc	sp	;and the D3
(1)   31/    25DE : (MACRO)             	Cretn		;and we're done
(1)   32/    25DF :                     	
(1)   33/    25DF :                     _out:		;raw port output
(1)   34/    25DF :                     		;stores a small tailored program on the stack and executes it
(1)   35/    25DF : 22                  	dec	sp	;work backwards
(1)   36/    25E0 : F8 D3               	ldi	0xD3	;return instruction
(1)   37/    25E2 : 73                  	stxd		
(1)   38/    25E3 : (MACRO)             	cpy2	rt1,sp	;rt1 will point to the inp instruction
(1)   39/    25E7 : 8C                  	glo	regarg1	;get the port number
(1)   40/    25E8 : FA 07               	ani	0x07	;clean it
(1)   41/    25EA : F9 60               	ori	0x60	;make it an out instruction - 60 is harmless
(1)   42/    25EC : 73                  	stxd		;store it for execution
(1)   43/    25ED : 8D                  	glo	regarg2	;get the byte to be written
(1)   44/    25EE : 52                  	str	sp	;store it where sp points
(1)   45/    25EF : D8                  	sep	rt1	;execute it
(1)   46/    25F0 :                     ;we will come back to here with sp stepped up by one
(1)   47/    25F0 : 12                  +	inc	sp	;need to get rid of the 6x instruction
(1)   48/    25F1 : 12                  	inc	sp	;and the D3
(1)   49/    25F2 : (MACRO)             	Cretn		;and we're done
(1)   50/    25F3 :                     	
(1)   51/    25F3 :                     	
    1306/    25F3 :                     
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 52 - 3/28/2013 8:52:10


  symbol table (* = unused):
  ------------------------

 ADD_A1NZ :                    2107 C |  ADD_A2NZ :                    2118 C |
 ADD_FNL :                     21BF C |  ADD_LP1 :                     2162 C |
 ADD_LP1DN :                   2177 C |  ADD_NM :                      2186 C |
 ADD_NO :                      21A8 C |  ADD_NS :                      2150 C |
 ADD_NX :                      21DE C |  ADD_NZ :                      21D0 C |
*ARCHITECTURE :  i386-unknown-win32 - |  ATOF_DIV :                    2579 C |
 ATOF_DN3 :                    249B C |  ATOF_DN4 :                    2505 C |
 ATOF_DN5 :                    2558 C |  ATOF_END :                    2588 C |
 ATOF_EXP :                    252A C |  ATOF_GO1 :                    2423 C |
 ATOF_GO5 :                    257C C |  ATOF_LP1 :                    2429 C |
 ATOF_LP2 :                    247F C |  ATOF_LP3 :                    24B8 C |
 ATOF_LP4 :                    24D6 C |  ATOF_LP5 :                    2542 C |
 ATOF_LPX :                    246A C |  ATOF_N :                      253B C |
 ATOF_NC4 :                    24FE C |  ATOF_NDP :                    2461 C |
 ATOF_NM :                     2419 C |  ATOF_NO1 :                    245A C |
 ATOF_NO4 :                    24E7 C |  ATOF_NZ :                     24B5 C |
 ATOF_P :                      2538 C | *BIGENDIAN :                      0 - |
 BITLOOP181 :                  1DAC C | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CHECK_SUB179 :                1C96 C |
 CKNEXT181 :                   1DF0 C |  CKTOP181 :                    1D97 C |
 CLRLP181 :                    1D88 C | *CONSTPI :        3.141592653589793 - |
 CVFI4 :                       2000 C |  CVIF4 :                       1F00 C |
*DATE :                   3/28/2013 - |  DCKLP181 :                    1DAF C |
 DIVLOOP16_16176 :             1B52 C | *DIVSETBIT16_16176 :           1B84 C |
 DIVSKIP16_16176 :             1B81 C |  DIVSKIPCLEAR16_16176 :        1B88 C |
 DIVSKIPFINALADD16_16176 :     1B9A C |  DIVSUB16_16176 :              1B73 C |
 DIV_A1NZ :                    21FC C |  DIV_A2NZ :                    221A C |
 DIV_GO :                      2281 C |  DIV_GO1 :                     226E C |
 DIV_LP :                      225B C |  DIV_NOPE :                    22BC C |
 DIV_Z :                       22CE C |  DNOADD181 :                   1DB7 C |
 DONE177 :                     1BD3 C |  DONE180 :                     1D74 C |
 DONE181 :                     1DFA C |  DONE187 :                     1F6F C |
 DONE188 :                     2061 C |  DSHLP181 :                    1DCB C |
 ENDLP178 :                    1C61 C |  F7 :                             7 - |
 F9 :                             9 - |  FAILS :                       206E C |
*FALSE :                          0 - |  FB :                             B - |
 FP_ADD :                      20EE C |  FP_ADD_12 :                   208C C |
 FP_ATOF :                     2405 C |  FP_DIV :                      21EB C |
 FP_GETEXP :                   20DC C |  FP_GETSGN :                   20E7 C |
 FP_MUL :                      22DE C |  FP_SC_CLN :                   20C0 C |
 FP_SC_UP :                    20B0 C |  FP_SHL_1 :                    207F C |
 FP_SHR_1 :                    2072 C |  FP_SHR_FD :                   20A3 C |
 FP_SUB :                      21E4 C | *FULLPMMU :                       1 - |
 F_ISNUM :                     2062 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 L1 :                            5B C |  L10 :                          139 C |
 L100 :                        187F C |  L102 :                        1636 C |
 L103 :                        1653 C |  L104 :                        1674 C |
 L105 :                        1696 C |  L106 :                        1704 C |
 L107 :                        186E C |  L109 :                        1762 C |
 L11 :                          146 C |  L111 :                        1795 C |
 L112 :                        1869 C | *L113 :                        1584 C |
 L114 :                        15E3 C | *L115 :                        15BC C |
*L116 :                        161B C | *L117 :                        18DE C |
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 53 - 3/28/2013 8:52:10


 L118 :                        1A3D C |  L119 :                        18DB C |
 L12 :                          1FC C | *L120 :                        18DB C |
*L122 :                        1986 C |  L123 :                        1918 C |
 L124 :                        1965 C |  L126 :                        1982 C |
*L127 :                        19E6 C |  L128 :                        19BB C |
 L129 :                        19D1 C |  L13 :                          225 C |
*L131 :                        1A34 C |  L132 :                        1A10 C |
 L133 :                        1A1F C |  L14 :                         1AB8 C |
 L15 :                         1AB4 C |  L16 :                          225 C |
 L18 :                          27D C |  L20 :                          2B0 C |
*L21 :                          2EA C |  L23 :                          304 C |
 L24 :                         1AA8 C |  L26 :                          3FE C |
 L27 :                          424 C |  L28 :                         1AA4 C |
 L29 :                         1AA0 C |  L31 :                          8EF C |
 L32 :                          925 C |  L33 :                         1A7A C |
 L34 :                          9CE C |  L35 :                          AB9 C |
 L38 :                          BAA C |  L39 :                          B39 C |
 L4 :                            40 C |  L40 :                          B96 C |
 L42 :                          E3A C |  L44 :                          BFC C |
 L45 :                          CE7 C |  L47 :                          D2D C |
 L48 :                          D67 C |  L5 :                            42 C |
 L51 :                          E3A C |  L52 :                          DC9 C |
 L53 :                          E26 C |  L56 :                          E70 C |
 L57 :                          E7D C | *L58 :                          FD7 C |
 L59 :                         1A6C C |  L60 :                         1A46 C |
*L61 :                         100F C |  L62 :                          FF2 C |
*L63 :                          FF2 C |  L65 :                          FF4 C |
*L66 :                         1056 C |  L67 :                         1022 C |
 L68 :                         1041 C | *L7 :                           EAD C |
*L70 :                         1203 C |  L71 :                         1121 C |
 L72 :                         1131 C |  L73 :                         113A C |
 L74 :                         11DB C |  L76 :                         1141 C |
*L77 :                         1141 C |  L79 :                         114E C |
 L8 :                            60 C |  L80 :                         11C6 C |
 L83 :                         1183 C | *L84 :                         12CD C |
 L85 :                         129A C | *L87 :                         1319 C |
*L88 :                         1379 C | *L89 :                         140C C |
 L90 :                         13E7 C |  L91 :                         140C C |
*L92 :                         148A C | *L93 :                         18A0 C |
 L94 :                         14D2 C |  L95 :                         187F C |
 L97 :                         150E C |  L98 :                         187F C |
 L99 :                         186E C |  LCC1802INIT :                 1ABC C |
*LISTON :                         1 - |  LOOP178 :                     1C0F C |
 LSH188 :                      202B C | *MACEXP :                         0 - |
 MEMADDR :                        E - |  MLOOP179 :                    1C77 C |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
 MSLP174 :                     1B1E C |  MULTLOOP16_16175 :            1B2B C |
 MULTSKIP16_16175 :            1B3D C |  MUL_DN :                      23AD C |
 MUL_GO1 :                     2335 C |  MUL_LP1 :                     2325 C |
 MUL_LP2 :                     23C0 C |  MUL_LP2A :                    23D3 C |
 MUL_LP3 :                     23DC C |  MUL_LP3A :                    23EF C |
 MUL_LP4 :                     2400 C |  MUL_NO :                      2382 C |
 MUL_NXT1 :                    23D7 C | *NESTMAX :                      100 - |
 NORESTORE178 :                1C5D C |  NXT187 :                      1F30 C |
*PACKING :                        0 - | *PADDING :                        1 - |
*PASSES :                      206B C |  POS1177 :                     1BB3 C |
 POS1180 :                     1D26 C |  POS2177 :                     1BC3 C |
 POS2180 :                     1D4D C |  R0 :                             0 - |
 R1 :                             1 - |  R10 :                            A - |
 R11 :                            B - |  R12 :                            C - |
 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 54 - 3/28/2013 8:52:10


 R13 :                            D - |  R14 :                            E - |
 R15 :                            F - |  R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
 R9 :                             9 - |  RCALL :                          4 - |
 REGARG1 :                        C - |  REGARG2 :                        D - |
*RELAXED :                        1 - |  RETADDR :                        6 - |
 RETVAL :                         F - |  RL0 :                            1 - |
 RL10 :                           B - |  RL12 :                           D - |
 RL8 :                            9 - |  RP1P2 :                          D - |
 RPC :                            3 - |  RRET :                           5 - |
 RT1 :                            8 - | *RT2 :                            9 - |
 RWORK :                          E - |  SCRATCH :                     2596 C |
 SETSGN187 :                   1F68 C |  SGNPOS187 :                   1F39 C |
 SHDN187 :                     1F5F C |  SHIFT179 :                    1CAE C |
 SHL187 :                      1F4B C |  SHR188 :                      2019 C |
 SIGN188 :                     203B C |  SP :                             2 - |
*TIME :                     8:52:10 - | *TRUE :                           1 - |
 UPNXT181 :                    1DE4 C | *VERSION :                     142F - |
 _00000166 :                   1AD6 C |  _CALL :                       1B01 C |
 _DIE166 :                     1AD9 C |  _DIVI2 :                      1BA4 C |
 _DIVI4 :                      1D00 C |  _DIVU2 :                      1B49 C |
 _DIVU4 :                      1C00 C |  _DUBDABX :                    1D75 C |
*_EXIT :                       18B5 C |  _FTOA :                         E0 C |
 _GBUFFER :                     ED0 C | *_INP :                        25C5 C |
 _ITOA :                       105F C |  _LEN :                         F50 C |
 _LTOA :                       1218 C |  _MAIN :                        F52 C |
*_MEMCMP :                     18E3 C | *_MEMCPY :                     1995 C |
*_MEMSET :                     19F3 C | *_MODI2 :                      1AEA C |
*_MODI4 :                      1E07 C | *_MODU2 :                      1AE2 C |
 _MODU4 :                      1DFB C | *_MULU2 :                      1B23 C |
 _MULU4 :                      1C66 C |  _MY_STRLEN :                    24 C |
*_ONEMS :                      1B1C C |  _OUT :                        25DF C |
*_OUT4 :                       1AF2 C | *_OUT5 :                       25C0 C |
 _PI :                          ECC C |  _PRINTF :                     148F C |
 _PRINTINT :                   12E0 C |  _PRINTLINT :                  1322 C |
 _PRINTSTR :                   1012 C |  _PUTC :                       25C0 C |
 _PUTX :                       1411 C |  _PUTXN :                      1382 C |
 _RETURN :                     1B12 C |  _ROUND_NUMS :                    4 C |
*_SETQOFF :                    1AE0 C | *_SETQON :                     1ADE C |
 _STRCPY :                      FE0 C |  __FORW5 :                     25DC C |
*__FORW6 :                     25F0 C |

    319 symbols
     70 unused symbols

 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 55 - 3/28/2013 8:52:10


  defined macros:
  ---------------

ALU2                                  | ALU2I                                
ALU4                                  | ALU4I                                
BLKCPY                                | CCALL                                
CPY1                                  | CPY2                                 
CPY4                                  | CRETN                                
DECM                                  | INC4                                 
INCM                                  | JCF4                                 
JCI2                                  | JCI2I                                
JCI4                                  | JCU2                                 
JCU2I                                 | JCU4                                 
JEQI2                                 | JEQI4                                
JEQU2I                                | JNEU2                                
JNEU2I                                | JNEU4                                
JNI2I                                 | JNU2I                                
JNZU2                                 | JZU2                                 
LD1                                   | LD2                                  
LD2Z                                  | LD4                                  
LDA2                                  | LDAD                                 
LDAX                                  | LDI4                                 
LDIREG                                | LDN1                                 
NEGI2                                 | NEGI4                                
POPR                                  | PUSHR                                
RELEASE                               | RELEASEL                             
RELEASES                              | RESERVE                              
RESERVEL                              | RESERVES                             
RLDMI                                 | SAVMI                                
SEXT                                  | SEXT4                                
SHL2                                  | SHL2I                                
SHL2R                                 | SHL4                                 
SHL4I                                 | SHL4R                                
SHLC4                                 | SHRC4                                
SHRI2                                 | SHRI2I                               
SHRI2R                                | SHRI4                                
SHRI4I                                | SHRI4R                               
SHRU2                                 | SHRU2I                               
SHRU2R                                | SHRU4                                
SHRU4I                                | SHRU4R                               
ST1                                   | ST2                                  
ST4                                   | STR1                                 
ZEXT                                  | ZEXT4                                

     80 macros

 AS V1.42 Beta [Bld 87] - source file prtfloat.asm - page 56 - 3/28/2013 8:52:10


  codepages:
  ----------

STANDARD (0 changed characters)


0.10 seconds assembly time

   3812 lines source file
  11671 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
